# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Quantity.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Quantity', [dirname(__file__)])
        except ImportError:
            import _Quantity
            return _Quantity
        if fp is not None:
            try:
                _mod = imp.load_module('_Quantity', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Quantity = swig_import_helper()
    del swig_import_helper
else:
    import _Quantity
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Quantity.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Quantity.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Quantity.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Quantity.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Quantity.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Quantity.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Quantity.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Quantity.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Quantity.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Quantity.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Quantity.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Quantity.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Quantity.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Quantity.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Quantity.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Quantity.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Quantity.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Quantity.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt

_Quantity.Quantity_NOC_BLACK_swigconstant(_Quantity)
Quantity_NOC_BLACK = _Quantity.Quantity_NOC_BLACK

_Quantity.Quantity_NOC_MATRABLUE_swigconstant(_Quantity)
Quantity_NOC_MATRABLUE = _Quantity.Quantity_NOC_MATRABLUE

_Quantity.Quantity_NOC_MATRAGRAY_swigconstant(_Quantity)
Quantity_NOC_MATRAGRAY = _Quantity.Quantity_NOC_MATRAGRAY

_Quantity.Quantity_NOC_ALICEBLUE_swigconstant(_Quantity)
Quantity_NOC_ALICEBLUE = _Quantity.Quantity_NOC_ALICEBLUE

_Quantity.Quantity_NOC_ANTIQUEWHITE_swigconstant(_Quantity)
Quantity_NOC_ANTIQUEWHITE = _Quantity.Quantity_NOC_ANTIQUEWHITE

_Quantity.Quantity_NOC_ANTIQUEWHITE1_swigconstant(_Quantity)
Quantity_NOC_ANTIQUEWHITE1 = _Quantity.Quantity_NOC_ANTIQUEWHITE1

_Quantity.Quantity_NOC_ANTIQUEWHITE2_swigconstant(_Quantity)
Quantity_NOC_ANTIQUEWHITE2 = _Quantity.Quantity_NOC_ANTIQUEWHITE2

_Quantity.Quantity_NOC_ANTIQUEWHITE3_swigconstant(_Quantity)
Quantity_NOC_ANTIQUEWHITE3 = _Quantity.Quantity_NOC_ANTIQUEWHITE3

_Quantity.Quantity_NOC_ANTIQUEWHITE4_swigconstant(_Quantity)
Quantity_NOC_ANTIQUEWHITE4 = _Quantity.Quantity_NOC_ANTIQUEWHITE4

_Quantity.Quantity_NOC_AQUAMARINE1_swigconstant(_Quantity)
Quantity_NOC_AQUAMARINE1 = _Quantity.Quantity_NOC_AQUAMARINE1

_Quantity.Quantity_NOC_AQUAMARINE2_swigconstant(_Quantity)
Quantity_NOC_AQUAMARINE2 = _Quantity.Quantity_NOC_AQUAMARINE2

_Quantity.Quantity_NOC_AQUAMARINE4_swigconstant(_Quantity)
Quantity_NOC_AQUAMARINE4 = _Quantity.Quantity_NOC_AQUAMARINE4

_Quantity.Quantity_NOC_AZURE_swigconstant(_Quantity)
Quantity_NOC_AZURE = _Quantity.Quantity_NOC_AZURE

_Quantity.Quantity_NOC_AZURE2_swigconstant(_Quantity)
Quantity_NOC_AZURE2 = _Quantity.Quantity_NOC_AZURE2

_Quantity.Quantity_NOC_AZURE3_swigconstant(_Quantity)
Quantity_NOC_AZURE3 = _Quantity.Quantity_NOC_AZURE3

_Quantity.Quantity_NOC_AZURE4_swigconstant(_Quantity)
Quantity_NOC_AZURE4 = _Quantity.Quantity_NOC_AZURE4

_Quantity.Quantity_NOC_BEIGE_swigconstant(_Quantity)
Quantity_NOC_BEIGE = _Quantity.Quantity_NOC_BEIGE

_Quantity.Quantity_NOC_BISQUE_swigconstant(_Quantity)
Quantity_NOC_BISQUE = _Quantity.Quantity_NOC_BISQUE

_Quantity.Quantity_NOC_BISQUE2_swigconstant(_Quantity)
Quantity_NOC_BISQUE2 = _Quantity.Quantity_NOC_BISQUE2

_Quantity.Quantity_NOC_BISQUE3_swigconstant(_Quantity)
Quantity_NOC_BISQUE3 = _Quantity.Quantity_NOC_BISQUE3

_Quantity.Quantity_NOC_BISQUE4_swigconstant(_Quantity)
Quantity_NOC_BISQUE4 = _Quantity.Quantity_NOC_BISQUE4

_Quantity.Quantity_NOC_BLANCHEDALMOND_swigconstant(_Quantity)
Quantity_NOC_BLANCHEDALMOND = _Quantity.Quantity_NOC_BLANCHEDALMOND

_Quantity.Quantity_NOC_BLUE1_swigconstant(_Quantity)
Quantity_NOC_BLUE1 = _Quantity.Quantity_NOC_BLUE1

_Quantity.Quantity_NOC_BLUE2_swigconstant(_Quantity)
Quantity_NOC_BLUE2 = _Quantity.Quantity_NOC_BLUE2

_Quantity.Quantity_NOC_BLUE3_swigconstant(_Quantity)
Quantity_NOC_BLUE3 = _Quantity.Quantity_NOC_BLUE3

_Quantity.Quantity_NOC_BLUE4_swigconstant(_Quantity)
Quantity_NOC_BLUE4 = _Quantity.Quantity_NOC_BLUE4

_Quantity.Quantity_NOC_BLUEVIOLET_swigconstant(_Quantity)
Quantity_NOC_BLUEVIOLET = _Quantity.Quantity_NOC_BLUEVIOLET

_Quantity.Quantity_NOC_BROWN_swigconstant(_Quantity)
Quantity_NOC_BROWN = _Quantity.Quantity_NOC_BROWN

_Quantity.Quantity_NOC_BROWN1_swigconstant(_Quantity)
Quantity_NOC_BROWN1 = _Quantity.Quantity_NOC_BROWN1

_Quantity.Quantity_NOC_BROWN2_swigconstant(_Quantity)
Quantity_NOC_BROWN2 = _Quantity.Quantity_NOC_BROWN2

_Quantity.Quantity_NOC_BROWN3_swigconstant(_Quantity)
Quantity_NOC_BROWN3 = _Quantity.Quantity_NOC_BROWN3

_Quantity.Quantity_NOC_BROWN4_swigconstant(_Quantity)
Quantity_NOC_BROWN4 = _Quantity.Quantity_NOC_BROWN4

_Quantity.Quantity_NOC_BURLYWOOD_swigconstant(_Quantity)
Quantity_NOC_BURLYWOOD = _Quantity.Quantity_NOC_BURLYWOOD

_Quantity.Quantity_NOC_BURLYWOOD1_swigconstant(_Quantity)
Quantity_NOC_BURLYWOOD1 = _Quantity.Quantity_NOC_BURLYWOOD1

_Quantity.Quantity_NOC_BURLYWOOD2_swigconstant(_Quantity)
Quantity_NOC_BURLYWOOD2 = _Quantity.Quantity_NOC_BURLYWOOD2

_Quantity.Quantity_NOC_BURLYWOOD3_swigconstant(_Quantity)
Quantity_NOC_BURLYWOOD3 = _Quantity.Quantity_NOC_BURLYWOOD3

_Quantity.Quantity_NOC_BURLYWOOD4_swigconstant(_Quantity)
Quantity_NOC_BURLYWOOD4 = _Quantity.Quantity_NOC_BURLYWOOD4

_Quantity.Quantity_NOC_CADETBLUE_swigconstant(_Quantity)
Quantity_NOC_CADETBLUE = _Quantity.Quantity_NOC_CADETBLUE

_Quantity.Quantity_NOC_CADETBLUE1_swigconstant(_Quantity)
Quantity_NOC_CADETBLUE1 = _Quantity.Quantity_NOC_CADETBLUE1

_Quantity.Quantity_NOC_CADETBLUE2_swigconstant(_Quantity)
Quantity_NOC_CADETBLUE2 = _Quantity.Quantity_NOC_CADETBLUE2

_Quantity.Quantity_NOC_CADETBLUE3_swigconstant(_Quantity)
Quantity_NOC_CADETBLUE3 = _Quantity.Quantity_NOC_CADETBLUE3

_Quantity.Quantity_NOC_CADETBLUE4_swigconstant(_Quantity)
Quantity_NOC_CADETBLUE4 = _Quantity.Quantity_NOC_CADETBLUE4

_Quantity.Quantity_NOC_CHARTREUSE_swigconstant(_Quantity)
Quantity_NOC_CHARTREUSE = _Quantity.Quantity_NOC_CHARTREUSE

_Quantity.Quantity_NOC_CHARTREUSE1_swigconstant(_Quantity)
Quantity_NOC_CHARTREUSE1 = _Quantity.Quantity_NOC_CHARTREUSE1

_Quantity.Quantity_NOC_CHARTREUSE2_swigconstant(_Quantity)
Quantity_NOC_CHARTREUSE2 = _Quantity.Quantity_NOC_CHARTREUSE2

_Quantity.Quantity_NOC_CHARTREUSE3_swigconstant(_Quantity)
Quantity_NOC_CHARTREUSE3 = _Quantity.Quantity_NOC_CHARTREUSE3

_Quantity.Quantity_NOC_CHARTREUSE4_swigconstant(_Quantity)
Quantity_NOC_CHARTREUSE4 = _Quantity.Quantity_NOC_CHARTREUSE4

_Quantity.Quantity_NOC_CHOCOLATE_swigconstant(_Quantity)
Quantity_NOC_CHOCOLATE = _Quantity.Quantity_NOC_CHOCOLATE

_Quantity.Quantity_NOC_CHOCOLATE1_swigconstant(_Quantity)
Quantity_NOC_CHOCOLATE1 = _Quantity.Quantity_NOC_CHOCOLATE1

_Quantity.Quantity_NOC_CHOCOLATE2_swigconstant(_Quantity)
Quantity_NOC_CHOCOLATE2 = _Quantity.Quantity_NOC_CHOCOLATE2

_Quantity.Quantity_NOC_CHOCOLATE3_swigconstant(_Quantity)
Quantity_NOC_CHOCOLATE3 = _Quantity.Quantity_NOC_CHOCOLATE3

_Quantity.Quantity_NOC_CHOCOLATE4_swigconstant(_Quantity)
Quantity_NOC_CHOCOLATE4 = _Quantity.Quantity_NOC_CHOCOLATE4

_Quantity.Quantity_NOC_CORAL_swigconstant(_Quantity)
Quantity_NOC_CORAL = _Quantity.Quantity_NOC_CORAL

_Quantity.Quantity_NOC_CORAL1_swigconstant(_Quantity)
Quantity_NOC_CORAL1 = _Quantity.Quantity_NOC_CORAL1

_Quantity.Quantity_NOC_CORAL2_swigconstant(_Quantity)
Quantity_NOC_CORAL2 = _Quantity.Quantity_NOC_CORAL2

_Quantity.Quantity_NOC_CORAL3_swigconstant(_Quantity)
Quantity_NOC_CORAL3 = _Quantity.Quantity_NOC_CORAL3

_Quantity.Quantity_NOC_CORAL4_swigconstant(_Quantity)
Quantity_NOC_CORAL4 = _Quantity.Quantity_NOC_CORAL4

_Quantity.Quantity_NOC_CORNFLOWERBLUE_swigconstant(_Quantity)
Quantity_NOC_CORNFLOWERBLUE = _Quantity.Quantity_NOC_CORNFLOWERBLUE

_Quantity.Quantity_NOC_CORNSILK1_swigconstant(_Quantity)
Quantity_NOC_CORNSILK1 = _Quantity.Quantity_NOC_CORNSILK1

_Quantity.Quantity_NOC_CORNSILK2_swigconstant(_Quantity)
Quantity_NOC_CORNSILK2 = _Quantity.Quantity_NOC_CORNSILK2

_Quantity.Quantity_NOC_CORNSILK3_swigconstant(_Quantity)
Quantity_NOC_CORNSILK3 = _Quantity.Quantity_NOC_CORNSILK3

_Quantity.Quantity_NOC_CORNSILK4_swigconstant(_Quantity)
Quantity_NOC_CORNSILK4 = _Quantity.Quantity_NOC_CORNSILK4

_Quantity.Quantity_NOC_CYAN1_swigconstant(_Quantity)
Quantity_NOC_CYAN1 = _Quantity.Quantity_NOC_CYAN1

_Quantity.Quantity_NOC_CYAN2_swigconstant(_Quantity)
Quantity_NOC_CYAN2 = _Quantity.Quantity_NOC_CYAN2

_Quantity.Quantity_NOC_CYAN3_swigconstant(_Quantity)
Quantity_NOC_CYAN3 = _Quantity.Quantity_NOC_CYAN3

_Quantity.Quantity_NOC_CYAN4_swigconstant(_Quantity)
Quantity_NOC_CYAN4 = _Quantity.Quantity_NOC_CYAN4

_Quantity.Quantity_NOC_DARKGOLDENROD_swigconstant(_Quantity)
Quantity_NOC_DARKGOLDENROD = _Quantity.Quantity_NOC_DARKGOLDENROD

_Quantity.Quantity_NOC_DARKGOLDENROD1_swigconstant(_Quantity)
Quantity_NOC_DARKGOLDENROD1 = _Quantity.Quantity_NOC_DARKGOLDENROD1

_Quantity.Quantity_NOC_DARKGOLDENROD2_swigconstant(_Quantity)
Quantity_NOC_DARKGOLDENROD2 = _Quantity.Quantity_NOC_DARKGOLDENROD2

_Quantity.Quantity_NOC_DARKGOLDENROD3_swigconstant(_Quantity)
Quantity_NOC_DARKGOLDENROD3 = _Quantity.Quantity_NOC_DARKGOLDENROD3

_Quantity.Quantity_NOC_DARKGOLDENROD4_swigconstant(_Quantity)
Quantity_NOC_DARKGOLDENROD4 = _Quantity.Quantity_NOC_DARKGOLDENROD4

_Quantity.Quantity_NOC_DARKGREEN_swigconstant(_Quantity)
Quantity_NOC_DARKGREEN = _Quantity.Quantity_NOC_DARKGREEN

_Quantity.Quantity_NOC_DARKKHAKI_swigconstant(_Quantity)
Quantity_NOC_DARKKHAKI = _Quantity.Quantity_NOC_DARKKHAKI

_Quantity.Quantity_NOC_DARKOLIVEGREEN_swigconstant(_Quantity)
Quantity_NOC_DARKOLIVEGREEN = _Quantity.Quantity_NOC_DARKOLIVEGREEN

_Quantity.Quantity_NOC_DARKOLIVEGREEN1_swigconstant(_Quantity)
Quantity_NOC_DARKOLIVEGREEN1 = _Quantity.Quantity_NOC_DARKOLIVEGREEN1

_Quantity.Quantity_NOC_DARKOLIVEGREEN2_swigconstant(_Quantity)
Quantity_NOC_DARKOLIVEGREEN2 = _Quantity.Quantity_NOC_DARKOLIVEGREEN2

_Quantity.Quantity_NOC_DARKOLIVEGREEN3_swigconstant(_Quantity)
Quantity_NOC_DARKOLIVEGREEN3 = _Quantity.Quantity_NOC_DARKOLIVEGREEN3

_Quantity.Quantity_NOC_DARKOLIVEGREEN4_swigconstant(_Quantity)
Quantity_NOC_DARKOLIVEGREEN4 = _Quantity.Quantity_NOC_DARKOLIVEGREEN4

_Quantity.Quantity_NOC_DARKORANGE_swigconstant(_Quantity)
Quantity_NOC_DARKORANGE = _Quantity.Quantity_NOC_DARKORANGE

_Quantity.Quantity_NOC_DARKORANGE1_swigconstant(_Quantity)
Quantity_NOC_DARKORANGE1 = _Quantity.Quantity_NOC_DARKORANGE1

_Quantity.Quantity_NOC_DARKORANGE2_swigconstant(_Quantity)
Quantity_NOC_DARKORANGE2 = _Quantity.Quantity_NOC_DARKORANGE2

_Quantity.Quantity_NOC_DARKORANGE3_swigconstant(_Quantity)
Quantity_NOC_DARKORANGE3 = _Quantity.Quantity_NOC_DARKORANGE3

_Quantity.Quantity_NOC_DARKORANGE4_swigconstant(_Quantity)
Quantity_NOC_DARKORANGE4 = _Quantity.Quantity_NOC_DARKORANGE4

_Quantity.Quantity_NOC_DARKORCHID_swigconstant(_Quantity)
Quantity_NOC_DARKORCHID = _Quantity.Quantity_NOC_DARKORCHID

_Quantity.Quantity_NOC_DARKORCHID1_swigconstant(_Quantity)
Quantity_NOC_DARKORCHID1 = _Quantity.Quantity_NOC_DARKORCHID1

_Quantity.Quantity_NOC_DARKORCHID2_swigconstant(_Quantity)
Quantity_NOC_DARKORCHID2 = _Quantity.Quantity_NOC_DARKORCHID2

_Quantity.Quantity_NOC_DARKORCHID3_swigconstant(_Quantity)
Quantity_NOC_DARKORCHID3 = _Quantity.Quantity_NOC_DARKORCHID3

_Quantity.Quantity_NOC_DARKORCHID4_swigconstant(_Quantity)
Quantity_NOC_DARKORCHID4 = _Quantity.Quantity_NOC_DARKORCHID4

_Quantity.Quantity_NOC_DARKSALMON_swigconstant(_Quantity)
Quantity_NOC_DARKSALMON = _Quantity.Quantity_NOC_DARKSALMON

_Quantity.Quantity_NOC_DARKSEAGREEN_swigconstant(_Quantity)
Quantity_NOC_DARKSEAGREEN = _Quantity.Quantity_NOC_DARKSEAGREEN

_Quantity.Quantity_NOC_DARKSEAGREEN1_swigconstant(_Quantity)
Quantity_NOC_DARKSEAGREEN1 = _Quantity.Quantity_NOC_DARKSEAGREEN1

_Quantity.Quantity_NOC_DARKSEAGREEN2_swigconstant(_Quantity)
Quantity_NOC_DARKSEAGREEN2 = _Quantity.Quantity_NOC_DARKSEAGREEN2

_Quantity.Quantity_NOC_DARKSEAGREEN3_swigconstant(_Quantity)
Quantity_NOC_DARKSEAGREEN3 = _Quantity.Quantity_NOC_DARKSEAGREEN3

_Quantity.Quantity_NOC_DARKSEAGREEN4_swigconstant(_Quantity)
Quantity_NOC_DARKSEAGREEN4 = _Quantity.Quantity_NOC_DARKSEAGREEN4

_Quantity.Quantity_NOC_DARKSLATEBLUE_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEBLUE = _Quantity.Quantity_NOC_DARKSLATEBLUE

_Quantity.Quantity_NOC_DARKSLATEGRAY1_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEGRAY1 = _Quantity.Quantity_NOC_DARKSLATEGRAY1

_Quantity.Quantity_NOC_DARKSLATEGRAY2_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEGRAY2 = _Quantity.Quantity_NOC_DARKSLATEGRAY2

_Quantity.Quantity_NOC_DARKSLATEGRAY3_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEGRAY3 = _Quantity.Quantity_NOC_DARKSLATEGRAY3

_Quantity.Quantity_NOC_DARKSLATEGRAY4_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEGRAY4 = _Quantity.Quantity_NOC_DARKSLATEGRAY4

_Quantity.Quantity_NOC_DARKSLATEGRAY_swigconstant(_Quantity)
Quantity_NOC_DARKSLATEGRAY = _Quantity.Quantity_NOC_DARKSLATEGRAY

_Quantity.Quantity_NOC_DARKTURQUOISE_swigconstant(_Quantity)
Quantity_NOC_DARKTURQUOISE = _Quantity.Quantity_NOC_DARKTURQUOISE

_Quantity.Quantity_NOC_DARKVIOLET_swigconstant(_Quantity)
Quantity_NOC_DARKVIOLET = _Quantity.Quantity_NOC_DARKVIOLET

_Quantity.Quantity_NOC_DEEPPINK_swigconstant(_Quantity)
Quantity_NOC_DEEPPINK = _Quantity.Quantity_NOC_DEEPPINK

_Quantity.Quantity_NOC_DEEPPINK2_swigconstant(_Quantity)
Quantity_NOC_DEEPPINK2 = _Quantity.Quantity_NOC_DEEPPINK2

_Quantity.Quantity_NOC_DEEPPINK3_swigconstant(_Quantity)
Quantity_NOC_DEEPPINK3 = _Quantity.Quantity_NOC_DEEPPINK3

_Quantity.Quantity_NOC_DEEPPINK4_swigconstant(_Quantity)
Quantity_NOC_DEEPPINK4 = _Quantity.Quantity_NOC_DEEPPINK4

_Quantity.Quantity_NOC_DEEPSKYBLUE1_swigconstant(_Quantity)
Quantity_NOC_DEEPSKYBLUE1 = _Quantity.Quantity_NOC_DEEPSKYBLUE1

_Quantity.Quantity_NOC_DEEPSKYBLUE2_swigconstant(_Quantity)
Quantity_NOC_DEEPSKYBLUE2 = _Quantity.Quantity_NOC_DEEPSKYBLUE2

_Quantity.Quantity_NOC_DEEPSKYBLUE3_swigconstant(_Quantity)
Quantity_NOC_DEEPSKYBLUE3 = _Quantity.Quantity_NOC_DEEPSKYBLUE3

_Quantity.Quantity_NOC_DEEPSKYBLUE4_swigconstant(_Quantity)
Quantity_NOC_DEEPSKYBLUE4 = _Quantity.Quantity_NOC_DEEPSKYBLUE4

_Quantity.Quantity_NOC_DODGERBLUE1_swigconstant(_Quantity)
Quantity_NOC_DODGERBLUE1 = _Quantity.Quantity_NOC_DODGERBLUE1

_Quantity.Quantity_NOC_DODGERBLUE2_swigconstant(_Quantity)
Quantity_NOC_DODGERBLUE2 = _Quantity.Quantity_NOC_DODGERBLUE2

_Quantity.Quantity_NOC_DODGERBLUE3_swigconstant(_Quantity)
Quantity_NOC_DODGERBLUE3 = _Quantity.Quantity_NOC_DODGERBLUE3

_Quantity.Quantity_NOC_DODGERBLUE4_swigconstant(_Quantity)
Quantity_NOC_DODGERBLUE4 = _Quantity.Quantity_NOC_DODGERBLUE4

_Quantity.Quantity_NOC_FIREBRICK_swigconstant(_Quantity)
Quantity_NOC_FIREBRICK = _Quantity.Quantity_NOC_FIREBRICK

_Quantity.Quantity_NOC_FIREBRICK1_swigconstant(_Quantity)
Quantity_NOC_FIREBRICK1 = _Quantity.Quantity_NOC_FIREBRICK1

_Quantity.Quantity_NOC_FIREBRICK2_swigconstant(_Quantity)
Quantity_NOC_FIREBRICK2 = _Quantity.Quantity_NOC_FIREBRICK2

_Quantity.Quantity_NOC_FIREBRICK3_swigconstant(_Quantity)
Quantity_NOC_FIREBRICK3 = _Quantity.Quantity_NOC_FIREBRICK3

_Quantity.Quantity_NOC_FIREBRICK4_swigconstant(_Quantity)
Quantity_NOC_FIREBRICK4 = _Quantity.Quantity_NOC_FIREBRICK4

_Quantity.Quantity_NOC_FLORALWHITE_swigconstant(_Quantity)
Quantity_NOC_FLORALWHITE = _Quantity.Quantity_NOC_FLORALWHITE

_Quantity.Quantity_NOC_FORESTGREEN_swigconstant(_Quantity)
Quantity_NOC_FORESTGREEN = _Quantity.Quantity_NOC_FORESTGREEN

_Quantity.Quantity_NOC_GAINSBORO_swigconstant(_Quantity)
Quantity_NOC_GAINSBORO = _Quantity.Quantity_NOC_GAINSBORO

_Quantity.Quantity_NOC_GHOSTWHITE_swigconstant(_Quantity)
Quantity_NOC_GHOSTWHITE = _Quantity.Quantity_NOC_GHOSTWHITE

_Quantity.Quantity_NOC_GOLD_swigconstant(_Quantity)
Quantity_NOC_GOLD = _Quantity.Quantity_NOC_GOLD

_Quantity.Quantity_NOC_GOLD1_swigconstant(_Quantity)
Quantity_NOC_GOLD1 = _Quantity.Quantity_NOC_GOLD1

_Quantity.Quantity_NOC_GOLD2_swigconstant(_Quantity)
Quantity_NOC_GOLD2 = _Quantity.Quantity_NOC_GOLD2

_Quantity.Quantity_NOC_GOLD3_swigconstant(_Quantity)
Quantity_NOC_GOLD3 = _Quantity.Quantity_NOC_GOLD3

_Quantity.Quantity_NOC_GOLD4_swigconstant(_Quantity)
Quantity_NOC_GOLD4 = _Quantity.Quantity_NOC_GOLD4

_Quantity.Quantity_NOC_GOLDENROD_swigconstant(_Quantity)
Quantity_NOC_GOLDENROD = _Quantity.Quantity_NOC_GOLDENROD

_Quantity.Quantity_NOC_GOLDENROD1_swigconstant(_Quantity)
Quantity_NOC_GOLDENROD1 = _Quantity.Quantity_NOC_GOLDENROD1

_Quantity.Quantity_NOC_GOLDENROD2_swigconstant(_Quantity)
Quantity_NOC_GOLDENROD2 = _Quantity.Quantity_NOC_GOLDENROD2

_Quantity.Quantity_NOC_GOLDENROD3_swigconstant(_Quantity)
Quantity_NOC_GOLDENROD3 = _Quantity.Quantity_NOC_GOLDENROD3

_Quantity.Quantity_NOC_GOLDENROD4_swigconstant(_Quantity)
Quantity_NOC_GOLDENROD4 = _Quantity.Quantity_NOC_GOLDENROD4

_Quantity.Quantity_NOC_GRAY_swigconstant(_Quantity)
Quantity_NOC_GRAY = _Quantity.Quantity_NOC_GRAY

_Quantity.Quantity_NOC_GRAY0_swigconstant(_Quantity)
Quantity_NOC_GRAY0 = _Quantity.Quantity_NOC_GRAY0

_Quantity.Quantity_NOC_GRAY1_swigconstant(_Quantity)
Quantity_NOC_GRAY1 = _Quantity.Quantity_NOC_GRAY1

_Quantity.Quantity_NOC_GRAY10_swigconstant(_Quantity)
Quantity_NOC_GRAY10 = _Quantity.Quantity_NOC_GRAY10

_Quantity.Quantity_NOC_GRAY11_swigconstant(_Quantity)
Quantity_NOC_GRAY11 = _Quantity.Quantity_NOC_GRAY11

_Quantity.Quantity_NOC_GRAY12_swigconstant(_Quantity)
Quantity_NOC_GRAY12 = _Quantity.Quantity_NOC_GRAY12

_Quantity.Quantity_NOC_GRAY13_swigconstant(_Quantity)
Quantity_NOC_GRAY13 = _Quantity.Quantity_NOC_GRAY13

_Quantity.Quantity_NOC_GRAY14_swigconstant(_Quantity)
Quantity_NOC_GRAY14 = _Quantity.Quantity_NOC_GRAY14

_Quantity.Quantity_NOC_GRAY15_swigconstant(_Quantity)
Quantity_NOC_GRAY15 = _Quantity.Quantity_NOC_GRAY15

_Quantity.Quantity_NOC_GRAY16_swigconstant(_Quantity)
Quantity_NOC_GRAY16 = _Quantity.Quantity_NOC_GRAY16

_Quantity.Quantity_NOC_GRAY17_swigconstant(_Quantity)
Quantity_NOC_GRAY17 = _Quantity.Quantity_NOC_GRAY17

_Quantity.Quantity_NOC_GRAY18_swigconstant(_Quantity)
Quantity_NOC_GRAY18 = _Quantity.Quantity_NOC_GRAY18

_Quantity.Quantity_NOC_GRAY19_swigconstant(_Quantity)
Quantity_NOC_GRAY19 = _Quantity.Quantity_NOC_GRAY19

_Quantity.Quantity_NOC_GRAY2_swigconstant(_Quantity)
Quantity_NOC_GRAY2 = _Quantity.Quantity_NOC_GRAY2

_Quantity.Quantity_NOC_GRAY20_swigconstant(_Quantity)
Quantity_NOC_GRAY20 = _Quantity.Quantity_NOC_GRAY20

_Quantity.Quantity_NOC_GRAY21_swigconstant(_Quantity)
Quantity_NOC_GRAY21 = _Quantity.Quantity_NOC_GRAY21

_Quantity.Quantity_NOC_GRAY22_swigconstant(_Quantity)
Quantity_NOC_GRAY22 = _Quantity.Quantity_NOC_GRAY22

_Quantity.Quantity_NOC_GRAY23_swigconstant(_Quantity)
Quantity_NOC_GRAY23 = _Quantity.Quantity_NOC_GRAY23

_Quantity.Quantity_NOC_GRAY24_swigconstant(_Quantity)
Quantity_NOC_GRAY24 = _Quantity.Quantity_NOC_GRAY24

_Quantity.Quantity_NOC_GRAY25_swigconstant(_Quantity)
Quantity_NOC_GRAY25 = _Quantity.Quantity_NOC_GRAY25

_Quantity.Quantity_NOC_GRAY26_swigconstant(_Quantity)
Quantity_NOC_GRAY26 = _Quantity.Quantity_NOC_GRAY26

_Quantity.Quantity_NOC_GRAY27_swigconstant(_Quantity)
Quantity_NOC_GRAY27 = _Quantity.Quantity_NOC_GRAY27

_Quantity.Quantity_NOC_GRAY28_swigconstant(_Quantity)
Quantity_NOC_GRAY28 = _Quantity.Quantity_NOC_GRAY28

_Quantity.Quantity_NOC_GRAY29_swigconstant(_Quantity)
Quantity_NOC_GRAY29 = _Quantity.Quantity_NOC_GRAY29

_Quantity.Quantity_NOC_GRAY3_swigconstant(_Quantity)
Quantity_NOC_GRAY3 = _Quantity.Quantity_NOC_GRAY3

_Quantity.Quantity_NOC_GRAY30_swigconstant(_Quantity)
Quantity_NOC_GRAY30 = _Quantity.Quantity_NOC_GRAY30

_Quantity.Quantity_NOC_GRAY31_swigconstant(_Quantity)
Quantity_NOC_GRAY31 = _Quantity.Quantity_NOC_GRAY31

_Quantity.Quantity_NOC_GRAY32_swigconstant(_Quantity)
Quantity_NOC_GRAY32 = _Quantity.Quantity_NOC_GRAY32

_Quantity.Quantity_NOC_GRAY33_swigconstant(_Quantity)
Quantity_NOC_GRAY33 = _Quantity.Quantity_NOC_GRAY33

_Quantity.Quantity_NOC_GRAY34_swigconstant(_Quantity)
Quantity_NOC_GRAY34 = _Quantity.Quantity_NOC_GRAY34

_Quantity.Quantity_NOC_GRAY35_swigconstant(_Quantity)
Quantity_NOC_GRAY35 = _Quantity.Quantity_NOC_GRAY35

_Quantity.Quantity_NOC_GRAY36_swigconstant(_Quantity)
Quantity_NOC_GRAY36 = _Quantity.Quantity_NOC_GRAY36

_Quantity.Quantity_NOC_GRAY37_swigconstant(_Quantity)
Quantity_NOC_GRAY37 = _Quantity.Quantity_NOC_GRAY37

_Quantity.Quantity_NOC_GRAY38_swigconstant(_Quantity)
Quantity_NOC_GRAY38 = _Quantity.Quantity_NOC_GRAY38

_Quantity.Quantity_NOC_GRAY39_swigconstant(_Quantity)
Quantity_NOC_GRAY39 = _Quantity.Quantity_NOC_GRAY39

_Quantity.Quantity_NOC_GRAY4_swigconstant(_Quantity)
Quantity_NOC_GRAY4 = _Quantity.Quantity_NOC_GRAY4

_Quantity.Quantity_NOC_GRAY40_swigconstant(_Quantity)
Quantity_NOC_GRAY40 = _Quantity.Quantity_NOC_GRAY40

_Quantity.Quantity_NOC_GRAY41_swigconstant(_Quantity)
Quantity_NOC_GRAY41 = _Quantity.Quantity_NOC_GRAY41

_Quantity.Quantity_NOC_GRAY42_swigconstant(_Quantity)
Quantity_NOC_GRAY42 = _Quantity.Quantity_NOC_GRAY42

_Quantity.Quantity_NOC_GRAY43_swigconstant(_Quantity)
Quantity_NOC_GRAY43 = _Quantity.Quantity_NOC_GRAY43

_Quantity.Quantity_NOC_GRAY44_swigconstant(_Quantity)
Quantity_NOC_GRAY44 = _Quantity.Quantity_NOC_GRAY44

_Quantity.Quantity_NOC_GRAY45_swigconstant(_Quantity)
Quantity_NOC_GRAY45 = _Quantity.Quantity_NOC_GRAY45

_Quantity.Quantity_NOC_GRAY46_swigconstant(_Quantity)
Quantity_NOC_GRAY46 = _Quantity.Quantity_NOC_GRAY46

_Quantity.Quantity_NOC_GRAY47_swigconstant(_Quantity)
Quantity_NOC_GRAY47 = _Quantity.Quantity_NOC_GRAY47

_Quantity.Quantity_NOC_GRAY48_swigconstant(_Quantity)
Quantity_NOC_GRAY48 = _Quantity.Quantity_NOC_GRAY48

_Quantity.Quantity_NOC_GRAY49_swigconstant(_Quantity)
Quantity_NOC_GRAY49 = _Quantity.Quantity_NOC_GRAY49

_Quantity.Quantity_NOC_GRAY5_swigconstant(_Quantity)
Quantity_NOC_GRAY5 = _Quantity.Quantity_NOC_GRAY5

_Quantity.Quantity_NOC_GRAY50_swigconstant(_Quantity)
Quantity_NOC_GRAY50 = _Quantity.Quantity_NOC_GRAY50

_Quantity.Quantity_NOC_GRAY51_swigconstant(_Quantity)
Quantity_NOC_GRAY51 = _Quantity.Quantity_NOC_GRAY51

_Quantity.Quantity_NOC_GRAY52_swigconstant(_Quantity)
Quantity_NOC_GRAY52 = _Quantity.Quantity_NOC_GRAY52

_Quantity.Quantity_NOC_GRAY53_swigconstant(_Quantity)
Quantity_NOC_GRAY53 = _Quantity.Quantity_NOC_GRAY53

_Quantity.Quantity_NOC_GRAY54_swigconstant(_Quantity)
Quantity_NOC_GRAY54 = _Quantity.Quantity_NOC_GRAY54

_Quantity.Quantity_NOC_GRAY55_swigconstant(_Quantity)
Quantity_NOC_GRAY55 = _Quantity.Quantity_NOC_GRAY55

_Quantity.Quantity_NOC_GRAY56_swigconstant(_Quantity)
Quantity_NOC_GRAY56 = _Quantity.Quantity_NOC_GRAY56

_Quantity.Quantity_NOC_GRAY57_swigconstant(_Quantity)
Quantity_NOC_GRAY57 = _Quantity.Quantity_NOC_GRAY57

_Quantity.Quantity_NOC_GRAY58_swigconstant(_Quantity)
Quantity_NOC_GRAY58 = _Quantity.Quantity_NOC_GRAY58

_Quantity.Quantity_NOC_GRAY59_swigconstant(_Quantity)
Quantity_NOC_GRAY59 = _Quantity.Quantity_NOC_GRAY59

_Quantity.Quantity_NOC_GRAY6_swigconstant(_Quantity)
Quantity_NOC_GRAY6 = _Quantity.Quantity_NOC_GRAY6

_Quantity.Quantity_NOC_GRAY60_swigconstant(_Quantity)
Quantity_NOC_GRAY60 = _Quantity.Quantity_NOC_GRAY60

_Quantity.Quantity_NOC_GRAY61_swigconstant(_Quantity)
Quantity_NOC_GRAY61 = _Quantity.Quantity_NOC_GRAY61

_Quantity.Quantity_NOC_GRAY62_swigconstant(_Quantity)
Quantity_NOC_GRAY62 = _Quantity.Quantity_NOC_GRAY62

_Quantity.Quantity_NOC_GRAY63_swigconstant(_Quantity)
Quantity_NOC_GRAY63 = _Quantity.Quantity_NOC_GRAY63

_Quantity.Quantity_NOC_GRAY64_swigconstant(_Quantity)
Quantity_NOC_GRAY64 = _Quantity.Quantity_NOC_GRAY64

_Quantity.Quantity_NOC_GRAY65_swigconstant(_Quantity)
Quantity_NOC_GRAY65 = _Quantity.Quantity_NOC_GRAY65

_Quantity.Quantity_NOC_GRAY66_swigconstant(_Quantity)
Quantity_NOC_GRAY66 = _Quantity.Quantity_NOC_GRAY66

_Quantity.Quantity_NOC_GRAY67_swigconstant(_Quantity)
Quantity_NOC_GRAY67 = _Quantity.Quantity_NOC_GRAY67

_Quantity.Quantity_NOC_GRAY68_swigconstant(_Quantity)
Quantity_NOC_GRAY68 = _Quantity.Quantity_NOC_GRAY68

_Quantity.Quantity_NOC_GRAY69_swigconstant(_Quantity)
Quantity_NOC_GRAY69 = _Quantity.Quantity_NOC_GRAY69

_Quantity.Quantity_NOC_GRAY7_swigconstant(_Quantity)
Quantity_NOC_GRAY7 = _Quantity.Quantity_NOC_GRAY7

_Quantity.Quantity_NOC_GRAY70_swigconstant(_Quantity)
Quantity_NOC_GRAY70 = _Quantity.Quantity_NOC_GRAY70

_Quantity.Quantity_NOC_GRAY71_swigconstant(_Quantity)
Quantity_NOC_GRAY71 = _Quantity.Quantity_NOC_GRAY71

_Quantity.Quantity_NOC_GRAY72_swigconstant(_Quantity)
Quantity_NOC_GRAY72 = _Quantity.Quantity_NOC_GRAY72

_Quantity.Quantity_NOC_GRAY73_swigconstant(_Quantity)
Quantity_NOC_GRAY73 = _Quantity.Quantity_NOC_GRAY73

_Quantity.Quantity_NOC_GRAY74_swigconstant(_Quantity)
Quantity_NOC_GRAY74 = _Quantity.Quantity_NOC_GRAY74

_Quantity.Quantity_NOC_GRAY75_swigconstant(_Quantity)
Quantity_NOC_GRAY75 = _Quantity.Quantity_NOC_GRAY75

_Quantity.Quantity_NOC_GRAY76_swigconstant(_Quantity)
Quantity_NOC_GRAY76 = _Quantity.Quantity_NOC_GRAY76

_Quantity.Quantity_NOC_GRAY77_swigconstant(_Quantity)
Quantity_NOC_GRAY77 = _Quantity.Quantity_NOC_GRAY77

_Quantity.Quantity_NOC_GRAY78_swigconstant(_Quantity)
Quantity_NOC_GRAY78 = _Quantity.Quantity_NOC_GRAY78

_Quantity.Quantity_NOC_GRAY79_swigconstant(_Quantity)
Quantity_NOC_GRAY79 = _Quantity.Quantity_NOC_GRAY79

_Quantity.Quantity_NOC_GRAY8_swigconstant(_Quantity)
Quantity_NOC_GRAY8 = _Quantity.Quantity_NOC_GRAY8

_Quantity.Quantity_NOC_GRAY80_swigconstant(_Quantity)
Quantity_NOC_GRAY80 = _Quantity.Quantity_NOC_GRAY80

_Quantity.Quantity_NOC_GRAY81_swigconstant(_Quantity)
Quantity_NOC_GRAY81 = _Quantity.Quantity_NOC_GRAY81

_Quantity.Quantity_NOC_GRAY82_swigconstant(_Quantity)
Quantity_NOC_GRAY82 = _Quantity.Quantity_NOC_GRAY82

_Quantity.Quantity_NOC_GRAY83_swigconstant(_Quantity)
Quantity_NOC_GRAY83 = _Quantity.Quantity_NOC_GRAY83

_Quantity.Quantity_NOC_GRAY85_swigconstant(_Quantity)
Quantity_NOC_GRAY85 = _Quantity.Quantity_NOC_GRAY85

_Quantity.Quantity_NOC_GRAY86_swigconstant(_Quantity)
Quantity_NOC_GRAY86 = _Quantity.Quantity_NOC_GRAY86

_Quantity.Quantity_NOC_GRAY87_swigconstant(_Quantity)
Quantity_NOC_GRAY87 = _Quantity.Quantity_NOC_GRAY87

_Quantity.Quantity_NOC_GRAY88_swigconstant(_Quantity)
Quantity_NOC_GRAY88 = _Quantity.Quantity_NOC_GRAY88

_Quantity.Quantity_NOC_GRAY89_swigconstant(_Quantity)
Quantity_NOC_GRAY89 = _Quantity.Quantity_NOC_GRAY89

_Quantity.Quantity_NOC_GRAY9_swigconstant(_Quantity)
Quantity_NOC_GRAY9 = _Quantity.Quantity_NOC_GRAY9

_Quantity.Quantity_NOC_GRAY90_swigconstant(_Quantity)
Quantity_NOC_GRAY90 = _Quantity.Quantity_NOC_GRAY90

_Quantity.Quantity_NOC_GRAY91_swigconstant(_Quantity)
Quantity_NOC_GRAY91 = _Quantity.Quantity_NOC_GRAY91

_Quantity.Quantity_NOC_GRAY92_swigconstant(_Quantity)
Quantity_NOC_GRAY92 = _Quantity.Quantity_NOC_GRAY92

_Quantity.Quantity_NOC_GRAY93_swigconstant(_Quantity)
Quantity_NOC_GRAY93 = _Quantity.Quantity_NOC_GRAY93

_Quantity.Quantity_NOC_GRAY94_swigconstant(_Quantity)
Quantity_NOC_GRAY94 = _Quantity.Quantity_NOC_GRAY94

_Quantity.Quantity_NOC_GRAY95_swigconstant(_Quantity)
Quantity_NOC_GRAY95 = _Quantity.Quantity_NOC_GRAY95

_Quantity.Quantity_NOC_GREEN_swigconstant(_Quantity)
Quantity_NOC_GREEN = _Quantity.Quantity_NOC_GREEN

_Quantity.Quantity_NOC_GREEN1_swigconstant(_Quantity)
Quantity_NOC_GREEN1 = _Quantity.Quantity_NOC_GREEN1

_Quantity.Quantity_NOC_GREEN2_swigconstant(_Quantity)
Quantity_NOC_GREEN2 = _Quantity.Quantity_NOC_GREEN2

_Quantity.Quantity_NOC_GREEN3_swigconstant(_Quantity)
Quantity_NOC_GREEN3 = _Quantity.Quantity_NOC_GREEN3

_Quantity.Quantity_NOC_GREEN4_swigconstant(_Quantity)
Quantity_NOC_GREEN4 = _Quantity.Quantity_NOC_GREEN4

_Quantity.Quantity_NOC_GREENYELLOW_swigconstant(_Quantity)
Quantity_NOC_GREENYELLOW = _Quantity.Quantity_NOC_GREENYELLOW

_Quantity.Quantity_NOC_GRAY97_swigconstant(_Quantity)
Quantity_NOC_GRAY97 = _Quantity.Quantity_NOC_GRAY97

_Quantity.Quantity_NOC_GRAY98_swigconstant(_Quantity)
Quantity_NOC_GRAY98 = _Quantity.Quantity_NOC_GRAY98

_Quantity.Quantity_NOC_GRAY99_swigconstant(_Quantity)
Quantity_NOC_GRAY99 = _Quantity.Quantity_NOC_GRAY99

_Quantity.Quantity_NOC_HONEYDEW_swigconstant(_Quantity)
Quantity_NOC_HONEYDEW = _Quantity.Quantity_NOC_HONEYDEW

_Quantity.Quantity_NOC_HONEYDEW2_swigconstant(_Quantity)
Quantity_NOC_HONEYDEW2 = _Quantity.Quantity_NOC_HONEYDEW2

_Quantity.Quantity_NOC_HONEYDEW3_swigconstant(_Quantity)
Quantity_NOC_HONEYDEW3 = _Quantity.Quantity_NOC_HONEYDEW3

_Quantity.Quantity_NOC_HONEYDEW4_swigconstant(_Quantity)
Quantity_NOC_HONEYDEW4 = _Quantity.Quantity_NOC_HONEYDEW4

_Quantity.Quantity_NOC_HOTPINK_swigconstant(_Quantity)
Quantity_NOC_HOTPINK = _Quantity.Quantity_NOC_HOTPINK

_Quantity.Quantity_NOC_HOTPINK1_swigconstant(_Quantity)
Quantity_NOC_HOTPINK1 = _Quantity.Quantity_NOC_HOTPINK1

_Quantity.Quantity_NOC_HOTPINK2_swigconstant(_Quantity)
Quantity_NOC_HOTPINK2 = _Quantity.Quantity_NOC_HOTPINK2

_Quantity.Quantity_NOC_HOTPINK3_swigconstant(_Quantity)
Quantity_NOC_HOTPINK3 = _Quantity.Quantity_NOC_HOTPINK3

_Quantity.Quantity_NOC_HOTPINK4_swigconstant(_Quantity)
Quantity_NOC_HOTPINK4 = _Quantity.Quantity_NOC_HOTPINK4

_Quantity.Quantity_NOC_INDIANRED_swigconstant(_Quantity)
Quantity_NOC_INDIANRED = _Quantity.Quantity_NOC_INDIANRED

_Quantity.Quantity_NOC_INDIANRED1_swigconstant(_Quantity)
Quantity_NOC_INDIANRED1 = _Quantity.Quantity_NOC_INDIANRED1

_Quantity.Quantity_NOC_INDIANRED2_swigconstant(_Quantity)
Quantity_NOC_INDIANRED2 = _Quantity.Quantity_NOC_INDIANRED2

_Quantity.Quantity_NOC_INDIANRED3_swigconstant(_Quantity)
Quantity_NOC_INDIANRED3 = _Quantity.Quantity_NOC_INDIANRED3

_Quantity.Quantity_NOC_INDIANRED4_swigconstant(_Quantity)
Quantity_NOC_INDIANRED4 = _Quantity.Quantity_NOC_INDIANRED4

_Quantity.Quantity_NOC_IVORY_swigconstant(_Quantity)
Quantity_NOC_IVORY = _Quantity.Quantity_NOC_IVORY

_Quantity.Quantity_NOC_IVORY2_swigconstant(_Quantity)
Quantity_NOC_IVORY2 = _Quantity.Quantity_NOC_IVORY2

_Quantity.Quantity_NOC_IVORY3_swigconstant(_Quantity)
Quantity_NOC_IVORY3 = _Quantity.Quantity_NOC_IVORY3

_Quantity.Quantity_NOC_IVORY4_swigconstant(_Quantity)
Quantity_NOC_IVORY4 = _Quantity.Quantity_NOC_IVORY4

_Quantity.Quantity_NOC_KHAKI_swigconstant(_Quantity)
Quantity_NOC_KHAKI = _Quantity.Quantity_NOC_KHAKI

_Quantity.Quantity_NOC_KHAKI1_swigconstant(_Quantity)
Quantity_NOC_KHAKI1 = _Quantity.Quantity_NOC_KHAKI1

_Quantity.Quantity_NOC_KHAKI2_swigconstant(_Quantity)
Quantity_NOC_KHAKI2 = _Quantity.Quantity_NOC_KHAKI2

_Quantity.Quantity_NOC_KHAKI3_swigconstant(_Quantity)
Quantity_NOC_KHAKI3 = _Quantity.Quantity_NOC_KHAKI3

_Quantity.Quantity_NOC_KHAKI4_swigconstant(_Quantity)
Quantity_NOC_KHAKI4 = _Quantity.Quantity_NOC_KHAKI4

_Quantity.Quantity_NOC_LAVENDER_swigconstant(_Quantity)
Quantity_NOC_LAVENDER = _Quantity.Quantity_NOC_LAVENDER

_Quantity.Quantity_NOC_LAVENDERBLUSH1_swigconstant(_Quantity)
Quantity_NOC_LAVENDERBLUSH1 = _Quantity.Quantity_NOC_LAVENDERBLUSH1

_Quantity.Quantity_NOC_LAVENDERBLUSH2_swigconstant(_Quantity)
Quantity_NOC_LAVENDERBLUSH2 = _Quantity.Quantity_NOC_LAVENDERBLUSH2

_Quantity.Quantity_NOC_LAVENDERBLUSH3_swigconstant(_Quantity)
Quantity_NOC_LAVENDERBLUSH3 = _Quantity.Quantity_NOC_LAVENDERBLUSH3

_Quantity.Quantity_NOC_LAVENDERBLUSH4_swigconstant(_Quantity)
Quantity_NOC_LAVENDERBLUSH4 = _Quantity.Quantity_NOC_LAVENDERBLUSH4

_Quantity.Quantity_NOC_LAWNGREEN_swigconstant(_Quantity)
Quantity_NOC_LAWNGREEN = _Quantity.Quantity_NOC_LAWNGREEN

_Quantity.Quantity_NOC_LEMONCHIFFON1_swigconstant(_Quantity)
Quantity_NOC_LEMONCHIFFON1 = _Quantity.Quantity_NOC_LEMONCHIFFON1

_Quantity.Quantity_NOC_LEMONCHIFFON2_swigconstant(_Quantity)
Quantity_NOC_LEMONCHIFFON2 = _Quantity.Quantity_NOC_LEMONCHIFFON2

_Quantity.Quantity_NOC_LEMONCHIFFON3_swigconstant(_Quantity)
Quantity_NOC_LEMONCHIFFON3 = _Quantity.Quantity_NOC_LEMONCHIFFON3

_Quantity.Quantity_NOC_LEMONCHIFFON4_swigconstant(_Quantity)
Quantity_NOC_LEMONCHIFFON4 = _Quantity.Quantity_NOC_LEMONCHIFFON4

_Quantity.Quantity_NOC_LIGHTBLUE_swigconstant(_Quantity)
Quantity_NOC_LIGHTBLUE = _Quantity.Quantity_NOC_LIGHTBLUE

_Quantity.Quantity_NOC_LIGHTBLUE1_swigconstant(_Quantity)
Quantity_NOC_LIGHTBLUE1 = _Quantity.Quantity_NOC_LIGHTBLUE1

_Quantity.Quantity_NOC_LIGHTBLUE2_swigconstant(_Quantity)
Quantity_NOC_LIGHTBLUE2 = _Quantity.Quantity_NOC_LIGHTBLUE2

_Quantity.Quantity_NOC_LIGHTBLUE3_swigconstant(_Quantity)
Quantity_NOC_LIGHTBLUE3 = _Quantity.Quantity_NOC_LIGHTBLUE3

_Quantity.Quantity_NOC_LIGHTBLUE4_swigconstant(_Quantity)
Quantity_NOC_LIGHTBLUE4 = _Quantity.Quantity_NOC_LIGHTBLUE4

_Quantity.Quantity_NOC_LIGHTCORAL_swigconstant(_Quantity)
Quantity_NOC_LIGHTCORAL = _Quantity.Quantity_NOC_LIGHTCORAL

_Quantity.Quantity_NOC_LIGHTCYAN1_swigconstant(_Quantity)
Quantity_NOC_LIGHTCYAN1 = _Quantity.Quantity_NOC_LIGHTCYAN1

_Quantity.Quantity_NOC_LIGHTCYAN2_swigconstant(_Quantity)
Quantity_NOC_LIGHTCYAN2 = _Quantity.Quantity_NOC_LIGHTCYAN2

_Quantity.Quantity_NOC_LIGHTCYAN3_swigconstant(_Quantity)
Quantity_NOC_LIGHTCYAN3 = _Quantity.Quantity_NOC_LIGHTCYAN3

_Quantity.Quantity_NOC_LIGHTCYAN4_swigconstant(_Quantity)
Quantity_NOC_LIGHTCYAN4 = _Quantity.Quantity_NOC_LIGHTCYAN4

_Quantity.Quantity_NOC_LIGHTGOLDENROD_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENROD = _Quantity.Quantity_NOC_LIGHTGOLDENROD

_Quantity.Quantity_NOC_LIGHTGOLDENROD1_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENROD1 = _Quantity.Quantity_NOC_LIGHTGOLDENROD1

_Quantity.Quantity_NOC_LIGHTGOLDENROD2_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENROD2 = _Quantity.Quantity_NOC_LIGHTGOLDENROD2

_Quantity.Quantity_NOC_LIGHTGOLDENROD3_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENROD3 = _Quantity.Quantity_NOC_LIGHTGOLDENROD3

_Quantity.Quantity_NOC_LIGHTGOLDENROD4_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENROD4 = _Quantity.Quantity_NOC_LIGHTGOLDENROD4

_Quantity.Quantity_NOC_LIGHTGOLDENRODYELLOW_swigconstant(_Quantity)
Quantity_NOC_LIGHTGOLDENRODYELLOW = _Quantity.Quantity_NOC_LIGHTGOLDENRODYELLOW

_Quantity.Quantity_NOC_LIGHTGRAY_swigconstant(_Quantity)
Quantity_NOC_LIGHTGRAY = _Quantity.Quantity_NOC_LIGHTGRAY

_Quantity.Quantity_NOC_LIGHTPINK_swigconstant(_Quantity)
Quantity_NOC_LIGHTPINK = _Quantity.Quantity_NOC_LIGHTPINK

_Quantity.Quantity_NOC_LIGHTPINK1_swigconstant(_Quantity)
Quantity_NOC_LIGHTPINK1 = _Quantity.Quantity_NOC_LIGHTPINK1

_Quantity.Quantity_NOC_LIGHTPINK2_swigconstant(_Quantity)
Quantity_NOC_LIGHTPINK2 = _Quantity.Quantity_NOC_LIGHTPINK2

_Quantity.Quantity_NOC_LIGHTPINK3_swigconstant(_Quantity)
Quantity_NOC_LIGHTPINK3 = _Quantity.Quantity_NOC_LIGHTPINK3

_Quantity.Quantity_NOC_LIGHTPINK4_swigconstant(_Quantity)
Quantity_NOC_LIGHTPINK4 = _Quantity.Quantity_NOC_LIGHTPINK4

_Quantity.Quantity_NOC_LIGHTSALMON1_swigconstant(_Quantity)
Quantity_NOC_LIGHTSALMON1 = _Quantity.Quantity_NOC_LIGHTSALMON1

_Quantity.Quantity_NOC_LIGHTSALMON2_swigconstant(_Quantity)
Quantity_NOC_LIGHTSALMON2 = _Quantity.Quantity_NOC_LIGHTSALMON2

_Quantity.Quantity_NOC_LIGHTSALMON3_swigconstant(_Quantity)
Quantity_NOC_LIGHTSALMON3 = _Quantity.Quantity_NOC_LIGHTSALMON3

_Quantity.Quantity_NOC_LIGHTSALMON4_swigconstant(_Quantity)
Quantity_NOC_LIGHTSALMON4 = _Quantity.Quantity_NOC_LIGHTSALMON4

_Quantity.Quantity_NOC_LIGHTSEAGREEN_swigconstant(_Quantity)
Quantity_NOC_LIGHTSEAGREEN = _Quantity.Quantity_NOC_LIGHTSEAGREEN

_Quantity.Quantity_NOC_LIGHTSKYBLUE_swigconstant(_Quantity)
Quantity_NOC_LIGHTSKYBLUE = _Quantity.Quantity_NOC_LIGHTSKYBLUE

_Quantity.Quantity_NOC_LIGHTSKYBLUE1_swigconstant(_Quantity)
Quantity_NOC_LIGHTSKYBLUE1 = _Quantity.Quantity_NOC_LIGHTSKYBLUE1

_Quantity.Quantity_NOC_LIGHTSKYBLUE2_swigconstant(_Quantity)
Quantity_NOC_LIGHTSKYBLUE2 = _Quantity.Quantity_NOC_LIGHTSKYBLUE2

_Quantity.Quantity_NOC_LIGHTSKYBLUE3_swigconstant(_Quantity)
Quantity_NOC_LIGHTSKYBLUE3 = _Quantity.Quantity_NOC_LIGHTSKYBLUE3

_Quantity.Quantity_NOC_LIGHTSKYBLUE4_swigconstant(_Quantity)
Quantity_NOC_LIGHTSKYBLUE4 = _Quantity.Quantity_NOC_LIGHTSKYBLUE4

_Quantity.Quantity_NOC_LIGHTSLATEBLUE_swigconstant(_Quantity)
Quantity_NOC_LIGHTSLATEBLUE = _Quantity.Quantity_NOC_LIGHTSLATEBLUE

_Quantity.Quantity_NOC_LIGHTSLATEGRAY_swigconstant(_Quantity)
Quantity_NOC_LIGHTSLATEGRAY = _Quantity.Quantity_NOC_LIGHTSLATEGRAY

_Quantity.Quantity_NOC_LIGHTSTEELBLUE_swigconstant(_Quantity)
Quantity_NOC_LIGHTSTEELBLUE = _Quantity.Quantity_NOC_LIGHTSTEELBLUE

_Quantity.Quantity_NOC_LIGHTSTEELBLUE1_swigconstant(_Quantity)
Quantity_NOC_LIGHTSTEELBLUE1 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE1

_Quantity.Quantity_NOC_LIGHTSTEELBLUE2_swigconstant(_Quantity)
Quantity_NOC_LIGHTSTEELBLUE2 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE2

_Quantity.Quantity_NOC_LIGHTSTEELBLUE3_swigconstant(_Quantity)
Quantity_NOC_LIGHTSTEELBLUE3 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE3

_Quantity.Quantity_NOC_LIGHTSTEELBLUE4_swigconstant(_Quantity)
Quantity_NOC_LIGHTSTEELBLUE4 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE4

_Quantity.Quantity_NOC_LIGHTYELLOW_swigconstant(_Quantity)
Quantity_NOC_LIGHTYELLOW = _Quantity.Quantity_NOC_LIGHTYELLOW

_Quantity.Quantity_NOC_LIGHTYELLOW2_swigconstant(_Quantity)
Quantity_NOC_LIGHTYELLOW2 = _Quantity.Quantity_NOC_LIGHTYELLOW2

_Quantity.Quantity_NOC_LIGHTYELLOW3_swigconstant(_Quantity)
Quantity_NOC_LIGHTYELLOW3 = _Quantity.Quantity_NOC_LIGHTYELLOW3

_Quantity.Quantity_NOC_LIGHTYELLOW4_swigconstant(_Quantity)
Quantity_NOC_LIGHTYELLOW4 = _Quantity.Quantity_NOC_LIGHTYELLOW4

_Quantity.Quantity_NOC_LIMEGREEN_swigconstant(_Quantity)
Quantity_NOC_LIMEGREEN = _Quantity.Quantity_NOC_LIMEGREEN

_Quantity.Quantity_NOC_LINEN_swigconstant(_Quantity)
Quantity_NOC_LINEN = _Quantity.Quantity_NOC_LINEN

_Quantity.Quantity_NOC_MAGENTA1_swigconstant(_Quantity)
Quantity_NOC_MAGENTA1 = _Quantity.Quantity_NOC_MAGENTA1

_Quantity.Quantity_NOC_MAGENTA2_swigconstant(_Quantity)
Quantity_NOC_MAGENTA2 = _Quantity.Quantity_NOC_MAGENTA2

_Quantity.Quantity_NOC_MAGENTA3_swigconstant(_Quantity)
Quantity_NOC_MAGENTA3 = _Quantity.Quantity_NOC_MAGENTA3

_Quantity.Quantity_NOC_MAGENTA4_swigconstant(_Quantity)
Quantity_NOC_MAGENTA4 = _Quantity.Quantity_NOC_MAGENTA4

_Quantity.Quantity_NOC_MAROON_swigconstant(_Quantity)
Quantity_NOC_MAROON = _Quantity.Quantity_NOC_MAROON

_Quantity.Quantity_NOC_MAROON1_swigconstant(_Quantity)
Quantity_NOC_MAROON1 = _Quantity.Quantity_NOC_MAROON1

_Quantity.Quantity_NOC_MAROON2_swigconstant(_Quantity)
Quantity_NOC_MAROON2 = _Quantity.Quantity_NOC_MAROON2

_Quantity.Quantity_NOC_MAROON3_swigconstant(_Quantity)
Quantity_NOC_MAROON3 = _Quantity.Quantity_NOC_MAROON3

_Quantity.Quantity_NOC_MAROON4_swigconstant(_Quantity)
Quantity_NOC_MAROON4 = _Quantity.Quantity_NOC_MAROON4

_Quantity.Quantity_NOC_MEDIUMAQUAMARINE_swigconstant(_Quantity)
Quantity_NOC_MEDIUMAQUAMARINE = _Quantity.Quantity_NOC_MEDIUMAQUAMARINE

_Quantity.Quantity_NOC_MEDIUMORCHID_swigconstant(_Quantity)
Quantity_NOC_MEDIUMORCHID = _Quantity.Quantity_NOC_MEDIUMORCHID

_Quantity.Quantity_NOC_MEDIUMORCHID1_swigconstant(_Quantity)
Quantity_NOC_MEDIUMORCHID1 = _Quantity.Quantity_NOC_MEDIUMORCHID1

_Quantity.Quantity_NOC_MEDIUMORCHID2_swigconstant(_Quantity)
Quantity_NOC_MEDIUMORCHID2 = _Quantity.Quantity_NOC_MEDIUMORCHID2

_Quantity.Quantity_NOC_MEDIUMORCHID3_swigconstant(_Quantity)
Quantity_NOC_MEDIUMORCHID3 = _Quantity.Quantity_NOC_MEDIUMORCHID3

_Quantity.Quantity_NOC_MEDIUMORCHID4_swigconstant(_Quantity)
Quantity_NOC_MEDIUMORCHID4 = _Quantity.Quantity_NOC_MEDIUMORCHID4

_Quantity.Quantity_NOC_MEDIUMPURPLE_swigconstant(_Quantity)
Quantity_NOC_MEDIUMPURPLE = _Quantity.Quantity_NOC_MEDIUMPURPLE

_Quantity.Quantity_NOC_MEDIUMPURPLE1_swigconstant(_Quantity)
Quantity_NOC_MEDIUMPURPLE1 = _Quantity.Quantity_NOC_MEDIUMPURPLE1

_Quantity.Quantity_NOC_MEDIUMPURPLE2_swigconstant(_Quantity)
Quantity_NOC_MEDIUMPURPLE2 = _Quantity.Quantity_NOC_MEDIUMPURPLE2

_Quantity.Quantity_NOC_MEDIUMPURPLE3_swigconstant(_Quantity)
Quantity_NOC_MEDIUMPURPLE3 = _Quantity.Quantity_NOC_MEDIUMPURPLE3

_Quantity.Quantity_NOC_MEDIUMPURPLE4_swigconstant(_Quantity)
Quantity_NOC_MEDIUMPURPLE4 = _Quantity.Quantity_NOC_MEDIUMPURPLE4

_Quantity.Quantity_NOC_MEDIUMSEAGREEN_swigconstant(_Quantity)
Quantity_NOC_MEDIUMSEAGREEN = _Quantity.Quantity_NOC_MEDIUMSEAGREEN

_Quantity.Quantity_NOC_MEDIUMSLATEBLUE_swigconstant(_Quantity)
Quantity_NOC_MEDIUMSLATEBLUE = _Quantity.Quantity_NOC_MEDIUMSLATEBLUE

_Quantity.Quantity_NOC_MEDIUMSPRINGGREEN_swigconstant(_Quantity)
Quantity_NOC_MEDIUMSPRINGGREEN = _Quantity.Quantity_NOC_MEDIUMSPRINGGREEN

_Quantity.Quantity_NOC_MEDIUMTURQUOISE_swigconstant(_Quantity)
Quantity_NOC_MEDIUMTURQUOISE = _Quantity.Quantity_NOC_MEDIUMTURQUOISE

_Quantity.Quantity_NOC_MEDIUMVIOLETRED_swigconstant(_Quantity)
Quantity_NOC_MEDIUMVIOLETRED = _Quantity.Quantity_NOC_MEDIUMVIOLETRED

_Quantity.Quantity_NOC_MIDNIGHTBLUE_swigconstant(_Quantity)
Quantity_NOC_MIDNIGHTBLUE = _Quantity.Quantity_NOC_MIDNIGHTBLUE

_Quantity.Quantity_NOC_MINTCREAM_swigconstant(_Quantity)
Quantity_NOC_MINTCREAM = _Quantity.Quantity_NOC_MINTCREAM

_Quantity.Quantity_NOC_MISTYROSE_swigconstant(_Quantity)
Quantity_NOC_MISTYROSE = _Quantity.Quantity_NOC_MISTYROSE

_Quantity.Quantity_NOC_MISTYROSE2_swigconstant(_Quantity)
Quantity_NOC_MISTYROSE2 = _Quantity.Quantity_NOC_MISTYROSE2

_Quantity.Quantity_NOC_MISTYROSE3_swigconstant(_Quantity)
Quantity_NOC_MISTYROSE3 = _Quantity.Quantity_NOC_MISTYROSE3

_Quantity.Quantity_NOC_MISTYROSE4_swigconstant(_Quantity)
Quantity_NOC_MISTYROSE4 = _Quantity.Quantity_NOC_MISTYROSE4

_Quantity.Quantity_NOC_MOCCASIN_swigconstant(_Quantity)
Quantity_NOC_MOCCASIN = _Quantity.Quantity_NOC_MOCCASIN

_Quantity.Quantity_NOC_NAVAJOWHITE1_swigconstant(_Quantity)
Quantity_NOC_NAVAJOWHITE1 = _Quantity.Quantity_NOC_NAVAJOWHITE1

_Quantity.Quantity_NOC_NAVAJOWHITE2_swigconstant(_Quantity)
Quantity_NOC_NAVAJOWHITE2 = _Quantity.Quantity_NOC_NAVAJOWHITE2

_Quantity.Quantity_NOC_NAVAJOWHITE3_swigconstant(_Quantity)
Quantity_NOC_NAVAJOWHITE3 = _Quantity.Quantity_NOC_NAVAJOWHITE3

_Quantity.Quantity_NOC_NAVAJOWHITE4_swigconstant(_Quantity)
Quantity_NOC_NAVAJOWHITE4 = _Quantity.Quantity_NOC_NAVAJOWHITE4

_Quantity.Quantity_NOC_NAVYBLUE_swigconstant(_Quantity)
Quantity_NOC_NAVYBLUE = _Quantity.Quantity_NOC_NAVYBLUE

_Quantity.Quantity_NOC_OLDLACE_swigconstant(_Quantity)
Quantity_NOC_OLDLACE = _Quantity.Quantity_NOC_OLDLACE

_Quantity.Quantity_NOC_OLIVEDRAB_swigconstant(_Quantity)
Quantity_NOC_OLIVEDRAB = _Quantity.Quantity_NOC_OLIVEDRAB

_Quantity.Quantity_NOC_OLIVEDRAB1_swigconstant(_Quantity)
Quantity_NOC_OLIVEDRAB1 = _Quantity.Quantity_NOC_OLIVEDRAB1

_Quantity.Quantity_NOC_OLIVEDRAB2_swigconstant(_Quantity)
Quantity_NOC_OLIVEDRAB2 = _Quantity.Quantity_NOC_OLIVEDRAB2

_Quantity.Quantity_NOC_OLIVEDRAB3_swigconstant(_Quantity)
Quantity_NOC_OLIVEDRAB3 = _Quantity.Quantity_NOC_OLIVEDRAB3

_Quantity.Quantity_NOC_OLIVEDRAB4_swigconstant(_Quantity)
Quantity_NOC_OLIVEDRAB4 = _Quantity.Quantity_NOC_OLIVEDRAB4

_Quantity.Quantity_NOC_ORANGE_swigconstant(_Quantity)
Quantity_NOC_ORANGE = _Quantity.Quantity_NOC_ORANGE

_Quantity.Quantity_NOC_ORANGE1_swigconstant(_Quantity)
Quantity_NOC_ORANGE1 = _Quantity.Quantity_NOC_ORANGE1

_Quantity.Quantity_NOC_ORANGE2_swigconstant(_Quantity)
Quantity_NOC_ORANGE2 = _Quantity.Quantity_NOC_ORANGE2

_Quantity.Quantity_NOC_ORANGE3_swigconstant(_Quantity)
Quantity_NOC_ORANGE3 = _Quantity.Quantity_NOC_ORANGE3

_Quantity.Quantity_NOC_ORANGE4_swigconstant(_Quantity)
Quantity_NOC_ORANGE4 = _Quantity.Quantity_NOC_ORANGE4

_Quantity.Quantity_NOC_ORANGERED_swigconstant(_Quantity)
Quantity_NOC_ORANGERED = _Quantity.Quantity_NOC_ORANGERED

_Quantity.Quantity_NOC_ORANGERED1_swigconstant(_Quantity)
Quantity_NOC_ORANGERED1 = _Quantity.Quantity_NOC_ORANGERED1

_Quantity.Quantity_NOC_ORANGERED2_swigconstant(_Quantity)
Quantity_NOC_ORANGERED2 = _Quantity.Quantity_NOC_ORANGERED2

_Quantity.Quantity_NOC_ORANGERED3_swigconstant(_Quantity)
Quantity_NOC_ORANGERED3 = _Quantity.Quantity_NOC_ORANGERED3

_Quantity.Quantity_NOC_ORANGERED4_swigconstant(_Quantity)
Quantity_NOC_ORANGERED4 = _Quantity.Quantity_NOC_ORANGERED4

_Quantity.Quantity_NOC_ORCHID_swigconstant(_Quantity)
Quantity_NOC_ORCHID = _Quantity.Quantity_NOC_ORCHID

_Quantity.Quantity_NOC_ORCHID1_swigconstant(_Quantity)
Quantity_NOC_ORCHID1 = _Quantity.Quantity_NOC_ORCHID1

_Quantity.Quantity_NOC_ORCHID2_swigconstant(_Quantity)
Quantity_NOC_ORCHID2 = _Quantity.Quantity_NOC_ORCHID2

_Quantity.Quantity_NOC_ORCHID3_swigconstant(_Quantity)
Quantity_NOC_ORCHID3 = _Quantity.Quantity_NOC_ORCHID3

_Quantity.Quantity_NOC_ORCHID4_swigconstant(_Quantity)
Quantity_NOC_ORCHID4 = _Quantity.Quantity_NOC_ORCHID4

_Quantity.Quantity_NOC_PALEGOLDENROD_swigconstant(_Quantity)
Quantity_NOC_PALEGOLDENROD = _Quantity.Quantity_NOC_PALEGOLDENROD

_Quantity.Quantity_NOC_PALEGREEN_swigconstant(_Quantity)
Quantity_NOC_PALEGREEN = _Quantity.Quantity_NOC_PALEGREEN

_Quantity.Quantity_NOC_PALEGREEN1_swigconstant(_Quantity)
Quantity_NOC_PALEGREEN1 = _Quantity.Quantity_NOC_PALEGREEN1

_Quantity.Quantity_NOC_PALEGREEN2_swigconstant(_Quantity)
Quantity_NOC_PALEGREEN2 = _Quantity.Quantity_NOC_PALEGREEN2

_Quantity.Quantity_NOC_PALEGREEN3_swigconstant(_Quantity)
Quantity_NOC_PALEGREEN3 = _Quantity.Quantity_NOC_PALEGREEN3

_Quantity.Quantity_NOC_PALEGREEN4_swigconstant(_Quantity)
Quantity_NOC_PALEGREEN4 = _Quantity.Quantity_NOC_PALEGREEN4

_Quantity.Quantity_NOC_PALETURQUOISE_swigconstant(_Quantity)
Quantity_NOC_PALETURQUOISE = _Quantity.Quantity_NOC_PALETURQUOISE

_Quantity.Quantity_NOC_PALETURQUOISE1_swigconstant(_Quantity)
Quantity_NOC_PALETURQUOISE1 = _Quantity.Quantity_NOC_PALETURQUOISE1

_Quantity.Quantity_NOC_PALETURQUOISE2_swigconstant(_Quantity)
Quantity_NOC_PALETURQUOISE2 = _Quantity.Quantity_NOC_PALETURQUOISE2

_Quantity.Quantity_NOC_PALETURQUOISE3_swigconstant(_Quantity)
Quantity_NOC_PALETURQUOISE3 = _Quantity.Quantity_NOC_PALETURQUOISE3

_Quantity.Quantity_NOC_PALETURQUOISE4_swigconstant(_Quantity)
Quantity_NOC_PALETURQUOISE4 = _Quantity.Quantity_NOC_PALETURQUOISE4

_Quantity.Quantity_NOC_PALEVIOLETRED_swigconstant(_Quantity)
Quantity_NOC_PALEVIOLETRED = _Quantity.Quantity_NOC_PALEVIOLETRED

_Quantity.Quantity_NOC_PALEVIOLETRED1_swigconstant(_Quantity)
Quantity_NOC_PALEVIOLETRED1 = _Quantity.Quantity_NOC_PALEVIOLETRED1

_Quantity.Quantity_NOC_PALEVIOLETRED2_swigconstant(_Quantity)
Quantity_NOC_PALEVIOLETRED2 = _Quantity.Quantity_NOC_PALEVIOLETRED2

_Quantity.Quantity_NOC_PALEVIOLETRED3_swigconstant(_Quantity)
Quantity_NOC_PALEVIOLETRED3 = _Quantity.Quantity_NOC_PALEVIOLETRED3

_Quantity.Quantity_NOC_PALEVIOLETRED4_swigconstant(_Quantity)
Quantity_NOC_PALEVIOLETRED4 = _Quantity.Quantity_NOC_PALEVIOLETRED4

_Quantity.Quantity_NOC_PAPAYAWHIP_swigconstant(_Quantity)
Quantity_NOC_PAPAYAWHIP = _Quantity.Quantity_NOC_PAPAYAWHIP

_Quantity.Quantity_NOC_PEACHPUFF_swigconstant(_Quantity)
Quantity_NOC_PEACHPUFF = _Quantity.Quantity_NOC_PEACHPUFF

_Quantity.Quantity_NOC_PEACHPUFF2_swigconstant(_Quantity)
Quantity_NOC_PEACHPUFF2 = _Quantity.Quantity_NOC_PEACHPUFF2

_Quantity.Quantity_NOC_PEACHPUFF3_swigconstant(_Quantity)
Quantity_NOC_PEACHPUFF3 = _Quantity.Quantity_NOC_PEACHPUFF3

_Quantity.Quantity_NOC_PEACHPUFF4_swigconstant(_Quantity)
Quantity_NOC_PEACHPUFF4 = _Quantity.Quantity_NOC_PEACHPUFF4

_Quantity.Quantity_NOC_PERU_swigconstant(_Quantity)
Quantity_NOC_PERU = _Quantity.Quantity_NOC_PERU

_Quantity.Quantity_NOC_PINK_swigconstant(_Quantity)
Quantity_NOC_PINK = _Quantity.Quantity_NOC_PINK

_Quantity.Quantity_NOC_PINK1_swigconstant(_Quantity)
Quantity_NOC_PINK1 = _Quantity.Quantity_NOC_PINK1

_Quantity.Quantity_NOC_PINK2_swigconstant(_Quantity)
Quantity_NOC_PINK2 = _Quantity.Quantity_NOC_PINK2

_Quantity.Quantity_NOC_PINK3_swigconstant(_Quantity)
Quantity_NOC_PINK3 = _Quantity.Quantity_NOC_PINK3

_Quantity.Quantity_NOC_PINK4_swigconstant(_Quantity)
Quantity_NOC_PINK4 = _Quantity.Quantity_NOC_PINK4

_Quantity.Quantity_NOC_PLUM_swigconstant(_Quantity)
Quantity_NOC_PLUM = _Quantity.Quantity_NOC_PLUM

_Quantity.Quantity_NOC_PLUM1_swigconstant(_Quantity)
Quantity_NOC_PLUM1 = _Quantity.Quantity_NOC_PLUM1

_Quantity.Quantity_NOC_PLUM2_swigconstant(_Quantity)
Quantity_NOC_PLUM2 = _Quantity.Quantity_NOC_PLUM2

_Quantity.Quantity_NOC_PLUM3_swigconstant(_Quantity)
Quantity_NOC_PLUM3 = _Quantity.Quantity_NOC_PLUM3

_Quantity.Quantity_NOC_PLUM4_swigconstant(_Quantity)
Quantity_NOC_PLUM4 = _Quantity.Quantity_NOC_PLUM4

_Quantity.Quantity_NOC_POWDERBLUE_swigconstant(_Quantity)
Quantity_NOC_POWDERBLUE = _Quantity.Quantity_NOC_POWDERBLUE

_Quantity.Quantity_NOC_PURPLE_swigconstant(_Quantity)
Quantity_NOC_PURPLE = _Quantity.Quantity_NOC_PURPLE

_Quantity.Quantity_NOC_PURPLE1_swigconstant(_Quantity)
Quantity_NOC_PURPLE1 = _Quantity.Quantity_NOC_PURPLE1

_Quantity.Quantity_NOC_PURPLE2_swigconstant(_Quantity)
Quantity_NOC_PURPLE2 = _Quantity.Quantity_NOC_PURPLE2

_Quantity.Quantity_NOC_PURPLE3_swigconstant(_Quantity)
Quantity_NOC_PURPLE3 = _Quantity.Quantity_NOC_PURPLE3

_Quantity.Quantity_NOC_PURPLE4_swigconstant(_Quantity)
Quantity_NOC_PURPLE4 = _Quantity.Quantity_NOC_PURPLE4

_Quantity.Quantity_NOC_RED_swigconstant(_Quantity)
Quantity_NOC_RED = _Quantity.Quantity_NOC_RED

_Quantity.Quantity_NOC_RED1_swigconstant(_Quantity)
Quantity_NOC_RED1 = _Quantity.Quantity_NOC_RED1

_Quantity.Quantity_NOC_RED2_swigconstant(_Quantity)
Quantity_NOC_RED2 = _Quantity.Quantity_NOC_RED2

_Quantity.Quantity_NOC_RED3_swigconstant(_Quantity)
Quantity_NOC_RED3 = _Quantity.Quantity_NOC_RED3

_Quantity.Quantity_NOC_RED4_swigconstant(_Quantity)
Quantity_NOC_RED4 = _Quantity.Quantity_NOC_RED4

_Quantity.Quantity_NOC_ROSYBROWN_swigconstant(_Quantity)
Quantity_NOC_ROSYBROWN = _Quantity.Quantity_NOC_ROSYBROWN

_Quantity.Quantity_NOC_ROSYBROWN1_swigconstant(_Quantity)
Quantity_NOC_ROSYBROWN1 = _Quantity.Quantity_NOC_ROSYBROWN1

_Quantity.Quantity_NOC_ROSYBROWN2_swigconstant(_Quantity)
Quantity_NOC_ROSYBROWN2 = _Quantity.Quantity_NOC_ROSYBROWN2

_Quantity.Quantity_NOC_ROSYBROWN3_swigconstant(_Quantity)
Quantity_NOC_ROSYBROWN3 = _Quantity.Quantity_NOC_ROSYBROWN3

_Quantity.Quantity_NOC_ROSYBROWN4_swigconstant(_Quantity)
Quantity_NOC_ROSYBROWN4 = _Quantity.Quantity_NOC_ROSYBROWN4

_Quantity.Quantity_NOC_ROYALBLUE_swigconstant(_Quantity)
Quantity_NOC_ROYALBLUE = _Quantity.Quantity_NOC_ROYALBLUE

_Quantity.Quantity_NOC_ROYALBLUE1_swigconstant(_Quantity)
Quantity_NOC_ROYALBLUE1 = _Quantity.Quantity_NOC_ROYALBLUE1

_Quantity.Quantity_NOC_ROYALBLUE2_swigconstant(_Quantity)
Quantity_NOC_ROYALBLUE2 = _Quantity.Quantity_NOC_ROYALBLUE2

_Quantity.Quantity_NOC_ROYALBLUE3_swigconstant(_Quantity)
Quantity_NOC_ROYALBLUE3 = _Quantity.Quantity_NOC_ROYALBLUE3

_Quantity.Quantity_NOC_ROYALBLUE4_swigconstant(_Quantity)
Quantity_NOC_ROYALBLUE4 = _Quantity.Quantity_NOC_ROYALBLUE4

_Quantity.Quantity_NOC_SADDLEBROWN_swigconstant(_Quantity)
Quantity_NOC_SADDLEBROWN = _Quantity.Quantity_NOC_SADDLEBROWN

_Quantity.Quantity_NOC_SALMON_swigconstant(_Quantity)
Quantity_NOC_SALMON = _Quantity.Quantity_NOC_SALMON

_Quantity.Quantity_NOC_SALMON1_swigconstant(_Quantity)
Quantity_NOC_SALMON1 = _Quantity.Quantity_NOC_SALMON1

_Quantity.Quantity_NOC_SALMON2_swigconstant(_Quantity)
Quantity_NOC_SALMON2 = _Quantity.Quantity_NOC_SALMON2

_Quantity.Quantity_NOC_SALMON3_swigconstant(_Quantity)
Quantity_NOC_SALMON3 = _Quantity.Quantity_NOC_SALMON3

_Quantity.Quantity_NOC_SALMON4_swigconstant(_Quantity)
Quantity_NOC_SALMON4 = _Quantity.Quantity_NOC_SALMON4

_Quantity.Quantity_NOC_SANDYBROWN_swigconstant(_Quantity)
Quantity_NOC_SANDYBROWN = _Quantity.Quantity_NOC_SANDYBROWN

_Quantity.Quantity_NOC_SEAGREEN_swigconstant(_Quantity)
Quantity_NOC_SEAGREEN = _Quantity.Quantity_NOC_SEAGREEN

_Quantity.Quantity_NOC_SEAGREEN1_swigconstant(_Quantity)
Quantity_NOC_SEAGREEN1 = _Quantity.Quantity_NOC_SEAGREEN1

_Quantity.Quantity_NOC_SEAGREEN2_swigconstant(_Quantity)
Quantity_NOC_SEAGREEN2 = _Quantity.Quantity_NOC_SEAGREEN2

_Quantity.Quantity_NOC_SEAGREEN3_swigconstant(_Quantity)
Quantity_NOC_SEAGREEN3 = _Quantity.Quantity_NOC_SEAGREEN3

_Quantity.Quantity_NOC_SEAGREEN4_swigconstant(_Quantity)
Quantity_NOC_SEAGREEN4 = _Quantity.Quantity_NOC_SEAGREEN4

_Quantity.Quantity_NOC_SEASHELL_swigconstant(_Quantity)
Quantity_NOC_SEASHELL = _Quantity.Quantity_NOC_SEASHELL

_Quantity.Quantity_NOC_SEASHELL2_swigconstant(_Quantity)
Quantity_NOC_SEASHELL2 = _Quantity.Quantity_NOC_SEASHELL2

_Quantity.Quantity_NOC_SEASHELL3_swigconstant(_Quantity)
Quantity_NOC_SEASHELL3 = _Quantity.Quantity_NOC_SEASHELL3

_Quantity.Quantity_NOC_SEASHELL4_swigconstant(_Quantity)
Quantity_NOC_SEASHELL4 = _Quantity.Quantity_NOC_SEASHELL4

_Quantity.Quantity_NOC_BEET_swigconstant(_Quantity)
Quantity_NOC_BEET = _Quantity.Quantity_NOC_BEET

_Quantity.Quantity_NOC_TEAL_swigconstant(_Quantity)
Quantity_NOC_TEAL = _Quantity.Quantity_NOC_TEAL

_Quantity.Quantity_NOC_SIENNA_swigconstant(_Quantity)
Quantity_NOC_SIENNA = _Quantity.Quantity_NOC_SIENNA

_Quantity.Quantity_NOC_SIENNA1_swigconstant(_Quantity)
Quantity_NOC_SIENNA1 = _Quantity.Quantity_NOC_SIENNA1

_Quantity.Quantity_NOC_SIENNA2_swigconstant(_Quantity)
Quantity_NOC_SIENNA2 = _Quantity.Quantity_NOC_SIENNA2

_Quantity.Quantity_NOC_SIENNA3_swigconstant(_Quantity)
Quantity_NOC_SIENNA3 = _Quantity.Quantity_NOC_SIENNA3

_Quantity.Quantity_NOC_SIENNA4_swigconstant(_Quantity)
Quantity_NOC_SIENNA4 = _Quantity.Quantity_NOC_SIENNA4

_Quantity.Quantity_NOC_SKYBLUE_swigconstant(_Quantity)
Quantity_NOC_SKYBLUE = _Quantity.Quantity_NOC_SKYBLUE

_Quantity.Quantity_NOC_SKYBLUE1_swigconstant(_Quantity)
Quantity_NOC_SKYBLUE1 = _Quantity.Quantity_NOC_SKYBLUE1

_Quantity.Quantity_NOC_SKYBLUE2_swigconstant(_Quantity)
Quantity_NOC_SKYBLUE2 = _Quantity.Quantity_NOC_SKYBLUE2

_Quantity.Quantity_NOC_SKYBLUE3_swigconstant(_Quantity)
Quantity_NOC_SKYBLUE3 = _Quantity.Quantity_NOC_SKYBLUE3

_Quantity.Quantity_NOC_SKYBLUE4_swigconstant(_Quantity)
Quantity_NOC_SKYBLUE4 = _Quantity.Quantity_NOC_SKYBLUE4

_Quantity.Quantity_NOC_SLATEBLUE_swigconstant(_Quantity)
Quantity_NOC_SLATEBLUE = _Quantity.Quantity_NOC_SLATEBLUE

_Quantity.Quantity_NOC_SLATEBLUE1_swigconstant(_Quantity)
Quantity_NOC_SLATEBLUE1 = _Quantity.Quantity_NOC_SLATEBLUE1

_Quantity.Quantity_NOC_SLATEBLUE2_swigconstant(_Quantity)
Quantity_NOC_SLATEBLUE2 = _Quantity.Quantity_NOC_SLATEBLUE2

_Quantity.Quantity_NOC_SLATEBLUE3_swigconstant(_Quantity)
Quantity_NOC_SLATEBLUE3 = _Quantity.Quantity_NOC_SLATEBLUE3

_Quantity.Quantity_NOC_SLATEBLUE4_swigconstant(_Quantity)
Quantity_NOC_SLATEBLUE4 = _Quantity.Quantity_NOC_SLATEBLUE4

_Quantity.Quantity_NOC_SLATEGRAY1_swigconstant(_Quantity)
Quantity_NOC_SLATEGRAY1 = _Quantity.Quantity_NOC_SLATEGRAY1

_Quantity.Quantity_NOC_SLATEGRAY2_swigconstant(_Quantity)
Quantity_NOC_SLATEGRAY2 = _Quantity.Quantity_NOC_SLATEGRAY2

_Quantity.Quantity_NOC_SLATEGRAY3_swigconstant(_Quantity)
Quantity_NOC_SLATEGRAY3 = _Quantity.Quantity_NOC_SLATEGRAY3

_Quantity.Quantity_NOC_SLATEGRAY4_swigconstant(_Quantity)
Quantity_NOC_SLATEGRAY4 = _Quantity.Quantity_NOC_SLATEGRAY4

_Quantity.Quantity_NOC_SLATEGRAY_swigconstant(_Quantity)
Quantity_NOC_SLATEGRAY = _Quantity.Quantity_NOC_SLATEGRAY

_Quantity.Quantity_NOC_SNOW_swigconstant(_Quantity)
Quantity_NOC_SNOW = _Quantity.Quantity_NOC_SNOW

_Quantity.Quantity_NOC_SNOW2_swigconstant(_Quantity)
Quantity_NOC_SNOW2 = _Quantity.Quantity_NOC_SNOW2

_Quantity.Quantity_NOC_SNOW3_swigconstant(_Quantity)
Quantity_NOC_SNOW3 = _Quantity.Quantity_NOC_SNOW3

_Quantity.Quantity_NOC_SNOW4_swigconstant(_Quantity)
Quantity_NOC_SNOW4 = _Quantity.Quantity_NOC_SNOW4

_Quantity.Quantity_NOC_SPRINGGREEN_swigconstant(_Quantity)
Quantity_NOC_SPRINGGREEN = _Quantity.Quantity_NOC_SPRINGGREEN

_Quantity.Quantity_NOC_SPRINGGREEN2_swigconstant(_Quantity)
Quantity_NOC_SPRINGGREEN2 = _Quantity.Quantity_NOC_SPRINGGREEN2

_Quantity.Quantity_NOC_SPRINGGREEN3_swigconstant(_Quantity)
Quantity_NOC_SPRINGGREEN3 = _Quantity.Quantity_NOC_SPRINGGREEN3

_Quantity.Quantity_NOC_SPRINGGREEN4_swigconstant(_Quantity)
Quantity_NOC_SPRINGGREEN4 = _Quantity.Quantity_NOC_SPRINGGREEN4

_Quantity.Quantity_NOC_STEELBLUE_swigconstant(_Quantity)
Quantity_NOC_STEELBLUE = _Quantity.Quantity_NOC_STEELBLUE

_Quantity.Quantity_NOC_STEELBLUE1_swigconstant(_Quantity)
Quantity_NOC_STEELBLUE1 = _Quantity.Quantity_NOC_STEELBLUE1

_Quantity.Quantity_NOC_STEELBLUE2_swigconstant(_Quantity)
Quantity_NOC_STEELBLUE2 = _Quantity.Quantity_NOC_STEELBLUE2

_Quantity.Quantity_NOC_STEELBLUE3_swigconstant(_Quantity)
Quantity_NOC_STEELBLUE3 = _Quantity.Quantity_NOC_STEELBLUE3

_Quantity.Quantity_NOC_STEELBLUE4_swigconstant(_Quantity)
Quantity_NOC_STEELBLUE4 = _Quantity.Quantity_NOC_STEELBLUE4

_Quantity.Quantity_NOC_TAN_swigconstant(_Quantity)
Quantity_NOC_TAN = _Quantity.Quantity_NOC_TAN

_Quantity.Quantity_NOC_TAN1_swigconstant(_Quantity)
Quantity_NOC_TAN1 = _Quantity.Quantity_NOC_TAN1

_Quantity.Quantity_NOC_TAN2_swigconstant(_Quantity)
Quantity_NOC_TAN2 = _Quantity.Quantity_NOC_TAN2

_Quantity.Quantity_NOC_TAN3_swigconstant(_Quantity)
Quantity_NOC_TAN3 = _Quantity.Quantity_NOC_TAN3

_Quantity.Quantity_NOC_TAN4_swigconstant(_Quantity)
Quantity_NOC_TAN4 = _Quantity.Quantity_NOC_TAN4

_Quantity.Quantity_NOC_THISTLE_swigconstant(_Quantity)
Quantity_NOC_THISTLE = _Quantity.Quantity_NOC_THISTLE

_Quantity.Quantity_NOC_THISTLE1_swigconstant(_Quantity)
Quantity_NOC_THISTLE1 = _Quantity.Quantity_NOC_THISTLE1

_Quantity.Quantity_NOC_THISTLE2_swigconstant(_Quantity)
Quantity_NOC_THISTLE2 = _Quantity.Quantity_NOC_THISTLE2

_Quantity.Quantity_NOC_THISTLE3_swigconstant(_Quantity)
Quantity_NOC_THISTLE3 = _Quantity.Quantity_NOC_THISTLE3

_Quantity.Quantity_NOC_THISTLE4_swigconstant(_Quantity)
Quantity_NOC_THISTLE4 = _Quantity.Quantity_NOC_THISTLE4

_Quantity.Quantity_NOC_TOMATO_swigconstant(_Quantity)
Quantity_NOC_TOMATO = _Quantity.Quantity_NOC_TOMATO

_Quantity.Quantity_NOC_TOMATO1_swigconstant(_Quantity)
Quantity_NOC_TOMATO1 = _Quantity.Quantity_NOC_TOMATO1

_Quantity.Quantity_NOC_TOMATO2_swigconstant(_Quantity)
Quantity_NOC_TOMATO2 = _Quantity.Quantity_NOC_TOMATO2

_Quantity.Quantity_NOC_TOMATO3_swigconstant(_Quantity)
Quantity_NOC_TOMATO3 = _Quantity.Quantity_NOC_TOMATO3

_Quantity.Quantity_NOC_TOMATO4_swigconstant(_Quantity)
Quantity_NOC_TOMATO4 = _Quantity.Quantity_NOC_TOMATO4

_Quantity.Quantity_NOC_TURQUOISE_swigconstant(_Quantity)
Quantity_NOC_TURQUOISE = _Quantity.Quantity_NOC_TURQUOISE

_Quantity.Quantity_NOC_TURQUOISE1_swigconstant(_Quantity)
Quantity_NOC_TURQUOISE1 = _Quantity.Quantity_NOC_TURQUOISE1

_Quantity.Quantity_NOC_TURQUOISE2_swigconstant(_Quantity)
Quantity_NOC_TURQUOISE2 = _Quantity.Quantity_NOC_TURQUOISE2

_Quantity.Quantity_NOC_TURQUOISE3_swigconstant(_Quantity)
Quantity_NOC_TURQUOISE3 = _Quantity.Quantity_NOC_TURQUOISE3

_Quantity.Quantity_NOC_TURQUOISE4_swigconstant(_Quantity)
Quantity_NOC_TURQUOISE4 = _Quantity.Quantity_NOC_TURQUOISE4

_Quantity.Quantity_NOC_VIOLET_swigconstant(_Quantity)
Quantity_NOC_VIOLET = _Quantity.Quantity_NOC_VIOLET

_Quantity.Quantity_NOC_VIOLETRED_swigconstant(_Quantity)
Quantity_NOC_VIOLETRED = _Quantity.Quantity_NOC_VIOLETRED

_Quantity.Quantity_NOC_VIOLETRED1_swigconstant(_Quantity)
Quantity_NOC_VIOLETRED1 = _Quantity.Quantity_NOC_VIOLETRED1

_Quantity.Quantity_NOC_VIOLETRED2_swigconstant(_Quantity)
Quantity_NOC_VIOLETRED2 = _Quantity.Quantity_NOC_VIOLETRED2

_Quantity.Quantity_NOC_VIOLETRED3_swigconstant(_Quantity)
Quantity_NOC_VIOLETRED3 = _Quantity.Quantity_NOC_VIOLETRED3

_Quantity.Quantity_NOC_VIOLETRED4_swigconstant(_Quantity)
Quantity_NOC_VIOLETRED4 = _Quantity.Quantity_NOC_VIOLETRED4

_Quantity.Quantity_NOC_WHEAT_swigconstant(_Quantity)
Quantity_NOC_WHEAT = _Quantity.Quantity_NOC_WHEAT

_Quantity.Quantity_NOC_WHEAT1_swigconstant(_Quantity)
Quantity_NOC_WHEAT1 = _Quantity.Quantity_NOC_WHEAT1

_Quantity.Quantity_NOC_WHEAT2_swigconstant(_Quantity)
Quantity_NOC_WHEAT2 = _Quantity.Quantity_NOC_WHEAT2

_Quantity.Quantity_NOC_WHEAT3_swigconstant(_Quantity)
Quantity_NOC_WHEAT3 = _Quantity.Quantity_NOC_WHEAT3

_Quantity.Quantity_NOC_WHEAT4_swigconstant(_Quantity)
Quantity_NOC_WHEAT4 = _Quantity.Quantity_NOC_WHEAT4

_Quantity.Quantity_NOC_WHITESMOKE_swigconstant(_Quantity)
Quantity_NOC_WHITESMOKE = _Quantity.Quantity_NOC_WHITESMOKE

_Quantity.Quantity_NOC_YELLOW_swigconstant(_Quantity)
Quantity_NOC_YELLOW = _Quantity.Quantity_NOC_YELLOW

_Quantity.Quantity_NOC_YELLOW1_swigconstant(_Quantity)
Quantity_NOC_YELLOW1 = _Quantity.Quantity_NOC_YELLOW1

_Quantity.Quantity_NOC_YELLOW2_swigconstant(_Quantity)
Quantity_NOC_YELLOW2 = _Quantity.Quantity_NOC_YELLOW2

_Quantity.Quantity_NOC_YELLOW3_swigconstant(_Quantity)
Quantity_NOC_YELLOW3 = _Quantity.Quantity_NOC_YELLOW3

_Quantity.Quantity_NOC_YELLOW4_swigconstant(_Quantity)
Quantity_NOC_YELLOW4 = _Quantity.Quantity_NOC_YELLOW4

_Quantity.Quantity_NOC_YELLOWGREEN_swigconstant(_Quantity)
Quantity_NOC_YELLOWGREEN = _Quantity.Quantity_NOC_YELLOWGREEN

_Quantity.Quantity_NOC_WHITE_swigconstant(_Quantity)
Quantity_NOC_WHITE = _Quantity.Quantity_NOC_WHITE

_Quantity.Quantity_MASS_swigconstant(_Quantity)
Quantity_MASS = _Quantity.Quantity_MASS

_Quantity.Quantity_PLANEANGLE_swigconstant(_Quantity)
Quantity_PLANEANGLE = _Quantity.Quantity_PLANEANGLE

_Quantity.Quantity_SOLIDANGLE_swigconstant(_Quantity)
Quantity_SOLIDANGLE = _Quantity.Quantity_SOLIDANGLE

_Quantity.Quantity_LENGTH_swigconstant(_Quantity)
Quantity_LENGTH = _Quantity.Quantity_LENGTH

_Quantity.Quantity_AREA_swigconstant(_Quantity)
Quantity_AREA = _Quantity.Quantity_AREA

_Quantity.Quantity_VOLUME_swigconstant(_Quantity)
Quantity_VOLUME = _Quantity.Quantity_VOLUME

_Quantity.Quantity_SPEED_swigconstant(_Quantity)
Quantity_SPEED = _Quantity.Quantity_SPEED

_Quantity.Quantity_VELOCITY_swigconstant(_Quantity)
Quantity_VELOCITY = _Quantity.Quantity_VELOCITY

_Quantity.Quantity_ACCELERATION_swigconstant(_Quantity)
Quantity_ACCELERATION = _Quantity.Quantity_ACCELERATION

_Quantity.Quantity_ANGULARVELOCITY_swigconstant(_Quantity)
Quantity_ANGULARVELOCITY = _Quantity.Quantity_ANGULARVELOCITY

_Quantity.Quantity_FREQUENCY_swigconstant(_Quantity)
Quantity_FREQUENCY = _Quantity.Quantity_FREQUENCY

_Quantity.Quantity_TEMPERATURE_swigconstant(_Quantity)
Quantity_TEMPERATURE = _Quantity.Quantity_TEMPERATURE

_Quantity.Quantity_AMOUNTOFSUBSTANCE_swigconstant(_Quantity)
Quantity_AMOUNTOFSUBSTANCE = _Quantity.Quantity_AMOUNTOFSUBSTANCE

_Quantity.Quantity_DENSITY_swigconstant(_Quantity)
Quantity_DENSITY = _Quantity.Quantity_DENSITY

_Quantity.Quantity_MASSFLOW_swigconstant(_Quantity)
Quantity_MASSFLOW = _Quantity.Quantity_MASSFLOW

_Quantity.Quantity_VOLUMEFLOW_swigconstant(_Quantity)
Quantity_VOLUMEFLOW = _Quantity.Quantity_VOLUMEFLOW

_Quantity.Quantity_CONSUMPTION_swigconstant(_Quantity)
Quantity_CONSUMPTION = _Quantity.Quantity_CONSUMPTION

_Quantity.Quantity_MOMENTUM_swigconstant(_Quantity)
Quantity_MOMENTUM = _Quantity.Quantity_MOMENTUM

_Quantity.Quantity_KINETICMOMENT_swigconstant(_Quantity)
Quantity_KINETICMOMENT = _Quantity.Quantity_KINETICMOMENT

_Quantity.Quantity_MOMENTOFINERTIA_swigconstant(_Quantity)
Quantity_MOMENTOFINERTIA = _Quantity.Quantity_MOMENTOFINERTIA

_Quantity.Quantity_FORCE_swigconstant(_Quantity)
Quantity_FORCE = _Quantity.Quantity_FORCE

_Quantity.Quantity_MOMENTOFAFORCE_swigconstant(_Quantity)
Quantity_MOMENTOFAFORCE = _Quantity.Quantity_MOMENTOFAFORCE

_Quantity.Quantity_TORQUE_swigconstant(_Quantity)
Quantity_TORQUE = _Quantity.Quantity_TORQUE

_Quantity.Quantity_WEIGHT_swigconstant(_Quantity)
Quantity_WEIGHT = _Quantity.Quantity_WEIGHT

_Quantity.Quantity_PRESSURE_swigconstant(_Quantity)
Quantity_PRESSURE = _Quantity.Quantity_PRESSURE

_Quantity.Quantity_VISCOSITY_swigconstant(_Quantity)
Quantity_VISCOSITY = _Quantity.Quantity_VISCOSITY

_Quantity.Quantity_KINEMATICVISCOSITY_swigconstant(_Quantity)
Quantity_KINEMATICVISCOSITY = _Quantity.Quantity_KINEMATICVISCOSITY

_Quantity.Quantity_ENERGY_swigconstant(_Quantity)
Quantity_ENERGY = _Quantity.Quantity_ENERGY

_Quantity.Quantity_WORK_swigconstant(_Quantity)
Quantity_WORK = _Quantity.Quantity_WORK

_Quantity.Quantity_POWER_swigconstant(_Quantity)
Quantity_POWER = _Quantity.Quantity_POWER

_Quantity.Quantity_SURFACETENSION_swigconstant(_Quantity)
Quantity_SURFACETENSION = _Quantity.Quantity_SURFACETENSION

_Quantity.Quantity_COEFFICIENTOFEXPANSION_swigconstant(_Quantity)
Quantity_COEFFICIENTOFEXPANSION = _Quantity.Quantity_COEFFICIENTOFEXPANSION

_Quantity.Quantity_THERMALCONDUCTIVITY_swigconstant(_Quantity)
Quantity_THERMALCONDUCTIVITY = _Quantity.Quantity_THERMALCONDUCTIVITY

_Quantity.Quantity_SPECIFICHEATCAPACITY_swigconstant(_Quantity)
Quantity_SPECIFICHEATCAPACITY = _Quantity.Quantity_SPECIFICHEATCAPACITY

_Quantity.Quantity_ENTROPY_swigconstant(_Quantity)
Quantity_ENTROPY = _Quantity.Quantity_ENTROPY

_Quantity.Quantity_ENTHALPY_swigconstant(_Quantity)
Quantity_ENTHALPY = _Quantity.Quantity_ENTHALPY

_Quantity.Quantity_LUMINOUSINTENSITY_swigconstant(_Quantity)
Quantity_LUMINOUSINTENSITY = _Quantity.Quantity_LUMINOUSINTENSITY

_Quantity.Quantity_LUMINOUSFLUX_swigconstant(_Quantity)
Quantity_LUMINOUSFLUX = _Quantity.Quantity_LUMINOUSFLUX

_Quantity.Quantity_LUMINANCE_swigconstant(_Quantity)
Quantity_LUMINANCE = _Quantity.Quantity_LUMINANCE

_Quantity.Quantity_ILLUMINANCE_swigconstant(_Quantity)
Quantity_ILLUMINANCE = _Quantity.Quantity_ILLUMINANCE

_Quantity.Quantity_LUMINOUSEXPOSITION_swigconstant(_Quantity)
Quantity_LUMINOUSEXPOSITION = _Quantity.Quantity_LUMINOUSEXPOSITION

_Quantity.Quantity_LUMINOUSEFFICACITY_swigconstant(_Quantity)
Quantity_LUMINOUSEFFICACITY = _Quantity.Quantity_LUMINOUSEFFICACITY

_Quantity.Quantity_ELECTRICCHARGE_swigconstant(_Quantity)
Quantity_ELECTRICCHARGE = _Quantity.Quantity_ELECTRICCHARGE

_Quantity.Quantity_ELECTRICCURRENT_swigconstant(_Quantity)
Quantity_ELECTRICCURRENT = _Quantity.Quantity_ELECTRICCURRENT

_Quantity.Quantity_ELECTRICFIELDSTRENGTH_swigconstant(_Quantity)
Quantity_ELECTRICFIELDSTRENGTH = _Quantity.Quantity_ELECTRICFIELDSTRENGTH

_Quantity.Quantity_ELECTRICPOTENTIAL_swigconstant(_Quantity)
Quantity_ELECTRICPOTENTIAL = _Quantity.Quantity_ELECTRICPOTENTIAL

_Quantity.Quantity_ELECTRICCAPACITANCE_swigconstant(_Quantity)
Quantity_ELECTRICCAPACITANCE = _Quantity.Quantity_ELECTRICCAPACITANCE

_Quantity.Quantity_MAGNETICFLUX_swigconstant(_Quantity)
Quantity_MAGNETICFLUX = _Quantity.Quantity_MAGNETICFLUX

_Quantity.Quantity_MAGNETICFLUXDENSITY_swigconstant(_Quantity)
Quantity_MAGNETICFLUXDENSITY = _Quantity.Quantity_MAGNETICFLUXDENSITY

_Quantity.Quantity_MAGNETICFIELDSTRENGTH_swigconstant(_Quantity)
Quantity_MAGNETICFIELDSTRENGTH = _Quantity.Quantity_MAGNETICFIELDSTRENGTH

_Quantity.Quantity_RELUCTANCE_swigconstant(_Quantity)
Quantity_RELUCTANCE = _Quantity.Quantity_RELUCTANCE

_Quantity.Quantity_RESISTANCE_swigconstant(_Quantity)
Quantity_RESISTANCE = _Quantity.Quantity_RESISTANCE

_Quantity.Quantity_INDUCTANCE_swigconstant(_Quantity)
Quantity_INDUCTANCE = _Quantity.Quantity_INDUCTANCE

_Quantity.Quantity_CAPACITANCE_swigconstant(_Quantity)
Quantity_CAPACITANCE = _Quantity.Quantity_CAPACITANCE

_Quantity.Quantity_IMPEDANCE_swigconstant(_Quantity)
Quantity_IMPEDANCE = _Quantity.Quantity_IMPEDANCE

_Quantity.Quantity_ADMITTANCE_swigconstant(_Quantity)
Quantity_ADMITTANCE = _Quantity.Quantity_ADMITTANCE

_Quantity.Quantity_RESISTIVITY_swigconstant(_Quantity)
Quantity_RESISTIVITY = _Quantity.Quantity_RESISTIVITY

_Quantity.Quantity_CONDUCTIVITY_swigconstant(_Quantity)
Quantity_CONDUCTIVITY = _Quantity.Quantity_CONDUCTIVITY

_Quantity.Quantity_MOLARMASS_swigconstant(_Quantity)
Quantity_MOLARMASS = _Quantity.Quantity_MOLARMASS

_Quantity.Quantity_MOLARVOLUME_swigconstant(_Quantity)
Quantity_MOLARVOLUME = _Quantity.Quantity_MOLARVOLUME

_Quantity.Quantity_CONCENTRATION_swigconstant(_Quantity)
Quantity_CONCENTRATION = _Quantity.Quantity_CONCENTRATION

_Quantity.Quantity_MOLARCONCENTRATION_swigconstant(_Quantity)
Quantity_MOLARCONCENTRATION = _Quantity.Quantity_MOLARCONCENTRATION

_Quantity.Quantity_MOLARITY_swigconstant(_Quantity)
Quantity_MOLARITY = _Quantity.Quantity_MOLARITY

_Quantity.Quantity_SOUNDINTENSITY_swigconstant(_Quantity)
Quantity_SOUNDINTENSITY = _Quantity.Quantity_SOUNDINTENSITY

_Quantity.Quantity_ACOUSTICINTENSITY_swigconstant(_Quantity)
Quantity_ACOUSTICINTENSITY = _Quantity.Quantity_ACOUSTICINTENSITY

_Quantity.Quantity_ACTIVITY_swigconstant(_Quantity)
Quantity_ACTIVITY = _Quantity.Quantity_ACTIVITY

_Quantity.Quantity_ABSORBEDDOSE_swigconstant(_Quantity)
Quantity_ABSORBEDDOSE = _Quantity.Quantity_ABSORBEDDOSE

_Quantity.Quantity_DOSEEQUIVALENT_swigconstant(_Quantity)
Quantity_DOSEEQUIVALENT = _Quantity.Quantity_DOSEEQUIVALENT

_Quantity.Quantity_TOC_RGB_swigconstant(_Quantity)
Quantity_TOC_RGB = _Quantity.Quantity_TOC_RGB

_Quantity.Quantity_TOC_HLS_swigconstant(_Quantity)
Quantity_TOC_HLS = _Quantity.Quantity_TOC_HLS
class Quantity_Array1OfCoefficient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Coefficient &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Quantity.Quantity_Array1OfCoefficient_swiginit(self, _Quantity.new_Quantity_Array1OfCoefficient(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Coefficient &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Quantity.Quantity_Array1OfCoefficient_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfCoefficient &
        :rtype: Quantity_Array1OfCoefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfCoefficient &
        :rtype: Quantity_Array1OfCoefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Coefficient &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Coefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Coefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array1OfCoefficient.Init = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Init, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Destroy = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Destroy, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.IsAllocated = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_IsAllocated, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Assign = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Assign, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Set = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Set, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Length = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Length, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Lower = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Lower, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Upper = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Upper, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.SetValue = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_SetValue, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Value = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Value, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.ChangeValue = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_ChangeValue, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient._kill_pointed = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient__kill_pointed, None, Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient_swigregister = _Quantity.Quantity_Array1OfCoefficient_swigregister
Quantity_Array1OfCoefficient_swigregister(Quantity_Array1OfCoefficient)

class Quantity_Array1OfColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Color &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Quantity.Quantity_Array1OfColor_swiginit(self, _Quantity.new_Quantity_Array1OfColor(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Quantity.Quantity_Array1OfColor_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfColor &
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_Array1OfColor_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfColor &
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_Array1OfColor_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array1OfColor_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array1OfColor_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array1OfColor.Init = new_instancemethod(_Quantity.Quantity_Array1OfColor_Init, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Destroy = new_instancemethod(_Quantity.Quantity_Array1OfColor_Destroy, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.IsAllocated = new_instancemethod(_Quantity.Quantity_Array1OfColor_IsAllocated, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Assign = new_instancemethod(_Quantity.Quantity_Array1OfColor_Assign, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Set = new_instancemethod(_Quantity.Quantity_Array1OfColor_Set, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Length = new_instancemethod(_Quantity.Quantity_Array1OfColor_Length, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Lower = new_instancemethod(_Quantity.Quantity_Array1OfColor_Lower, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Upper = new_instancemethod(_Quantity.Quantity_Array1OfColor_Upper, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.SetValue = new_instancemethod(_Quantity.Quantity_Array1OfColor_SetValue, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.Value = new_instancemethod(_Quantity.Quantity_Array1OfColor_Value, None, Quantity_Array1OfColor)
Quantity_Array1OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_Array1OfColor_ChangeValue, None, Quantity_Array1OfColor)
Quantity_Array1OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_Array1OfColor__kill_pointed, None, Quantity_Array1OfColor)
Quantity_Array1OfColor_swigregister = _Quantity.Quantity_Array1OfColor_swigregister
Quantity_Array1OfColor_swigregister(Quantity_Array1OfColor)

class Quantity_Array2OfColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Color &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _Quantity.Quantity_Array2OfColor_swiginit(self, _Quantity.new_Quantity_Array2OfColor(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_Destroy(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array2OfColor &
        :rtype: Quantity_Array2OfColor

        """
        return _Quantity.Quantity_Array2OfColor_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array2OfColor &
        :rtype: Quantity_Array2OfColor

        """
        return _Quantity.Quantity_Array2OfColor_Set(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array2OfColor_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array2OfColor_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array2OfColor.Init = new_instancemethod(_Quantity.Quantity_Array2OfColor_Init, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.Destroy = new_instancemethod(_Quantity.Quantity_Array2OfColor_Destroy, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.Assign = new_instancemethod(_Quantity.Quantity_Array2OfColor_Assign, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.Set = new_instancemethod(_Quantity.Quantity_Array2OfColor_Set, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.ColLength = new_instancemethod(_Quantity.Quantity_Array2OfColor_ColLength, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.RowLength = new_instancemethod(_Quantity.Quantity_Array2OfColor_RowLength, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.LowerCol = new_instancemethod(_Quantity.Quantity_Array2OfColor_LowerCol, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.LowerRow = new_instancemethod(_Quantity.Quantity_Array2OfColor_LowerRow, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.UpperCol = new_instancemethod(_Quantity.Quantity_Array2OfColor_UpperCol, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.UpperRow = new_instancemethod(_Quantity.Quantity_Array2OfColor_UpperRow, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.SetValue = new_instancemethod(_Quantity.Quantity_Array2OfColor_SetValue, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.Value = new_instancemethod(_Quantity.Quantity_Array2OfColor_Value, None, Quantity_Array2OfColor)
Quantity_Array2OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_Array2OfColor_ChangeValue, None, Quantity_Array2OfColor)
Quantity_Array2OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_Array2OfColor__kill_pointed, None, Quantity_Array2OfColor)
Quantity_Array2OfColor_swigregister = _Quantity.Quantity_Array2OfColor_swigregister
Quantity_Array2OfColor_swigregister(Quantity_Array2OfColor)

class Quantity_Color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a colour with the default value of //!	 Colour name : YELLOW

        :rtype: None

        * Creates the colour <AName>.

        :param AName:
        :type AName: Quantity_NameOfColor
        :rtype: None

        * Creates a colour according to the definition system //!	 TypeOfColor. //!	 TOC_RGB : <R1> the value of red between 0. and 1. //!		 <R2> the value of green between 0. and 1. //!		 <R3> the value of blue between 0. and 1. //!	 TOC_HLS : <R1> is the hue angle in degrees, 0. being red //!	 	 <R2> is the lightness between 0. and 1. //!		 <R3> is the saturation between 0. and 1.

        :param R1:
        :type R1: Quantity_Parameter
        :param R2:
        :type R2: Quantity_Parameter
        :param R3:
        :type R3: Quantity_Parameter
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        _Quantity.Quantity_Color_swiginit(self, _Quantity.new_Quantity_Color(*args))

    def Assign(self, *args):
        """
        * Updates the colour <self> from the definition of the //!	 colour <Other>.

        :param Other:
        :type Other: Quantity_Color &
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Color_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Color &
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Color_Set(self, *args)


    def ChangeContrast(self, *args):
        """
        * Increases or decreases the contrast by <ADelta>. //!	 <ADelta> is a percentage. Any value greater than zero //!	 will increase the contrast. //!	 The variation is expressed as a percentage of the //!	 current value. //!	 It is a variation of the saturation.

        :param ADelta:
        :type ADelta: Quantity_Rate
        :rtype: None

        """
        return _Quantity.Quantity_Color_ChangeContrast(self, *args)


    def ChangeIntensity(self, *args):
        """
        * Increases or decreases the intensity by <ADelta>. //!	 <ADelta> is a percentage. Any value greater than zero //!	 will increase the intensity. //!	 The variation is expressed as a percentage of the //!	 current value. //!	 It is a variation of the lightness.

        :param ADelta:
        :type ADelta: Quantity_Rate
        :rtype: None

        """
        return _Quantity.Quantity_Color_ChangeIntensity(self, *args)


    def SetValues(self, *args):
        """
        * Updates the colour <self> from the definition of the //!	 colour <AName>.

        :param AName:
        :type AName: Quantity_NameOfColor
        :rtype: None

        * Updates a colour according to the mode specified by //!	 TypeOfColor //!	 TOC_RGB : <R1> the value of red between 0. and 1. //!		 <R2> the value of green between 0. and 1. //!		 <R3> the value of blue between 0. and 1. //!	 TOC_HLS : <R1> is the hue angle in degrees, 0. being red //!	 	 <R2> is the lightness between 0. and 1. //!		 <R3> is the saturation between 0. and 1.

        :param R1:
        :type R1: Quantity_Parameter
        :param R2:
        :type R2: Quantity_Parameter
        :param R3:
        :type R3: Quantity_Parameter
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        return _Quantity.Quantity_Color_SetValues(self, *args)


    def Delta(self, *args):
        """
        * Returns the percentage change of contrast and intensity //!	 between <self> and <AColor>. //!	 <DC> and <DI> are percentages, either positive or negative. //!	 The calculation is with respect to the current value of <self> //!	 If <DC> is positive then <self> is more contrasty. //!	 If <DI> is positive then <self> is more intense.

        :param AColor:
        :type AColor: Quantity_Color &
        :param DC:
        :type DC: Quantity_Parameter &
        :param DI:
        :type DI: Quantity_Parameter &
        :rtype: None

        """
        return _Quantity.Quantity_Color_Delta(self, *args)


    def Distance(self, *args):
        """
        * Returns the distance between two colours. It's a //!	 value between 0 and the square root of 3 //!	 (the black/white distance)

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: float

        """
        return _Quantity.Quantity_Color_Distance(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the square of distance between two colours.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: float

        """
        return _Quantity.Quantity_Color_SquareDistance(self, *args)


    def Blue(self, *args):
        """
        * Returns the Blue component (quantity of blue) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Blue(self, *args)


    def Green(self, *args):
        """
        * Returns the Green component (quantity of green) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Green(self, *args)


    def Hue(self, *args):
        """
        * Returns the Hue component (hue angle) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Hue(self, *args)


    def IsDifferent(self, *args):
        """
        * Returns Standard_True if the distance between <self> and //!	 <Other> is greater than Epsilon ().

        :param Other:
        :type Other: Quantity_Color &
        :rtype: bool

        """
        return _Quantity.Quantity_Color_IsDifferent(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsEqual(self, *args):
        """
        * Returns true if the Other color is - different from, or - equal to this color. Two colors are considered to be equal if their distance is no greater than Epsilon(). These methods are aliases of operator != and operator ==.

        :param Other:
        :type Other: Quantity_Color &
        :rtype: bool

        """
        return _Quantity.Quantity_Color_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def Light(self, *args):
        """
        * Returns the Light component (value of the lightness) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Light(self, *args)


    def Red(self, *args):
        """
        * Returns the Red component (quantity of red) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Red(self, *args)


    def Saturation(self, *args):
        """
        * Returns the Saturation component (value of the saturation) //!	 of the color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Saturation(self, *args)


    def Values(self, *args):
        """
        * Returns in R1, R2 and R3 the components of this color according to the color system definition AType. - if AType is Quantity_TOC_RGB R1 is the quantity of red, R2 is the quantity of green and R3 is the quantity of blue in this color. - if AType is Quantity_TOC_HLS R1 is the hue angle in degrees (0 being red), R2 is the lightness and R3 is the saturation of this color.

        :param R1:
        :type R1: Quantity_Parameter &
        :param R2:
        :type R2: Quantity_Parameter &
        :param R3:
        :type R3: Quantity_Parameter &
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        return _Quantity.Quantity_Color_Values(self, *args)


    def SetEpsilon(*args):
        """
        * Sets the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods. Warning: The default value is 0.0001

        :param AnEpsilon:
        :type AnEpsilon: Quantity_Parameter
        :rtype: void

        """
        return _Quantity.Quantity_Color_SetEpsilon(*args)

    SetEpsilon = staticmethod(SetEpsilon)

    def Epsilon(*args):
        """
        * Returns the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Epsilon(*args)

    Epsilon = staticmethod(Epsilon)

    def Name(*args):
        """
        * Returns the name of the color defined by its quantities of red R, green G and blue B; more precisely this is the nearest color from the Quantity_NameOfColor enumeration. Exceptions Standard_OutOfRange if R, G or B is less than 0. or greater than 1.

        :rtype: Quantity_NameOfColor

        * Returns the name of the colour for which the RGB components //!	 are nearest to <R>, <G> and <B>.

        :param R:
        :type R: Quantity_Parameter
        :param G:
        :type G: Quantity_Parameter
        :param B:
        :type B: Quantity_Parameter
        :rtype: Quantity_NameOfColor

        """
        return _Quantity.Quantity_Color_Name(*args)

    Name = staticmethod(Name)

    def StringName(*args):
        """
        * Returns the name of the color identified by AName in the Quantity_NameOfColor enumeration. For example, the name of the color which corresponds to Quantity_NOC_BLACK is 'BLACK'. Exceptions Standard_OutOfRange if AName in not known in the Quantity_NameOfColor enumeration.

        :param AColor:
        :type AColor: Quantity_NameOfColor
        :rtype: char *

        """
        return _Quantity.Quantity_Color_StringName(*args)

    StringName = staticmethod(StringName)

    def HlsRgb(*args):
        """
        * Converts HLS components into RGB ones.

        :param H:
        :type H: Quantity_Parameter
        :param L:
        :type L: Quantity_Parameter
        :param S:
        :type S: Quantity_Parameter
        :param R:
        :type R: Quantity_Parameter &
        :param G:
        :type G: Quantity_Parameter &
        :param B:
        :type B: Quantity_Parameter &
        :rtype: void

        """
        return _Quantity.Quantity_Color_HlsRgb(*args)

    HlsRgb = staticmethod(HlsRgb)

    def RgbHls(*args):
        """
        * Converts RGB components into HLS ones.

        :param R:
        :type R: Quantity_Parameter
        :param G:
        :type G: Quantity_Parameter
        :param B:
        :type B: Quantity_Parameter
        :param H:
        :type H: Quantity_Parameter &
        :param L:
        :type L: Quantity_Parameter &
        :param S:
        :type S: Quantity_Parameter &
        :rtype: void

        """
        return _Quantity.Quantity_Color_RgbHls(*args)

    RgbHls = staticmethod(RgbHls)

    def Color2argb(*args):
        """
        * Convert the Color value to ARGB integer value. theARGB has Alpha equal to zero, so the output is formatted as 0x00RRGGBB

        :param theColor:
        :type theColor: Quantity_Color &
        :param theARGB:
        :type theARGB: int &
        :rtype: void

        """
        return _Quantity.Quantity_Color_Color2argb(*args)

    Color2argb = staticmethod(Color2argb)

    def Argb2color(*args):
        """
        * Convert integer ARGB value to Color. Alpha bits are ignored

        :param theARGB:
        :type theARGB: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: void

        """
        return _Quantity.Quantity_Color_Argb2color(*args)

    Argb2color = staticmethod(Argb2color)

    def Test(*args):
        """
        * Internal test

        :rtype: void

        """
        return _Quantity.Quantity_Color_Test(*args)

    Test = staticmethod(Test)

    def _CSFDB_GetQuantity_ColorMyRed(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyRed(self, *args)


    def _CSFDB_SetQuantity_ColorMyRed(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyRed(self, *args)


    def _CSFDB_GetQuantity_ColorMyGreen(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyGreen(self, *args)


    def _CSFDB_SetQuantity_ColorMyGreen(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyGreen(self, *args)


    def _CSFDB_GetQuantity_ColorMyBlue(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyBlue(self, *args)


    def _CSFDB_SetQuantity_ColorMyBlue(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyBlue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Color.Assign = new_instancemethod(_Quantity.Quantity_Color_Assign, None, Quantity_Color)
Quantity_Color.Set = new_instancemethod(_Quantity.Quantity_Color_Set, None, Quantity_Color)
Quantity_Color.ChangeContrast = new_instancemethod(_Quantity.Quantity_Color_ChangeContrast, None, Quantity_Color)
Quantity_Color.ChangeIntensity = new_instancemethod(_Quantity.Quantity_Color_ChangeIntensity, None, Quantity_Color)
Quantity_Color.SetValues = new_instancemethod(_Quantity.Quantity_Color_SetValues, None, Quantity_Color)
Quantity_Color.Delta = new_instancemethod(_Quantity.Quantity_Color_Delta, None, Quantity_Color)
Quantity_Color.Distance = new_instancemethod(_Quantity.Quantity_Color_Distance, None, Quantity_Color)
Quantity_Color.SquareDistance = new_instancemethod(_Quantity.Quantity_Color_SquareDistance, None, Quantity_Color)
Quantity_Color.Blue = new_instancemethod(_Quantity.Quantity_Color_Blue, None, Quantity_Color)
Quantity_Color.Green = new_instancemethod(_Quantity.Quantity_Color_Green, None, Quantity_Color)
Quantity_Color.Hue = new_instancemethod(_Quantity.Quantity_Color_Hue, None, Quantity_Color)
Quantity_Color.IsDifferent = new_instancemethod(_Quantity.Quantity_Color_IsDifferent, None, Quantity_Color)
Quantity_Color.__ne_wrapper__ = new_instancemethod(_Quantity.Quantity_Color___ne_wrapper__, None, Quantity_Color)
Quantity_Color.IsEqual = new_instancemethod(_Quantity.Quantity_Color_IsEqual, None, Quantity_Color)
Quantity_Color.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Color___eq_wrapper__, None, Quantity_Color)
Quantity_Color.Light = new_instancemethod(_Quantity.Quantity_Color_Light, None, Quantity_Color)
Quantity_Color.Red = new_instancemethod(_Quantity.Quantity_Color_Red, None, Quantity_Color)
Quantity_Color.Saturation = new_instancemethod(_Quantity.Quantity_Color_Saturation, None, Quantity_Color)
Quantity_Color.Values = new_instancemethod(_Quantity.Quantity_Color_Values, None, Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyRed = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyRed, None, Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyRed = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyRed, None, Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyGreen = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyGreen, None, Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyGreen = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyGreen, None, Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyBlue = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyBlue, None, Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyBlue = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyBlue, None, Quantity_Color)
Quantity_Color._kill_pointed = new_instancemethod(_Quantity.Quantity_Color__kill_pointed, None, Quantity_Color)
Quantity_Color_swigregister = _Quantity.Quantity_Color_swigregister
Quantity_Color_swigregister(Quantity_Color)

def Quantity_Color_SetEpsilon(*args):
    """
    * Sets the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods. Warning: The default value is 0.0001

    :param AnEpsilon:
    :type AnEpsilon: Quantity_Parameter
    :rtype: void

    """
    return _Quantity.Quantity_Color_SetEpsilon(*args)

def Quantity_Color_Epsilon(*args):
    """
    * Returns the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods.

    :rtype: Quantity_Parameter

    """
    return _Quantity.Quantity_Color_Epsilon(*args)

def Quantity_Color_Name(*args):
    """
    * Returns the name of the color defined by its quantities of red R, green G and blue B; more precisely this is the nearest color from the Quantity_NameOfColor enumeration. Exceptions Standard_OutOfRange if R, G or B is less than 0. or greater than 1.

    :rtype: Quantity_NameOfColor

    * Returns the name of the colour for which the RGB components //!	 are nearest to <R>, <G> and <B>.

    :param R:
    :type R: Quantity_Parameter
    :param G:
    :type G: Quantity_Parameter
    :param B:
    :type B: Quantity_Parameter
    :rtype: Quantity_NameOfColor

    """
    return _Quantity.Quantity_Color_Name(*args)

def Quantity_Color_StringName(*args):
    """
    * Returns the name of the color identified by AName in the Quantity_NameOfColor enumeration. For example, the name of the color which corresponds to Quantity_NOC_BLACK is 'BLACK'. Exceptions Standard_OutOfRange if AName in not known in the Quantity_NameOfColor enumeration.

    :param AColor:
    :type AColor: Quantity_NameOfColor
    :rtype: char *

    """
    return _Quantity.Quantity_Color_StringName(*args)

def Quantity_Color_HlsRgb(*args):
    """
    * Converts HLS components into RGB ones.

    :param H:
    :type H: Quantity_Parameter
    :param L:
    :type L: Quantity_Parameter
    :param S:
    :type S: Quantity_Parameter
    :param R:
    :type R: Quantity_Parameter &
    :param G:
    :type G: Quantity_Parameter &
    :param B:
    :type B: Quantity_Parameter &
    :rtype: void

    """
    return _Quantity.Quantity_Color_HlsRgb(*args)

def Quantity_Color_RgbHls(*args):
    """
    * Converts RGB components into HLS ones.

    :param R:
    :type R: Quantity_Parameter
    :param G:
    :type G: Quantity_Parameter
    :param B:
    :type B: Quantity_Parameter
    :param H:
    :type H: Quantity_Parameter &
    :param L:
    :type L: Quantity_Parameter &
    :param S:
    :type S: Quantity_Parameter &
    :rtype: void

    """
    return _Quantity.Quantity_Color_RgbHls(*args)

def Quantity_Color_Color2argb(*args):
    """
    * Convert the Color value to ARGB integer value. theARGB has Alpha equal to zero, so the output is formatted as 0x00RRGGBB

    :param theColor:
    :type theColor: Quantity_Color &
    :param theARGB:
    :type theARGB: int &
    :rtype: void

    """
    return _Quantity.Quantity_Color_Color2argb(*args)

def Quantity_Color_Argb2color(*args):
    """
    * Convert integer ARGB value to Color. Alpha bits are ignored

    :param theARGB:
    :type theARGB: int
    :param theColor:
    :type theColor: Quantity_Color &
    :rtype: void

    """
    return _Quantity.Quantity_Color_Argb2color(*args)

def Quantity_Color_Test(*args):
    """
    * Internal test

    :rtype: void

    """
    return _Quantity.Quantity_Color_Test(*args)

class Quantity_Convert(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object;

        :rtype: None

        """
        _Quantity.Quantity_Convert_swiginit(self, _Quantity.new_Quantity_Convert(*args))

    def SetQuantity(*args):
        """
        * Updates the conversion table (correspondances between Quantities and conversion coefficients).

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aCoef:
        :type aCoef: Quantity_Coefficient
        :rtype: void

        """
        return _Quantity.Quantity_Convert_SetQuantity(*args)

    SetQuantity = staticmethod(SetQuantity)

    def ConvertUserToSI(*args):
        """
        * Converts, from the conversion table, the value <aVal> from the user system to the SI system.

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aVal:
        :type aVal: float
        :rtype: float

        """
        return _Quantity.Quantity_Convert_ConvertUserToSI(*args)

    ConvertUserToSI = staticmethod(ConvertUserToSI)

    def ConvertSIToUser(*args):
        """
        * Converts, from the conversion table, the value <aVal> from the SI system to the user system.

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aVal:
        :type aVal: float
        :rtype: float

        """
        return _Quantity.Quantity_Convert_ConvertSIToUser(*args)

    ConvertSIToUser = staticmethod(ConvertSIToUser)

    def IsPhysicalQuantity(*args):
        """
        * if (aType is a physical quantity) returns True and the name of the associated PhysicalQuantity . else returns False.

        :param aTypeName:
        :type aTypeName: TCollection_AsciiString &
        :param anEnum:
        :type anEnum: TCollection_AsciiString &
        :rtype: bool

        """
        return _Quantity.Quantity_Convert_IsPhysicalQuantity(*args)

    IsPhysicalQuantity = staticmethod(IsPhysicalQuantity)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Convert._kill_pointed = new_instancemethod(_Quantity.Quantity_Convert__kill_pointed, None, Quantity_Convert)
Quantity_Convert_swigregister = _Quantity.Quantity_Convert_swigregister
Quantity_Convert_swigregister(Quantity_Convert)

def Quantity_Convert_SetQuantity(*args):
    """
    * Updates the conversion table (correspondances between Quantities and conversion coefficients).

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aCoef:
    :type aCoef: Quantity_Coefficient
    :rtype: void

    """
    return _Quantity.Quantity_Convert_SetQuantity(*args)

def Quantity_Convert_ConvertUserToSI(*args):
    """
    * Converts, from the conversion table, the value <aVal> from the user system to the SI system.

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aVal:
    :type aVal: float
    :rtype: float

    """
    return _Quantity.Quantity_Convert_ConvertUserToSI(*args)

def Quantity_Convert_ConvertSIToUser(*args):
    """
    * Converts, from the conversion table, the value <aVal> from the SI system to the user system.

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aVal:
    :type aVal: float
    :rtype: float

    """
    return _Quantity.Quantity_Convert_ConvertSIToUser(*args)

def Quantity_Convert_IsPhysicalQuantity(*args):
    """
    * if (aType is a physical quantity) returns True and the name of the associated PhysicalQuantity . else returns False.

    :param aTypeName:
    :type aTypeName: TCollection_AsciiString &
    :param anEnum:
    :type anEnum: TCollection_AsciiString &
    :rtype: bool

    """
    return _Quantity.Quantity_Convert_IsPhysicalQuantity(*args)

class Quantity_Date(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a default date (00:00 GMT, January 1, 1979 (zero hour)); use the function SetValues to define the required date; or

        :rtype: None

        * Constructs a date from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0).. With: 1 <= mm <= 12  1 <= dd <= max number of days of <mm>  1979 <= yyyy  0 <= hh <= 23  0 <= mn <= 59  0 <= ss <= 59  0 <= mis <= 999  0 <= mics <= 999 Exceptions Quantity_DateDefinitionError if mm, dd, hh, mn, ss, mis and mics are not the components of the valid date.

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yyyy:
        :type yyyy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        _Quantity.Quantity_Date_swiginit(self, _Quantity.new_Quantity_Date(*args))

    def Values(self, *args):
        """
        * Gets a complete Date. - in mm - the month, - in dd - the day, - in yyyy - the year, - in hh - the hour, - in mn - the minute, - in ss - the second, - in mis - the millisecond, and - in mics - the microsecond

        :param mm:
        :type mm: int &
        :param dd:
        :type dd: int &
        :param yy:
        :type yy: int &
        :param hh:
        :type hh: int &
        :param mn:
        :type mn: int &
        :param ss:
        :type ss: int &
        :param mis:
        :type mis: int &
        :param mics:
        :type mics: int &
        :rtype: None

        """
        return _Quantity.Quantity_Date_Values(self, *args)


    def SetValues(self, *args):
        """
        * Assigns to this date the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0). Exceptions Quantity_DateDefinitionError if mm, dd, hh, mn, ss, mis and mics are not components of a valid date.

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yy:
        :type yy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        return _Quantity.Quantity_Date_SetValues(self, *args)


    def Difference(self, *args):
        """
        * Subtracts one Date from another one to find the period between and returns the value. The result is the absolute value between the difference of two dates.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Date_Difference(self, *args)


    def Subtract(self, *args):
        """
        * Subtracts a period from a Date and returns the new Date. Raises an exception if the result date is anterior to Jan 1, 1979.

        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date_Subtract(self, *args)


    def __sub__(self, *args):
        """
        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date___sub__(self, *args)


    def Add(self, *args):
        """
        * Adds a Period to a Date and returns the new Date.

        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date_Add(self, *args)


    def __add__(self, *args):
        """
        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date___add__(self, *args)


    def Year(self, *args):
        """
        * Returns year of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Year(self, *args)


    def Month(self, *args):
        """
        * Returns month of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Month(self, *args)


    def Day(self, *args):
        """
        * Returns Day of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Day(self, *args)


    def Hour(self, *args):
        """
        * Returns Hour of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Hour(self, *args)


    def Minute(self, *args):
        """
        * Returns minute of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Minute(self, *args)


    def Second(self, *args):
        """
        * Returns seconde of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Second(self, *args)


    def MilliSecond(self, *args):
        """
        * Returns millisecond of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_MilliSecond(self, *args)


    def MicroSecond(self, *args):
        """
        * Returns microsecond of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_MicroSecond(self, *args)


    def IsEqual(self, *args):
        """
        * Returns True if both <self> and <other> are equal. This method is an alias of operator ==.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsEarlier(self, *args):
        """
        * Returns True if <self> is earlier than <other>.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsEarlier(self, *args)


    def __lt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date___lt__(self, *args)


    def IsLater(self, *args):
        """
        * Returns True if <self> is later then <other>.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsLater(self, *args)


    def __gt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date___gt__(self, *args)


    def IsValid(*args):
        """
        * Checks the validity of a date - returns true if a date defined from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0) is valid. A date must satisfy the conditions above: - yyyy is greater than or equal to 1979, - mm lies within the range [1, 12] (with 1 corresponding to January and 12 to December), - dd lies within a valid range for the month mm (from 1 to 28, 29, 30 or 31 depending on mm and whether yyyy is a leap year or not), - hh lies within the range [0, 23], - mn lies within the range [0, 59], - ss lies within the range [0, 59], - mis lies within the range [0, 999], - mics lies within the range [0, 999].C

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yy:
        :type yy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsValid(*args)

    IsValid = staticmethod(IsValid)

    def IsLeap(*args):
        """
        * Returns true if a year is a leap year. The leap years are divisable by 4 and not by 100 except the years divisable by 400.

        :param yy:
        :type yy: int
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsLeap(*args)

    IsLeap = staticmethod(IsLeap)

    def _CSFDB_GetQuantity_DatemySec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Date__CSFDB_GetQuantity_DatemySec(self, *args)


    def _CSFDB_SetQuantity_DatemySec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Date__CSFDB_SetQuantity_DatemySec(self, *args)


    def _CSFDB_GetQuantity_DatemyUSec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Date__CSFDB_GetQuantity_DatemyUSec(self, *args)


    def _CSFDB_SetQuantity_DatemyUSec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Date__CSFDB_SetQuantity_DatemyUSec(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Date.Values = new_instancemethod(_Quantity.Quantity_Date_Values, None, Quantity_Date)
Quantity_Date.SetValues = new_instancemethod(_Quantity.Quantity_Date_SetValues, None, Quantity_Date)
Quantity_Date.Difference = new_instancemethod(_Quantity.Quantity_Date_Difference, None, Quantity_Date)
Quantity_Date.Subtract = new_instancemethod(_Quantity.Quantity_Date_Subtract, None, Quantity_Date)
Quantity_Date.__sub__ = new_instancemethod(_Quantity.Quantity_Date___sub__, None, Quantity_Date)
Quantity_Date.Add = new_instancemethod(_Quantity.Quantity_Date_Add, None, Quantity_Date)
Quantity_Date.__add__ = new_instancemethod(_Quantity.Quantity_Date___add__, None, Quantity_Date)
Quantity_Date.Year = new_instancemethod(_Quantity.Quantity_Date_Year, None, Quantity_Date)
Quantity_Date.Month = new_instancemethod(_Quantity.Quantity_Date_Month, None, Quantity_Date)
Quantity_Date.Day = new_instancemethod(_Quantity.Quantity_Date_Day, None, Quantity_Date)
Quantity_Date.Hour = new_instancemethod(_Quantity.Quantity_Date_Hour, None, Quantity_Date)
Quantity_Date.Minute = new_instancemethod(_Quantity.Quantity_Date_Minute, None, Quantity_Date)
Quantity_Date.Second = new_instancemethod(_Quantity.Quantity_Date_Second, None, Quantity_Date)
Quantity_Date.MilliSecond = new_instancemethod(_Quantity.Quantity_Date_MilliSecond, None, Quantity_Date)
Quantity_Date.MicroSecond = new_instancemethod(_Quantity.Quantity_Date_MicroSecond, None, Quantity_Date)
Quantity_Date.IsEqual = new_instancemethod(_Quantity.Quantity_Date_IsEqual, None, Quantity_Date)
Quantity_Date.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Date___eq_wrapper__, None, Quantity_Date)
Quantity_Date.IsEarlier = new_instancemethod(_Quantity.Quantity_Date_IsEarlier, None, Quantity_Date)
Quantity_Date.__lt__ = new_instancemethod(_Quantity.Quantity_Date___lt__, None, Quantity_Date)
Quantity_Date.IsLater = new_instancemethod(_Quantity.Quantity_Date_IsLater, None, Quantity_Date)
Quantity_Date.__gt__ = new_instancemethod(_Quantity.Quantity_Date___gt__, None, Quantity_Date)
Quantity_Date._CSFDB_GetQuantity_DatemySec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_GetQuantity_DatemySec, None, Quantity_Date)
Quantity_Date._CSFDB_SetQuantity_DatemySec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_SetQuantity_DatemySec, None, Quantity_Date)
Quantity_Date._CSFDB_GetQuantity_DatemyUSec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_GetQuantity_DatemyUSec, None, Quantity_Date)
Quantity_Date._CSFDB_SetQuantity_DatemyUSec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_SetQuantity_DatemyUSec, None, Quantity_Date)
Quantity_Date._kill_pointed = new_instancemethod(_Quantity.Quantity_Date__kill_pointed, None, Quantity_Date)
Quantity_Date_swigregister = _Quantity.Quantity_Date_swigregister
Quantity_Date_swigregister(Quantity_Date)

def Quantity_Date_IsValid(*args):
    """
    * Checks the validity of a date - returns true if a date defined from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0) is valid. A date must satisfy the conditions above: - yyyy is greater than or equal to 1979, - mm lies within the range [1, 12] (with 1 corresponding to January and 12 to December), - dd lies within a valid range for the month mm (from 1 to 28, 29, 30 or 31 depending on mm and whether yyyy is a leap year or not), - hh lies within the range [0, 23], - mn lies within the range [0, 59], - ss lies within the range [0, 59], - mis lies within the range [0, 999], - mics lies within the range [0, 999].C

    :param mm:
    :type mm: int
    :param dd:
    :type dd: int
    :param yy:
    :type yy: int
    :param hh:
    :type hh: int
    :param mn:
    :type mn: int
    :param ss:
    :type ss: int
    :param mis: default value is 0
    :type mis: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    """
    return _Quantity.Quantity_Date_IsValid(*args)

def Quantity_Date_IsLeap(*args):
    """
    * Returns true if a year is a leap year. The leap years are divisable by 4 and not by 100 except the years divisable by 400.

    :param yy:
    :type yy: int
    :rtype: bool

    """
    return _Quantity.Quantity_Date_IsLeap(*args)

class Quantity_HArray1OfColor(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        _Quantity.Quantity_HArray1OfColor_swiginit(self, _Quantity.new_Quantity_HArray1OfColor(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_HArray1OfColor_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_HArray1OfColor_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_HArray1OfColor_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_HArray1OfColor_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_HArray1OfColor_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_HArray1OfColor_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Quantity_HArray1OfColor self)"""
        return _Quantity.Quantity_HArray1OfColor__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Quantity_HArray1OfColor self) -> Handle_Quantity_HArray1OfColor"""
        return _Quantity.Quantity_HArray1OfColor_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_HArray1OfColor.Init = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Init, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Length = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Length, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Lower = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Lower, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Upper = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Upper, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.SetValue = new_instancemethod(_Quantity.Quantity_HArray1OfColor_SetValue, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Value = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Value, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_HArray1OfColor_ChangeValue, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Array1 = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Array1, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.ChangeArray1 = new_instancemethod(_Quantity.Quantity_HArray1OfColor_ChangeArray1, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_HArray1OfColor__kill_pointed, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor.GetHandle = new_instancemethod(_Quantity.Quantity_HArray1OfColor_GetHandle, None, Quantity_HArray1OfColor)
Quantity_HArray1OfColor_swigregister = _Quantity.Quantity_HArray1OfColor_swigregister
Quantity_HArray1OfColor_swigregister(Quantity_HArray1OfColor)

class Handle_Quantity_HArray1OfColor(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Quantity.Handle_Quantity_HArray1OfColor_swiginit(self, _Quantity.new_Handle_Quantity_HArray1OfColor(*args))
    DownCast = staticmethod(_Quantity.Handle_Quantity_HArray1OfColor_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Quantity_HArray1OfColor.Nullify = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_Nullify, None, Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor.IsNull = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_IsNull, None, Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor.GetObject = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_GetObject, None, Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor._kill_pointed = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor__kill_pointed, None, Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor_swigregister = _Quantity.Handle_Quantity_HArray1OfColor_swigregister
Handle_Quantity_HArray1OfColor_swigregister(Handle_Quantity_HArray1OfColor)

def Handle_Quantity_HArray1OfColor_DownCast(AnObject):
    return _Quantity.Handle_Quantity_HArray1OfColor_DownCast(AnObject)
Handle_Quantity_HArray1OfColor_DownCast = _Quantity.Handle_Quantity_HArray1OfColor_DownCast

class Quantity_Period(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Values(self, *args):
        """
        * Decomposes this period into a number of days,hours, minutes,seconds,milliseconds and microseconds Example of return values: 2 days, 15 hours, 0 minute , 0 second 0 millisecond and 0 microsecond

        :param dd:
        :type dd: int &
        :param hh:
        :type hh: int &
        :param mn:
        :type mn: int &
        :param ss:
        :type ss: int &
        :param mis:
        :type mis: int &
        :param mics:
        :type mics: int &
        :rtype: None

        * Returns the number of seconds in Ss and the number of remainding microseconds in Mics of this period. Example of return values: 3600 seconds and 0 microseconds

        :param ss:
        :type ss: int &
        :param mics:
        :type mics: int &
        :rtype: None

        """
        return _Quantity.Quantity_Period_Values(self, *args)


    def SetValues(self, *args):
        """
        * Assigns to this period the time interval defined - with dd days, hh hours, mn minutes, ss seconds, mis (defaulted to 0) milliseconds and mics (defaulted to 0) microseconds; or

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        * Assigns to this period the time interval defined - with Ss seconds and Mics (defaulted to 0) microseconds. Exceptions Quantity_PeriodDefinitionError: - if the number of seconds expressed either by: - dd days, hh hours, mn minutes and ss seconds, or - Ss is less than 0. - if the number of microseconds expressed either by: - mis milliseconds and mics microseconds, or - Mics is less than 0.

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        return _Quantity.Quantity_Period_SetValues(self, *args)


    def Subtract(self, *args):
        """
        * Subtracts one Period from another and returns the difference.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period_Subtract(self, *args)


    def __sub__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period___sub__(self, *args)


    def Add(self, *args):
        """
        * Adds one Period to another one.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period_Add(self, *args)


    def __add__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period___add__(self, *args)


    def IsEqual(self, *args):
        """
        * Returns True if both <self> and <other> are equal.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsShorter(self, *args):
        """
        * Returns True if <self> is shorter than <other>.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsShorter(self, *args)


    def __lt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period___lt__(self, *args)


    def IsLonger(self, *args):
        """
        * Returns True if <self> is longer then <other>.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsLonger(self, *args)


    def __gt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period___gt__(self, *args)


    def IsValid(*args):
        """
        * Checks the validity of a Period in form (dd,hh,mn,ss,mil,mic) With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        * Checks the validity of a Period in form (ss,mic) With: 0 <= ss  0 <= mics

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsValid(*args)

    IsValid = staticmethod(IsValid)

    def __init__(self, *args):
        """
        * Creates a Period With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        * Creates a Period with a number of seconds and microseconds. Exceptions Quantity_PeriodDefinitionError: - if the number of seconds expressed either by: - dd days, hh hours, mn minutes and ss seconds, or - Ss is less than 0. - if the number of microseconds expressed either by: - mis milliseconds and mics microseconds, or - Mics is less than 0.

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        :rtype: None

        """
        _Quantity.Quantity_Period_swiginit(self, _Quantity.new_Quantity_Period(*args))

    def _CSFDB_GetQuantity_PeriodmySec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmySec(self, *args)


    def _CSFDB_SetQuantity_PeriodmySec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmySec(self, *args)


    def _CSFDB_GetQuantity_PeriodmyUSec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmyUSec(self, *args)


    def _CSFDB_SetQuantity_PeriodmyUSec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmyUSec(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Period.Values = new_instancemethod(_Quantity.Quantity_Period_Values, None, Quantity_Period)
Quantity_Period.SetValues = new_instancemethod(_Quantity.Quantity_Period_SetValues, None, Quantity_Period)
Quantity_Period.Subtract = new_instancemethod(_Quantity.Quantity_Period_Subtract, None, Quantity_Period)
Quantity_Period.__sub__ = new_instancemethod(_Quantity.Quantity_Period___sub__, None, Quantity_Period)
Quantity_Period.Add = new_instancemethod(_Quantity.Quantity_Period_Add, None, Quantity_Period)
Quantity_Period.__add__ = new_instancemethod(_Quantity.Quantity_Period___add__, None, Quantity_Period)
Quantity_Period.IsEqual = new_instancemethod(_Quantity.Quantity_Period_IsEqual, None, Quantity_Period)
Quantity_Period.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Period___eq_wrapper__, None, Quantity_Period)
Quantity_Period.IsShorter = new_instancemethod(_Quantity.Quantity_Period_IsShorter, None, Quantity_Period)
Quantity_Period.__lt__ = new_instancemethod(_Quantity.Quantity_Period___lt__, None, Quantity_Period)
Quantity_Period.IsLonger = new_instancemethod(_Quantity.Quantity_Period_IsLonger, None, Quantity_Period)
Quantity_Period.__gt__ = new_instancemethod(_Quantity.Quantity_Period___gt__, None, Quantity_Period)
Quantity_Period._CSFDB_GetQuantity_PeriodmySec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmySec, None, Quantity_Period)
Quantity_Period._CSFDB_SetQuantity_PeriodmySec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmySec, None, Quantity_Period)
Quantity_Period._CSFDB_GetQuantity_PeriodmyUSec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmyUSec, None, Quantity_Period)
Quantity_Period._CSFDB_SetQuantity_PeriodmyUSec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmyUSec, None, Quantity_Period)
Quantity_Period._kill_pointed = new_instancemethod(_Quantity.Quantity_Period__kill_pointed, None, Quantity_Period)
Quantity_Period_swigregister = _Quantity.Quantity_Period_swigregister
Quantity_Period_swigregister(Quantity_Period)

def Quantity_Period_IsValid(*args):
    """
    * Checks the validity of a Period in form (dd,hh,mn,ss,mil,mic) With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

    :param dd:
    :type dd: int
    :param hh:
    :type hh: int
    :param mn:
    :type mn: int
    :param ss:
    :type ss: int
    :param mis: default value is 0
    :type mis: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    * Checks the validity of a Period in form (ss,mic) With: 0 <= ss  0 <= mics

    :param ss:
    :type ss: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    """
    return _Quantity.Quantity_Period_IsValid(*args)



