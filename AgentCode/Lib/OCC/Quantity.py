# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _Quantity.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Quantity', [dirname(__file__)])
        except ImportError:
            import _Quantity
            return _Quantity
        if fp is not None:
            try:
                _mod = imp.load_module('_Quantity', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Quantity = swig_import_helper()
    del swig_import_helper
else:
    import _Quantity
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Quantity.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_Quantity.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Quantity.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Quantity.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Quantity.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Quantity.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Quantity.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Quantity.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Quantity.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Quantity.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Quantity.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Quantity.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Quantity.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Quantity.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Quantity.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Quantity.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Quantity.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _Quantity.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
Quantity_NOC_BLACK = _Quantity.Quantity_NOC_BLACK
Quantity_NOC_MATRABLUE = _Quantity.Quantity_NOC_MATRABLUE
Quantity_NOC_MATRAGRAY = _Quantity.Quantity_NOC_MATRAGRAY
Quantity_NOC_ALICEBLUE = _Quantity.Quantity_NOC_ALICEBLUE
Quantity_NOC_ANTIQUEWHITE = _Quantity.Quantity_NOC_ANTIQUEWHITE
Quantity_NOC_ANTIQUEWHITE1 = _Quantity.Quantity_NOC_ANTIQUEWHITE1
Quantity_NOC_ANTIQUEWHITE2 = _Quantity.Quantity_NOC_ANTIQUEWHITE2
Quantity_NOC_ANTIQUEWHITE3 = _Quantity.Quantity_NOC_ANTIQUEWHITE3
Quantity_NOC_ANTIQUEWHITE4 = _Quantity.Quantity_NOC_ANTIQUEWHITE4
Quantity_NOC_AQUAMARINE1 = _Quantity.Quantity_NOC_AQUAMARINE1
Quantity_NOC_AQUAMARINE2 = _Quantity.Quantity_NOC_AQUAMARINE2
Quantity_NOC_AQUAMARINE4 = _Quantity.Quantity_NOC_AQUAMARINE4
Quantity_NOC_AZURE = _Quantity.Quantity_NOC_AZURE
Quantity_NOC_AZURE2 = _Quantity.Quantity_NOC_AZURE2
Quantity_NOC_AZURE3 = _Quantity.Quantity_NOC_AZURE3
Quantity_NOC_AZURE4 = _Quantity.Quantity_NOC_AZURE4
Quantity_NOC_BEIGE = _Quantity.Quantity_NOC_BEIGE
Quantity_NOC_BISQUE = _Quantity.Quantity_NOC_BISQUE
Quantity_NOC_BISQUE2 = _Quantity.Quantity_NOC_BISQUE2
Quantity_NOC_BISQUE3 = _Quantity.Quantity_NOC_BISQUE3
Quantity_NOC_BISQUE4 = _Quantity.Quantity_NOC_BISQUE4
Quantity_NOC_BLANCHEDALMOND = _Quantity.Quantity_NOC_BLANCHEDALMOND
Quantity_NOC_BLUE1 = _Quantity.Quantity_NOC_BLUE1
Quantity_NOC_BLUE2 = _Quantity.Quantity_NOC_BLUE2
Quantity_NOC_BLUE3 = _Quantity.Quantity_NOC_BLUE3
Quantity_NOC_BLUE4 = _Quantity.Quantity_NOC_BLUE4
Quantity_NOC_BLUEVIOLET = _Quantity.Quantity_NOC_BLUEVIOLET
Quantity_NOC_BROWN = _Quantity.Quantity_NOC_BROWN
Quantity_NOC_BROWN1 = _Quantity.Quantity_NOC_BROWN1
Quantity_NOC_BROWN2 = _Quantity.Quantity_NOC_BROWN2
Quantity_NOC_BROWN3 = _Quantity.Quantity_NOC_BROWN3
Quantity_NOC_BROWN4 = _Quantity.Quantity_NOC_BROWN4
Quantity_NOC_BURLYWOOD = _Quantity.Quantity_NOC_BURLYWOOD
Quantity_NOC_BURLYWOOD1 = _Quantity.Quantity_NOC_BURLYWOOD1
Quantity_NOC_BURLYWOOD2 = _Quantity.Quantity_NOC_BURLYWOOD2
Quantity_NOC_BURLYWOOD3 = _Quantity.Quantity_NOC_BURLYWOOD3
Quantity_NOC_BURLYWOOD4 = _Quantity.Quantity_NOC_BURLYWOOD4
Quantity_NOC_CADETBLUE = _Quantity.Quantity_NOC_CADETBLUE
Quantity_NOC_CADETBLUE1 = _Quantity.Quantity_NOC_CADETBLUE1
Quantity_NOC_CADETBLUE2 = _Quantity.Quantity_NOC_CADETBLUE2
Quantity_NOC_CADETBLUE3 = _Quantity.Quantity_NOC_CADETBLUE3
Quantity_NOC_CADETBLUE4 = _Quantity.Quantity_NOC_CADETBLUE4
Quantity_NOC_CHARTREUSE = _Quantity.Quantity_NOC_CHARTREUSE
Quantity_NOC_CHARTREUSE1 = _Quantity.Quantity_NOC_CHARTREUSE1
Quantity_NOC_CHARTREUSE2 = _Quantity.Quantity_NOC_CHARTREUSE2
Quantity_NOC_CHARTREUSE3 = _Quantity.Quantity_NOC_CHARTREUSE3
Quantity_NOC_CHARTREUSE4 = _Quantity.Quantity_NOC_CHARTREUSE4
Quantity_NOC_CHOCOLATE = _Quantity.Quantity_NOC_CHOCOLATE
Quantity_NOC_CHOCOLATE1 = _Quantity.Quantity_NOC_CHOCOLATE1
Quantity_NOC_CHOCOLATE2 = _Quantity.Quantity_NOC_CHOCOLATE2
Quantity_NOC_CHOCOLATE3 = _Quantity.Quantity_NOC_CHOCOLATE3
Quantity_NOC_CHOCOLATE4 = _Quantity.Quantity_NOC_CHOCOLATE4
Quantity_NOC_CORAL = _Quantity.Quantity_NOC_CORAL
Quantity_NOC_CORAL1 = _Quantity.Quantity_NOC_CORAL1
Quantity_NOC_CORAL2 = _Quantity.Quantity_NOC_CORAL2
Quantity_NOC_CORAL3 = _Quantity.Quantity_NOC_CORAL3
Quantity_NOC_CORAL4 = _Quantity.Quantity_NOC_CORAL4
Quantity_NOC_CORNFLOWERBLUE = _Quantity.Quantity_NOC_CORNFLOWERBLUE
Quantity_NOC_CORNSILK1 = _Quantity.Quantity_NOC_CORNSILK1
Quantity_NOC_CORNSILK2 = _Quantity.Quantity_NOC_CORNSILK2
Quantity_NOC_CORNSILK3 = _Quantity.Quantity_NOC_CORNSILK3
Quantity_NOC_CORNSILK4 = _Quantity.Quantity_NOC_CORNSILK4
Quantity_NOC_CYAN1 = _Quantity.Quantity_NOC_CYAN1
Quantity_NOC_CYAN2 = _Quantity.Quantity_NOC_CYAN2
Quantity_NOC_CYAN3 = _Quantity.Quantity_NOC_CYAN3
Quantity_NOC_CYAN4 = _Quantity.Quantity_NOC_CYAN4
Quantity_NOC_DARKGOLDENROD = _Quantity.Quantity_NOC_DARKGOLDENROD
Quantity_NOC_DARKGOLDENROD1 = _Quantity.Quantity_NOC_DARKGOLDENROD1
Quantity_NOC_DARKGOLDENROD2 = _Quantity.Quantity_NOC_DARKGOLDENROD2
Quantity_NOC_DARKGOLDENROD3 = _Quantity.Quantity_NOC_DARKGOLDENROD3
Quantity_NOC_DARKGOLDENROD4 = _Quantity.Quantity_NOC_DARKGOLDENROD4
Quantity_NOC_DARKGREEN = _Quantity.Quantity_NOC_DARKGREEN
Quantity_NOC_DARKKHAKI = _Quantity.Quantity_NOC_DARKKHAKI
Quantity_NOC_DARKOLIVEGREEN = _Quantity.Quantity_NOC_DARKOLIVEGREEN
Quantity_NOC_DARKOLIVEGREEN1 = _Quantity.Quantity_NOC_DARKOLIVEGREEN1
Quantity_NOC_DARKOLIVEGREEN2 = _Quantity.Quantity_NOC_DARKOLIVEGREEN2
Quantity_NOC_DARKOLIVEGREEN3 = _Quantity.Quantity_NOC_DARKOLIVEGREEN3
Quantity_NOC_DARKOLIVEGREEN4 = _Quantity.Quantity_NOC_DARKOLIVEGREEN4
Quantity_NOC_DARKORANGE = _Quantity.Quantity_NOC_DARKORANGE
Quantity_NOC_DARKORANGE1 = _Quantity.Quantity_NOC_DARKORANGE1
Quantity_NOC_DARKORANGE2 = _Quantity.Quantity_NOC_DARKORANGE2
Quantity_NOC_DARKORANGE3 = _Quantity.Quantity_NOC_DARKORANGE3
Quantity_NOC_DARKORANGE4 = _Quantity.Quantity_NOC_DARKORANGE4
Quantity_NOC_DARKORCHID = _Quantity.Quantity_NOC_DARKORCHID
Quantity_NOC_DARKORCHID1 = _Quantity.Quantity_NOC_DARKORCHID1
Quantity_NOC_DARKORCHID2 = _Quantity.Quantity_NOC_DARKORCHID2
Quantity_NOC_DARKORCHID3 = _Quantity.Quantity_NOC_DARKORCHID3
Quantity_NOC_DARKORCHID4 = _Quantity.Quantity_NOC_DARKORCHID4
Quantity_NOC_DARKSALMON = _Quantity.Quantity_NOC_DARKSALMON
Quantity_NOC_DARKSEAGREEN = _Quantity.Quantity_NOC_DARKSEAGREEN
Quantity_NOC_DARKSEAGREEN1 = _Quantity.Quantity_NOC_DARKSEAGREEN1
Quantity_NOC_DARKSEAGREEN2 = _Quantity.Quantity_NOC_DARKSEAGREEN2
Quantity_NOC_DARKSEAGREEN3 = _Quantity.Quantity_NOC_DARKSEAGREEN3
Quantity_NOC_DARKSEAGREEN4 = _Quantity.Quantity_NOC_DARKSEAGREEN4
Quantity_NOC_DARKSLATEBLUE = _Quantity.Quantity_NOC_DARKSLATEBLUE
Quantity_NOC_DARKSLATEGRAY1 = _Quantity.Quantity_NOC_DARKSLATEGRAY1
Quantity_NOC_DARKSLATEGRAY2 = _Quantity.Quantity_NOC_DARKSLATEGRAY2
Quantity_NOC_DARKSLATEGRAY3 = _Quantity.Quantity_NOC_DARKSLATEGRAY3
Quantity_NOC_DARKSLATEGRAY4 = _Quantity.Quantity_NOC_DARKSLATEGRAY4
Quantity_NOC_DARKSLATEGRAY = _Quantity.Quantity_NOC_DARKSLATEGRAY
Quantity_NOC_DARKTURQUOISE = _Quantity.Quantity_NOC_DARKTURQUOISE
Quantity_NOC_DARKVIOLET = _Quantity.Quantity_NOC_DARKVIOLET
Quantity_NOC_DEEPPINK = _Quantity.Quantity_NOC_DEEPPINK
Quantity_NOC_DEEPPINK2 = _Quantity.Quantity_NOC_DEEPPINK2
Quantity_NOC_DEEPPINK3 = _Quantity.Quantity_NOC_DEEPPINK3
Quantity_NOC_DEEPPINK4 = _Quantity.Quantity_NOC_DEEPPINK4
Quantity_NOC_DEEPSKYBLUE1 = _Quantity.Quantity_NOC_DEEPSKYBLUE1
Quantity_NOC_DEEPSKYBLUE2 = _Quantity.Quantity_NOC_DEEPSKYBLUE2
Quantity_NOC_DEEPSKYBLUE3 = _Quantity.Quantity_NOC_DEEPSKYBLUE3
Quantity_NOC_DEEPSKYBLUE4 = _Quantity.Quantity_NOC_DEEPSKYBLUE4
Quantity_NOC_DODGERBLUE1 = _Quantity.Quantity_NOC_DODGERBLUE1
Quantity_NOC_DODGERBLUE2 = _Quantity.Quantity_NOC_DODGERBLUE2
Quantity_NOC_DODGERBLUE3 = _Quantity.Quantity_NOC_DODGERBLUE3
Quantity_NOC_DODGERBLUE4 = _Quantity.Quantity_NOC_DODGERBLUE4
Quantity_NOC_FIREBRICK = _Quantity.Quantity_NOC_FIREBRICK
Quantity_NOC_FIREBRICK1 = _Quantity.Quantity_NOC_FIREBRICK1
Quantity_NOC_FIREBRICK2 = _Quantity.Quantity_NOC_FIREBRICK2
Quantity_NOC_FIREBRICK3 = _Quantity.Quantity_NOC_FIREBRICK3
Quantity_NOC_FIREBRICK4 = _Quantity.Quantity_NOC_FIREBRICK4
Quantity_NOC_FLORALWHITE = _Quantity.Quantity_NOC_FLORALWHITE
Quantity_NOC_FORESTGREEN = _Quantity.Quantity_NOC_FORESTGREEN
Quantity_NOC_GAINSBORO = _Quantity.Quantity_NOC_GAINSBORO
Quantity_NOC_GHOSTWHITE = _Quantity.Quantity_NOC_GHOSTWHITE
Quantity_NOC_GOLD = _Quantity.Quantity_NOC_GOLD
Quantity_NOC_GOLD1 = _Quantity.Quantity_NOC_GOLD1
Quantity_NOC_GOLD2 = _Quantity.Quantity_NOC_GOLD2
Quantity_NOC_GOLD3 = _Quantity.Quantity_NOC_GOLD3
Quantity_NOC_GOLD4 = _Quantity.Quantity_NOC_GOLD4
Quantity_NOC_GOLDENROD = _Quantity.Quantity_NOC_GOLDENROD
Quantity_NOC_GOLDENROD1 = _Quantity.Quantity_NOC_GOLDENROD1
Quantity_NOC_GOLDENROD2 = _Quantity.Quantity_NOC_GOLDENROD2
Quantity_NOC_GOLDENROD3 = _Quantity.Quantity_NOC_GOLDENROD3
Quantity_NOC_GOLDENROD4 = _Quantity.Quantity_NOC_GOLDENROD4
Quantity_NOC_GRAY = _Quantity.Quantity_NOC_GRAY
Quantity_NOC_GRAY0 = _Quantity.Quantity_NOC_GRAY0
Quantity_NOC_GRAY1 = _Quantity.Quantity_NOC_GRAY1
Quantity_NOC_GRAY10 = _Quantity.Quantity_NOC_GRAY10
Quantity_NOC_GRAY11 = _Quantity.Quantity_NOC_GRAY11
Quantity_NOC_GRAY12 = _Quantity.Quantity_NOC_GRAY12
Quantity_NOC_GRAY13 = _Quantity.Quantity_NOC_GRAY13
Quantity_NOC_GRAY14 = _Quantity.Quantity_NOC_GRAY14
Quantity_NOC_GRAY15 = _Quantity.Quantity_NOC_GRAY15
Quantity_NOC_GRAY16 = _Quantity.Quantity_NOC_GRAY16
Quantity_NOC_GRAY17 = _Quantity.Quantity_NOC_GRAY17
Quantity_NOC_GRAY18 = _Quantity.Quantity_NOC_GRAY18
Quantity_NOC_GRAY19 = _Quantity.Quantity_NOC_GRAY19
Quantity_NOC_GRAY2 = _Quantity.Quantity_NOC_GRAY2
Quantity_NOC_GRAY20 = _Quantity.Quantity_NOC_GRAY20
Quantity_NOC_GRAY21 = _Quantity.Quantity_NOC_GRAY21
Quantity_NOC_GRAY22 = _Quantity.Quantity_NOC_GRAY22
Quantity_NOC_GRAY23 = _Quantity.Quantity_NOC_GRAY23
Quantity_NOC_GRAY24 = _Quantity.Quantity_NOC_GRAY24
Quantity_NOC_GRAY25 = _Quantity.Quantity_NOC_GRAY25
Quantity_NOC_GRAY26 = _Quantity.Quantity_NOC_GRAY26
Quantity_NOC_GRAY27 = _Quantity.Quantity_NOC_GRAY27
Quantity_NOC_GRAY28 = _Quantity.Quantity_NOC_GRAY28
Quantity_NOC_GRAY29 = _Quantity.Quantity_NOC_GRAY29
Quantity_NOC_GRAY3 = _Quantity.Quantity_NOC_GRAY3
Quantity_NOC_GRAY30 = _Quantity.Quantity_NOC_GRAY30
Quantity_NOC_GRAY31 = _Quantity.Quantity_NOC_GRAY31
Quantity_NOC_GRAY32 = _Quantity.Quantity_NOC_GRAY32
Quantity_NOC_GRAY33 = _Quantity.Quantity_NOC_GRAY33
Quantity_NOC_GRAY34 = _Quantity.Quantity_NOC_GRAY34
Quantity_NOC_GRAY35 = _Quantity.Quantity_NOC_GRAY35
Quantity_NOC_GRAY36 = _Quantity.Quantity_NOC_GRAY36
Quantity_NOC_GRAY37 = _Quantity.Quantity_NOC_GRAY37
Quantity_NOC_GRAY38 = _Quantity.Quantity_NOC_GRAY38
Quantity_NOC_GRAY39 = _Quantity.Quantity_NOC_GRAY39
Quantity_NOC_GRAY4 = _Quantity.Quantity_NOC_GRAY4
Quantity_NOC_GRAY40 = _Quantity.Quantity_NOC_GRAY40
Quantity_NOC_GRAY41 = _Quantity.Quantity_NOC_GRAY41
Quantity_NOC_GRAY42 = _Quantity.Quantity_NOC_GRAY42
Quantity_NOC_GRAY43 = _Quantity.Quantity_NOC_GRAY43
Quantity_NOC_GRAY44 = _Quantity.Quantity_NOC_GRAY44
Quantity_NOC_GRAY45 = _Quantity.Quantity_NOC_GRAY45
Quantity_NOC_GRAY46 = _Quantity.Quantity_NOC_GRAY46
Quantity_NOC_GRAY47 = _Quantity.Quantity_NOC_GRAY47
Quantity_NOC_GRAY48 = _Quantity.Quantity_NOC_GRAY48
Quantity_NOC_GRAY49 = _Quantity.Quantity_NOC_GRAY49
Quantity_NOC_GRAY5 = _Quantity.Quantity_NOC_GRAY5
Quantity_NOC_GRAY50 = _Quantity.Quantity_NOC_GRAY50
Quantity_NOC_GRAY51 = _Quantity.Quantity_NOC_GRAY51
Quantity_NOC_GRAY52 = _Quantity.Quantity_NOC_GRAY52
Quantity_NOC_GRAY53 = _Quantity.Quantity_NOC_GRAY53
Quantity_NOC_GRAY54 = _Quantity.Quantity_NOC_GRAY54
Quantity_NOC_GRAY55 = _Quantity.Quantity_NOC_GRAY55
Quantity_NOC_GRAY56 = _Quantity.Quantity_NOC_GRAY56
Quantity_NOC_GRAY57 = _Quantity.Quantity_NOC_GRAY57
Quantity_NOC_GRAY58 = _Quantity.Quantity_NOC_GRAY58
Quantity_NOC_GRAY59 = _Quantity.Quantity_NOC_GRAY59
Quantity_NOC_GRAY6 = _Quantity.Quantity_NOC_GRAY6
Quantity_NOC_GRAY60 = _Quantity.Quantity_NOC_GRAY60
Quantity_NOC_GRAY61 = _Quantity.Quantity_NOC_GRAY61
Quantity_NOC_GRAY62 = _Quantity.Quantity_NOC_GRAY62
Quantity_NOC_GRAY63 = _Quantity.Quantity_NOC_GRAY63
Quantity_NOC_GRAY64 = _Quantity.Quantity_NOC_GRAY64
Quantity_NOC_GRAY65 = _Quantity.Quantity_NOC_GRAY65
Quantity_NOC_GRAY66 = _Quantity.Quantity_NOC_GRAY66
Quantity_NOC_GRAY67 = _Quantity.Quantity_NOC_GRAY67
Quantity_NOC_GRAY68 = _Quantity.Quantity_NOC_GRAY68
Quantity_NOC_GRAY69 = _Quantity.Quantity_NOC_GRAY69
Quantity_NOC_GRAY7 = _Quantity.Quantity_NOC_GRAY7
Quantity_NOC_GRAY70 = _Quantity.Quantity_NOC_GRAY70
Quantity_NOC_GRAY71 = _Quantity.Quantity_NOC_GRAY71
Quantity_NOC_GRAY72 = _Quantity.Quantity_NOC_GRAY72
Quantity_NOC_GRAY73 = _Quantity.Quantity_NOC_GRAY73
Quantity_NOC_GRAY74 = _Quantity.Quantity_NOC_GRAY74
Quantity_NOC_GRAY75 = _Quantity.Quantity_NOC_GRAY75
Quantity_NOC_GRAY76 = _Quantity.Quantity_NOC_GRAY76
Quantity_NOC_GRAY77 = _Quantity.Quantity_NOC_GRAY77
Quantity_NOC_GRAY78 = _Quantity.Quantity_NOC_GRAY78
Quantity_NOC_GRAY79 = _Quantity.Quantity_NOC_GRAY79
Quantity_NOC_GRAY8 = _Quantity.Quantity_NOC_GRAY8
Quantity_NOC_GRAY80 = _Quantity.Quantity_NOC_GRAY80
Quantity_NOC_GRAY81 = _Quantity.Quantity_NOC_GRAY81
Quantity_NOC_GRAY82 = _Quantity.Quantity_NOC_GRAY82
Quantity_NOC_GRAY83 = _Quantity.Quantity_NOC_GRAY83
Quantity_NOC_GRAY85 = _Quantity.Quantity_NOC_GRAY85
Quantity_NOC_GRAY86 = _Quantity.Quantity_NOC_GRAY86
Quantity_NOC_GRAY87 = _Quantity.Quantity_NOC_GRAY87
Quantity_NOC_GRAY88 = _Quantity.Quantity_NOC_GRAY88
Quantity_NOC_GRAY89 = _Quantity.Quantity_NOC_GRAY89
Quantity_NOC_GRAY9 = _Quantity.Quantity_NOC_GRAY9
Quantity_NOC_GRAY90 = _Quantity.Quantity_NOC_GRAY90
Quantity_NOC_GRAY91 = _Quantity.Quantity_NOC_GRAY91
Quantity_NOC_GRAY92 = _Quantity.Quantity_NOC_GRAY92
Quantity_NOC_GRAY93 = _Quantity.Quantity_NOC_GRAY93
Quantity_NOC_GRAY94 = _Quantity.Quantity_NOC_GRAY94
Quantity_NOC_GRAY95 = _Quantity.Quantity_NOC_GRAY95
Quantity_NOC_GREEN = _Quantity.Quantity_NOC_GREEN
Quantity_NOC_GREEN1 = _Quantity.Quantity_NOC_GREEN1
Quantity_NOC_GREEN2 = _Quantity.Quantity_NOC_GREEN2
Quantity_NOC_GREEN3 = _Quantity.Quantity_NOC_GREEN3
Quantity_NOC_GREEN4 = _Quantity.Quantity_NOC_GREEN4
Quantity_NOC_GREENYELLOW = _Quantity.Quantity_NOC_GREENYELLOW
Quantity_NOC_GRAY97 = _Quantity.Quantity_NOC_GRAY97
Quantity_NOC_GRAY98 = _Quantity.Quantity_NOC_GRAY98
Quantity_NOC_GRAY99 = _Quantity.Quantity_NOC_GRAY99
Quantity_NOC_HONEYDEW = _Quantity.Quantity_NOC_HONEYDEW
Quantity_NOC_HONEYDEW2 = _Quantity.Quantity_NOC_HONEYDEW2
Quantity_NOC_HONEYDEW3 = _Quantity.Quantity_NOC_HONEYDEW3
Quantity_NOC_HONEYDEW4 = _Quantity.Quantity_NOC_HONEYDEW4
Quantity_NOC_HOTPINK = _Quantity.Quantity_NOC_HOTPINK
Quantity_NOC_HOTPINK1 = _Quantity.Quantity_NOC_HOTPINK1
Quantity_NOC_HOTPINK2 = _Quantity.Quantity_NOC_HOTPINK2
Quantity_NOC_HOTPINK3 = _Quantity.Quantity_NOC_HOTPINK3
Quantity_NOC_HOTPINK4 = _Quantity.Quantity_NOC_HOTPINK4
Quantity_NOC_INDIANRED = _Quantity.Quantity_NOC_INDIANRED
Quantity_NOC_INDIANRED1 = _Quantity.Quantity_NOC_INDIANRED1
Quantity_NOC_INDIANRED2 = _Quantity.Quantity_NOC_INDIANRED2
Quantity_NOC_INDIANRED3 = _Quantity.Quantity_NOC_INDIANRED3
Quantity_NOC_INDIANRED4 = _Quantity.Quantity_NOC_INDIANRED4
Quantity_NOC_IVORY = _Quantity.Quantity_NOC_IVORY
Quantity_NOC_IVORY2 = _Quantity.Quantity_NOC_IVORY2
Quantity_NOC_IVORY3 = _Quantity.Quantity_NOC_IVORY3
Quantity_NOC_IVORY4 = _Quantity.Quantity_NOC_IVORY4
Quantity_NOC_KHAKI = _Quantity.Quantity_NOC_KHAKI
Quantity_NOC_KHAKI1 = _Quantity.Quantity_NOC_KHAKI1
Quantity_NOC_KHAKI2 = _Quantity.Quantity_NOC_KHAKI2
Quantity_NOC_KHAKI3 = _Quantity.Quantity_NOC_KHAKI3
Quantity_NOC_KHAKI4 = _Quantity.Quantity_NOC_KHAKI4
Quantity_NOC_LAVENDER = _Quantity.Quantity_NOC_LAVENDER
Quantity_NOC_LAVENDERBLUSH1 = _Quantity.Quantity_NOC_LAVENDERBLUSH1
Quantity_NOC_LAVENDERBLUSH2 = _Quantity.Quantity_NOC_LAVENDERBLUSH2
Quantity_NOC_LAVENDERBLUSH3 = _Quantity.Quantity_NOC_LAVENDERBLUSH3
Quantity_NOC_LAVENDERBLUSH4 = _Quantity.Quantity_NOC_LAVENDERBLUSH4
Quantity_NOC_LAWNGREEN = _Quantity.Quantity_NOC_LAWNGREEN
Quantity_NOC_LEMONCHIFFON1 = _Quantity.Quantity_NOC_LEMONCHIFFON1
Quantity_NOC_LEMONCHIFFON2 = _Quantity.Quantity_NOC_LEMONCHIFFON2
Quantity_NOC_LEMONCHIFFON3 = _Quantity.Quantity_NOC_LEMONCHIFFON3
Quantity_NOC_LEMONCHIFFON4 = _Quantity.Quantity_NOC_LEMONCHIFFON4
Quantity_NOC_LIGHTBLUE = _Quantity.Quantity_NOC_LIGHTBLUE
Quantity_NOC_LIGHTBLUE1 = _Quantity.Quantity_NOC_LIGHTBLUE1
Quantity_NOC_LIGHTBLUE2 = _Quantity.Quantity_NOC_LIGHTBLUE2
Quantity_NOC_LIGHTBLUE3 = _Quantity.Quantity_NOC_LIGHTBLUE3
Quantity_NOC_LIGHTBLUE4 = _Quantity.Quantity_NOC_LIGHTBLUE4
Quantity_NOC_LIGHTCORAL = _Quantity.Quantity_NOC_LIGHTCORAL
Quantity_NOC_LIGHTCYAN1 = _Quantity.Quantity_NOC_LIGHTCYAN1
Quantity_NOC_LIGHTCYAN2 = _Quantity.Quantity_NOC_LIGHTCYAN2
Quantity_NOC_LIGHTCYAN3 = _Quantity.Quantity_NOC_LIGHTCYAN3
Quantity_NOC_LIGHTCYAN4 = _Quantity.Quantity_NOC_LIGHTCYAN4
Quantity_NOC_LIGHTGOLDENROD = _Quantity.Quantity_NOC_LIGHTGOLDENROD
Quantity_NOC_LIGHTGOLDENROD1 = _Quantity.Quantity_NOC_LIGHTGOLDENROD1
Quantity_NOC_LIGHTGOLDENROD2 = _Quantity.Quantity_NOC_LIGHTGOLDENROD2
Quantity_NOC_LIGHTGOLDENROD3 = _Quantity.Quantity_NOC_LIGHTGOLDENROD3
Quantity_NOC_LIGHTGOLDENROD4 = _Quantity.Quantity_NOC_LIGHTGOLDENROD4
Quantity_NOC_LIGHTGOLDENRODYELLOW = _Quantity.Quantity_NOC_LIGHTGOLDENRODYELLOW
Quantity_NOC_LIGHTGRAY = _Quantity.Quantity_NOC_LIGHTGRAY
Quantity_NOC_LIGHTPINK = _Quantity.Quantity_NOC_LIGHTPINK
Quantity_NOC_LIGHTPINK1 = _Quantity.Quantity_NOC_LIGHTPINK1
Quantity_NOC_LIGHTPINK2 = _Quantity.Quantity_NOC_LIGHTPINK2
Quantity_NOC_LIGHTPINK3 = _Quantity.Quantity_NOC_LIGHTPINK3
Quantity_NOC_LIGHTPINK4 = _Quantity.Quantity_NOC_LIGHTPINK4
Quantity_NOC_LIGHTSALMON1 = _Quantity.Quantity_NOC_LIGHTSALMON1
Quantity_NOC_LIGHTSALMON2 = _Quantity.Quantity_NOC_LIGHTSALMON2
Quantity_NOC_LIGHTSALMON3 = _Quantity.Quantity_NOC_LIGHTSALMON3
Quantity_NOC_LIGHTSALMON4 = _Quantity.Quantity_NOC_LIGHTSALMON4
Quantity_NOC_LIGHTSEAGREEN = _Quantity.Quantity_NOC_LIGHTSEAGREEN
Quantity_NOC_LIGHTSKYBLUE = _Quantity.Quantity_NOC_LIGHTSKYBLUE
Quantity_NOC_LIGHTSKYBLUE1 = _Quantity.Quantity_NOC_LIGHTSKYBLUE1
Quantity_NOC_LIGHTSKYBLUE2 = _Quantity.Quantity_NOC_LIGHTSKYBLUE2
Quantity_NOC_LIGHTSKYBLUE3 = _Quantity.Quantity_NOC_LIGHTSKYBLUE3
Quantity_NOC_LIGHTSKYBLUE4 = _Quantity.Quantity_NOC_LIGHTSKYBLUE4
Quantity_NOC_LIGHTSLATEBLUE = _Quantity.Quantity_NOC_LIGHTSLATEBLUE
Quantity_NOC_LIGHTSLATEGRAY = _Quantity.Quantity_NOC_LIGHTSLATEGRAY
Quantity_NOC_LIGHTSTEELBLUE = _Quantity.Quantity_NOC_LIGHTSTEELBLUE
Quantity_NOC_LIGHTSTEELBLUE1 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE1
Quantity_NOC_LIGHTSTEELBLUE2 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE2
Quantity_NOC_LIGHTSTEELBLUE3 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE3
Quantity_NOC_LIGHTSTEELBLUE4 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE4
Quantity_NOC_LIGHTYELLOW = _Quantity.Quantity_NOC_LIGHTYELLOW
Quantity_NOC_LIGHTYELLOW2 = _Quantity.Quantity_NOC_LIGHTYELLOW2
Quantity_NOC_LIGHTYELLOW3 = _Quantity.Quantity_NOC_LIGHTYELLOW3
Quantity_NOC_LIGHTYELLOW4 = _Quantity.Quantity_NOC_LIGHTYELLOW4
Quantity_NOC_LIMEGREEN = _Quantity.Quantity_NOC_LIMEGREEN
Quantity_NOC_LINEN = _Quantity.Quantity_NOC_LINEN
Quantity_NOC_MAGENTA1 = _Quantity.Quantity_NOC_MAGENTA1
Quantity_NOC_MAGENTA2 = _Quantity.Quantity_NOC_MAGENTA2
Quantity_NOC_MAGENTA3 = _Quantity.Quantity_NOC_MAGENTA3
Quantity_NOC_MAGENTA4 = _Quantity.Quantity_NOC_MAGENTA4
Quantity_NOC_MAROON = _Quantity.Quantity_NOC_MAROON
Quantity_NOC_MAROON1 = _Quantity.Quantity_NOC_MAROON1
Quantity_NOC_MAROON2 = _Quantity.Quantity_NOC_MAROON2
Quantity_NOC_MAROON3 = _Quantity.Quantity_NOC_MAROON3
Quantity_NOC_MAROON4 = _Quantity.Quantity_NOC_MAROON4
Quantity_NOC_MEDIUMAQUAMARINE = _Quantity.Quantity_NOC_MEDIUMAQUAMARINE
Quantity_NOC_MEDIUMORCHID = _Quantity.Quantity_NOC_MEDIUMORCHID
Quantity_NOC_MEDIUMORCHID1 = _Quantity.Quantity_NOC_MEDIUMORCHID1
Quantity_NOC_MEDIUMORCHID2 = _Quantity.Quantity_NOC_MEDIUMORCHID2
Quantity_NOC_MEDIUMORCHID3 = _Quantity.Quantity_NOC_MEDIUMORCHID3
Quantity_NOC_MEDIUMORCHID4 = _Quantity.Quantity_NOC_MEDIUMORCHID4
Quantity_NOC_MEDIUMPURPLE = _Quantity.Quantity_NOC_MEDIUMPURPLE
Quantity_NOC_MEDIUMPURPLE1 = _Quantity.Quantity_NOC_MEDIUMPURPLE1
Quantity_NOC_MEDIUMPURPLE2 = _Quantity.Quantity_NOC_MEDIUMPURPLE2
Quantity_NOC_MEDIUMPURPLE3 = _Quantity.Quantity_NOC_MEDIUMPURPLE3
Quantity_NOC_MEDIUMPURPLE4 = _Quantity.Quantity_NOC_MEDIUMPURPLE4
Quantity_NOC_MEDIUMSEAGREEN = _Quantity.Quantity_NOC_MEDIUMSEAGREEN
Quantity_NOC_MEDIUMSLATEBLUE = _Quantity.Quantity_NOC_MEDIUMSLATEBLUE
Quantity_NOC_MEDIUMSPRINGGREEN = _Quantity.Quantity_NOC_MEDIUMSPRINGGREEN
Quantity_NOC_MEDIUMTURQUOISE = _Quantity.Quantity_NOC_MEDIUMTURQUOISE
Quantity_NOC_MEDIUMVIOLETRED = _Quantity.Quantity_NOC_MEDIUMVIOLETRED
Quantity_NOC_MIDNIGHTBLUE = _Quantity.Quantity_NOC_MIDNIGHTBLUE
Quantity_NOC_MINTCREAM = _Quantity.Quantity_NOC_MINTCREAM
Quantity_NOC_MISTYROSE = _Quantity.Quantity_NOC_MISTYROSE
Quantity_NOC_MISTYROSE2 = _Quantity.Quantity_NOC_MISTYROSE2
Quantity_NOC_MISTYROSE3 = _Quantity.Quantity_NOC_MISTYROSE3
Quantity_NOC_MISTYROSE4 = _Quantity.Quantity_NOC_MISTYROSE4
Quantity_NOC_MOCCASIN = _Quantity.Quantity_NOC_MOCCASIN
Quantity_NOC_NAVAJOWHITE1 = _Quantity.Quantity_NOC_NAVAJOWHITE1
Quantity_NOC_NAVAJOWHITE2 = _Quantity.Quantity_NOC_NAVAJOWHITE2
Quantity_NOC_NAVAJOWHITE3 = _Quantity.Quantity_NOC_NAVAJOWHITE3
Quantity_NOC_NAVAJOWHITE4 = _Quantity.Quantity_NOC_NAVAJOWHITE4
Quantity_NOC_NAVYBLUE = _Quantity.Quantity_NOC_NAVYBLUE
Quantity_NOC_OLDLACE = _Quantity.Quantity_NOC_OLDLACE
Quantity_NOC_OLIVEDRAB = _Quantity.Quantity_NOC_OLIVEDRAB
Quantity_NOC_OLIVEDRAB1 = _Quantity.Quantity_NOC_OLIVEDRAB1
Quantity_NOC_OLIVEDRAB2 = _Quantity.Quantity_NOC_OLIVEDRAB2
Quantity_NOC_OLIVEDRAB3 = _Quantity.Quantity_NOC_OLIVEDRAB3
Quantity_NOC_OLIVEDRAB4 = _Quantity.Quantity_NOC_OLIVEDRAB4
Quantity_NOC_ORANGE = _Quantity.Quantity_NOC_ORANGE
Quantity_NOC_ORANGE1 = _Quantity.Quantity_NOC_ORANGE1
Quantity_NOC_ORANGE2 = _Quantity.Quantity_NOC_ORANGE2
Quantity_NOC_ORANGE3 = _Quantity.Quantity_NOC_ORANGE3
Quantity_NOC_ORANGE4 = _Quantity.Quantity_NOC_ORANGE4
Quantity_NOC_ORANGERED = _Quantity.Quantity_NOC_ORANGERED
Quantity_NOC_ORANGERED1 = _Quantity.Quantity_NOC_ORANGERED1
Quantity_NOC_ORANGERED2 = _Quantity.Quantity_NOC_ORANGERED2
Quantity_NOC_ORANGERED3 = _Quantity.Quantity_NOC_ORANGERED3
Quantity_NOC_ORANGERED4 = _Quantity.Quantity_NOC_ORANGERED4
Quantity_NOC_ORCHID = _Quantity.Quantity_NOC_ORCHID
Quantity_NOC_ORCHID1 = _Quantity.Quantity_NOC_ORCHID1
Quantity_NOC_ORCHID2 = _Quantity.Quantity_NOC_ORCHID2
Quantity_NOC_ORCHID3 = _Quantity.Quantity_NOC_ORCHID3
Quantity_NOC_ORCHID4 = _Quantity.Quantity_NOC_ORCHID4
Quantity_NOC_PALEGOLDENROD = _Quantity.Quantity_NOC_PALEGOLDENROD
Quantity_NOC_PALEGREEN = _Quantity.Quantity_NOC_PALEGREEN
Quantity_NOC_PALEGREEN1 = _Quantity.Quantity_NOC_PALEGREEN1
Quantity_NOC_PALEGREEN2 = _Quantity.Quantity_NOC_PALEGREEN2
Quantity_NOC_PALEGREEN3 = _Quantity.Quantity_NOC_PALEGREEN3
Quantity_NOC_PALEGREEN4 = _Quantity.Quantity_NOC_PALEGREEN4
Quantity_NOC_PALETURQUOISE = _Quantity.Quantity_NOC_PALETURQUOISE
Quantity_NOC_PALETURQUOISE1 = _Quantity.Quantity_NOC_PALETURQUOISE1
Quantity_NOC_PALETURQUOISE2 = _Quantity.Quantity_NOC_PALETURQUOISE2
Quantity_NOC_PALETURQUOISE3 = _Quantity.Quantity_NOC_PALETURQUOISE3
Quantity_NOC_PALETURQUOISE4 = _Quantity.Quantity_NOC_PALETURQUOISE4
Quantity_NOC_PALEVIOLETRED = _Quantity.Quantity_NOC_PALEVIOLETRED
Quantity_NOC_PALEVIOLETRED1 = _Quantity.Quantity_NOC_PALEVIOLETRED1
Quantity_NOC_PALEVIOLETRED2 = _Quantity.Quantity_NOC_PALEVIOLETRED2
Quantity_NOC_PALEVIOLETRED3 = _Quantity.Quantity_NOC_PALEVIOLETRED3
Quantity_NOC_PALEVIOLETRED4 = _Quantity.Quantity_NOC_PALEVIOLETRED4
Quantity_NOC_PAPAYAWHIP = _Quantity.Quantity_NOC_PAPAYAWHIP
Quantity_NOC_PEACHPUFF = _Quantity.Quantity_NOC_PEACHPUFF
Quantity_NOC_PEACHPUFF2 = _Quantity.Quantity_NOC_PEACHPUFF2
Quantity_NOC_PEACHPUFF3 = _Quantity.Quantity_NOC_PEACHPUFF3
Quantity_NOC_PEACHPUFF4 = _Quantity.Quantity_NOC_PEACHPUFF4
Quantity_NOC_PERU = _Quantity.Quantity_NOC_PERU
Quantity_NOC_PINK = _Quantity.Quantity_NOC_PINK
Quantity_NOC_PINK1 = _Quantity.Quantity_NOC_PINK1
Quantity_NOC_PINK2 = _Quantity.Quantity_NOC_PINK2
Quantity_NOC_PINK3 = _Quantity.Quantity_NOC_PINK3
Quantity_NOC_PINK4 = _Quantity.Quantity_NOC_PINK4
Quantity_NOC_PLUM = _Quantity.Quantity_NOC_PLUM
Quantity_NOC_PLUM1 = _Quantity.Quantity_NOC_PLUM1
Quantity_NOC_PLUM2 = _Quantity.Quantity_NOC_PLUM2
Quantity_NOC_PLUM3 = _Quantity.Quantity_NOC_PLUM3
Quantity_NOC_PLUM4 = _Quantity.Quantity_NOC_PLUM4
Quantity_NOC_POWDERBLUE = _Quantity.Quantity_NOC_POWDERBLUE
Quantity_NOC_PURPLE = _Quantity.Quantity_NOC_PURPLE
Quantity_NOC_PURPLE1 = _Quantity.Quantity_NOC_PURPLE1
Quantity_NOC_PURPLE2 = _Quantity.Quantity_NOC_PURPLE2
Quantity_NOC_PURPLE3 = _Quantity.Quantity_NOC_PURPLE3
Quantity_NOC_PURPLE4 = _Quantity.Quantity_NOC_PURPLE4
Quantity_NOC_RED = _Quantity.Quantity_NOC_RED
Quantity_NOC_RED1 = _Quantity.Quantity_NOC_RED1
Quantity_NOC_RED2 = _Quantity.Quantity_NOC_RED2
Quantity_NOC_RED3 = _Quantity.Quantity_NOC_RED3
Quantity_NOC_RED4 = _Quantity.Quantity_NOC_RED4
Quantity_NOC_ROSYBROWN = _Quantity.Quantity_NOC_ROSYBROWN
Quantity_NOC_ROSYBROWN1 = _Quantity.Quantity_NOC_ROSYBROWN1
Quantity_NOC_ROSYBROWN2 = _Quantity.Quantity_NOC_ROSYBROWN2
Quantity_NOC_ROSYBROWN3 = _Quantity.Quantity_NOC_ROSYBROWN3
Quantity_NOC_ROSYBROWN4 = _Quantity.Quantity_NOC_ROSYBROWN4
Quantity_NOC_ROYALBLUE = _Quantity.Quantity_NOC_ROYALBLUE
Quantity_NOC_ROYALBLUE1 = _Quantity.Quantity_NOC_ROYALBLUE1
Quantity_NOC_ROYALBLUE2 = _Quantity.Quantity_NOC_ROYALBLUE2
Quantity_NOC_ROYALBLUE3 = _Quantity.Quantity_NOC_ROYALBLUE3
Quantity_NOC_ROYALBLUE4 = _Quantity.Quantity_NOC_ROYALBLUE4
Quantity_NOC_SADDLEBROWN = _Quantity.Quantity_NOC_SADDLEBROWN
Quantity_NOC_SALMON = _Quantity.Quantity_NOC_SALMON
Quantity_NOC_SALMON1 = _Quantity.Quantity_NOC_SALMON1
Quantity_NOC_SALMON2 = _Quantity.Quantity_NOC_SALMON2
Quantity_NOC_SALMON3 = _Quantity.Quantity_NOC_SALMON3
Quantity_NOC_SALMON4 = _Quantity.Quantity_NOC_SALMON4
Quantity_NOC_SANDYBROWN = _Quantity.Quantity_NOC_SANDYBROWN
Quantity_NOC_SEAGREEN = _Quantity.Quantity_NOC_SEAGREEN
Quantity_NOC_SEAGREEN1 = _Quantity.Quantity_NOC_SEAGREEN1
Quantity_NOC_SEAGREEN2 = _Quantity.Quantity_NOC_SEAGREEN2
Quantity_NOC_SEAGREEN3 = _Quantity.Quantity_NOC_SEAGREEN3
Quantity_NOC_SEAGREEN4 = _Quantity.Quantity_NOC_SEAGREEN4
Quantity_NOC_SEASHELL = _Quantity.Quantity_NOC_SEASHELL
Quantity_NOC_SEASHELL2 = _Quantity.Quantity_NOC_SEASHELL2
Quantity_NOC_SEASHELL3 = _Quantity.Quantity_NOC_SEASHELL3
Quantity_NOC_SEASHELL4 = _Quantity.Quantity_NOC_SEASHELL4
Quantity_NOC_BEET = _Quantity.Quantity_NOC_BEET
Quantity_NOC_TEAL = _Quantity.Quantity_NOC_TEAL
Quantity_NOC_SIENNA = _Quantity.Quantity_NOC_SIENNA
Quantity_NOC_SIENNA1 = _Quantity.Quantity_NOC_SIENNA1
Quantity_NOC_SIENNA2 = _Quantity.Quantity_NOC_SIENNA2
Quantity_NOC_SIENNA3 = _Quantity.Quantity_NOC_SIENNA3
Quantity_NOC_SIENNA4 = _Quantity.Quantity_NOC_SIENNA4
Quantity_NOC_SKYBLUE = _Quantity.Quantity_NOC_SKYBLUE
Quantity_NOC_SKYBLUE1 = _Quantity.Quantity_NOC_SKYBLUE1
Quantity_NOC_SKYBLUE2 = _Quantity.Quantity_NOC_SKYBLUE2
Quantity_NOC_SKYBLUE3 = _Quantity.Quantity_NOC_SKYBLUE3
Quantity_NOC_SKYBLUE4 = _Quantity.Quantity_NOC_SKYBLUE4
Quantity_NOC_SLATEBLUE = _Quantity.Quantity_NOC_SLATEBLUE
Quantity_NOC_SLATEBLUE1 = _Quantity.Quantity_NOC_SLATEBLUE1
Quantity_NOC_SLATEBLUE2 = _Quantity.Quantity_NOC_SLATEBLUE2
Quantity_NOC_SLATEBLUE3 = _Quantity.Quantity_NOC_SLATEBLUE3
Quantity_NOC_SLATEBLUE4 = _Quantity.Quantity_NOC_SLATEBLUE4
Quantity_NOC_SLATEGRAY1 = _Quantity.Quantity_NOC_SLATEGRAY1
Quantity_NOC_SLATEGRAY2 = _Quantity.Quantity_NOC_SLATEGRAY2
Quantity_NOC_SLATEGRAY3 = _Quantity.Quantity_NOC_SLATEGRAY3
Quantity_NOC_SLATEGRAY4 = _Quantity.Quantity_NOC_SLATEGRAY4
Quantity_NOC_SLATEGRAY = _Quantity.Quantity_NOC_SLATEGRAY
Quantity_NOC_SNOW = _Quantity.Quantity_NOC_SNOW
Quantity_NOC_SNOW2 = _Quantity.Quantity_NOC_SNOW2
Quantity_NOC_SNOW3 = _Quantity.Quantity_NOC_SNOW3
Quantity_NOC_SNOW4 = _Quantity.Quantity_NOC_SNOW4
Quantity_NOC_SPRINGGREEN = _Quantity.Quantity_NOC_SPRINGGREEN
Quantity_NOC_SPRINGGREEN2 = _Quantity.Quantity_NOC_SPRINGGREEN2
Quantity_NOC_SPRINGGREEN3 = _Quantity.Quantity_NOC_SPRINGGREEN3
Quantity_NOC_SPRINGGREEN4 = _Quantity.Quantity_NOC_SPRINGGREEN4
Quantity_NOC_STEELBLUE = _Quantity.Quantity_NOC_STEELBLUE
Quantity_NOC_STEELBLUE1 = _Quantity.Quantity_NOC_STEELBLUE1
Quantity_NOC_STEELBLUE2 = _Quantity.Quantity_NOC_STEELBLUE2
Quantity_NOC_STEELBLUE3 = _Quantity.Quantity_NOC_STEELBLUE3
Quantity_NOC_STEELBLUE4 = _Quantity.Quantity_NOC_STEELBLUE4
Quantity_NOC_TAN = _Quantity.Quantity_NOC_TAN
Quantity_NOC_TAN1 = _Quantity.Quantity_NOC_TAN1
Quantity_NOC_TAN2 = _Quantity.Quantity_NOC_TAN2
Quantity_NOC_TAN3 = _Quantity.Quantity_NOC_TAN3
Quantity_NOC_TAN4 = _Quantity.Quantity_NOC_TAN4
Quantity_NOC_THISTLE = _Quantity.Quantity_NOC_THISTLE
Quantity_NOC_THISTLE1 = _Quantity.Quantity_NOC_THISTLE1
Quantity_NOC_THISTLE2 = _Quantity.Quantity_NOC_THISTLE2
Quantity_NOC_THISTLE3 = _Quantity.Quantity_NOC_THISTLE3
Quantity_NOC_THISTLE4 = _Quantity.Quantity_NOC_THISTLE4
Quantity_NOC_TOMATO = _Quantity.Quantity_NOC_TOMATO
Quantity_NOC_TOMATO1 = _Quantity.Quantity_NOC_TOMATO1
Quantity_NOC_TOMATO2 = _Quantity.Quantity_NOC_TOMATO2
Quantity_NOC_TOMATO3 = _Quantity.Quantity_NOC_TOMATO3
Quantity_NOC_TOMATO4 = _Quantity.Quantity_NOC_TOMATO4
Quantity_NOC_TURQUOISE = _Quantity.Quantity_NOC_TURQUOISE
Quantity_NOC_TURQUOISE1 = _Quantity.Quantity_NOC_TURQUOISE1
Quantity_NOC_TURQUOISE2 = _Quantity.Quantity_NOC_TURQUOISE2
Quantity_NOC_TURQUOISE3 = _Quantity.Quantity_NOC_TURQUOISE3
Quantity_NOC_TURQUOISE4 = _Quantity.Quantity_NOC_TURQUOISE4
Quantity_NOC_VIOLET = _Quantity.Quantity_NOC_VIOLET
Quantity_NOC_VIOLETRED = _Quantity.Quantity_NOC_VIOLETRED
Quantity_NOC_VIOLETRED1 = _Quantity.Quantity_NOC_VIOLETRED1
Quantity_NOC_VIOLETRED2 = _Quantity.Quantity_NOC_VIOLETRED2
Quantity_NOC_VIOLETRED3 = _Quantity.Quantity_NOC_VIOLETRED3
Quantity_NOC_VIOLETRED4 = _Quantity.Quantity_NOC_VIOLETRED4
Quantity_NOC_WHEAT = _Quantity.Quantity_NOC_WHEAT
Quantity_NOC_WHEAT1 = _Quantity.Quantity_NOC_WHEAT1
Quantity_NOC_WHEAT2 = _Quantity.Quantity_NOC_WHEAT2
Quantity_NOC_WHEAT3 = _Quantity.Quantity_NOC_WHEAT3
Quantity_NOC_WHEAT4 = _Quantity.Quantity_NOC_WHEAT4
Quantity_NOC_WHITESMOKE = _Quantity.Quantity_NOC_WHITESMOKE
Quantity_NOC_YELLOW = _Quantity.Quantity_NOC_YELLOW
Quantity_NOC_YELLOW1 = _Quantity.Quantity_NOC_YELLOW1
Quantity_NOC_YELLOW2 = _Quantity.Quantity_NOC_YELLOW2
Quantity_NOC_YELLOW3 = _Quantity.Quantity_NOC_YELLOW3
Quantity_NOC_YELLOW4 = _Quantity.Quantity_NOC_YELLOW4
Quantity_NOC_YELLOWGREEN = _Quantity.Quantity_NOC_YELLOWGREEN
Quantity_NOC_WHITE = _Quantity.Quantity_NOC_WHITE
Quantity_MASS = _Quantity.Quantity_MASS
Quantity_PLANEANGLE = _Quantity.Quantity_PLANEANGLE
Quantity_SOLIDANGLE = _Quantity.Quantity_SOLIDANGLE
Quantity_LENGTH = _Quantity.Quantity_LENGTH
Quantity_AREA = _Quantity.Quantity_AREA
Quantity_VOLUME = _Quantity.Quantity_VOLUME
Quantity_SPEED = _Quantity.Quantity_SPEED
Quantity_VELOCITY = _Quantity.Quantity_VELOCITY
Quantity_ACCELERATION = _Quantity.Quantity_ACCELERATION
Quantity_ANGULARVELOCITY = _Quantity.Quantity_ANGULARVELOCITY
Quantity_FREQUENCY = _Quantity.Quantity_FREQUENCY
Quantity_TEMPERATURE = _Quantity.Quantity_TEMPERATURE
Quantity_AMOUNTOFSUBSTANCE = _Quantity.Quantity_AMOUNTOFSUBSTANCE
Quantity_DENSITY = _Quantity.Quantity_DENSITY
Quantity_MASSFLOW = _Quantity.Quantity_MASSFLOW
Quantity_VOLUMEFLOW = _Quantity.Quantity_VOLUMEFLOW
Quantity_CONSUMPTION = _Quantity.Quantity_CONSUMPTION
Quantity_MOMENTUM = _Quantity.Quantity_MOMENTUM
Quantity_KINETICMOMENT = _Quantity.Quantity_KINETICMOMENT
Quantity_MOMENTOFINERTIA = _Quantity.Quantity_MOMENTOFINERTIA
Quantity_FORCE = _Quantity.Quantity_FORCE
Quantity_MOMENTOFAFORCE = _Quantity.Quantity_MOMENTOFAFORCE
Quantity_TORQUE = _Quantity.Quantity_TORQUE
Quantity_WEIGHT = _Quantity.Quantity_WEIGHT
Quantity_PRESSURE = _Quantity.Quantity_PRESSURE
Quantity_VISCOSITY = _Quantity.Quantity_VISCOSITY
Quantity_KINEMATICVISCOSITY = _Quantity.Quantity_KINEMATICVISCOSITY
Quantity_ENERGY = _Quantity.Quantity_ENERGY
Quantity_WORK = _Quantity.Quantity_WORK
Quantity_POWER = _Quantity.Quantity_POWER
Quantity_SURFACETENSION = _Quantity.Quantity_SURFACETENSION
Quantity_COEFFICIENTOFEXPANSION = _Quantity.Quantity_COEFFICIENTOFEXPANSION
Quantity_THERMALCONDUCTIVITY = _Quantity.Quantity_THERMALCONDUCTIVITY
Quantity_SPECIFICHEATCAPACITY = _Quantity.Quantity_SPECIFICHEATCAPACITY
Quantity_ENTROPY = _Quantity.Quantity_ENTROPY
Quantity_ENTHALPY = _Quantity.Quantity_ENTHALPY
Quantity_LUMINOUSINTENSITY = _Quantity.Quantity_LUMINOUSINTENSITY
Quantity_LUMINOUSFLUX = _Quantity.Quantity_LUMINOUSFLUX
Quantity_LUMINANCE = _Quantity.Quantity_LUMINANCE
Quantity_ILLUMINANCE = _Quantity.Quantity_ILLUMINANCE
Quantity_LUMINOUSEXPOSITION = _Quantity.Quantity_LUMINOUSEXPOSITION
Quantity_LUMINOUSEFFICACITY = _Quantity.Quantity_LUMINOUSEFFICACITY
Quantity_ELECTRICCHARGE = _Quantity.Quantity_ELECTRICCHARGE
Quantity_ELECTRICCURRENT = _Quantity.Quantity_ELECTRICCURRENT
Quantity_ELECTRICFIELDSTRENGTH = _Quantity.Quantity_ELECTRICFIELDSTRENGTH
Quantity_ELECTRICPOTENTIAL = _Quantity.Quantity_ELECTRICPOTENTIAL
Quantity_ELECTRICCAPACITANCE = _Quantity.Quantity_ELECTRICCAPACITANCE
Quantity_MAGNETICFLUX = _Quantity.Quantity_MAGNETICFLUX
Quantity_MAGNETICFLUXDENSITY = _Quantity.Quantity_MAGNETICFLUXDENSITY
Quantity_MAGNETICFIELDSTRENGTH = _Quantity.Quantity_MAGNETICFIELDSTRENGTH
Quantity_RELUCTANCE = _Quantity.Quantity_RELUCTANCE
Quantity_RESISTANCE = _Quantity.Quantity_RESISTANCE
Quantity_INDUCTANCE = _Quantity.Quantity_INDUCTANCE
Quantity_CAPACITANCE = _Quantity.Quantity_CAPACITANCE
Quantity_IMPEDANCE = _Quantity.Quantity_IMPEDANCE
Quantity_ADMITTANCE = _Quantity.Quantity_ADMITTANCE
Quantity_RESISTIVITY = _Quantity.Quantity_RESISTIVITY
Quantity_CONDUCTIVITY = _Quantity.Quantity_CONDUCTIVITY
Quantity_MOLARMASS = _Quantity.Quantity_MOLARMASS
Quantity_MOLARVOLUME = _Quantity.Quantity_MOLARVOLUME
Quantity_CONCENTRATION = _Quantity.Quantity_CONCENTRATION
Quantity_MOLARCONCENTRATION = _Quantity.Quantity_MOLARCONCENTRATION
Quantity_MOLARITY = _Quantity.Quantity_MOLARITY
Quantity_SOUNDINTENSITY = _Quantity.Quantity_SOUNDINTENSITY
Quantity_ACOUSTICINTENSITY = _Quantity.Quantity_ACOUSTICINTENSITY
Quantity_ACTIVITY = _Quantity.Quantity_ACTIVITY
Quantity_ABSORBEDDOSE = _Quantity.Quantity_ABSORBEDDOSE
Quantity_DOSEEQUIVALENT = _Quantity.Quantity_DOSEEQUIVALENT
Quantity_TOC_RGB = _Quantity.Quantity_TOC_RGB
Quantity_TOC_HLS = _Quantity.Quantity_TOC_HLS
class Quantity_Array1OfCoefficient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Coefficient &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Quantity.Quantity_Array1OfCoefficient_swiginit(self,_Quantity.new_Quantity_Array1OfCoefficient(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Coefficient &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Quantity.Quantity_Array1OfCoefficient_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfCoefficient &
        :rtype: Quantity_Array1OfCoefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfCoefficient &
        :rtype: Quantity_Array1OfCoefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfCoefficient_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Coefficient &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfCoefficient_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Coefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Coefficient

        """
        return _Quantity.Quantity_Array1OfCoefficient_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array1OfCoefficient.Init = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Init,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Destroy = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Destroy,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.IsAllocated = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_IsAllocated,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Assign = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Assign,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Set = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Set,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Length = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Length,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Lower = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Lower,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Upper = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Upper,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.SetValue = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_SetValue,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.Value = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_Value,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient.ChangeValue = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient_ChangeValue,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient._kill_pointed = new_instancemethod(_Quantity.Quantity_Array1OfCoefficient__kill_pointed,None,Quantity_Array1OfCoefficient)
Quantity_Array1OfCoefficient_swigregister = _Quantity.Quantity_Array1OfCoefficient_swigregister
Quantity_Array1OfCoefficient_swigregister(Quantity_Array1OfCoefficient)

class Quantity_Array1OfColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Color &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Quantity.Quantity_Array1OfColor_swiginit(self,_Quantity.new_Quantity_Array1OfColor(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Quantity.Quantity_Array1OfColor_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfColor &
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_Array1OfColor_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array1OfColor &
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_Array1OfColor_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array1OfColor_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array1OfColor_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array1OfColor_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array1OfColor_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array1OfColor.Init = new_instancemethod(_Quantity.Quantity_Array1OfColor_Init,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Destroy = new_instancemethod(_Quantity.Quantity_Array1OfColor_Destroy,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.IsAllocated = new_instancemethod(_Quantity.Quantity_Array1OfColor_IsAllocated,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Assign = new_instancemethod(_Quantity.Quantity_Array1OfColor_Assign,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Set = new_instancemethod(_Quantity.Quantity_Array1OfColor_Set,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Length = new_instancemethod(_Quantity.Quantity_Array1OfColor_Length,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Lower = new_instancemethod(_Quantity.Quantity_Array1OfColor_Lower,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Upper = new_instancemethod(_Quantity.Quantity_Array1OfColor_Upper,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.SetValue = new_instancemethod(_Quantity.Quantity_Array1OfColor_SetValue,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.Value = new_instancemethod(_Quantity.Quantity_Array1OfColor_Value,None,Quantity_Array1OfColor)
Quantity_Array1OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_Array1OfColor_ChangeValue,None,Quantity_Array1OfColor)
Quantity_Array1OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_Array1OfColor__kill_pointed,None,Quantity_Array1OfColor)
Quantity_Array1OfColor_swigregister = _Quantity.Quantity_Array1OfColor_swigregister
Quantity_Array1OfColor_swigregister(Quantity_Array1OfColor)

class Quantity_Array2OfColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Quantity_Color &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _Quantity.Quantity_Array2OfColor_swiginit(self,_Quantity.new_Quantity_Array2OfColor(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_Destroy(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array2OfColor &
        :rtype: Quantity_Array2OfColor

        """
        return _Quantity.Quantity_Array2OfColor_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Array2OfColor &
        :rtype: Quantity_Array2OfColor

        """
        return _Quantity.Quantity_Array2OfColor_Set(self, *args)

    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_ColLength(self, *args)

    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_RowLength(self, *args)

    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_LowerCol(self, *args)

    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_LowerRow(self, *args)

    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_UpperCol(self, *args)

    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Array2OfColor_UpperRow(self, *args)

    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_Array2OfColor_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array2OfColor_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Array2OfColor_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Array2OfColor.Init = new_instancemethod(_Quantity.Quantity_Array2OfColor_Init,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.Destroy = new_instancemethod(_Quantity.Quantity_Array2OfColor_Destroy,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.Assign = new_instancemethod(_Quantity.Quantity_Array2OfColor_Assign,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.Set = new_instancemethod(_Quantity.Quantity_Array2OfColor_Set,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.ColLength = new_instancemethod(_Quantity.Quantity_Array2OfColor_ColLength,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.RowLength = new_instancemethod(_Quantity.Quantity_Array2OfColor_RowLength,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.LowerCol = new_instancemethod(_Quantity.Quantity_Array2OfColor_LowerCol,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.LowerRow = new_instancemethod(_Quantity.Quantity_Array2OfColor_LowerRow,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.UpperCol = new_instancemethod(_Quantity.Quantity_Array2OfColor_UpperCol,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.UpperRow = new_instancemethod(_Quantity.Quantity_Array2OfColor_UpperRow,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.SetValue = new_instancemethod(_Quantity.Quantity_Array2OfColor_SetValue,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.Value = new_instancemethod(_Quantity.Quantity_Array2OfColor_Value,None,Quantity_Array2OfColor)
Quantity_Array2OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_Array2OfColor_ChangeValue,None,Quantity_Array2OfColor)
Quantity_Array2OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_Array2OfColor__kill_pointed,None,Quantity_Array2OfColor)
Quantity_Array2OfColor_swigregister = _Quantity.Quantity_Array2OfColor_swigregister
Quantity_Array2OfColor_swigregister(Quantity_Array2OfColor)

class Quantity_Color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a colour with the default value of //!	 Colour name : YELLOW

        :rtype: None

        * Creates the colour <AName>.

        :param AName:
        :type AName: Quantity_NameOfColor
        :rtype: None

        * Creates a colour according to the definition system //!	 TypeOfColor. //!	 TOC_RGB : <R1> the value of red between 0. and 1. //!		 <R2> the value of green between 0. and 1. //!		 <R3> the value of blue between 0. and 1. //!	 TOC_HLS : <R1> is the hue angle in degrees, 0. being red //!	 	 <R2> is the lightness between 0. and 1. //!		 <R3> is the saturation between 0. and 1.

        :param R1:
        :type R1: Quantity_Parameter
        :param R2:
        :type R2: Quantity_Parameter
        :param R3:
        :type R3: Quantity_Parameter
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        _Quantity.Quantity_Color_swiginit(self,_Quantity.new_Quantity_Color(*args))
    def Assign(self, *args):
        """
        * Updates the colour <self> from the definition of the //!	 colour <Other>.

        :param Other:
        :type Other: Quantity_Color &
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Color_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Quantity_Color &
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_Color_Set(self, *args)

    def ChangeContrast(self, *args):
        """
        * Increases or decreases the contrast by <ADelta>. //!	 <ADelta> is a percentage. Any value greater than zero //!	 will increase the contrast. //!	 The variation is expressed as a percentage of the //!	 current value. //!	 It is a variation of the saturation.

        :param ADelta:
        :type ADelta: Quantity_Rate
        :rtype: None

        """
        return _Quantity.Quantity_Color_ChangeContrast(self, *args)

    def ChangeIntensity(self, *args):
        """
        * Increases or decreases the intensity by <ADelta>. //!	 <ADelta> is a percentage. Any value greater than zero //!	 will increase the intensity. //!	 The variation is expressed as a percentage of the //!	 current value. //!	 It is a variation of the lightness.

        :param ADelta:
        :type ADelta: Quantity_Rate
        :rtype: None

        """
        return _Quantity.Quantity_Color_ChangeIntensity(self, *args)

    def SetValues(self, *args):
        """
        * Updates the colour <self> from the definition of the //!	 colour <AName>.

        :param AName:
        :type AName: Quantity_NameOfColor
        :rtype: None

        * Updates a colour according to the mode specified by //!	 TypeOfColor //!	 TOC_RGB : <R1> the value of red between 0. and 1. //!		 <R2> the value of green between 0. and 1. //!		 <R3> the value of blue between 0. and 1. //!	 TOC_HLS : <R1> is the hue angle in degrees, 0. being red //!	 	 <R2> is the lightness between 0. and 1. //!		 <R3> is the saturation between 0. and 1.

        :param R1:
        :type R1: Quantity_Parameter
        :param R2:
        :type R2: Quantity_Parameter
        :param R3:
        :type R3: Quantity_Parameter
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        return _Quantity.Quantity_Color_SetValues(self, *args)

    def Delta(self, *args):
        """
        * Returns the percentage change of contrast and intensity //!	 between <self> and <AColor>. //!	 <DC> and <DI> are percentages, either positive or negative. //!	 The calculation is with respect to the current value of <self> //!	 If <DC> is positive then <self> is more contrasty. //!	 If <DI> is positive then <self> is more intense.

        :param AColor:
        :type AColor: Quantity_Color &
        :param DC:
        :type DC: Quantity_Parameter &
        :param DI:
        :type DI: Quantity_Parameter &
        :rtype: None

        """
        return _Quantity.Quantity_Color_Delta(self, *args)

    def Distance(self, *args):
        """
        * Returns the distance between two colours. It's a //!	 value between 0 and the square root of 3 //!	 (the black/white distance)

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: float

        """
        return _Quantity.Quantity_Color_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Returns the square of distance between two colours.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: float

        """
        return _Quantity.Quantity_Color_SquareDistance(self, *args)

    def Blue(self, *args):
        """
        * Returns the Blue component (quantity of blue) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Blue(self, *args)

    def Green(self, *args):
        """
        * Returns the Green component (quantity of green) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Green(self, *args)

    def Hue(self, *args):
        """
        * Returns the Hue component (hue angle) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Hue(self, *args)

    def IsDifferent(self, *args):
        """
        * Returns Standard_True if the distance between <self> and //!	 <Other> is greater than Epsilon ().

        :param Other:
        :type Other: Quantity_Color &
        :rtype: bool

        """
        return _Quantity.Quantity_Color_IsDifferent(self, *args)

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def IsEqual(self, *args):
        """
        * Returns true if the Other color is - different from, or - equal to this color. Two colors are considered to be equal if their distance is no greater than Epsilon(). These methods are aliases of operator != and operator ==.

        :param Other:
        :type Other: Quantity_Color &
        :rtype: bool

        """
        return _Quantity.Quantity_Color_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def Light(self, *args):
        """
        * Returns the Light component (value of the lightness) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Light(self, *args)

    def Red(self, *args):
        """
        * Returns the Red component (quantity of red) of the //!	 color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Red(self, *args)

    def Saturation(self, *args):
        """
        * Returns the Saturation component (value of the saturation) //!	 of the color <self>.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Saturation(self, *args)

    def Values(self, *args):
        """
        * Returns in R1, R2 and R3 the components of this color according to the color system definition AType. - if AType is Quantity_TOC_RGB R1 is the quantity of red, R2 is the quantity of green and R3 is the quantity of blue in this color. - if AType is Quantity_TOC_HLS R1 is the hue angle in degrees (0 being red), R2 is the lightness and R3 is the saturation of this color.

        :param R1:
        :type R1: Quantity_Parameter &
        :param R2:
        :type R2: Quantity_Parameter &
        :param R3:
        :type R3: Quantity_Parameter &
        :param AType:
        :type AType: Quantity_TypeOfColor
        :rtype: None

        """
        return _Quantity.Quantity_Color_Values(self, *args)

    def SetEpsilon(*args):
        """
        * Sets the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods. Warning: The default value is 0.0001

        :param AnEpsilon:
        :type AnEpsilon: Quantity_Parameter
        :rtype: void

        """
        return _Quantity.Quantity_Color_SetEpsilon(*args)

    SetEpsilon = staticmethod(SetEpsilon)
    def Epsilon(*args):
        """
        * Returns the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods.

        :rtype: Quantity_Parameter

        """
        return _Quantity.Quantity_Color_Epsilon(*args)

    Epsilon = staticmethod(Epsilon)
    def Name(*args):
        """
        * Returns the name of the color defined by its quantities of red R, green G and blue B; more precisely this is the nearest color from the Quantity_NameOfColor enumeration. Exceptions Standard_OutOfRange if R, G or B is less than 0. or greater than 1.

        :rtype: Quantity_NameOfColor

        * Returns the name of the colour for which the RGB components //!	 are nearest to <R>, <G> and <B>.

        :param R:
        :type R: Quantity_Parameter
        :param G:
        :type G: Quantity_Parameter
        :param B:
        :type B: Quantity_Parameter
        :rtype: Quantity_NameOfColor

        """
        return _Quantity.Quantity_Color_Name(*args)

    Name = staticmethod(Name)
    def StringName(*args):
        """
        * Returns the name of the color identified by AName in the Quantity_NameOfColor enumeration. For example, the name of the color which corresponds to Quantity_NOC_BLACK is 'BLACK'. Exceptions Standard_OutOfRange if AName in not known in the Quantity_NameOfColor enumeration.

        :param AColor:
        :type AColor: Quantity_NameOfColor
        :rtype: char *

        """
        return _Quantity.Quantity_Color_StringName(*args)

    StringName = staticmethod(StringName)
    def HlsRgb(*args):
        """
        * Converts HLS components into RGB ones.

        :param H:
        :type H: Quantity_Parameter
        :param L:
        :type L: Quantity_Parameter
        :param S:
        :type S: Quantity_Parameter
        :param R:
        :type R: Quantity_Parameter &
        :param G:
        :type G: Quantity_Parameter &
        :param B:
        :type B: Quantity_Parameter &
        :rtype: void

        """
        return _Quantity.Quantity_Color_HlsRgb(*args)

    HlsRgb = staticmethod(HlsRgb)
    def RgbHls(*args):
        """
        * Converts RGB components into HLS ones.

        :param R:
        :type R: Quantity_Parameter
        :param G:
        :type G: Quantity_Parameter
        :param B:
        :type B: Quantity_Parameter
        :param H:
        :type H: Quantity_Parameter &
        :param L:
        :type L: Quantity_Parameter &
        :param S:
        :type S: Quantity_Parameter &
        :rtype: void

        """
        return _Quantity.Quantity_Color_RgbHls(*args)

    RgbHls = staticmethod(RgbHls)
    def Color2argb(*args):
        """
        * Convert the Color value to ARGB integer value. theARGB has Alpha equal to zero, so the output is formatted as 0x00RRGGBB

        :param theColor:
        :type theColor: Quantity_Color &
        :param theARGB:
        :type theARGB: int &
        :rtype: void

        """
        return _Quantity.Quantity_Color_Color2argb(*args)

    Color2argb = staticmethod(Color2argb)
    def Argb2color(*args):
        """
        * Convert integer ARGB value to Color. Alpha bits are ignored

        :param theARGB:
        :type theARGB: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: void

        """
        return _Quantity.Quantity_Color_Argb2color(*args)

    Argb2color = staticmethod(Argb2color)
    def Test(*args):
        """
        * Internal test

        :rtype: void

        """
        return _Quantity.Quantity_Color_Test(*args)

    Test = staticmethod(Test)
    def _CSFDB_GetQuantity_ColorMyRed(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyRed(self, *args)

    def _CSFDB_SetQuantity_ColorMyRed(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyRed(self, *args)

    def _CSFDB_GetQuantity_ColorMyGreen(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyGreen(self, *args)

    def _CSFDB_SetQuantity_ColorMyGreen(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyGreen(self, *args)

    def _CSFDB_GetQuantity_ColorMyBlue(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyBlue(self, *args)

    def _CSFDB_SetQuantity_ColorMyBlue(self, *args):
        """
        :param p:
        :type p: Standard_ShortReal
        :rtype: None

        """
        return _Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyBlue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Color.Assign = new_instancemethod(_Quantity.Quantity_Color_Assign,None,Quantity_Color)
Quantity_Color.Set = new_instancemethod(_Quantity.Quantity_Color_Set,None,Quantity_Color)
Quantity_Color.ChangeContrast = new_instancemethod(_Quantity.Quantity_Color_ChangeContrast,None,Quantity_Color)
Quantity_Color.ChangeIntensity = new_instancemethod(_Quantity.Quantity_Color_ChangeIntensity,None,Quantity_Color)
Quantity_Color.SetValues = new_instancemethod(_Quantity.Quantity_Color_SetValues,None,Quantity_Color)
Quantity_Color.Delta = new_instancemethod(_Quantity.Quantity_Color_Delta,None,Quantity_Color)
Quantity_Color.Distance = new_instancemethod(_Quantity.Quantity_Color_Distance,None,Quantity_Color)
Quantity_Color.SquareDistance = new_instancemethod(_Quantity.Quantity_Color_SquareDistance,None,Quantity_Color)
Quantity_Color.Blue = new_instancemethod(_Quantity.Quantity_Color_Blue,None,Quantity_Color)
Quantity_Color.Green = new_instancemethod(_Quantity.Quantity_Color_Green,None,Quantity_Color)
Quantity_Color.Hue = new_instancemethod(_Quantity.Quantity_Color_Hue,None,Quantity_Color)
Quantity_Color.IsDifferent = new_instancemethod(_Quantity.Quantity_Color_IsDifferent,None,Quantity_Color)
Quantity_Color.__ne_wrapper__ = new_instancemethod(_Quantity.Quantity_Color___ne_wrapper__,None,Quantity_Color)
Quantity_Color.IsEqual = new_instancemethod(_Quantity.Quantity_Color_IsEqual,None,Quantity_Color)
Quantity_Color.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Color___eq_wrapper__,None,Quantity_Color)
Quantity_Color.Light = new_instancemethod(_Quantity.Quantity_Color_Light,None,Quantity_Color)
Quantity_Color.Red = new_instancemethod(_Quantity.Quantity_Color_Red,None,Quantity_Color)
Quantity_Color.Saturation = new_instancemethod(_Quantity.Quantity_Color_Saturation,None,Quantity_Color)
Quantity_Color.Values = new_instancemethod(_Quantity.Quantity_Color_Values,None,Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyRed = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyRed,None,Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyRed = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyRed,None,Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyGreen = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyGreen,None,Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyGreen = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyGreen,None,Quantity_Color)
Quantity_Color._CSFDB_GetQuantity_ColorMyBlue = new_instancemethod(_Quantity.Quantity_Color__CSFDB_GetQuantity_ColorMyBlue,None,Quantity_Color)
Quantity_Color._CSFDB_SetQuantity_ColorMyBlue = new_instancemethod(_Quantity.Quantity_Color__CSFDB_SetQuantity_ColorMyBlue,None,Quantity_Color)
Quantity_Color._kill_pointed = new_instancemethod(_Quantity.Quantity_Color__kill_pointed,None,Quantity_Color)
Quantity_Color_swigregister = _Quantity.Quantity_Color_swigregister
Quantity_Color_swigregister(Quantity_Color)

def Quantity_Color_SetEpsilon(*args):
  """
    * Sets the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods. Warning: The default value is 0.0001

    :param AnEpsilon:
    :type AnEpsilon: Quantity_Parameter
    :rtype: void

    """
  return _Quantity.Quantity_Color_SetEpsilon(*args)

def Quantity_Color_Epsilon(*args):
  """
    * Returns the specified value used to compare <self> and //!	 an other color in IsDifferent and in IsEqual methods.

    :rtype: Quantity_Parameter

    """
  return _Quantity.Quantity_Color_Epsilon(*args)

def Quantity_Color_Name(*args):
  """
    * Returns the name of the color defined by its quantities of red R, green G and blue B; more precisely this is the nearest color from the Quantity_NameOfColor enumeration. Exceptions Standard_OutOfRange if R, G or B is less than 0. or greater than 1.

    :rtype: Quantity_NameOfColor

    * Returns the name of the colour for which the RGB components //!	 are nearest to <R>, <G> and <B>.

    :param R:
    :type R: Quantity_Parameter
    :param G:
    :type G: Quantity_Parameter
    :param B:
    :type B: Quantity_Parameter
    :rtype: Quantity_NameOfColor

    """
  return _Quantity.Quantity_Color_Name(*args)

def Quantity_Color_StringName(*args):
  """
    * Returns the name of the color identified by AName in the Quantity_NameOfColor enumeration. For example, the name of the color which corresponds to Quantity_NOC_BLACK is 'BLACK'. Exceptions Standard_OutOfRange if AName in not known in the Quantity_NameOfColor enumeration.

    :param AColor:
    :type AColor: Quantity_NameOfColor
    :rtype: char *

    """
  return _Quantity.Quantity_Color_StringName(*args)

def Quantity_Color_HlsRgb(*args):
  """
    * Converts HLS components into RGB ones.

    :param H:
    :type H: Quantity_Parameter
    :param L:
    :type L: Quantity_Parameter
    :param S:
    :type S: Quantity_Parameter
    :param R:
    :type R: Quantity_Parameter &
    :param G:
    :type G: Quantity_Parameter &
    :param B:
    :type B: Quantity_Parameter &
    :rtype: void

    """
  return _Quantity.Quantity_Color_HlsRgb(*args)

def Quantity_Color_RgbHls(*args):
  """
    * Converts RGB components into HLS ones.

    :param R:
    :type R: Quantity_Parameter
    :param G:
    :type G: Quantity_Parameter
    :param B:
    :type B: Quantity_Parameter
    :param H:
    :type H: Quantity_Parameter &
    :param L:
    :type L: Quantity_Parameter &
    :param S:
    :type S: Quantity_Parameter &
    :rtype: void

    """
  return _Quantity.Quantity_Color_RgbHls(*args)

def Quantity_Color_Color2argb(*args):
  """
    * Convert the Color value to ARGB integer value. theARGB has Alpha equal to zero, so the output is formatted as 0x00RRGGBB

    :param theColor:
    :type theColor: Quantity_Color &
    :param theARGB:
    :type theARGB: int &
    :rtype: void

    """
  return _Quantity.Quantity_Color_Color2argb(*args)

def Quantity_Color_Argb2color(*args):
  """
    * Convert integer ARGB value to Color. Alpha bits are ignored

    :param theARGB:
    :type theARGB: int
    :param theColor:
    :type theColor: Quantity_Color &
    :rtype: void

    """
  return _Quantity.Quantity_Color_Argb2color(*args)

def Quantity_Color_Test(*args):
  """
    * Internal test

    :rtype: void

    """
  return _Quantity.Quantity_Color_Test(*args)

class Quantity_Convert(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an object;

        :rtype: None

        """
        _Quantity.Quantity_Convert_swiginit(self,_Quantity.new_Quantity_Convert(*args))
    def SetQuantity(*args):
        """
        * Updates the conversion table (correspondances between Quantities and conversion coefficients).

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aCoef:
        :type aCoef: Quantity_Coefficient
        :rtype: void

        """
        return _Quantity.Quantity_Convert_SetQuantity(*args)

    SetQuantity = staticmethod(SetQuantity)
    def ConvertUserToSI(*args):
        """
        * Converts, from the conversion table, the value <aVal> from the user system to the SI system.

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aVal:
        :type aVal: float
        :rtype: float

        """
        return _Quantity.Quantity_Convert_ConvertUserToSI(*args)

    ConvertUserToSI = staticmethod(ConvertUserToSI)
    def ConvertSIToUser(*args):
        """
        * Converts, from the conversion table, the value <aVal> from the SI system to the user system.

        :param aQuantity:
        :type aQuantity: Quantity_PhysicalQuantity
        :param aVal:
        :type aVal: float
        :rtype: float

        """
        return _Quantity.Quantity_Convert_ConvertSIToUser(*args)

    ConvertSIToUser = staticmethod(ConvertSIToUser)
    def IsPhysicalQuantity(*args):
        """
        * if (aType is a physical quantity) returns True and the name of the associated PhysicalQuantity . else returns False.

        :param aTypeName:
        :type aTypeName: TCollection_AsciiString &
        :param anEnum:
        :type anEnum: TCollection_AsciiString &
        :rtype: bool

        """
        return _Quantity.Quantity_Convert_IsPhysicalQuantity(*args)

    IsPhysicalQuantity = staticmethod(IsPhysicalQuantity)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Convert._kill_pointed = new_instancemethod(_Quantity.Quantity_Convert__kill_pointed,None,Quantity_Convert)
Quantity_Convert_swigregister = _Quantity.Quantity_Convert_swigregister
Quantity_Convert_swigregister(Quantity_Convert)

def Quantity_Convert_SetQuantity(*args):
  """
    * Updates the conversion table (correspondances between Quantities and conversion coefficients).

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aCoef:
    :type aCoef: Quantity_Coefficient
    :rtype: void

    """
  return _Quantity.Quantity_Convert_SetQuantity(*args)

def Quantity_Convert_ConvertUserToSI(*args):
  """
    * Converts, from the conversion table, the value <aVal> from the user system to the SI system.

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aVal:
    :type aVal: float
    :rtype: float

    """
  return _Quantity.Quantity_Convert_ConvertUserToSI(*args)

def Quantity_Convert_ConvertSIToUser(*args):
  """
    * Converts, from the conversion table, the value <aVal> from the SI system to the user system.

    :param aQuantity:
    :type aQuantity: Quantity_PhysicalQuantity
    :param aVal:
    :type aVal: float
    :rtype: float

    """
  return _Quantity.Quantity_Convert_ConvertSIToUser(*args)

def Quantity_Convert_IsPhysicalQuantity(*args):
  """
    * if (aType is a physical quantity) returns True and the name of the associated PhysicalQuantity . else returns False.

    :param aTypeName:
    :type aTypeName: TCollection_AsciiString &
    :param anEnum:
    :type anEnum: TCollection_AsciiString &
    :rtype: bool

    """
  return _Quantity.Quantity_Convert_IsPhysicalQuantity(*args)

class Quantity_Date(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a default date (00:00 GMT, January 1, 1979 (zero hour)); use the function SetValues to define the required date; or

        :rtype: None

        * Constructs a date from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0).. With: 1 <= mm <= 12  1 <= dd <= max number of days of <mm>  1979 <= yyyy  0 <= hh <= 23  0 <= mn <= 59  0 <= ss <= 59  0 <= mis <= 999  0 <= mics <= 999 Exceptions Quantity_DateDefinitionError if mm, dd, hh, mn, ss, mis and mics are not the components of the valid date.

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yyyy:
        :type yyyy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        _Quantity.Quantity_Date_swiginit(self,_Quantity.new_Quantity_Date(*args))
    def Values(self, *args):
        """
        * Gets a complete Date. - in mm - the month, - in dd - the day, - in yyyy - the year, - in hh - the hour, - in mn - the minute, - in ss - the second, - in mis - the millisecond, and - in mics - the microsecond

        :param mm:
        :type mm: int &
        :param dd:
        :type dd: int &
        :param yy:
        :type yy: int &
        :param hh:
        :type hh: int &
        :param mn:
        :type mn: int &
        :param ss:
        :type ss: int &
        :param mis:
        :type mis: int &
        :param mics:
        :type mics: int &
        :rtype: None

        """
        return _Quantity.Quantity_Date_Values(self, *args)

    def SetValues(self, *args):
        """
        * Assigns to this date the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0). Exceptions Quantity_DateDefinitionError if mm, dd, hh, mn, ss, mis and mics are not components of a valid date.

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yy:
        :type yy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        return _Quantity.Quantity_Date_SetValues(self, *args)

    def Difference(self, *args):
        """
        * Subtracts one Date from another one to find the period between and returns the value. The result is the absolute value between the difference of two dates.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Date_Difference(self, *args)

    def Subtract(self, *args):
        """
        * Subtracts a period from a Date and returns the new Date. Raises an exception if the result date is anterior to Jan 1, 1979.

        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date_Subtract(self, *args)

    def __sub__(self, *args):
        """
        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date___sub__(self, *args)

    def Add(self, *args):
        """
        * Adds a Period to a Date and returns the new Date.

        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date_Add(self, *args)

    def __add__(self, *args):
        """
        :param aPeriod:
        :type aPeriod: Quantity_Period &
        :rtype: Quantity_Date

        """
        return _Quantity.Quantity_Date___add__(self, *args)

    def Year(self, *args):
        """
        * Returns year of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Year(self, *args)

    def Month(self, *args):
        """
        * Returns month of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Month(self, *args)

    def Day(self, *args):
        """
        * Returns Day of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Day(self, *args)

    def Hour(self, *args):
        """
        * Returns Hour of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Hour(self, *args)

    def Minute(self, *args):
        """
        * Returns minute of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Minute(self, *args)

    def Second(self, *args):
        """
        * Returns seconde of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_Second(self, *args)

    def MilliSecond(self, *args):
        """
        * Returns millisecond of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_MilliSecond(self, *args)

    def MicroSecond(self, *args):
        """
        * Returns microsecond of a Date.

        :rtype: int

        """
        return _Quantity.Quantity_Date_MicroSecond(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if both <self> and <other> are equal. This method is an alias of operator ==.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsEarlier(self, *args):
        """
        * Returns True if <self> is earlier than <other>.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsEarlier(self, *args)

    def __lt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date___lt__(self, *args)

    def IsLater(self, *args):
        """
        * Returns True if <self> is later then <other>.

        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsLater(self, *args)

    def __gt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Date &
        :rtype: bool

        """
        return _Quantity.Quantity_Date___gt__(self, *args)

    def IsValid(*args):
        """
        * Checks the validity of a date - returns true if a date defined from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0) is valid. A date must satisfy the conditions above: - yyyy is greater than or equal to 1979, - mm lies within the range [1, 12] (with 1 corresponding to January and 12 to December), - dd lies within a valid range for the month mm (from 1 to 28, 29, 30 or 31 depending on mm and whether yyyy is a leap year or not), - hh lies within the range [0, 23], - mn lies within the range [0, 59], - ss lies within the range [0, 59], - mis lies within the range [0, 999], - mics lies within the range [0, 999].C

        :param mm:
        :type mm: int
        :param dd:
        :type dd: int
        :param yy:
        :type yy: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsValid(*args)

    IsValid = staticmethod(IsValid)
    def IsLeap(*args):
        """
        * Returns true if a year is a leap year. The leap years are divisable by 4 and not by 100 except the years divisable by 400.

        :param yy:
        :type yy: int
        :rtype: bool

        """
        return _Quantity.Quantity_Date_IsLeap(*args)

    IsLeap = staticmethod(IsLeap)
    def _CSFDB_GetQuantity_DatemySec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Date__CSFDB_GetQuantity_DatemySec(self, *args)

    def _CSFDB_SetQuantity_DatemySec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Date__CSFDB_SetQuantity_DatemySec(self, *args)

    def _CSFDB_GetQuantity_DatemyUSec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Date__CSFDB_GetQuantity_DatemyUSec(self, *args)

    def _CSFDB_SetQuantity_DatemyUSec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Date__CSFDB_SetQuantity_DatemyUSec(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Date.Values = new_instancemethod(_Quantity.Quantity_Date_Values,None,Quantity_Date)
Quantity_Date.SetValues = new_instancemethod(_Quantity.Quantity_Date_SetValues,None,Quantity_Date)
Quantity_Date.Difference = new_instancemethod(_Quantity.Quantity_Date_Difference,None,Quantity_Date)
Quantity_Date.Subtract = new_instancemethod(_Quantity.Quantity_Date_Subtract,None,Quantity_Date)
Quantity_Date.__sub__ = new_instancemethod(_Quantity.Quantity_Date___sub__,None,Quantity_Date)
Quantity_Date.Add = new_instancemethod(_Quantity.Quantity_Date_Add,None,Quantity_Date)
Quantity_Date.__add__ = new_instancemethod(_Quantity.Quantity_Date___add__,None,Quantity_Date)
Quantity_Date.Year = new_instancemethod(_Quantity.Quantity_Date_Year,None,Quantity_Date)
Quantity_Date.Month = new_instancemethod(_Quantity.Quantity_Date_Month,None,Quantity_Date)
Quantity_Date.Day = new_instancemethod(_Quantity.Quantity_Date_Day,None,Quantity_Date)
Quantity_Date.Hour = new_instancemethod(_Quantity.Quantity_Date_Hour,None,Quantity_Date)
Quantity_Date.Minute = new_instancemethod(_Quantity.Quantity_Date_Minute,None,Quantity_Date)
Quantity_Date.Second = new_instancemethod(_Quantity.Quantity_Date_Second,None,Quantity_Date)
Quantity_Date.MilliSecond = new_instancemethod(_Quantity.Quantity_Date_MilliSecond,None,Quantity_Date)
Quantity_Date.MicroSecond = new_instancemethod(_Quantity.Quantity_Date_MicroSecond,None,Quantity_Date)
Quantity_Date.IsEqual = new_instancemethod(_Quantity.Quantity_Date_IsEqual,None,Quantity_Date)
Quantity_Date.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Date___eq_wrapper__,None,Quantity_Date)
Quantity_Date.IsEarlier = new_instancemethod(_Quantity.Quantity_Date_IsEarlier,None,Quantity_Date)
Quantity_Date.__lt__ = new_instancemethod(_Quantity.Quantity_Date___lt__,None,Quantity_Date)
Quantity_Date.IsLater = new_instancemethod(_Quantity.Quantity_Date_IsLater,None,Quantity_Date)
Quantity_Date.__gt__ = new_instancemethod(_Quantity.Quantity_Date___gt__,None,Quantity_Date)
Quantity_Date._CSFDB_GetQuantity_DatemySec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_GetQuantity_DatemySec,None,Quantity_Date)
Quantity_Date._CSFDB_SetQuantity_DatemySec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_SetQuantity_DatemySec,None,Quantity_Date)
Quantity_Date._CSFDB_GetQuantity_DatemyUSec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_GetQuantity_DatemyUSec,None,Quantity_Date)
Quantity_Date._CSFDB_SetQuantity_DatemyUSec = new_instancemethod(_Quantity.Quantity_Date__CSFDB_SetQuantity_DatemyUSec,None,Quantity_Date)
Quantity_Date._kill_pointed = new_instancemethod(_Quantity.Quantity_Date__kill_pointed,None,Quantity_Date)
Quantity_Date_swigregister = _Quantity.Quantity_Date_swigregister
Quantity_Date_swigregister(Quantity_Date)

def Quantity_Date_IsValid(*args):
  """
    * Checks the validity of a date - returns true if a date defined from the year yyyy, the month mm, the day dd, the hour hh, the minute mn, the second ss, the millisecond mis (defaulted to 0) and the microsecond mics (defaulted to 0) is valid. A date must satisfy the conditions above: - yyyy is greater than or equal to 1979, - mm lies within the range [1, 12] (with 1 corresponding to January and 12 to December), - dd lies within a valid range for the month mm (from 1 to 28, 29, 30 or 31 depending on mm and whether yyyy is a leap year or not), - hh lies within the range [0, 23], - mn lies within the range [0, 59], - ss lies within the range [0, 59], - mis lies within the range [0, 999], - mics lies within the range [0, 999].C

    :param mm:
    :type mm: int
    :param dd:
    :type dd: int
    :param yy:
    :type yy: int
    :param hh:
    :type hh: int
    :param mn:
    :type mn: int
    :param ss:
    :type ss: int
    :param mis: default value is 0
    :type mis: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    """
  return _Quantity.Quantity_Date_IsValid(*args)

def Quantity_Date_IsLeap(*args):
  """
    * Returns true if a year is a leap year. The leap years are divisable by 4 and not by 100 except the years divisable by 400.

    :param yy:
    :type yy: int
    :rtype: bool

    """
  return _Quantity.Quantity_Date_IsLeap(*args)

class Quantity_HArray1OfColor(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        _Quantity.Quantity_HArray1OfColor_swiginit(self,_Quantity.new_Quantity_HArray1OfColor(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_HArray1OfColor_Init(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_HArray1OfColor_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _Quantity.Quantity_HArray1OfColor_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_HArray1OfColor_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Quantity.Quantity_HArray1OfColor_ChangeValue(self, *args)

    def Array1(self, *args):
        """
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_HArray1OfColor_Array1(self, *args)

    def ChangeArray1(self, *args):
        """
        :rtype: Quantity_Array1OfColor

        """
        return _Quantity.Quantity_HArray1OfColor_ChangeArray1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Quantity_HArray1OfColor self)"""
        return _Quantity.Quantity_HArray1OfColor__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Quantity_HArray1OfColor self) -> Handle_Quantity_HArray1OfColor"""
        return _Quantity.Quantity_HArray1OfColor_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_HArray1OfColor.Init = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Init,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Length = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Length,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Lower = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Lower,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Upper = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Upper,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.SetValue = new_instancemethod(_Quantity.Quantity_HArray1OfColor_SetValue,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Value = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Value,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.ChangeValue = new_instancemethod(_Quantity.Quantity_HArray1OfColor_ChangeValue,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.Array1 = new_instancemethod(_Quantity.Quantity_HArray1OfColor_Array1,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.ChangeArray1 = new_instancemethod(_Quantity.Quantity_HArray1OfColor_ChangeArray1,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor._kill_pointed = new_instancemethod(_Quantity.Quantity_HArray1OfColor__kill_pointed,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor.GetHandle = new_instancemethod(_Quantity.Quantity_HArray1OfColor_GetHandle,None,Quantity_HArray1OfColor)
Quantity_HArray1OfColor_swigregister = _Quantity.Quantity_HArray1OfColor_swigregister
Quantity_HArray1OfColor_swigregister(Quantity_HArray1OfColor)

class Handle_Quantity_HArray1OfColor(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Quantity.Handle_Quantity_HArray1OfColor_swiginit(self,_Quantity.new_Handle_Quantity_HArray1OfColor(*args))
    DownCast = staticmethod(_Quantity.Handle_Quantity_HArray1OfColor_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Quantity_HArray1OfColor.Nullify = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_Nullify,None,Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor.IsNull = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_IsNull,None,Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor.GetObject = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor_GetObject,None,Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor._kill_pointed = new_instancemethod(_Quantity.Handle_Quantity_HArray1OfColor__kill_pointed,None,Handle_Quantity_HArray1OfColor)
Handle_Quantity_HArray1OfColor_swigregister = _Quantity.Handle_Quantity_HArray1OfColor_swigregister
Handle_Quantity_HArray1OfColor_swigregister(Handle_Quantity_HArray1OfColor)

def Handle_Quantity_HArray1OfColor_DownCast(*args):
  return _Quantity.Handle_Quantity_HArray1OfColor_DownCast(*args)
Handle_Quantity_HArray1OfColor_DownCast = _Quantity.Handle_Quantity_HArray1OfColor_DownCast

class Quantity_Period(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Values(self, *args):
        """
        * Decomposes this period into a number of days,hours, minutes,seconds,milliseconds and microseconds Example of return values: 2 days, 15 hours, 0 minute , 0 second 0 millisecond and 0 microsecond

        :param dd:
        :type dd: int &
        :param hh:
        :type hh: int &
        :param mn:
        :type mn: int &
        :param ss:
        :type ss: int &
        :param mis:
        :type mis: int &
        :param mics:
        :type mics: int &
        :rtype: None

        * Returns the number of seconds in Ss and the number of remainding microseconds in Mics of this period. Example of return values: 3600 seconds and 0 microseconds

        :param ss:
        :type ss: int &
        :param mics:
        :type mics: int &
        :rtype: None

        """
        return _Quantity.Quantity_Period_Values(self, *args)

    def SetValues(self, *args):
        """
        * Assigns to this period the time interval defined - with dd days, hh hours, mn minutes, ss seconds, mis (defaulted to 0) milliseconds and mics (defaulted to 0) microseconds; or

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        * Assigns to this period the time interval defined - with Ss seconds and Mics (defaulted to 0) microseconds. Exceptions Quantity_PeriodDefinitionError: - if the number of seconds expressed either by: - dd days, hh hours, mn minutes and ss seconds, or - Ss is less than 0. - if the number of microseconds expressed either by: - mis milliseconds and mics microseconds, or - Mics is less than 0.

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        """
        return _Quantity.Quantity_Period_SetValues(self, *args)

    def Subtract(self, *args):
        """
        * Subtracts one Period from another and returns the difference.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period_Subtract(self, *args)

    def __sub__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period___sub__(self, *args)

    def Add(self, *args):
        """
        * Adds one Period to another one.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period_Add(self, *args)

    def __add__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: Quantity_Period

        """
        return _Quantity.Quantity_Period___add__(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if both <self> and <other> are equal.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsShorter(self, *args):
        """
        * Returns True if <self> is shorter than <other>.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsShorter(self, *args)

    def __lt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period___lt__(self, *args)

    def IsLonger(self, *args):
        """
        * Returns True if <self> is longer then <other>.

        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsLonger(self, *args)

    def __gt__(self, *args):
        """
        :param anOther:
        :type anOther: Quantity_Period &
        :rtype: bool

        """
        return _Quantity.Quantity_Period___gt__(self, *args)

    def IsValid(*args):
        """
        * Checks the validity of a Period in form (dd,hh,mn,ss,mil,mic) With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        * Checks the validity of a Period in form (ss,mic) With: 0 <= ss  0 <= mics

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: bool

        """
        return _Quantity.Quantity_Period_IsValid(*args)

    IsValid = staticmethod(IsValid)
    def __init__(self, *args): 
        """
        * Creates a Period With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

        :param dd:
        :type dd: int
        :param hh:
        :type hh: int
        :param mn:
        :type mn: int
        :param ss:
        :type ss: int
        :param mis: default value is 0
        :type mis: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        * Creates a Period with a number of seconds and microseconds. Exceptions Quantity_PeriodDefinitionError: - if the number of seconds expressed either by: - dd days, hh hours, mn minutes and ss seconds, or - Ss is less than 0. - if the number of microseconds expressed either by: - mis milliseconds and mics microseconds, or - Mics is less than 0.

        :param ss:
        :type ss: int
        :param mics: default value is 0
        :type mics: int
        :rtype: None

        :rtype: None

        """
        _Quantity.Quantity_Period_swiginit(self,_Quantity.new_Quantity_Period(*args))
    def _CSFDB_GetQuantity_PeriodmySec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmySec(self, *args)

    def _CSFDB_SetQuantity_PeriodmySec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmySec(self, *args)

    def _CSFDB_GetQuantity_PeriodmyUSec(self, *args):
        """
        :rtype: int

        """
        return _Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmyUSec(self, *args)

    def _CSFDB_SetQuantity_PeriodmyUSec(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmyUSec(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Quantity_Period.Values = new_instancemethod(_Quantity.Quantity_Period_Values,None,Quantity_Period)
Quantity_Period.SetValues = new_instancemethod(_Quantity.Quantity_Period_SetValues,None,Quantity_Period)
Quantity_Period.Subtract = new_instancemethod(_Quantity.Quantity_Period_Subtract,None,Quantity_Period)
Quantity_Period.__sub__ = new_instancemethod(_Quantity.Quantity_Period___sub__,None,Quantity_Period)
Quantity_Period.Add = new_instancemethod(_Quantity.Quantity_Period_Add,None,Quantity_Period)
Quantity_Period.__add__ = new_instancemethod(_Quantity.Quantity_Period___add__,None,Quantity_Period)
Quantity_Period.IsEqual = new_instancemethod(_Quantity.Quantity_Period_IsEqual,None,Quantity_Period)
Quantity_Period.__eq_wrapper__ = new_instancemethod(_Quantity.Quantity_Period___eq_wrapper__,None,Quantity_Period)
Quantity_Period.IsShorter = new_instancemethod(_Quantity.Quantity_Period_IsShorter,None,Quantity_Period)
Quantity_Period.__lt__ = new_instancemethod(_Quantity.Quantity_Period___lt__,None,Quantity_Period)
Quantity_Period.IsLonger = new_instancemethod(_Quantity.Quantity_Period_IsLonger,None,Quantity_Period)
Quantity_Period.__gt__ = new_instancemethod(_Quantity.Quantity_Period___gt__,None,Quantity_Period)
Quantity_Period._CSFDB_GetQuantity_PeriodmySec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmySec,None,Quantity_Period)
Quantity_Period._CSFDB_SetQuantity_PeriodmySec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmySec,None,Quantity_Period)
Quantity_Period._CSFDB_GetQuantity_PeriodmyUSec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_GetQuantity_PeriodmyUSec,None,Quantity_Period)
Quantity_Period._CSFDB_SetQuantity_PeriodmyUSec = new_instancemethod(_Quantity.Quantity_Period__CSFDB_SetQuantity_PeriodmyUSec,None,Quantity_Period)
Quantity_Period._kill_pointed = new_instancemethod(_Quantity.Quantity_Period__kill_pointed,None,Quantity_Period)
Quantity_Period_swigregister = _Quantity.Quantity_Period_swigregister
Quantity_Period_swigregister(Quantity_Period)

def Quantity_Period_IsValid(*args):
  """
    * Checks the validity of a Period in form (dd,hh,mn,ss,mil,mic) With: 0 <= dd  0 <= hh  0 <= mn  0 <= ss  0 <= mis  0 <= mics

    :param dd:
    :type dd: int
    :param hh:
    :type hh: int
    :param mn:
    :type mn: int
    :param ss:
    :type ss: int
    :param mis: default value is 0
    :type mis: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    * Checks the validity of a Period in form (ss,mic) With: 0 <= ss  0 <= mics

    :param ss:
    :type ss: int
    :param mics: default value is 0
    :type mics: int
    :rtype: bool

    """
  return _Quantity.Quantity_Period_IsValid(*args)



