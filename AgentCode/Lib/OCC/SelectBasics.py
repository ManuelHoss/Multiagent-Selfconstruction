# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _SelectBasics.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SelectBasics', [dirname(__file__)])
        except ImportError:
            import _SelectBasics
            return _SelectBasics
        if fp is not None:
            try:
                _mod = imp.load_module('_SelectBasics', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SelectBasics = swig_import_helper()
    del swig_import_helper
else:
    import _SelectBasics
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SelectBasics.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_SelectBasics.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_SelectBasics.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_SelectBasics.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_SelectBasics.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_SelectBasics.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_SelectBasics.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_SelectBasics.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_SelectBasics.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_SelectBasics.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_SelectBasics.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_SelectBasics.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_SelectBasics.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_SelectBasics.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_SelectBasics.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_SelectBasics.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_SelectBasics.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _SelectBasics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.gp
import OCC.TColgp
import OCC.TCollection
import OCC.MMgt
import OCC.TopLoc
import OCC.Bnd
import OCC.TColStd
class selectbasics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MaxOwnerPriority(*args):
        """
        * Structure to provide all-in-one information on picking arguments for 'Matches' method of SelectBasics_SensitiveEntity.

        :rtype: int

        """
        return _SelectBasics.selectbasics_MaxOwnerPriority(*args)

    MaxOwnerPriority = staticmethod(MaxOwnerPriority)

    def MinOwnerPriority(*args):
        """
        :rtype: int

        """
        return _SelectBasics.selectbasics_MinOwnerPriority(*args)

    MinOwnerPriority = staticmethod(MinOwnerPriority)

    def __init__(self):
        _SelectBasics.selectbasics_swiginit(self, _SelectBasics.new_selectbasics())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


selectbasics._kill_pointed = new_instancemethod(_SelectBasics.selectbasics__kill_pointed, None, selectbasics)
selectbasics_swigregister = _SelectBasics.selectbasics_swigregister
selectbasics_swigregister(selectbasics)

def selectbasics_MaxOwnerPriority(*args):
    """
    * Structure to provide all-in-one information on picking arguments for 'Matches' method of SelectBasics_SensitiveEntity.

    :rtype: int

    """
    return _SelectBasics.selectbasics_MaxOwnerPriority(*args)

def selectbasics_MinOwnerPriority(*args):
    """
    :rtype: int

    """
    return _SelectBasics.selectbasics_MinOwnerPriority(*args)

class SelectBasics_BasicTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MatchSegments(*args):
        """
        * returns True if The Segment {P1P2} is intersected by the segment {P3P4}

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :param P3:
        :type P3: gp_Pnt2d
        :param P4:
        :type P4: gp_Pnt2d
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_BasicTool_MatchSegments(*args)

    MatchSegments = staticmethod(MatchSegments)

    def MatchSegment(*args):
        """
        * return True if Segment(pBegin, pEnd) is Selected

        :param pBegin:
        :type pBegin: gp_Pnt2d
        :param pEnd:
        :type pEnd: gp_Pnt2d
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param aTol:
        :type aTol: float
        :param DMin:
        :type DMin: float &
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_BasicTool_MatchSegment(*args)

    MatchSegment = staticmethod(MatchSegment)

    def AutoInter(*args):
        """
        :param aPolyg2d:
        :type aPolyg2d: TColgp_Array1OfPnt2d
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_BasicTool_AutoInter(*args)

    AutoInter = staticmethod(AutoInter)

    def MatchPolyg2d(*args):
        """
        * package method used to find if a point is close enough to a polygon of 2D points to be Used by Primitives like curves or faces... Rank gives the index of the touched segment

        :param tabpoint:
        :type tabpoint: TColgp_Array1OfPnt2d
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param aTol:
        :type aTol: float
        :param DMin:
        :type DMin: float &
        :param Rank:
        :type Rank: int &
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_BasicTool_MatchPolyg2d(*args)

    MatchPolyg2d = staticmethod(MatchPolyg2d)

    def __init__(self):
        _SelectBasics.SelectBasics_BasicTool_swiginit(self, _SelectBasics.new_SelectBasics_BasicTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_BasicTool._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_BasicTool__kill_pointed, None, SelectBasics_BasicTool)
SelectBasics_BasicTool_swigregister = _SelectBasics.SelectBasics_BasicTool_swigregister
SelectBasics_BasicTool_swigregister(SelectBasics_BasicTool)

def SelectBasics_BasicTool_MatchSegments(*args):
    """
    * returns True if The Segment {P1P2} is intersected by the segment {P3P4}

    :param P1:
    :type P1: gp_Pnt2d
    :param P2:
    :type P2: gp_Pnt2d
    :param P3:
    :type P3: gp_Pnt2d
    :param P4:
    :type P4: gp_Pnt2d
    :rtype: bool

    """
    return _SelectBasics.SelectBasics_BasicTool_MatchSegments(*args)

def SelectBasics_BasicTool_MatchSegment(*args):
    """
    * return True if Segment(pBegin, pEnd) is Selected

    :param pBegin:
    :type pBegin: gp_Pnt2d
    :param pEnd:
    :type pEnd: gp_Pnt2d
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param aTol:
    :type aTol: float
    :param DMin:
    :type DMin: float &
    :rtype: bool

    """
    return _SelectBasics.SelectBasics_BasicTool_MatchSegment(*args)

def SelectBasics_BasicTool_AutoInter(*args):
    """
    :param aPolyg2d:
    :type aPolyg2d: TColgp_Array1OfPnt2d
    :rtype: bool

    """
    return _SelectBasics.SelectBasics_BasicTool_AutoInter(*args)

def SelectBasics_BasicTool_MatchPolyg2d(*args):
    """
    * package method used to find if a point is close enough to a polygon of 2D points to be Used by Primitives like curves or faces... Rank gives the index of the touched segment

    :param tabpoint:
    :type tabpoint: TColgp_Array1OfPnt2d
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param aTol:
    :type aTol: float
    :param DMin:
    :type DMin: float &
    :param Rank:
    :type Rank: int &
    :rtype: bool

    """
    return _SelectBasics.SelectBasics_BasicTool_MatchPolyg2d(*args)

class SelectBasics_EntityOwner(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args):
        """
        * sets the selectable priority of the owner

        :param aPriority:
        :type aPriority: int
        :rtype: None

        """
        return _SelectBasics.SelectBasics_EntityOwner_Set(self, *args)


    def Priority(self, *args):
        """
        :rtype: int

        """
        return _SelectBasics.SelectBasics_EntityOwner_Priority(self, *args)


    def HasLocation(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_EntityOwner_HasLocation(self, *args)


    def SetLocation(self, *args):
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: void

        """
        return _SelectBasics.SelectBasics_EntityOwner_SetLocation(self, *args)


    def ResetLocation(self, *args):
        """
        :rtype: void

        """
        return _SelectBasics.SelectBasics_EntityOwner_ResetLocation(self, *args)


    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _SelectBasics.SelectBasics_EntityOwner_Location(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(SelectBasics_EntityOwner self)"""
        return _SelectBasics.SelectBasics_EntityOwner__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(SelectBasics_EntityOwner self) -> Handle_SelectBasics_EntityOwner"""
        return _SelectBasics.SelectBasics_EntityOwner_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_EntityOwner.Set = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_Set, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.Priority = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_Priority, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.HasLocation = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_HasLocation, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.SetLocation = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_SetLocation, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.ResetLocation = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_ResetLocation, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.Location = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_Location, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner__kill_pointed, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner.GetHandle = new_instancemethod(_SelectBasics.SelectBasics_EntityOwner_GetHandle, None, SelectBasics_EntityOwner)
SelectBasics_EntityOwner_swigregister = _SelectBasics.SelectBasics_EntityOwner_swigregister
SelectBasics_EntityOwner_swigregister(SelectBasics_EntityOwner)

class Handle_SelectBasics_EntityOwner(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SelectBasics.Handle_SelectBasics_EntityOwner_swiginit(self, _SelectBasics.new_Handle_SelectBasics_EntityOwner(*args))
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_EntityOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_SelectBasics_EntityOwner.Nullify = new_instancemethod(_SelectBasics.Handle_SelectBasics_EntityOwner_Nullify, None, Handle_SelectBasics_EntityOwner)
Handle_SelectBasics_EntityOwner.IsNull = new_instancemethod(_SelectBasics.Handle_SelectBasics_EntityOwner_IsNull, None, Handle_SelectBasics_EntityOwner)
Handle_SelectBasics_EntityOwner.GetObject = new_instancemethod(_SelectBasics.Handle_SelectBasics_EntityOwner_GetObject, None, Handle_SelectBasics_EntityOwner)
Handle_SelectBasics_EntityOwner._kill_pointed = new_instancemethod(_SelectBasics.Handle_SelectBasics_EntityOwner__kill_pointed, None, Handle_SelectBasics_EntityOwner)
Handle_SelectBasics_EntityOwner_swigregister = _SelectBasics.Handle_SelectBasics_EntityOwner_swigregister
Handle_SelectBasics_EntityOwner_swigregister(Handle_SelectBasics_EntityOwner)

def Handle_SelectBasics_EntityOwner_DownCast(AnObject):
    return _SelectBasics.Handle_SelectBasics_EntityOwner_DownCast(AnObject)
Handle_SelectBasics_EntityOwner_DownCast = _SelectBasics.Handle_SelectBasics_EntityOwner_DownCast

class SelectBasics_ListIteratorOfListOfBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_swiginit(self, _SelectBasics.new_SelectBasics_ListIteratorOfListOfBox2d(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box2d

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListIteratorOfListOfBox2d.Initialize = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Initialize, None, SelectBasics_ListIteratorOfListOfBox2d)
SelectBasics_ListIteratorOfListOfBox2d.More = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_More, None, SelectBasics_ListIteratorOfListOfBox2d)
SelectBasics_ListIteratorOfListOfBox2d.Next = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Next, None, SelectBasics_ListIteratorOfListOfBox2d)
SelectBasics_ListIteratorOfListOfBox2d.Value = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_Value, None, SelectBasics_ListIteratorOfListOfBox2d)
SelectBasics_ListIteratorOfListOfBox2d._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfBox2d__kill_pointed, None, SelectBasics_ListIteratorOfListOfBox2d)
SelectBasics_ListIteratorOfListOfBox2d_swigregister = _SelectBasics.SelectBasics_ListIteratorOfListOfBox2d_swigregister
SelectBasics_ListIteratorOfListOfBox2d_swigregister(SelectBasics_ListIteratorOfListOfBox2d)

class SelectBasics_ListIteratorOfListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_swiginit(self, _SelectBasics.new_SelectBasics_ListIteratorOfListOfSensitive(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_SelectBasics_SensitiveEntity

        """
        return _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListIteratorOfListOfSensitive.Initialize = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Initialize, None, SelectBasics_ListIteratorOfListOfSensitive)
SelectBasics_ListIteratorOfListOfSensitive.More = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_More, None, SelectBasics_ListIteratorOfListOfSensitive)
SelectBasics_ListIteratorOfListOfSensitive.Next = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Next, None, SelectBasics_ListIteratorOfListOfSensitive)
SelectBasics_ListIteratorOfListOfSensitive.Value = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_Value, None, SelectBasics_ListIteratorOfListOfSensitive)
SelectBasics_ListIteratorOfListOfSensitive._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListIteratorOfListOfSensitive__kill_pointed, None, SelectBasics_ListIteratorOfListOfSensitive)
SelectBasics_ListIteratorOfListOfSensitive_swigregister = _SelectBasics.SelectBasics_ListIteratorOfListOfSensitive_swigregister
SelectBasics_ListIteratorOfListOfSensitive_swigregister(SelectBasics_ListIteratorOfListOfSensitive)

class SelectBasics_ListNodeOfListOfBox2d(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Bnd_Box2d &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListNodeOfListOfBox2d_swiginit(self, _SelectBasics.new_SelectBasics_ListNodeOfListOfBox2d(*args))

    def Value(self, *args):
        """
        :rtype: Bnd_Box2d

        """
        return _SelectBasics.SelectBasics_ListNodeOfListOfBox2d_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(SelectBasics_ListNodeOfListOfBox2d self)"""
        return _SelectBasics.SelectBasics_ListNodeOfListOfBox2d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(SelectBasics_ListNodeOfListOfBox2d self) -> Handle_SelectBasics_ListNodeOfListOfBox2d"""
        return _SelectBasics.SelectBasics_ListNodeOfListOfBox2d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListNodeOfListOfBox2d.Value = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfBox2d_Value, None, SelectBasics_ListNodeOfListOfBox2d)
SelectBasics_ListNodeOfListOfBox2d._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfBox2d__kill_pointed, None, SelectBasics_ListNodeOfListOfBox2d)
SelectBasics_ListNodeOfListOfBox2d.GetHandle = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfBox2d_GetHandle, None, SelectBasics_ListNodeOfListOfBox2d)
SelectBasics_ListNodeOfListOfBox2d_swigregister = _SelectBasics.SelectBasics_ListNodeOfListOfBox2d_swigregister
SelectBasics_ListNodeOfListOfBox2d_swigregister(SelectBasics_ListNodeOfListOfBox2d)

class Handle_SelectBasics_ListNodeOfListOfBox2d(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_swiginit(self, _SelectBasics.new_Handle_SelectBasics_ListNodeOfListOfBox2d(*args))
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_SelectBasics_ListNodeOfListOfBox2d.Nullify = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_Nullify, None, Handle_SelectBasics_ListNodeOfListOfBox2d)
Handle_SelectBasics_ListNodeOfListOfBox2d.IsNull = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_IsNull, None, Handle_SelectBasics_ListNodeOfListOfBox2d)
Handle_SelectBasics_ListNodeOfListOfBox2d.GetObject = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_GetObject, None, Handle_SelectBasics_ListNodeOfListOfBox2d)
Handle_SelectBasics_ListNodeOfListOfBox2d._kill_pointed = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d__kill_pointed, None, Handle_SelectBasics_ListNodeOfListOfBox2d)
Handle_SelectBasics_ListNodeOfListOfBox2d_swigregister = _SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_swigregister
Handle_SelectBasics_ListNodeOfListOfBox2d_swigregister(Handle_SelectBasics_ListNodeOfListOfBox2d)

def Handle_SelectBasics_ListNodeOfListOfBox2d_DownCast(AnObject):
    return _SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_DownCast(AnObject)
Handle_SelectBasics_ListNodeOfListOfBox2d_DownCast = _SelectBasics.Handle_SelectBasics_ListNodeOfListOfBox2d_DownCast

class SelectBasics_ListNodeOfListOfSensitive(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListNodeOfListOfSensitive_swiginit(self, _SelectBasics.new_SelectBasics_ListNodeOfListOfSensitive(*args))

    def Value(self, *args):
        """
        :rtype: Handle_SelectBasics_SensitiveEntity

        """
        return _SelectBasics.SelectBasics_ListNodeOfListOfSensitive_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(SelectBasics_ListNodeOfListOfSensitive self)"""
        return _SelectBasics.SelectBasics_ListNodeOfListOfSensitive__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(SelectBasics_ListNodeOfListOfSensitive self) -> Handle_SelectBasics_ListNodeOfListOfSensitive"""
        return _SelectBasics.SelectBasics_ListNodeOfListOfSensitive_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListNodeOfListOfSensitive.Value = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfSensitive_Value, None, SelectBasics_ListNodeOfListOfSensitive)
SelectBasics_ListNodeOfListOfSensitive._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfSensitive__kill_pointed, None, SelectBasics_ListNodeOfListOfSensitive)
SelectBasics_ListNodeOfListOfSensitive.GetHandle = new_instancemethod(_SelectBasics.SelectBasics_ListNodeOfListOfSensitive_GetHandle, None, SelectBasics_ListNodeOfListOfSensitive)
SelectBasics_ListNodeOfListOfSensitive_swigregister = _SelectBasics.SelectBasics_ListNodeOfListOfSensitive_swigregister
SelectBasics_ListNodeOfListOfSensitive_swigregister(SelectBasics_ListNodeOfListOfSensitive)

class Handle_SelectBasics_ListNodeOfListOfSensitive(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_swiginit(self, _SelectBasics.new_Handle_SelectBasics_ListNodeOfListOfSensitive(*args))
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_SelectBasics_ListNodeOfListOfSensitive.Nullify = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_Nullify, None, Handle_SelectBasics_ListNodeOfListOfSensitive)
Handle_SelectBasics_ListNodeOfListOfSensitive.IsNull = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_IsNull, None, Handle_SelectBasics_ListNodeOfListOfSensitive)
Handle_SelectBasics_ListNodeOfListOfSensitive.GetObject = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_GetObject, None, Handle_SelectBasics_ListNodeOfListOfSensitive)
Handle_SelectBasics_ListNodeOfListOfSensitive._kill_pointed = new_instancemethod(_SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive__kill_pointed, None, Handle_SelectBasics_ListNodeOfListOfSensitive)
Handle_SelectBasics_ListNodeOfListOfSensitive_swigregister = _SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_swigregister
Handle_SelectBasics_ListNodeOfListOfSensitive_swigregister(Handle_SelectBasics_ListNodeOfListOfSensitive)

def Handle_SelectBasics_ListNodeOfListOfSensitive_DownCast(AnObject):
    return _SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_DownCast(AnObject)
Handle_SelectBasics_ListNodeOfListOfSensitive_DownCast = _SelectBasics.Handle_SelectBasics_ListNodeOfListOfSensitive_DownCast

class SelectBasics_ListOfBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListOfBox2d_swiginit(self, _SelectBasics.new_SelectBasics_ListOfBox2d(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Bnd_Box2d &
        :rtype: None

        :param I:
        :type I: Bnd_Box2d &
        :param theIt:
        :type theIt: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Bnd_Box2d &
        :rtype: None

        :param I:
        :type I: Bnd_Box2d &
        :param theIt:
        :type theIt: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Bnd_Box2d

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Bnd_Box2d

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Bnd_Box2d &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Bnd_Box2d &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfBox2d &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfBox2d_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListOfBox2d.Assign = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Assign, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Set = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Set, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Extent = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Extent, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Clear = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Clear, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.IsEmpty = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_IsEmpty, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Prepend = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Prepend, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Append = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Append, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.First = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_First, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Last = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Last, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.RemoveFirst = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_RemoveFirst, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.Remove = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_Remove, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.InsertBefore = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_InsertBefore, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d.InsertAfter = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d_InsertAfter, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListOfBox2d__kill_pointed, None, SelectBasics_ListOfBox2d)
SelectBasics_ListOfBox2d_swigregister = _SelectBasics.SelectBasics_ListOfBox2d_swigregister
SelectBasics_ListOfBox2d_swigregister(SelectBasics_ListOfBox2d)

class SelectBasics_ListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _SelectBasics.SelectBasics_ListOfSensitive_swiginit(self, _SelectBasics.new_SelectBasics_ListOfSensitive(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :param theIt:
        :type theIt: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :param theIt:
        :type theIt: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_SelectBasics_SensitiveEntity

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_SelectBasics_SensitiveEntity

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_SensitiveEntity &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: SelectBasics_ListOfSensitive &
        :param It:
        :type It: SelectBasics_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_ListOfSensitive_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_ListOfSensitive.Assign = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Assign, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Set = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Set, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Extent = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Extent, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Clear = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Clear, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.IsEmpty = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_IsEmpty, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Prepend = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Prepend, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Append = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Append, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.First = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_First, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Last = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Last, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.RemoveFirst = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_RemoveFirst, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.Remove = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_Remove, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.InsertBefore = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_InsertBefore, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive.InsertAfter = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive_InsertAfter, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_ListOfSensitive__kill_pointed, None, SelectBasics_ListOfSensitive)
SelectBasics_ListOfSensitive_swigregister = _SelectBasics.SelectBasics_ListOfSensitive_swigregister
SelectBasics_ListOfSensitive_swigregister(SelectBasics_ListOfSensitive)

class SelectBasics_PickArgs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor. @param theX mouse picking coordinate on x-axis of selection coord space. @param theY mouse picking coordinate on y-axis of selection coord space. @param theTolerance x, y coordinate tolerance. @param theDepthMin minimum picking depth in selection coord space. @param theDepthMax maximum picking depth in selection coord space. @param thePickingLine line going through picking point.

        :param theX:
        :type theX: float
        :param theY:
        :type theY: float
        :param theTolerance:
        :type theTolerance: float
        :param theDepthMin:
        :type theDepthMin: float
        :param theDepthMax:
        :type theDepthMax: float
        :param thePickingLine:
        :type thePickingLine: gp_Lin
        :rtype: None

        """
        _SelectBasics.SelectBasics_PickArgs_swiginit(self, _SelectBasics.new_SelectBasics_PickArgs(*args))

    def X(self, *args):
        """
        :rtype: inline float

        """
        return _SelectBasics.SelectBasics_PickArgs_X(self, *args)


    def Y(self, *args):
        """
        :rtype: inline float

        """
        return _SelectBasics.SelectBasics_PickArgs_Y(self, *args)


    def Tolerance(self, *args):
        """
        :rtype: inline float

        """
        return _SelectBasics.SelectBasics_PickArgs_Tolerance(self, *args)


    def DepthMin(self, *args):
        """
        :rtype: inline float

        """
        return _SelectBasics.SelectBasics_PickArgs_DepthMin(self, *args)


    def DepthMax(self, *args):
        """
        :rtype: inline float

        """
        return _SelectBasics.SelectBasics_PickArgs_DepthMax(self, *args)


    def PickLine(self, *args):
        """
        :rtype: inline  gp_Lin

        """
        return _SelectBasics.SelectBasics_PickArgs_PickLine(self, *args)


    def IsClipped(self, *args):
        """
        * returns True if passed depth lies outside valid depth range.

        :param theDepth:
        :type theDepth: float
        :rtype: inline bool

        """
        return _SelectBasics.SelectBasics_PickArgs_IsClipped(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_PickArgs.X = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_X, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.Y = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_Y, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.Tolerance = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_Tolerance, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.DepthMin = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_DepthMin, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.DepthMax = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_DepthMax, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.PickLine = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_PickLine, None, SelectBasics_PickArgs)
SelectBasics_PickArgs.IsClipped = new_instancemethod(_SelectBasics.SelectBasics_PickArgs_IsClipped, None, SelectBasics_PickArgs)
SelectBasics_PickArgs._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_PickArgs__kill_pointed, None, SelectBasics_PickArgs)
SelectBasics_PickArgs_swigregister = _SelectBasics.SelectBasics_PickArgs_swigregister
SelectBasics_PickArgs_swigregister(SelectBasics_PickArgs)

class SelectBasics_SensitiveEntity(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args):
        """
        :param TheOwnerId:
        :type TheOwnerId: Handle_SelectBasics_EntityOwner &
        :rtype: void

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Set(self, *args)


    def OwnerId(self, *args):
        """
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_OwnerId(self, *args)


    def Areas(self, *args):
        """
        * to be implemented specifically by each type of sensitive primitive .

        :param aresult:
        :type aresult: SelectBasics_ListOfBox2d &
        :rtype: void

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Areas(self, *args)


    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). This method takes into account depth limits produced by abstract view: far/near planes, clippings. Please port existing implementations of your picking detection, which were done at Matches (X, Y, Tol, DMin) method to this one, introducing the depth checks. Please note that the previous method is suppressed and the virtual implementations are not used by OCC selection framework. The porting procedure for simple sensitives (or if you are not interested in implementing full scale depth checks) can be simplified to writing the following code snippet: @code { // example code for porting descendants of Select3D_SensitiveEntity // invoke implementation of obsolete matches method (if implemented)... if (!Matches (thePickArgs.X(), thePickArgs.Y(), thePickArgs.Tolerance(), theMatchDMin)) return Standard_False; // invoke your implementation of computing depth (if implemented)... Standard_Real aDetectDepth = ComputeDepth (thePickArgs.PickLine()); return !thePickArgs.IsClipped(aDetectDepth); } @endcode @param thePickArgs [in] the picking arguments. @param theMatchDMin [out] the minimum distance on xy plane from point of picking to center of gravity of the detected sub-part of sensitive entity or the whole sensitive (e.g. used for resolving selection of coinciding circles, selection will be set to the one whose center is closest to the picking point). @param theMatchDepth [out] the minimum detected depth: depth of the closest detected sub-part of sensitive entity (or the whole sensitive). returns True if the sensitive matches the detection area. This method is an entry point for picking detection framework. The method is triggered when it is required to compose list of detected sensitive entities. The sensitives are filtered out from detection result if returned value is False. The passed entities are then can be sorted by 'theDetectDist', 'theDetectDepth' parameters.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        * returns True if the box (Xmin,YMin)------(Xmax,Ymax) contains the SensitiveEntity. Necessary for selection using elastic boxes,or segments.

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        * returns True if the polyline xi,yi contains the SensitiveEntity. Necessary for selection using polyline selection

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Matches(self, *args)


    def NeedsConversion(self, *args):
        """
        :rtype: bool

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_NeedsConversion(self, *args)


    def Is3D(self, *args):
        """
        * returns True if able to give 3D information (Depth,...). See Select3D

        :rtype: bool

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Is3D(self, *args)


    def MaxBoxes(self, *args):
        """
        * returns the max number of boxes the entity is able to give at a time

        :rtype: int

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_MaxBoxes(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        :param aFactor:
        :type aFactor: Standard_ShortReal
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_SetSensitivityFactor(self, *args)


    def SensitivityFactor(self, *args):
        """
        * allows a better sensitivity for a specific entity in selection algorithms useful for small sized entities.

        :rtype: Standard_ShortReal

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_SensitivityFactor(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(SelectBasics_SensitiveEntity self)"""
        return _SelectBasics.SelectBasics_SensitiveEntity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(SelectBasics_SensitiveEntity self) -> Handle_SelectBasics_SensitiveEntity"""
        return _SelectBasics.SelectBasics_SensitiveEntity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_SensitiveEntity.Set = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_Set, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.OwnerId = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_OwnerId, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.Areas = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_Areas, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.Matches = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_Matches, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.NeedsConversion = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_NeedsConversion, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.Is3D = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_Is3D, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.MaxBoxes = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_MaxBoxes, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.SetSensitivityFactor = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_SetSensitivityFactor, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.SensitivityFactor = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_SensitivityFactor, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity__kill_pointed, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity.GetHandle = new_instancemethod(_SelectBasics.SelectBasics_SensitiveEntity_GetHandle, None, SelectBasics_SensitiveEntity)
SelectBasics_SensitiveEntity_swigregister = _SelectBasics.SelectBasics_SensitiveEntity_swigregister
SelectBasics_SensitiveEntity_swigregister(SelectBasics_SensitiveEntity)

class Handle_SelectBasics_SensitiveEntity(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SelectBasics.Handle_SelectBasics_SensitiveEntity_swiginit(self, _SelectBasics.new_Handle_SelectBasics_SensitiveEntity(*args))
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_SelectBasics_SensitiveEntity.Nullify = new_instancemethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity_Nullify, None, Handle_SelectBasics_SensitiveEntity)
Handle_SelectBasics_SensitiveEntity.IsNull = new_instancemethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity_IsNull, None, Handle_SelectBasics_SensitiveEntity)
Handle_SelectBasics_SensitiveEntity.GetObject = new_instancemethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity_GetObject, None, Handle_SelectBasics_SensitiveEntity)
Handle_SelectBasics_SensitiveEntity._kill_pointed = new_instancemethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity__kill_pointed, None, Handle_SelectBasics_SensitiveEntity)
Handle_SelectBasics_SensitiveEntity_swigregister = _SelectBasics.Handle_SelectBasics_SensitiveEntity_swigregister
Handle_SelectBasics_SensitiveEntity_swigregister(Handle_SelectBasics_SensitiveEntity)

def Handle_SelectBasics_SensitiveEntity_DownCast(AnObject):
    return _SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast(AnObject)
Handle_SelectBasics_SensitiveEntity_DownCast = _SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast

class SelectBasics_SequenceNodeOfSequenceOfOwner(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_SelectBasics_EntityOwner &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_swiginit(self, _SelectBasics.new_SelectBasics_SequenceNodeOfSequenceOfOwner(*args))

    def Value(self, *args):
        """
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(SelectBasics_SequenceNodeOfSequenceOfOwner self)"""
        return _SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(SelectBasics_SequenceNodeOfSequenceOfOwner self) -> Handle_SelectBasics_SequenceNodeOfSequenceOfOwner"""
        return _SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_SequenceNodeOfSequenceOfOwner.Value = new_instancemethod(_SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_Value, None, SelectBasics_SequenceNodeOfSequenceOfOwner)
SelectBasics_SequenceNodeOfSequenceOfOwner._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner__kill_pointed, None, SelectBasics_SequenceNodeOfSequenceOfOwner)
SelectBasics_SequenceNodeOfSequenceOfOwner.GetHandle = new_instancemethod(_SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_GetHandle, None, SelectBasics_SequenceNodeOfSequenceOfOwner)
SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister = _SelectBasics.SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister
SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister(SelectBasics_SequenceNodeOfSequenceOfOwner)

class Handle_SelectBasics_SequenceNodeOfSequenceOfOwner(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_swiginit(self, _SelectBasics.new_Handle_SelectBasics_SequenceNodeOfSequenceOfOwner(*args))
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_SelectBasics_SequenceNodeOfSequenceOfOwner.Nullify = new_instancemethod(_SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_Nullify, None, Handle_SelectBasics_SequenceNodeOfSequenceOfOwner)
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner.IsNull = new_instancemethod(_SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_IsNull, None, Handle_SelectBasics_SequenceNodeOfSequenceOfOwner)
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner.GetObject = new_instancemethod(_SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_GetObject, None, Handle_SelectBasics_SequenceNodeOfSequenceOfOwner)
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner._kill_pointed = new_instancemethod(_SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner__kill_pointed, None, Handle_SelectBasics_SequenceNodeOfSequenceOfOwner)
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister = _SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_swigregister(Handle_SelectBasics_SequenceNodeOfSequenceOfOwner)

def Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_DownCast(AnObject):
    return _SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_DownCast(AnObject)
Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_DownCast = _SelectBasics.Handle_SelectBasics_SequenceNodeOfSequenceOfOwner_DownCast

class SelectBasics_SequenceOfOwner(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _SelectBasics.SelectBasics_SequenceOfOwner_swiginit(self, _SelectBasics.new_SelectBasics_SequenceOfOwner(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_SequenceOfOwner &
        :rtype: SelectBasics_SequenceOfOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: SelectBasics_SequenceOfOwner &
        :rtype: SelectBasics_SequenceOfOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_SelectBasics_EntityOwner &
        :rtype: None

        :param S:
        :type S: SelectBasics_SequenceOfOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_SelectBasics_EntityOwner &
        :rtype: None

        :param S:
        :type S: SelectBasics_SequenceOfOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_SelectBasics_EntityOwner &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: SelectBasics_SequenceOfOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_SelectBasics_EntityOwner &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: SelectBasics_SequenceOfOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: SelectBasics_SequenceOfOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_SelectBasics_EntityOwner &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SequenceOfOwner_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_SequenceOfOwner.Clear = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Clear, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Assign = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Assign, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Set = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Set, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Append = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Append, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Prepend = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Prepend, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.InsertBefore = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_InsertBefore, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.InsertAfter = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_InsertAfter, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.First = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_First, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Last = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Last, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Split = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Split, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Value = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Value, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.SetValue = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_SetValue, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.ChangeValue = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_ChangeValue, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner.Remove = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner_Remove, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_SequenceOfOwner__kill_pointed, None, SelectBasics_SequenceOfOwner)
SelectBasics_SequenceOfOwner_swigregister = _SelectBasics.SelectBasics_SequenceOfOwner_swigregister
SelectBasics_SequenceOfOwner_swigregister(SelectBasics_SequenceOfOwner)

class SelectBasics_SortAlgo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty rectangle selector.

        :rtype: None

        * Creates a initialized selector.

        :param ClippingRectangle:
        :type ClippingRectangle: Bnd_Box2d &
        :param sizeOfSensitiveArea:
        :type sizeOfSensitiveArea: float
        :param theRectangles:
        :type theRectangles: Handle_Bnd_HArray1OfBox2d &
        :rtype: None

        """
        _SelectBasics.SelectBasics_SortAlgo_swiginit(self, _SelectBasics.new_SelectBasics_SortAlgo(*args))

    def Initialize(self, *args):
        """
        * Clears and initializes the selector.

        :param ClippingRectangle:
        :type ClippingRectangle: Bnd_Box2d &
        :param sizeOfSensitiveArea:
        :type sizeOfSensitiveArea: float
        :param theRectangles:
        :type theRectangles: Handle_Bnd_HArray1OfBox2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SortAlgo_Initialize(self, *args)


    def InitSelect(self, *args):
        """
        * Searchs the items on this position.

        :param x:
        :type x: float
        :param y:
        :type y: float
        :rtype: None

        * Searchs the items in this rectangle.

        :param rect:
        :type rect: Bnd_Box2d &
        :rtype: None

        """
        return _SelectBasics.SelectBasics_SortAlgo_InitSelect(self, *args)


    def More(self, *args):
        """
        * Returns true if there is something selected.

        :rtype: bool

        """
        return _SelectBasics.SelectBasics_SortAlgo_More(self, *args)


    def Next(self, *args):
        """
        * Sets value on the next selected item.

        :rtype: None

        """
        return _SelectBasics.SelectBasics_SortAlgo_Next(self, *args)


    def Value(self, *args):
        """
        * Returns the index of the selected rectangle.

        :rtype: int

        """
        return _SelectBasics.SelectBasics_SortAlgo_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


SelectBasics_SortAlgo.Initialize = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo_Initialize, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo.InitSelect = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo_InitSelect, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo.More = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo_More, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo.Next = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo_Next, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo.Value = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo_Value, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo._kill_pointed = new_instancemethod(_SelectBasics.SelectBasics_SortAlgo__kill_pointed, None, SelectBasics_SortAlgo)
SelectBasics_SortAlgo_swigregister = _SelectBasics.SelectBasics_SortAlgo_swigregister
SelectBasics_SortAlgo_swigregister(SelectBasics_SortAlgo)



