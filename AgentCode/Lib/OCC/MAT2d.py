# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _MAT2d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MAT2d', [dirname(__file__)])
        except ImportError:
            import _MAT2d
            return _MAT2d
        if fp is not None:
            try:
                _mod = imp.load_module('_MAT2d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _MAT2d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MAT2d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_MAT2d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_MAT2d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_MAT2d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_MAT2d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_MAT2d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_MAT2d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_MAT2d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_MAT2d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_MAT2d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_MAT2d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_MAT2d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_MAT2d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_MAT2d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_MAT2d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_MAT2d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_MAT2d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _MAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.TColStd
import OCC.TCollection
import OCC.Geom2d
import OCC.gp
import OCC.GeomAbs
import OCC.TColgp
import OCC.Bisector
import OCC.math
import OCC.IntRes2d
import OCC.MAT
import OCC.TColGeom2d
class MAT2d_Array2OfConnexion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_MAT2d_Connexion &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _MAT2d.MAT2d_Array2OfConnexion_swiginit(self, _MAT2d.new_MAT2d_Array2OfConnexion(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_MAT2d_Connexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_Array2OfConnexion_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_Array2OfConnexion_Destroy(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_Array2OfConnexion &
        :rtype: MAT2d_Array2OfConnexion

        """
        return _MAT2d.MAT2d_Array2OfConnexion_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_Array2OfConnexion &
        :rtype: MAT2d_Array2OfConnexion

        """
        return _MAT2d.MAT2d_Array2OfConnexion_Set(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Array2OfConnexion_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_MAT2d_Connexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_Array2OfConnexion_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Array2OfConnexion_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Array2OfConnexion_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_Array2OfConnexion.Init = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Init, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Destroy = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Destroy, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Assign, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Set, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.ColLength = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_ColLength, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.RowLength = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_RowLength, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.LowerCol = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_LowerCol, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.LowerRow = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_LowerRow, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.UpperCol = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_UpperCol, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.UpperRow = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_UpperRow, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.SetValue = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_SetValue, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Value, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.ChangeValue = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_ChangeValue, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion__kill_pointed, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion_swigregister = _MAT2d.MAT2d_Array2OfConnexion_swigregister
MAT2d_Array2OfConnexion_swigregister(MAT2d_Array2OfConnexion)

class MAT2d_BiInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :rtype: None

        """
        _MAT2d.MAT2d_BiInt_swiginit(self, _MAT2d.new_MAT2d_BiInt(*args))

    def FirstIndex(self, *args):
        """
        :rtype: int

        :param I1:
        :type I1: int
        :rtype: None

        """
        return _MAT2d.MAT2d_BiInt_FirstIndex(self, *args)


    def SecondIndex(self, *args):
        """
        :rtype: int

        :param I2:
        :type I2: int
        :rtype: None

        """
        return _MAT2d.MAT2d_BiInt_SecondIndex(self, *args)


    def IsEqual(self, *args):
        """
        :param B:
        :type B: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_BiInt_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_BiInt.FirstIndex = new_instancemethod(_MAT2d.MAT2d_BiInt_FirstIndex, None, MAT2d_BiInt)
MAT2d_BiInt.SecondIndex = new_instancemethod(_MAT2d.MAT2d_BiInt_SecondIndex, None, MAT2d_BiInt)
MAT2d_BiInt.IsEqual = new_instancemethod(_MAT2d.MAT2d_BiInt_IsEqual, None, MAT2d_BiInt)
MAT2d_BiInt.__eq_wrapper__ = new_instancemethod(_MAT2d.MAT2d_BiInt___eq_wrapper__, None, MAT2d_BiInt)
MAT2d_BiInt._kill_pointed = new_instancemethod(_MAT2d.MAT2d_BiInt__kill_pointed, None, MAT2d_BiInt)
MAT2d_BiInt_swigregister = _MAT2d.MAT2d_BiInt_swigregister
MAT2d_BiInt_swigregister(MAT2d_BiInt)

class MAT2d_Circuit(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_Circuit_swiginit(self, _MAT2d.new_MAT2d_Circuit(*args))

    def Perform(self, *args):
        """
        :param aFigure:
        :type aFigure: MAT2d_SequenceOfSequenceOfGeometry &
        :param IsClosed:
        :type IsClosed: TColStd_SequenceOfBoolean &
        :param IndRefLine:
        :type IndRefLine: int
        :param Trigo:
        :type Trigo: bool
        :rtype: None

        """
        return _MAT2d.MAT2d_Circuit_Perform(self, *args)


    def NumberOfItems(self, *args):
        """
        * Returns the Number of Items .

        :rtype: int

        """
        return _MAT2d.MAT2d_Circuit_NumberOfItems(self, *args)


    def Value(self, *args):
        """
        * Returns the item at position <Index> in <self>.

        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Geometry

        """
        return _MAT2d.MAT2d_Circuit_Value(self, *args)


    def LineLength(self, *args):
        """
        * Returns the number of items on the line <IndexLine>.

        :param IndexLine:
        :type IndexLine: int
        :rtype: int

        """
        return _MAT2d.MAT2d_Circuit_LineLength(self, *args)


    def RefToEqui(self, *args):
        """
        * Returns the set of index of the items in <self>corresponding to the curve <IndCurve> on the line <IndLine> from the initial figure.

        :param IndLine:
        :type IndLine: int
        :param IndCurve:
        :type IndCurve: int
        :rtype: TColStd_SequenceOfInteger

        """
        return _MAT2d.MAT2d_Circuit_RefToEqui(self, *args)


    def Connexion(self, *args):
        """
        * Returns the Connexion on the item <Index> in me.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Circuit_Connexion(self, *args)


    def ConnexionOn(self, *args):
        """
        * Returns <True> is there is a connexion on the item <Index> in <self>.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _MAT2d.MAT2d_Circuit_ConnexionOn(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_Circuit self)"""
        return _MAT2d.MAT2d_Circuit__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_Circuit self) -> Handle_MAT2d_Circuit"""
        return _MAT2d.MAT2d_Circuit_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_Circuit.Perform = new_instancemethod(_MAT2d.MAT2d_Circuit_Perform, None, MAT2d_Circuit)
MAT2d_Circuit.NumberOfItems = new_instancemethod(_MAT2d.MAT2d_Circuit_NumberOfItems, None, MAT2d_Circuit)
MAT2d_Circuit.Value = new_instancemethod(_MAT2d.MAT2d_Circuit_Value, None, MAT2d_Circuit)
MAT2d_Circuit.LineLength = new_instancemethod(_MAT2d.MAT2d_Circuit_LineLength, None, MAT2d_Circuit)
MAT2d_Circuit.RefToEqui = new_instancemethod(_MAT2d.MAT2d_Circuit_RefToEqui, None, MAT2d_Circuit)
MAT2d_Circuit.Connexion = new_instancemethod(_MAT2d.MAT2d_Circuit_Connexion, None, MAT2d_Circuit)
MAT2d_Circuit.ConnexionOn = new_instancemethod(_MAT2d.MAT2d_Circuit_ConnexionOn, None, MAT2d_Circuit)
MAT2d_Circuit._kill_pointed = new_instancemethod(_MAT2d.MAT2d_Circuit__kill_pointed, None, MAT2d_Circuit)
MAT2d_Circuit.GetHandle = new_instancemethod(_MAT2d.MAT2d_Circuit_GetHandle, None, MAT2d_Circuit)
MAT2d_Circuit_swigregister = _MAT2d.MAT2d_Circuit_swigregister
MAT2d_Circuit_swigregister(MAT2d_Circuit)

class Handle_MAT2d_Circuit(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_Circuit_swiginit(self, _MAT2d.new_Handle_MAT2d_Circuit(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_Circuit_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_Circuit.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_Circuit_Nullify, None, Handle_MAT2d_Circuit)
Handle_MAT2d_Circuit.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_Circuit_IsNull, None, Handle_MAT2d_Circuit)
Handle_MAT2d_Circuit.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_Circuit_GetObject, None, Handle_MAT2d_Circuit)
Handle_MAT2d_Circuit._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_Circuit__kill_pointed, None, Handle_MAT2d_Circuit)
Handle_MAT2d_Circuit_swigregister = _MAT2d.Handle_MAT2d_Circuit_swigregister
Handle_MAT2d_Circuit_swigregister(Handle_MAT2d_Circuit)

def Handle_MAT2d_Circuit_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_Circuit_DownCast(AnObject)
Handle_MAT2d_Circuit_DownCast = _MAT2d.Handle_MAT2d_Circuit_DownCast

class MAT2d_Connexion(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param LineA:
        :type LineA: int
        :param LineB:
        :type LineB: int
        :param ItemA:
        :type ItemA: int
        :param ItemB:
        :type ItemB: int
        :param Distance:
        :type Distance: float
        :param ParameterOnA:
        :type ParameterOnA: float
        :param ParameterOnB:
        :type ParameterOnB: float
        :param PointA:
        :type PointA: gp_Pnt2d
        :param PointB:
        :type PointB: gp_Pnt2d
        :rtype: None

        """
        _MAT2d.MAT2d_Connexion_swiginit(self, _MAT2d.new_MAT2d_Connexion(*args))

    def IndexFirstLine(self, *args):
        """
        * Returns the Index on the first line.

        :rtype: int

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_IndexFirstLine(self, *args)


    def IndexSecondLine(self, *args):
        """
        * Returns the Index on the Second line.

        :rtype: int

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_IndexSecondLine(self, *args)


    def IndexItemOnFirst(self, *args):
        """
        * Returns the Index of the item on the first line.

        :rtype: int

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnFirst(self, *args)


    def IndexItemOnSecond(self, *args):
        """
        * Returns the Index of the item on the second line.

        :rtype: int

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnSecond(self, *args)


    def ParameterOnFirst(self, *args):
        """
        * Returns the parameter of the point on the firstline.

        :rtype: float

        :param aParameter:
        :type aParameter: float
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_ParameterOnFirst(self, *args)


    def ParameterOnSecond(self, *args):
        """
        * Returns the parameter of the point on the secondline.

        :rtype: float

        :param aParameter:
        :type aParameter: float
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_ParameterOnSecond(self, *args)


    def PointOnFirst(self, *args):
        """
        * Returns the point on the firstline.

        :rtype: gp_Pnt2d

        :param aPoint:
        :type aPoint: gp_Pnt2d
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_PointOnFirst(self, *args)


    def PointOnSecond(self, *args):
        """
        * Returns the point on the secondline.

        :rtype: gp_Pnt2d

        :param aPoint:
        :type aPoint: gp_Pnt2d
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_PointOnSecond(self, *args)


    def Distance(self, *args):
        """
        * Returns the distance between the two points.

        :rtype: float

        :param aDistance:
        :type aDistance: float
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_Distance(self, *args)


    def Reverse(self, *args):
        """
        * Returns the reverse connexion of <self>. the firstpoint is the secondpoint. the secondpoint is the firstpoint.

        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_Connexion_Reverse(self, *args)


    def IsAfter(self, *args):
        """
        * Returns <True> if my firstPoint is on the same line than the firstpoint of <aConnexion> and my firstpoint is after the firstpoint of <aConnexion> on the line. <aSense> = 1 if <aConnexion> is on the Left of its firstline, else <aSense> = -1.

        :param aConnexion:
        :type aConnexion: Handle_MAT2d_Connexion &
        :param aSense:
        :type aSense: float
        :rtype: bool

        """
        return _MAT2d.MAT2d_Connexion_IsAfter(self, *args)


    def Dump(self, *args):
        """
        * Print <self>.

        :param Deep: default value is 0
        :type Deep: int
        :param Offset: default value is 0
        :type Offset: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Connexion_Dump(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_Connexion self)"""
        return _MAT2d.MAT2d_Connexion__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_Connexion self) -> Handle_MAT2d_Connexion"""
        return _MAT2d.MAT2d_Connexion_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_Connexion.IndexFirstLine = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexFirstLine, None, MAT2d_Connexion)
MAT2d_Connexion.IndexSecondLine = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexSecondLine, None, MAT2d_Connexion)
MAT2d_Connexion.IndexItemOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexItemOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.IndexItemOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexItemOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.ParameterOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_ParameterOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.ParameterOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_ParameterOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.PointOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_PointOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.PointOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_PointOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.Distance = new_instancemethod(_MAT2d.MAT2d_Connexion_Distance, None, MAT2d_Connexion)
MAT2d_Connexion.Reverse = new_instancemethod(_MAT2d.MAT2d_Connexion_Reverse, None, MAT2d_Connexion)
MAT2d_Connexion.IsAfter = new_instancemethod(_MAT2d.MAT2d_Connexion_IsAfter, None, MAT2d_Connexion)
MAT2d_Connexion.Dump = new_instancemethod(_MAT2d.MAT2d_Connexion_Dump, None, MAT2d_Connexion)
MAT2d_Connexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_Connexion__kill_pointed, None, MAT2d_Connexion)
MAT2d_Connexion.GetHandle = new_instancemethod(_MAT2d.MAT2d_Connexion_GetHandle, None, MAT2d_Connexion)
MAT2d_Connexion_swigregister = _MAT2d.MAT2d_Connexion_swigregister
MAT2d_Connexion_swigregister(MAT2d_Connexion)

class Handle_MAT2d_Connexion(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_Connexion_swiginit(self, _MAT2d.new_Handle_MAT2d_Connexion(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_Connexion_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_Connexion.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_Connexion_Nullify, None, Handle_MAT2d_Connexion)
Handle_MAT2d_Connexion.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_Connexion_IsNull, None, Handle_MAT2d_Connexion)
Handle_MAT2d_Connexion.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_Connexion_GetObject, None, Handle_MAT2d_Connexion)
Handle_MAT2d_Connexion._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_Connexion__kill_pointed, None, Handle_MAT2d_Connexion)
Handle_MAT2d_Connexion_swigregister = _MAT2d.Handle_MAT2d_Connexion_swigregister
Handle_MAT2d_Connexion_swigregister(Handle_MAT2d_Connexion)

def Handle_MAT2d_Connexion_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_Connexion_DownCast(AnObject)
Handle_MAT2d_Connexion_DownCast = _MAT2d.Handle_MAT2d_Connexion_DownCast

class MAT2d_DataMapIteratorOfDataMapOfBiIntInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfBiIntInteger &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfBiIntInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfBiIntInteger &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: MAT2d_BiInt

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfBiIntInteger.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfBiIntInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntInteger.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Key, None, MAT2d_DataMapIteratorOfDataMapOfBiIntInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntInteger.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_Value, None, MAT2d_DataMapIteratorOfDataMapOfBiIntInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfBiIntInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_swigregister
MAT2d_DataMapIteratorOfDataMapOfBiIntInteger_swigregister(MAT2d_DataMapIteratorOfDataMapOfBiIntInteger)

class MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfBiIntSequenceOfInteger &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfBiIntSequenceOfInteger &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: MAT2d_BiInt

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_SequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Key, None, MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_Value, None, MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_swigregister
MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger_swigregister(MAT2d_DataMapIteratorOfDataMapOfBiIntSequenceOfInteger)

class MAT2d_DataMapIteratorOfDataMapOfIntegerBisec(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerBisec &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfIntegerBisec(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerBisec &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfIntegerBisec.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfIntegerBisec)
MAT2d_DataMapIteratorOfDataMapOfIntegerBisec.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Key, None, MAT2d_DataMapIteratorOfDataMapOfIntegerBisec)
MAT2d_DataMapIteratorOfDataMapOfIntegerBisec.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_Value, None, MAT2d_DataMapIteratorOfDataMapOfIntegerBisec)
MAT2d_DataMapIteratorOfDataMapOfIntegerBisec._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfIntegerBisec)
MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_swigregister
MAT2d_DataMapIteratorOfDataMapOfIntegerBisec_swigregister(MAT2d_DataMapIteratorOfDataMapOfIntegerBisec)

class MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerConnexion &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Key, None, MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_Value, None, MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_swigregister
MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion_swigregister(MAT2d_DataMapIteratorOfDataMapOfIntegerConnexion)

class MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerPnt2d &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerPnt2d &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Key, None, MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_Value, None, MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_swigregister
MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d_swigregister(MAT2d_DataMapIteratorOfDataMapOfIntegerPnt2d)

class MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerSequenceOfConnexion &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerSequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Key, None, MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_Value, None, MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_swigregister
MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion_swigregister(MAT2d_DataMapIteratorOfDataMapOfIntegerSequenceOfConnexion)

class MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerVec2d &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MAT2d_DataMapOfIntegerVec2d &
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d.Initialize = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Initialize, None, MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d.Key = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Key, None, MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d.Value = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_Value, None, MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d__kill_pointed, None, MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d)
MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_swigregister = _MAT2d.MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_swigregister
MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d_swigregister(MAT2d_DataMapIteratorOfDataMapOfIntegerVec2d)

class MAT2d_DataMapNodeOfDataMapOfBiIntInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfBiIntInteger(*args))

    def Key(self, *args):
        """
        :rtype: MAT2d_BiInt

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_Key(self, *args)


    def GetValue(self):
        """GetValue(MAT2d_DataMapNodeOfDataMapOfBiIntInteger self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_GetValue(self)


    def SetValue(self, value):
        """SetValue(MAT2d_DataMapNodeOfDataMapOfBiIntInteger self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfBiIntInteger self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfBiIntInteger self) -> Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfBiIntInteger.Key = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_Key, None, MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntInteger.GetValue = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_GetValue, None, MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntInteger.SetValue = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_SetValue, None, MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntInteger.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister
MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister(MAT2d_DataMapNodeOfDataMapOfBiIntInteger)

class Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger)

def Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntInteger_DownCast

class MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :param I:
        :type I: TColStd_SequenceOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger(*args))

    def Key(self, *args):
        """
        :rtype: MAT2d_BiInt

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_SequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger self) -> Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.Key = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_Key, None, MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_Value, None, MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister
MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister(MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)

class Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger)

def Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfBiIntSequenceOfInteger_DownCast

class MAT2d_DataMapNodeOfDataMapOfIntegerBisec(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Bisector_Bisec &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfIntegerBisec(*args))

    def GetKey(self):
        """GetKey(MAT2d_DataMapNodeOfDataMapOfIntegerBisec self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_GetKey(self)


    def SetKey(self, value):
        """SetKey(MAT2d_DataMapNodeOfDataMapOfIntegerBisec self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfIntegerBisec self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfIntegerBisec self) -> Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfIntegerBisec.GetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_GetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
MAT2d_DataMapNodeOfDataMapOfIntegerBisec.SetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_SetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
MAT2d_DataMapNodeOfDataMapOfIntegerBisec.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_Value, None, MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
MAT2d_DataMapNodeOfDataMapOfIntegerBisec._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
MAT2d_DataMapNodeOfDataMapOfIntegerBisec.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister
MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister(MAT2d_DataMapNodeOfDataMapOfIntegerBisec)

class Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec)

def Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerBisec_DownCast

class MAT2d_DataMapNodeOfDataMapOfIntegerConnexion(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT2d_Connexion &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion(*args))

    def GetKey(self):
        """GetKey(MAT2d_DataMapNodeOfDataMapOfIntegerConnexion self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_GetKey(self)


    def SetKey(self, value):
        """SetKey(MAT2d_DataMapNodeOfDataMapOfIntegerConnexion self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfIntegerConnexion self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfIntegerConnexion self) -> Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.GetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_GetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.SetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_SetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_Value, None, MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister
MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister(MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)

class Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion)

def Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerConnexion_DownCast

class MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Pnt2d
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d(*args))

    def GetKey(self):
        """GetKey(MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_GetKey(self)


    def SetKey(self, value):
        """SetKey(MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d self) -> Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.GetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_GetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.SetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_SetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_Value, None, MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister
MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister(MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)

class Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d)

def Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerPnt2d_DownCast

class MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: MAT2d_SequenceOfConnexion &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion(*args))

    def GetKey(self):
        """GetKey(MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_GetKey(self)


    def SetKey(self, value):
        """SetKey(MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion self) -> Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.GetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_GetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.SetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_SetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_Value, None, MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister
MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister(MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)

class Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion)

def Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerSequenceOfConnexion_DownCast

class MAT2d_DataMapNodeOfDataMapOfIntegerVec2d(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Vec2d
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d(*args))

    def GetKey(self):
        """GetKey(MAT2d_DataMapNodeOfDataMapOfIntegerVec2d self) -> Standard_Integer"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_GetKey(self)


    def SetKey(self, value):
        """SetKey(MAT2d_DataMapNodeOfDataMapOfIntegerVec2d self, Standard_Integer value)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapNodeOfDataMapOfIntegerVec2d self)"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_DataMapNodeOfDataMapOfIntegerVec2d self) -> Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d"""
        return _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.GetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_GetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.SetKey = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_SetKey, None, MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.Value = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_Value, None, MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d__kill_pointed, None, MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.GetHandle = new_instancemethod(_MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_GetHandle, None, MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister = _MAT2d.MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister
MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister(MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)

class Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_Nullify, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_IsNull, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_GetObject, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d__kill_pointed, None, Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_swigregister(Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d)

def Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_DownCast(AnObject)
Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_DownCast = _MAT2d.Handle_MAT2d_DataMapNodeOfDataMapOfIntegerVec2d_DownCast

class MAT2d_DataMapOfBiIntInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfBiIntInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfBiIntInteger &
        :rtype: MAT2d_DataMapOfBiIntInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfBiIntInteger &
        :rtype: MAT2d_DataMapOfBiIntInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: int

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfBiIntInteger self)"""
        return _MAT2d.MAT2d_DataMapOfBiIntInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfBiIntInteger.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Assign, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Set, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ReSize, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Clear, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Bind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_IsBound, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_UnBind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Find, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Find1, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind1, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger__kill_pointed, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger_swigregister = _MAT2d.MAT2d_DataMapOfBiIntInteger_swigregister
MAT2d_DataMapOfBiIntInteger_swigregister(MAT2d_DataMapOfBiIntInteger)

class MAT2d_DataMapOfBiIntSequenceOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntSequenceOfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfBiIntSequenceOfInteger &
        :rtype: MAT2d_DataMapOfBiIntSequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfBiIntSequenceOfInteger &
        :rtype: MAT2d_DataMapOfBiIntSequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :param I:
        :type I: TColStd_SequenceOfInteger &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: TColStd_SequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: TColStd_SequenceOfInteger

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: MAT2d_BiInt &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfBiIntSequenceOfInteger self)"""
        return _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfBiIntSequenceOfInteger.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Assign, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Set, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ReSize, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Clear, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_IsBound, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_UnBind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find1, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind1, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger__kill_pointed, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister = _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister
MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister(MAT2d_DataMapOfBiIntSequenceOfInteger)

class MAT2d_DataMapOfIntegerBisec(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfIntegerBisec_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerBisec(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerBisec &
        :rtype: MAT2d_DataMapOfIntegerBisec

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerBisec &
        :rtype: MAT2d_DataMapOfIntegerBisec

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Bisector_Bisec &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfIntegerBisec self)"""
        return _MAT2d.MAT2d_DataMapOfIntegerBisec__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfIntegerBisec.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Assign, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Set, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ReSize, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Clear, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Bind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_IsBound, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_UnBind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Find, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Find1, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind1, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec__kill_pointed, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec_swigregister = _MAT2d.MAT2d_DataMapOfIntegerBisec_swigregister
MAT2d_DataMapOfIntegerBisec_swigregister(MAT2d_DataMapOfIntegerBisec)

class MAT2d_DataMapOfIntegerConnexion(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerConnexion(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerConnexion &
        :rtype: MAT2d_DataMapOfIntegerConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerConnexion &
        :rtype: MAT2d_DataMapOfIntegerConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT2d_Connexion &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfIntegerConnexion self)"""
        return _MAT2d.MAT2d_DataMapOfIntegerConnexion__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfIntegerConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Assign, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Set, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ReSize, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Clear, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Bind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_IsBound, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_UnBind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Find, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Find1, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind1, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion__kill_pointed, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion_swigregister = _MAT2d.MAT2d_DataMapOfIntegerConnexion_swigregister
MAT2d_DataMapOfIntegerConnexion_swigregister(MAT2d_DataMapOfIntegerConnexion)

class MAT2d_DataMapOfIntegerPnt2d(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerPnt2d(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerPnt2d &
        :rtype: MAT2d_DataMapOfIntegerPnt2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerPnt2d &
        :rtype: MAT2d_DataMapOfIntegerPnt2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Pnt2d
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Pnt2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Pnt2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfIntegerPnt2d self)"""
        return _MAT2d.MAT2d_DataMapOfIntegerPnt2d__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfIntegerPnt2d.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Assign, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Set, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ReSize, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Clear, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_IsBound, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_UnBind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find1, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind1, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d__kill_pointed, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d_swigregister = _MAT2d.MAT2d_DataMapOfIntegerPnt2d_swigregister
MAT2d_DataMapOfIntegerPnt2d_swigregister(MAT2d_DataMapOfIntegerPnt2d)

class MAT2d_DataMapOfIntegerSequenceOfConnexion(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerSequenceOfConnexion(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerSequenceOfConnexion &
        :rtype: MAT2d_DataMapOfIntegerSequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerSequenceOfConnexion &
        :rtype: MAT2d_DataMapOfIntegerSequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: MAT2d_SequenceOfConnexion &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfIntegerSequenceOfConnexion self)"""
        return _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfIntegerSequenceOfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Assign, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Set, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ReSize, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Clear, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_IsBound, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_UnBind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find1, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind1, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion__kill_pointed, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister = _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister
MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister(MAT2d_DataMapOfIntegerSequenceOfConnexion)

class MAT2d_DataMapOfIntegerVec2d(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT2d.MAT2d_DataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerVec2d(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerVec2d &
        :rtype: MAT2d_DataMapOfIntegerVec2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_DataMapOfIntegerVec2d &
        :rtype: MAT2d_DataMapOfIntegerVec2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Vec2d
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Vec2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Vec2d

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_DataMapOfIntegerVec2d self)"""
        return _MAT2d.MAT2d_DataMapOfIntegerVec2d__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_DataMapOfIntegerVec2d.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Assign, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Set, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ReSize, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Clear, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Bind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_IsBound, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_UnBind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Find, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Find1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Find1, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ChangeFind1 = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind1, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d__kill_pointed, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d_swigregister = _MAT2d.MAT2d_DataMapOfIntegerVec2d_swigregister
MAT2d_DataMapOfIntegerVec2d_swigregister(MAT2d_DataMapOfIntegerVec2d)

class MAT2d_MapBiIntHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param Key1:
        :type Key1: MAT2d_BiInt &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param Key1:
        :type Key1: MAT2d_BiInt &
        :param Key2:
        :type Key2: MAT2d_BiInt &
        :rtype: bool

        """
        return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _MAT2d.MAT2d_MapBiIntHasher_swiginit(self, _MAT2d.new_MAT2d_MapBiIntHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_MapBiIntHasher._kill_pointed = new_instancemethod(_MAT2d.MAT2d_MapBiIntHasher__kill_pointed, None, MAT2d_MapBiIntHasher)
MAT2d_MapBiIntHasher_swigregister = _MAT2d.MAT2d_MapBiIntHasher_swigregister
MAT2d_MapBiIntHasher_swigregister(MAT2d_MapBiIntHasher)

def MAT2d_MapBiIntHasher_HashCode(*args):
    """
    :param Key1:
    :type Key1: MAT2d_BiInt &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

def MAT2d_MapBiIntHasher_IsEqual(*args):
    """
    :param Key1:
    :type Key1: MAT2d_BiInt &
    :param Key2:
    :type Key2: MAT2d_BiInt &
    :rtype: bool

    """
    return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

class MAT2d_Mat2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_Mat2d_swiginit(self, _MAT2d.new_MAT2d_Mat2d(*args))

    def CreateMat(self, *args):
        """
        :param aTool:
        :type aTool: MAT2d_Tool2d &
        :rtype: None

        """
        return _MAT2d.MAT2d_Mat2d_CreateMat(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _MAT2d.MAT2d_Mat2d_IsDone(self, *args)


    def Init(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_Mat2d_Init(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _MAT2d.MAT2d_Mat2d_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_Mat2d_Next(self, *args)


    def bisector(self, *args):
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT2d.MAT2d_Mat2d_bisector(self, *args)


    def SemiInfinite(self, *args):
        """
        :rtype: bool

        """
        return _MAT2d.MAT2d_Mat2d_SemiInfinite(self, *args)


    def NumberOfBisectors(self, *args):
        """
        :rtype: int

        """
        return _MAT2d.MAT2d_Mat2d_NumberOfBisectors(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_Mat2d.CreateMat = new_instancemethod(_MAT2d.MAT2d_Mat2d_CreateMat, None, MAT2d_Mat2d)
MAT2d_Mat2d.IsDone = new_instancemethod(_MAT2d.MAT2d_Mat2d_IsDone, None, MAT2d_Mat2d)
MAT2d_Mat2d.Init = new_instancemethod(_MAT2d.MAT2d_Mat2d_Init, None, MAT2d_Mat2d)
MAT2d_Mat2d.More = new_instancemethod(_MAT2d.MAT2d_Mat2d_More, None, MAT2d_Mat2d)
MAT2d_Mat2d.Next = new_instancemethod(_MAT2d.MAT2d_Mat2d_Next, None, MAT2d_Mat2d)
MAT2d_Mat2d.bisector = new_instancemethod(_MAT2d.MAT2d_Mat2d_bisector, None, MAT2d_Mat2d)
MAT2d_Mat2d.SemiInfinite = new_instancemethod(_MAT2d.MAT2d_Mat2d_SemiInfinite, None, MAT2d_Mat2d)
MAT2d_Mat2d.NumberOfBisectors = new_instancemethod(_MAT2d.MAT2d_Mat2d_NumberOfBisectors, None, MAT2d_Mat2d)
MAT2d_Mat2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_Mat2d__kill_pointed, None, MAT2d_Mat2d)
MAT2d_Mat2d_swigregister = _MAT2d.MAT2d_Mat2d_swigregister
MAT2d_Mat2d_swigregister(MAT2d_Mat2d)

class MAT2d_MiniPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_MiniPath_swiginit(self, _MAT2d.new_MAT2d_MiniPath(*args))

    def Perform(self, *args):
        """
        * Computes the path to link the lines in <Figure>. the path starts on the line of index <IndStart> <Sense> = True if the Circuit turns in the trigonometric sense.

        :param Figure:
        :type Figure: MAT2d_SequenceOfSequenceOfGeometry &
        :param IndStart:
        :type IndStart: int
        :param Sense:
        :type Sense: bool
        :rtype: None

        """
        return _MAT2d.MAT2d_MiniPath_Perform(self, *args)


    def RunOnConnexions(self, *args):
        """
        * Run on the set of connexions to compute the path. the path is an exploration of the tree which contains the connexions and their reverses. if the tree of connexions is  A  / B E  / \ C D F  the path is A->B, B->C, C->B, B->D, D->B, B->A, A->E, E->F, F->E, E->A.

        :rtype: None

        """
        return _MAT2d.MAT2d_MiniPath_RunOnConnexions(self, *args)


    def Path(self, *args):
        """
        * Returns the sequence of connexions corresponding to the path.

        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_MiniPath_Path(self, *args)


    def IsConnexionsFrom(self, *args):
        """
        * Returns <True> if there is one Connexion which starts on line designed by <Index>.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _MAT2d.MAT2d_MiniPath_IsConnexionsFrom(self, *args)


    def ConnexionsFrom(self, *args):
        """
        * Returns the connexions which start on line designed by <Index>.

        :param Index:
        :type Index: int
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_MiniPath_ConnexionsFrom(self, *args)


    def IsRoot(self, *args):
        """
        * Returns <True> if the line designed by <Index> is the root.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _MAT2d.MAT2d_MiniPath_IsRoot(self, *args)


    def Father(self, *args):
        """
        * Returns the connexion which ends on line designed by <Index>.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_MiniPath_Father(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_MiniPath.Perform = new_instancemethod(_MAT2d.MAT2d_MiniPath_Perform, None, MAT2d_MiniPath)
MAT2d_MiniPath.RunOnConnexions = new_instancemethod(_MAT2d.MAT2d_MiniPath_RunOnConnexions, None, MAT2d_MiniPath)
MAT2d_MiniPath.Path = new_instancemethod(_MAT2d.MAT2d_MiniPath_Path, None, MAT2d_MiniPath)
MAT2d_MiniPath.IsConnexionsFrom = new_instancemethod(_MAT2d.MAT2d_MiniPath_IsConnexionsFrom, None, MAT2d_MiniPath)
MAT2d_MiniPath.ConnexionsFrom = new_instancemethod(_MAT2d.MAT2d_MiniPath_ConnexionsFrom, None, MAT2d_MiniPath)
MAT2d_MiniPath.IsRoot = new_instancemethod(_MAT2d.MAT2d_MiniPath_IsRoot, None, MAT2d_MiniPath)
MAT2d_MiniPath.Father = new_instancemethod(_MAT2d.MAT2d_MiniPath_Father, None, MAT2d_MiniPath)
MAT2d_MiniPath._kill_pointed = new_instancemethod(_MAT2d.MAT2d_MiniPath__kill_pointed, None, MAT2d_MiniPath)
MAT2d_MiniPath_swigregister = _MAT2d.MAT2d_MiniPath_swigregister
MAT2d_MiniPath_swigregister(MAT2d_MiniPath)

class MAT2d_SequenceNodeOfSequenceOfConnexion(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_MAT2d_Connexion &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_SequenceNodeOfSequenceOfConnexion(*args))

    def Value(self, *args):
        """
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_SequenceNodeOfSequenceOfConnexion self)"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_SequenceNodeOfSequenceOfConnexion self) -> Handle_MAT2d_SequenceNodeOfSequenceOfConnexion"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceNodeOfSequenceOfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_Value, None, MAT2d_SequenceNodeOfSequenceOfConnexion)
MAT2d_SequenceNodeOfSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion__kill_pointed, None, MAT2d_SequenceNodeOfSequenceOfConnexion)
MAT2d_SequenceNodeOfSequenceOfConnexion.GetHandle = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_GetHandle, None, MAT2d_SequenceNodeOfSequenceOfConnexion)
MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister = _MAT2d.MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister
MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister(MAT2d_SequenceNodeOfSequenceOfConnexion)

class Handle_MAT2d_SequenceNodeOfSequenceOfConnexion(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_swiginit(self, _MAT2d.new_Handle_MAT2d_SequenceNodeOfSequenceOfConnexion(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_SequenceNodeOfSequenceOfConnexion.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_Nullify, None, Handle_MAT2d_SequenceNodeOfSequenceOfConnexion)
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_IsNull, None, Handle_MAT2d_SequenceNodeOfSequenceOfConnexion)
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_GetObject, None, Handle_MAT2d_SequenceNodeOfSequenceOfConnexion)
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion__kill_pointed, None, Handle_MAT2d_SequenceNodeOfSequenceOfConnexion)
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_swigregister(Handle_MAT2d_SequenceNodeOfSequenceOfConnexion)

def Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_DownCast(AnObject)
Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_DownCast = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfConnexion_DownCast

class MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TColGeom2d_SequenceOfCurve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swiginit(self, _MAT2d.new_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve(*args))

    def Value(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve self)"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve self) -> Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve.Value = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_Value, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve__kill_pointed, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve.GetHandle = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_GetHandle, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister = _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister
MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister(MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)

class Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swiginit(self, _MAT2d.new_Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_Nullify, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_IsNull, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_GetObject, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve__kill_pointed, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_swigregister(Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve)

def Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_DownCast(AnObject)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_DownCast = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfCurve_DownCast

class MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TColGeom2d_SequenceOfGeometry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swiginit(self, _MAT2d.new_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry(*args))

    def Value(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry self)"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry self) -> Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry"""
        return _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry.Value = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_Value, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry__kill_pointed, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry.GetHandle = new_instancemethod(_MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_GetHandle, None, MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister = _MAT2d.MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister
MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister(MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)

class Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swiginit(self, _MAT2d.new_Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry(*args))
    DownCast = staticmethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry.Nullify = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_Nullify, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry.IsNull = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_IsNull, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry.GetObject = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_GetObject, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry._kill_pointed = new_instancemethod(_MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry__kill_pointed, None, Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_swigregister(Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry)

def Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_DownCast(AnObject):
    return _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_DownCast(AnObject)
Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_DownCast = _MAT2d.Handle_MAT2d_SequenceNodeOfSequenceOfSequenceOfGeometry_DownCast

class MAT2d_SequenceOfConnexion(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_SequenceOfConnexion(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfConnexion &
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfConnexion &
        :rtype: MAT2d_SequenceOfConnexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_MAT2d_Connexion &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_MAT2d_Connexion &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT2d_Connexion &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT2d_Connexion &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MAT2d_SequenceOfConnexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_MAT2d_Connexion &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT2d_Connexion

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfConnexion_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceOfConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Clear, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Assign, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Set, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Append, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Prepend, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_InsertBefore, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_InsertAfter, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_First, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Last, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Split, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Value, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_SetValue, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_ChangeValue, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Remove, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion__kill_pointed, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion_swigregister = _MAT2d.MAT2d_SequenceOfConnexion_swigregister
MAT2d_SequenceOfConnexion_swigregister(MAT2d_SequenceOfConnexion)

class MAT2d_SequenceOfSequenceOfCurve(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceOfSequenceOfCurve_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfCurve(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: MAT2d_SequenceOfSequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: MAT2d_SequenceOfSequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: TColGeom2d_SequenceOfCurve &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: TColGeom2d_SequenceOfCurve &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColGeom2d_SequenceOfCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColGeom2d_SequenceOfCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MAT2d_SequenceOfSequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceOfSequenceOfCurve.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Clear, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Assign, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Set, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Append, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Prepend, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertBefore, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertAfter, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_First, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Last, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Split, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Value, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_SetValue, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeValue, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Remove, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve__kill_pointed, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve_swigregister = _MAT2d.MAT2d_SequenceOfSequenceOfCurve_swigregister
MAT2d_SequenceOfSequenceOfCurve_swigregister(MAT2d_SequenceOfSequenceOfCurve)

class MAT2d_SequenceOfSequenceOfGeometry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfGeometry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: MAT2d_SequenceOfSequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: MAT2d_SequenceOfSequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        :param S:
        :type S: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MAT2d_SequenceOfSequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_SequenceOfSequenceOfGeometry.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Clear, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Assign, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Set, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Append, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Prepend, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertBefore, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertAfter, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_First, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Last, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Split, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Value, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_SetValue, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeValue, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Remove, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry._kill_pointed = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry__kill_pointed, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry_swigregister = _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swigregister
MAT2d_SequenceOfSequenceOfGeometry_swigregister(MAT2d_SequenceOfSequenceOfGeometry)

class MAT2d_Tool2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty Constructor.

        :rtype: None

        """
        _MAT2d.MAT2d_Tool2d_swiginit(self, _MAT2d.new_MAT2d_Tool2d(*args))

    def Sense(self, *args):
        """
        * //!<aSide> defines the side of the computation of the map.

        :param aside:
        :type aside: MAT_Side
        :rtype: None

        """
        return _MAT2d.MAT2d_Tool2d_Sense(self, *args)


    def InitItems(self, *args):
        """
        * InitItems cuts the line in Items.  this Items are the geometrics representations of  the BasicElts from MAT.

        :param aCircuit:
        :type aCircuit: Handle_MAT2d_Circuit &
        :rtype: None

        """
        return _MAT2d.MAT2d_Tool2d_InitItems(self, *args)


    def NumberOfItems(self, *args):
        """
        * Returns the Number of Items .

        :rtype: int

        """
        return _MAT2d.MAT2d_Tool2d_NumberOfItems(self, *args)


    def ToleranceOfConfusion(self, *args):
        """
        * Returns tolerance to test the confusion of two points.

        :rtype: float

        """
        return _MAT2d.MAT2d_Tool2d_ToleranceOfConfusion(self, *args)


    def FirstPoint(self, *args):
        """
        * Creates the point at the origin of the bisector between  anitem and the previous item.  dist is the distance from the FirstPoint to <anitem>.  Returns the index of this point in <theGeomPnts>.

        :param anitem:
        :type anitem: int
        :param dist:
        :type dist: float &
        :rtype: int

        """
        return _MAT2d.MAT2d_Tool2d_FirstPoint(self, *args)


    def TangentBefore(self, *args):
        """
        * Creates the Tangent at the end of the Item defined  by <anitem>. Returns the index of this vector in  <theGeomVecs>

        :param anitem:
        :type anitem: int
        :rtype: int

        """
        return _MAT2d.MAT2d_Tool2d_TangentBefore(self, *args)


    def TangentAfter(self, *args):
        """
        * Creates the Reversed Tangent at the origin of the Item  defined by <anitem>. Returns the index of this vector in  <theGeomVecs>

        :param anitem:
        :type anitem: int
        :rtype: int

        """
        return _MAT2d.MAT2d_Tool2d_TangentAfter(self, *args)


    def Tangent(self, *args):
        """
        * Creates the Tangent at the end of the bisector defined  by <bisector>. Returns the index of this vector in  <theGeomVecs>

        :param bisector:
        :type bisector: int
        :rtype: int

        """
        return _MAT2d.MAT2d_Tool2d_Tangent(self, *args)


    def CreateBisector(self, *args):
        """
        * Creates the geometric bisector defined by <abisector>.

        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT2d.MAT2d_Tool2d_CreateBisector(self, *args)


    def TrimBisector(self, *args):
        """
        * Trims the geometric bisector by the <firstparameter>  of <abisector>.  If the parameter is out of the bisector, Return False.  else Return True.

        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :rtype: bool

        * Trims the geometric bisector by the point of index  <apoint> in <theGeomPnts>.  If the point is out of the bisector, Return False.  else Return True.

        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :param apoint:
        :type apoint: int
        :rtype: bool

        """
        return _MAT2d.MAT2d_Tool2d_TrimBisector(self, *args)


    def IntersectBisector(self, *args):
        """
        * Computes the point of intersection between the bisectors defined by <bisectorone> and <bisectortwo> . If this point exists, <intpnt> is its index in <theGeomPnts> and Return the distance of the point from the bisector else Return <RealLast>.

        :param bisectorone:
        :type bisectorone: Handle_MAT_Bisector &
        :param bisectortwo:
        :type bisectortwo: Handle_MAT_Bisector &
        :param intpnt:
        :type intpnt: int &
        :rtype: float

        """
        return _MAT2d.MAT2d_Tool2d_IntersectBisector(self, *args)


    def Distance(self, *args):
        """
        * Returns the distance between the two points designed by their parameters on <abisector>.

        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :param param1:
        :type param1: float
        :param param2:
        :type param2: float
        :rtype: float

        """
        return _MAT2d.MAT2d_Tool2d_Distance(self, *args)


    def Dump(self, *args):
        """
        * displays informations about the bisector defined by  <bisector>.

        :param bisector:
        :type bisector: int
        :param erease:
        :type erease: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Tool2d_Dump(self, *args)


    def GeomBis(self, *args):
        """
        * Returns the <Bisec> of index <Index> in  <theGeomBisectors>.

        :param Index:
        :type Index: int
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_Tool2d_GeomBis(self, *args)


    def GeomElt(self, *args):
        """
        * Returns the Geometry of index <Index> in <theGeomElts>.

        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Geometry

        """
        return _MAT2d.MAT2d_Tool2d_GeomElt(self, *args)


    def GeomPnt(self, *args):
        """
        * Returns the point of index <Index> in the <theGeomPnts>.

        :param Index:
        :type Index: int
        :rtype: gp_Pnt2d

        """
        return _MAT2d.MAT2d_Tool2d_GeomPnt(self, *args)


    def GeomVec(self, *args):
        """
        * Returns the vector of index <Index> in the  <theGeomVecs>.

        :param Index:
        :type Index: int
        :rtype: gp_Vec2d

        """
        return _MAT2d.MAT2d_Tool2d_GeomVec(self, *args)


    def Circuit(self, *args):
        """
        * 

        :rtype: Handle_MAT2d_Circuit

        """
        return _MAT2d.MAT2d_Tool2d_Circuit(self, *args)


    def BisecFusion(self, *args):
        """
        :param Index1:
        :type Index1: int
        :param Index2:
        :type Index2: int
        :rtype: None

        """
        return _MAT2d.MAT2d_Tool2d_BisecFusion(self, *args)


    def ChangeGeomBis(self, *args):
        """
        * Returns the <Bisec> of index <Index> in  <theGeomBisectors>.

        :param Index:
        :type Index: int
        :rtype: Bisector_Bisec

        """
        return _MAT2d.MAT2d_Tool2d_ChangeGeomBis(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MAT2d_Tool2d.Sense = new_instancemethod(_MAT2d.MAT2d_Tool2d_Sense, None, MAT2d_Tool2d)
MAT2d_Tool2d.InitItems = new_instancemethod(_MAT2d.MAT2d_Tool2d_InitItems, None, MAT2d_Tool2d)
MAT2d_Tool2d.NumberOfItems = new_instancemethod(_MAT2d.MAT2d_Tool2d_NumberOfItems, None, MAT2d_Tool2d)
MAT2d_Tool2d.ToleranceOfConfusion = new_instancemethod(_MAT2d.MAT2d_Tool2d_ToleranceOfConfusion, None, MAT2d_Tool2d)
MAT2d_Tool2d.FirstPoint = new_instancemethod(_MAT2d.MAT2d_Tool2d_FirstPoint, None, MAT2d_Tool2d)
MAT2d_Tool2d.TangentBefore = new_instancemethod(_MAT2d.MAT2d_Tool2d_TangentBefore, None, MAT2d_Tool2d)
MAT2d_Tool2d.TangentAfter = new_instancemethod(_MAT2d.MAT2d_Tool2d_TangentAfter, None, MAT2d_Tool2d)
MAT2d_Tool2d.Tangent = new_instancemethod(_MAT2d.MAT2d_Tool2d_Tangent, None, MAT2d_Tool2d)
MAT2d_Tool2d.CreateBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_CreateBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d.TrimBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_TrimBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d.IntersectBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_IntersectBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d.Distance = new_instancemethod(_MAT2d.MAT2d_Tool2d_Distance, None, MAT2d_Tool2d)
MAT2d_Tool2d.Dump = new_instancemethod(_MAT2d.MAT2d_Tool2d_Dump, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomBis = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomBis, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomElt = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomElt, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomPnt = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomPnt, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomVec = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomVec, None, MAT2d_Tool2d)
MAT2d_Tool2d.Circuit = new_instancemethod(_MAT2d.MAT2d_Tool2d_Circuit, None, MAT2d_Tool2d)
MAT2d_Tool2d.BisecFusion = new_instancemethod(_MAT2d.MAT2d_Tool2d_BisecFusion, None, MAT2d_Tool2d)
MAT2d_Tool2d.ChangeGeomBis = new_instancemethod(_MAT2d.MAT2d_Tool2d_ChangeGeomBis, None, MAT2d_Tool2d)
MAT2d_Tool2d._kill_pointed = new_instancemethod(_MAT2d.MAT2d_Tool2d__kill_pointed, None, MAT2d_Tool2d)
MAT2d_Tool2d_swigregister = _MAT2d.MAT2d_Tool2d_swigregister
MAT2d_Tool2d_swigregister(MAT2d_Tool2d)



