# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _Standard.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Standard', [dirname(__file__)])
        except ImportError:
            import _Standard
            return _Standard
        if fp is not None:
            try:
                _mod = imp.load_module('_Standard', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Standard = swig_import_helper()
    del swig_import_helper
else:
    import _Standard
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Standard.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_Standard.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Standard.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Standard.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Standard.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Standard.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Standard.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Standard.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Standard.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Standard.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Standard.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Standard.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Standard.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Standard.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Standard.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Standard.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Standard.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _Standard.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

Standard_HandlerVoid = _Standard.Standard_HandlerVoid
Standard_HandlerJumped = _Standard.Standard_HandlerJumped
Standard_HandlerProcessed = _Standard.Standard_HandlerProcessed
Standard_Void = _Standard.Standard_Void
Standard_Char = _Standard.Standard_Char
Standard_ExtChar = _Standard.Standard_ExtChar
Standard_LongInt = _Standard.Standard_LongInt
Standard_Bool = _Standard.Standard_Bool
Standard_Float = _Standard.Standard_Float
Standard_LongDouble = _Standard.Standard_LongDouble
Standard_String = _Standard.Standard_String
Standard_EString = _Standard.Standard_EString
Standard_EntryAddress = _Standard.Standard_EntryAddress
Standard_DataAddress = _Standard.Standard_DataAddress
Standard_EngineHandle = _Standard.Standard_EngineHandle
Standard_Long64 = _Standard.Standard_Long64
Standard_Array = _Standard.Standard_Array
Standard_IsUnKnown = _Standard.Standard_IsUnKnown
Standard_IsClass = _Standard.Standard_IsClass
Standard_IsEnumeration = _Standard.Standard_IsEnumeration
Standard_IsPrimitive = _Standard.Standard_IsPrimitive
Standard_IsImported = _Standard.Standard_IsImported
Standard_IsPackage = _Standard.Standard_IsPackage
Standard_IsNothing = _Standard.Standard_IsNothing
Standard_IsAddress = _Standard.Standard_IsAddress
Standard_IsTransient = _Standard.Standard_IsTransient
Standard_IsPersistent = _Standard.Standard_IsPersistent
Standard_IsNotLoaded = _Standard.Standard_IsNotLoaded
class standard(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Allocate(*args):
        """
        * Allocates memory blocks aSize - bytes to allocate

        :param aSize:
        :type aSize: Standard_Size
        :rtype: Standard_Address

        """
        return _Standard.standard_Allocate(*args)

    Allocate = staticmethod(Allocate)
    def Reallocate(*args):
        """
        * Reallocates memory blocks aStorage - previously allocated memory block aNewSize - new size in bytes

        :param aStorage:
        :type aStorage: Standard_Address
        :param aNewSize:
        :type aNewSize: Standard_Size
        :rtype: Standard_Address

        """
        return _Standard.standard_Reallocate(*args)

    Reallocate = staticmethod(Reallocate)
    def Purge(*args):
        """
        * Deallocates the storage retained on the free list and clears the list. Returns non-zero if some memory has been actually freed.

        :rtype: int

        """
        return _Standard.standard_Purge(*args)

    Purge = staticmethod(Purge)
    def __init__(self): 
        _Standard.standard_swiginit(self,_Standard.new_standard())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


standard._kill_pointed = new_instancemethod(_Standard.standard__kill_pointed,None,standard)
standard_swigregister = _Standard.standard_swigregister
standard_swigregister(standard)

def standard_Allocate(*args):
  """
    * Allocates memory blocks aSize - bytes to allocate

    :param aSize:
    :type aSize: Standard_Size
    :rtype: Standard_Address

    """
  return _Standard.standard_Allocate(*args)

def standard_Reallocate(*args):
  """
    * Reallocates memory blocks aStorage - previously allocated memory block aNewSize - new size in bytes

    :param aStorage:
    :type aStorage: Standard_Address
    :param aNewSize:
    :type aNewSize: Standard_Size
    :rtype: Standard_Address

    """
  return _Standard.standard_Reallocate(*args)

def standard_Purge(*args):
  """
    * Deallocates the storage retained on the free list and clears the list. Returns non-zero if some memory has been actually freed.

    :rtype: int

    """
  return _Standard.standard_Purge(*args)

class Standard_ErrorHandler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Create a ErrorHandler (to be used with try{}catch(){}). It uses the 'setjmp' and 'longjmp' routines.

        :rtype: None

        """
        _Standard.Standard_ErrorHandler_swiginit(self,_Standard.new_Standard_ErrorHandler(*args))
    def Destroy(self, *args):
        """
        * Unlinks and checks if there is a raised exception.

        :rtype: None

        """
        return _Standard.Standard_ErrorHandler_Destroy(self, *args)

    def Unlink(self, *args):
        """
        * Removes handler from the handlers list

        :rtype: None

        """
        return _Standard.Standard_ErrorHandler_Unlink(self, *args)

    def Catches(self, *args):
        """
        * Returns 'True' if the caught exception has the same type or inherits from 'aType'

        :param aType:
        :type aType: Handle_Standard_Type &
        :rtype: bool

        """
        return _Standard.Standard_ErrorHandler_Catches(self, *args)

    def Label(self, *args):
        """
        * Returns label for jump

        :rtype: Standard_JmpBuf

        """
        return _Standard.Standard_ErrorHandler_Label(self, *args)

    def Error(self, *args):
        """
        * Returns the current Error.

        :rtype: Handle_Standard_Failure

        """
        return _Standard.Standard_ErrorHandler_Error(self, *args)

    def LastCaughtError(*args):
        """
        * Returns the caught exception.

        :rtype: Handle_Standard_Failure

        """
        return _Standard.Standard_ErrorHandler_LastCaughtError(*args)

    LastCaughtError = staticmethod(LastCaughtError)
    def IsInTryBlock(*args):
        """
        * Test if the code is currently running in a try block

        :rtype: bool

        """
        return _Standard.Standard_ErrorHandler_IsInTryBlock(*args)

    IsInTryBlock = staticmethod(IsInTryBlock)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_ErrorHandler.Destroy = new_instancemethod(_Standard.Standard_ErrorHandler_Destroy,None,Standard_ErrorHandler)
Standard_ErrorHandler.Unlink = new_instancemethod(_Standard.Standard_ErrorHandler_Unlink,None,Standard_ErrorHandler)
Standard_ErrorHandler.Catches = new_instancemethod(_Standard.Standard_ErrorHandler_Catches,None,Standard_ErrorHandler)
Standard_ErrorHandler.Label = new_instancemethod(_Standard.Standard_ErrorHandler_Label,None,Standard_ErrorHandler)
Standard_ErrorHandler.Error = new_instancemethod(_Standard.Standard_ErrorHandler_Error,None,Standard_ErrorHandler)
Standard_ErrorHandler._kill_pointed = new_instancemethod(_Standard.Standard_ErrorHandler__kill_pointed,None,Standard_ErrorHandler)
Standard_ErrorHandler_swigregister = _Standard.Standard_ErrorHandler_swigregister
Standard_ErrorHandler_swigregister(Standard_ErrorHandler)

def Standard_ErrorHandler_LastCaughtError(*args):
  """
    * Returns the caught exception.

    :rtype: Handle_Standard_Failure

    """
  return _Standard.Standard_ErrorHandler_LastCaughtError(*args)

def Standard_ErrorHandler_IsInTryBlock(*args):
  """
    * Test if the code is currently running in a try block

    :rtype: bool

    """
  return _Standard.Standard_ErrorHandler_IsInTryBlock(*args)

class Standard_ErrorHandlerCallback(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def RegisterCallback(self, *args):
        """
        * Registers this callback object in the current error handler (if found).

        :rtype: None

        """
        return _Standard.Standard_ErrorHandlerCallback_RegisterCallback(self, *args)

    def UnregisterCallback(self, *args):
        """
        * Unregisters this callback object from the error handler.

        :rtype: None

        """
        return _Standard.Standard_ErrorHandlerCallback_UnregisterCallback(self, *args)

    def DestroyCallback(self, *args):
        """
        * The callback function to perform necessary callback action. Called by the exception handler when it is being destroyed but still has this callback registered.

        :rtype: void

        """
        return _Standard.Standard_ErrorHandlerCallback_DestroyCallback(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_ErrorHandlerCallback.RegisterCallback = new_instancemethod(_Standard.Standard_ErrorHandlerCallback_RegisterCallback,None,Standard_ErrorHandlerCallback)
Standard_ErrorHandlerCallback.UnregisterCallback = new_instancemethod(_Standard.Standard_ErrorHandlerCallback_UnregisterCallback,None,Standard_ErrorHandlerCallback)
Standard_ErrorHandlerCallback.DestroyCallback = new_instancemethod(_Standard.Standard_ErrorHandlerCallback_DestroyCallback,None,Standard_ErrorHandlerCallback)
Standard_ErrorHandlerCallback._kill_pointed = new_instancemethod(_Standard.Standard_ErrorHandlerCallback__kill_pointed,None,Standard_ErrorHandlerCallback)
Standard_ErrorHandlerCallback_swigregister = _Standard.Standard_ErrorHandlerCallback_swigregister
Standard_ErrorHandlerCallback_swigregister(Standard_ErrorHandlerCallback)

class Standard_GUID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        * build a GUID from an ascii string with the following format: Length : 36 char '00000000-0000-0000-0000-000000000000'

        :param aGuid:
        :type aGuid: char *
        :rtype: None

        * build a GUID from an unicode string with the following format:  '00000000-0000-0000-0000-000000000000'

        :param aGuid:
        :type aGuid: Standard_ExtString
        :rtype: None

        :param a32b:
        :type a32b: int
        :param a16b1:
        :type a16b1: Standard_ExtCharacter
        :param a16b2:
        :type a16b2: Standard_ExtCharacter
        :param a16b3:
        :type a16b3: Standard_ExtCharacter
        :param a8b1:
        :type a8b1: Standard_Byte
        :param a8b2:
        :type a8b2: Standard_Byte
        :param a8b3:
        :type a8b3: Standard_Byte
        :param a8b4:
        :type a8b4: Standard_Byte
        :param a8b5:
        :type a8b5: Standard_Byte
        :param a8b6:
        :type a8b6: Standard_Byte
        :rtype: None

        :param aGuid:
        :type aGuid: Standard_UUID &
        :rtype: None

        :param aGuid:
        :type aGuid: Standard_GUID &
        :rtype: None

        """
        _Standard.Standard_GUID_swiginit(self,_Standard.new_Standard_GUID(*args))
    def ToUUID(self, *args):
        """
        :rtype: Standard_UUID

        """
        return _Standard.Standard_GUID_ToUUID(self, *args)

    def ToCString(self, *args):
        """
        * translate the GUID into ascii string the aStrGuid is allocated by user. the guid have the following format:  '00000000-0000-0000-0000-000000000000'

        :param aStrGuid:
        :type aStrGuid: Standard_PCharacter
        :rtype: None

        """
        return _Standard.Standard_GUID_ToCString(self, *args)

    def ToExtString(self, *args):
        """
        * translate the GUID into unicode string the aStrGuid is allocated by user. the guid have the following format:  '00000000-0000-0000-0000-000000000000'

        :param aStrGuid:
        :type aStrGuid: Standard_PExtCharacter
        :rtype: None

        """
        return _Standard.Standard_GUID_ToExtString(self, *args)

    def IsSame(self, *args):
        """
        :param uid:
        :type uid: Standard_GUID &
        :rtype: bool

        """
        return _Standard.Standard_GUID_IsSame(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsNotSame(self, *args):
        """
        :param uid:
        :type uid: Standard_GUID &
        :rtype: bool

        """
        return _Standard.Standard_GUID_IsNotSame(self, *args)

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def Assign(self, *args):
        """
        :param uid:
        :type uid: Standard_GUID &
        :rtype: None

        :param uid:
        :type uid: Standard_UUID &
        :rtype: None

        """
        return _Standard.Standard_GUID_Assign(self, *args)

    def Set(self, *args):
        """
        :param uid:
        :type uid: Standard_GUID &
        :rtype: None

        :param uid:
        :type uid: Standard_UUID &
        :rtype: None

        """
        return _Standard.Standard_GUID_Set(self, *args)

    def ShallowDumpToString(self):
        """ShallowDumpToString(Standard_GUID self) -> std::string"""
        return _Standard.Standard_GUID_ShallowDumpToString(self)

    def CheckGUIDFormat(*args):
        """
        * Check the format of a GUID string. It checks the size, the position of the '-' and the correct size of fields.

        :param aGuid:
        :type aGuid: char *
        :rtype: bool

        """
        return _Standard.Standard_GUID_CheckGUIDFormat(*args)

    CheckGUIDFormat = staticmethod(CheckGUIDFormat)
    def Hash(self, *args):
        """
        * Hash function for GUID.

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Standard.Standard_GUID_Hash(self, *args)

    def HashCode(*args):
        """
        * H method used by collections.

        :param aguid:
        :type aguid: Standard_GUID &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Standard.Standard_GUID_HashCode(*args)

    HashCode = staticmethod(HashCode)
    def IsEqual(*args):
        """
        * Returns True when the two GUID are the same.

        :param string1:
        :type string1: Standard_GUID &
        :param string2:
        :type string2: Standard_GUID &
        :rtype: bool

        """
        return _Standard.Standard_GUID_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)
    def _CSFDB_GetStandard_GUIDmy32b(self, *args):
        """
        :rtype: int

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy32b(self, *args)

    def _CSFDB_SetStandard_GUIDmy32b(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy32b(self, *args)

    def _CSFDB_GetStandard_GUIDmy16b1(self, *args):
        """
        :rtype: Standard_ExtCharacter

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b1(self, *args)

    def _CSFDB_SetStandard_GUIDmy16b1(self, *args):
        """
        :param p:
        :type p: Standard_ExtCharacter
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b1(self, *args)

    def _CSFDB_GetStandard_GUIDmy16b2(self, *args):
        """
        :rtype: Standard_ExtCharacter

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b2(self, *args)

    def _CSFDB_SetStandard_GUIDmy16b2(self, *args):
        """
        :param p:
        :type p: Standard_ExtCharacter
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b2(self, *args)

    def _CSFDB_GetStandard_GUIDmy16b3(self, *args):
        """
        :rtype: Standard_ExtCharacter

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b3(self, *args)

    def _CSFDB_SetStandard_GUIDmy16b3(self, *args):
        """
        :param p:
        :type p: Standard_ExtCharacter
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b3(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b1(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b1(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b1(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b1(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b2(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b2(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b2(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b2(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b3(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b3(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b3(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b3(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b4(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b4(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b4(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b4(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b5(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b5(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b5(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b5(self, *args)

    def _CSFDB_GetStandard_GUIDmy8b6(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b6(self, *args)

    def _CSFDB_SetStandard_GUIDmy8b6(self, *args):
        """
        :param p:
        :type p: Standard_Byte
        :rtype: None

        """
        return _Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b6(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Standard_GUID self)"""
        return _Standard.Standard_GUID__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_GUID.ToUUID = new_instancemethod(_Standard.Standard_GUID_ToUUID,None,Standard_GUID)
Standard_GUID.ToCString = new_instancemethod(_Standard.Standard_GUID_ToCString,None,Standard_GUID)
Standard_GUID.ToExtString = new_instancemethod(_Standard.Standard_GUID_ToExtString,None,Standard_GUID)
Standard_GUID.IsSame = new_instancemethod(_Standard.Standard_GUID_IsSame,None,Standard_GUID)
Standard_GUID.__eq_wrapper__ = new_instancemethod(_Standard.Standard_GUID___eq_wrapper__,None,Standard_GUID)
Standard_GUID.IsNotSame = new_instancemethod(_Standard.Standard_GUID_IsNotSame,None,Standard_GUID)
Standard_GUID.__ne_wrapper__ = new_instancemethod(_Standard.Standard_GUID___ne_wrapper__,None,Standard_GUID)
Standard_GUID.Assign = new_instancemethod(_Standard.Standard_GUID_Assign,None,Standard_GUID)
Standard_GUID.Set = new_instancemethod(_Standard.Standard_GUID_Set,None,Standard_GUID)
Standard_GUID.ShallowDumpToString = new_instancemethod(_Standard.Standard_GUID_ShallowDumpToString,None,Standard_GUID)
Standard_GUID.Hash = new_instancemethod(_Standard.Standard_GUID_Hash,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy32b = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy32b,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy32b = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy32b,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy16b1 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b1,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy16b1 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b1,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy16b2 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b2,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy16b2 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b2,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy16b3 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy16b3,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy16b3 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy16b3,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b1 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b1,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b1 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b1,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b2 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b2,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b2 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b2,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b3 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b3,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b3 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b3,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b4 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b4,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b4 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b4,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b5 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b5,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b5 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b5,None,Standard_GUID)
Standard_GUID._CSFDB_GetStandard_GUIDmy8b6 = new_instancemethod(_Standard.Standard_GUID__CSFDB_GetStandard_GUIDmy8b6,None,Standard_GUID)
Standard_GUID._CSFDB_SetStandard_GUIDmy8b6 = new_instancemethod(_Standard.Standard_GUID__CSFDB_SetStandard_GUIDmy8b6,None,Standard_GUID)
Standard_GUID._kill_pointed = new_instancemethod(_Standard.Standard_GUID__kill_pointed,None,Standard_GUID)
Standard_GUID_swigregister = _Standard.Standard_GUID_swigregister
Standard_GUID_swigregister(Standard_GUID)

def Standard_GUID_CheckGUIDFormat(*args):
  """
    * Check the format of a GUID string. It checks the size, the position of the '-' and the correct size of fields.

    :param aGuid:
    :type aGuid: char *
    :rtype: bool

    """
  return _Standard.Standard_GUID_CheckGUIDFormat(*args)

def Standard_GUID_HashCode(*args):
  """
    * H method used by collections.

    :param aguid:
    :type aguid: Standard_GUID &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
  return _Standard.Standard_GUID_HashCode(*args)

def Standard_GUID_IsEqual(*args):
  """
    * Returns True when the two GUID are the same.

    :param string1:
    :type string1: Standard_GUID &
    :param string2:
    :type string2: Standard_GUID &
    :rtype: bool

    """
  return _Standard.Standard_GUID_IsEqual(*args)

class Standard_MMgrRoot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Allocate(self, *args):
        """
        * Allocate specified number of bytes. The actually allocated space should be rounded up to double word size (4 bytes), as this is expected by implementation of some classes in OCC (e.g. TCollection_AsciiString)

        :param theSize:
        :type theSize: Standard_Size
        :rtype: Standard_Address

        """
        return _Standard.Standard_MMgrRoot_Allocate(self, *args)

    def Reallocate(self, *args):
        """
        * Reallocate previously allocated memory to contain at least theSize bytes. In case of success, new pointer is returned.

        :param thePtr:
        :type thePtr: Standard_Address
        :param theSize:
        :type theSize: Standard_Size
        :rtype: Standard_Address

        """
        return _Standard.Standard_MMgrRoot_Reallocate(self, *args)

    def Free(self, *args):
        """
        * Frees previously allocated memory at specified address.

        :param thePtr:
        :type thePtr: Standard_Address
        :rtype: void

        """
        return _Standard.Standard_MMgrRoot_Free(self, *args)

    def Purge(self, *args):
        """
        * Purge internally cached unused memory blocks (if any) by releasing them to the operating system. Must return non-zero if some memory has been actually released, or zero otherwise. If option isDestroyed is True, this means that memory manager is not expected to be used any more; note however that in general case it is still possible to have calls to that instance of memory manager after this (e.g. to free memory of static objects in OCC). Thus this option should command the memory manager to release any cached memory to the system and not cache any more, but still remain operable... //! Default implementation does nothing and returns 0.

        :param isDestroyed: default value is Standard_False
        :type isDestroyed: bool
        :rtype: int

        """
        return _Standard.Standard_MMgrRoot_Purge(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_MMgrRoot.Allocate = new_instancemethod(_Standard.Standard_MMgrRoot_Allocate,None,Standard_MMgrRoot)
Standard_MMgrRoot.Reallocate = new_instancemethod(_Standard.Standard_MMgrRoot_Reallocate,None,Standard_MMgrRoot)
Standard_MMgrRoot.Free = new_instancemethod(_Standard.Standard_MMgrRoot_Free,None,Standard_MMgrRoot)
Standard_MMgrRoot.Purge = new_instancemethod(_Standard.Standard_MMgrRoot_Purge,None,Standard_MMgrRoot)
Standard_MMgrRoot._kill_pointed = new_instancemethod(_Standard.Standard_MMgrRoot__kill_pointed,None,Standard_MMgrRoot)
Standard_MMgrRoot_swigregister = _Standard.Standard_MMgrRoot_swigregister
Standard_MMgrRoot_swigregister(Standard_MMgrRoot)

class Standard_Storable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Delete(self, *args):
        """
        :rtype: void

        """
        return _Standard.Standard_Storable_Delete(self, *args)

    def HashCode(self, *args):
        """
        * Returns a hashed value denoting <self>. This value is in  the range 1..<Upper>.

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Standard.Standard_Storable_HashCode(self, *args)

    def IsEqual(self, *args):
        """
        * Returns true if the direct contents of <self> and  <Other> are memberwise equal.

        :param Other:
        :type Other: Standard_Storable &
        :rtype: bool

        """
        return _Standard.Standard_Storable_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsSimilar(self, *args):
        """
        * Returns true if the Deep contents of <self> and  <Other> are memberwise equal.

        :param Other:
        :type Other: Standard_Storable &
        :rtype: bool

        """
        return _Standard.Standard_Storable_IsSimilar(self, *args)

    def ShallowDumpToString(self):
        """ShallowDumpToString(Standard_Storable self) -> std::string"""
        return _Standard.Standard_Storable_ShallowDumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(Standard_Storable self)"""
        return _Standard.Standard_Storable__kill_pointed(self)

    def __init__(self): 
        """__init__(Standard_Storable self) -> Standard_Storable"""
        _Standard.Standard_Storable_swiginit(self,_Standard.new_Standard_Storable())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_Storable.Delete = new_instancemethod(_Standard.Standard_Storable_Delete,None,Standard_Storable)
Standard_Storable.HashCode = new_instancemethod(_Standard.Standard_Storable_HashCode,None,Standard_Storable)
Standard_Storable.__hash__ = new_instancemethod(_Standard.Standard_Storable___hash__,None,Standard_Storable)
Standard_Storable.IsEqual = new_instancemethod(_Standard.Standard_Storable_IsEqual,None,Standard_Storable)
Standard_Storable.__eq_wrapper__ = new_instancemethod(_Standard.Standard_Storable___eq_wrapper__,None,Standard_Storable)
Standard_Storable.IsSimilar = new_instancemethod(_Standard.Standard_Storable_IsSimilar,None,Standard_Storable)
Standard_Storable.ShallowDumpToString = new_instancemethod(_Standard.Standard_Storable_ShallowDumpToString,None,Standard_Storable)
Standard_Storable._kill_pointed = new_instancemethod(_Standard.Standard_Storable__kill_pointed,None,Standard_Storable)
Standard_Storable_swigregister = _Standard.Standard_Storable_swigregister
Standard_Storable_swigregister(Standard_Storable)

class Standard_Transient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor

        :rtype: None

        * Copy constructor -- does nothing

        :param &:
        :type &: Standard_Transient
        :rtype: None

        """
        _Standard.Standard_Transient_swiginit(self,_Standard.new_Standard_Transient(*args))
    def Set(self, *args):
        """
        * Assignment operator, needed to avoid copying reference counter

        :param &:
        :type &: Standard_Transient
        :rtype: Standard_Transient

        """
        return _Standard.Standard_Transient_Set(self, *args)

    def Delete(self, *args):
        """
        * Memory deallocator for transient classes

        :rtype: void

        """
        return _Standard.Standard_Transient_Delete(self, *args)

    def ShallowDumpToString(self):
        """ShallowDumpToString(Standard_Transient self) -> std::string"""
        return _Standard.Standard_Transient_ShallowDumpToString(self)

    def DynamicType(self, *args):
        """
        * Returns a type information object about this object.

        :rtype: Handle_Standard_Type

        """
        return _Standard.Standard_Transient_DynamicType(self, *args)

    def IsInstance(self, *args):
        """
        * Returns a true value if this is an instance of Type.

        :param theType:
        :type theType: Handle_Standard_Type &
        :rtype: bool

        * Returns a true value if this is an instance of TypeName.

        :param theTypeName:
        :type theTypeName: char *
        :rtype: bool

        """
        return _Standard.Standard_Transient_IsInstance(self, *args)

    def IsKind(self, *args):
        """
        * Returns true if this is an instance of Type or an instance of any class that inherits from Type. Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :param theType:
        :type theType: Handle_Standard_Type &
        :rtype: bool

        * Returns true if this is an instance of TypeName or an instance of any class that inherits from TypeName. Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :param theTypeName:
        :type theTypeName: char *
        :rtype: bool

        """
        return _Standard.Standard_Transient_IsKind(self, *args)

    def This(self, *args):
        """
        * Returns a Handle which references this object. Must never be called to objects created in stack.

        :rtype: Handle_Standard_Transient

        """
        return _Standard.Standard_Transient_This(self, *args)

    def GetRefCount(self, *args):
        """
        * Get the reference counter of this object.

        :rtype: int

        """
        return _Standard.Standard_Transient_GetRefCount(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Standard_Transient self)"""
        return _Standard.Standard_Transient__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Standard_Transient self) -> Handle_Standard_Transient"""
        return _Standard.Standard_Transient_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_Transient.Set = new_instancemethod(_Standard.Standard_Transient_Set,None,Standard_Transient)
Standard_Transient.Delete = new_instancemethod(_Standard.Standard_Transient_Delete,None,Standard_Transient)
Standard_Transient.ShallowDumpToString = new_instancemethod(_Standard.Standard_Transient_ShallowDumpToString,None,Standard_Transient)
Standard_Transient.DynamicType = new_instancemethod(_Standard.Standard_Transient_DynamicType,None,Standard_Transient)
Standard_Transient.IsInstance = new_instancemethod(_Standard.Standard_Transient_IsInstance,None,Standard_Transient)
Standard_Transient.IsKind = new_instancemethod(_Standard.Standard_Transient_IsKind,None,Standard_Transient)
Standard_Transient.This = new_instancemethod(_Standard.Standard_Transient_This,None,Standard_Transient)
Standard_Transient.GetRefCount = new_instancemethod(_Standard.Standard_Transient_GetRefCount,None,Standard_Transient)
Standard_Transient._kill_pointed = new_instancemethod(_Standard.Standard_Transient__kill_pointed,None,Standard_Transient)
Standard_Transient.GetHandle = new_instancemethod(_Standard.Standard_Transient_GetHandle,None,Standard_Transient)
Standard_Transient_swigregister = _Standard.Standard_Transient_swigregister
Standard_Transient_swigregister(Standard_Transient)

class Handle_Standard_Transient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Standard.Handle_Standard_Transient_swiginit(self,_Standard.new_Handle_Standard_Transient(*args))
    DownCast = staticmethod(_Standard.Handle_Standard_Transient_DownCast)
    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Standard_Transient.Nullify = new_instancemethod(_Standard.Handle_Standard_Transient_Nullify,None,Handle_Standard_Transient)
Handle_Standard_Transient.IsNull = new_instancemethod(_Standard.Handle_Standard_Transient_IsNull,None,Handle_Standard_Transient)
Handle_Standard_Transient.__eq_wrapper__ = new_instancemethod(_Standard.Handle_Standard_Transient___eq_wrapper__,None,Handle_Standard_Transient)
Handle_Standard_Transient.__ne_wrapper__ = new_instancemethod(_Standard.Handle_Standard_Transient___ne_wrapper__,None,Handle_Standard_Transient)
Handle_Standard_Transient.DumpToString = new_instancemethod(_Standard.Handle_Standard_Transient_DumpToString,None,Handle_Standard_Transient)
Handle_Standard_Transient.GetObject = new_instancemethod(_Standard.Handle_Standard_Transient_GetObject,None,Handle_Standard_Transient)
Handle_Standard_Transient._kill_pointed = new_instancemethod(_Standard.Handle_Standard_Transient__kill_pointed,None,Handle_Standard_Transient)
Handle_Standard_Transient_swigregister = _Standard.Handle_Standard_Transient_swigregister
Handle_Standard_Transient_swigregister(Handle_Standard_Transient)

def Handle_Standard_Transient_DownCast(*args):
  return _Standard.Handle_Standard_Transient_DownCast(*args)
Handle_Standard_Transient_DownCast = _Standard.Handle_Standard_Transient_DownCast

class Standard_MMgrOpt(Standard_MMgrRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructor. If aClear is True, the allocated emmory will be nullified. For description of other parameters, see description of the class above.

        :param aClear: default value is Standard_True
        :type aClear: bool
        :param aMMap: default value is Standard_True
        :type aMMap: bool
        :param aCellSize: default value is 200
        :type aCellSize: Standard_Size
        :param aNbPages: default value is 10000
        :type aNbPages: int
        :param aThreshold: default value is 40000
        :type aThreshold: Standard_Size
        :rtype: None

        """
        _Standard.Standard_MMgrOpt_swiginit(self,_Standard.new_Standard_MMgrOpt(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_MMgrOpt._kill_pointed = new_instancemethod(_Standard.Standard_MMgrOpt__kill_pointed,None,Standard_MMgrOpt)
Standard_MMgrOpt_swigregister = _Standard.Standard_MMgrOpt_swigregister
Standard_MMgrOpt_swigregister(Standard_MMgrOpt)

class Standard_MMgrRaw(Standard_MMgrRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructor; if aClear is True, the memory will be nullified upon allocation.

        :param aClear: default value is Standard_False
        :type aClear: bool
        :rtype: None

        """
        _Standard.Standard_MMgrRaw_swiginit(self,_Standard.new_Standard_MMgrRaw(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_MMgrRaw._kill_pointed = new_instancemethod(_Standard.Standard_MMgrRaw__kill_pointed,None,Standard_MMgrRaw)
Standard_MMgrRaw_swigregister = _Standard.Standard_MMgrRaw_swigregister
Standard_MMgrRaw_swigregister(Standard_MMgrRaw)

class Standard_MMgrTBBalloc(Standard_MMgrRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructor; if aClear is True, the memory will be nullified upon allocation.

        :param aClear: default value is Standard_False
        :type aClear: bool
        :rtype: None

        """
        _Standard.Standard_MMgrTBBalloc_swiginit(self,_Standard.new_Standard_MMgrTBBalloc(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_MMgrTBBalloc._kill_pointed = new_instancemethod(_Standard.Standard_MMgrTBBalloc__kill_pointed,None,Standard_MMgrTBBalloc)
Standard_MMgrTBBalloc_swigregister = _Standard.Standard_MMgrTBBalloc_swigregister
Standard_MMgrTBBalloc_swigregister(Standard_MMgrTBBalloc)

class Standard_Mutex(Standard_ErrorHandlerCallback):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructor: creates a mutex object and initializes it. It is strongly recommended that mutexes were created as static objects whenever possible.

        :rtype: None

        """
        _Standard.Standard_Mutex_swiginit(self,_Standard.new_Standard_Mutex(*args))
    def Lock(self, *args):
        """
        * Method to lock the mutex; waits until the mutex is released by other threads, locks it and then returns

        :rtype: None

        """
        return _Standard.Standard_Mutex_Lock(self, *args)

    def TryLock(self, *args):
        """
        * Method to test the mutex; if the mutex is not hold by other thread, locks it and returns True; otherwise returns False without waiting mutex to be released.

        :rtype: bool

        """
        return _Standard.Standard_Mutex_TryLock(self, *args)

    def Unlock(self, *args):
        """
        * Method to unlock the mutex; releases it to other users

        :rtype: None

        """
        return _Standard.Standard_Mutex_Unlock(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_Mutex.Lock = new_instancemethod(_Standard.Standard_Mutex_Lock,None,Standard_Mutex)
Standard_Mutex.TryLock = new_instancemethod(_Standard.Standard_Mutex_TryLock,None,Standard_Mutex)
Standard_Mutex.Unlock = new_instancemethod(_Standard.Standard_Mutex_Unlock,None,Standard_Mutex)
Standard_Mutex._kill_pointed = new_instancemethod(_Standard.Standard_Mutex__kill_pointed,None,Standard_Mutex)
Standard_Mutex_swigregister = _Standard.Standard_Mutex_swigregister
Standard_Mutex_swigregister(Standard_Mutex)

class Standard_Type(Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Name(self, *args):
        """
        * Returns the type name of <self>.

        :rtype: char *

        """
        return _Standard.Standard_Type_Name(self, *args)

    def Size(self, *args):
        """
        * Returns the size of <self> in bytes.

        :rtype: int

        """
        return _Standard.Standard_Type_Size(self, *args)

    def __init__(self, *args): 
        """
        * The constructor for a imported type.

        :param aName:
        :type aName: char *
        :param aSize:
        :type aSize: int
        :rtype: None

        * The constructor for a primitive.

        :param aName:
        :type aName: char *
        :param aSize:
        :type aSize: int
        :param aNumberOfParent:
        :type aNumberOfParent: int
        :param aAncestors:
        :type aAncestors: Standard_Address
        :rtype: None

        * The constructor for an enumeration.

        :param aName:
        :type aName: char *
        :param aSize:
        :type aSize: int
        :param aNumberOfElement:
        :type aNumberOfElement: int
        :param aNumberOfParent:
        :type aNumberOfParent: int
        :param anAncestors:
        :type anAncestors: Standard_Address
        :param aElements:
        :type aElements: Standard_Address
        :rtype: None

        * The constructor for a class.

        :param aName:
        :type aName: char *
        :param aSize:
        :type aSize: int
        :param aNumberOfParent:
        :type aNumberOfParent: int
        :param anAncestors:
        :type anAncestors: Standard_Address
        :param aFields:
        :type aFields: Standard_Address
        :rtype: None

        """
        _Standard.Standard_Type_swiginit(self,_Standard.new_Standard_Type(*args))
    def SubType(self, *args):
        """
        * Returns 'True', if <self> is the same as <aOther>, or inherits from <aOther>. Note that multiple inheritance is not supported.

        :param aOther:
        :type aOther: Handle_Standard_Type &
        :rtype: bool

        * Returns 'True', if <self> or one of its ancestors has the name equal to theName. Note that multiple inheritance is not supported.

        :param theName:
        :type theName: char *
        :rtype: bool

        """
        return _Standard.Standard_Type_SubType(self, *args)

    def IsImported(self, *args):
        """
        * Returns 'True', if the type is imported.

        :rtype: bool

        """
        return _Standard.Standard_Type_IsImported(self, *args)

    def IsPrimitive(self, *args):
        """
        * Returns 'True', if the type is a primitive.

        :rtype: bool

        """
        return _Standard.Standard_Type_IsPrimitive(self, *args)

    def IsEnumeration(self, *args):
        """
        * Returns 'True', if the type is an 'Enumeration'.

        :rtype: bool

        """
        return _Standard.Standard_Type_IsEnumeration(self, *args)

    def IsClass(self, *args):
        """
        * Returns 'True', if the type is a 'Class'.

        :rtype: bool

        """
        return _Standard.Standard_Type_IsClass(self, *args)

    def NumberOfParent(self, *args):
        """
        * Returns the number of direct parents of the class.

        :rtype: int

        """
        return _Standard.Standard_Type_NumberOfParent(self, *args)

    def NumberOfAncestor(self, *args):
        """
        * Returns the number of ancestors of the class.

        :rtype: int

        """
        return _Standard.Standard_Type_NumberOfAncestor(self, *args)

    def ShallowDump(self, *args):
        """
        * Prints the Information about type.

        :rtype: None

        """
        return _Standard.Standard_Type_ShallowDump(self, *args)

    def ShallowDumpToString(self):
        """ShallowDumpToString(Standard_Type self) -> std::string"""
        return _Standard.Standard_Type_ShallowDumpToString(self)

    def PrintToString(self):
        """PrintToString(Standard_Type self) -> std::string"""
        return _Standard.Standard_Type_PrintToString(self)

    def _kill_pointed(self):
        """_kill_pointed(Standard_Type self)"""
        return _Standard.Standard_Type__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Standard_Type self) -> Handle_Standard_Type"""
        return _Standard.Standard_Type_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Standard_Type.Name = new_instancemethod(_Standard.Standard_Type_Name,None,Standard_Type)
Standard_Type.Size = new_instancemethod(_Standard.Standard_Type_Size,None,Standard_Type)
Standard_Type.SubType = new_instancemethod(_Standard.Standard_Type_SubType,None,Standard_Type)
Standard_Type.IsImported = new_instancemethod(_Standard.Standard_Type_IsImported,None,Standard_Type)
Standard_Type.IsPrimitive = new_instancemethod(_Standard.Standard_Type_IsPrimitive,None,Standard_Type)
Standard_Type.IsEnumeration = new_instancemethod(_Standard.Standard_Type_IsEnumeration,None,Standard_Type)
Standard_Type.IsClass = new_instancemethod(_Standard.Standard_Type_IsClass,None,Standard_Type)
Standard_Type.NumberOfParent = new_instancemethod(_Standard.Standard_Type_NumberOfParent,None,Standard_Type)
Standard_Type.NumberOfAncestor = new_instancemethod(_Standard.Standard_Type_NumberOfAncestor,None,Standard_Type)
Standard_Type.ShallowDump = new_instancemethod(_Standard.Standard_Type_ShallowDump,None,Standard_Type)
Standard_Type.ShallowDumpToString = new_instancemethod(_Standard.Standard_Type_ShallowDumpToString,None,Standard_Type)
Standard_Type.PrintToString = new_instancemethod(_Standard.Standard_Type_PrintToString,None,Standard_Type)
Standard_Type._kill_pointed = new_instancemethod(_Standard.Standard_Type__kill_pointed,None,Standard_Type)
Standard_Type.GetHandle = new_instancemethod(_Standard.Standard_Type_GetHandle,None,Standard_Type)
Standard_Type_swigregister = _Standard.Standard_Type_swigregister
Standard_Type_swigregister(Standard_Type)

class Handle_Standard_Type(Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Standard.Handle_Standard_Type_swiginit(self,_Standard.new_Handle_Standard_Type(*args))
    DownCast = staticmethod(_Standard.Handle_Standard_Type_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Standard_Type.Nullify = new_instancemethod(_Standard.Handle_Standard_Type_Nullify,None,Handle_Standard_Type)
Handle_Standard_Type.IsNull = new_instancemethod(_Standard.Handle_Standard_Type_IsNull,None,Handle_Standard_Type)
Handle_Standard_Type.GetObject = new_instancemethod(_Standard.Handle_Standard_Type_GetObject,None,Handle_Standard_Type)
Handle_Standard_Type._kill_pointed = new_instancemethod(_Standard.Handle_Standard_Type__kill_pointed,None,Handle_Standard_Type)
Handle_Standard_Type_swigregister = _Standard.Handle_Standard_Type_swigregister
Handle_Standard_Type_swigregister(Handle_Standard_Type)

def Handle_Standard_Type_DownCast(*args):
  return _Standard.Handle_Standard_Type_DownCast(*args)
Handle_Standard_Type_DownCast = _Standard.Handle_Standard_Type_DownCast



