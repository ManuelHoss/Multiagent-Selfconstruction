# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TDataStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDataStd', [dirname(__file__)])
        except ImportError:
            import _TDataStd
            return _TDataStd
        if fp is not None:
            try:
                _mod = imp.load_module('_TDataStd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TDataStd = swig_import_helper()
    del swig_import_helper
else:
    import _TDataStd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataStd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TDataStd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDataStd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDataStd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDataStd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDataStd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDataStd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDataStd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDataStd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDataStd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDataStd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDataStd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDataStd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDataStd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDataStd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDataStd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDataStd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TDataStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd

_TDataStd.TDataStd_SCALAR_swigconstant(_TDataStd)
TDataStd_SCALAR = _TDataStd.TDataStd_SCALAR

_TDataStd.TDataStd_LENGTH_swigconstant(_TDataStd)
TDataStd_LENGTH = _TDataStd.TDataStd_LENGTH

_TDataStd.TDataStd_ANGULAR_swigconstant(_TDataStd)
TDataStd_ANGULAR = _TDataStd.TDataStd_ANGULAR
class tdatastd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IDList(*args):
        """
        * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: void

        """
        return _TDataStd.tdatastd_IDList(*args)

    IDList = staticmethod(IDList)

    def Print(*args):
        """
        * Prints the name of the real dimension <DIM> as a String on the Stream <S> and returns <S>.

        :param DIM:
        :type DIM: TDataStd_RealEnum
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        """
        return _TDataStd.tdatastd_Print(*args)

    Print = staticmethod(Print)

    def __init__(self):
        _TDataStd.tdatastd_swiginit(self, _TDataStd.new_tdatastd())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


tdatastd._kill_pointed = new_instancemethod(_TDataStd.tdatastd__kill_pointed, None, tdatastd)
tdatastd_swigregister = _TDataStd.tdatastd_swigregister
tdatastd_swigregister(tdatastd)

def tdatastd_IDList(*args):
    """
    * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

    :param anIDList:
    :type anIDList: TDF_IDList &
    :rtype: void

    """
    return _TDataStd.tdatastd_IDList(*args)

def tdatastd_Print(*args):
    """
    * Prints the name of the real dimension <DIM> as a String on the Stream <S> and returns <S>.

    :param DIM:
    :type DIM: TDataStd_RealEnum
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    """
    return _TDataStd.tdatastd_Print(*args)

class TDataStd_AsciiString(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID of the attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_AsciiString_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_AsciiString_swiginit(self, _TDataStd.new_TDataStd_AsciiString(*args))

    def Set(self, *args):
        """
        * Finds, or creates an AsciiString attribute and sets the string. the AsciiString attribute is returned. AsciiString methods ===================

        :param label:
        :type label: TDF_Label &
        :param string:
        :type string: TCollection_AsciiString &
        :rtype: Handle_TDataStd_AsciiString

        :param S:
        :type S: TCollection_AsciiString &
        :rtype: None

        """
        return _TDataStd.TDataStd_AsciiString_Set(self, *args)


    def Get(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _TDataStd.TDataStd_AsciiString_Get(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_AsciiString_IsEmpty(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_AsciiString self) -> std::string"""
        return _TDataStd.TDataStd_AsciiString_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_AsciiString self)"""
        return _TDataStd.TDataStd_AsciiString__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_AsciiString self) -> Handle_TDataStd_AsciiString"""
        return _TDataStd.TDataStd_AsciiString_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_AsciiString.Set = new_instancemethod(_TDataStd.TDataStd_AsciiString_Set, None, TDataStd_AsciiString)
TDataStd_AsciiString.Get = new_instancemethod(_TDataStd.TDataStd_AsciiString_Get, None, TDataStd_AsciiString)
TDataStd_AsciiString.IsEmpty = new_instancemethod(_TDataStd.TDataStd_AsciiString_IsEmpty, None, TDataStd_AsciiString)
TDataStd_AsciiString.DumpToString = new_instancemethod(_TDataStd.TDataStd_AsciiString_DumpToString, None, TDataStd_AsciiString)
TDataStd_AsciiString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_AsciiString__kill_pointed, None, TDataStd_AsciiString)
TDataStd_AsciiString.GetHandle = new_instancemethod(_TDataStd.TDataStd_AsciiString_GetHandle, None, TDataStd_AsciiString)
TDataStd_AsciiString_swigregister = _TDataStd.TDataStd_AsciiString_swigregister
TDataStd_AsciiString_swigregister(TDataStd_AsciiString)

def TDataStd_AsciiString_GetID(*args):
    """
    * class methods ============= Returns the GUID of the attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_AsciiString_GetID(*args)

class Handle_TDataStd_AsciiString(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_AsciiString_swiginit(self, _TDataStd.new_Handle_TDataStd_AsciiString(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_AsciiString_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_AsciiString.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_AsciiString_Nullify, None, Handle_TDataStd_AsciiString)
Handle_TDataStd_AsciiString.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_AsciiString_IsNull, None, Handle_TDataStd_AsciiString)
Handle_TDataStd_AsciiString.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_AsciiString_GetObject, None, Handle_TDataStd_AsciiString)
Handle_TDataStd_AsciiString._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_AsciiString__kill_pointed, None, Handle_TDataStd_AsciiString)
Handle_TDataStd_AsciiString_swigregister = _TDataStd.Handle_TDataStd_AsciiString_swigregister
Handle_TDataStd_AsciiString_swigregister(Handle_TDataStd_AsciiString)

def Handle_TDataStd_AsciiString_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_AsciiString_DownCast(AnObject)
Handle_TDataStd_AsciiString_DownCast = _TDataStd.Handle_TDataStd_AsciiString_DownCast

class TDataStd_BooleanArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns an ID for array.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_BooleanArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates an attribute with the array.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: Handle_TDataStd_BooleanArray

        """
        return _TDataStd.TDataStd_BooleanArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initialize the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param index:
        :type index: int
        :param value:
        :type value: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Return the value of the <Index>th element of the array.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_BooleanArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_BooleanArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Returns the upper boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_BooleanArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Returns the number of elements in the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_BooleanArray_Length(self, *args)


    def InternalArray(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfByte

        """
        return _TDataStd.TDataStd_BooleanArray_InternalArray(self, *args)


    def SetInternalArray(self, *args):
        """
        :param values:
        :type values: Handle_TColStd_HArray1OfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanArray_SetInternalArray(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_BooleanArray_swiginit(self, _TDataStd.new_TDataStd_BooleanArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_BooleanArray self) -> std::string"""
        return _TDataStd.TDataStd_BooleanArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_BooleanArray self)"""
        return _TDataStd.TDataStd_BooleanArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_BooleanArray self) -> Handle_TDataStd_BooleanArray"""
        return _TDataStd.TDataStd_BooleanArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_BooleanArray.Init = new_instancemethod(_TDataStd.TDataStd_BooleanArray_Init, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.SetValue = new_instancemethod(_TDataStd.TDataStd_BooleanArray_SetValue, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.Value = new_instancemethod(_TDataStd.TDataStd_BooleanArray_Value, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.Lower = new_instancemethod(_TDataStd.TDataStd_BooleanArray_Lower, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.Upper = new_instancemethod(_TDataStd.TDataStd_BooleanArray_Upper, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.Length = new_instancemethod(_TDataStd.TDataStd_BooleanArray_Length, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.InternalArray = new_instancemethod(_TDataStd.TDataStd_BooleanArray_InternalArray, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.SetInternalArray = new_instancemethod(_TDataStd.TDataStd_BooleanArray_SetInternalArray, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_BooleanArray_DumpToString, None, TDataStd_BooleanArray)
TDataStd_BooleanArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_BooleanArray__kill_pointed, None, TDataStd_BooleanArray)
TDataStd_BooleanArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_BooleanArray_GetHandle, None, TDataStd_BooleanArray)
TDataStd_BooleanArray_swigregister = _TDataStd.TDataStd_BooleanArray_swigregister
TDataStd_BooleanArray_swigregister(TDataStd_BooleanArray)

def TDataStd_BooleanArray_GetID(*args):
    """
    * Static methods ============== Returns an ID for array.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_BooleanArray_GetID(*args)

def TDataStd_BooleanArray_Set(*args):
    """
    * Finds or creates an attribute with the array.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :rtype: Handle_TDataStd_BooleanArray

    """
    return _TDataStd.TDataStd_BooleanArray_Set(*args)

class Handle_TDataStd_BooleanArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_BooleanArray_swiginit(self, _TDataStd.new_Handle_TDataStd_BooleanArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_BooleanArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_BooleanArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanArray_Nullify, None, Handle_TDataStd_BooleanArray)
Handle_TDataStd_BooleanArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanArray_IsNull, None, Handle_TDataStd_BooleanArray)
Handle_TDataStd_BooleanArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanArray_GetObject, None, Handle_TDataStd_BooleanArray)
Handle_TDataStd_BooleanArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanArray__kill_pointed, None, Handle_TDataStd_BooleanArray)
Handle_TDataStd_BooleanArray_swigregister = _TDataStd.Handle_TDataStd_BooleanArray_swigregister
Handle_TDataStd_BooleanArray_swigregister(Handle_TDataStd_BooleanArray)

def Handle_TDataStd_BooleanArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_BooleanArray_DownCast(AnObject)
Handle_TDataStd_BooleanArray_DownCast = _TDataStd.Handle_TDataStd_BooleanArray_DownCast

class TDataStd_BooleanList(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the list of booleans attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_BooleanList_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a list of boolean values attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_BooleanList

        """
        return _TDataStd.TDataStd_BooleanList_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_BooleanList_swiginit(self, _TDataStd.new_TDataStd_BooleanList(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_BooleanList_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_BooleanList_Extent(self, *args)


    def Prepend(self, *args):
        """
        :param value:
        :type value: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param value:
        :type value: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanList_Append(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_BooleanList_Clear(self, *args)


    def First(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_BooleanList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_BooleanList_Last(self, *args)


    def List(self, *args):
        """
        * 1 - means True, 0 - means False.

        :rtype: TDataStd_ListOfByte

        """
        return _TDataStd.TDataStd_BooleanList_List(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_BooleanList self) -> std::string"""
        return _TDataStd.TDataStd_BooleanList_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_BooleanList self)"""
        return _TDataStd.TDataStd_BooleanList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_BooleanList self) -> Handle_TDataStd_BooleanList"""
        return _TDataStd.TDataStd_BooleanList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_BooleanList.IsEmpty = new_instancemethod(_TDataStd.TDataStd_BooleanList_IsEmpty, None, TDataStd_BooleanList)
TDataStd_BooleanList.Extent = new_instancemethod(_TDataStd.TDataStd_BooleanList_Extent, None, TDataStd_BooleanList)
TDataStd_BooleanList.Prepend = new_instancemethod(_TDataStd.TDataStd_BooleanList_Prepend, None, TDataStd_BooleanList)
TDataStd_BooleanList.Append = new_instancemethod(_TDataStd.TDataStd_BooleanList_Append, None, TDataStd_BooleanList)
TDataStd_BooleanList.Clear = new_instancemethod(_TDataStd.TDataStd_BooleanList_Clear, None, TDataStd_BooleanList)
TDataStd_BooleanList.First = new_instancemethod(_TDataStd.TDataStd_BooleanList_First, None, TDataStd_BooleanList)
TDataStd_BooleanList.Last = new_instancemethod(_TDataStd.TDataStd_BooleanList_Last, None, TDataStd_BooleanList)
TDataStd_BooleanList.List = new_instancemethod(_TDataStd.TDataStd_BooleanList_List, None, TDataStd_BooleanList)
TDataStd_BooleanList.DumpToString = new_instancemethod(_TDataStd.TDataStd_BooleanList_DumpToString, None, TDataStd_BooleanList)
TDataStd_BooleanList._kill_pointed = new_instancemethod(_TDataStd.TDataStd_BooleanList__kill_pointed, None, TDataStd_BooleanList)
TDataStd_BooleanList.GetHandle = new_instancemethod(_TDataStd.TDataStd_BooleanList_GetHandle, None, TDataStd_BooleanList)
TDataStd_BooleanList_swigregister = _TDataStd.TDataStd_BooleanList_swigregister
TDataStd_BooleanList_swigregister(TDataStd_BooleanList)

def TDataStd_BooleanList_GetID(*args):
    """
    * Static methods ============== Returns the ID of the list of booleans attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_BooleanList_GetID(*args)

def TDataStd_BooleanList_Set(*args):
    """
    * Finds or creates a list of boolean values attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_BooleanList

    """
    return _TDataStd.TDataStd_BooleanList_Set(*args)

class Handle_TDataStd_BooleanList(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_BooleanList_swiginit(self, _TDataStd.new_Handle_TDataStd_BooleanList(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_BooleanList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_BooleanList.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanList_Nullify, None, Handle_TDataStd_BooleanList)
Handle_TDataStd_BooleanList.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanList_IsNull, None, Handle_TDataStd_BooleanList)
Handle_TDataStd_BooleanList.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanList_GetObject, None, Handle_TDataStd_BooleanList)
Handle_TDataStd_BooleanList._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_BooleanList__kill_pointed, None, Handle_TDataStd_BooleanList)
Handle_TDataStd_BooleanList_swigregister = _TDataStd.Handle_TDataStd_BooleanList_swigregister
Handle_TDataStd_BooleanList_swigregister(Handle_TDataStd_BooleanList)

def Handle_TDataStd_BooleanList_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_BooleanList_DownCast(AnObject)
Handle_TDataStd_BooleanList_DownCast = _TDataStd.Handle_TDataStd_BooleanList_DownCast

class TDataStd_ByteArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns an ID for array.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_ByteArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates an attribute with the array. If <isDelta> == False, DefaultDeltaOnModification is used. If attribute is already set, all input parameters are refused and the found attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :param isDelta: default value is Standard_False
        :type isDelta: bool
        :rtype: Handle_TDataStd_ByteArray

        """
        return _TDataStd.TDataStd_ByteArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initialize the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_ByteArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param index:
        :type index: int
        :param value:
        :type value: Standard_Byte
        :rtype: None

        """
        return _TDataStd.TDataStd_ByteArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Return the value of the <Index>th element of the array.

        :param Index:
        :type Index: int
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_ByteArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ByteArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Returns the upper boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ByteArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Returns the number of elements in the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ByteArray_Length(self, *args)


    def InternalArray(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfByte

        """
        return _TDataStd.TDataStd_ByteArray_InternalArray(self, *args)


    def ChangeArray(self, *args):
        """
        * Sets the inner array <myValue> of the attribute to <newArray>. If value of <newArray> differs from <myValue>, Backup performed and myValue refers to new instance of HArray1OfInteger that holds <newArray> values. If <isCheckItems> equal True each item of <newArray> will be checked with each item of <myValue> for coincidence (to avoid backup).

        :param newArray:
        :type newArray: Handle_TColStd_HArray1OfByte &
        :param isCheckItems: default value is Standard_True
        :type isCheckItems: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ByteArray_ChangeArray(self, *args)


    def GetDelta(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ByteArray_GetDelta(self, *args)


    def SetDelta(self, *args):
        """
        * for internal use only!

        :param isDelta:
        :type isDelta: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ByteArray_SetDelta(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ByteArray_swiginit(self, _TDataStd.new_TDataStd_ByteArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_ByteArray self) -> std::string"""
        return _TDataStd.TDataStd_ByteArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ByteArray self)"""
        return _TDataStd.TDataStd_ByteArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ByteArray self) -> Handle_TDataStd_ByteArray"""
        return _TDataStd.TDataStd_ByteArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ByteArray.Init = new_instancemethod(_TDataStd.TDataStd_ByteArray_Init, None, TDataStd_ByteArray)
TDataStd_ByteArray.SetValue = new_instancemethod(_TDataStd.TDataStd_ByteArray_SetValue, None, TDataStd_ByteArray)
TDataStd_ByteArray.Value = new_instancemethod(_TDataStd.TDataStd_ByteArray_Value, None, TDataStd_ByteArray)
TDataStd_ByteArray.Lower = new_instancemethod(_TDataStd.TDataStd_ByteArray_Lower, None, TDataStd_ByteArray)
TDataStd_ByteArray.Upper = new_instancemethod(_TDataStd.TDataStd_ByteArray_Upper, None, TDataStd_ByteArray)
TDataStd_ByteArray.Length = new_instancemethod(_TDataStd.TDataStd_ByteArray_Length, None, TDataStd_ByteArray)
TDataStd_ByteArray.InternalArray = new_instancemethod(_TDataStd.TDataStd_ByteArray_InternalArray, None, TDataStd_ByteArray)
TDataStd_ByteArray.ChangeArray = new_instancemethod(_TDataStd.TDataStd_ByteArray_ChangeArray, None, TDataStd_ByteArray)
TDataStd_ByteArray.GetDelta = new_instancemethod(_TDataStd.TDataStd_ByteArray_GetDelta, None, TDataStd_ByteArray)
TDataStd_ByteArray.SetDelta = new_instancemethod(_TDataStd.TDataStd_ByteArray_SetDelta, None, TDataStd_ByteArray)
TDataStd_ByteArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_ByteArray_DumpToString, None, TDataStd_ByteArray)
TDataStd_ByteArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ByteArray__kill_pointed, None, TDataStd_ByteArray)
TDataStd_ByteArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_ByteArray_GetHandle, None, TDataStd_ByteArray)
TDataStd_ByteArray_swigregister = _TDataStd.TDataStd_ByteArray_swigregister
TDataStd_ByteArray_swigregister(TDataStd_ByteArray)

def TDataStd_ByteArray_GetID(*args):
    """
    * Static methods ============== Returns an ID for array.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_ByteArray_GetID(*args)

def TDataStd_ByteArray_Set(*args):
    """
    * Finds or creates an attribute with the array. If <isDelta> == False, DefaultDeltaOnModification is used. If attribute is already set, all input parameters are refused and the found attribute is returned.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :param isDelta: default value is Standard_False
    :type isDelta: bool
    :rtype: Handle_TDataStd_ByteArray

    """
    return _TDataStd.TDataStd_ByteArray_Set(*args)

class Handle_TDataStd_ByteArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ByteArray_swiginit(self, _TDataStd.new_Handle_TDataStd_ByteArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ByteArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ByteArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ByteArray_Nullify, None, Handle_TDataStd_ByteArray)
Handle_TDataStd_ByteArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ByteArray_IsNull, None, Handle_TDataStd_ByteArray)
Handle_TDataStd_ByteArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ByteArray_GetObject, None, Handle_TDataStd_ByteArray)
Handle_TDataStd_ByteArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ByteArray__kill_pointed, None, Handle_TDataStd_ByteArray)
Handle_TDataStd_ByteArray_swigregister = _TDataStd.Handle_TDataStd_ByteArray_swigregister
Handle_TDataStd_ByteArray_swigregister(Handle_TDataStd_ByteArray)

def Handle_TDataStd_ByteArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ByteArray_DownCast(AnObject)
Handle_TDataStd_ByteArray_DownCast = _TDataStd.Handle_TDataStd_ByteArray_DownCast

class TDataStd_ChildNodeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty iterator.

        :rtype: None

        * Iterates on the ChildStepren of the given Step. If <allLevels> option is set to true, it explores not only the first, but all the sub Step levels.

        :param aTreeNode:
        :type aTreeNode: Handle_TDataStd_TreeNode &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        _TDataStd.TDataStd_ChildNodeIterator_swiginit(self, _TDataStd.new_TDataStd_ChildNodeIterator(*args))

    def Initialize(self, *args):
        """
        * Initializes the iteration on the Children Step of the given Step. If <allLevels> option is set to true, it explores not only the first, but all the sub Step levels.

        :param aTreeNode:
        :type aTreeNode: Handle_TDataStd_TreeNode &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Initialize(self, *args)


    def More(self, *args):
        """
        * Returns True if there is a current Item in the iteration.

        :rtype: bool

        """
        return _TDataStd.TDataStd_ChildNodeIterator_More(self, *args)


    def Next(self, *args):
        """
        * Move to the next Item

        :rtype: None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Next(self, *args)


    def NextBrother(self, *args):
        """
        * Move to the next Brother. If there is none, go up etc. This method is interesting only with 'allLevels' behavior, because it avoids to explore the current Step ChildStepren.

        :rtype: None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_NextBrother(self, *args)


    def Value(self, *args):
        """
        * Returns the current item; a null Step if there is no one.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ChildNodeIterator.Initialize = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator_Initialize, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator.More = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator_More, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator.Next = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator_Next, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator.NextBrother = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator_NextBrother, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator.Value = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator_Value, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ChildNodeIterator__kill_pointed, None, TDataStd_ChildNodeIterator)
TDataStd_ChildNodeIterator_swigregister = _TDataStd.TDataStd_ChildNodeIterator_swigregister
TDataStd_ChildNodeIterator_swigregister(TDataStd_ChildNodeIterator)

class TDataStd_Comment(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for comments.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Comment_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Comment_swiginit(self, _TDataStd.new_TDataStd_Comment(*args))

    def Set(self, *args):
        """
        * Find, or create a Comment attribute. the Comment attribute is returned.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Comment

        * Finds, or creates a Comment attribute and sets the string. the Comment attribute is returned. Comment methods ============

        :param label:
        :type label: TDF_Label &
        :param string:
        :type string: TCollection_ExtendedString &
        :rtype: Handle_TDataStd_Comment

        :param S:
        :type S: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_Comment_Set(self, *args)


    def Get(self, *args):
        """
        * Returns the comment attribute.

        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Comment_Get(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Comment self) -> std::string"""
        return _TDataStd.TDataStd_Comment_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Comment self)"""
        return _TDataStd.TDataStd_Comment__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Comment self) -> Handle_TDataStd_Comment"""
        return _TDataStd.TDataStd_Comment_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Comment.Set = new_instancemethod(_TDataStd.TDataStd_Comment_Set, None, TDataStd_Comment)
TDataStd_Comment.Get = new_instancemethod(_TDataStd.TDataStd_Comment_Get, None, TDataStd_Comment)
TDataStd_Comment.DumpToString = new_instancemethod(_TDataStd.TDataStd_Comment_DumpToString, None, TDataStd_Comment)
TDataStd_Comment._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Comment__kill_pointed, None, TDataStd_Comment)
TDataStd_Comment.GetHandle = new_instancemethod(_TDataStd.TDataStd_Comment_GetHandle, None, TDataStd_Comment)
TDataStd_Comment_swigregister = _TDataStd.TDataStd_Comment_swigregister
TDataStd_Comment_swigregister(TDataStd_Comment)

def TDataStd_Comment_GetID(*args):
    """
    * class methods ============= Returns the GUID for comments.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Comment_GetID(*args)

class Handle_TDataStd_Comment(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Comment_swiginit(self, _TDataStd.new_Handle_TDataStd_Comment(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Comment_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Comment.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Comment_Nullify, None, Handle_TDataStd_Comment)
Handle_TDataStd_Comment.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Comment_IsNull, None, Handle_TDataStd_Comment)
Handle_TDataStd_Comment.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Comment_GetObject, None, Handle_TDataStd_Comment)
Handle_TDataStd_Comment._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Comment__kill_pointed, None, Handle_TDataStd_Comment)
Handle_TDataStd_Comment_swigregister = _TDataStd.Handle_TDataStd_Comment_swigregister
Handle_TDataStd_Comment_swigregister(Handle_TDataStd_Comment)

def Handle_TDataStd_Comment_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Comment_DownCast(AnObject)
Handle_TDataStd_Comment_DownCast = _TDataStd.Handle_TDataStd_Comment_DownCast

class TDataStd_Current(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Current_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Set <L> as current of <L> Framework.

        :param L:
        :type L: TDF_Label &
        :rtype: void

        """
        return _TDataStd.TDataStd_Current_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        * returns current of <acces> Framework. raise if (!Has)

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_Current_Get(*args)

    Get = staticmethod(Get)

    def Has(*args):
        """
        * returns True if a current label is managed in <acces> Framework. class methods =============

        :param acces:
        :type acces: TDF_Label &
        :rtype: bool

        """
        return _TDataStd.TDataStd_Current_Has(*args)

    Has = staticmethod(Has)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Current_swiginit(self, _TDataStd.new_TDataStd_Current(*args))

    def SetLabel(self, *args):
        """
        :param current:
        :type current: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_Current_SetLabel(self, *args)


    def GetLabel(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_Current_GetLabel(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Current self) -> std::string"""
        return _TDataStd.TDataStd_Current_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Current self)"""
        return _TDataStd.TDataStd_Current__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Current self) -> Handle_TDataStd_Current"""
        return _TDataStd.TDataStd_Current_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Current.SetLabel = new_instancemethod(_TDataStd.TDataStd_Current_SetLabel, None, TDataStd_Current)
TDataStd_Current.GetLabel = new_instancemethod(_TDataStd.TDataStd_Current_GetLabel, None, TDataStd_Current)
TDataStd_Current.DumpToString = new_instancemethod(_TDataStd.TDataStd_Current_DumpToString, None, TDataStd_Current)
TDataStd_Current._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Current__kill_pointed, None, TDataStd_Current)
TDataStd_Current.GetHandle = new_instancemethod(_TDataStd.TDataStd_Current_GetHandle, None, TDataStd_Current)
TDataStd_Current_swigregister = _TDataStd.TDataStd_Current_swigregister
TDataStd_Current_swigregister(TDataStd_Current)

def TDataStd_Current_GetID(*args):
    """
    * class methods =============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Current_GetID(*args)

def TDataStd_Current_Set(*args):
    """
    * Set <L> as current of <L> Framework.

    :param L:
    :type L: TDF_Label &
    :rtype: void

    """
    return _TDataStd.TDataStd_Current_Set(*args)

def TDataStd_Current_Get(*args):
    """
    * returns current of <acces> Framework. raise if (!Has)

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
    return _TDataStd.TDataStd_Current_Get(*args)

def TDataStd_Current_Has(*args):
    """
    * returns True if a current label is managed in <acces> Framework. class methods =============

    :param acces:
    :type acces: TDF_Label &
    :rtype: bool

    """
    return _TDataStd.TDataStd_Current_Has(*args)

class Handle_TDataStd_Current(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Current_swiginit(self, _TDataStd.new_Handle_TDataStd_Current(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Current_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Current.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Current_Nullify, None, Handle_TDataStd_Current)
Handle_TDataStd_Current.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Current_IsNull, None, Handle_TDataStd_Current)
Handle_TDataStd_Current.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Current_GetObject, None, Handle_TDataStd_Current)
Handle_TDataStd_Current._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Current__kill_pointed, None, Handle_TDataStd_Current)
Handle_TDataStd_Current_swigregister = _TDataStd.Handle_TDataStd_Current_swigregister
Handle_TDataStd_Current_swigregister(Handle_TDataStd_Current)

def Handle_TDataStd_Current_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Current_DownCast(AnObject)
Handle_TDataStd_Current_DownCast = _TDataStd.Handle_TDataStd_Current_DownCast

class TDataStd_DataMapIteratorOfDataMapOfStringByte(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TDataStd_DataMapOfStringByte &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_swiginit(self, _TDataStd.new_TDataStd_DataMapIteratorOfDataMapOfStringByte(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDataStd_DataMapOfStringByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapIteratorOfDataMapOfStringByte.Initialize = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Initialize, None, TDataStd_DataMapIteratorOfDataMapOfStringByte)
TDataStd_DataMapIteratorOfDataMapOfStringByte.Key = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Key, None, TDataStd_DataMapIteratorOfDataMapOfStringByte)
TDataStd_DataMapIteratorOfDataMapOfStringByte.Value = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_Value, None, TDataStd_DataMapIteratorOfDataMapOfStringByte)
TDataStd_DataMapIteratorOfDataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte__kill_pointed, None, TDataStd_DataMapIteratorOfDataMapOfStringByte)
TDataStd_DataMapIteratorOfDataMapOfStringByte_swigregister = _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringByte_swigregister
TDataStd_DataMapIteratorOfDataMapOfStringByte_swigregister(TDataStd_DataMapIteratorOfDataMapOfStringByte)

class TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger.Initialize = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Initialize, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger.Key = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Key, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger.Value = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_Value, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger__kill_pointed, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_swigregister
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger_swigregister(TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfInteger)

class TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal.Initialize = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Initialize, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal.Key = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Key, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal.Value = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_Value, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal__kill_pointed, None, TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_swigregister
TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal_swigregister(TDataStd_DataMapIteratorOfDataMapOfStringHArray1OfReal)

class TDataStd_DataMapIteratorOfDataMapOfStringReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TDataStd_DataMapOfStringReal &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_swiginit(self, _TDataStd.new_TDataStd_DataMapIteratorOfDataMapOfStringReal(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDataStd_DataMapOfStringReal &
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: float

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapIteratorOfDataMapOfStringReal.Initialize = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Initialize, None, TDataStd_DataMapIteratorOfDataMapOfStringReal)
TDataStd_DataMapIteratorOfDataMapOfStringReal.Key = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Key, None, TDataStd_DataMapIteratorOfDataMapOfStringReal)
TDataStd_DataMapIteratorOfDataMapOfStringReal.Value = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_Value, None, TDataStd_DataMapIteratorOfDataMapOfStringReal)
TDataStd_DataMapIteratorOfDataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal__kill_pointed, None, TDataStd_DataMapIteratorOfDataMapOfStringReal)
TDataStd_DataMapIteratorOfDataMapOfStringReal_swigregister = _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringReal_swigregister
TDataStd_DataMapIteratorOfDataMapOfStringReal_swigregister(TDataStd_DataMapIteratorOfDataMapOfStringReal)

class TDataStd_DataMapIteratorOfDataMapOfStringString(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TDataStd_DataMapOfStringString &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_swiginit(self, _TDataStd.new_TDataStd_DataMapIteratorOfDataMapOfStringString(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDataStd_DataMapOfStringString &
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapIteratorOfDataMapOfStringString.Initialize = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Initialize, None, TDataStd_DataMapIteratorOfDataMapOfStringString)
TDataStd_DataMapIteratorOfDataMapOfStringString.Key = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Key, None, TDataStd_DataMapIteratorOfDataMapOfStringString)
TDataStd_DataMapIteratorOfDataMapOfStringString.Value = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_Value, None, TDataStd_DataMapIteratorOfDataMapOfStringString)
TDataStd_DataMapIteratorOfDataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString__kill_pointed, None, TDataStd_DataMapIteratorOfDataMapOfStringString)
TDataStd_DataMapIteratorOfDataMapOfStringString_swigregister = _TDataStd.TDataStd_DataMapIteratorOfDataMapOfStringString_swigregister
TDataStd_DataMapIteratorOfDataMapOfStringString_swigregister(TDataStd_DataMapIteratorOfDataMapOfStringString)

class TDataStd_DataMapNodeOfDataMapOfStringByte(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Standard_Byte &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_swiginit(self, _TDataStd.new_TDataStd_DataMapNodeOfDataMapOfStringByte(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapNodeOfDataMapOfStringByte self)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DataMapNodeOfDataMapOfStringByte self) -> Handle_TDataStd_DataMapNodeOfDataMapOfStringByte"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapNodeOfDataMapOfStringByte.Key = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_Key, None, TDataStd_DataMapNodeOfDataMapOfStringByte)
TDataStd_DataMapNodeOfDataMapOfStringByte.Value = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_Value, None, TDataStd_DataMapNodeOfDataMapOfStringByte)
TDataStd_DataMapNodeOfDataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte__kill_pointed, None, TDataStd_DataMapNodeOfDataMapOfStringByte)
TDataStd_DataMapNodeOfDataMapOfStringByte.GetHandle = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_GetHandle, None, TDataStd_DataMapNodeOfDataMapOfStringByte)
TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister = _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister
TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister(TDataStd_DataMapNodeOfDataMapOfStringByte)

class Handle_TDataStd_DataMapNodeOfDataMapOfStringByte(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_swiginit(self, _TDataStd.new_Handle_TDataStd_DataMapNodeOfDataMapOfStringByte(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DataMapNodeOfDataMapOfStringByte.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_Nullify, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringByte)
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_IsNull, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringByte)
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_GetObject, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringByte)
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte__kill_pointed, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringByte)
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_swigregister(Handle_TDataStd_DataMapNodeOfDataMapOfStringByte)

def Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_DownCast(AnObject)
Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_DownCast = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringByte_DownCast

class TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Handle_TColStd_HArray1OfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger self)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger self) -> Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.Key = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_Key, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.Value = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_Value, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger__kill_pointed, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.GetHandle = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_GetHandle, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)

class Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_Nullify, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_IsNull, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_GetObject, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger__kill_pointed, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_swigregister(Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger)

def Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_DownCast(AnObject)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_DownCast = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfInteger_DownCast

class TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal self)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal self) -> Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.Key = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_Key, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.Value = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_Value, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal__kill_pointed, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.GetHandle = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_GetHandle, None, TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister
TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister(TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)

class Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_Nullify, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_IsNull, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_GetObject, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal__kill_pointed, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_swigregister(Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal)

def Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_DownCast(AnObject)
Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_DownCast = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringHArray1OfReal_DownCast

class TDataStd_DataMapNodeOfDataMapOfStringReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: float &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_swiginit(self, _TDataStd.new_TDataStd_DataMapNodeOfDataMapOfStringReal(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_Key(self, *args)


    def GetValue(self):
        """GetValue(TDataStd_DataMapNodeOfDataMapOfStringReal self) -> Standard_Real"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_GetValue(self)


    def SetValue(self, value):
        """SetValue(TDataStd_DataMapNodeOfDataMapOfStringReal self, Standard_Real value)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapNodeOfDataMapOfStringReal self)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DataMapNodeOfDataMapOfStringReal self) -> Handle_TDataStd_DataMapNodeOfDataMapOfStringReal"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapNodeOfDataMapOfStringReal.Key = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_Key, None, TDataStd_DataMapNodeOfDataMapOfStringReal)
TDataStd_DataMapNodeOfDataMapOfStringReal.GetValue = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_GetValue, None, TDataStd_DataMapNodeOfDataMapOfStringReal)
TDataStd_DataMapNodeOfDataMapOfStringReal.SetValue = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_SetValue, None, TDataStd_DataMapNodeOfDataMapOfStringReal)
TDataStd_DataMapNodeOfDataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal__kill_pointed, None, TDataStd_DataMapNodeOfDataMapOfStringReal)
TDataStd_DataMapNodeOfDataMapOfStringReal.GetHandle = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_GetHandle, None, TDataStd_DataMapNodeOfDataMapOfStringReal)
TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister = _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister
TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister(TDataStd_DataMapNodeOfDataMapOfStringReal)

class Handle_TDataStd_DataMapNodeOfDataMapOfStringReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_swiginit(self, _TDataStd.new_Handle_TDataStd_DataMapNodeOfDataMapOfStringReal(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DataMapNodeOfDataMapOfStringReal.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_Nullify, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_IsNull, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_GetObject, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal__kill_pointed, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringReal)
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_swigregister(Handle_TDataStd_DataMapNodeOfDataMapOfStringReal)

def Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_DownCast(AnObject)
Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_DownCast = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringReal_DownCast

class TDataStd_DataMapNodeOfDataMapOfStringString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: TCollection_ExtendedString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_swiginit(self, _TDataStd.new_TDataStd_DataMapNodeOfDataMapOfStringString(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapNodeOfDataMapOfStringString self)"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DataMapNodeOfDataMapOfStringString self) -> Handle_TDataStd_DataMapNodeOfDataMapOfStringString"""
        return _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapNodeOfDataMapOfStringString.Key = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_Key, None, TDataStd_DataMapNodeOfDataMapOfStringString)
TDataStd_DataMapNodeOfDataMapOfStringString.Value = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_Value, None, TDataStd_DataMapNodeOfDataMapOfStringString)
TDataStd_DataMapNodeOfDataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString__kill_pointed, None, TDataStd_DataMapNodeOfDataMapOfStringString)
TDataStd_DataMapNodeOfDataMapOfStringString.GetHandle = new_instancemethod(_TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_GetHandle, None, TDataStd_DataMapNodeOfDataMapOfStringString)
TDataStd_DataMapNodeOfDataMapOfStringString_swigregister = _TDataStd.TDataStd_DataMapNodeOfDataMapOfStringString_swigregister
TDataStd_DataMapNodeOfDataMapOfStringString_swigregister(TDataStd_DataMapNodeOfDataMapOfStringString)

class Handle_TDataStd_DataMapNodeOfDataMapOfStringString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_swiginit(self, _TDataStd.new_Handle_TDataStd_DataMapNodeOfDataMapOfStringString(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DataMapNodeOfDataMapOfStringString.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_Nullify, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringString)
Handle_TDataStd_DataMapNodeOfDataMapOfStringString.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_IsNull, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringString)
Handle_TDataStd_DataMapNodeOfDataMapOfStringString.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_GetObject, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringString)
Handle_TDataStd_DataMapNodeOfDataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString__kill_pointed, None, Handle_TDataStd_DataMapNodeOfDataMapOfStringString)
Handle_TDataStd_DataMapNodeOfDataMapOfStringString_swigregister = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_swigregister
Handle_TDataStd_DataMapNodeOfDataMapOfStringString_swigregister(Handle_TDataStd_DataMapNodeOfDataMapOfStringString)

def Handle_TDataStd_DataMapNodeOfDataMapOfStringString_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_DownCast(AnObject)
Handle_TDataStd_DataMapNodeOfDataMapOfStringString_DownCast = _TDataStd.Handle_TDataStd_DataMapNodeOfDataMapOfStringString_DownCast

class TDataStd_DataMapOfStringByte(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapOfStringByte_swiginit(self, _TDataStd.new_TDataStd_DataMapOfStringByte(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringByte &
        :rtype: TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringByte &
        :rtype: TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Standard_Byte &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringByte_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapOfStringByte self)"""
        return _TDataStd.TDataStd_DataMapOfStringByte__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapOfStringByte.Assign = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Assign, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.Set = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Set, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.ReSize = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_ReSize, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.Clear = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Clear, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.Bind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Bind, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.IsBound = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_IsBound, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.UnBind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_UnBind, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.Find = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Find, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.ChangeFind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_ChangeFind, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.Find1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_Find1, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte.ChangeFind1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte_ChangeFind1, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringByte__kill_pointed, None, TDataStd_DataMapOfStringByte)
TDataStd_DataMapOfStringByte_swigregister = _TDataStd.TDataStd_DataMapOfStringByte_swigregister
TDataStd_DataMapOfStringByte_swigregister(TDataStd_DataMapOfStringByte)

class TDataStd_DataMapOfStringHArray1OfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_TDataStd_DataMapOfStringHArray1OfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Handle_TColStd_HArray1OfInteger &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapOfStringHArray1OfInteger self)"""
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapOfStringHArray1OfInteger.Assign = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Assign, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.Set = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Set, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.ReSize = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ReSize, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.Clear = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Clear, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.Bind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Bind, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.IsBound = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_IsBound, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.UnBind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_UnBind, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.Find = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Find, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.ChangeFind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeFind, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.Find1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Find1, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger.ChangeFind1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeFind1, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfInteger__kill_pointed, None, TDataStd_DataMapOfStringHArray1OfInteger)
TDataStd_DataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_swigregister
TDataStd_DataMapOfStringHArray1OfInteger_swigregister(TDataStd_DataMapOfStringHArray1OfInteger)

class TDataStd_DataMapOfStringHArray1OfReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_TDataStd_DataMapOfStringHArray1OfReal(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapOfStringHArray1OfReal self)"""
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapOfStringHArray1OfReal.Assign = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Assign, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.Set = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Set, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.ReSize = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ReSize, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.Clear = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Clear, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.Bind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Bind, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.IsBound = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_IsBound, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.UnBind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_UnBind, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.Find = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Find, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.ChangeFind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeFind, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.Find1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Find1, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal.ChangeFind1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeFind1, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringHArray1OfReal__kill_pointed, None, TDataStd_DataMapOfStringHArray1OfReal)
TDataStd_DataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_swigregister
TDataStd_DataMapOfStringHArray1OfReal_swigregister(TDataStd_DataMapOfStringHArray1OfReal)

class TDataStd_DataMapOfStringReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapOfStringReal_swiginit(self, _TDataStd.new_TDataStd_DataMapOfStringReal(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringReal &
        :rtype: TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringReal &
        :rtype: TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: float &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: float

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: float

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringReal_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapOfStringReal self)"""
        return _TDataStd.TDataStd_DataMapOfStringReal__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapOfStringReal.Assign = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Assign, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.Set = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Set, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.ReSize = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_ReSize, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.Clear = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Clear, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.Bind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Bind, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.IsBound = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_IsBound, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.UnBind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_UnBind, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.Find = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Find, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.ChangeFind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_ChangeFind, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.Find1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_Find1, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal.ChangeFind1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal_ChangeFind1, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringReal__kill_pointed, None, TDataStd_DataMapOfStringReal)
TDataStd_DataMapOfStringReal_swigregister = _TDataStd.TDataStd_DataMapOfStringReal_swigregister
TDataStd_DataMapOfStringReal_swigregister(TDataStd_DataMapOfStringReal)

class TDataStd_DataMapOfStringString(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDataStd.TDataStd_DataMapOfStringString_swiginit(self, _TDataStd.new_TDataStd_DataMapOfStringString(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringString &
        :rtype: TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_DataMapOfStringString &
        :rtype: TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringString_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_DataMapOfStringString_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_DataMapOfStringString_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringString_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TDataStd.TDataStd_DataMapOfStringString_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DataMapOfStringString self)"""
        return _TDataStd.TDataStd_DataMapOfStringString__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DataMapOfStringString.Assign = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Assign, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.Set = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Set, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.ReSize = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_ReSize, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.Clear = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Clear, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.Bind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Bind, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.IsBound = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_IsBound, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.UnBind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_UnBind, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.Find = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Find, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.ChangeFind = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_ChangeFind, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.Find1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_Find1, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString.ChangeFind1 = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString_ChangeFind1, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DataMapOfStringString__kill_pointed, None, TDataStd_DataMapOfStringString)
TDataStd_DataMapOfStringString_swigregister = _TDataStd.TDataStd_DataMapOfStringString_swigregister
TDataStd_DataMapOfStringString_swigregister(TDataStd_DataMapOfStringString)

class TDataStd_DeltaOnModificationOfByteArray(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param Arr:
        :type Arr: Handle_TDataStd_ByteArray &
        :rtype: None

        """
        _TDataStd.TDataStd_DeltaOnModificationOfByteArray_swiginit(self, _TDataStd.new_TDataStd_DeltaOnModificationOfByteArray(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DeltaOnModificationOfByteArray self)"""
        return _TDataStd.TDataStd_DeltaOnModificationOfByteArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DeltaOnModificationOfByteArray self) -> Handle_TDataStd_DeltaOnModificationOfByteArray"""
        return _TDataStd.TDataStd_DeltaOnModificationOfByteArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DeltaOnModificationOfByteArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfByteArray__kill_pointed, None, TDataStd_DeltaOnModificationOfByteArray)
TDataStd_DeltaOnModificationOfByteArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfByteArray_GetHandle, None, TDataStd_DeltaOnModificationOfByteArray)
TDataStd_DeltaOnModificationOfByteArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfByteArray_swigregister
TDataStd_DeltaOnModificationOfByteArray_swigregister(TDataStd_DeltaOnModificationOfByteArray)

class Handle_TDataStd_DeltaOnModificationOfByteArray(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_swiginit(self, _TDataStd.new_Handle_TDataStd_DeltaOnModificationOfByteArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DeltaOnModificationOfByteArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_Nullify, None, Handle_TDataStd_DeltaOnModificationOfByteArray)
Handle_TDataStd_DeltaOnModificationOfByteArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_IsNull, None, Handle_TDataStd_DeltaOnModificationOfByteArray)
Handle_TDataStd_DeltaOnModificationOfByteArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_GetObject, None, Handle_TDataStd_DeltaOnModificationOfByteArray)
Handle_TDataStd_DeltaOnModificationOfByteArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray__kill_pointed, None, Handle_TDataStd_DeltaOnModificationOfByteArray)
Handle_TDataStd_DeltaOnModificationOfByteArray_swigregister = _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_swigregister
Handle_TDataStd_DeltaOnModificationOfByteArray_swigregister(Handle_TDataStd_DeltaOnModificationOfByteArray)

def Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast(AnObject)
Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast

class TDataStd_DeltaOnModificationOfExtStringArray(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param Arr:
        :type Arr: Handle_TDataStd_ExtStringArray &
        :rtype: None

        """
        _TDataStd.TDataStd_DeltaOnModificationOfExtStringArray_swiginit(self, _TDataStd.new_TDataStd_DeltaOnModificationOfExtStringArray(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DeltaOnModificationOfExtStringArray self)"""
        return _TDataStd.TDataStd_DeltaOnModificationOfExtStringArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DeltaOnModificationOfExtStringArray self) -> Handle_TDataStd_DeltaOnModificationOfExtStringArray"""
        return _TDataStd.TDataStd_DeltaOnModificationOfExtStringArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DeltaOnModificationOfExtStringArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfExtStringArray__kill_pointed, None, TDataStd_DeltaOnModificationOfExtStringArray)
TDataStd_DeltaOnModificationOfExtStringArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfExtStringArray_GetHandle, None, TDataStd_DeltaOnModificationOfExtStringArray)
TDataStd_DeltaOnModificationOfExtStringArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfExtStringArray_swigregister
TDataStd_DeltaOnModificationOfExtStringArray_swigregister(TDataStd_DeltaOnModificationOfExtStringArray)

class Handle_TDataStd_DeltaOnModificationOfExtStringArray(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_swiginit(self, _TDataStd.new_Handle_TDataStd_DeltaOnModificationOfExtStringArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DeltaOnModificationOfExtStringArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_Nullify, None, Handle_TDataStd_DeltaOnModificationOfExtStringArray)
Handle_TDataStd_DeltaOnModificationOfExtStringArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_IsNull, None, Handle_TDataStd_DeltaOnModificationOfExtStringArray)
Handle_TDataStd_DeltaOnModificationOfExtStringArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_GetObject, None, Handle_TDataStd_DeltaOnModificationOfExtStringArray)
Handle_TDataStd_DeltaOnModificationOfExtStringArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray__kill_pointed, None, Handle_TDataStd_DeltaOnModificationOfExtStringArray)
Handle_TDataStd_DeltaOnModificationOfExtStringArray_swigregister = _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_swigregister
Handle_TDataStd_DeltaOnModificationOfExtStringArray_swigregister(Handle_TDataStd_DeltaOnModificationOfExtStringArray)

def Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast(AnObject)
Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast

class TDataStd_DeltaOnModificationOfIntArray(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param Arr:
        :type Arr: Handle_TDataStd_IntegerArray &
        :rtype: None

        """
        _TDataStd.TDataStd_DeltaOnModificationOfIntArray_swiginit(self, _TDataStd.new_TDataStd_DeltaOnModificationOfIntArray(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DeltaOnModificationOfIntArray self)"""
        return _TDataStd.TDataStd_DeltaOnModificationOfIntArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DeltaOnModificationOfIntArray self) -> Handle_TDataStd_DeltaOnModificationOfIntArray"""
        return _TDataStd.TDataStd_DeltaOnModificationOfIntArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DeltaOnModificationOfIntArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfIntArray__kill_pointed, None, TDataStd_DeltaOnModificationOfIntArray)
TDataStd_DeltaOnModificationOfIntArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfIntArray_GetHandle, None, TDataStd_DeltaOnModificationOfIntArray)
TDataStd_DeltaOnModificationOfIntArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfIntArray_swigregister
TDataStd_DeltaOnModificationOfIntArray_swigregister(TDataStd_DeltaOnModificationOfIntArray)

class Handle_TDataStd_DeltaOnModificationOfIntArray(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_swiginit(self, _TDataStd.new_Handle_TDataStd_DeltaOnModificationOfIntArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DeltaOnModificationOfIntArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_Nullify, None, Handle_TDataStd_DeltaOnModificationOfIntArray)
Handle_TDataStd_DeltaOnModificationOfIntArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_IsNull, None, Handle_TDataStd_DeltaOnModificationOfIntArray)
Handle_TDataStd_DeltaOnModificationOfIntArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_GetObject, None, Handle_TDataStd_DeltaOnModificationOfIntArray)
Handle_TDataStd_DeltaOnModificationOfIntArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray__kill_pointed, None, Handle_TDataStd_DeltaOnModificationOfIntArray)
Handle_TDataStd_DeltaOnModificationOfIntArray_swigregister = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_swigregister
Handle_TDataStd_DeltaOnModificationOfIntArray_swigregister(Handle_TDataStd_DeltaOnModificationOfIntArray)

def Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast(AnObject)
Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast

class TDataStd_DeltaOnModificationOfIntPackedMap(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param Arr:
        :type Arr: Handle_TDataStd_IntPackedMap &
        :rtype: None

        """
        _TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap_swiginit(self, _TDataStd.new_TDataStd_DeltaOnModificationOfIntPackedMap(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DeltaOnModificationOfIntPackedMap self)"""
        return _TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DeltaOnModificationOfIntPackedMap self) -> Handle_TDataStd_DeltaOnModificationOfIntPackedMap"""
        return _TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DeltaOnModificationOfIntPackedMap._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap__kill_pointed, None, TDataStd_DeltaOnModificationOfIntPackedMap)
TDataStd_DeltaOnModificationOfIntPackedMap.GetHandle = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap_GetHandle, None, TDataStd_DeltaOnModificationOfIntPackedMap)
TDataStd_DeltaOnModificationOfIntPackedMap_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap_swigregister
TDataStd_DeltaOnModificationOfIntPackedMap_swigregister(TDataStd_DeltaOnModificationOfIntPackedMap)

class Handle_TDataStd_DeltaOnModificationOfIntPackedMap(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_swiginit(self, _TDataStd.new_Handle_TDataStd_DeltaOnModificationOfIntPackedMap(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DeltaOnModificationOfIntPackedMap.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_Nullify, None, Handle_TDataStd_DeltaOnModificationOfIntPackedMap)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_IsNull, None, Handle_TDataStd_DeltaOnModificationOfIntPackedMap)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_GetObject, None, Handle_TDataStd_DeltaOnModificationOfIntPackedMap)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap__kill_pointed, None, Handle_TDataStd_DeltaOnModificationOfIntPackedMap)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_swigregister = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_swigregister
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_swigregister(Handle_TDataStd_DeltaOnModificationOfIntPackedMap)

def Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast(AnObject)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast

class TDataStd_DeltaOnModificationOfRealArray(OCC.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.

        :param Arr:
        :type Arr: Handle_TDataStd_RealArray &
        :rtype: None

        """
        _TDataStd.TDataStd_DeltaOnModificationOfRealArray_swiginit(self, _TDataStd.new_TDataStd_DeltaOnModificationOfRealArray(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_DeltaOnModificationOfRealArray self)"""
        return _TDataStd.TDataStd_DeltaOnModificationOfRealArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_DeltaOnModificationOfRealArray self) -> Handle_TDataStd_DeltaOnModificationOfRealArray"""
        return _TDataStd.TDataStd_DeltaOnModificationOfRealArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_DeltaOnModificationOfRealArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfRealArray__kill_pointed, None, TDataStd_DeltaOnModificationOfRealArray)
TDataStd_DeltaOnModificationOfRealArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_DeltaOnModificationOfRealArray_GetHandle, None, TDataStd_DeltaOnModificationOfRealArray)
TDataStd_DeltaOnModificationOfRealArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfRealArray_swigregister
TDataStd_DeltaOnModificationOfRealArray_swigregister(TDataStd_DeltaOnModificationOfRealArray)

class Handle_TDataStd_DeltaOnModificationOfRealArray(OCC.TDF.Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_swiginit(self, _TDataStd.new_Handle_TDataStd_DeltaOnModificationOfRealArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_DeltaOnModificationOfRealArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_Nullify, None, Handle_TDataStd_DeltaOnModificationOfRealArray)
Handle_TDataStd_DeltaOnModificationOfRealArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_IsNull, None, Handle_TDataStd_DeltaOnModificationOfRealArray)
Handle_TDataStd_DeltaOnModificationOfRealArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_GetObject, None, Handle_TDataStd_DeltaOnModificationOfRealArray)
Handle_TDataStd_DeltaOnModificationOfRealArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray__kill_pointed, None, Handle_TDataStd_DeltaOnModificationOfRealArray)
Handle_TDataStd_DeltaOnModificationOfRealArray_swigregister = _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_swigregister
Handle_TDataStd_DeltaOnModificationOfRealArray_swigregister(Handle_TDataStd_DeltaOnModificationOfRealArray)

def Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast(AnObject)
Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast

class TDataStd_Directory(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Find(*args):
        """
        * class methods ============= Searches for a directory attribute on the label current, or on one of the father labels of current. If a directory attribute is found, true is returned, and the attribute found is set as D.

        :param current:
        :type current: TDF_Label &
        :param D:
        :type D: Handle_TDataStd_Directory &
        :rtype: bool

        """
        return _TDataStd.TDataStd_Directory_Find(*args)

    Find = staticmethod(Find)

    def New(*args):
        """
        * Creates an enpty Directory attribute, located at <label>. Raises if <label> has attribute

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Directory

        """
        return _TDataStd.TDataStd_Directory_New(*args)

    New = staticmethod(New)

    def AddDirectory(*args):
        """
        * Creates a new sub-label and sets the sub-directory dir on that label.

        :param dir:
        :type dir: Handle_TDataStd_Directory &
        :rtype: Handle_TDataStd_Directory

        """
        return _TDataStd.TDataStd_Directory_AddDirectory(*args)

    AddDirectory = staticmethod(AddDirectory)

    def MakeObjectLabel(*args):
        """
        * Makes new label and returns it to insert other object attributes (sketch,part...etc...)

        :param dir:
        :type dir: Handle_TDataStd_Directory &
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_Directory_MakeObjectLabel(*args)

    MakeObjectLabel = staticmethod(MakeObjectLabel)

    def GetID(*args):
        """
        * Directory methods ===============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Directory_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Directory_swiginit(self, _TDataStd.new_TDataStd_Directory(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_Directory self) -> std::string"""
        return _TDataStd.TDataStd_Directory_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Directory self)"""
        return _TDataStd.TDataStd_Directory__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Directory self) -> Handle_TDataStd_Directory"""
        return _TDataStd.TDataStd_Directory_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Directory.DumpToString = new_instancemethod(_TDataStd.TDataStd_Directory_DumpToString, None, TDataStd_Directory)
TDataStd_Directory._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Directory__kill_pointed, None, TDataStd_Directory)
TDataStd_Directory.GetHandle = new_instancemethod(_TDataStd.TDataStd_Directory_GetHandle, None, TDataStd_Directory)
TDataStd_Directory_swigregister = _TDataStd.TDataStd_Directory_swigregister
TDataStd_Directory_swigregister(TDataStd_Directory)

def TDataStd_Directory_Find(*args):
    """
    * class methods ============= Searches for a directory attribute on the label current, or on one of the father labels of current. If a directory attribute is found, true is returned, and the attribute found is set as D.

    :param current:
    :type current: TDF_Label &
    :param D:
    :type D: Handle_TDataStd_Directory &
    :rtype: bool

    """
    return _TDataStd.TDataStd_Directory_Find(*args)

def TDataStd_Directory_New(*args):
    """
    * Creates an enpty Directory attribute, located at <label>. Raises if <label> has attribute

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_Directory

    """
    return _TDataStd.TDataStd_Directory_New(*args)

def TDataStd_Directory_AddDirectory(*args):
    """
    * Creates a new sub-label and sets the sub-directory dir on that label.

    :param dir:
    :type dir: Handle_TDataStd_Directory &
    :rtype: Handle_TDataStd_Directory

    """
    return _TDataStd.TDataStd_Directory_AddDirectory(*args)

def TDataStd_Directory_MakeObjectLabel(*args):
    """
    * Makes new label and returns it to insert other object attributes (sketch,part...etc...)

    :param dir:
    :type dir: Handle_TDataStd_Directory &
    :rtype: TDF_Label

    """
    return _TDataStd.TDataStd_Directory_MakeObjectLabel(*args)

def TDataStd_Directory_GetID(*args):
    """
    * Directory methods ===============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Directory_GetID(*args)

class Handle_TDataStd_Directory(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Directory_swiginit(self, _TDataStd.new_Handle_TDataStd_Directory(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Directory_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Directory.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Directory_Nullify, None, Handle_TDataStd_Directory)
Handle_TDataStd_Directory.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Directory_IsNull, None, Handle_TDataStd_Directory)
Handle_TDataStd_Directory.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Directory_GetObject, None, Handle_TDataStd_Directory)
Handle_TDataStd_Directory._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Directory__kill_pointed, None, Handle_TDataStd_Directory)
Handle_TDataStd_Directory_swigregister = _TDataStd.Handle_TDataStd_Directory_swigregister
Handle_TDataStd_Directory_swigregister(Handle_TDataStd_Directory)

def Handle_TDataStd_Directory_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Directory_DownCast(AnObject)
Handle_TDataStd_Directory_DownCast = _TDataStd.Handle_TDataStd_Directory_DownCast

class TDataStd_Expression(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Expression_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Find, or create, an Expression attribute. Expressionmethods ============

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Expression

        """
        return _TDataStd.TDataStd_Expression_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Expression_swiginit(self, _TDataStd.new_TDataStd_Expression(*args))

    def Name(self, *args):
        """
        * build and return the expression name

        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Expression_Name(self, *args)


    def SetExpression(self, *args):
        """
        :param E:
        :type E: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_Expression_SetExpression(self, *args)


    def GetExpression(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Expression_GetExpression(self, *args)


    def GetVariables(self, *args):
        """
        :rtype: TDF_AttributeList

        """
        return _TDataStd.TDataStd_Expression_GetVariables(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Expression self) -> std::string"""
        return _TDataStd.TDataStd_Expression_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Expression self)"""
        return _TDataStd.TDataStd_Expression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Expression self) -> Handle_TDataStd_Expression"""
        return _TDataStd.TDataStd_Expression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Expression.Name = new_instancemethod(_TDataStd.TDataStd_Expression_Name, None, TDataStd_Expression)
TDataStd_Expression.SetExpression = new_instancemethod(_TDataStd.TDataStd_Expression_SetExpression, None, TDataStd_Expression)
TDataStd_Expression.GetExpression = new_instancemethod(_TDataStd.TDataStd_Expression_GetExpression, None, TDataStd_Expression)
TDataStd_Expression.GetVariables = new_instancemethod(_TDataStd.TDataStd_Expression_GetVariables, None, TDataStd_Expression)
TDataStd_Expression.DumpToString = new_instancemethod(_TDataStd.TDataStd_Expression_DumpToString, None, TDataStd_Expression)
TDataStd_Expression._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Expression__kill_pointed, None, TDataStd_Expression)
TDataStd_Expression.GetHandle = new_instancemethod(_TDataStd.TDataStd_Expression_GetHandle, None, TDataStd_Expression)
TDataStd_Expression_swigregister = _TDataStd.TDataStd_Expression_swigregister
TDataStd_Expression_swigregister(TDataStd_Expression)

def TDataStd_Expression_GetID(*args):
    """
    * class methods =============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Expression_GetID(*args)

def TDataStd_Expression_Set(*args):
    """
    * Find, or create, an Expression attribute. Expressionmethods ============

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_Expression

    """
    return _TDataStd.TDataStd_Expression_Set(*args)

class Handle_TDataStd_Expression(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Expression_swiginit(self, _TDataStd.new_Handle_TDataStd_Expression(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Expression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Expression.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Expression_Nullify, None, Handle_TDataStd_Expression)
Handle_TDataStd_Expression.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Expression_IsNull, None, Handle_TDataStd_Expression)
Handle_TDataStd_Expression.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Expression_GetObject, None, Handle_TDataStd_Expression)
Handle_TDataStd_Expression._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Expression__kill_pointed, None, Handle_TDataStd_Expression)
Handle_TDataStd_Expression_swigregister = _TDataStd.Handle_TDataStd_Expression_swigregister
Handle_TDataStd_Expression_swigregister(Handle_TDataStd_Expression)

def Handle_TDataStd_Expression_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Expression_DownCast(AnObject)
Handle_TDataStd_Expression_DownCast = _TDataStd.Handle_TDataStd_Expression_DownCast

class TDataStd_ExtStringArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for the attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_ExtStringArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds, or creates, an ExtStringArray attribute with <lower> and <upper> bounds. The ExtStringArray attribute is returned. If <isDelta> == False, DefaultDeltaOnModification is used. 	 If attribute is already set, all input parameters are refused and the found attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :param isDelta: default value is Standard_False
        :type isDelta: bool
        :rtype: Handle_TDataStd_ExtStringArray

        """
        return _TDataStd.TDataStd_ExtStringArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initializes the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param Index:
        :type Index: int
        :param Value:
        :type Value: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Returns the value of the <Index>th element of the array

        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Return the lower bound.

        :rtype: int

        """
        return _TDataStd.TDataStd_ExtStringArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Return the upper bound

        :rtype: int

        """
        return _TDataStd.TDataStd_ExtStringArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Return the number of elements of <self>.

        :rtype: int

        """
        return _TDataStd.TDataStd_ExtStringArray_Length(self, *args)


    def ChangeArray(self, *args):
        """
        * Sets the inner array <myValue> of the ExtStringArray attribute to <newArray>. If value of <newArray> differs from <myValue>, Backup performed and myValue refers to new instance of HArray1OfExtendedString that holds <newArray> values If <isCheckItems> equal True each item of <newArray> will be checked with each item of <myValue> for coincidence (to avoid backup).

        :param newArray:
        :type newArray: Handle_TColStd_HArray1OfExtendedString &
        :param isCheckItems: default value is Standard_True
        :type isCheckItems: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringArray_ChangeArray(self, *args)


    def Array(self, *args):
        """
        * Return the inner array of the ExtStringArray attribute

        :rtype: Handle_TColStd_HArray1OfExtendedString

        """
        return _TDataStd.TDataStd_ExtStringArray_Array(self, *args)


    def GetDelta(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ExtStringArray_GetDelta(self, *args)


    def SetDelta(self, *args):
        """
        * for internal use only!

        :param isDelta:
        :type isDelta: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringArray_SetDelta(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ExtStringArray_swiginit(self, _TDataStd.new_TDataStd_ExtStringArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_ExtStringArray self) -> std::string"""
        return _TDataStd.TDataStd_ExtStringArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ExtStringArray self)"""
        return _TDataStd.TDataStd_ExtStringArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ExtStringArray self) -> Handle_TDataStd_ExtStringArray"""
        return _TDataStd.TDataStd_ExtStringArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ExtStringArray.Init = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Init, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.SetValue = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_SetValue, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.Value = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Value, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.Lower = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Lower, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.Upper = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Upper, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.Length = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Length, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.ChangeArray = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_ChangeArray, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.Array = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_Array, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.GetDelta = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_GetDelta, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.SetDelta = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_SetDelta, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_DumpToString, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ExtStringArray__kill_pointed, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_ExtStringArray_GetHandle, None, TDataStd_ExtStringArray)
TDataStd_ExtStringArray_swigregister = _TDataStd.TDataStd_ExtStringArray_swigregister
TDataStd_ExtStringArray_swigregister(TDataStd_ExtStringArray)

def TDataStd_ExtStringArray_GetID(*args):
    """
    * class methods ============= Returns the GUID for the attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_ExtStringArray_GetID(*args)

def TDataStd_ExtStringArray_Set(*args):
    """
    * Finds, or creates, an ExtStringArray attribute with <lower> and <upper> bounds. The ExtStringArray attribute is returned. If <isDelta> == False, DefaultDeltaOnModification is used. 	 If attribute is already set, all input parameters are refused and the found attribute is returned.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :param isDelta: default value is Standard_False
    :type isDelta: bool
    :rtype: Handle_TDataStd_ExtStringArray

    """
    return _TDataStd.TDataStd_ExtStringArray_Set(*args)

class Handle_TDataStd_ExtStringArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ExtStringArray_swiginit(self, _TDataStd.new_Handle_TDataStd_ExtStringArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ExtStringArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ExtStringArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringArray_Nullify, None, Handle_TDataStd_ExtStringArray)
Handle_TDataStd_ExtStringArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringArray_IsNull, None, Handle_TDataStd_ExtStringArray)
Handle_TDataStd_ExtStringArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringArray_GetObject, None, Handle_TDataStd_ExtStringArray)
Handle_TDataStd_ExtStringArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringArray__kill_pointed, None, Handle_TDataStd_ExtStringArray)
Handle_TDataStd_ExtStringArray_swigregister = _TDataStd.Handle_TDataStd_ExtStringArray_swigregister
Handle_TDataStd_ExtStringArray_swigregister(Handle_TDataStd_ExtStringArray)

def Handle_TDataStd_ExtStringArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ExtStringArray_DownCast(AnObject)
Handle_TDataStd_ExtStringArray_DownCast = _TDataStd.Handle_TDataStd_ExtStringArray_DownCast

class TDataStd_ExtStringList(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the list of strings attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_ExtStringList_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a list of string values attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_ExtStringList

        """
        return _TDataStd.TDataStd_ExtStringList_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ExtStringList_swiginit(self, _TDataStd.new_TDataStd_ExtStringList(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ExtStringList_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_ExtStringList_Extent(self, *args)


    def Prepend(self, *args):
        """
        :param value:
        :type value: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param value:
        :type value: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringList_Append(self, *args)


    def InsertBefore(self, *args):
        """
        * Inserts the <value> before the first meet of <before_value>.

        :param value:
        :type value: TCollection_ExtendedString &
        :param before_value:
        :type before_value: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ExtStringList_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        * Inserts the <value> after the first meet of <after_value>.

        :param value:
        :type value: TCollection_ExtendedString &
        :param after_value:
        :type after_value: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ExtStringList_InsertAfter(self, *args)


    def Remove(self, *args):
        """
        * Removes the first meet of the <value>.

        :param value:
        :type value: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ExtStringList_Remove(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ExtStringList_Clear(self, *args)


    def First(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_Last(self, *args)


    def List(self, *args):
        """
        :rtype: TDataStd_ListOfExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_List(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_ExtStringList self) -> std::string"""
        return _TDataStd.TDataStd_ExtStringList_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ExtStringList self)"""
        return _TDataStd.TDataStd_ExtStringList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ExtStringList self) -> Handle_TDataStd_ExtStringList"""
        return _TDataStd.TDataStd_ExtStringList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ExtStringList.IsEmpty = new_instancemethod(_TDataStd.TDataStd_ExtStringList_IsEmpty, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Extent = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Extent, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Prepend = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Prepend, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Append = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Append, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.InsertBefore = new_instancemethod(_TDataStd.TDataStd_ExtStringList_InsertBefore, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.InsertAfter = new_instancemethod(_TDataStd.TDataStd_ExtStringList_InsertAfter, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Remove = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Remove, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Clear = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Clear, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.First = new_instancemethod(_TDataStd.TDataStd_ExtStringList_First, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.Last = new_instancemethod(_TDataStd.TDataStd_ExtStringList_Last, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.List = new_instancemethod(_TDataStd.TDataStd_ExtStringList_List, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.DumpToString = new_instancemethod(_TDataStd.TDataStd_ExtStringList_DumpToString, None, TDataStd_ExtStringList)
TDataStd_ExtStringList._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ExtStringList__kill_pointed, None, TDataStd_ExtStringList)
TDataStd_ExtStringList.GetHandle = new_instancemethod(_TDataStd.TDataStd_ExtStringList_GetHandle, None, TDataStd_ExtStringList)
TDataStd_ExtStringList_swigregister = _TDataStd.TDataStd_ExtStringList_swigregister
TDataStd_ExtStringList_swigregister(TDataStd_ExtStringList)

def TDataStd_ExtStringList_GetID(*args):
    """
    * Static methods ============== Returns the ID of the list of strings attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_ExtStringList_GetID(*args)

def TDataStd_ExtStringList_Set(*args):
    """
    * Finds or creates a list of string values attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_ExtStringList

    """
    return _TDataStd.TDataStd_ExtStringList_Set(*args)

class Handle_TDataStd_ExtStringList(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ExtStringList_swiginit(self, _TDataStd.new_Handle_TDataStd_ExtStringList(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ExtStringList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ExtStringList.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringList_Nullify, None, Handle_TDataStd_ExtStringList)
Handle_TDataStd_ExtStringList.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringList_IsNull, None, Handle_TDataStd_ExtStringList)
Handle_TDataStd_ExtStringList.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringList_GetObject, None, Handle_TDataStd_ExtStringList)
Handle_TDataStd_ExtStringList._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ExtStringList__kill_pointed, None, Handle_TDataStd_ExtStringList)
Handle_TDataStd_ExtStringList_swigregister = _TDataStd.Handle_TDataStd_ExtStringList_swigregister
Handle_TDataStd_ExtStringList_swigregister(Handle_TDataStd_ExtStringList)

def Handle_TDataStd_ExtStringList_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ExtStringList_DownCast(AnObject)
Handle_TDataStd_ExtStringList_DownCast = _TDataStd.Handle_TDataStd_ExtStringList_DownCast

class TDataStd_HDataMapOfStringByte(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TDataStd_DataMapOfStringByte &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringByte_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringByte(*args))

    def Map(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_HDataMapOfStringByte_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_HDataMapOfStringByte_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringByte self)"""
        return _TDataStd.TDataStd_HDataMapOfStringByte__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringByte self) -> Handle_TDataStd_HDataMapOfStringByte"""
        return _TDataStd.TDataStd_HDataMapOfStringByte_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringByte.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringByte_Map, None, TDataStd_HDataMapOfStringByte)
TDataStd_HDataMapOfStringByte.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringByte_ChangeMap, None, TDataStd_HDataMapOfStringByte)
TDataStd_HDataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringByte__kill_pointed, None, TDataStd_HDataMapOfStringByte)
TDataStd_HDataMapOfStringByte.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringByte_GetHandle, None, TDataStd_HDataMapOfStringByte)
TDataStd_HDataMapOfStringByte_swigregister = _TDataStd.TDataStd_HDataMapOfStringByte_swigregister
TDataStd_HDataMapOfStringByte_swigregister(TDataStd_HDataMapOfStringByte)

class Handle_TDataStd_HDataMapOfStringByte(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringByte_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringByte(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringByte_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringByte.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringByte_Nullify, None, Handle_TDataStd_HDataMapOfStringByte)
Handle_TDataStd_HDataMapOfStringByte.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringByte_IsNull, None, Handle_TDataStd_HDataMapOfStringByte)
Handle_TDataStd_HDataMapOfStringByte.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringByte_GetObject, None, Handle_TDataStd_HDataMapOfStringByte)
Handle_TDataStd_HDataMapOfStringByte._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringByte__kill_pointed, None, Handle_TDataStd_HDataMapOfStringByte)
Handle_TDataStd_HDataMapOfStringByte_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringByte_swigregister
Handle_TDataStd_HDataMapOfStringByte_swigregister(Handle_TDataStd_HDataMapOfStringByte)

def Handle_TDataStd_HDataMapOfStringByte_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringByte_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringByte_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringByte_DownCast

class TDataStd_HDataMapOfStringHArray1OfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringHArray1OfInteger(*args))

    def Map(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringHArray1OfInteger self)"""
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringHArray1OfInteger self) -> Handle_TDataStd_HDataMapOfStringHArray1OfInteger"""
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringHArray1OfInteger.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_Map, None, TDataStd_HDataMapOfStringHArray1OfInteger)
TDataStd_HDataMapOfStringHArray1OfInteger.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_ChangeMap, None, TDataStd_HDataMapOfStringHArray1OfInteger)
TDataStd_HDataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger__kill_pointed, None, TDataStd_HDataMapOfStringHArray1OfInteger)
TDataStd_HDataMapOfStringHArray1OfInteger.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_GetHandle, None, TDataStd_HDataMapOfStringHArray1OfInteger)
TDataStd_HDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_swigregister
TDataStd_HDataMapOfStringHArray1OfInteger_swigregister(TDataStd_HDataMapOfStringHArray1OfInteger)

class Handle_TDataStd_HDataMapOfStringHArray1OfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringHArray1OfInteger(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringHArray1OfInteger.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_Nullify, None, Handle_TDataStd_HDataMapOfStringHArray1OfInteger)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_IsNull, None, Handle_TDataStd_HDataMapOfStringHArray1OfInteger)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_GetObject, None, Handle_TDataStd_HDataMapOfStringHArray1OfInteger)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger__kill_pointed, None, Handle_TDataStd_HDataMapOfStringHArray1OfInteger)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_swigregister
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_swigregister(Handle_TDataStd_HDataMapOfStringHArray1OfInteger)

def Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast

class TDataStd_HDataMapOfStringHArray1OfReal(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringHArray1OfReal(*args))

    def Map(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringHArray1OfReal self)"""
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringHArray1OfReal self) -> Handle_TDataStd_HDataMapOfStringHArray1OfReal"""
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringHArray1OfReal.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_Map, None, TDataStd_HDataMapOfStringHArray1OfReal)
TDataStd_HDataMapOfStringHArray1OfReal.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_ChangeMap, None, TDataStd_HDataMapOfStringHArray1OfReal)
TDataStd_HDataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfReal__kill_pointed, None, TDataStd_HDataMapOfStringHArray1OfReal)
TDataStd_HDataMapOfStringHArray1OfReal.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_GetHandle, None, TDataStd_HDataMapOfStringHArray1OfReal)
TDataStd_HDataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_swigregister
TDataStd_HDataMapOfStringHArray1OfReal_swigregister(TDataStd_HDataMapOfStringHArray1OfReal)

class Handle_TDataStd_HDataMapOfStringHArray1OfReal(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringHArray1OfReal(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringHArray1OfReal.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_Nullify, None, Handle_TDataStd_HDataMapOfStringHArray1OfReal)
Handle_TDataStd_HDataMapOfStringHArray1OfReal.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_IsNull, None, Handle_TDataStd_HDataMapOfStringHArray1OfReal)
Handle_TDataStd_HDataMapOfStringHArray1OfReal.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_GetObject, None, Handle_TDataStd_HDataMapOfStringHArray1OfReal)
Handle_TDataStd_HDataMapOfStringHArray1OfReal._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal__kill_pointed, None, Handle_TDataStd_HDataMapOfStringHArray1OfReal)
Handle_TDataStd_HDataMapOfStringHArray1OfReal_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_swigregister
Handle_TDataStd_HDataMapOfStringHArray1OfReal_swigregister(Handle_TDataStd_HDataMapOfStringHArray1OfReal)

def Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast

class TDataStd_HDataMapOfStringInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TColStd_DataMapOfStringInteger &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringInteger_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringInteger(*args))

    def Map(self, *args):
        """
        :rtype: TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringInteger_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringInteger_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringInteger self)"""
        return _TDataStd.TDataStd_HDataMapOfStringInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringInteger self) -> Handle_TDataStd_HDataMapOfStringInteger"""
        return _TDataStd.TDataStd_HDataMapOfStringInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringInteger.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringInteger_Map, None, TDataStd_HDataMapOfStringInteger)
TDataStd_HDataMapOfStringInteger.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringInteger_ChangeMap, None, TDataStd_HDataMapOfStringInteger)
TDataStd_HDataMapOfStringInteger._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringInteger__kill_pointed, None, TDataStd_HDataMapOfStringInteger)
TDataStd_HDataMapOfStringInteger.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringInteger_GetHandle, None, TDataStd_HDataMapOfStringInteger)
TDataStd_HDataMapOfStringInteger_swigregister = _TDataStd.TDataStd_HDataMapOfStringInteger_swigregister
TDataStd_HDataMapOfStringInteger_swigregister(TDataStd_HDataMapOfStringInteger)

class Handle_TDataStd_HDataMapOfStringInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringInteger(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringInteger.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringInteger_Nullify, None, Handle_TDataStd_HDataMapOfStringInteger)
Handle_TDataStd_HDataMapOfStringInteger.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringInteger_IsNull, None, Handle_TDataStd_HDataMapOfStringInteger)
Handle_TDataStd_HDataMapOfStringInteger.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringInteger_GetObject, None, Handle_TDataStd_HDataMapOfStringInteger)
Handle_TDataStd_HDataMapOfStringInteger._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringInteger__kill_pointed, None, Handle_TDataStd_HDataMapOfStringInteger)
Handle_TDataStd_HDataMapOfStringInteger_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_swigregister
Handle_TDataStd_HDataMapOfStringInteger_swigregister(Handle_TDataStd_HDataMapOfStringInteger)

def Handle_TDataStd_HDataMapOfStringInteger_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringInteger_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_DownCast

class TDataStd_HDataMapOfStringReal(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TDataStd_DataMapOfStringReal &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringReal_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringReal(*args))

    def Map(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringReal_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringReal_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringReal self)"""
        return _TDataStd.TDataStd_HDataMapOfStringReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringReal self) -> Handle_TDataStd_HDataMapOfStringReal"""
        return _TDataStd.TDataStd_HDataMapOfStringReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringReal.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringReal_Map, None, TDataStd_HDataMapOfStringReal)
TDataStd_HDataMapOfStringReal.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringReal_ChangeMap, None, TDataStd_HDataMapOfStringReal)
TDataStd_HDataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringReal__kill_pointed, None, TDataStd_HDataMapOfStringReal)
TDataStd_HDataMapOfStringReal.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringReal_GetHandle, None, TDataStd_HDataMapOfStringReal)
TDataStd_HDataMapOfStringReal_swigregister = _TDataStd.TDataStd_HDataMapOfStringReal_swigregister
TDataStd_HDataMapOfStringReal_swigregister(TDataStd_HDataMapOfStringReal)

class Handle_TDataStd_HDataMapOfStringReal(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringReal_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringReal(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringReal.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringReal_Nullify, None, Handle_TDataStd_HDataMapOfStringReal)
Handle_TDataStd_HDataMapOfStringReal.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringReal_IsNull, None, Handle_TDataStd_HDataMapOfStringReal)
Handle_TDataStd_HDataMapOfStringReal.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringReal_GetObject, None, Handle_TDataStd_HDataMapOfStringReal)
Handle_TDataStd_HDataMapOfStringReal._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringReal__kill_pointed, None, Handle_TDataStd_HDataMapOfStringReal)
Handle_TDataStd_HDataMapOfStringReal_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringReal_swigregister
Handle_TDataStd_HDataMapOfStringReal_swigregister(Handle_TDataStd_HDataMapOfStringReal)

def Handle_TDataStd_HDataMapOfStringReal_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringReal_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringReal_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringReal_DownCast

class TDataStd_HDataMapOfStringString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TDataStd_DataMapOfStringString &
        :rtype: None

        """
        _TDataStd.TDataStd_HDataMapOfStringString_swiginit(self, _TDataStd.new_TDataStd_HDataMapOfStringString(*args))

    def Map(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_HDataMapOfStringString_Map(self, *args)


    def ChangeMap(self, *args):
        """
        :rtype: TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_HDataMapOfStringString_ChangeMap(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HDataMapOfStringString self)"""
        return _TDataStd.TDataStd_HDataMapOfStringString__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HDataMapOfStringString self) -> Handle_TDataStd_HDataMapOfStringString"""
        return _TDataStd.TDataStd_HDataMapOfStringString_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HDataMapOfStringString.Map = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringString_Map, None, TDataStd_HDataMapOfStringString)
TDataStd_HDataMapOfStringString.ChangeMap = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringString_ChangeMap, None, TDataStd_HDataMapOfStringString)
TDataStd_HDataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringString__kill_pointed, None, TDataStd_HDataMapOfStringString)
TDataStd_HDataMapOfStringString.GetHandle = new_instancemethod(_TDataStd.TDataStd_HDataMapOfStringString_GetHandle, None, TDataStd_HDataMapOfStringString)
TDataStd_HDataMapOfStringString_swigregister = _TDataStd.TDataStd_HDataMapOfStringString_swigregister
TDataStd_HDataMapOfStringString_swigregister(TDataStd_HDataMapOfStringString)

class Handle_TDataStd_HDataMapOfStringString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HDataMapOfStringString_swiginit(self, _TDataStd.new_Handle_TDataStd_HDataMapOfStringString(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HDataMapOfStringString_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HDataMapOfStringString.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringString_Nullify, None, Handle_TDataStd_HDataMapOfStringString)
Handle_TDataStd_HDataMapOfStringString.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringString_IsNull, None, Handle_TDataStd_HDataMapOfStringString)
Handle_TDataStd_HDataMapOfStringString.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringString_GetObject, None, Handle_TDataStd_HDataMapOfStringString)
Handle_TDataStd_HDataMapOfStringString._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HDataMapOfStringString__kill_pointed, None, Handle_TDataStd_HDataMapOfStringString)
Handle_TDataStd_HDataMapOfStringString_swigregister = _TDataStd.Handle_TDataStd_HDataMapOfStringString_swigregister
Handle_TDataStd_HDataMapOfStringString_swigregister(Handle_TDataStd_HDataMapOfStringString)

def Handle_TDataStd_HDataMapOfStringString_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HDataMapOfStringString_DownCast(AnObject)
Handle_TDataStd_HDataMapOfStringString_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringString_DownCast

class TDataStd_HLabelArray1(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TDF_Label &
        :rtype: None

        """
        _TDataStd.TDataStd_HLabelArray1_swiginit(self, _TDataStd.new_TDataStd_HLabelArray1(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_HLabelArray1_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_HLabelArray1_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_HLabelArray1_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_HLabelArray1_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_HLabelArray1_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_HLabelArray1_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_HLabelArray1_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: TDataStd_LabelArray1

        """
        return _TDataStd.TDataStd_HLabelArray1_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: TDataStd_LabelArray1

        """
        return _TDataStd.TDataStd_HLabelArray1_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_HLabelArray1 self)"""
        return _TDataStd.TDataStd_HLabelArray1__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_HLabelArray1 self) -> Handle_TDataStd_HLabelArray1"""
        return _TDataStd.TDataStd_HLabelArray1_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_HLabelArray1.Init = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Init, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.Length = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Length, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.Lower = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Lower, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.Upper = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Upper, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.SetValue = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_SetValue, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.Value = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Value, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.ChangeValue = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_ChangeValue, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.Array1 = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_Array1, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.ChangeArray1 = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_ChangeArray1, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1._kill_pointed = new_instancemethod(_TDataStd.TDataStd_HLabelArray1__kill_pointed, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1.GetHandle = new_instancemethod(_TDataStd.TDataStd_HLabelArray1_GetHandle, None, TDataStd_HLabelArray1)
TDataStd_HLabelArray1_swigregister = _TDataStd.TDataStd_HLabelArray1_swigregister
TDataStd_HLabelArray1_swigregister(TDataStd_HLabelArray1)

class Handle_TDataStd_HLabelArray1(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_HLabelArray1_swiginit(self, _TDataStd.new_Handle_TDataStd_HLabelArray1(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_HLabelArray1_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_HLabelArray1.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_HLabelArray1_Nullify, None, Handle_TDataStd_HLabelArray1)
Handle_TDataStd_HLabelArray1.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_HLabelArray1_IsNull, None, Handle_TDataStd_HLabelArray1)
Handle_TDataStd_HLabelArray1.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_HLabelArray1_GetObject, None, Handle_TDataStd_HLabelArray1)
Handle_TDataStd_HLabelArray1._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_HLabelArray1__kill_pointed, None, Handle_TDataStd_HLabelArray1)
Handle_TDataStd_HLabelArray1_swigregister = _TDataStd.Handle_TDataStd_HLabelArray1_swigregister
Handle_TDataStd_HLabelArray1_swigregister(Handle_TDataStd_HLabelArray1)

def Handle_TDataStd_HLabelArray1_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_HLabelArray1_DownCast(AnObject)
Handle_TDataStd_HLabelArray1_DownCast = _TDataStd.Handle_TDataStd_HLabelArray1_DownCast

class TDataStd_IntPackedMap(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID of the attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_IntPackedMap_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates an integer map attribute on the given label. If <isDelta> == False, DefaultDeltaOnModification is used. If <isDelta> == True, DeltaOnModification of the current attribute is used. If attribute is already set, input parameter <isDelta> is refused and the found attribute returned. Attribute methods ===================

        :param label:
        :type label: TDF_Label &
        :param isDelta: default value is Standard_False
        :type isDelta: bool
        :rtype: Handle_TDataStd_IntPackedMap

        """
        return _TDataStd.TDataStd_IntPackedMap_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_IntPackedMap_swiginit(self, _TDataStd.new_TDataStd_IntPackedMap(*args))

    def ChangeMap(self, *args):
        """
        :param theMap:
        :type theMap: Handle_TColStd_HPackedMapOfInteger &
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_ChangeMap(self, *args)


    def GetMap(self, *args):
        """
        :rtype: TColStd_PackedMapOfInteger

        """
        return _TDataStd.TDataStd_IntPackedMap_GetMap(self, *args)


    def GetHMap(self, *args):
        """
        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _TDataStd.TDataStd_IntPackedMap_GetHMap(self, *args)


    def Clear(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Clear(self, *args)


    def Add(self, *args):
        """
        :param theKey:
        :type theKey: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Add(self, *args)


    def Remove(self, *args):
        """
        :param theKey:
        :type theKey: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Remove(self, *args)


    def Contains(self, *args):
        """
        :param theKey:
        :type theKey: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Contains(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_IntPackedMap_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_IsEmpty(self, *args)


    def GetDelta(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntPackedMap_GetDelta(self, *args)


    def SetDelta(self, *args):
        """
        * for internal use only!

        :param isDelta:
        :type isDelta: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_IntPackedMap_SetDelta(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_IntPackedMap self) -> std::string"""
        return _TDataStd.TDataStd_IntPackedMap_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_IntPackedMap self)"""
        return _TDataStd.TDataStd_IntPackedMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_IntPackedMap self) -> Handle_TDataStd_IntPackedMap"""
        return _TDataStd.TDataStd_IntPackedMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_IntPackedMap.ChangeMap = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_ChangeMap, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.GetMap = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_GetMap, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.GetHMap = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_GetHMap, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.Clear = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_Clear, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.Add = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_Add, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.Remove = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_Remove, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.Contains = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_Contains, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.Extent = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_Extent, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.IsEmpty = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_IsEmpty, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.GetDelta = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_GetDelta, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.SetDelta = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_SetDelta, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.DumpToString = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_DumpToString, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap._kill_pointed = new_instancemethod(_TDataStd.TDataStd_IntPackedMap__kill_pointed, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap.GetHandle = new_instancemethod(_TDataStd.TDataStd_IntPackedMap_GetHandle, None, TDataStd_IntPackedMap)
TDataStd_IntPackedMap_swigregister = _TDataStd.TDataStd_IntPackedMap_swigregister
TDataStd_IntPackedMap_swigregister(TDataStd_IntPackedMap)

def TDataStd_IntPackedMap_GetID(*args):
    """
    * class methods ============= Returns the GUID of the attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_IntPackedMap_GetID(*args)

def TDataStd_IntPackedMap_Set(*args):
    """
    * Finds or creates an integer map attribute on the given label. If <isDelta> == False, DefaultDeltaOnModification is used. If <isDelta> == True, DeltaOnModification of the current attribute is used. If attribute is already set, input parameter <isDelta> is refused and the found attribute returned. Attribute methods ===================

    :param label:
    :type label: TDF_Label &
    :param isDelta: default value is Standard_False
    :type isDelta: bool
    :rtype: Handle_TDataStd_IntPackedMap

    """
    return _TDataStd.TDataStd_IntPackedMap_Set(*args)

class Handle_TDataStd_IntPackedMap(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_IntPackedMap_swiginit(self, _TDataStd.new_Handle_TDataStd_IntPackedMap(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_IntPackedMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_IntPackedMap.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_IntPackedMap_Nullify, None, Handle_TDataStd_IntPackedMap)
Handle_TDataStd_IntPackedMap.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_IntPackedMap_IsNull, None, Handle_TDataStd_IntPackedMap)
Handle_TDataStd_IntPackedMap.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_IntPackedMap_GetObject, None, Handle_TDataStd_IntPackedMap)
Handle_TDataStd_IntPackedMap._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_IntPackedMap__kill_pointed, None, Handle_TDataStd_IntPackedMap)
Handle_TDataStd_IntPackedMap_swigregister = _TDataStd.Handle_TDataStd_IntPackedMap_swigregister
Handle_TDataStd_IntPackedMap_swigregister(Handle_TDataStd_IntPackedMap)

def Handle_TDataStd_IntPackedMap_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_IntPackedMap_DownCast(AnObject)
Handle_TDataStd_IntPackedMap_DownCast = _TDataStd.Handle_TDataStd_IntPackedMap_DownCast

class TDataStd_Integer(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for integers.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Integer_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        * Finds, or creates, an Integer attribute and sets <value> the Integer attribute is returned. Integer methods ===============

        :param label:
        :type label: TDF_Label &
        :param value:
        :type value: int
        :rtype: Handle_TDataStd_Integer

        :param V:
        :type V: int
        :rtype: None

        """
        return _TDataStd.TDataStd_Integer_Set(self, *args)


    def Get(self, *args):
        """
        * Returns the integer value contained in the attribute.

        :rtype: int

        """
        return _TDataStd.TDataStd_Integer_Get(self, *args)


    def IsCaptured(self, *args):
        """
        * Returns True if there is a reference on the same label

        :rtype: bool

        """
        return _TDataStd.TDataStd_Integer_IsCaptured(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Integer self) -> std::string"""
        return _TDataStd.TDataStd_Integer_DumpToString(self)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Integer_swiginit(self, _TDataStd.new_TDataStd_Integer(*args))

    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Integer self)"""
        return _TDataStd.TDataStd_Integer__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Integer self) -> Handle_TDataStd_Integer"""
        return _TDataStd.TDataStd_Integer_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Integer.Set = new_instancemethod(_TDataStd.TDataStd_Integer_Set, None, TDataStd_Integer)
TDataStd_Integer.Get = new_instancemethod(_TDataStd.TDataStd_Integer_Get, None, TDataStd_Integer)
TDataStd_Integer.IsCaptured = new_instancemethod(_TDataStd.TDataStd_Integer_IsCaptured, None, TDataStd_Integer)
TDataStd_Integer.DumpToString = new_instancemethod(_TDataStd.TDataStd_Integer_DumpToString, None, TDataStd_Integer)
TDataStd_Integer._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Integer__kill_pointed, None, TDataStd_Integer)
TDataStd_Integer.GetHandle = new_instancemethod(_TDataStd.TDataStd_Integer_GetHandle, None, TDataStd_Integer)
TDataStd_Integer_swigregister = _TDataStd.TDataStd_Integer_swigregister
TDataStd_Integer_swigregister(TDataStd_Integer)

def TDataStd_Integer_GetID(*args):
    """
    * class methods ============= Returns the GUID for integers.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Integer_GetID(*args)

class Handle_TDataStd_Integer(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Integer_swiginit(self, _TDataStd.new_Handle_TDataStd_Integer(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Integer_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Integer.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Integer_Nullify, None, Handle_TDataStd_Integer)
Handle_TDataStd_Integer.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Integer_IsNull, None, Handle_TDataStd_Integer)
Handle_TDataStd_Integer.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Integer_GetObject, None, Handle_TDataStd_Integer)
Handle_TDataStd_Integer._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Integer__kill_pointed, None, Handle_TDataStd_Integer)
Handle_TDataStd_Integer_swigregister = _TDataStd.Handle_TDataStd_Integer_swigregister
Handle_TDataStd_Integer_swigregister(Handle_TDataStd_Integer)

def Handle_TDataStd_Integer_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Integer_DownCast(AnObject)
Handle_TDataStd_Integer_DownCast = _TDataStd.Handle_TDataStd_Integer_DownCast

class TDataStd_IntegerArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for arrays of integers.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_IntegerArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates on the <label> an integer array attribute with the specified <lower> and <upper> boundaries. If <isDelta> == False, DefaultDeltaOnModification is used. If attribute is already set, all input parameters are refused and the found attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :param isDelta: default value is Standard_False
        :type isDelta: bool
        :rtype: Handle_TDataStd_IntegerArray

        """
        return _TDataStd.TDataStd_IntegerArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initialize the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param Index:
        :type Index: int
        :param Value:
        :type Value: int
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Return the value of the <Index>th element of the array

        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower boundary of this array of integers.

        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Return the upper boundary of this array of integers.

        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Returns the length of this array of integers in terms of the number of elements it contains.

        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerArray_Length(self, *args)


    def ChangeArray(self, *args):
        """
        * Sets the inner array <myValue> of the IntegerArray attribute to <newArray>. If value of <newArray> differs from <myValue>, Backup performed and myValue refers to new instance of HArray1OfInteger that holds <newArray> values If <isCheckItems> equal True each item of <newArray> will be checked with each item of <myValue> for coincidence (to avoid backup).

        :param newArray:
        :type newArray: Handle_TColStd_HArray1OfInteger &
        :param isCheckItems: default value is Standard_True
        :type isCheckItems: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerArray_ChangeArray(self, *args)


    def Array(self, *args):
        """
        * Return the inner array of the IntegerArray attribute

        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_IntegerArray_Array(self, *args)


    def GetDelta(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntegerArray_GetDelta(self, *args)


    def SetDelta(self, *args):
        """
        * for internal use only!

        :param isDelta:
        :type isDelta: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerArray_SetDelta(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_IntegerArray_swiginit(self, _TDataStd.new_TDataStd_IntegerArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_IntegerArray self) -> std::string"""
        return _TDataStd.TDataStd_IntegerArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_IntegerArray self)"""
        return _TDataStd.TDataStd_IntegerArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_IntegerArray self) -> Handle_TDataStd_IntegerArray"""
        return _TDataStd.TDataStd_IntegerArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_IntegerArray.Init = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Init, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.SetValue = new_instancemethod(_TDataStd.TDataStd_IntegerArray_SetValue, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.Value = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Value, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.Lower = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Lower, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.Upper = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Upper, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.Length = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Length, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.ChangeArray = new_instancemethod(_TDataStd.TDataStd_IntegerArray_ChangeArray, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.Array = new_instancemethod(_TDataStd.TDataStd_IntegerArray_Array, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.GetDelta = new_instancemethod(_TDataStd.TDataStd_IntegerArray_GetDelta, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.SetDelta = new_instancemethod(_TDataStd.TDataStd_IntegerArray_SetDelta, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_IntegerArray_DumpToString, None, TDataStd_IntegerArray)
TDataStd_IntegerArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_IntegerArray__kill_pointed, None, TDataStd_IntegerArray)
TDataStd_IntegerArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_IntegerArray_GetHandle, None, TDataStd_IntegerArray)
TDataStd_IntegerArray_swigregister = _TDataStd.TDataStd_IntegerArray_swigregister
TDataStd_IntegerArray_swigregister(TDataStd_IntegerArray)

def TDataStd_IntegerArray_GetID(*args):
    """
    * class methods ============= Returns the GUID for arrays of integers.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_IntegerArray_GetID(*args)

def TDataStd_IntegerArray_Set(*args):
    """
    * Finds or creates on the <label> an integer array attribute with the specified <lower> and <upper> boundaries. If <isDelta> == False, DefaultDeltaOnModification is used. If attribute is already set, all input parameters are refused and the found attribute is returned.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :param isDelta: default value is Standard_False
    :type isDelta: bool
    :rtype: Handle_TDataStd_IntegerArray

    """
    return _TDataStd.TDataStd_IntegerArray_Set(*args)

class Handle_TDataStd_IntegerArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_IntegerArray_swiginit(self, _TDataStd.new_Handle_TDataStd_IntegerArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_IntegerArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_IntegerArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerArray_Nullify, None, Handle_TDataStd_IntegerArray)
Handle_TDataStd_IntegerArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerArray_IsNull, None, Handle_TDataStd_IntegerArray)
Handle_TDataStd_IntegerArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerArray_GetObject, None, Handle_TDataStd_IntegerArray)
Handle_TDataStd_IntegerArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerArray__kill_pointed, None, Handle_TDataStd_IntegerArray)
Handle_TDataStd_IntegerArray_swigregister = _TDataStd.Handle_TDataStd_IntegerArray_swigregister
Handle_TDataStd_IntegerArray_swigregister(Handle_TDataStd_IntegerArray)

def Handle_TDataStd_IntegerArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_IntegerArray_DownCast(AnObject)
Handle_TDataStd_IntegerArray_DownCast = _TDataStd.Handle_TDataStd_IntegerArray_DownCast

class TDataStd_IntegerList(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the list of integer attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_IntegerList_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a list of integer values attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_IntegerList

        """
        return _TDataStd.TDataStd_IntegerList_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_IntegerList_swiginit(self, _TDataStd.new_TDataStd_IntegerList(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntegerList_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerList_Extent(self, *args)


    def Prepend(self, *args):
        """
        :param value:
        :type value: int
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param value:
        :type value: int
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerList_Append(self, *args)


    def InsertBefore(self, *args):
        """
        * Inserts the <value> before the first meet of <before_value>.

        :param value:
        :type value: int
        :param before_value:
        :type before_value: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        * Inserts the <value> after the first meet of <after_value>.

        :param value:
        :type value: int
        :param after_value:
        :type after_value: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertAfter(self, *args)


    def Remove(self, *args):
        """
        * Removes the first meet of the <value>.

        :param value:
        :type value: int
        :rtype: bool

        """
        return _TDataStd.TDataStd_IntegerList_Remove(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_IntegerList_Clear(self, *args)


    def First(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_IntegerList_Last(self, *args)


    def List(self, *args):
        """
        :rtype: TColStd_ListOfInteger

        """
        return _TDataStd.TDataStd_IntegerList_List(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_IntegerList self) -> std::string"""
        return _TDataStd.TDataStd_IntegerList_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_IntegerList self)"""
        return _TDataStd.TDataStd_IntegerList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_IntegerList self) -> Handle_TDataStd_IntegerList"""
        return _TDataStd.TDataStd_IntegerList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_IntegerList.IsEmpty = new_instancemethod(_TDataStd.TDataStd_IntegerList_IsEmpty, None, TDataStd_IntegerList)
TDataStd_IntegerList.Extent = new_instancemethod(_TDataStd.TDataStd_IntegerList_Extent, None, TDataStd_IntegerList)
TDataStd_IntegerList.Prepend = new_instancemethod(_TDataStd.TDataStd_IntegerList_Prepend, None, TDataStd_IntegerList)
TDataStd_IntegerList.Append = new_instancemethod(_TDataStd.TDataStd_IntegerList_Append, None, TDataStd_IntegerList)
TDataStd_IntegerList.InsertBefore = new_instancemethod(_TDataStd.TDataStd_IntegerList_InsertBefore, None, TDataStd_IntegerList)
TDataStd_IntegerList.InsertAfter = new_instancemethod(_TDataStd.TDataStd_IntegerList_InsertAfter, None, TDataStd_IntegerList)
TDataStd_IntegerList.Remove = new_instancemethod(_TDataStd.TDataStd_IntegerList_Remove, None, TDataStd_IntegerList)
TDataStd_IntegerList.Clear = new_instancemethod(_TDataStd.TDataStd_IntegerList_Clear, None, TDataStd_IntegerList)
TDataStd_IntegerList.First = new_instancemethod(_TDataStd.TDataStd_IntegerList_First, None, TDataStd_IntegerList)
TDataStd_IntegerList.Last = new_instancemethod(_TDataStd.TDataStd_IntegerList_Last, None, TDataStd_IntegerList)
TDataStd_IntegerList.List = new_instancemethod(_TDataStd.TDataStd_IntegerList_List, None, TDataStd_IntegerList)
TDataStd_IntegerList.DumpToString = new_instancemethod(_TDataStd.TDataStd_IntegerList_DumpToString, None, TDataStd_IntegerList)
TDataStd_IntegerList._kill_pointed = new_instancemethod(_TDataStd.TDataStd_IntegerList__kill_pointed, None, TDataStd_IntegerList)
TDataStd_IntegerList.GetHandle = new_instancemethod(_TDataStd.TDataStd_IntegerList_GetHandle, None, TDataStd_IntegerList)
TDataStd_IntegerList_swigregister = _TDataStd.TDataStd_IntegerList_swigregister
TDataStd_IntegerList_swigregister(TDataStd_IntegerList)

def TDataStd_IntegerList_GetID(*args):
    """
    * Static methods ============== Returns the ID of the list of integer attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_IntegerList_GetID(*args)

def TDataStd_IntegerList_Set(*args):
    """
    * Finds or creates a list of integer values attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_IntegerList

    """
    return _TDataStd.TDataStd_IntegerList_Set(*args)

class Handle_TDataStd_IntegerList(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_IntegerList_swiginit(self, _TDataStd.new_Handle_TDataStd_IntegerList(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_IntegerList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_IntegerList.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerList_Nullify, None, Handle_TDataStd_IntegerList)
Handle_TDataStd_IntegerList.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerList_IsNull, None, Handle_TDataStd_IntegerList)
Handle_TDataStd_IntegerList.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerList_GetObject, None, Handle_TDataStd_IntegerList)
Handle_TDataStd_IntegerList._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_IntegerList__kill_pointed, None, Handle_TDataStd_IntegerList)
Handle_TDataStd_IntegerList_swigregister = _TDataStd.Handle_TDataStd_IntegerList_swigregister
Handle_TDataStd_IntegerList_swigregister(Handle_TDataStd_IntegerList)

def Handle_TDataStd_IntegerList_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_IntegerList_DownCast(AnObject)
Handle_TDataStd_IntegerList_DownCast = _TDataStd.Handle_TDataStd_IntegerList_DownCast

class TDataStd_LabelArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TDF_Label &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TDataStd.TDataStd_LabelArray1_swiginit(self, _TDataStd.new_TDataStd_LabelArray1(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_LabelArray1_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_LabelArray1_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_LabelArray1_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_LabelArray1 &
        :rtype: TDataStd_LabelArray1

        """
        return _TDataStd.TDataStd_LabelArray1_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_LabelArray1 &
        :rtype: TDataStd_LabelArray1

        """
        return _TDataStd.TDataStd_LabelArray1_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_LabelArray1_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_LabelArray1_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_LabelArray1_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_LabelArray1_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_LabelArray1_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_LabelArray1_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_LabelArray1.Init = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Init, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Destroy = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Destroy, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.IsAllocated = new_instancemethod(_TDataStd.TDataStd_LabelArray1_IsAllocated, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Assign = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Assign, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Set = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Set, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Length = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Length, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Lower = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Lower, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Upper = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Upper, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.SetValue = new_instancemethod(_TDataStd.TDataStd_LabelArray1_SetValue, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.Value = new_instancemethod(_TDataStd.TDataStd_LabelArray1_Value, None, TDataStd_LabelArray1)
TDataStd_LabelArray1.ChangeValue = new_instancemethod(_TDataStd.TDataStd_LabelArray1_ChangeValue, None, TDataStd_LabelArray1)
TDataStd_LabelArray1._kill_pointed = new_instancemethod(_TDataStd.TDataStd_LabelArray1__kill_pointed, None, TDataStd_LabelArray1)
TDataStd_LabelArray1_swigregister = _TDataStd.TDataStd_LabelArray1_swigregister
TDataStd_LabelArray1_swigregister(TDataStd_LabelArray1)

class TDataStd_ListIteratorOfListOfByte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TDataStd_ListOfByte &
        :rtype: None

        """
        _TDataStd.TDataStd_ListIteratorOfListOfByte_swiginit(self, _TDataStd.new_TDataStd_ListIteratorOfListOfByte(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: TDataStd_ListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListIteratorOfListOfByte.Initialize = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfByte_Initialize, None, TDataStd_ListIteratorOfListOfByte)
TDataStd_ListIteratorOfListOfByte.More = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfByte_More, None, TDataStd_ListIteratorOfListOfByte)
TDataStd_ListIteratorOfListOfByte.Next = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfByte_Next, None, TDataStd_ListIteratorOfListOfByte)
TDataStd_ListIteratorOfListOfByte.Value = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfByte_Value, None, TDataStd_ListIteratorOfListOfByte)
TDataStd_ListIteratorOfListOfByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfByte__kill_pointed, None, TDataStd_ListIteratorOfListOfByte)
TDataStd_ListIteratorOfListOfByte_swigregister = _TDataStd.TDataStd_ListIteratorOfListOfByte_swigregister
TDataStd_ListIteratorOfListOfByte_swigregister(TDataStd_ListIteratorOfListOfByte)

class TDataStd_ListIteratorOfListOfExtendedString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_swiginit(self, _TDataStd.new_TDataStd_ListIteratorOfListOfExtendedString(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListIteratorOfListOfExtendedString.Initialize = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Initialize, None, TDataStd_ListIteratorOfListOfExtendedString)
TDataStd_ListIteratorOfListOfExtendedString.More = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfExtendedString_More, None, TDataStd_ListIteratorOfListOfExtendedString)
TDataStd_ListIteratorOfListOfExtendedString.Next = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Next, None, TDataStd_ListIteratorOfListOfExtendedString)
TDataStd_ListIteratorOfListOfExtendedString.Value = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Value, None, TDataStd_ListIteratorOfListOfExtendedString)
TDataStd_ListIteratorOfListOfExtendedString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListIteratorOfListOfExtendedString__kill_pointed, None, TDataStd_ListIteratorOfListOfExtendedString)
TDataStd_ListIteratorOfListOfExtendedString_swigregister = _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_swigregister
TDataStd_ListIteratorOfListOfExtendedString_swigregister(TDataStd_ListIteratorOfListOfExtendedString)

class TDataStd_ListNodeOfListOfByte(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Standard_Byte &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_ListNodeOfListOfByte_swiginit(self, _TDataStd.new_TDataStd_ListNodeOfListOfByte(*args))

    def Value(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_ListNodeOfListOfByte_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ListNodeOfListOfByte self)"""
        return _TDataStd.TDataStd_ListNodeOfListOfByte__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ListNodeOfListOfByte self) -> Handle_TDataStd_ListNodeOfListOfByte"""
        return _TDataStd.TDataStd_ListNodeOfListOfByte_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListNodeOfListOfByte.Value = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfByte_Value, None, TDataStd_ListNodeOfListOfByte)
TDataStd_ListNodeOfListOfByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfByte__kill_pointed, None, TDataStd_ListNodeOfListOfByte)
TDataStd_ListNodeOfListOfByte.GetHandle = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfByte_GetHandle, None, TDataStd_ListNodeOfListOfByte)
TDataStd_ListNodeOfListOfByte_swigregister = _TDataStd.TDataStd_ListNodeOfListOfByte_swigregister
TDataStd_ListNodeOfListOfByte_swigregister(TDataStd_ListNodeOfListOfByte)

class Handle_TDataStd_ListNodeOfListOfByte(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ListNodeOfListOfByte_swiginit(self, _TDataStd.new_Handle_TDataStd_ListNodeOfListOfByte(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfByte_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ListNodeOfListOfByte.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfByte_Nullify, None, Handle_TDataStd_ListNodeOfListOfByte)
Handle_TDataStd_ListNodeOfListOfByte.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfByte_IsNull, None, Handle_TDataStd_ListNodeOfListOfByte)
Handle_TDataStd_ListNodeOfListOfByte.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfByte_GetObject, None, Handle_TDataStd_ListNodeOfListOfByte)
Handle_TDataStd_ListNodeOfListOfByte._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfByte__kill_pointed, None, Handle_TDataStd_ListNodeOfListOfByte)
Handle_TDataStd_ListNodeOfListOfByte_swigregister = _TDataStd.Handle_TDataStd_ListNodeOfListOfByte_swigregister
Handle_TDataStd_ListNodeOfListOfByte_swigregister(Handle_TDataStd_ListNodeOfListOfByte)

def Handle_TDataStd_ListNodeOfListOfByte_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ListNodeOfListOfByte_DownCast(AnObject)
Handle_TDataStd_ListNodeOfListOfByte_DownCast = _TDataStd.Handle_TDataStd_ListNodeOfListOfByte_DownCast

class TDataStd_ListNodeOfListOfExtendedString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDataStd.TDataStd_ListNodeOfListOfExtendedString_swiginit(self, _TDataStd.new_TDataStd_ListNodeOfListOfExtendedString(*args))

    def Value(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ListNodeOfListOfExtendedString_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ListNodeOfListOfExtendedString self)"""
        return _TDataStd.TDataStd_ListNodeOfListOfExtendedString__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ListNodeOfListOfExtendedString self) -> Handle_TDataStd_ListNodeOfListOfExtendedString"""
        return _TDataStd.TDataStd_ListNodeOfListOfExtendedString_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListNodeOfListOfExtendedString.Value = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfExtendedString_Value, None, TDataStd_ListNodeOfListOfExtendedString)
TDataStd_ListNodeOfListOfExtendedString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfExtendedString__kill_pointed, None, TDataStd_ListNodeOfListOfExtendedString)
TDataStd_ListNodeOfListOfExtendedString.GetHandle = new_instancemethod(_TDataStd.TDataStd_ListNodeOfListOfExtendedString_GetHandle, None, TDataStd_ListNodeOfListOfExtendedString)
TDataStd_ListNodeOfListOfExtendedString_swigregister = _TDataStd.TDataStd_ListNodeOfListOfExtendedString_swigregister
TDataStd_ListNodeOfListOfExtendedString_swigregister(TDataStd_ListNodeOfListOfExtendedString)

class Handle_TDataStd_ListNodeOfListOfExtendedString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_swiginit(self, _TDataStd.new_Handle_TDataStd_ListNodeOfListOfExtendedString(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ListNodeOfListOfExtendedString.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_Nullify, None, Handle_TDataStd_ListNodeOfListOfExtendedString)
Handle_TDataStd_ListNodeOfListOfExtendedString.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_IsNull, None, Handle_TDataStd_ListNodeOfListOfExtendedString)
Handle_TDataStd_ListNodeOfListOfExtendedString.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_GetObject, None, Handle_TDataStd_ListNodeOfListOfExtendedString)
Handle_TDataStd_ListNodeOfListOfExtendedString._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString__kill_pointed, None, Handle_TDataStd_ListNodeOfListOfExtendedString)
Handle_TDataStd_ListNodeOfListOfExtendedString_swigregister = _TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_swigregister
Handle_TDataStd_ListNodeOfListOfExtendedString_swigregister(Handle_TDataStd_ListNodeOfListOfExtendedString)

def Handle_TDataStd_ListNodeOfListOfExtendedString_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_DownCast(AnObject)
Handle_TDataStd_ListNodeOfListOfExtendedString_DownCast = _TDataStd.Handle_TDataStd_ListNodeOfListOfExtendedString_DownCast

class TDataStd_ListOfByte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ListOfByte_swiginit(self, _TDataStd.new_TDataStd_ListOfByte(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_ListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_ListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_ListOfByte_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ListOfByte_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Standard_Byte &
        :rtype: None

        :param I:
        :type I: Standard_Byte &
        :param theIt:
        :type theIt: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Standard_Byte &
        :rtype: None

        :param I:
        :type I: Standard_Byte &
        :param theIt:
        :type theIt: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_ListOfByte_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_ListOfByte_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Standard_Byte &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfByte &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Standard_Byte &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfByte &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfByte_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListOfByte.Assign = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Assign, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Set = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Set, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Extent = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Extent, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Clear = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Clear, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.IsEmpty = new_instancemethod(_TDataStd.TDataStd_ListOfByte_IsEmpty, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Prepend = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Prepend, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Append = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Append, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.First = new_instancemethod(_TDataStd.TDataStd_ListOfByte_First, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Last = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Last, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.RemoveFirst = new_instancemethod(_TDataStd.TDataStd_ListOfByte_RemoveFirst, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.Remove = new_instancemethod(_TDataStd.TDataStd_ListOfByte_Remove, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.InsertBefore = new_instancemethod(_TDataStd.TDataStd_ListOfByte_InsertBefore, None, TDataStd_ListOfByte)
TDataStd_ListOfByte.InsertAfter = new_instancemethod(_TDataStd.TDataStd_ListOfByte_InsertAfter, None, TDataStd_ListOfByte)
TDataStd_ListOfByte._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListOfByte__kill_pointed, None, TDataStd_ListOfByte)
TDataStd_ListOfByte_swigregister = _TDataStd.TDataStd_ListOfByte_swigregister
TDataStd_ListOfByte_swigregister(TDataStd_ListOfByte)

class TDataStd_ListOfExtendedString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ListOfExtendedString_swiginit(self, _TDataStd.new_TDataStd_ListOfExtendedString(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ListOfExtendedString_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :rtype: None

        :param I:
        :type I: TCollection_ExtendedString &
        :param theIt:
        :type theIt: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :rtype: None

        :param I:
        :type I: TCollection_ExtendedString &
        :param theIt:
        :type theIt: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Append(self, *args)


    def First(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ListOfExtendedString_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        :param Other:
        :type Other: TDataStd_ListOfExtendedString &
        :param It:
        :type It: TDataStd_ListIteratorOfListOfExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_ListOfExtendedString_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ListOfExtendedString.Assign = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Assign, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Set = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Set, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Extent = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Extent, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Clear = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Clear, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.IsEmpty = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_IsEmpty, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Prepend = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Prepend, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Append = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Append, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.First = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_First, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Last = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Last, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.RemoveFirst = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_RemoveFirst, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.Remove = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_Remove, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.InsertBefore = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_InsertBefore, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString.InsertAfter = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString_InsertAfter, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ListOfExtendedString__kill_pointed, None, TDataStd_ListOfExtendedString)
TDataStd_ListOfExtendedString_swigregister = _TDataStd.TDataStd_ListOfExtendedString_swigregister
TDataStd_ListOfExtendedString_swigregister(TDataStd_ListOfExtendedString)

class TDataStd_Name(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods working on the name itself ======================================== Returns the GUID for name attributes.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Name_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Name_swiginit(self, _TDataStd.new_TDataStd_Name(*args))

    def Set(self, *args):
        """
        * Creates (if does not exist) and sets the name in the name attribute. from any label <L> search in father labels (L is not concerned) the first name attribute.if found set it in <father>. class methods working on the name tree ====================================== Search in the whole TDF_Data the Name attribute which fit with <fullPath>. Returns True if found. Search under <currentLabel> a label which fit with <name>. Returns True if found. Shortcut which avoids building a ListOfExtendedStrin. Search in the whole TDF_Data the label which fit with name Returns True if found. tools methods to translate path <-> pathlist =========================================== move to draw For Draw test we may provide this tool method which convert a path in a //!	 	sequence of string to call after the FindLabel methods. Example: if it's given 'Assembly:Part_1:Sketch_5' it will return in <pathlist> the list of 3 strings: 'Assembly','Part_1','Sketch_5'. move to draw from <pathlist> build the string path Name methods ============

        :param label:
        :type label: TDF_Label &
        :param string:
        :type string: TCollection_ExtendedString &
        :rtype: Handle_TDataStd_Name

        * Sets <S> as name. Raises if <S> is not a valid name.

        :param S:
        :type S: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_Name_Set(self, *args)


    def Get(self, *args):
        """
        * Returns the name contained in this name attribute.

        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Name_Get(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Name self) -> std::string"""
        return _TDataStd.TDataStd_Name_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Name self)"""
        return _TDataStd.TDataStd_Name__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Name self) -> Handle_TDataStd_Name"""
        return _TDataStd.TDataStd_Name_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Name.Set = new_instancemethod(_TDataStd.TDataStd_Name_Set, None, TDataStd_Name)
TDataStd_Name.Get = new_instancemethod(_TDataStd.TDataStd_Name_Get, None, TDataStd_Name)
TDataStd_Name.DumpToString = new_instancemethod(_TDataStd.TDataStd_Name_DumpToString, None, TDataStd_Name)
TDataStd_Name._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Name__kill_pointed, None, TDataStd_Name)
TDataStd_Name.GetHandle = new_instancemethod(_TDataStd.TDataStd_Name_GetHandle, None, TDataStd_Name)
TDataStd_Name_swigregister = _TDataStd.TDataStd_Name_swigregister
TDataStd_Name_swigregister(TDataStd_Name)

def TDataStd_Name_GetID(*args):
    """
    * class methods working on the name itself ======================================== Returns the GUID for name attributes.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Name_GetID(*args)

class Handle_TDataStd_Name(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Name_swiginit(self, _TDataStd.new_Handle_TDataStd_Name(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Name_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Name.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Name_Nullify, None, Handle_TDataStd_Name)
Handle_TDataStd_Name.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Name_IsNull, None, Handle_TDataStd_Name)
Handle_TDataStd_Name.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Name_GetObject, None, Handle_TDataStd_Name)
Handle_TDataStd_Name._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Name__kill_pointed, None, Handle_TDataStd_Name)
Handle_TDataStd_Name_swigregister = _TDataStd.Handle_TDataStd_Name_swigregister
Handle_TDataStd_Name_swigregister(Handle_TDataStd_Name)

def Handle_TDataStd_Name_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Name_DownCast(AnObject)
Handle_TDataStd_Name_DownCast = _TDataStd.Handle_TDataStd_Name_DownCast

class TDataStd_NamedData(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the named data attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_NamedData_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a named data attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_NamedData

        """
        return _TDataStd.TDataStd_NamedData_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_NamedData_swiginit(self, _TDataStd.new_TDataStd_NamedData(*args))

    def HasIntegers(self, *args):
        """
        * Returns true if at least one named integer value is kept in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasIntegers(self, *args)


    def HasInteger(self, *args):
        """
        * Returns true if the attribute contains specified by Name integer value.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasInteger(self, *args)


    def GetInteger(self, *args):
        """
        * Returns the integer value specified by the Name. It returns 0 if internal map doesn't contain the specified integer (use HasInteger() to check before).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: int

        """
        return _TDataStd.TDataStd_NamedData_GetInteger(self, *args)


    def SetInteger(self, *args):
        """
        * Defines a named integer. If the integer already exists, it changes its value to <theInteger>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theInteger:
        :type theInteger: int
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetInteger(self, *args)


    def GetIntegersContainer(self, *args):
        """
        * Returns the internal container of named integers.

        :rtype: TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_NamedData_GetIntegersContainer(self, *args)


    def ChangeIntegers(self, *args):
        """
        * Replace the container content by new content of the <theIntegers>.

        :param theIntegers:
        :type theIntegers: TColStd_DataMapOfStringInteger &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeIntegers(self, *args)


    def HasReals(self, *args):
        """
        * Returns true if at least one named real value is kept in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasReals(self, *args)


    def HasReal(self, *args):
        """
        * Returns true if the attribute contains a real specified by Name.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasReal(self, *args)


    def GetReal(self, *args):
        """
        * Returns the named real. It returns 0.0 if there is no such a named real (use HasReal()).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: float

        """
        return _TDataStd.TDataStd_NamedData_GetReal(self, *args)


    def SetReal(self, *args):
        """
        * Defines a named real. If the real already exists, it changes its value to <theReal>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theReal:
        :type theReal: float
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetReal(self, *args)


    def GetRealsContainer(self, *args):
        """
        * Returns the internal container of named reals.

        :rtype: TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_NamedData_GetRealsContainer(self, *args)


    def ChangeReals(self, *args):
        """
        * Replace the container content by new content of the <theReals>.

        :param theReals:
        :type theReals: TDataStd_DataMapOfStringReal &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeReals(self, *args)


    def HasStrings(self, *args):
        """
        * Returns true if there are some named strings in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasStrings(self, *args)


    def HasString(self, *args):
        """
        * Returns true if the attribute contains this named string.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasString(self, *args)


    def GetString(self, *args):
        """
        * Returns the named string. It returns an empty string if there is no such a named string (use HasString()).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_NamedData_GetString(self, *args)


    def SetString(self, *args):
        """
        * Defines a named string. If the string already exists, it changes its value to <theString>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theString:
        :type theString: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetString(self, *args)


    def GetStringsContainer(self, *args):
        """
        * Returns the internal container of named strings.

        :rtype: TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_NamedData_GetStringsContainer(self, *args)


    def ChangeStrings(self, *args):
        """
        * Replace the container content by new content of the <theStrings>.

        :param theStrings:
        :type theStrings: TDataStd_DataMapOfStringString &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeStrings(self, *args)


    def HasBytes(self, *args):
        """
        * Returns true if there are some named bytes in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasBytes(self, *args)


    def HasByte(self, *args):
        """
        * Returns true if the attribute contains this named byte.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasByte(self, *args)


    def GetByte(self, *args):
        """
        * Returns the named byte. It returns 0 if there is no such a named byte (use HasByte()).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: Standard_Byte

        """
        return _TDataStd.TDataStd_NamedData_GetByte(self, *args)


    def SetByte(self, *args):
        """
        * Defines a named byte. If the byte already exists, it changes its value to <theByte>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theByte:
        :type theByte: Standard_Byte
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetByte(self, *args)


    def GetBytesContainer(self, *args):
        """
        * Returns the internal container of named bytes.

        :rtype: TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_NamedData_GetBytesContainer(self, *args)


    def ChangeBytes(self, *args):
        """
        * Replace the container content by new content of the <theBytes>.

        :param theBytes:
        :type theBytes: TDataStd_DataMapOfStringByte &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeBytes(self, *args)


    def HasArraysOfIntegers(self, *args):
        """
        * Returns true if there are some named arrays of integer values in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasArraysOfIntegers(self, *args)


    def HasArrayOfIntegers(self, *args):
        """
        * Returns true if the attribute contains this named array of integer values.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasArrayOfIntegers(self, *args)


    def GetArrayOfIntegers(self, *args):
        """
        * Returns the named array of integer values. It returns a NULL Handle if there is no such a named array of integers (use HasArrayOfIntegers()).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _TDataStd.TDataStd_NamedData_GetArrayOfIntegers(self, *args)


    def SetArrayOfIntegers(self, *args):
        """
        * Defines a named array of integer values. If the array already exists, it changes its value to <theArrayOfIntegers>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theArrayOfIntegers:
        :type theArrayOfIntegers: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetArrayOfIntegers(self, *args)


    def GetArraysOfIntegersContainer(self, *args):
        """
        * Returns the internal container of named arrays of integer values.

        :rtype: TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_NamedData_GetArraysOfIntegersContainer(self, *args)


    def ChangeArraysOfIntegers(self, *args):
        """
        * Replace the container content by new content of the <theArraysOfIntegers>.

        :param theArraysOfIntegers:
        :type theArraysOfIntegers: TDataStd_DataMapOfStringHArray1OfInteger &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeArraysOfIntegers(self, *args)


    def HasArraysOfReals(self, *args):
        """
        * Returns true if there are some named arrays of real values in the attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasArraysOfReals(self, *args)


    def HasArrayOfReals(self, *args):
        """
        * Returns true if the attribute contains this named array of real values.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NamedData_HasArrayOfReals(self, *args)


    def GetArrayOfReals(self, *args):
        """
        * Returns the named array of real values. It returns a NULL Handle if there is no such a named array of reals (use HasArrayOfReals()).

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_NamedData_GetArrayOfReals(self, *args)


    def SetArrayOfReals(self, *args):
        """
        * Defines a named array of real values. If the array already exists, it changes its value to <theArrayOfReals>.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :param theArrayOfReals:
        :type theArrayOfReals: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_SetArrayOfReals(self, *args)


    def GetArraysOfRealsContainer(self, *args):
        """
        * Returns the internal container of named arrays of real values.

        :rtype: TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_NamedData_GetArraysOfRealsContainer(self, *args)


    def ChangeArraysOfReals(self, *args):
        """
        * Replace the container content by new content of the <theArraysOfReals>.

        :param theArraysOfReals:
        :type theArraysOfReals: TDataStd_DataMapOfStringHArray1OfReal &
        :rtype: None

        """
        return _TDataStd.TDataStd_NamedData_ChangeArraysOfReals(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_NamedData self) -> std::string"""
        return _TDataStd.TDataStd_NamedData_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_NamedData self)"""
        return _TDataStd.TDataStd_NamedData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_NamedData self) -> Handle_TDataStd_NamedData"""
        return _TDataStd.TDataStd_NamedData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_NamedData.HasIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_HasIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.HasInteger = new_instancemethod(_TDataStd.TDataStd_NamedData_HasInteger, None, TDataStd_NamedData)
TDataStd_NamedData.GetInteger = new_instancemethod(_TDataStd.TDataStd_NamedData_GetInteger, None, TDataStd_NamedData)
TDataStd_NamedData.SetInteger = new_instancemethod(_TDataStd.TDataStd_NamedData_SetInteger, None, TDataStd_NamedData)
TDataStd_NamedData.GetIntegersContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetIntegersContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.HasReals = new_instancemethod(_TDataStd.TDataStd_NamedData_HasReals, None, TDataStd_NamedData)
TDataStd_NamedData.HasReal = new_instancemethod(_TDataStd.TDataStd_NamedData_HasReal, None, TDataStd_NamedData)
TDataStd_NamedData.GetReal = new_instancemethod(_TDataStd.TDataStd_NamedData_GetReal, None, TDataStd_NamedData)
TDataStd_NamedData.SetReal = new_instancemethod(_TDataStd.TDataStd_NamedData_SetReal, None, TDataStd_NamedData)
TDataStd_NamedData.GetRealsContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetRealsContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeReals = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeReals, None, TDataStd_NamedData)
TDataStd_NamedData.HasStrings = new_instancemethod(_TDataStd.TDataStd_NamedData_HasStrings, None, TDataStd_NamedData)
TDataStd_NamedData.HasString = new_instancemethod(_TDataStd.TDataStd_NamedData_HasString, None, TDataStd_NamedData)
TDataStd_NamedData.GetString = new_instancemethod(_TDataStd.TDataStd_NamedData_GetString, None, TDataStd_NamedData)
TDataStd_NamedData.SetString = new_instancemethod(_TDataStd.TDataStd_NamedData_SetString, None, TDataStd_NamedData)
TDataStd_NamedData.GetStringsContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetStringsContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeStrings = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeStrings, None, TDataStd_NamedData)
TDataStd_NamedData.HasBytes = new_instancemethod(_TDataStd.TDataStd_NamedData_HasBytes, None, TDataStd_NamedData)
TDataStd_NamedData.HasByte = new_instancemethod(_TDataStd.TDataStd_NamedData_HasByte, None, TDataStd_NamedData)
TDataStd_NamedData.GetByte = new_instancemethod(_TDataStd.TDataStd_NamedData_GetByte, None, TDataStd_NamedData)
TDataStd_NamedData.SetByte = new_instancemethod(_TDataStd.TDataStd_NamedData_SetByte, None, TDataStd_NamedData)
TDataStd_NamedData.GetBytesContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetBytesContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeBytes = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeBytes, None, TDataStd_NamedData)
TDataStd_NamedData.HasArraysOfIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_HasArraysOfIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.HasArrayOfIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_HasArrayOfIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.GetArrayOfIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_GetArrayOfIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.SetArrayOfIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_SetArrayOfIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.GetArraysOfIntegersContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetArraysOfIntegersContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeArraysOfIntegers = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeArraysOfIntegers, None, TDataStd_NamedData)
TDataStd_NamedData.HasArraysOfReals = new_instancemethod(_TDataStd.TDataStd_NamedData_HasArraysOfReals, None, TDataStd_NamedData)
TDataStd_NamedData.HasArrayOfReals = new_instancemethod(_TDataStd.TDataStd_NamedData_HasArrayOfReals, None, TDataStd_NamedData)
TDataStd_NamedData.GetArrayOfReals = new_instancemethod(_TDataStd.TDataStd_NamedData_GetArrayOfReals, None, TDataStd_NamedData)
TDataStd_NamedData.SetArrayOfReals = new_instancemethod(_TDataStd.TDataStd_NamedData_SetArrayOfReals, None, TDataStd_NamedData)
TDataStd_NamedData.GetArraysOfRealsContainer = new_instancemethod(_TDataStd.TDataStd_NamedData_GetArraysOfRealsContainer, None, TDataStd_NamedData)
TDataStd_NamedData.ChangeArraysOfReals = new_instancemethod(_TDataStd.TDataStd_NamedData_ChangeArraysOfReals, None, TDataStd_NamedData)
TDataStd_NamedData.DumpToString = new_instancemethod(_TDataStd.TDataStd_NamedData_DumpToString, None, TDataStd_NamedData)
TDataStd_NamedData._kill_pointed = new_instancemethod(_TDataStd.TDataStd_NamedData__kill_pointed, None, TDataStd_NamedData)
TDataStd_NamedData.GetHandle = new_instancemethod(_TDataStd.TDataStd_NamedData_GetHandle, None, TDataStd_NamedData)
TDataStd_NamedData_swigregister = _TDataStd.TDataStd_NamedData_swigregister
TDataStd_NamedData_swigregister(TDataStd_NamedData)

def TDataStd_NamedData_GetID(*args):
    """
    * Static methods ============== Returns the ID of the named data attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_NamedData_GetID(*args)

def TDataStd_NamedData_Set(*args):
    """
    * Finds or creates a named data attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_NamedData

    """
    return _TDataStd.TDataStd_NamedData_Set(*args)

class Handle_TDataStd_NamedData(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_NamedData_swiginit(self, _TDataStd.new_Handle_TDataStd_NamedData(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_NamedData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_NamedData.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_NamedData_Nullify, None, Handle_TDataStd_NamedData)
Handle_TDataStd_NamedData.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_NamedData_IsNull, None, Handle_TDataStd_NamedData)
Handle_TDataStd_NamedData.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_NamedData_GetObject, None, Handle_TDataStd_NamedData)
Handle_TDataStd_NamedData._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_NamedData__kill_pointed, None, Handle_TDataStd_NamedData)
Handle_TDataStd_NamedData_swigregister = _TDataStd.Handle_TDataStd_NamedData_swigregister
Handle_TDataStd_NamedData_swigregister(Handle_TDataStd_NamedData)

def Handle_TDataStd_NamedData_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_NamedData_DownCast(AnObject)
Handle_TDataStd_NamedData_DownCast = _TDataStd.Handle_TDataStd_NamedData_DownCast

class TDataStd_NoteBook(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Find(*args):
        """
        * class methods ============= try to retrieve a NoteBook attribute at <current> label or in fathers label of <current>. Returns True if found and set <N>.

        :param current:
        :type current: TDF_Label &
        :param N:
        :type N: Handle_TDataStd_NoteBook &
        :rtype: bool

        """
        return _TDataStd.TDataStd_NoteBook_Find(*args)

    Find = staticmethod(Find)

    def New(*args):
        """
        * Create an enpty NoteBook attribute, located at <label>. Raises if <label> has attribute

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_NoteBook

        """
        return _TDataStd.TDataStd_NoteBook_New(*args)

    New = staticmethod(New)

    def GetID(*args):
        """
        * NoteBook methods ===============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_NoteBook_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_NoteBook_swiginit(self, _TDataStd.new_TDataStd_NoteBook(*args))

    def Append(self, *args):
        """
        * Tool to Create an Integer attribute from <value>, Insert it in a new son label of <self>. The Real attribute is returned.

        :param value:
        :type value: float
        :param isExported: default value is Standard_False
        :type isExported: bool
        :rtype: Handle_TDataStd_Real

        * Tool to Create an Real attribute from <value>, Insert it in a new son label of <self>. The Integer attribute is returned.

        :param value:
        :type value: int
        :param isExported: default value is Standard_False
        :type isExported: bool
        :rtype: Handle_TDataStd_Integer

        """
        return _TDataStd.TDataStd_NoteBook_Append(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_NoteBook self) -> std::string"""
        return _TDataStd.TDataStd_NoteBook_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_NoteBook self)"""
        return _TDataStd.TDataStd_NoteBook__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_NoteBook self) -> Handle_TDataStd_NoteBook"""
        return _TDataStd.TDataStd_NoteBook_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_NoteBook.Append = new_instancemethod(_TDataStd.TDataStd_NoteBook_Append, None, TDataStd_NoteBook)
TDataStd_NoteBook.DumpToString = new_instancemethod(_TDataStd.TDataStd_NoteBook_DumpToString, None, TDataStd_NoteBook)
TDataStd_NoteBook._kill_pointed = new_instancemethod(_TDataStd.TDataStd_NoteBook__kill_pointed, None, TDataStd_NoteBook)
TDataStd_NoteBook.GetHandle = new_instancemethod(_TDataStd.TDataStd_NoteBook_GetHandle, None, TDataStd_NoteBook)
TDataStd_NoteBook_swigregister = _TDataStd.TDataStd_NoteBook_swigregister
TDataStd_NoteBook_swigregister(TDataStd_NoteBook)

def TDataStd_NoteBook_Find(*args):
    """
    * class methods ============= try to retrieve a NoteBook attribute at <current> label or in fathers label of <current>. Returns True if found and set <N>.

    :param current:
    :type current: TDF_Label &
    :param N:
    :type N: Handle_TDataStd_NoteBook &
    :rtype: bool

    """
    return _TDataStd.TDataStd_NoteBook_Find(*args)

def TDataStd_NoteBook_New(*args):
    """
    * Create an enpty NoteBook attribute, located at <label>. Raises if <label> has attribute

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_NoteBook

    """
    return _TDataStd.TDataStd_NoteBook_New(*args)

def TDataStd_NoteBook_GetID(*args):
    """
    * NoteBook methods ===============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_NoteBook_GetID(*args)

class Handle_TDataStd_NoteBook(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_NoteBook_swiginit(self, _TDataStd.new_Handle_TDataStd_NoteBook(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_NoteBook_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_NoteBook.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_NoteBook_Nullify, None, Handle_TDataStd_NoteBook)
Handle_TDataStd_NoteBook.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_NoteBook_IsNull, None, Handle_TDataStd_NoteBook)
Handle_TDataStd_NoteBook.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_NoteBook_GetObject, None, Handle_TDataStd_NoteBook)
Handle_TDataStd_NoteBook._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_NoteBook__kill_pointed, None, Handle_TDataStd_NoteBook)
Handle_TDataStd_NoteBook_swigregister = _TDataStd.Handle_TDataStd_NoteBook_swigregister
Handle_TDataStd_NoteBook_swigregister(Handle_TDataStd_NoteBook)

def Handle_TDataStd_NoteBook_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_NoteBook_DownCast(AnObject)
Handle_TDataStd_NoteBook_DownCast = _TDataStd.Handle_TDataStd_NoteBook_DownCast

class TDataStd_Real(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for real numbers.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Real_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Real_swiginit(self, _TDataStd.new_TDataStd_Real(*args))

    def SetDimension(self, *args):
        """
        :param DIM:
        :type DIM: TDataStd_RealEnum
        :rtype: None

        """
        return _TDataStd.TDataStd_Real_SetDimension(self, *args)


    def GetDimension(self, *args):
        """
        :rtype: TDataStd_RealEnum

        """
        return _TDataStd.TDataStd_Real_GetDimension(self, *args)


    def Set(self, *args):
        """
        * Finds, or creates, an Real attribute and sets <value> the Real attribute is returned. the Real dimension is Scalar by default. use SetDimension to overwrite. Real methods ============

        :param label:
        :type label: TDF_Label &
        :param value:
        :type value: float
        :rtype: Handle_TDataStd_Real

        * Finds or creates the real number V.

        :param V:
        :type V: float
        :rtype: None

        """
        return _TDataStd.TDataStd_Real_Set(self, *args)


    def Get(self, *args):
        """
        * Returns the real number value contained in the attribute.

        :rtype: float

        """
        return _TDataStd.TDataStd_Real_Get(self, *args)


    def IsCaptured(self, *args):
        """
        * Returns True if there is a reference on the same label

        :rtype: bool

        """
        return _TDataStd.TDataStd_Real_IsCaptured(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Real self) -> std::string"""
        return _TDataStd.TDataStd_Real_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Real self)"""
        return _TDataStd.TDataStd_Real__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Real self) -> Handle_TDataStd_Real"""
        return _TDataStd.TDataStd_Real_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Real.SetDimension = new_instancemethod(_TDataStd.TDataStd_Real_SetDimension, None, TDataStd_Real)
TDataStd_Real.GetDimension = new_instancemethod(_TDataStd.TDataStd_Real_GetDimension, None, TDataStd_Real)
TDataStd_Real.Set = new_instancemethod(_TDataStd.TDataStd_Real_Set, None, TDataStd_Real)
TDataStd_Real.Get = new_instancemethod(_TDataStd.TDataStd_Real_Get, None, TDataStd_Real)
TDataStd_Real.IsCaptured = new_instancemethod(_TDataStd.TDataStd_Real_IsCaptured, None, TDataStd_Real)
TDataStd_Real.DumpToString = new_instancemethod(_TDataStd.TDataStd_Real_DumpToString, None, TDataStd_Real)
TDataStd_Real._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Real__kill_pointed, None, TDataStd_Real)
TDataStd_Real.GetHandle = new_instancemethod(_TDataStd.TDataStd_Real_GetHandle, None, TDataStd_Real)
TDataStd_Real_swigregister = _TDataStd.TDataStd_Real_swigregister
TDataStd_Real_swigregister(TDataStd_Real)

def TDataStd_Real_GetID(*args):
    """
    * class methods ============= Returns the GUID for real numbers.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Real_GetID(*args)

class Handle_TDataStd_Real(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Real_swiginit(self, _TDataStd.new_Handle_TDataStd_Real(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Real_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Real.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Real_Nullify, None, Handle_TDataStd_Real)
Handle_TDataStd_Real.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Real_IsNull, None, Handle_TDataStd_Real)
Handle_TDataStd_Real.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Real_GetObject, None, Handle_TDataStd_Real)
Handle_TDataStd_Real._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Real__kill_pointed, None, Handle_TDataStd_Real)
Handle_TDataStd_Real_swigregister = _TDataStd.Handle_TDataStd_Real_swigregister
Handle_TDataStd_Real_swigregister(Handle_TDataStd_Real)

def Handle_TDataStd_Real_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Real_DownCast(AnObject)
Handle_TDataStd_Real_DownCast = _TDataStd.Handle_TDataStd_Real_DownCast

class TDataStd_RealArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods ============= Returns the GUID for arrays of reals.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_RealArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates on the <label> a real array attribute with the specified <lower> and <upper> boundaries. If attribute is already set, all input parameters are refused and the found attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :param isDelta: default value is Standard_False
        :type isDelta: bool
        :rtype: Handle_TDataStd_RealArray

        """
        return _TDataStd.TDataStd_RealArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initialize the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_RealArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param Index:
        :type Index: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _TDataStd.TDataStd_RealArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Return the value of the <Index>th element of the array

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TDataStd.TDataStd_RealArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_RealArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Returns the upper boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_RealArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Returns the number of elements of the array of reals in terms of the number of elements it contains.

        :rtype: int

        """
        return _TDataStd.TDataStd_RealArray_Length(self, *args)


    def ChangeArray(self, *args):
        """
        * Sets the inner array <myValue> of the RealArray attribute to <newArray>. If value of <newArray> differs from <myValue>, Backup performed and myValue refers to new instance of HArray1OfReal that holds <newArray> values If <isCheckItems> equal True each item of <newArray> will be checked with each item of <myValue> for coincidence (to avoid backup).

        :param newArray:
        :type newArray: Handle_TColStd_HArray1OfReal &
        :param isCheckItems: default value is Standard_True
        :type isCheckItems: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_RealArray_ChangeArray(self, *args)


    def Array(self, *args):
        """
        * Returns the handle of this array of reals.

        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _TDataStd.TDataStd_RealArray_Array(self, *args)


    def GetDelta(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_RealArray_GetDelta(self, *args)


    def SetDelta(self, *args):
        """
        * for internal use only!

        :param isDelta:
        :type isDelta: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_RealArray_SetDelta(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_RealArray_swiginit(self, _TDataStd.new_TDataStd_RealArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_RealArray self) -> std::string"""
        return _TDataStd.TDataStd_RealArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_RealArray self)"""
        return _TDataStd.TDataStd_RealArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_RealArray self) -> Handle_TDataStd_RealArray"""
        return _TDataStd.TDataStd_RealArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_RealArray.Init = new_instancemethod(_TDataStd.TDataStd_RealArray_Init, None, TDataStd_RealArray)
TDataStd_RealArray.SetValue = new_instancemethod(_TDataStd.TDataStd_RealArray_SetValue, None, TDataStd_RealArray)
TDataStd_RealArray.Value = new_instancemethod(_TDataStd.TDataStd_RealArray_Value, None, TDataStd_RealArray)
TDataStd_RealArray.Lower = new_instancemethod(_TDataStd.TDataStd_RealArray_Lower, None, TDataStd_RealArray)
TDataStd_RealArray.Upper = new_instancemethod(_TDataStd.TDataStd_RealArray_Upper, None, TDataStd_RealArray)
TDataStd_RealArray.Length = new_instancemethod(_TDataStd.TDataStd_RealArray_Length, None, TDataStd_RealArray)
TDataStd_RealArray.ChangeArray = new_instancemethod(_TDataStd.TDataStd_RealArray_ChangeArray, None, TDataStd_RealArray)
TDataStd_RealArray.Array = new_instancemethod(_TDataStd.TDataStd_RealArray_Array, None, TDataStd_RealArray)
TDataStd_RealArray.GetDelta = new_instancemethod(_TDataStd.TDataStd_RealArray_GetDelta, None, TDataStd_RealArray)
TDataStd_RealArray.SetDelta = new_instancemethod(_TDataStd.TDataStd_RealArray_SetDelta, None, TDataStd_RealArray)
TDataStd_RealArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_RealArray_DumpToString, None, TDataStd_RealArray)
TDataStd_RealArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_RealArray__kill_pointed, None, TDataStd_RealArray)
TDataStd_RealArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_RealArray_GetHandle, None, TDataStd_RealArray)
TDataStd_RealArray_swigregister = _TDataStd.TDataStd_RealArray_swigregister
TDataStd_RealArray_swigregister(TDataStd_RealArray)

def TDataStd_RealArray_GetID(*args):
    """
    * class methods ============= Returns the GUID for arrays of reals.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_RealArray_GetID(*args)

def TDataStd_RealArray_Set(*args):
    """
    * Finds or creates on the <label> a real array attribute with the specified <lower> and <upper> boundaries. If attribute is already set, all input parameters are refused and the found attribute is returned.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :param isDelta: default value is Standard_False
    :type isDelta: bool
    :rtype: Handle_TDataStd_RealArray

    """
    return _TDataStd.TDataStd_RealArray_Set(*args)

class Handle_TDataStd_RealArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_RealArray_swiginit(self, _TDataStd.new_Handle_TDataStd_RealArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_RealArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_RealArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_RealArray_Nullify, None, Handle_TDataStd_RealArray)
Handle_TDataStd_RealArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_RealArray_IsNull, None, Handle_TDataStd_RealArray)
Handle_TDataStd_RealArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_RealArray_GetObject, None, Handle_TDataStd_RealArray)
Handle_TDataStd_RealArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_RealArray__kill_pointed, None, Handle_TDataStd_RealArray)
Handle_TDataStd_RealArray_swigregister = _TDataStd.Handle_TDataStd_RealArray_swigregister
Handle_TDataStd_RealArray_swigregister(Handle_TDataStd_RealArray)

def Handle_TDataStd_RealArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_RealArray_DownCast(AnObject)
Handle_TDataStd_RealArray_DownCast = _TDataStd.Handle_TDataStd_RealArray_DownCast

class TDataStd_RealList(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the list of doubles attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_RealList_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a list of double values attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_RealList

        """
        return _TDataStd.TDataStd_RealList_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_RealList_swiginit(self, _TDataStd.new_TDataStd_RealList(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_RealList_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_RealList_Extent(self, *args)


    def Prepend(self, *args):
        """
        :param value:
        :type value: float
        :rtype: None

        """
        return _TDataStd.TDataStd_RealList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param value:
        :type value: float
        :rtype: None

        """
        return _TDataStd.TDataStd_RealList_Append(self, *args)


    def InsertBefore(self, *args):
        """
        * Inserts the <value> before the first meet of <before_value>.

        :param value:
        :type value: float
        :param before_value:
        :type before_value: float
        :rtype: bool

        """
        return _TDataStd.TDataStd_RealList_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        * Inserts the <value> after the first meet of <after_value>.

        :param value:
        :type value: float
        :param after_value:
        :type after_value: float
        :rtype: bool

        """
        return _TDataStd.TDataStd_RealList_InsertAfter(self, *args)


    def Remove(self, *args):
        """
        * Removes the first meet of the <value>.

        :param value:
        :type value: float
        :rtype: bool

        """
        return _TDataStd.TDataStd_RealList_Remove(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_RealList_Clear(self, *args)


    def First(self, *args):
        """
        :rtype: float

        """
        return _TDataStd.TDataStd_RealList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: float

        """
        return _TDataStd.TDataStd_RealList_Last(self, *args)


    def List(self, *args):
        """
        :rtype: TColStd_ListOfReal

        """
        return _TDataStd.TDataStd_RealList_List(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_RealList self) -> std::string"""
        return _TDataStd.TDataStd_RealList_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_RealList self)"""
        return _TDataStd.TDataStd_RealList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_RealList self) -> Handle_TDataStd_RealList"""
        return _TDataStd.TDataStd_RealList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_RealList.IsEmpty = new_instancemethod(_TDataStd.TDataStd_RealList_IsEmpty, None, TDataStd_RealList)
TDataStd_RealList.Extent = new_instancemethod(_TDataStd.TDataStd_RealList_Extent, None, TDataStd_RealList)
TDataStd_RealList.Prepend = new_instancemethod(_TDataStd.TDataStd_RealList_Prepend, None, TDataStd_RealList)
TDataStd_RealList.Append = new_instancemethod(_TDataStd.TDataStd_RealList_Append, None, TDataStd_RealList)
TDataStd_RealList.InsertBefore = new_instancemethod(_TDataStd.TDataStd_RealList_InsertBefore, None, TDataStd_RealList)
TDataStd_RealList.InsertAfter = new_instancemethod(_TDataStd.TDataStd_RealList_InsertAfter, None, TDataStd_RealList)
TDataStd_RealList.Remove = new_instancemethod(_TDataStd.TDataStd_RealList_Remove, None, TDataStd_RealList)
TDataStd_RealList.Clear = new_instancemethod(_TDataStd.TDataStd_RealList_Clear, None, TDataStd_RealList)
TDataStd_RealList.First = new_instancemethod(_TDataStd.TDataStd_RealList_First, None, TDataStd_RealList)
TDataStd_RealList.Last = new_instancemethod(_TDataStd.TDataStd_RealList_Last, None, TDataStd_RealList)
TDataStd_RealList.List = new_instancemethod(_TDataStd.TDataStd_RealList_List, None, TDataStd_RealList)
TDataStd_RealList.DumpToString = new_instancemethod(_TDataStd.TDataStd_RealList_DumpToString, None, TDataStd_RealList)
TDataStd_RealList._kill_pointed = new_instancemethod(_TDataStd.TDataStd_RealList__kill_pointed, None, TDataStd_RealList)
TDataStd_RealList.GetHandle = new_instancemethod(_TDataStd.TDataStd_RealList_GetHandle, None, TDataStd_RealList)
TDataStd_RealList_swigregister = _TDataStd.TDataStd_RealList_swigregister
TDataStd_RealList_swigregister(TDataStd_RealList)

def TDataStd_RealList_GetID(*args):
    """
    * Static methods ============== Returns the ID of the list of doubles attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_RealList_GetID(*args)

def TDataStd_RealList_Set(*args):
    """
    * Finds or creates a list of double values attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_RealList

    """
    return _TDataStd.TDataStd_RealList_Set(*args)

class Handle_TDataStd_RealList(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_RealList_swiginit(self, _TDataStd.new_Handle_TDataStd_RealList(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_RealList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_RealList.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_RealList_Nullify, None, Handle_TDataStd_RealList)
Handle_TDataStd_RealList.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_RealList_IsNull, None, Handle_TDataStd_RealList)
Handle_TDataStd_RealList.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_RealList_GetObject, None, Handle_TDataStd_RealList)
Handle_TDataStd_RealList._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_RealList__kill_pointed, None, Handle_TDataStd_RealList)
Handle_TDataStd_RealList_swigregister = _TDataStd.Handle_TDataStd_RealList_swigregister
Handle_TDataStd_RealList_swigregister(Handle_TDataStd_RealList)

def Handle_TDataStd_RealList_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_RealList_DownCast(AnObject)
Handle_TDataStd_RealList_DownCast = _TDataStd.Handle_TDataStd_RealList_DownCast

class TDataStd_ReferenceArray(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the array of references (labels) attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_ReferenceArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates an array of reference values (labels) attribute.

        :param label:
        :type label: TDF_Label &
        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: Handle_TDataStd_ReferenceArray

        """
        return _TDataStd.TDataStd_ReferenceArray_Set(*args)

    Set = staticmethod(Set)

    def Init(self, *args):
        """
        * Initialize the inner array with bounds from <lower> to <upper>

        :param lower:
        :type lower: int
        :param upper:
        :type upper: int
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceArray_Init(self, *args)


    def SetValue(self, *args):
        """
        * Sets the <Index>th element of the array to <Value> OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal array.

        :param index:
        :type index: int
        :param value:
        :type value: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceArray_SetValue(self, *args)


    def Value(self, *args):
        """
        * Returns the value of the <Index>th element of the array.

        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceArray_Value(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ReferenceArray_Lower(self, *args)


    def Upper(self, *args):
        """
        * Returns the upper boundary of the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ReferenceArray_Upper(self, *args)


    def Length(self, *args):
        """
        * Returns the number of elements in the array.

        :rtype: int

        """
        return _TDataStd.TDataStd_ReferenceArray_Length(self, *args)


    def InternalArray(self, *args):
        """
        :rtype: Handle_TDataStd_HLabelArray1

        """
        return _TDataStd.TDataStd_ReferenceArray_InternalArray(self, *args)


    def SetInternalArray(self, *args):
        """
        :param values:
        :type values: Handle_TDataStd_HLabelArray1 &
        :param isCheckItems: default value is Standard_True
        :type isCheckItems: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceArray_SetInternalArray(self, *args)


    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ReferenceArray_swiginit(self, _TDataStd.new_TDataStd_ReferenceArray(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_ReferenceArray self) -> std::string"""
        return _TDataStd.TDataStd_ReferenceArray_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ReferenceArray self)"""
        return _TDataStd.TDataStd_ReferenceArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ReferenceArray self) -> Handle_TDataStd_ReferenceArray"""
        return _TDataStd.TDataStd_ReferenceArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ReferenceArray.Init = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_Init, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.SetValue = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_SetValue, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.Value = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_Value, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.Lower = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_Lower, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.Upper = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_Upper, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.Length = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_Length, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.InternalArray = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_InternalArray, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.SetInternalArray = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_SetInternalArray, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.DumpToString = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_DumpToString, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ReferenceArray__kill_pointed, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray.GetHandle = new_instancemethod(_TDataStd.TDataStd_ReferenceArray_GetHandle, None, TDataStd_ReferenceArray)
TDataStd_ReferenceArray_swigregister = _TDataStd.TDataStd_ReferenceArray_swigregister
TDataStd_ReferenceArray_swigregister(TDataStd_ReferenceArray)

def TDataStd_ReferenceArray_GetID(*args):
    """
    * Static methods ============== Returns the ID of the array of references (labels) attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_ReferenceArray_GetID(*args)

def TDataStd_ReferenceArray_Set(*args):
    """
    * Finds or creates an array of reference values (labels) attribute.

    :param label:
    :type label: TDF_Label &
    :param lower:
    :type lower: int
    :param upper:
    :type upper: int
    :rtype: Handle_TDataStd_ReferenceArray

    """
    return _TDataStd.TDataStd_ReferenceArray_Set(*args)

class Handle_TDataStd_ReferenceArray(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ReferenceArray_swiginit(self, _TDataStd.new_Handle_TDataStd_ReferenceArray(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ReferenceArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ReferenceArray.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceArray_Nullify, None, Handle_TDataStd_ReferenceArray)
Handle_TDataStd_ReferenceArray.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceArray_IsNull, None, Handle_TDataStd_ReferenceArray)
Handle_TDataStd_ReferenceArray.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceArray_GetObject, None, Handle_TDataStd_ReferenceArray)
Handle_TDataStd_ReferenceArray._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceArray__kill_pointed, None, Handle_TDataStd_ReferenceArray)
Handle_TDataStd_ReferenceArray_swigregister = _TDataStd.Handle_TDataStd_ReferenceArray_swigregister
Handle_TDataStd_ReferenceArray_swigregister(Handle_TDataStd_ReferenceArray)

def Handle_TDataStd_ReferenceArray_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ReferenceArray_DownCast(AnObject)
Handle_TDataStd_ReferenceArray_DownCast = _TDataStd.Handle_TDataStd_ReferenceArray_DownCast

class TDataStd_ReferenceList(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ============== Returns the ID of the list of references (labels) attribute.

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_ReferenceList_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Finds or creates a list of reference values (labels) attribute.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_ReferenceList

        """
        return _TDataStd.TDataStd_ReferenceList_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_ReferenceList_swiginit(self, _TDataStd.new_TDataStd_ReferenceList(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDataStd.TDataStd_ReferenceList_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDataStd.TDataStd_ReferenceList_Extent(self, *args)


    def Prepend(self, *args):
        """
        :param value:
        :type value: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param value:
        :type value: TDF_Label &
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceList_Append(self, *args)


    def InsertBefore(self, *args):
        """
        * Inserts the <value> before the first meet of <before_value>.

        :param value:
        :type value: TDF_Label &
        :param before_value:
        :type before_value: TDF_Label &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ReferenceList_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        * Inserts the <value> after the first meet of <after_value>.

        :param value:
        :type value: TDF_Label &
        :param after_value:
        :type after_value: TDF_Label &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ReferenceList_InsertAfter(self, *args)


    def Remove(self, *args):
        """
        * Removes the first meet of the <value>.

        :param value:
        :type value: TDF_Label &
        :rtype: bool

        """
        return _TDataStd.TDataStd_ReferenceList_Remove(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDataStd.TDataStd_ReferenceList_Clear(self, *args)


    def First(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceList_Last(self, *args)


    def List(self, *args):
        """
        :rtype: TDF_LabelList

        """
        return _TDataStd.TDataStd_ReferenceList_List(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_ReferenceList self) -> std::string"""
        return _TDataStd.TDataStd_ReferenceList_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_ReferenceList self)"""
        return _TDataStd.TDataStd_ReferenceList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_ReferenceList self) -> Handle_TDataStd_ReferenceList"""
        return _TDataStd.TDataStd_ReferenceList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_ReferenceList.IsEmpty = new_instancemethod(_TDataStd.TDataStd_ReferenceList_IsEmpty, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Extent = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Extent, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Prepend = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Prepend, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Append = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Append, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.InsertBefore = new_instancemethod(_TDataStd.TDataStd_ReferenceList_InsertBefore, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.InsertAfter = new_instancemethod(_TDataStd.TDataStd_ReferenceList_InsertAfter, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Remove = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Remove, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Clear = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Clear, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.First = new_instancemethod(_TDataStd.TDataStd_ReferenceList_First, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.Last = new_instancemethod(_TDataStd.TDataStd_ReferenceList_Last, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.List = new_instancemethod(_TDataStd.TDataStd_ReferenceList_List, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.DumpToString = new_instancemethod(_TDataStd.TDataStd_ReferenceList_DumpToString, None, TDataStd_ReferenceList)
TDataStd_ReferenceList._kill_pointed = new_instancemethod(_TDataStd.TDataStd_ReferenceList__kill_pointed, None, TDataStd_ReferenceList)
TDataStd_ReferenceList.GetHandle = new_instancemethod(_TDataStd.TDataStd_ReferenceList_GetHandle, None, TDataStd_ReferenceList)
TDataStd_ReferenceList_swigregister = _TDataStd.TDataStd_ReferenceList_swigregister
TDataStd_ReferenceList_swigregister(TDataStd_ReferenceList)

def TDataStd_ReferenceList_GetID(*args):
    """
    * Static methods ============== Returns the ID of the list of references (labels) attribute.

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_ReferenceList_GetID(*args)

def TDataStd_ReferenceList_Set(*args):
    """
    * Finds or creates a list of reference values (labels) attribute.

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_ReferenceList

    """
    return _TDataStd.TDataStd_ReferenceList_Set(*args)

class Handle_TDataStd_ReferenceList(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_ReferenceList_swiginit(self, _TDataStd.new_Handle_TDataStd_ReferenceList(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_ReferenceList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_ReferenceList.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceList_Nullify, None, Handle_TDataStd_ReferenceList)
Handle_TDataStd_ReferenceList.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceList_IsNull, None, Handle_TDataStd_ReferenceList)
Handle_TDataStd_ReferenceList.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceList_GetObject, None, Handle_TDataStd_ReferenceList)
Handle_TDataStd_ReferenceList._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_ReferenceList__kill_pointed, None, Handle_TDataStd_ReferenceList)
Handle_TDataStd_ReferenceList_swigregister = _TDataStd.Handle_TDataStd_ReferenceList_swigregister
Handle_TDataStd_ReferenceList_swigregister(Handle_TDataStd_ReferenceList)

def Handle_TDataStd_ReferenceList_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_ReferenceList_DownCast(AnObject)
Handle_TDataStd_ReferenceList_DownCast = _TDataStd.Handle_TDataStd_ReferenceList_DownCast

class TDataStd_Relation(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Relation_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Find, or create, an Relation attribute. Real methods ============

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Relation

        """
        return _TDataStd.TDataStd_Relation_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Relation_swiginit(self, _TDataStd.new_TDataStd_Relation(*args))

    def Name(self, *args):
        """
        * build and return the relation name

        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Relation_Name(self, *args)


    def SetRelation(self, *args):
        """
        :param E:
        :type E: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDataStd.TDataStd_Relation_SetRelation(self, *args)


    def GetRelation(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Relation_GetRelation(self, *args)


    def GetVariables(self, *args):
        """
        :rtype: TDF_AttributeList

        """
        return _TDataStd.TDataStd_Relation_GetVariables(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Relation self) -> std::string"""
        return _TDataStd.TDataStd_Relation_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Relation self)"""
        return _TDataStd.TDataStd_Relation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Relation self) -> Handle_TDataStd_Relation"""
        return _TDataStd.TDataStd_Relation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Relation.Name = new_instancemethod(_TDataStd.TDataStd_Relation_Name, None, TDataStd_Relation)
TDataStd_Relation.SetRelation = new_instancemethod(_TDataStd.TDataStd_Relation_SetRelation, None, TDataStd_Relation)
TDataStd_Relation.GetRelation = new_instancemethod(_TDataStd.TDataStd_Relation_GetRelation, None, TDataStd_Relation)
TDataStd_Relation.GetVariables = new_instancemethod(_TDataStd.TDataStd_Relation_GetVariables, None, TDataStd_Relation)
TDataStd_Relation.DumpToString = new_instancemethod(_TDataStd.TDataStd_Relation_DumpToString, None, TDataStd_Relation)
TDataStd_Relation._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Relation__kill_pointed, None, TDataStd_Relation)
TDataStd_Relation.GetHandle = new_instancemethod(_TDataStd.TDataStd_Relation_GetHandle, None, TDataStd_Relation)
TDataStd_Relation_swigregister = _TDataStd.TDataStd_Relation_swigregister
TDataStd_Relation_swigregister(TDataStd_Relation)

def TDataStd_Relation_GetID(*args):
    """
    * class methods =============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Relation_GetID(*args)

def TDataStd_Relation_Set(*args):
    """
    * Find, or create, an Relation attribute. Real methods ============

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_Relation

    """
    return _TDataStd.TDataStd_Relation_Set(*args)

class Handle_TDataStd_Relation(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Relation_swiginit(self, _TDataStd.new_Handle_TDataStd_Relation(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Relation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Relation.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Relation_Nullify, None, Handle_TDataStd_Relation)
Handle_TDataStd_Relation.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Relation_IsNull, None, Handle_TDataStd_Relation)
Handle_TDataStd_Relation.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Relation_GetObject, None, Handle_TDataStd_Relation)
Handle_TDataStd_Relation._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Relation__kill_pointed, None, Handle_TDataStd_Relation)
Handle_TDataStd_Relation_swigregister = _TDataStd.Handle_TDataStd_Relation_swigregister
Handle_TDataStd_Relation_swigregister(Handle_TDataStd_Relation)

def Handle_TDataStd_Relation_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Relation_DownCast(AnObject)
Handle_TDataStd_Relation_DownCast = _TDataStd.Handle_TDataStd_Relation_DownCast

class TDataStd_Tick(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * Static methods ==============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Tick_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        * Find, or create, a Tick attribute. Tick methods ============

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Tick

        """
        return _TDataStd.TDataStd_Tick_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Tick_swiginit(self, _TDataStd.new_TDataStd_Tick(*args))

    def DumpToString(self):
        """DumpToString(TDataStd_Tick self) -> std::string"""
        return _TDataStd.TDataStd_Tick_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Tick self)"""
        return _TDataStd.TDataStd_Tick__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Tick self) -> Handle_TDataStd_Tick"""
        return _TDataStd.TDataStd_Tick_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Tick.DumpToString = new_instancemethod(_TDataStd.TDataStd_Tick_DumpToString, None, TDataStd_Tick)
TDataStd_Tick._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Tick__kill_pointed, None, TDataStd_Tick)
TDataStd_Tick.GetHandle = new_instancemethod(_TDataStd.TDataStd_Tick_GetHandle, None, TDataStd_Tick)
TDataStd_Tick_swigregister = _TDataStd.TDataStd_Tick_swigregister
TDataStd_Tick_swigregister(TDataStd_Tick)

def TDataStd_Tick_GetID(*args):
    """
    * Static methods ==============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Tick_GetID(*args)

def TDataStd_Tick_Set(*args):
    """
    * Find, or create, a Tick attribute. Tick methods ============

    :param label:
    :type label: TDF_Label &
    :rtype: Handle_TDataStd_Tick

    """
    return _TDataStd.TDataStd_Tick_Set(*args)

class Handle_TDataStd_Tick(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Tick_swiginit(self, _TDataStd.new_Handle_TDataStd_Tick(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Tick_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Tick.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Tick_Nullify, None, Handle_TDataStd_Tick)
Handle_TDataStd_Tick.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Tick_IsNull, None, Handle_TDataStd_Tick)
Handle_TDataStd_Tick.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Tick_GetObject, None, Handle_TDataStd_Tick)
Handle_TDataStd_Tick._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Tick__kill_pointed, None, Handle_TDataStd_Tick)
Handle_TDataStd_Tick_swigregister = _TDataStd.Handle_TDataStd_Tick_swigregister
Handle_TDataStd_Tick_swigregister(Handle_TDataStd_Tick)

def Handle_TDataStd_Tick_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Tick_DownCast(AnObject)
Handle_TDataStd_Tick_DownCast = _TDataStd.Handle_TDataStd_Tick_DownCast

class TDataStd_TreeNode(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Find(*args):
        """
        * class methods working on the node =================================== Returns true if the tree node T is found on the label L. Otherwise, false is returned.

        :param L:
        :type L: TDF_Label &
        :param T:
        :type T: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_Find(*args)

    Find = staticmethod(Find)

    def Set(*args):
        """
        * Finds or Creates a TreeNode attribute on the label <L> with the default tree ID, returned by the method <GetDefaultTreeID>. Returns the created/found TreeNode attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_TDataStd_TreeNode

        * Finds or Creates a TreeNode attribute on the label <L>, with an explicit tree ID. <ExplicitTreeID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created TreeNode attribute.

        :param L:
        :type L: TDF_Label &
        :param ExplicitTreeID:
        :type ExplicitTreeID: Standard_GUID &
        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Set(*args)

    Set = staticmethod(Set)

    def GetDefaultTreeID(*args):
        """
        * returns a default tree ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_TreeNode_GetDefaultTreeID(*args)

    GetDefaultTreeID = staticmethod(GetDefaultTreeID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_TreeNode_swiginit(self, _TDataStd.new_TDataStd_TreeNode(*args))

    def Append(self, *args):
        """
        * Insert the TreeNode <Child> as last child of <self>. If  the insertion is successful <self> becomes the Father of <Child>.

        :param Child:
        :type Child: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_Append(self, *args)


    def Prepend(self, *args):
        """
        * Insert the the TreeNode <Child> as first child of <self>. If the insertion is successful <self> becomes the Father of <Child>

        :param Child:
        :type Child: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        * Inserts the TreeNode <Node> before <self>. If insertion is successful <self> and <Node> belongs to the same Father.

        :param Node:
        :type Node: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        * Inserts the TreeNode <Node> after <self>. If insertion is successful <self> and <Node> belongs to the same Father.

        :param Node:
        :type Node: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_InsertAfter(self, *args)


    def Remove(self, *args):
        """
        * Removes this tree node attribute from its father node. The result is that this attribute becomes a root node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_Remove(self, *args)


    def Depth(self, *args):
        """
        * Returns the depth of this tree node in the overall tree node structure. In other words, the number of father tree nodes of this one is returned.

        :rtype: int

        """
        return _TDataStd.TDataStd_TreeNode_Depth(self, *args)


    def NbChildren(self, *args):
        """
        * Returns the number of child nodes. If <allLevels> is true, the method counts children of all levels (children of children ...)

        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: int

        """
        return _TDataStd.TDataStd_TreeNode_NbChildren(self, *args)


    def IsAscendant(self, *args):
        """
        * Returns true if this tree node attribute is an ascendant of of. In other words, if it is a father or the father of a father of of.

        :param of:
        :type of: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_IsAscendant(self, *args)


    def IsDescendant(self, *args):
        """
        * Returns true if this tree node attribute is a descendant of of. In other words, if it is a child or the child of a child of of.

        :param of:
        :type of: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_IsDescendant(self, *args)


    def IsRoot(self, *args):
        """
        * Returns true if this tree node attribute is the ultimate father in the tree.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_IsRoot(self, *args)


    def Root(self, *args):
        """
        * Returns the ultimate father of this tree node attribute.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Root(self, *args)


    def IsFather(self, *args):
        """
        * Returns true if this tree node attribute is a father of of.

        :param of:
        :type of: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_IsFather(self, *args)


    def IsChild(self, *args):
        """
        * Returns true if this tree node attribute is a child of of.

        :param of:
        :type of: Handle_TDataStd_TreeNode &
        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_IsChild(self, *args)


    def HasFather(self, *args):
        """
        * Returns true if this tree node attribute has a father tree node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_HasFather(self, *args)


    def Father(self, *args):
        """
        * Returns the father TreeNode of <self>. Null if root.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Father(self, *args)


    def HasNext(self, *args):
        """
        * Returns true if this tree node attribute has a next tree node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_HasNext(self, *args)


    def Next(self, *args):
        """
        * Returns the next tree node in this tree node attribute. Warning This tree node is null if it is the last one in this tree node attribute.Returns the next TreeNode of <self>. Null if last.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Next(self, *args)


    def HasPrevious(self, *args):
        """
        * Returns true if this tree node attribute has a previous tree node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_HasPrevious(self, *args)


    def Previous(self, *args):
        """
        * Returns the previous tree node of this tree node attribute. Warning This tree node is null if it is the first one in this tree node attribute.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Previous(self, *args)


    def HasFirst(self, *args):
        """
        * Returns true if this tree node attribute has a first child tree node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_HasFirst(self, *args)


    def First(self, *args):
        """
        * Returns the first child tree node in this tree node object.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_First(self, *args)


    def HasLast(self, *args):
        """
        * Returns true if this tree node attribute has a last child tree node.

        :rtype: bool

        """
        return _TDataStd.TDataStd_TreeNode_HasLast(self, *args)


    def Last(self, *args):
        """
        * Returns the last child tree node in this tree node object.

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_Last(self, *args)


    def FindLast(self, *args):
        """
        * Returns the last child tree node in this tree node object. to set fields =============

        :rtype: Handle_TDataStd_TreeNode

        """
        return _TDataStd.TDataStd_TreeNode_FindLast(self, *args)


    def SetTreeID(self, *args):
        """
        :param explicitID:
        :type explicitID: Standard_GUID &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetTreeID(self, *args)


    def SetFather(self, *args):
        """
        :param F:
        :type F: Handle_TDataStd_TreeNode &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetFather(self, *args)


    def SetNext(self, *args):
        """
        :param F:
        :type F: Handle_TDataStd_TreeNode &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetNext(self, *args)


    def SetPrevious(self, *args):
        """
        :param F:
        :type F: Handle_TDataStd_TreeNode &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetPrevious(self, *args)


    def SetFirst(self, *args):
        """
        :param F:
        :type F: Handle_TDataStd_TreeNode &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetFirst(self, *args)


    def SetLast(self, *args):
        """
        * TreeNode callback: ==================

        :param F:
        :type F: Handle_TDataStd_TreeNode &
        :rtype: None

        """
        return _TDataStd.TDataStd_TreeNode_SetLast(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_TreeNode self) -> std::string"""
        return _TDataStd.TDataStd_TreeNode_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_TreeNode self)"""
        return _TDataStd.TDataStd_TreeNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_TreeNode self) -> Handle_TDataStd_TreeNode"""
        return _TDataStd.TDataStd_TreeNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_TreeNode.Append = new_instancemethod(_TDataStd.TDataStd_TreeNode_Append, None, TDataStd_TreeNode)
TDataStd_TreeNode.Prepend = new_instancemethod(_TDataStd.TDataStd_TreeNode_Prepend, None, TDataStd_TreeNode)
TDataStd_TreeNode.InsertBefore = new_instancemethod(_TDataStd.TDataStd_TreeNode_InsertBefore, None, TDataStd_TreeNode)
TDataStd_TreeNode.InsertAfter = new_instancemethod(_TDataStd.TDataStd_TreeNode_InsertAfter, None, TDataStd_TreeNode)
TDataStd_TreeNode.Remove = new_instancemethod(_TDataStd.TDataStd_TreeNode_Remove, None, TDataStd_TreeNode)
TDataStd_TreeNode.Depth = new_instancemethod(_TDataStd.TDataStd_TreeNode_Depth, None, TDataStd_TreeNode)
TDataStd_TreeNode.NbChildren = new_instancemethod(_TDataStd.TDataStd_TreeNode_NbChildren, None, TDataStd_TreeNode)
TDataStd_TreeNode.IsAscendant = new_instancemethod(_TDataStd.TDataStd_TreeNode_IsAscendant, None, TDataStd_TreeNode)
TDataStd_TreeNode.IsDescendant = new_instancemethod(_TDataStd.TDataStd_TreeNode_IsDescendant, None, TDataStd_TreeNode)
TDataStd_TreeNode.IsRoot = new_instancemethod(_TDataStd.TDataStd_TreeNode_IsRoot, None, TDataStd_TreeNode)
TDataStd_TreeNode.Root = new_instancemethod(_TDataStd.TDataStd_TreeNode_Root, None, TDataStd_TreeNode)
TDataStd_TreeNode.IsFather = new_instancemethod(_TDataStd.TDataStd_TreeNode_IsFather, None, TDataStd_TreeNode)
TDataStd_TreeNode.IsChild = new_instancemethod(_TDataStd.TDataStd_TreeNode_IsChild, None, TDataStd_TreeNode)
TDataStd_TreeNode.HasFather = new_instancemethod(_TDataStd.TDataStd_TreeNode_HasFather, None, TDataStd_TreeNode)
TDataStd_TreeNode.Father = new_instancemethod(_TDataStd.TDataStd_TreeNode_Father, None, TDataStd_TreeNode)
TDataStd_TreeNode.HasNext = new_instancemethod(_TDataStd.TDataStd_TreeNode_HasNext, None, TDataStd_TreeNode)
TDataStd_TreeNode.Next = new_instancemethod(_TDataStd.TDataStd_TreeNode_Next, None, TDataStd_TreeNode)
TDataStd_TreeNode.HasPrevious = new_instancemethod(_TDataStd.TDataStd_TreeNode_HasPrevious, None, TDataStd_TreeNode)
TDataStd_TreeNode.Previous = new_instancemethod(_TDataStd.TDataStd_TreeNode_Previous, None, TDataStd_TreeNode)
TDataStd_TreeNode.HasFirst = new_instancemethod(_TDataStd.TDataStd_TreeNode_HasFirst, None, TDataStd_TreeNode)
TDataStd_TreeNode.First = new_instancemethod(_TDataStd.TDataStd_TreeNode_First, None, TDataStd_TreeNode)
TDataStd_TreeNode.HasLast = new_instancemethod(_TDataStd.TDataStd_TreeNode_HasLast, None, TDataStd_TreeNode)
TDataStd_TreeNode.Last = new_instancemethod(_TDataStd.TDataStd_TreeNode_Last, None, TDataStd_TreeNode)
TDataStd_TreeNode.FindLast = new_instancemethod(_TDataStd.TDataStd_TreeNode_FindLast, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetTreeID = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetTreeID, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetFather = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetFather, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetNext = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetNext, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetPrevious = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetPrevious, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetFirst = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetFirst, None, TDataStd_TreeNode)
TDataStd_TreeNode.SetLast = new_instancemethod(_TDataStd.TDataStd_TreeNode_SetLast, None, TDataStd_TreeNode)
TDataStd_TreeNode.DumpToString = new_instancemethod(_TDataStd.TDataStd_TreeNode_DumpToString, None, TDataStd_TreeNode)
TDataStd_TreeNode._kill_pointed = new_instancemethod(_TDataStd.TDataStd_TreeNode__kill_pointed, None, TDataStd_TreeNode)
TDataStd_TreeNode.GetHandle = new_instancemethod(_TDataStd.TDataStd_TreeNode_GetHandle, None, TDataStd_TreeNode)
TDataStd_TreeNode_swigregister = _TDataStd.TDataStd_TreeNode_swigregister
TDataStd_TreeNode_swigregister(TDataStd_TreeNode)

def TDataStd_TreeNode_Find(*args):
    """
    * class methods working on the node =================================== Returns true if the tree node T is found on the label L. Otherwise, false is returned.

    :param L:
    :type L: TDF_Label &
    :param T:
    :type T: Handle_TDataStd_TreeNode &
    :rtype: bool

    """
    return _TDataStd.TDataStd_TreeNode_Find(*args)

def TDataStd_TreeNode_Set(*args):
    """
    * Finds or Creates a TreeNode attribute on the label <L> with the default tree ID, returned by the method <GetDefaultTreeID>. Returns the created/found TreeNode attribute.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_TDataStd_TreeNode

    * Finds or Creates a TreeNode attribute on the label <L>, with an explicit tree ID. <ExplicitTreeID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created TreeNode attribute.

    :param L:
    :type L: TDF_Label &
    :param ExplicitTreeID:
    :type ExplicitTreeID: Standard_GUID &
    :rtype: Handle_TDataStd_TreeNode

    """
    return _TDataStd.TDataStd_TreeNode_Set(*args)

def TDataStd_TreeNode_GetDefaultTreeID(*args):
    """
    * returns a default tree ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_TreeNode_GetDefaultTreeID(*args)

class Handle_TDataStd_TreeNode(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_TreeNode_swiginit(self, _TDataStd.new_Handle_TDataStd_TreeNode(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_TreeNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_TreeNode.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_TreeNode_Nullify, None, Handle_TDataStd_TreeNode)
Handle_TDataStd_TreeNode.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_TreeNode_IsNull, None, Handle_TDataStd_TreeNode)
Handle_TDataStd_TreeNode.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_TreeNode_GetObject, None, Handle_TDataStd_TreeNode)
Handle_TDataStd_TreeNode._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_TreeNode__kill_pointed, None, Handle_TDataStd_TreeNode)
Handle_TDataStd_TreeNode_swigregister = _TDataStd.Handle_TDataStd_TreeNode_swigregister
Handle_TDataStd_TreeNode_swigregister(Handle_TDataStd_TreeNode)

def Handle_TDataStd_TreeNode_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_TreeNode_DownCast(AnObject)
Handle_TDataStd_TreeNode_DownCast = _TDataStd.Handle_TDataStd_TreeNode_DownCast

class TDataStd_UAttribute(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * api class methods ============= Find, or create, a UAttribute attribute with <LocalID> as Local GUID. The UAttribute attribute is returned. UAttribute methods ============

        :param label:
        :type label: TDF_Label &
        :param LocalID:
        :type LocalID: Standard_GUID &
        :rtype: Handle_TDataStd_UAttribute

        """
        return _TDataStd.TDataStd_UAttribute_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_UAttribute_swiginit(self, _TDataStd.new_TDataStd_UAttribute(*args))

    def SetID(self, *args):
        """
        :param LocalID:
        :type LocalID: Standard_GUID &
        :rtype: None

        """
        return _TDataStd.TDataStd_UAttribute_SetID(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_UAttribute self) -> std::string"""
        return _TDataStd.TDataStd_UAttribute_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_UAttribute self)"""
        return _TDataStd.TDataStd_UAttribute__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_UAttribute self) -> Handle_TDataStd_UAttribute"""
        return _TDataStd.TDataStd_UAttribute_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_UAttribute.SetID = new_instancemethod(_TDataStd.TDataStd_UAttribute_SetID, None, TDataStd_UAttribute)
TDataStd_UAttribute.DumpToString = new_instancemethod(_TDataStd.TDataStd_UAttribute_DumpToString, None, TDataStd_UAttribute)
TDataStd_UAttribute._kill_pointed = new_instancemethod(_TDataStd.TDataStd_UAttribute__kill_pointed, None, TDataStd_UAttribute)
TDataStd_UAttribute.GetHandle = new_instancemethod(_TDataStd.TDataStd_UAttribute_GetHandle, None, TDataStd_UAttribute)
TDataStd_UAttribute_swigregister = _TDataStd.TDataStd_UAttribute_swigregister
TDataStd_UAttribute_swigregister(TDataStd_UAttribute)

def TDataStd_UAttribute_Set(*args):
    """
    * api class methods ============= Find, or create, a UAttribute attribute with <LocalID> as Local GUID. The UAttribute attribute is returned. UAttribute methods ============

    :param label:
    :type label: TDF_Label &
    :param LocalID:
    :type LocalID: Standard_GUID &
    :rtype: Handle_TDataStd_UAttribute

    """
    return _TDataStd.TDataStd_UAttribute_Set(*args)

class Handle_TDataStd_UAttribute(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_UAttribute_swiginit(self, _TDataStd.new_Handle_TDataStd_UAttribute(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_UAttribute_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_UAttribute.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_UAttribute_Nullify, None, Handle_TDataStd_UAttribute)
Handle_TDataStd_UAttribute.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_UAttribute_IsNull, None, Handle_TDataStd_UAttribute)
Handle_TDataStd_UAttribute.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_UAttribute_GetObject, None, Handle_TDataStd_UAttribute)
Handle_TDataStd_UAttribute._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_UAttribute__kill_pointed, None, Handle_TDataStd_UAttribute)
Handle_TDataStd_UAttribute_swigregister = _TDataStd.Handle_TDataStd_UAttribute_swigregister
Handle_TDataStd_UAttribute_swigregister(Handle_TDataStd_UAttribute)

def Handle_TDataStd_UAttribute_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_UAttribute_DownCast(AnObject)
Handle_TDataStd_UAttribute_DownCast = _TDataStd.Handle_TDataStd_UAttribute_DownCast

class TDataStd_Variable(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDataStd.TDataStd_Variable_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TDataStd.TDataStd_Variable_swiginit(self, _TDataStd.new_TDataStd_Variable(*args))

    def Name(self, *args):
        """
        * set or change the name of the variable, in myUnknown and my associated Name attribute.

        :param string:
        :type string: TCollection_ExtendedString &
        :rtype: None

        * returns string stored in the associated Name attribute.

        :rtype: TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Variable_Name(self, *args)


    def Set(self, *args):
        """
        * Find, or create, a Variable attribute. Real methods ============

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDataStd_Variable

        * retrieve or create the associated real attribute and set the value <value>. if creation, dimension is written.

        :param value:
        :type value: float
        :param dimension: default value is TDataStd_SCALAR
        :type dimension: TDataStd_RealEnum
        :rtype: None

        """
        return _TDataStd.TDataStd_Variable_Set(self, *args)


    def IsValued(self, *args):
        """
        * returns True if a Real attribute is associated.

        :rtype: bool

        """
        return _TDataStd.TDataStd_Variable_IsValued(self, *args)


    def Get(self, *args):
        """
        * returns value stored in associated Real attribute.

        :rtype: float

        """
        return _TDataStd.TDataStd_Variable_Get(self, *args)


    def Real(self, *args):
        """
        * returns associated Real attribute.

        :rtype: Handle_TDataStd_Real

        """
        return _TDataStd.TDataStd_Variable_Real(self, *args)


    def IsAssigned(self, *args):
        """
        * returns True if an Expression attribute is associated. create(if doesn't exist), set and returns the assigned expression attribute.

        :rtype: bool

        """
        return _TDataStd.TDataStd_Variable_IsAssigned(self, *args)


    def Assign(self, *args):
        """
        * create(if doesn't exist) and returns the assigned expression attribute. fill it after.

        :rtype: Handle_TDataStd_Expression

        """
        return _TDataStd.TDataStd_Variable_Assign(self, *args)


    def Desassign(self, *args):
        """
        * if <self> is assigned delete the associated expression attribute.

        :rtype: None

        """
        return _TDataStd.TDataStd_Variable_Desassign(self, *args)


    def Expression(self, *args):
        """
        * if <self> is assigned, returns associated Expression attribute.

        :rtype: Handle_TDataStd_Expression

        """
        return _TDataStd.TDataStd_Variable_Expression(self, *args)


    def IsCaptured(self, *args):
        """
        * shortcut for <Real()->IsCaptured()>

        :rtype: bool

        """
        return _TDataStd.TDataStd_Variable_IsCaptured(self, *args)


    def IsConstant(self, *args):
        """
        * A constant value is not modified by regeneration.

        :rtype: bool

        """
        return _TDataStd.TDataStd_Variable_IsConstant(self, *args)


    def Unit(self, *args):
        """
        :param unit:
        :type unit: TCollection_AsciiString &
        :rtype: None

        * to read/write fields ===================

        :rtype: TCollection_AsciiString

        """
        return _TDataStd.TDataStd_Variable_Unit(self, *args)


    def Constant(self, *args):
        """
        * if <status> is True, this variable will not be modified by the solver.

        :param status:
        :type status: bool
        :rtype: None

        """
        return _TDataStd.TDataStd_Variable_Constant(self, *args)


    def DumpToString(self):
        """DumpToString(TDataStd_Variable self) -> std::string"""
        return _TDataStd.TDataStd_Variable_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TDataStd_Variable self)"""
        return _TDataStd.TDataStd_Variable__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TDataStd_Variable self) -> Handle_TDataStd_Variable"""
        return _TDataStd.TDataStd_Variable_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDataStd_Variable.Name = new_instancemethod(_TDataStd.TDataStd_Variable_Name, None, TDataStd_Variable)
TDataStd_Variable.Set = new_instancemethod(_TDataStd.TDataStd_Variable_Set, None, TDataStd_Variable)
TDataStd_Variable.IsValued = new_instancemethod(_TDataStd.TDataStd_Variable_IsValued, None, TDataStd_Variable)
TDataStd_Variable.Get = new_instancemethod(_TDataStd.TDataStd_Variable_Get, None, TDataStd_Variable)
TDataStd_Variable.Real = new_instancemethod(_TDataStd.TDataStd_Variable_Real, None, TDataStd_Variable)
TDataStd_Variable.IsAssigned = new_instancemethod(_TDataStd.TDataStd_Variable_IsAssigned, None, TDataStd_Variable)
TDataStd_Variable.Assign = new_instancemethod(_TDataStd.TDataStd_Variable_Assign, None, TDataStd_Variable)
TDataStd_Variable.Desassign = new_instancemethod(_TDataStd.TDataStd_Variable_Desassign, None, TDataStd_Variable)
TDataStd_Variable.Expression = new_instancemethod(_TDataStd.TDataStd_Variable_Expression, None, TDataStd_Variable)
TDataStd_Variable.IsCaptured = new_instancemethod(_TDataStd.TDataStd_Variable_IsCaptured, None, TDataStd_Variable)
TDataStd_Variable.IsConstant = new_instancemethod(_TDataStd.TDataStd_Variable_IsConstant, None, TDataStd_Variable)
TDataStd_Variable.Unit = new_instancemethod(_TDataStd.TDataStd_Variable_Unit, None, TDataStd_Variable)
TDataStd_Variable.Constant = new_instancemethod(_TDataStd.TDataStd_Variable_Constant, None, TDataStd_Variable)
TDataStd_Variable.DumpToString = new_instancemethod(_TDataStd.TDataStd_Variable_DumpToString, None, TDataStd_Variable)
TDataStd_Variable._kill_pointed = new_instancemethod(_TDataStd.TDataStd_Variable__kill_pointed, None, TDataStd_Variable)
TDataStd_Variable.GetHandle = new_instancemethod(_TDataStd.TDataStd_Variable_GetHandle, None, TDataStd_Variable)
TDataStd_Variable_swigregister = _TDataStd.TDataStd_Variable_swigregister
TDataStd_Variable_swigregister(TDataStd_Variable)

def TDataStd_Variable_GetID(*args):
    """
    * class methods =============

    :rtype: Standard_GUID

    """
    return _TDataStd.TDataStd_Variable_GetID(*args)

class Handle_TDataStd_Variable(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataStd.Handle_TDataStd_Variable_swiginit(self, _TDataStd.new_Handle_TDataStd_Variable(*args))
    DownCast = staticmethod(_TDataStd.Handle_TDataStd_Variable_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDataStd_Variable.Nullify = new_instancemethod(_TDataStd.Handle_TDataStd_Variable_Nullify, None, Handle_TDataStd_Variable)
Handle_TDataStd_Variable.IsNull = new_instancemethod(_TDataStd.Handle_TDataStd_Variable_IsNull, None, Handle_TDataStd_Variable)
Handle_TDataStd_Variable.GetObject = new_instancemethod(_TDataStd.Handle_TDataStd_Variable_GetObject, None, Handle_TDataStd_Variable)
Handle_TDataStd_Variable._kill_pointed = new_instancemethod(_TDataStd.Handle_TDataStd_Variable__kill_pointed, None, Handle_TDataStd_Variable)
Handle_TDataStd_Variable_swigregister = _TDataStd.Handle_TDataStd_Variable_swigregister
Handle_TDataStd_Variable_swigregister(Handle_TDataStd_Variable)

def Handle_TDataStd_Variable_DownCast(AnObject):
    return _TDataStd.Handle_TDataStd_Variable_DownCast(AnObject)
Handle_TDataStd_Variable_DownCast = _TDataStd.Handle_TDataStd_Variable_DownCast



