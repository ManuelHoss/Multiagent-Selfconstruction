# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepMesh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepMesh', [dirname(__file__)])
        except ImportError:
            import _BRepMesh
            return _BRepMesh
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepMesh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepMesh = swig_import_helper()
    del swig_import_helper
else:
    import _BRepMesh
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMesh.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepMesh.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepMesh.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepMesh.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepMesh.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepMesh.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepMesh.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepMesh.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepMesh.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepMesh.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepMesh.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepMesh.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepMesh.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepMesh.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepMesh.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepMesh.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepMesh.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepMesh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.NCollection
import OCC.TColStd
import OCC.Bnd
import OCC.TopTools
import OCC.Message
import OCC.BRepAdaptor
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.Poly
import OCC.TShort

_BRepMesh.BRepMesh_Free_swigconstant(_BRepMesh)
BRepMesh_Free = _BRepMesh.BRepMesh_Free

_BRepMesh.BRepMesh_InVolume_swigconstant(_BRepMesh)
BRepMesh_InVolume = _BRepMesh.BRepMesh_InVolume

_BRepMesh.BRepMesh_OnSurface_swigconstant(_BRepMesh)
BRepMesh_OnSurface = _BRepMesh.BRepMesh_OnSurface

_BRepMesh.BRepMesh_OnCurve_swigconstant(_BRepMesh)
BRepMesh_OnCurve = _BRepMesh.BRepMesh_OnCurve

_BRepMesh.BRepMesh_Fixed_swigconstant(_BRepMesh)
BRepMesh_Fixed = _BRepMesh.BRepMesh_Fixed

_BRepMesh.BRepMesh_Frontier_swigconstant(_BRepMesh)
BRepMesh_Frontier = _BRepMesh.BRepMesh_Frontier

_BRepMesh.BRepMesh_Deleted_swigconstant(_BRepMesh)
BRepMesh_Deleted = _BRepMesh.BRepMesh_Deleted

_BRepMesh.BRepMesh_FE_NOERROR_swigconstant(_BRepMesh)
BRepMesh_FE_NOERROR = _BRepMesh.BRepMesh_FE_NOERROR

_BRepMesh.BRepMesh_FE_LIBRARYNOTFOUND_swigconstant(_BRepMesh)
BRepMesh_FE_LIBRARYNOTFOUND = _BRepMesh.BRepMesh_FE_LIBRARYNOTFOUND

_BRepMesh.BRepMesh_FE_FUNCTIONNOTFOUND_swigconstant(_BRepMesh)
BRepMesh_FE_FUNCTIONNOTFOUND = _BRepMesh.BRepMesh_FE_FUNCTIONNOTFOUND

_BRepMesh.BRepMesh_FE_CANNOTCREATEALGO_swigconstant(_BRepMesh)
BRepMesh_FE_CANNOTCREATEALGO = _BRepMesh.BRepMesh_FE_CANNOTCREATEALGO

_BRepMesh.BRepMesh_NoError_swigconstant(_BRepMesh)
BRepMesh_NoError = _BRepMesh.BRepMesh_NoError

_BRepMesh.BRepMesh_OpenWire_swigconstant(_BRepMesh)
BRepMesh_OpenWire = _BRepMesh.BRepMesh_OpenWire

_BRepMesh.BRepMesh_SelfIntersectingWire_swigconstant(_BRepMesh)
BRepMesh_SelfIntersectingWire = _BRepMesh.BRepMesh_SelfIntersectingWire

_BRepMesh.BRepMesh_Failure_swigconstant(_BRepMesh)
BRepMesh_Failure = _BRepMesh.BRepMesh_Failure

_BRepMesh.BRepMesh_ReMesh_swigconstant(_BRepMesh)
BRepMesh_ReMesh = _BRepMesh.BRepMesh_ReMesh
class brepmesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Mesh(*args):
        """
        * call to incremental mesh.

        :param S:
        :type S: TopoDS_Shape &
        :param d:
        :type d: float
        :rtype: void

        """
        return _BRepMesh.brepmesh_Mesh(*args)

    Mesh = staticmethod(Mesh)

    def __init__(self):
        _BRepMesh.brepmesh_swiginit(self, _BRepMesh.new_brepmesh())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


brepmesh._kill_pointed = new_instancemethod(_BRepMesh.brepmesh__kill_pointed, None, brepmesh)
brepmesh_swigregister = _BRepMesh.brepmesh_swigregister
brepmesh_swigregister(brepmesh)

def brepmesh_Mesh(*args):
    """
    * call to incremental mesh.

    :param S:
    :type S: TopoDS_Shape &
    :param d:
    :type d: float
    :rtype: void

    """
    return _BRepMesh.brepmesh_Mesh(*args)

class BRepMesh_Array1OfBiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: BRepMesh_BiPoint &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_Array1OfBiPoint_swiginit(self, _BRepMesh.new_BRepMesh_Array1OfBiPoint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: BRepMesh_BiPoint &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Array1OfBiPoint &
        :rtype: BRepMesh_Array1OfBiPoint

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Array1OfBiPoint &
        :rtype: BRepMesh_Array1OfBiPoint

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: BRepMesh_BiPoint &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_BiPoint

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_BiPoint

        """
        return _BRepMesh.BRepMesh_Array1OfBiPoint_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Array1OfBiPoint.Init = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Init, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Destroy = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Destroy, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.IsAllocated = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_IsAllocated, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Assign = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Assign, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Set = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Set, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Length = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Length, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Lower = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Lower, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Upper = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Upper, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.SetValue = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_SetValue, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.Value = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_Value, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint.ChangeValue = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint_ChangeValue, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Array1OfBiPoint__kill_pointed, None, BRepMesh_Array1OfBiPoint)
BRepMesh_Array1OfBiPoint_swigregister = _BRepMesh.BRepMesh_Array1OfBiPoint_swigregister
BRepMesh_Array1OfBiPoint_swigregister(BRepMesh_Array1OfBiPoint)

class BRepMesh_Array1OfVertexOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: BRepMesh_Vertex &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_Array1OfVertexOfDelaun(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Array1OfVertexOfDelaun &
        :rtype: BRepMesh_Array1OfVertexOfDelaun

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Array1OfVertexOfDelaun &
        :rtype: BRepMesh_Array1OfVertexOfDelaun

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Array1OfVertexOfDelaun.Init = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Init, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Destroy = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Destroy, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.IsAllocated = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_IsAllocated, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Assign = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Assign, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Set = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Set, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Length = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Length, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Lower = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Lower, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Upper = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Upper, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.SetValue = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_SetValue, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.Value = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_Value, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun.ChangeValue = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun_ChangeValue, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Array1OfVertexOfDelaun__kill_pointed, None, BRepMesh_Array1OfVertexOfDelaun)
BRepMesh_Array1OfVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_Array1OfVertexOfDelaun_swigregister
BRepMesh_Array1OfVertexOfDelaun_swigregister(BRepMesh_Array1OfVertexOfDelaun)

class BRepMesh_BiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :rtype: None

        """
        _BRepMesh.BRepMesh_BiPoint_swiginit(self, _BRepMesh.new_BRepMesh_BiPoint(*args))

    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_BiPoint_Indices(self, *args)


    def Coordinates(self, *args):
        """
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_BiPoint_Coordinates(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_BiPoint.Indices = new_instancemethod(_BRepMesh.BRepMesh_BiPoint_Indices, None, BRepMesh_BiPoint)
BRepMesh_BiPoint.Coordinates = new_instancemethod(_BRepMesh.BRepMesh_BiPoint_Coordinates, None, BRepMesh_BiPoint)
BRepMesh_BiPoint._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_BiPoint__kill_pointed, None, BRepMesh_BiPoint)
BRepMesh_BiPoint_swigregister = _BRepMesh.BRepMesh_BiPoint_swigregister
BRepMesh_BiPoint_swigregister(BRepMesh_BiPoint)

class BRepMesh_Circ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param loc:
        :type loc: gp_XY
        :param rad:
        :type rad: float
        :rtype: None

        """
        _BRepMesh.BRepMesh_Circ_swiginit(self, _BRepMesh.new_BRepMesh_Circ(*args))

    def SetLocation(self, *args):
        """
        :param loc:
        :type loc: gp_XY
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Circ_SetLocation(self, *args)


    def SetRadius(self, *args):
        """
        :param rad:
        :type rad: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Circ_SetRadius(self, *args)


    def Location(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_Circ_Location(self, *args)


    def Radius(self, *args):
        """
        :rtype: float

        """
        return _BRepMesh.BRepMesh_Circ_Radius(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Circ.SetLocation = new_instancemethod(_BRepMesh.BRepMesh_Circ_SetLocation, None, BRepMesh_Circ)
BRepMesh_Circ.SetRadius = new_instancemethod(_BRepMesh.BRepMesh_Circ_SetRadius, None, BRepMesh_Circ)
BRepMesh_Circ.Location = new_instancemethod(_BRepMesh.BRepMesh_Circ_Location, None, BRepMesh_Circ)
BRepMesh_Circ.Radius = new_instancemethod(_BRepMesh.BRepMesh_Circ_Radius, None, BRepMesh_Circ)
BRepMesh_Circ._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Circ__kill_pointed, None, BRepMesh_Circ)
BRepMesh_Circ_swigregister = _BRepMesh.BRepMesh_Circ_swigregister
BRepMesh_Circ_swigregister(BRepMesh_Circ)

class BRepMesh_CircleInspector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Add(self, *args):
        """
        :param theInd:
        :type theInd: int
        :param theCircle:
        :type theCircle: BRepMesh_Circ &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleInspector_Add(self, *args)


    def ClerResList(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleInspector_ClerResList(self, *args)


    def MapOfCirc(self, *args):
        """
        :rtype: CircVector

        """
        return _BRepMesh.BRepMesh_CircleInspector_MapOfCirc(self, *args)


    def GetCirc(self, *args):
        """
        :param theInd:
        :type theInd: int
        :rtype: BRepMesh_Circ

        """
        return _BRepMesh.BRepMesh_CircleInspector_GetCirc(self, *args)


    def SetCurrent(self, *args):
        """
        * Set current node to be checked

        :param theCurCircle:
        :type theCurCircle: gp_XY
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleInspector_SetCurrent(self, *args)


    def GetCoincidentInd(self, *args):
        """
        * //!Get result index of node

        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_CircleInspector_GetCoincidentInd(self, *args)


    def IsEqual(*args):
        """
        :param theIdx:
        :type theIdx: int
        :param theTarget:
        :type theTarget: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_CircleInspector_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_CircleInspector.Add = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_Add, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector.ClerResList = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_ClerResList, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector.MapOfCirc = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_MapOfCirc, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector.GetCirc = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_GetCirc, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector.SetCurrent = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_SetCurrent, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector.GetCoincidentInd = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector_GetCoincidentInd, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_CircleInspector__kill_pointed, None, BRepMesh_CircleInspector)
BRepMesh_CircleInspector_swigregister = _BRepMesh.BRepMesh_CircleInspector_swigregister
BRepMesh_CircleInspector_swigregister(BRepMesh_CircleInspector)

def BRepMesh_CircleInspector_IsEqual(*args):
    """
    :param theIdx:
    :type theIdx: int
    :param theTarget:
    :type theTarget: int
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_CircleInspector_IsEqual(*args)

class BRepMesh_CircleTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theAlloc:
        :type theAlloc: BRepMesh_BaseAllocator &
        :rtype: None

        * Constructs a CircleTool with the maximal dimension of the occuped space and an evaluation of the number of circles.

        :param numberOfComponents:
        :type numberOfComponents: int
        :param theAlloc:
        :type theAlloc: BRepMesh_BaseAllocator &
        :rtype: None

        """
        _BRepMesh.BRepMesh_CircleTool_swiginit(self, _BRepMesh.new_BRepMesh_CircleTool(*args))

    def Initialize(self, *args):
        """
        * Constructs a CircleTool with the maximal dimension of the occuped space and an evaluation of the number of circles.

        :param numberOfComponents:
        :type numberOfComponents: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleTool_Initialize(self, *args)


    def SetCellSize(self, *args):
        """
        * Sets new size for cellfilter

        :param theSize:
        :type theSize: float
        :rtype: None

        * Sets new size for cellfilter

        :param theXSize:
        :type theXSize: float
        :param theYSize:
        :type theYSize: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleTool_SetCellSize(self, *args)


    def SetMinMaxSize(self, *args):
        """
        * Sets min and max size for circle

        :param theMin:
        :type theMin: gp_XY
        :param theMax:
        :type theMax: gp_XY
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleTool_SetMinMaxSize(self, *args)


    def Add(self, *args):
        """
        * Adds and binds circle to the tool.

        :param theCirc:
        :type theCirc: gp_Circ2d
        :param theIndex:
        :type theIndex: int
        :rtype: None

        * Computes adds and binds circle to the tool.

        :param p1:
        :type p1: gp_XY
        :param p2:
        :type p2: gp_XY
        :param p3:
        :type p3: gp_XY
        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_CircleTool_Add(self, *args)


    def MocAdd(self, *args):
        """
        * Adds implicit zero circle

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleTool_MocAdd(self, *args)


    def Delete(self, *args):
        """
        * Deletes a circle from the tool.

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_CircleTool_Delete(self, *args)


    def Select(self, *args):
        """
        * Select the circles which contains thePnt.

        :param thePnt:
        :type thePnt: gp_XY
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_CircleTool_Select(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_CircleTool.Initialize = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_Initialize, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.SetCellSize = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_SetCellSize, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.SetMinMaxSize = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_SetMinMaxSize, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.Add = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_Add, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.MocAdd = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_MocAdd, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.Delete = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_Delete, None, BRepMesh_CircleTool)
BRepMesh_CircleTool.Select = new_instancemethod(_BRepMesh.BRepMesh_CircleTool_Select, None, BRepMesh_CircleTool)
BRepMesh_CircleTool._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_CircleTool__kill_pointed, None, BRepMesh_CircleTool)
BRepMesh_CircleTool_swigregister = _BRepMesh.BRepMesh_CircleTool_swigregister
BRepMesh_CircleTool_swigregister(BRepMesh_CircleTool)

class BRepMesh_Classifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theFace:
        :type theFace: TopoDS_Face &
        :param theTolUV:
        :type theTolUV: float
        :param theEdges:
        :type theEdges: BRepMesh_DataMapOfShapePairOfPolygon &
        :param theMap:
        :type theMap: TColStd_IndexedMapOfInteger &
        :param theStructure:
        :type theStructure: Handle_BRepMesh_DataStructureOfDelaun &
        :param theUmin:
        :type theUmin: float
        :param theUmax:
        :type theUmax: float
        :param theVmin:
        :type theVmin: float
        :param theVmax:
        :type theVmax: float
        :rtype: None

        """
        _BRepMesh.BRepMesh_Classifier_swiginit(self, _BRepMesh.new_BRepMesh_Classifier(*args))

    def Perform(self, *args):
        """
        :param thePoint:
        :type thePoint: gp_Pnt2d
        :rtype: TopAbs_State

        """
        return _BRepMesh.BRepMesh_Classifier_Perform(self, *args)


    def State(self, *args):
        """
        :rtype: BRepMesh_Status

        """
        return _BRepMesh.BRepMesh_Classifier_State(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Classifier_Destroy(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Classifier.Perform = new_instancemethod(_BRepMesh.BRepMesh_Classifier_Perform, None, BRepMesh_Classifier)
BRepMesh_Classifier.State = new_instancemethod(_BRepMesh.BRepMesh_Classifier_State, None, BRepMesh_Classifier)
BRepMesh_Classifier.Destroy = new_instancemethod(_BRepMesh.BRepMesh_Classifier_Destroy, None, BRepMesh_Classifier)
BRepMesh_Classifier._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Classifier__kill_pointed, None, BRepMesh_Classifier)
BRepMesh_Classifier_swigregister = _BRepMesh.BRepMesh_Classifier_swigregister
BRepMesh_Classifier_swigregister(BRepMesh_Classifier)

class BRepMesh_ComparatorOfIndexedVertexOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theDir:
        :type theDir: gp_XY
        :param TheTol:
        :type TheTol: float
        :param HDS:
        :type HDS: Handle_BRepMesh_DataStructureOfDelaun &
        :rtype: None

        """
        _BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_ComparatorOfIndexedVertexOfDelaun(*args))

    def IsLower(self, *args):
        """
        * returns True if <Left> is lower than <Right>

        :param Left:
        :type Left: int
        :param Right:
        :type Right: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsLower(self, *args)


    def IsGreater(self, *args):
        """
        * returns True if <Left> is greater than <Right>

        :param Left:
        :type Left: int
        :param Right:
        :type Right: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsGreater(self, *args)


    def IsEqual(self, *args):
        """
        * returns True when <Right> and <Left> are equal.

        :param Left:
        :type Left: int
        :param Right:
        :type Right: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsEqual(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ComparatorOfIndexedVertexOfDelaun.IsLower = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsLower, None, BRepMesh_ComparatorOfIndexedVertexOfDelaun)
BRepMesh_ComparatorOfIndexedVertexOfDelaun.IsGreater = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsGreater, None, BRepMesh_ComparatorOfIndexedVertexOfDelaun)
BRepMesh_ComparatorOfIndexedVertexOfDelaun.IsEqual = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_IsEqual, None, BRepMesh_ComparatorOfIndexedVertexOfDelaun)
BRepMesh_ComparatorOfIndexedVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun__kill_pointed, None, BRepMesh_ComparatorOfIndexedVertexOfDelaun)
BRepMesh_ComparatorOfIndexedVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_ComparatorOfIndexedVertexOfDelaun_swigregister
BRepMesh_ComparatorOfIndexedVertexOfDelaun_swigregister(BRepMesh_ComparatorOfIndexedVertexOfDelaun)

class BRepMesh_ComparatorOfVertexOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theDir:
        :type theDir: gp_XY
        :rtype: None

        """
        _BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_ComparatorOfVertexOfDelaun(*args))

    def IsLower(self, *args):
        """
        * returns True if <Left> is lower than <Right>

        :param Left:
        :type Left: BRepMesh_Vertex &
        :param Right:
        :type Right: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsLower(self, *args)


    def IsGreater(self, *args):
        """
        * returns True if <Left> is greater than <Right>

        :param Left:
        :type Left: BRepMesh_Vertex &
        :param Right:
        :type Right: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsGreater(self, *args)


    def IsEqual(self, *args):
        """
        * returns True when <Right> and <Left> are equal.

        :param Left:
        :type Left: BRepMesh_Vertex &
        :param Right:
        :type Right: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsEqual(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ComparatorOfVertexOfDelaun.IsLower = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsLower, None, BRepMesh_ComparatorOfVertexOfDelaun)
BRepMesh_ComparatorOfVertexOfDelaun.IsGreater = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsGreater, None, BRepMesh_ComparatorOfVertexOfDelaun)
BRepMesh_ComparatorOfVertexOfDelaun.IsEqual = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_IsEqual, None, BRepMesh_ComparatorOfVertexOfDelaun)
BRepMesh_ComparatorOfVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun__kill_pointed, None, BRepMesh_ComparatorOfVertexOfDelaun)
BRepMesh_ComparatorOfVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_ComparatorOfVertexOfDelaun_swigregister
BRepMesh_ComparatorOfVertexOfDelaun_swigregister(BRepMesh_ComparatorOfVertexOfDelaun)

class BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfFaceAttribute &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfFaceAttribute &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_BRepMesh_FaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute)
BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Key, None, BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute)
BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_Value, None, BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute)
BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute)
BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_swigregister
BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute_swigregister(BRepMesh_DataMapIteratorOfDataMapOfFaceAttribute)

class BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerListOfInteger &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerListOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Key, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_Value, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister(BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfInteger)

class BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerListOfXY &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_ListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Key, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_Value, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_swigregister
BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY_swigregister(BRepMesh_DataMapIteratorOfDataMapOfIntegerListOfXY)

class BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerPnt &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfIntegerPnt &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt)
BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Key, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt)
BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_Value, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt)
BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt)
BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_swigregister
BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt_swigregister(BRepMesh_DataMapIteratorOfDataMapOfIntegerPnt)

class BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfShapePairOfPolygon &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfShapePairOfPolygon &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_PairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Key, None, BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_Value, None, BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_swigregister
BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon_swigregister(BRepMesh_DataMapIteratorOfDataMapOfShapePairOfPolygon)

class BRepMesh_DataMapIteratorOfDataMapOfShapeReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfShapeReal &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfShapeReal(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfShapeReal &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: float

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfShapeReal.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfShapeReal)
BRepMesh_DataMapIteratorOfDataMapOfShapeReal.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Key, None, BRepMesh_DataMapIteratorOfDataMapOfShapeReal)
BRepMesh_DataMapIteratorOfDataMapOfShapeReal.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_Value, None, BRepMesh_DataMapIteratorOfDataMapOfShapeReal)
BRepMesh_DataMapIteratorOfDataMapOfShapeReal._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfShapeReal)
BRepMesh_DataMapIteratorOfDataMapOfShapeReal_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfShapeReal_swigregister
BRepMesh_DataMapIteratorOfDataMapOfShapeReal_swigregister(BRepMesh_DataMapIteratorOfDataMapOfShapeReal)

class BRepMesh_DataMapIteratorOfDataMapOfVertexInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMesh_DataMapOfVertexInteger &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapIteratorOfDataMapOfVertexInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMesh_DataMapOfVertexInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapIteratorOfDataMapOfVertexInteger.Initialize = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Initialize, None, BRepMesh_DataMapIteratorOfDataMapOfVertexInteger)
BRepMesh_DataMapIteratorOfDataMapOfVertexInteger.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Key, None, BRepMesh_DataMapIteratorOfDataMapOfVertexInteger)
BRepMesh_DataMapIteratorOfDataMapOfVertexInteger.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_Value, None, BRepMesh_DataMapIteratorOfDataMapOfVertexInteger)
BRepMesh_DataMapIteratorOfDataMapOfVertexInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger__kill_pointed, None, BRepMesh_DataMapIteratorOfDataMapOfVertexInteger)
BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_swigregister = _BRepMesh.BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_swigregister
BRepMesh_DataMapIteratorOfDataMapOfVertexInteger_swigregister(BRepMesh_DataMapIteratorOfDataMapOfVertexInteger)

class BRepMesh_DataMapNodeOfDataMapOfFaceAttribute(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :param I:
        :type I: Handle_BRepMesh_FaceAttribute &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_BRepMesh_FaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfFaceAttribute self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfFaceAttribute self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_Key, None, BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_Value, None, BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
BRepMesh_DataMapNodeOfDataMapOfFaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister
BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister(BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)

class Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute)

def Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfFaceAttribute_DownCast

class BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: BRepMesh_ListOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger(*args))

    def GetKey(self):
        """GetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_GetKey(self)


    def SetKey(self, value):
        """SetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.GetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_GetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.SetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_SetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_Value, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)

class Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger)

def Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast

class BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: BRepMesh_ListOfXY &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY(*args))

    def GetKey(self):
        """GetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_GetKey(self)


    def SetKey(self, value):
        """SetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: BRepMesh_ListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.GetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_GetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.SetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_SetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_Value, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister
BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister(BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)

class Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY)

def Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerListOfXY_DownCast

class BRepMesh_DataMapNodeOfDataMapOfIntegerPnt(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Pnt
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt(*args))

    def GetKey(self):
        """GetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerPnt self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_GetKey(self)


    def SetKey(self, value):
        """SetKey(BRepMesh_DataMapNodeOfDataMapOfIntegerPnt self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfIntegerPnt self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfIntegerPnt self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.GetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_GetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.SetKey = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_SetKey, None, BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_Value, None, BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister
BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister(BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)

class Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt)

def Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfIntegerPnt_DownCast

class BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepMesh_PairOfPolygon &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_PairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_Key, None, BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.Value = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_Value, None, BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister
BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister(BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)

class Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon)

def Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapePairOfPolygon_DownCast

class BRepMesh_DataMapNodeOfDataMapOfShapeReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: float &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfShapeReal(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_Key(self, *args)


    def GetValue(self):
        """GetValue(BRepMesh_DataMapNodeOfDataMapOfShapeReal self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_GetValue(self)


    def SetValue(self, value):
        """SetValue(BRepMesh_DataMapNodeOfDataMapOfShapeReal self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfShapeReal self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfShapeReal self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfShapeReal.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_Key, None, BRepMesh_DataMapNodeOfDataMapOfShapeReal)
BRepMesh_DataMapNodeOfDataMapOfShapeReal.GetValue = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_GetValue, None, BRepMesh_DataMapNodeOfDataMapOfShapeReal)
BRepMesh_DataMapNodeOfDataMapOfShapeReal.SetValue = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_SetValue, None, BRepMesh_DataMapNodeOfDataMapOfShapeReal)
BRepMesh_DataMapNodeOfDataMapOfShapeReal._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfShapeReal)
BRepMesh_DataMapNodeOfDataMapOfShapeReal.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfShapeReal)
BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister
BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister(BRepMesh_DataMapNodeOfDataMapOfShapeReal)

class Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal)

def Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfShapeReal_DownCast

class BRepMesh_DataMapNodeOfDataMapOfVertexInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapNodeOfDataMapOfVertexInteger(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_Key(self, *args)


    def GetValue(self):
        """GetValue(BRepMesh_DataMapNodeOfDataMapOfVertexInteger self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_GetValue(self)


    def SetValue(self, value):
        """SetValue(BRepMesh_DataMapNodeOfDataMapOfVertexInteger self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapNodeOfDataMapOfVertexInteger self)"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataMapNodeOfDataMapOfVertexInteger self) -> Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger"""
        return _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapNodeOfDataMapOfVertexInteger.Key = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_Key, None, BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
BRepMesh_DataMapNodeOfDataMapOfVertexInteger.GetValue = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_GetValue, None, BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
BRepMesh_DataMapNodeOfDataMapOfVertexInteger.SetValue = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_SetValue, None, BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
BRepMesh_DataMapNodeOfDataMapOfVertexInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger__kill_pointed, None, BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
BRepMesh_DataMapNodeOfDataMapOfVertexInteger.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_GetHandle, None, BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister = _BRepMesh.BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister
BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister(BRepMesh_DataMapNodeOfDataMapOfVertexInteger)

class Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_Nullify, None, Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_IsNull, None, Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_GetObject, None, Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger__kill_pointed, None, Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger)
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_swigregister(Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger)

def Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_DownCast(AnObject)
Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_DownCast = _BRepMesh.Handle_BRepMesh_DataMapNodeOfDataMapOfVertexInteger_DownCast

class BRepMesh_DataMapOfFaceAttribute(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfFaceAttribute_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfFaceAttribute(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfFaceAttribute &
        :rtype: BRepMesh_DataMapOfFaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfFaceAttribute &
        :rtype: BRepMesh_DataMapOfFaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :param I:
        :type I: Handle_BRepMesh_FaceAttribute &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: Handle_BRepMesh_FaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: Handle_BRepMesh_FaceAttribute

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Face &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfFaceAttribute self)"""
        return _BRepMesh.BRepMesh_DataMapOfFaceAttribute__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfFaceAttribute.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Assign, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Set, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_ReSize, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Clear, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Bind, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_IsBound, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_UnBind, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Find, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_ChangeFind, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_Find1, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute_ChangeFind1, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfFaceAttribute__kill_pointed, None, BRepMesh_DataMapOfFaceAttribute)
BRepMesh_DataMapOfFaceAttribute_swigregister = _BRepMesh.BRepMesh_DataMapOfFaceAttribute_swigregister
BRepMesh_DataMapOfFaceAttribute_swigregister(BRepMesh_DataMapOfFaceAttribute)

class BRepMesh_DataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfIntegerListOfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerListOfInteger &
        :rtype: BRepMesh_DataMapOfIntegerListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerListOfInteger &
        :rtype: BRepMesh_DataMapOfIntegerListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: BRepMesh_ListOfInteger &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfIntegerListOfInteger self)"""
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfIntegerListOfInteger.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Assign, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Set, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ReSize, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Clear, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Bind, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_IsBound, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_UnBind, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Find, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ChangeFind, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_Find1, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_ChangeFind1, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger__kill_pointed, None, BRepMesh_DataMapOfIntegerListOfInteger)
BRepMesh_DataMapOfIntegerListOfInteger_swigregister = _BRepMesh.BRepMesh_DataMapOfIntegerListOfInteger_swigregister
BRepMesh_DataMapOfIntegerListOfInteger_swigregister(BRepMesh_DataMapOfIntegerListOfInteger)

class BRepMesh_DataMapOfIntegerListOfXY(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfIntegerListOfXY(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerListOfXY &
        :rtype: BRepMesh_DataMapOfIntegerListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerListOfXY &
        :rtype: BRepMesh_DataMapOfIntegerListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: BRepMesh_ListOfXY &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: BRepMesh_ListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: BRepMesh_ListOfXY

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfIntegerListOfXY self)"""
        return _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfIntegerListOfXY.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Assign, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Set, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ReSize, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Clear, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Bind, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_IsBound, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_UnBind, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Find, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ChangeFind, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_Find1, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_ChangeFind1, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerListOfXY__kill_pointed, None, BRepMesh_DataMapOfIntegerListOfXY)
BRepMesh_DataMapOfIntegerListOfXY_swigregister = _BRepMesh.BRepMesh_DataMapOfIntegerListOfXY_swigregister
BRepMesh_DataMapOfIntegerListOfXY_swigregister(BRepMesh_DataMapOfIntegerListOfXY)

class BRepMesh_DataMapOfIntegerPnt(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfIntegerPnt_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfIntegerPnt(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerPnt &
        :rtype: BRepMesh_DataMapOfIntegerPnt

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfIntegerPnt &
        :rtype: BRepMesh_DataMapOfIntegerPnt

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Pnt
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfIntegerPnt self)"""
        return _BRepMesh.BRepMesh_DataMapOfIntegerPnt__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfIntegerPnt.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Assign, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Set, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_ReSize, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Clear, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Bind, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_IsBound, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_UnBind, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Find, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_ChangeFind, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_Find1, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt_ChangeFind1, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfIntegerPnt__kill_pointed, None, BRepMesh_DataMapOfIntegerPnt)
BRepMesh_DataMapOfIntegerPnt_swigregister = _BRepMesh.BRepMesh_DataMapOfIntegerPnt_swigregister
BRepMesh_DataMapOfIntegerPnt_swigregister(BRepMesh_DataMapOfIntegerPnt)

class BRepMesh_DataMapOfShapePairOfPolygon(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfShapePairOfPolygon(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfShapePairOfPolygon &
        :rtype: BRepMesh_DataMapOfShapePairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfShapePairOfPolygon &
        :rtype: BRepMesh_DataMapOfShapePairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepMesh_PairOfPolygon &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepMesh_PairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepMesh_PairOfPolygon

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfShapePairOfPolygon self)"""
        return _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfShapePairOfPolygon.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Assign, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Set, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ReSize, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Clear, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Bind, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_IsBound, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_UnBind, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Find, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ChangeFind, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_Find1, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_ChangeFind1, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon__kill_pointed, None, BRepMesh_DataMapOfShapePairOfPolygon)
BRepMesh_DataMapOfShapePairOfPolygon_swigregister = _BRepMesh.BRepMesh_DataMapOfShapePairOfPolygon_swigregister
BRepMesh_DataMapOfShapePairOfPolygon_swigregister(BRepMesh_DataMapOfShapePairOfPolygon)

class BRepMesh_DataMapOfShapeReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfShapeReal_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfShapeReal(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfShapeReal &
        :rtype: BRepMesh_DataMapOfShapeReal

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfShapeReal &
        :rtype: BRepMesh_DataMapOfShapeReal

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: float &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: float

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: float

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfShapeReal_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfShapeReal self)"""
        return _BRepMesh.BRepMesh_DataMapOfShapeReal__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfShapeReal.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Assign, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Set, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_ReSize, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Clear, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Bind, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_IsBound, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_UnBind, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Find, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_ChangeFind, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_Find1, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal_ChangeFind1, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfShapeReal__kill_pointed, None, BRepMesh_DataMapOfShapeReal)
BRepMesh_DataMapOfShapeReal_swigregister = _BRepMesh.BRepMesh_DataMapOfShapeReal_swigregister
BRepMesh_DataMapOfShapeReal_swigregister(BRepMesh_DataMapOfShapeReal)

class BRepMesh_DataMapOfVertexInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataMapOfVertexInteger_swiginit(self, _BRepMesh.new_BRepMesh_DataMapOfVertexInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfVertexInteger &
        :rtype: BRepMesh_DataMapOfVertexInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_DataMapOfVertexInteger &
        :rtype: BRepMesh_DataMapOfVertexInteger

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Vertex &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataMapOfVertexInteger self)"""
        return _BRepMesh.BRepMesh_DataMapOfVertexInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataMapOfVertexInteger.Assign = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Assign, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.Set = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Set, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.ReSize = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_ReSize, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.Clear = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Clear, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.Bind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Bind, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.IsBound = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_IsBound, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.UnBind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_UnBind, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.Find = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Find, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.ChangeFind = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_ChangeFind, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.Find1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_Find1, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger.ChangeFind1 = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger_ChangeFind1, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataMapOfVertexInteger__kill_pointed, None, BRepMesh_DataMapOfVertexInteger)
BRepMesh_DataMapOfVertexInteger_swigregister = _BRepMesh.BRepMesh_DataMapOfVertexInteger_swigregister
BRepMesh_DataMapOfVertexInteger_swigregister(BRepMesh_DataMapOfVertexInteger)

class BRepMesh_DataStructureOfDelaun(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * <NodeNumber> is just an evaluation of the presumed number of nodes in this mesh. The Mesh data structure will be automatically redimensioned if necessary.

        :param theAllocator:
        :type theAllocator: BRepMesh_BaseAllocator &
        :param NodeNumber: default value is 100
        :type NodeNumber: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_DataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_DataStructureOfDelaun(*args))

    def AddNode(self, *args):
        """
        * Adds a node to the mesh if the node is not already in the Mesh. Returns the index of the node in the structure.

        :param theNode:
        :type theNode: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_AddNode(self, *args)


    def GetNode(self, *args):
        """
        * Get the value of node <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_GetNode(self, *args)


    def GetNodeList(self, *args):
        """
        * Get the list of node <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_GetNodeList(self, *args)


    def ForceRemoveNode(self, *args):
        """
        * Removes the node of index <index> from the mesh.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ForceRemoveNode(self, *args)


    def ForceRemoveLink(self, *args):
        """
        * Removes the link of index <index> from the mesh.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ForceRemoveLink(self, *args)


    def ReplaceNodes(self, *args):
        """
        * Removes the all nodes and sets new map of nodes from the mesh. For internal use only.

        :param NewNodes:
        :type NewNodes: BRepMesh_VertexTool &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ReplaceNodes(self, *args)


    def RemoveNode(self, *args):
        """
        * Removes the node of index <index> from the mesh.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveNode(self, *args)


    def MoveNode(self, *args):
        """
        * Changes the UV value of node of index <Index> by <newNode>. Returns false if <newnode> is already in the structure.

        :param Index:
        :type Index: int
        :param newNode:
        :type newNode: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_MoveNode(self, *args)


    def NbNodes(self, *args):
        """
        * Gives the number of nodes in this mesh.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_NbNodes(self, *args)


    def AddLink(self, *args):
        """
        * Adds a Link to the mesh if the Link is not already in the structure. Returns the index of the link in the structure.

        :param theLink:
        :type theLink: BRepMesh_Edge &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_AddLink(self, *args)


    def GetLink(self, *args):
        """
        * Get the value of Link <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_GetLink(self, *args)


    def RemoveLink(self, *args):
        """
        * Removes the Link of index <Index> from the mesh.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveLink(self, *args)


    def SubstituteLink(self, *args):
        """
        * Substitutes the Link of index <Index> by <newLink> clear the connectivity.

        :param Index:
        :type Index: int
        :param newLink:
        :type newLink: BRepMesh_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_SubstituteLink(self, *args)


    def NbLinks(self, *args):
        """
        * Gives the number of elements in this mesh.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_NbLinks(self, *args)


    def AddElement(self, *args):
        """
        * Adds an element to the mesh if it is not already in the Mesh. Returns the index of the element in the structure.

        :param theElement:
        :type theElement: BRepMesh_Triangle &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_AddElement(self, *args)


    def GetElement(self, *args):
        """
        * Get the value of Element <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_GetElement(self, *args)


    def RemoveElement(self, *args):
        """
        * Removes the element of index <Index> in the mesh.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveElement(self, *args)


    def SubstituteElement(self, *args):
        """
        * Substitutes the element of index <Index> by <newElement>. The links connectivity is updated.

        :param Index:
        :type Index: int
        :param newElement:
        :type newElement: BRepMesh_Triangle &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_SubstituteElement(self, *args)


    def NbElements(self, *args):
        """
        * Gives the number of elements in this mesh.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_NbElements(self, *args)


    def ClearDomain(self, *args):
        """
        * Removes all elements

        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ClearDomain(self, *args)


    def IndexOf(self, *args):
        """
        * Finds the index of the node. Returns 0 if the node is not in the mesh.

        :param aNode:
        :type aNode: BRepMesh_Vertex &
        :rtype: int

        * Finds the index of the Link. Returns 0 if the Link is not in the mesh.

        :param aLink:
        :type aLink: BRepMesh_Edge &
        :rtype: int

        * Finds the index of the Element. Returns 0 if the Element is not in the mesh.

        :param anElement:
        :type anElement: BRepMesh_Triangle &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_IndexOf(self, *args)


    def LinkNeighboursOf(self, *args):
        """
        * Gives the list of Link's indices handling the node <theNode>.

        :param theNode:
        :type theNode: int
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_LinkNeighboursOf(self, *args)


    def ElemConnectedTo(self, *args):
        """
        * Gives the element's indices conected to <theLink>.

        :param theLink:
        :type theLink: int
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ElemConnectedTo(self, *args)


    def ElemOfDomain(self, *args):
        """
        * Gives the list of element's indices

        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ElemOfDomain(self, *args)


    def LinkOfDomain(self, *args):
        """
        * Gives the list of link's indices

        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_LinkOfDomain(self, *args)


    def ClearDeleted(self, *args):
        """
        * This method substitute the deleted items by the last in Indexed Data Maps to have only non-deleted elements, links or nodes in the structure.

        :rtype: None

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_ClearDeleted(self, *args)


    def StatisticsToString(self):
        """StatisticsToString(BRepMesh_DataStructureOfDelaun self) -> std::string"""
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_StatisticsToString(self)


    def Allocator(self, *args):
        """
        :rtype: BRepMesh_BaseAllocator

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_Allocator(self, *args)


    def Data(self, *args):
        """
        * Give the data structure for cell size and tolerance initialization.

        :rtype: BRepMesh_VertexTool

        """
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_Data(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_DataStructureOfDelaun__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DataStructureOfDelaun self) -> Handle_BRepMesh_DataStructureOfDelaun"""
        return _BRepMesh.BRepMesh_DataStructureOfDelaun_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DataStructureOfDelaun.AddNode = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_AddNode, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.GetNode = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_GetNode, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.GetNodeList = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_GetNodeList, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ForceRemoveNode = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ForceRemoveNode, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ForceRemoveLink = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ForceRemoveLink, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ReplaceNodes = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ReplaceNodes, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.RemoveNode = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveNode, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.MoveNode = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_MoveNode, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.NbNodes = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_NbNodes, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.AddLink = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_AddLink, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.GetLink = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_GetLink, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.RemoveLink = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveLink, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.SubstituteLink = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_SubstituteLink, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.NbLinks = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_NbLinks, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.AddElement = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_AddElement, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.GetElement = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_GetElement, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.RemoveElement = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_RemoveElement, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.SubstituteElement = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_SubstituteElement, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.NbElements = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_NbElements, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ClearDomain = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ClearDomain, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.IndexOf = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_IndexOf, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.LinkNeighboursOf = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_LinkNeighboursOf, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ElemConnectedTo = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ElemConnectedTo, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ElemOfDomain = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ElemOfDomain, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.LinkOfDomain = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_LinkOfDomain, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.ClearDeleted = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_ClearDeleted, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.StatisticsToString = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_StatisticsToString, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.Allocator = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_Allocator, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.Data = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_Data, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun__kill_pointed, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DataStructureOfDelaun_GetHandle, None, BRepMesh_DataStructureOfDelaun)
BRepMesh_DataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_DataStructureOfDelaun_swigregister
BRepMesh_DataStructureOfDelaun_swigregister(BRepMesh_DataStructureOfDelaun)

class Handle_BRepMesh_DataStructureOfDelaun(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DataStructureOfDelaun(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DataStructureOfDelaun.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_Nullify, None, Handle_BRepMesh_DataStructureOfDelaun)
Handle_BRepMesh_DataStructureOfDelaun.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_IsNull, None, Handle_BRepMesh_DataStructureOfDelaun)
Handle_BRepMesh_DataStructureOfDelaun.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_GetObject, None, Handle_BRepMesh_DataStructureOfDelaun)
Handle_BRepMesh_DataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DataStructureOfDelaun__kill_pointed, None, Handle_BRepMesh_DataStructureOfDelaun)
Handle_BRepMesh_DataStructureOfDelaun_swigregister = _BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_swigregister
Handle_BRepMesh_DataStructureOfDelaun_swigregister(Handle_BRepMesh_DataStructureOfDelaun)

def Handle_BRepMesh_DataStructureOfDelaun_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_DownCast(AnObject)
Handle_BRepMesh_DataStructureOfDelaun_DownCast = _BRepMesh.Handle_BRepMesh_DataStructureOfDelaun_DownCast

class BRepMesh_Delaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the triangulation with an empty Mesh data structure.

        :param theVertices:
        :type theVertices: BRepMesh_Array1OfVertexOfDelaun &
        :param isPositive: default value is Standard_True
        :type isPositive: bool
        :rtype: None

        * Creates the triangulation with and existent Mesh data structure.

        :param theOldMesh:
        :type theOldMesh: Handle_BRepMesh_DataStructureOfDelaun &
        :param theVertices:
        :type theVertices: BRepMesh_Array1OfVertexOfDelaun &
        :param isPositive: default value is Standard_True
        :type isPositive: bool
        :rtype: None

        * Creates the triangulation with and existant Mesh data structure.

        :param theOldMesh:
        :type theOldMesh: Handle_BRepMesh_DataStructureOfDelaun &
        :param theVertexIndices:
        :type theVertexIndices: TColStd_Array1OfInteger &
        :param isPositive: default value is Standard_True
        :type isPositive: bool
        :rtype: None

        """
        _BRepMesh.BRepMesh_Delaun_swiginit(self, _BRepMesh.new_BRepMesh_Delaun(*args))

    def Init(self, *args):
        """
        * Initializes the triangulation with an array of vertices.

        :param theVertices:
        :type theVertices: BRepMesh_Array1OfVertexOfDelaun &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Delaun_Init(self, *args)


    def RemoveVertex(self, *args):
        """
        * Removes a vertex from the triangulation.

        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Delaun_RemoveVertex(self, *args)


    def AddVertices(self, *args):
        """
        * Adds some vertices into the triangulation.

        :param theVertices:
        :type theVertices: BRepMesh_Array1OfVertexOfDelaun &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Delaun_AddVertices(self, *args)


    def UseEdge(self, *args):
        """
        * Modify mesh to use the edge. Return True if done.

        :param theEdge:
        :type theEdge: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Delaun_UseEdge(self, *args)


    def Result(self, *args):
        """
        * Gives the Mesh data structure.

        :rtype: Handle_BRepMesh_DataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_Delaun_Result(self, *args)


    def GetVertex(self, *args):
        """
        * Gives vertex with the given index

        :param theIndex:
        :type theIndex: int
        :rtype: inline  BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_Delaun_GetVertex(self, *args)


    def GetEdge(self, *args):
        """
        * Gives edge with the given index

        :param theIndex:
        :type theIndex: int
        :rtype: inline  BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_Delaun_GetEdge(self, *args)


    def GetTriangle(self, *args):
        """
        * Gives triangle with the given index

        :param theIndex:
        :type theIndex: int
        :rtype: inline  BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_Delaun_GetTriangle(self, *args)


    def Contains(self, *args):
        """
        * Test is the given triangle contains the given vertex. If <theEdgeOn> != 0 the vertex lies onto the edge index returned through this parameter.

        :param theTriangleId:
        :type theTriangleId: int
        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :param theEdgeOn:
        :type theEdgeOn: int &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Delaun_Contains(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Delaun.Init = new_instancemethod(_BRepMesh.BRepMesh_Delaun_Init, None, BRepMesh_Delaun)
BRepMesh_Delaun.RemoveVertex = new_instancemethod(_BRepMesh.BRepMesh_Delaun_RemoveVertex, None, BRepMesh_Delaun)
BRepMesh_Delaun.AddVertices = new_instancemethod(_BRepMesh.BRepMesh_Delaun_AddVertices, None, BRepMesh_Delaun)
BRepMesh_Delaun.UseEdge = new_instancemethod(_BRepMesh.BRepMesh_Delaun_UseEdge, None, BRepMesh_Delaun)
BRepMesh_Delaun.Result = new_instancemethod(_BRepMesh.BRepMesh_Delaun_Result, None, BRepMesh_Delaun)
BRepMesh_Delaun.GetVertex = new_instancemethod(_BRepMesh.BRepMesh_Delaun_GetVertex, None, BRepMesh_Delaun)
BRepMesh_Delaun.GetEdge = new_instancemethod(_BRepMesh.BRepMesh_Delaun_GetEdge, None, BRepMesh_Delaun)
BRepMesh_Delaun.GetTriangle = new_instancemethod(_BRepMesh.BRepMesh_Delaun_GetTriangle, None, BRepMesh_Delaun)
BRepMesh_Delaun.Contains = new_instancemethod(_BRepMesh.BRepMesh_Delaun_Contains, None, BRepMesh_Delaun)
BRepMesh_Delaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Delaun__kill_pointed, None, BRepMesh_Delaun)
BRepMesh_Delaun_swigregister = _BRepMesh.BRepMesh_Delaun_swigregister
BRepMesh_Delaun_swigregister(BRepMesh_Delaun)

class BRepMesh_DiscretRoot(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetDeflection(self, *args):
        """
        * Setup linear deflection.

        :param theDeflection:
        :type theDeflection: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DiscretRoot_SetDeflection(self, *args)


    def Deflection(self, *args):
        """
        * Returns linear deflection.

        :rtype: float

        """
        return _BRepMesh.BRepMesh_DiscretRoot_Deflection(self, *args)


    def SetAngle(self, *args):
        """
        * Setup angular deflection.

        :param theAngle:
        :type theAngle: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DiscretRoot_SetAngle(self, *args)


    def Angle(self, *args):
        """
        * Returns angular deflection.

        :rtype: float

        """
        return _BRepMesh.BRepMesh_DiscretRoot_Angle(self, *args)


    def SetShape(self, *args):
        """
        * Set the shape to triangulate.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_DiscretRoot_SetShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMesh.BRepMesh_DiscretRoot_Shape(self, *args)


    def Perform(self, *args):
        """
        * Compute triangulation for set shape.

        :rtype: void

        """
        return _BRepMesh.BRepMesh_DiscretRoot_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns true if triangualtion was performed and has success.

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_DiscretRoot_IsDone(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_DiscretRoot self)"""
        return _BRepMesh.BRepMesh_DiscretRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_DiscretRoot self) -> Handle_BRepMesh_DiscretRoot"""
        return _BRepMesh.BRepMesh_DiscretRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_DiscretRoot.SetDeflection = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_SetDeflection, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.Deflection = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_Deflection, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.SetAngle = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_SetAngle, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.Angle = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_Angle, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.SetShape = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_SetShape, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.Shape = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_Shape, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.Perform = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_Perform, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.IsDone = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_IsDone, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot__kill_pointed, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_DiscretRoot_GetHandle, None, BRepMesh_DiscretRoot)
BRepMesh_DiscretRoot_swigregister = _BRepMesh.BRepMesh_DiscretRoot_swigregister
BRepMesh_DiscretRoot_swigregister(BRepMesh_DiscretRoot)

class Handle_BRepMesh_DiscretRoot(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_DiscretRoot_swiginit(self, _BRepMesh.new_Handle_BRepMesh_DiscretRoot(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_DiscretRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_DiscretRoot.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_DiscretRoot_Nullify, None, Handle_BRepMesh_DiscretRoot)
Handle_BRepMesh_DiscretRoot.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_DiscretRoot_IsNull, None, Handle_BRepMesh_DiscretRoot)
Handle_BRepMesh_DiscretRoot.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_DiscretRoot_GetObject, None, Handle_BRepMesh_DiscretRoot)
Handle_BRepMesh_DiscretRoot._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_DiscretRoot__kill_pointed, None, Handle_BRepMesh_DiscretRoot)
Handle_BRepMesh_DiscretRoot_swigregister = _BRepMesh.Handle_BRepMesh_DiscretRoot_swigregister
Handle_BRepMesh_DiscretRoot_swigregister(Handle_BRepMesh_DiscretRoot)

def Handle_BRepMesh_DiscretRoot_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_DiscretRoot_DownCast(AnObject)
Handle_BRepMesh_DiscretRoot_DownCast = _BRepMesh.Handle_BRepMesh_DiscretRoot_DownCast

class BRepMesh_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Contructs a link beetween to vertices.

        :param vDebut:
        :type vDebut: int
        :param vFin:
        :type vFin: int
        :param canMove:
        :type canMove: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        _BRepMesh.BRepMesh_Edge_swiginit(self, _BRepMesh.new_BRepMesh_Edge(*args))

    def FirstNode(self, *args):
        """
        * Give the index of first node of the Link.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_Edge_FirstNode(self, *args)


    def LastNode(self, *args):
        """
        * Give the index of Last node of the Link.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_Edge_LastNode(self, *args)


    def Movability(self, *args):
        """
        :rtype: BRepMesh_DegreeOfFreedom

        """
        return _BRepMesh.BRepMesh_Edge_Movability(self, *args)


    def SetMovability(self, *args):
        """
        :param Move:
        :type Move: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Edge_SetMovability(self, *args)


    def HashCode(self, *args):
        """
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Edge_HashCode(self, *args)


    def SameOrientation(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Edge_SameOrientation(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Edge_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Edge.FirstNode = new_instancemethod(_BRepMesh.BRepMesh_Edge_FirstNode, None, BRepMesh_Edge)
BRepMesh_Edge.LastNode = new_instancemethod(_BRepMesh.BRepMesh_Edge_LastNode, None, BRepMesh_Edge)
BRepMesh_Edge.Movability = new_instancemethod(_BRepMesh.BRepMesh_Edge_Movability, None, BRepMesh_Edge)
BRepMesh_Edge.SetMovability = new_instancemethod(_BRepMesh.BRepMesh_Edge_SetMovability, None, BRepMesh_Edge)
BRepMesh_Edge.HashCode = new_instancemethod(_BRepMesh.BRepMesh_Edge_HashCode, None, BRepMesh_Edge)
BRepMesh_Edge.__hash__ = new_instancemethod(_BRepMesh.BRepMesh_Edge___hash__, None, BRepMesh_Edge)
BRepMesh_Edge.SameOrientation = new_instancemethod(_BRepMesh.BRepMesh_Edge_SameOrientation, None, BRepMesh_Edge)
BRepMesh_Edge.IsEqual = new_instancemethod(_BRepMesh.BRepMesh_Edge_IsEqual, None, BRepMesh_Edge)
BRepMesh_Edge.__eq_wrapper__ = new_instancemethod(_BRepMesh.BRepMesh_Edge___eq_wrapper__, None, BRepMesh_Edge)
BRepMesh_Edge._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Edge__kill_pointed, None, BRepMesh_Edge)
BRepMesh_Edge_swigregister = _BRepMesh.BRepMesh_Edge_swigregister
BRepMesh_Edge_swigregister(BRepMesh_Edge)

class BRepMesh_ElemHasherOfDataStructureOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: BRepMesh_Triangle &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: BRepMesh_Triangle &
        :param K2:
        :type K2: BRepMesh_Triangle &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_ElemHasherOfDataStructureOfDelaun())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ElemHasherOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_ElemHasherOfDataStructureOfDelaun)
BRepMesh_ElemHasherOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_swigregister
BRepMesh_ElemHasherOfDataStructureOfDelaun_swigregister(BRepMesh_ElemHasherOfDataStructureOfDelaun)

def BRepMesh_ElemHasherOfDataStructureOfDelaun_HashCode(*args):
    """
    :param K:
    :type K: BRepMesh_Triangle &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_HashCode(*args)

def BRepMesh_ElemHasherOfDataStructureOfDelaun_IsEqual(*args):
    """
    :param K1:
    :type K1: BRepMesh_Triangle &
    :param K2:
    :type K2: BRepMesh_Triangle &
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_ElemHasherOfDataStructureOfDelaun_IsEqual(*args)

class BRepMesh_FaceAttribute(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMesh.BRepMesh_FaceAttribute_swiginit(self, _BRepMesh.new_BRepMesh_FaceAttribute(*args))

    def GetGetDefFace(self):
        """GetGetDefFace(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetDefFace(self)


    def SetGetDefFace(self, value):
        """SetGetDefFace(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetDefFace(self, value)


    def GetGetUMin(self):
        """GetGetUMin(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetUMin(self)


    def SetGetUMin(self, value):
        """SetGetUMin(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetUMin(self, value)


    def GetGetVMin(self):
        """GetGetVMin(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetVMin(self)


    def SetGetVMin(self, value):
        """SetGetVMin(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetVMin(self, value)


    def GetGetUMax(self):
        """GetGetUMax(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetUMax(self)


    def SetGetUMax(self, value):
        """SetGetUMax(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetUMax(self, value)


    def GetGetVMax(self):
        """GetGetVMax(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetVMax(self)


    def SetGetVMax(self, value):
        """SetGetVMax(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetVMax(self, value)


    def GetGetDeltaX(self):
        """GetGetDeltaX(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetDeltaX(self)


    def SetGetDeltaX(self, value):
        """SetGetDeltaX(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetDeltaX(self, value)


    def GetGetDeltaY(self):
        """GetGetDeltaY(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetDeltaY(self)


    def SetGetDeltaY(self, value):
        """SetGetDeltaY(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetDeltaY(self, value)


    def GetGetMinX(self):
        """GetGetMinX(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetMinX(self)


    def SetGetMinX(self, value):
        """SetGetMinX(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetMinX(self, value)


    def GetGetMinY(self):
        """GetGetMinY(BRepMesh_FaceAttribute self) -> Standard_Real"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetGetMinY(self)


    def SetGetMinY(self, value):
        """SetGetMinY(BRepMesh_FaceAttribute self, Standard_Real value)"""
        return _BRepMesh.BRepMesh_FaceAttribute_SetGetMinY(self, value)


    def GetClassifier(self, *args):
        """
        :rtype: BRepMesh_ClassifierPtr

        """
        return _BRepMesh.BRepMesh_FaceAttribute_GetClassifier(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_FaceAttribute self)"""
        return _BRepMesh.BRepMesh_FaceAttribute__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_FaceAttribute self) -> Handle_BRepMesh_FaceAttribute"""
        return _BRepMesh.BRepMesh_FaceAttribute_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_FaceAttribute.GetGetDefFace = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetDefFace, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetDefFace = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetDefFace, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetUMin = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetUMin, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetUMin = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetUMin, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetVMin = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetVMin, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetVMin = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetVMin, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetUMax = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetUMax, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetUMax = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetUMax, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetVMax = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetVMax, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetVMax = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetVMax, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetDeltaX = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetDeltaX, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetDeltaX = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetDeltaX, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetDeltaY = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetDeltaY, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetDeltaY = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetDeltaY, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetMinX = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetMinX, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetMinX = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetMinX, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetGetMinY = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetGetMinY, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.SetGetMinY = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_SetGetMinY, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetClassifier = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetClassifier, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute__kill_pointed, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_FaceAttribute_GetHandle, None, BRepMesh_FaceAttribute)
BRepMesh_FaceAttribute_swigregister = _BRepMesh.BRepMesh_FaceAttribute_swigregister
BRepMesh_FaceAttribute_swigregister(BRepMesh_FaceAttribute)

class Handle_BRepMesh_FaceAttribute(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_FaceAttribute_swiginit(self, _BRepMesh.new_Handle_BRepMesh_FaceAttribute(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_FaceAttribute_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_FaceAttribute.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_FaceAttribute_Nullify, None, Handle_BRepMesh_FaceAttribute)
Handle_BRepMesh_FaceAttribute.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_FaceAttribute_IsNull, None, Handle_BRepMesh_FaceAttribute)
Handle_BRepMesh_FaceAttribute.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_FaceAttribute_GetObject, None, Handle_BRepMesh_FaceAttribute)
Handle_BRepMesh_FaceAttribute._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_FaceAttribute__kill_pointed, None, Handle_BRepMesh_FaceAttribute)
Handle_BRepMesh_FaceAttribute_swigregister = _BRepMesh.Handle_BRepMesh_FaceAttribute_swigregister
Handle_BRepMesh_FaceAttribute_swigregister(Handle_BRepMesh_FaceAttribute)

def Handle_BRepMesh_FaceAttribute_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_FaceAttribute_DownCast(AnObject)
Handle_BRepMesh_FaceAttribute_DownCast = _BRepMesh.Handle_BRepMesh_FaceAttribute_DownCast

class BRepMesh_FastDiscret(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param defle:
        :type defle: float
        :param angle:
        :type angle: float
        :param B:
        :type B: Bnd_Box &
        :param withShare: default value is Standard_True
        :type withShare: bool
        :param inshape: default value is Standard_False
        :type inshape: bool
        :param relative: default value is Standard_False
        :type relative: bool
        :param shapetrigu: default value is Standard_False
        :type shapetrigu: bool
        :rtype: None

        * if the boolean <relative> is True, the deflection used for the polygonalisation of each edge will be <defle> * Size of Edge. the deflection used for the faces will be the maximum deflection of their edges.  if <shapetrigu> is True, the triangulation, if exists with a correct deflection, can be used to re-triangulate the shape.  if <inshape> is True, the calculated triangulation will be stored in the shape.

        :param defle:
        :type defle: float
        :param shape:
        :type shape: TopoDS_Shape &
        :param B:
        :type B: Bnd_Box &
        :param angle:
        :type angle: float
        :param withShare: default value is Standard_True
        :type withShare: bool
        :param inshape: default value is Standard_False
        :type inshape: bool
        :param relative: default value is Standard_False
        :type relative: bool
        :param shapetrigu: default value is Standard_False
        :type shapetrigu: bool
        :rtype: None

        """
        _BRepMesh.BRepMesh_FastDiscret_swiginit(self, _BRepMesh.new_BRepMesh_FastDiscret(*args))

    def Perform(self, *args):
        """
        * Build triangulation on the whole shape

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_Perform(self, *args)


    def Add(self, *args):
        """
        * Record a face for further processing.

        :param face:
        :type face: TopoDS_Face &
        :param ancestor:
        :type ancestor: TopTools_IndexedDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_Add(self, *args)


    def Process(self, *args):
        """
        * Triangulate a face previously recorded for processing by call to Add(). Can be executed in parallel threads.

        :param face:
        :type face: TopoDS_Face &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_Process(self, *args)


    def CurrentFaceStatus(self, *args):
        """
        :rtype: BRepMesh_Status

        """
        return _BRepMesh.BRepMesh_FastDiscret_CurrentFaceStatus(self, *args)


    def RelativeEdgeDeflection(*args):
        """
        * Returns computed relative deflection for edge

        :param edge:
        :type edge: TopoDS_Edge &
        :param defle:
        :type defle: float
        :param dtotale:
        :type dtotale: float
        :param cdef:
        :type cdef: float &
        :rtype: float

        """
        return _BRepMesh.BRepMesh_FastDiscret_RelativeEdgeDeflection(*args)

    RelativeEdgeDeflection = staticmethod(RelativeEdgeDeflection)

    def BoxMaxDimension(*args):
        """
        * Returns the maximal dimension of Bnd_Box

        :param box:
        :type box: Bnd_Box &
        :param maxdim:
        :type maxdim: float &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_FastDiscret_BoxMaxDimension(*args)

    BoxMaxDimension = staticmethod(BoxMaxDimension)

    def SetParallel(self, *args):
        """
        * Request algorithm to launch in multiple threads to improve performance (should be supported by plugin).

        :param theInParallel:
        :type theInParallel: bool
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_SetParallel(self, *args)


    def IsParallel(self, *args):
        """
        * Returns the multi-threading usage flag.

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_FastDiscret_IsParallel(self, *args)


    def CreateMutexesForSubShapes(self, *args):
        """
        * Creates mutexes for each sub-shape of type theType in theShape. Used to avoid data races.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param theType:
        :type theType: TopAbs_ShapeEnum
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_CreateMutexesForSubShapes(self, *args)


    def RemoveAllMutexes(self, *args):
        """
        * Removes all created mutexes

        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_RemoveAllMutexes(self, *args)


    def NbTriangles(self, *args):
        """
        * Gives the number of built triangles.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_FastDiscret_NbTriangles(self, *args)


    def Triangle(self, *args):
        """
        * Gives the triangle of <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_FastDiscret_Triangle(self, *args)


    def NbEdges(self, *args):
        """
        * Gives the number of built Edges

        :rtype: int

        """
        return _BRepMesh.BRepMesh_FastDiscret_NbEdges(self, *args)


    def Edge(self, *args):
        """
        * Gives the edge of index <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_FastDiscret_Edge(self, *args)


    def NbVertices(self, *args):
        """
        * Gives the number of built Vertices.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_FastDiscret_NbVertices(self, *args)


    def Vertex(self, *args):
        """
        * Gives the vertex of <Index>.

        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_FastDiscret_Vertex(self, *args)


    def Pnt(self, *args):
        """
        * Gives the location3d of the vertex of <Index>.

        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_FastDiscret_Pnt(self, *args)


    def VerticesOfDomain(self, *args):
        """
        * Gives the list of indices of the vertices

        :param Indices:
        :type Indices: BRepMesh_MapOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_VerticesOfDomain(self, *args)


    def EdgesOfDomain(self, *args):
        """
        * Gives the list of indices of the edges

        :param Indices:
        :type Indices: BRepMesh_MapOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_EdgesOfDomain(self, *args)


    def TrianglesOfDomain(self, *args):
        """
        * Gives the list of indices of the triangles

        :param Indices:
        :type Indices: BRepMesh_MapOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_TrianglesOfDomain(self, *args)


    def NbPoint3d(self, *args):
        """
        * Gives the number of different location in 3d space. It is different of the number of vertices if there is more than one surface. Even for one surface, the number can be different if an edge is shared.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_FastDiscret_NbPoint3d(self, *args)


    def Point3d(self, *args):
        """
        * Gives the 3d space location of the vertex <Index>.

        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_FastDiscret_Point3d(self, *args)


    def GetDeflection(self, *args):
        """
        * returns the deflection value.

        :rtype: float

        """
        return _BRepMesh.BRepMesh_FastDiscret_GetDeflection(self, *args)


    def GetAngle(self, *args):
        """
        * returns the deflection value.

        :rtype: float

        """
        return _BRepMesh.BRepMesh_FastDiscret_GetAngle(self, *args)


    def WithShare(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_FastDiscret_WithShare(self, *args)


    def InShape(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_FastDiscret_InShape(self, *args)


    def ShapeTrigu(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_FastDiscret_ShapeTrigu(self, *args)


    def GetFaceAttribute(self, *args):
        """
        * returns the face deflection value.

        :param face:
        :type face: TopoDS_Face &
        :param fattrib:
        :type fattrib: Handle_BRepMesh_FaceAttribute &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_FastDiscret_GetFaceAttribute(self, *args)


    def RemoveFaceAttribute(self, *args):
        """
        * remove face attribute as useless to free locate memory

        :param face:
        :type face: TopoDS_Face &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscret_RemoveFaceAttribute(self, *args)


    def GetMapOfDefEdge(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeReal

        """
        return _BRepMesh.BRepMesh_FastDiscret_GetMapOfDefEdge(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_FastDiscret self)"""
        return _BRepMesh.BRepMesh_FastDiscret__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_FastDiscret self) -> Handle_BRepMesh_FastDiscret"""
        return _BRepMesh.BRepMesh_FastDiscret_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_FastDiscret.Perform = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Perform, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Add = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Add, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Process = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Process, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.CurrentFaceStatus = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_CurrentFaceStatus, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.SetParallel = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_SetParallel, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.IsParallel = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_IsParallel, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.CreateMutexesForSubShapes = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_CreateMutexesForSubShapes, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.RemoveAllMutexes = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_RemoveAllMutexes, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.NbTriangles = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_NbTriangles, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Triangle = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Triangle, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.NbEdges = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_NbEdges, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Edge = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Edge, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.NbVertices = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_NbVertices, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Vertex = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Vertex, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Pnt = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Pnt, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.VerticesOfDomain = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_VerticesOfDomain, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.EdgesOfDomain = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_EdgesOfDomain, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.TrianglesOfDomain = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_TrianglesOfDomain, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.NbPoint3d = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_NbPoint3d, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.Point3d = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_Point3d, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.GetDeflection = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_GetDeflection, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.GetAngle = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_GetAngle, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.WithShare = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_WithShare, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.InShape = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_InShape, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.ShapeTrigu = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_ShapeTrigu, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.GetFaceAttribute = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_GetFaceAttribute, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.RemoveFaceAttribute = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_RemoveFaceAttribute, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.GetMapOfDefEdge = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_GetMapOfDefEdge, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret__kill_pointed, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_FastDiscret_GetHandle, None, BRepMesh_FastDiscret)
BRepMesh_FastDiscret_swigregister = _BRepMesh.BRepMesh_FastDiscret_swigregister
BRepMesh_FastDiscret_swigregister(BRepMesh_FastDiscret)

def BRepMesh_FastDiscret_RelativeEdgeDeflection(*args):
    """
    * Returns computed relative deflection for edge

    :param edge:
    :type edge: TopoDS_Edge &
    :param defle:
    :type defle: float
    :param dtotale:
    :type dtotale: float
    :param cdef:
    :type cdef: float &
    :rtype: float

    """
    return _BRepMesh.BRepMesh_FastDiscret_RelativeEdgeDeflection(*args)

def BRepMesh_FastDiscret_BoxMaxDimension(*args):
    """
    * Returns the maximal dimension of Bnd_Box

    :param box:
    :type box: Bnd_Box &
    :param maxdim:
    :type maxdim: float &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_FastDiscret_BoxMaxDimension(*args)

class Handle_BRepMesh_FastDiscret(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_FastDiscret_swiginit(self, _BRepMesh.new_Handle_BRepMesh_FastDiscret(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_FastDiscret_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_FastDiscret.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscret_Nullify, None, Handle_BRepMesh_FastDiscret)
Handle_BRepMesh_FastDiscret.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscret_IsNull, None, Handle_BRepMesh_FastDiscret)
Handle_BRepMesh_FastDiscret.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscret_GetObject, None, Handle_BRepMesh_FastDiscret)
Handle_BRepMesh_FastDiscret._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscret__kill_pointed, None, Handle_BRepMesh_FastDiscret)
Handle_BRepMesh_FastDiscret_swigregister = _BRepMesh.Handle_BRepMesh_FastDiscret_swigregister
Handle_BRepMesh_FastDiscret_swigregister(Handle_BRepMesh_FastDiscret)

def Handle_BRepMesh_FastDiscret_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_FastDiscret_DownCast(AnObject)
Handle_BRepMesh_FastDiscret_DownCast = _BRepMesh.Handle_BRepMesh_FastDiscret_DownCast

class BRepMesh_FastDiscretFace(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theAngle:
        :type theAngle: float
        :param theWithShare: default value is Standard_True
        :type theWithShare: bool
        :rtype: None

        """
        _BRepMesh.BRepMesh_FastDiscretFace_swiginit(self, _BRepMesh.new_BRepMesh_FastDiscretFace(*args))

    def Add(self, *args):
        """
        :param theFace:
        :type theFace: TopoDS_Face &
        :param theAttrib:
        :type theAttrib: Handle_BRepMesh_FaceAttribute &
        :param theMapDefle:
        :type theMapDefle: TopTools_DataMapOfShapeReal &
        :param theMutexProvider:
        :type theMutexProvider: TopTools_MutexForShapeProvider &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Add(self, *args)


    def Control(self, *args):
        """
        :param theCaro:
        :type theCaro: Handle_BRepAdaptor_HSurface &
        :param theDefFace:
        :type theDefFace: float
        :param theInternalV:
        :type theInternalV: BRepMesh_ListOfVertex &
        :param theBadTriangles:
        :type theBadTriangles: TColStd_ListOfInteger &
        :param theNulTriangles:
        :type theNulTriangles: TColStd_ListOfInteger &
        :param theTrigu:
        :type theTrigu: BRepMesh_Delaun &
        :param theIsFirst:
        :type theIsFirst: bool
        :rtype: float

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Control(self, *args)


    def FindUV(*args):
        """
        :param theV:
        :type theV: TopoDS_Vertex &
        :param theXY:
        :type theXY: gp_Pnt2d
        :param theIp:
        :type theIp: int
        :param theSFace:
        :type theSFace: Handle_BRepAdaptor_HSurface &
        :param theMinDist:
        :type theMinDist: float
        :param theFaceAttribute:
        :type theFaceAttribute: Handle_BRepMesh_FaceAttribute &
        :param theLocation2dMap:
        :type theLocation2dMap: BRepMesh_DataMapOfIntegerListOfXY &
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_FindUV(*args)

    FindUV = staticmethod(FindUV)

    def Triangle(self, *args):
        """
        * Gives the triangle of <Index>.

        :param theIndex:
        :type theIndex: int
        :rtype: BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Triangle(self, *args)


    def Edge(self, *args):
        """
        * Gives the edge of index <Index>.

        :param theIndex:
        :type theIndex: int
        :rtype: BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Edge(self, *args)


    def Vertex(self, *args):
        """
        * Gives the vertex of <Index>.

        :param theIndex:
        :type theIndex: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Vertex(self, *args)


    def Pnt(self, *args):
        """
        * Gives the location3d of the vertex of <Index>.

        :param theIndex:
        :type theIndex: int
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_FastDiscretFace_Pnt(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_FastDiscretFace self)"""
        return _BRepMesh.BRepMesh_FastDiscretFace__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_FastDiscretFace self) -> Handle_BRepMesh_FastDiscretFace"""
        return _BRepMesh.BRepMesh_FastDiscretFace_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_FastDiscretFace.Add = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Add, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.Control = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Control, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.Triangle = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Triangle, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.Edge = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Edge, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.Vertex = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Vertex, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.Pnt = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_Pnt, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace__kill_pointed, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_FastDiscretFace_GetHandle, None, BRepMesh_FastDiscretFace)
BRepMesh_FastDiscretFace_swigregister = _BRepMesh.BRepMesh_FastDiscretFace_swigregister
BRepMesh_FastDiscretFace_swigregister(BRepMesh_FastDiscretFace)

def BRepMesh_FastDiscretFace_FindUV(*args):
    """
    :param theV:
    :type theV: TopoDS_Vertex &
    :param theXY:
    :type theXY: gp_Pnt2d
    :param theIp:
    :type theIp: int
    :param theSFace:
    :type theSFace: Handle_BRepAdaptor_HSurface &
    :param theMinDist:
    :type theMinDist: float
    :param theFaceAttribute:
    :type theFaceAttribute: Handle_BRepMesh_FaceAttribute &
    :param theLocation2dMap:
    :type theLocation2dMap: BRepMesh_DataMapOfIntegerListOfXY &
    :rtype: gp_XY

    """
    return _BRepMesh.BRepMesh_FastDiscretFace_FindUV(*args)

class Handle_BRepMesh_FastDiscretFace(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_FastDiscretFace_swiginit(self, _BRepMesh.new_Handle_BRepMesh_FastDiscretFace(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_FastDiscretFace_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_FastDiscretFace.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscretFace_Nullify, None, Handle_BRepMesh_FastDiscretFace)
Handle_BRepMesh_FastDiscretFace.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscretFace_IsNull, None, Handle_BRepMesh_FastDiscretFace)
Handle_BRepMesh_FastDiscretFace.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscretFace_GetObject, None, Handle_BRepMesh_FastDiscretFace)
Handle_BRepMesh_FastDiscretFace._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_FastDiscretFace__kill_pointed, None, Handle_BRepMesh_FastDiscretFace)
Handle_BRepMesh_FastDiscretFace_swigregister = _BRepMesh.Handle_BRepMesh_FastDiscretFace_swigregister
Handle_BRepMesh_FastDiscretFace_swigregister(Handle_BRepMesh_FastDiscretFace)

def Handle_BRepMesh_FastDiscretFace_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_FastDiscretFace_DownCast(AnObject)
Handle_BRepMesh_FastDiscretFace_DownCast = _BRepMesh.Handle_BRepMesh_FastDiscretFace_DownCast

class BRepMesh_GeomTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: BRepAdaptor_Curve &
        :param Ufirst:
        :type Ufirst: float
        :param Ulast:
        :type Ulast: float
        :param AngDefl:
        :type AngDefl: float
        :param Deflection:
        :type Deflection: float
        :param nbpointsmin: default value is 2
        :type nbpointsmin: int
        :rtype: None

        :param S:
        :type S: Handle_BRepAdaptor_HSurface &
        :param ParamIso:
        :type ParamIso: float
        :param Type:
        :type Type: GeomAbs_IsoType
        :param Ufirst:
        :type Ufirst: float
        :param Ulast:
        :type Ulast: float
        :param AngDefl:
        :type AngDefl: float
        :param Deflection:
        :type Deflection: float
        :param nbpointsmin: default value is 2
        :type nbpointsmin: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_GeomTool_swiginit(self, _BRepMesh.new_BRepMesh_GeomTool(*args))

    def AddPoint(self, *args):
        """
        * Add point to already calculated points (or replace existing) Returns index of new added point or founded with parametric tolerance (replaced if theIsReplace is true)

        :param thePnt:
        :type thePnt: gp_Pnt
        :param theParam:
        :type theParam: float
        :param theIsReplace: default value is Standard_True
        :type theIsReplace: bool
        :rtype: int

        """
        return _BRepMesh.BRepMesh_GeomTool_AddPoint(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_GeomTool_NbPoints(self, *args)


    def Value(self, *args):
        """
        :param IsoParam:
        :type IsoParam: float
        :param Index:
        :type Index: int
        :param W:
        :type W: float &
        :param P:
        :type P: gp_Pnt
        :param UV:
        :type UV: gp_Pnt2d
        :rtype: None

        :param C:
        :type C: BRepAdaptor_Curve &
        :param S:
        :type S: Handle_BRepAdaptor_HSurface &
        :param Index:
        :type Index: int
        :param W:
        :type W: float &
        :param P:
        :type P: gp_Pnt
        :param UV:
        :type UV: gp_Pnt2d
        :rtype: None

        """
        return _BRepMesh.BRepMesh_GeomTool_Value(self, *args)


    def D0(*args):
        """
        :param F:
        :type F: Handle_BRepAdaptor_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _BRepMesh.BRepMesh_GeomTool_D0(*args)

    D0 = staticmethod(D0)

    def Normal(*args):
        """
        * return false if the normal can not be computed

        :param F:
        :type F: Handle_BRepAdaptor_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param Nor:
        :type Nor: gp_Dir
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_GeomTool_Normal(*args)

    Normal = staticmethod(Normal)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_GeomTool.AddPoint = new_instancemethod(_BRepMesh.BRepMesh_GeomTool_AddPoint, None, BRepMesh_GeomTool)
BRepMesh_GeomTool.NbPoints = new_instancemethod(_BRepMesh.BRepMesh_GeomTool_NbPoints, None, BRepMesh_GeomTool)
BRepMesh_GeomTool.Value = new_instancemethod(_BRepMesh.BRepMesh_GeomTool_Value, None, BRepMesh_GeomTool)
BRepMesh_GeomTool._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_GeomTool__kill_pointed, None, BRepMesh_GeomTool)
BRepMesh_GeomTool_swigregister = _BRepMesh.BRepMesh_GeomTool_swigregister
BRepMesh_GeomTool_swigregister(BRepMesh_GeomTool)

def BRepMesh_GeomTool_D0(*args):
    """
    :param F:
    :type F: Handle_BRepAdaptor_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _BRepMesh.BRepMesh_GeomTool_D0(*args)

def BRepMesh_GeomTool_Normal(*args):
    """
    * return false if the normal can not be computed

    :param F:
    :type F: Handle_BRepAdaptor_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param Nor:
    :type Nor: gp_Dir
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_GeomTool_Normal(*args)

class BRepMesh_HArray1OfVertexOfDelaun(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: BRepMesh_Vertex &
        :rtype: None

        """
        _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_HArray1OfVertexOfDelaun(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: BRepMesh_Array1OfVertexOfDelaun

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: BRepMesh_Array1OfVertexOfDelaun

        """
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_HArray1OfVertexOfDelaun self)"""
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_HArray1OfVertexOfDelaun self) -> Handle_BRepMesh_HArray1OfVertexOfDelaun"""
        return _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_HArray1OfVertexOfDelaun.Init = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Init, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.Length = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Length, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.Lower = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Lower, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.Upper = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Upper, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.SetValue = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_SetValue, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.Value = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Value, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.ChangeValue = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_ChangeValue, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.Array1 = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_Array1, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.ChangeArray1 = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_ChangeArray1, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun__kill_pointed, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_GetHandle, None, BRepMesh_HArray1OfVertexOfDelaun)
BRepMesh_HArray1OfVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_HArray1OfVertexOfDelaun_swigregister
BRepMesh_HArray1OfVertexOfDelaun_swigregister(BRepMesh_HArray1OfVertexOfDelaun)

class Handle_BRepMesh_HArray1OfVertexOfDelaun(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_swiginit(self, _BRepMesh.new_Handle_BRepMesh_HArray1OfVertexOfDelaun(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_HArray1OfVertexOfDelaun.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_Nullify, None, Handle_BRepMesh_HArray1OfVertexOfDelaun)
Handle_BRepMesh_HArray1OfVertexOfDelaun.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_IsNull, None, Handle_BRepMesh_HArray1OfVertexOfDelaun)
Handle_BRepMesh_HArray1OfVertexOfDelaun.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_GetObject, None, Handle_BRepMesh_HArray1OfVertexOfDelaun)
Handle_BRepMesh_HArray1OfVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun__kill_pointed, None, Handle_BRepMesh_HArray1OfVertexOfDelaun)
Handle_BRepMesh_HArray1OfVertexOfDelaun_swigregister = _BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_swigregister
Handle_BRepMesh_HArray1OfVertexOfDelaun_swigregister(Handle_BRepMesh_HArray1OfVertexOfDelaun)

def Handle_BRepMesh_HArray1OfVertexOfDelaun_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_DownCast(AnObject)
Handle_BRepMesh_HArray1OfVertexOfDelaun_DownCast = _BRepMesh.Handle_BRepMesh_HArray1OfVertexOfDelaun_DownCast

class BRepMesh_HeapSortIndexedVertexOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Sort(*args):
        """
        :param TheArray:
        :type TheArray: TColStd_Array1OfInteger &
        :param Comp:
        :type Comp: BRepMesh_ComparatorOfIndexedVertexOfDelaun &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_HeapSortIndexedVertexOfDelaun_Sort(*args)

    Sort = staticmethod(Sort)

    def __init__(self):
        _BRepMesh.BRepMesh_HeapSortIndexedVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_HeapSortIndexedVertexOfDelaun())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_HeapSortIndexedVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_HeapSortIndexedVertexOfDelaun__kill_pointed, None, BRepMesh_HeapSortIndexedVertexOfDelaun)
BRepMesh_HeapSortIndexedVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_HeapSortIndexedVertexOfDelaun_swigregister
BRepMesh_HeapSortIndexedVertexOfDelaun_swigregister(BRepMesh_HeapSortIndexedVertexOfDelaun)

def BRepMesh_HeapSortIndexedVertexOfDelaun_Sort(*args):
    """
    :param TheArray:
    :type TheArray: TColStd_Array1OfInteger &
    :param Comp:
    :type Comp: BRepMesh_ComparatorOfIndexedVertexOfDelaun &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_HeapSortIndexedVertexOfDelaun_Sort(*args)

class BRepMesh_HeapSortVertexOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Sort(*args):
        """
        :param TheArray:
        :type TheArray: BRepMesh_Array1OfVertexOfDelaun &
        :param Comp:
        :type Comp: BRepMesh_ComparatorOfVertexOfDelaun &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_HeapSortVertexOfDelaun_Sort(*args)

    Sort = staticmethod(Sort)

    def __init__(self):
        _BRepMesh.BRepMesh_HeapSortVertexOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_HeapSortVertexOfDelaun())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_HeapSortVertexOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_HeapSortVertexOfDelaun__kill_pointed, None, BRepMesh_HeapSortVertexOfDelaun)
BRepMesh_HeapSortVertexOfDelaun_swigregister = _BRepMesh.BRepMesh_HeapSortVertexOfDelaun_swigregister
BRepMesh_HeapSortVertexOfDelaun_swigregister(BRepMesh_HeapSortVertexOfDelaun)

def BRepMesh_HeapSortVertexOfDelaun_Sort(*args):
    """
    :param TheArray:
    :type TheArray: BRepMesh_Array1OfVertexOfDelaun &
    :param Comp:
    :type Comp: BRepMesh_ComparatorOfVertexOfDelaun &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_HeapSortVertexOfDelaun_Sort(*args)

class BRepMesh_IDMapOfLinkOfDataStructureOfDelaun(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IDMapOfLinkOfDataStructureOfDelaun(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IDMapOfLinkOfDataStructureOfDelaun &
        :rtype: BRepMesh_IDMapOfLinkOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IDMapOfLinkOfDataStructureOfDelaun &
        :rtype: BRepMesh_IDMapOfLinkOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :param I:
        :type I: BRepMesh_PairOfIndex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: BRepMesh_Edge &
        :param T:
        :type T: BRepMesh_PairOfIndex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindKey(self, *args)


    def FindFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromIndex(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindIndex(self, *args)


    def FindFromKey(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromKey(self, *args)


    def ChangeFromKey(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromKey1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IDMapOfLinkOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Assign = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Assign, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Set = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Set, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.ReSize = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ReSize, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Clear = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Clear, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Add = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Add, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Substitute = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Substitute, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.RemoveLast = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_RemoveLast, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.Contains = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_Contains, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.FindKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindKey, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.FindFromIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromIndex, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.ChangeFromIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromIndex, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.FindIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindIndex, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.FindFromKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromKey, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.ChangeFromKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromKey, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.FindFromKey1 = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_FindFromKey1, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.ChangeFromKey1 = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_ChangeFromKey1, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_swigregister
BRepMesh_IDMapOfLinkOfDataStructureOfDelaun_swigregister(BRepMesh_IDMapOfLinkOfDataStructureOfDelaun)

class BRepMesh_IDMapOfNodeOfDataStructureOfDelaun(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IDMapOfNodeOfDataStructureOfDelaun(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IDMapOfNodeOfDataStructureOfDelaun &
        :rtype: BRepMesh_IDMapOfNodeOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IDMapOfNodeOfDataStructureOfDelaun &
        :rtype: BRepMesh_IDMapOfNodeOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :param I:
        :type I: BRepMesh_ListOfInteger &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: BRepMesh_Vertex &
        :param T:
        :type T: BRepMesh_ListOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindKey(self, *args)


    def FindFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromIndex(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindIndex(self, *args)


    def FindFromKey(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromKey(self, *args)


    def ChangeFromKey(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: Standard_Address

        """
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromKey1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IDMapOfNodeOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Assign = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Assign, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Set = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Set, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.ReSize = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ReSize, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Clear = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Clear, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Add = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Add, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Substitute = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Substitute, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.RemoveLast = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_RemoveLast, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.Contains = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_Contains, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.FindKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindKey, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.FindFromIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromIndex, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.ChangeFromIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromIndex, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.FindIndex = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindIndex, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.FindFromKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromKey, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.ChangeFromKey = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromKey, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.FindFromKey1 = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_FindFromKey1, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun.ChangeFromKey1 = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_ChangeFromKey1, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_swigregister
BRepMesh_IDMapOfNodeOfDataStructureOfDelaun_swigregister(BRepMesh_IDMapOfNodeOfDataStructureOfDelaun)

class BRepMesh_IMapOfElementOfDataStructureOfDelaun(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IMapOfElementOfDataStructureOfDelaun(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IMapOfElementOfDataStructureOfDelaun &
        :rtype: BRepMesh_IMapOfElementOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IMapOfElementOfDataStructureOfDelaun &
        :rtype: BRepMesh_IMapOfElementOfDataStructureOfDelaun

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: BRepMesh_Triangle &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: BRepMesh_Triangle &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: BRepMesh_Triangle &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_FindKey(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: BRepMesh_Triangle &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_FindIndex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IMapOfElementOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IMapOfElementOfDataStructureOfDelaun.Assign = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Assign, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.Set = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Set, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.ReSize = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_ReSize, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.Clear = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Clear, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.Add = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Add, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.Substitute = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Substitute, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.RemoveLast = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_RemoveLast, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.Contains = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_Contains, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.FindKey = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_FindKey, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun.FindIndex = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_FindIndex, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IMapOfElementOfDataStructureOfDelaun)
BRepMesh_IMapOfElementOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IMapOfElementOfDataStructureOfDelaun_swigregister
BRepMesh_IMapOfElementOfDataStructureOfDelaun_swigregister(BRepMesh_IMapOfElementOfDataStructureOfDelaun)

class BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: BRepMesh_Edge &
        :param K2:
        :type K2: int
        :param I:
        :type I: BRepMesh_PairOfIndex &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun(*args))

    def Key1(self, *args):
        """
        :rtype: BRepMesh_Edge

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Next2(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_PairOfIndex

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun self) -> Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.Key1 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Key1, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.GetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_GetKey2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.SetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_SetKey2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.Next2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Next2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.Value = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Value, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_GetHandle, None, BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister
BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister(BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)

class Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_Nullify, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_IsNull, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_GetObject, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun__kill_pointed, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister = _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_swigregister(Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun)

def Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_DownCast(AnObject)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_DownCast = _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfLinkOfDataStructureOfDelaun_DownCast

class BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: BRepMesh_Vertex &
        :param K2:
        :type K2: int
        :param I:
        :type I: BRepMesh_ListOfInteger &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun(*args))

    def Key1(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Next2(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun self) -> Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun"""
        return _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.Key1 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Key1, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.GetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_GetKey2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.SetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_SetKey2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.Next2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Next2, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.Value = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Value, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_GetHandle, None, BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister
BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister(BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)

class Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_Nullify, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_IsNull, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_GetObject, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun__kill_pointed, None, Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister = _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_swigregister(Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun)

def Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_DownCast(AnObject)
Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_DownCast = _BRepMesh.Handle_BRepMesh_IndexedDataMapNodeOfIDMapOfNodeOfDataStructureOfDelaun_DownCast

class BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: BRepMesh_Triangle &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun(*args))

    def Key1(self, *args):
        """
        :rtype: BRepMesh_Triangle

        """
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_Next2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun self)"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun self) -> Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.Key1 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_Key1, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.GetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_GetKey2, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.SetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_SetKey2, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.Next2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_Next2, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_GetHandle, None, BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister
BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister(BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)

class Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_Nullify, None, Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_IsNull, None, Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_GetObject, None, Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun__kill_pointed, None, Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister = _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_swigregister(Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun)

def Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_DownCast(AnObject)
Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_DownCast = _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIMapOfElementOfDataStructureOfDelaun_DownCast

class BRepMesh_IndexedMapNodeOfIndexedMapOfVertex(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: BRepMesh_Vertex &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swiginit(self, _BRepMesh.new_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex(*args))

    def Key1(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(BRepMesh_IndexedMapNodeOfIndexedMapOfVertex self) -> Standard_Integer"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(BRepMesh_IndexedMapNodeOfIndexedMapOfVertex self, Standard_Integer value)"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_Next2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IndexedMapNodeOfIndexedMapOfVertex self)"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_IndexedMapNodeOfIndexedMapOfVertex self) -> Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex"""
        return _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.Key1 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_Key1, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.GetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_GetKey2, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.SetKey2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_SetKey2, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.Next2 = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_Next2, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex__kill_pointed, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_GetHandle, None, BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister = _BRepMesh.BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister
BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister(BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)

class Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swiginit(self, _BRepMesh.new_Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_Nullify, None, Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_IsNull, None, Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_GetObject, None, Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex__kill_pointed, None, Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister = _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_swigregister(Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex)

def Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_DownCast(AnObject)
Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_DownCast = _BRepMesh.Handle_BRepMesh_IndexedMapNodeOfIndexedMapOfVertex_DownCast

class BRepMesh_IndexedMapOfVertex(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMesh.BRepMesh_IndexedMapOfVertex_swiginit(self, _BRepMesh.new_BRepMesh_IndexedMapOfVertex(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IndexedMapOfVertex &
        :rtype: BRepMesh_IndexedMapOfVertex

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_IndexedMapOfVertex &
        :rtype: BRepMesh_IndexedMapOfVertex

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_FindKey(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IndexedMapOfVertex_FindIndex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IndexedMapOfVertex self)"""
        return _BRepMesh.BRepMesh_IndexedMapOfVertex__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IndexedMapOfVertex.Assign = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Assign, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.Set = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Set, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.ReSize = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_ReSize, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.Clear = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Clear, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.Add = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Add, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.Substitute = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Substitute, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.RemoveLast = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_RemoveLast, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.Contains = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_Contains, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.FindKey = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_FindKey, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex.FindIndex = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex_FindIndex, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IndexedMapOfVertex__kill_pointed, None, BRepMesh_IndexedMapOfVertex)
BRepMesh_IndexedMapOfVertex_swigregister = _BRepMesh.BRepMesh_IndexedMapOfVertex_swigregister
BRepMesh_IndexedMapOfVertex_swigregister(BRepMesh_IndexedMapOfVertex)

class BRepMesh_LinkHasherOfDataStructureOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: BRepMesh_Edge &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: BRepMesh_Edge &
        :param K2:
        :type K2: BRepMesh_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_LinkHasherOfDataStructureOfDelaun())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_LinkHasherOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_LinkHasherOfDataStructureOfDelaun)
BRepMesh_LinkHasherOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_swigregister
BRepMesh_LinkHasherOfDataStructureOfDelaun_swigregister(BRepMesh_LinkHasherOfDataStructureOfDelaun)

def BRepMesh_LinkHasherOfDataStructureOfDelaun_HashCode(*args):
    """
    :param K:
    :type K: BRepMesh_Edge &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_HashCode(*args)

def BRepMesh_LinkHasherOfDataStructureOfDelaun_IsEqual(*args):
    """
    :param K1:
    :type K1: BRepMesh_Edge &
    :param K2:
    :type K2: BRepMesh_Edge &
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_LinkHasherOfDataStructureOfDelaun_IsEqual(*args)

class BRepMesh_ListIteratorOfListOfVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: BRepMesh_ListOfVertex &
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_swiginit(self, _BRepMesh.new_BRepMesh_ListIteratorOfListOfVertex(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: BRepMesh_ListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListIteratorOfListOfVertex.Initialize = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Initialize, None, BRepMesh_ListIteratorOfListOfVertex)
BRepMesh_ListIteratorOfListOfVertex.More = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfVertex_More, None, BRepMesh_ListIteratorOfListOfVertex)
BRepMesh_ListIteratorOfListOfVertex.Next = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Next, None, BRepMesh_ListIteratorOfListOfVertex)
BRepMesh_ListIteratorOfListOfVertex.Value = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfVertex_Value, None, BRepMesh_ListIteratorOfListOfVertex)
BRepMesh_ListIteratorOfListOfVertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfVertex__kill_pointed, None, BRepMesh_ListIteratorOfListOfVertex)
BRepMesh_ListIteratorOfListOfVertex_swigregister = _BRepMesh.BRepMesh_ListIteratorOfListOfVertex_swigregister
BRepMesh_ListIteratorOfListOfVertex_swigregister(BRepMesh_ListIteratorOfListOfVertex)

class BRepMesh_ListIteratorOfListOfXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: BRepMesh_ListOfXY &
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListIteratorOfListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_ListIteratorOfListOfXY(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: BRepMesh_ListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfXY_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfXY_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfXY_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_ListIteratorOfListOfXY_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListIteratorOfListOfXY.Initialize = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfXY_Initialize, None, BRepMesh_ListIteratorOfListOfXY)
BRepMesh_ListIteratorOfListOfXY.More = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfXY_More, None, BRepMesh_ListIteratorOfListOfXY)
BRepMesh_ListIteratorOfListOfXY.Next = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfXY_Next, None, BRepMesh_ListIteratorOfListOfXY)
BRepMesh_ListIteratorOfListOfXY.Value = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfXY_Value, None, BRepMesh_ListIteratorOfListOfXY)
BRepMesh_ListIteratorOfListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListIteratorOfListOfXY__kill_pointed, None, BRepMesh_ListIteratorOfListOfXY)
BRepMesh_ListIteratorOfListOfXY_swigregister = _BRepMesh.BRepMesh_ListIteratorOfListOfXY_swigregister
BRepMesh_ListIteratorOfListOfXY_swigregister(BRepMesh_ListIteratorOfListOfXY)

class BRepMesh_ListNodeOfListOfVertex(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepMesh_Vertex &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListNodeOfListOfVertex_swiginit(self, _BRepMesh.new_BRepMesh_ListNodeOfListOfVertex(*args))

    def Value(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_ListNodeOfListOfVertex_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_ListNodeOfListOfVertex self)"""
        return _BRepMesh.BRepMesh_ListNodeOfListOfVertex__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_ListNodeOfListOfVertex self) -> Handle_BRepMesh_ListNodeOfListOfVertex"""
        return _BRepMesh.BRepMesh_ListNodeOfListOfVertex_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListNodeOfListOfVertex.Value = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfVertex_Value, None, BRepMesh_ListNodeOfListOfVertex)
BRepMesh_ListNodeOfListOfVertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfVertex__kill_pointed, None, BRepMesh_ListNodeOfListOfVertex)
BRepMesh_ListNodeOfListOfVertex.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfVertex_GetHandle, None, BRepMesh_ListNodeOfListOfVertex)
BRepMesh_ListNodeOfListOfVertex_swigregister = _BRepMesh.BRepMesh_ListNodeOfListOfVertex_swigregister
BRepMesh_ListNodeOfListOfVertex_swigregister(BRepMesh_ListNodeOfListOfVertex)

class Handle_BRepMesh_ListNodeOfListOfVertex(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_swiginit(self, _BRepMesh.new_Handle_BRepMesh_ListNodeOfListOfVertex(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_ListNodeOfListOfVertex.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_Nullify, None, Handle_BRepMesh_ListNodeOfListOfVertex)
Handle_BRepMesh_ListNodeOfListOfVertex.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_IsNull, None, Handle_BRepMesh_ListNodeOfListOfVertex)
Handle_BRepMesh_ListNodeOfListOfVertex.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_GetObject, None, Handle_BRepMesh_ListNodeOfListOfVertex)
Handle_BRepMesh_ListNodeOfListOfVertex._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex__kill_pointed, None, Handle_BRepMesh_ListNodeOfListOfVertex)
Handle_BRepMesh_ListNodeOfListOfVertex_swigregister = _BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_swigregister
Handle_BRepMesh_ListNodeOfListOfVertex_swigregister(Handle_BRepMesh_ListNodeOfListOfVertex)

def Handle_BRepMesh_ListNodeOfListOfVertex_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_DownCast(AnObject)
Handle_BRepMesh_ListNodeOfListOfVertex_DownCast = _BRepMesh.Handle_BRepMesh_ListNodeOfListOfVertex_DownCast

class BRepMesh_ListNodeOfListOfXY(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: gp_XY
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListNodeOfListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_ListNodeOfListOfXY(*args))

    def Value(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_ListNodeOfListOfXY_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_ListNodeOfListOfXY self)"""
        return _BRepMesh.BRepMesh_ListNodeOfListOfXY__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_ListNodeOfListOfXY self) -> Handle_BRepMesh_ListNodeOfListOfXY"""
        return _BRepMesh.BRepMesh_ListNodeOfListOfXY_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListNodeOfListOfXY.Value = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfXY_Value, None, BRepMesh_ListNodeOfListOfXY)
BRepMesh_ListNodeOfListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfXY__kill_pointed, None, BRepMesh_ListNodeOfListOfXY)
BRepMesh_ListNodeOfListOfXY.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_ListNodeOfListOfXY_GetHandle, None, BRepMesh_ListNodeOfListOfXY)
BRepMesh_ListNodeOfListOfXY_swigregister = _BRepMesh.BRepMesh_ListNodeOfListOfXY_swigregister
BRepMesh_ListNodeOfListOfXY_swigregister(BRepMesh_ListNodeOfListOfXY)

class Handle_BRepMesh_ListNodeOfListOfXY(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_swiginit(self, _BRepMesh.new_Handle_BRepMesh_ListNodeOfListOfXY(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_ListNodeOfListOfXY.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_Nullify, None, Handle_BRepMesh_ListNodeOfListOfXY)
Handle_BRepMesh_ListNodeOfListOfXY.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_IsNull, None, Handle_BRepMesh_ListNodeOfListOfXY)
Handle_BRepMesh_ListNodeOfListOfXY.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_GetObject, None, Handle_BRepMesh_ListNodeOfListOfXY)
Handle_BRepMesh_ListNodeOfListOfXY._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY__kill_pointed, None, Handle_BRepMesh_ListNodeOfListOfXY)
Handle_BRepMesh_ListNodeOfListOfXY_swigregister = _BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_swigregister
Handle_BRepMesh_ListNodeOfListOfXY_swigregister(Handle_BRepMesh_ListNodeOfListOfXY)

def Handle_BRepMesh_ListNodeOfListOfXY_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_DownCast(AnObject)
Handle_BRepMesh_ListNodeOfListOfXY_DownCast = _BRepMesh.Handle_BRepMesh_ListNodeOfListOfXY_DownCast

class BRepMesh_ListOfVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListOfVertex_swiginit(self, _BRepMesh.new_BRepMesh_ListOfVertex(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ListOfVertex_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: BRepMesh_Vertex &
        :rtype: None

        :param I:
        :type I: BRepMesh_Vertex &
        :param theIt:
        :type theIt: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: BRepMesh_Vertex &
        :rtype: None

        :param I:
        :type I: BRepMesh_Vertex &
        :param theIt:
        :type theIt: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Append(self, *args)


    def First(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_ListOfVertex_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: BRepMesh_Vertex &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: BRepMesh_Vertex &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfVertex &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfVertex &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfVertex_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListOfVertex.Assign = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Assign, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Set = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Set, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Extent = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Extent, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Clear = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Clear, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.IsEmpty = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_IsEmpty, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Prepend = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Prepend, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Append = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Append, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.First = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_First, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Last = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Last, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.RemoveFirst = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_RemoveFirst, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.Remove = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_Remove, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.InsertBefore = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_InsertBefore, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex.InsertAfter = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex_InsertAfter, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListOfVertex__kill_pointed, None, BRepMesh_ListOfVertex)
BRepMesh_ListOfVertex_swigregister = _BRepMesh.BRepMesh_ListOfVertex_swigregister
BRepMesh_ListOfVertex_swigregister(BRepMesh_ListOfVertex)

class BRepMesh_ListOfXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMesh.BRepMesh_ListOfXY_swiginit(self, _BRepMesh.new_BRepMesh_ListOfXY(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_ListOfXY_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ListOfXY_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: gp_XY
        :rtype: None

        :param I:
        :type I: gp_XY
        :param theIt:
        :type theIt: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: gp_XY
        :rtype: None

        :param I:
        :type I: gp_XY
        :param theIt:
        :type theIt: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Append(self, *args)


    def First(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_ListOfXY_First(self, *args)


    def Last(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_ListOfXY_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: gp_XY
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: gp_XY
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        :param Other:
        :type Other: BRepMesh_ListOfXY &
        :param It:
        :type It: BRepMesh_ListIteratorOfListOfXY &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ListOfXY_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ListOfXY.Assign = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Assign, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Set = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Set, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Extent = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Extent, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Clear = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Clear, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.IsEmpty = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_IsEmpty, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Prepend = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Prepend, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Append = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Append, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.First = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_First, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Last = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Last, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.RemoveFirst = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_RemoveFirst, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.Remove = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_Remove, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.InsertBefore = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_InsertBefore, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY.InsertAfter = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY_InsertAfter, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ListOfXY__kill_pointed, None, BRepMesh_ListOfXY)
BRepMesh_ListOfXY_swigregister = _BRepMesh.BRepMesh_ListOfXY_swigregister
BRepMesh_ListOfXY_swigregister(BRepMesh_ListOfXY)

class BRepMesh_NodeHasherOfDataStructureOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: BRepMesh_Vertex &
        :param K2:
        :type K2: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_NodeHasherOfDataStructureOfDelaun())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_NodeHasherOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_NodeHasherOfDataStructureOfDelaun)
BRepMesh_NodeHasherOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_swigregister
BRepMesh_NodeHasherOfDataStructureOfDelaun_swigregister(BRepMesh_NodeHasherOfDataStructureOfDelaun)

def BRepMesh_NodeHasherOfDataStructureOfDelaun_HashCode(*args):
    """
    :param K:
    :type K: BRepMesh_Vertex &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_HashCode(*args)

def BRepMesh_NodeHasherOfDataStructureOfDelaun_IsEqual(*args):
    """
    :param K1:
    :type K1: BRepMesh_Vertex &
    :param K2:
    :type K2: BRepMesh_Vertex &
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_NodeHasherOfDataStructureOfDelaun_IsEqual(*args)

class BRepMesh_PairOfIndex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theOther:
        :type theOther: BRepMesh_PairOfIndex &
        :rtype: None

        """
        _BRepMesh.BRepMesh_PairOfIndex_swiginit(self, _BRepMesh.new_BRepMesh_PairOfIndex(*args))

    def Clear(self, *args):
        """
        * Clear indices

        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfIndex_Clear(self, *args)


    def Append(self, *args):
        """
        * append index (store first of last index of pair)

        :param theIndx:
        :type theIndx: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfIndex_Append(self, *args)


    def Prepend(self, *args):
        """
        * prepend index (store first index)

        :param theIndx:
        :type theIndx: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfIndex_Prepend(self, *args)


    def IsEmpty(self, *args):
        """
        * returns is pair not initialized by index

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_PairOfIndex_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        * returns numner of initialized indeces

        :rtype: int

        """
        return _BRepMesh.BRepMesh_PairOfIndex_Extent(self, *args)


    def FirstIndex(self, *args):
        """
        * returns first index from pair

        :rtype: int

        """
        return _BRepMesh.BRepMesh_PairOfIndex_FirstIndex(self, *args)


    def LastIndex(self, *args):
        """
        * returns last index

        :rtype: int

        """
        return _BRepMesh.BRepMesh_PairOfIndex_LastIndex(self, *args)


    def Index(self, *args):
        """
        :param theNum:
        :type theNum: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_PairOfIndex_Index(self, *args)


    def SetIndex(self, *args):
        """
        :param theNum:
        :type theNum: int
        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfIndex_SetIndex(self, *args)


    def RemoveIndex(self, *args):
        """
        * remove indicated

        :param theNum:
        :type theNum: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfIndex_RemoveIndex(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_PairOfIndex.Clear = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_Clear, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.Append = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_Append, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.Prepend = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_Prepend, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.IsEmpty = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_IsEmpty, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.Extent = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_Extent, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.FirstIndex = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_FirstIndex, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.LastIndex = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_LastIndex, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.Index = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_Index, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.SetIndex = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_SetIndex, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex.RemoveIndex = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex_RemoveIndex, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_PairOfIndex__kill_pointed, None, BRepMesh_PairOfIndex)
BRepMesh_PairOfIndex_swigregister = _BRepMesh.BRepMesh_PairOfIndex_swigregister
BRepMesh_PairOfIndex_swigregister(BRepMesh_PairOfIndex)

class BRepMesh_PairOfPolygon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create empty pair with null fileds

        :rtype: None

        """
        _BRepMesh.BRepMesh_PairOfPolygon_swiginit(self, _BRepMesh.new_BRepMesh_PairOfPolygon(*args))

    def Clear(self, *args):
        """
        * Clear pair handles

        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfPolygon_Clear(self, *args)


    def Prepend(self, *args):
        """
        :param thePoly:
        :type thePoly: Handle_Poly_PolygonOnTriangulation &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfPolygon_Prepend(self, *args)


    def Append(self, *args):
        """
        :param thePoly:
        :type thePoly: Handle_Poly_PolygonOnTriangulation &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_PairOfPolygon_Append(self, *args)


    def First(self, *args):
        """
        * Returns first polygon on triangulation

        :rtype: Handle_Poly_PolygonOnTriangulation

        """
        return _BRepMesh.BRepMesh_PairOfPolygon_First(self, *args)


    def Last(self, *args):
        """
        * Returns last polygon on triangulation

        :rtype: Handle_Poly_PolygonOnTriangulation

        """
        return _BRepMesh.BRepMesh_PairOfPolygon_Last(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_PairOfPolygon.Clear = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon_Clear, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon.Prepend = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon_Prepend, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon.Append = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon_Append, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon.First = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon_First, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon.Last = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon_Last, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_PairOfPolygon__kill_pointed, None, BRepMesh_PairOfPolygon)
BRepMesh_PairOfPolygon_swigregister = _BRepMesh.BRepMesh_PairOfPolygon_swigregister
BRepMesh_PairOfPolygon_swigregister(BRepMesh_PairOfPolygon)

class BRepMesh_SelectorOfDataStructureOfDelaun(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theMesh:
        :type theMesh: Handle_BRepMesh_DataStructureOfDelaun &
        :rtype: None

        """
        _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_swiginit(self, _BRepMesh.new_BRepMesh_SelectorOfDataStructureOfDelaun(*args))

    def Initialize(self, *args):
        """
        :param theMesh:
        :type theMesh: Handle_BRepMesh_DataStructureOfDelaun &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Initialize(self, *args)


    def NeighboursOfNode(self, *args):
        """
        :param indexNode:
        :type indexNode: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfNode(self, *args)


    def NeighboursOfLink(self, *args):
        """
        :param indexLink:
        :type indexLink: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfLink(self, *args)


    def NeighboursOfElement(self, *args):
        """
        * All Neighbours Of the Element. By edge or by vertices.

        :param indexElem:
        :type indexElem: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfElement(self, *args)


    def NeighboursByEdgeOf(self, *args):
        """
        * Neighbours by edge Of the Element.

        :param theElem:
        :type theElem: BRepMesh_Triangle &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursByEdgeOf(self, *args)


    def NeighboursOf(self, *args):
        """
        :param theNode:
        :type theNode: BRepMesh_Vertex &
        :rtype: None

        :param theLink:
        :type theLink: BRepMesh_Edge &
        :rtype: None

        :param theElem:
        :type theElem: BRepMesh_Triangle &
        :rtype: None

        * Adds a level of Neighbours by edge to the selector <theSelector>.

        :param theSelector:
        :type theSelector: BRepMesh_SelectorOfDataStructureOfDelaun &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOf(self, *args)


    def AddNeighbours(self, *args):
        """
        * Adds a level of Neighbours by edge to the selector <self>.

        :rtype: None

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_AddNeighbours(self, *args)


    def Nodes(self, *args):
        """
        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Nodes(self, *args)


    def Links(self, *args):
        """
        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Links(self, *args)


    def Elements(self, *args):
        """
        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Elements(self, *args)


    def FrontierLinks(self, *args):
        """
        * Gives the list of links incices frontier of the selector <self>.

        :rtype: BRepMesh_MapOfInteger

        """
        return _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_FrontierLinks(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_SelectorOfDataStructureOfDelaun.Initialize = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Initialize, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.NeighboursOfNode = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfNode, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.NeighboursOfLink = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfLink, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.NeighboursOfElement = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOfElement, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.NeighboursByEdgeOf = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursByEdgeOf, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.NeighboursOf = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_NeighboursOf, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.AddNeighbours = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_AddNeighbours, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.Nodes = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Nodes, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.Links = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Links, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.Elements = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_Elements, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun.FrontierLinks = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_FrontierLinks, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun__kill_pointed, None, BRepMesh_SelectorOfDataStructureOfDelaun)
BRepMesh_SelectorOfDataStructureOfDelaun_swigregister = _BRepMesh.BRepMesh_SelectorOfDataStructureOfDelaun_swigregister
BRepMesh_SelectorOfDataStructureOfDelaun_swigregister(BRepMesh_SelectorOfDataStructureOfDelaun)

class BRepMesh_ShapeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMesh.BRepMesh_ShapeTool_swiginit(self, _BRepMesh.new_BRepMesh_ShapeTool(*args))

    def MoreFace(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ShapeTool_MoreFace(self, *args)


    def NextFace(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ShapeTool_NextFace(self, *args)


    def CurrentFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepMesh.BRepMesh_ShapeTool_CurrentFace(self, *args)


    def MoreEdge(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ShapeTool_MoreEdge(self, *args)


    def NextEdge(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ShapeTool_NextEdge(self, *args)


    def CurrentEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepMesh.BRepMesh_ShapeTool_CurrentEdge(self, *args)


    def Init(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ShapeTool_Init(self, *args)


    def MoreInternalVertex(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ShapeTool_MoreInternalVertex(self, *args)


    def NextInternalVertex(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_ShapeTool_NextInternalVertex(self, *args)


    def CurrentInternalVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepMesh.BRepMesh_ShapeTool_CurrentInternalVertex(self, *args)


    def Orientation(*args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopAbs_Orientation

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopAbs_Orientation

        """
        return _BRepMesh.BRepMesh_ShapeTool_Orientation(*args)

    Orientation = staticmethod(Orientation)

    def Bound(*args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: Bnd_Box

        :param E:
        :type E: TopoDS_Edge &
        :rtype: Bnd_Box

        """
        return _BRepMesh.BRepMesh_ShapeTool_Bound(*args)

    Bound = staticmethod(Bound)

    def FirstVertex(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Vertex

        """
        return _BRepMesh.BRepMesh_ShapeTool_FirstVertex(*args)

    FirstVertex = staticmethod(FirstVertex)

    def LastVertex(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Vertex

        """
        return _BRepMesh.BRepMesh_ShapeTool_LastVertex(*args)

    LastVertex = staticmethod(LastVertex)

    def Vertices(*args):
        """
        * If there is not First or Last vertex (infinite or semi-infinite edge) return null shapes.

        :param E:
        :type E: TopoDS_Edge &
        :param Vfirst:
        :type Vfirst: TopoDS_Vertex &
        :param Vlast:
        :type Vlast: TopoDS_Vertex &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_Vertices(*args)

    Vertices = staticmethod(Vertices)

    def Range(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param wFirst:
        :type wFirst: float &
        :param wLast:
        :type wLast: float &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_Range(*args)

    Range = staticmethod(Range)

    def UVPoints(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param uvFirst:
        :type uvFirst: gp_Pnt2d
        :param uvLast:
        :type uvLast: gp_Pnt2d
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_UVPoints(*args)

    UVPoints = staticmethod(UVPoints)

    def Degenerated(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_ShapeTool_Degenerated(*args)

    Degenerated = staticmethod(Degenerated)

    def Tolerance(*args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: float

        """
        return _BRepMesh.BRepMesh_ShapeTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Parameter(*args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: float

        """
        return _BRepMesh.BRepMesh_ShapeTool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Parameters(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param W:
        :type W: float
        :param UV:
        :type UV: gp_Pnt2d
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_Parameters(*args)

    Parameters = staticmethod(Parameters)

    def Locate(*args):
        """
        :param C:
        :type C: BRepAdaptor_Curve &
        :param W:
        :type W: float
        :param WFound:
        :type WFound: float &
        :param p3d:
        :type p3d: gp_Pnt
        :param UV:
        :type UV: gp_Pnt2d
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_Locate(*args)

    Locate = staticmethod(Locate)

    def Pnt(*args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: gp_Pnt

        """
        return _BRepMesh.BRepMesh_ShapeTool_Pnt(*args)

    Pnt = staticmethod(Pnt)

    def AddInFace(*args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: void

        """
        return _BRepMesh.BRepMesh_ShapeTool_AddInFace(*args)

    AddInFace = staticmethod(AddInFace)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_ShapeTool.MoreFace = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_MoreFace, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.NextFace = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_NextFace, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.CurrentFace = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_CurrentFace, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.MoreEdge = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_MoreEdge, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.NextEdge = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_NextEdge, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.CurrentEdge = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_CurrentEdge, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.Init = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_Init, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.MoreInternalVertex = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_MoreInternalVertex, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.NextInternalVertex = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_NextInternalVertex, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool.CurrentInternalVertex = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool_CurrentInternalVertex, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_ShapeTool__kill_pointed, None, BRepMesh_ShapeTool)
BRepMesh_ShapeTool_swigregister = _BRepMesh.BRepMesh_ShapeTool_swigregister
BRepMesh_ShapeTool_swigregister(BRepMesh_ShapeTool)

def BRepMesh_ShapeTool_Orientation(*args):
    """
    :param F:
    :type F: TopoDS_Face &
    :rtype: TopAbs_Orientation

    :param E:
    :type E: TopoDS_Edge &
    :rtype: TopAbs_Orientation

    """
    return _BRepMesh.BRepMesh_ShapeTool_Orientation(*args)

def BRepMesh_ShapeTool_Bound(*args):
    """
    :param F:
    :type F: TopoDS_Face &
    :rtype: Bnd_Box

    :param E:
    :type E: TopoDS_Edge &
    :rtype: Bnd_Box

    """
    return _BRepMesh.BRepMesh_ShapeTool_Bound(*args)

def BRepMesh_ShapeTool_FirstVertex(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :rtype: TopoDS_Vertex

    """
    return _BRepMesh.BRepMesh_ShapeTool_FirstVertex(*args)

def BRepMesh_ShapeTool_LastVertex(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :rtype: TopoDS_Vertex

    """
    return _BRepMesh.BRepMesh_ShapeTool_LastVertex(*args)

def BRepMesh_ShapeTool_Vertices(*args):
    """
    * If there is not First or Last vertex (infinite or semi-infinite edge) return null shapes.

    :param E:
    :type E: TopoDS_Edge &
    :param Vfirst:
    :type Vfirst: TopoDS_Vertex &
    :param Vlast:
    :type Vlast: TopoDS_Vertex &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_Vertices(*args)

def BRepMesh_ShapeTool_Range(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param wFirst:
    :type wFirst: float &
    :param wLast:
    :type wLast: float &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_Range(*args)

def BRepMesh_ShapeTool_UVPoints(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param uvFirst:
    :type uvFirst: gp_Pnt2d
    :param uvLast:
    :type uvLast: gp_Pnt2d
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_UVPoints(*args)

def BRepMesh_ShapeTool_Degenerated(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_ShapeTool_Degenerated(*args)

def BRepMesh_ShapeTool_Tolerance(*args):
    """
    :param V:
    :type V: TopoDS_Vertex &
    :rtype: float

    """
    return _BRepMesh.BRepMesh_ShapeTool_Tolerance(*args)

def BRepMesh_ShapeTool_Parameter(*args):
    """
    :param V:
    :type V: TopoDS_Vertex &
    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :rtype: float

    """
    return _BRepMesh.BRepMesh_ShapeTool_Parameter(*args)

def BRepMesh_ShapeTool_Parameters(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param W:
    :type W: float
    :param UV:
    :type UV: gp_Pnt2d
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_Parameters(*args)

def BRepMesh_ShapeTool_Locate(*args):
    """
    :param C:
    :type C: BRepAdaptor_Curve &
    :param W:
    :type W: float
    :param WFound:
    :type WFound: float &
    :param p3d:
    :type p3d: gp_Pnt
    :param UV:
    :type UV: gp_Pnt2d
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_Locate(*args)

def BRepMesh_ShapeTool_Pnt(*args):
    """
    :param V:
    :type V: TopoDS_Vertex &
    :rtype: gp_Pnt

    """
    return _BRepMesh.BRepMesh_ShapeTool_Pnt(*args)

def BRepMesh_ShapeTool_AddInFace(*args):
    """
    :param F:
    :type F: TopoDS_Face &
    :param T:
    :type T: Handle_Poly_Triangulation &
    :rtype: void

    """
    return _BRepMesh.BRepMesh_ShapeTool_AddInFace(*args)

class BRepMesh_Triangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theEdge1:
        :type theEdge1: int
        :param theEdge2:
        :type theEdge2: int
        :param theEdge3:
        :type theEdge3: int
        :param theOrientation1:
        :type theOrientation1: bool
        :param theOrientation2:
        :type theOrientation2: bool
        :param theOrientation3:
        :type theOrientation3: bool
        :param isCanMove:
        :type isCanMove: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        _BRepMesh.BRepMesh_Triangle_swiginit(self, _BRepMesh.new_BRepMesh_Triangle(*args))

    def Initialize(self, *args):
        """
        :param theEdge1:
        :type theEdge1: int
        :param theEdge2:
        :type theEdge2: int
        :param theEdge3:
        :type theEdge3: int
        :param theOrientation1:
        :type theOrientation1: bool
        :param theOrientation2:
        :type theOrientation2: bool
        :param theOrientation3:
        :type theOrientation3: bool
        :param isCanMove:
        :type isCanMove: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Triangle_Initialize(self, *args)


    def Edges(self, *args):
        """
        :param theEdge1:
        :type theEdge1: int &
        :param theEdge2:
        :type theEdge2: int &
        :param theEdge3:
        :type theEdge3: int &
        :param theOrientation1:
        :type theOrientation1: bool
        :param theOrientation2:
        :type theOrientation2: bool
        :param theOrientation3:
        :type theOrientation3: bool
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Triangle_Edges(self, *args)


    def Movability(self, *args):
        """
        :rtype: inline BRepMesh_DegreeOfFreedom

        """
        return _BRepMesh.BRepMesh_Triangle_Movability(self, *args)


    def SetMovability(self, *args):
        """
        :param theMovability:
        :type theMovability: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Triangle_SetMovability(self, *args)


    def HashCode(self, *args):
        """
        :param theUpper:
        :type theUpper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Triangle_HashCode(self, *args)


    def IsEqual(self, *args):
        """
        :param theOther:
        :type theOther: BRepMesh_Triangle &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Triangle_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Triangle.Initialize = new_instancemethod(_BRepMesh.BRepMesh_Triangle_Initialize, None, BRepMesh_Triangle)
BRepMesh_Triangle.Edges = new_instancemethod(_BRepMesh.BRepMesh_Triangle_Edges, None, BRepMesh_Triangle)
BRepMesh_Triangle.Movability = new_instancemethod(_BRepMesh.BRepMesh_Triangle_Movability, None, BRepMesh_Triangle)
BRepMesh_Triangle.SetMovability = new_instancemethod(_BRepMesh.BRepMesh_Triangle_SetMovability, None, BRepMesh_Triangle)
BRepMesh_Triangle.HashCode = new_instancemethod(_BRepMesh.BRepMesh_Triangle_HashCode, None, BRepMesh_Triangle)
BRepMesh_Triangle.__hash__ = new_instancemethod(_BRepMesh.BRepMesh_Triangle___hash__, None, BRepMesh_Triangle)
BRepMesh_Triangle.IsEqual = new_instancemethod(_BRepMesh.BRepMesh_Triangle_IsEqual, None, BRepMesh_Triangle)
BRepMesh_Triangle.__eq_wrapper__ = new_instancemethod(_BRepMesh.BRepMesh_Triangle___eq_wrapper__, None, BRepMesh_Triangle)
BRepMesh_Triangle._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Triangle__kill_pointed, None, BRepMesh_Triangle)
BRepMesh_Triangle_swigregister = _BRepMesh.BRepMesh_Triangle_swigregister
BRepMesh_Triangle_swigregister(BRepMesh_Triangle)

class BRepMesh_Vertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param UV:
        :type UV: gp_XY
        :param Locat3d:
        :type Locat3d: int
        :param Move:
        :type Move: BRepMesh_DegreeOfFreedom
        :rtype: None

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Move:
        :type Move: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        _BRepMesh.BRepMesh_Vertex_swiginit(self, _BRepMesh.new_BRepMesh_Vertex(*args))

    def Initialize(self, *args):
        """
        :param UV:
        :type UV: gp_XY
        :param Locat3d:
        :type Locat3d: int
        :param Move:
        :type Move: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Vertex_Initialize(self, *args)


    def Coord(self, *args):
        """
        :rtype: gp_XY

        """
        return _BRepMesh.BRepMesh_Vertex_Coord(self, *args)


    def Location3d(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Vertex_Location3d(self, *args)


    def Movability(self, *args):
        """
        :rtype: BRepMesh_DegreeOfFreedom

        """
        return _BRepMesh.BRepMesh_Vertex_Movability(self, *args)


    def SetMovability(self, *args):
        """
        :param Move:
        :type Move: BRepMesh_DegreeOfFreedom
        :rtype: None

        """
        return _BRepMesh.BRepMesh_Vertex_SetMovability(self, *args)


    def HashCode(self, *args):
        """
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_Vertex_HashCode(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_Vertex_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_Vertex.Initialize = new_instancemethod(_BRepMesh.BRepMesh_Vertex_Initialize, None, BRepMesh_Vertex)
BRepMesh_Vertex.Coord = new_instancemethod(_BRepMesh.BRepMesh_Vertex_Coord, None, BRepMesh_Vertex)
BRepMesh_Vertex.Location3d = new_instancemethod(_BRepMesh.BRepMesh_Vertex_Location3d, None, BRepMesh_Vertex)
BRepMesh_Vertex.Movability = new_instancemethod(_BRepMesh.BRepMesh_Vertex_Movability, None, BRepMesh_Vertex)
BRepMesh_Vertex.SetMovability = new_instancemethod(_BRepMesh.BRepMesh_Vertex_SetMovability, None, BRepMesh_Vertex)
BRepMesh_Vertex.HashCode = new_instancemethod(_BRepMesh.BRepMesh_Vertex_HashCode, None, BRepMesh_Vertex)
BRepMesh_Vertex.__hash__ = new_instancemethod(_BRepMesh.BRepMesh_Vertex___hash__, None, BRepMesh_Vertex)
BRepMesh_Vertex.IsEqual = new_instancemethod(_BRepMesh.BRepMesh_Vertex_IsEqual, None, BRepMesh_Vertex)
BRepMesh_Vertex.__eq_wrapper__ = new_instancemethod(_BRepMesh.BRepMesh_Vertex___eq_wrapper__, None, BRepMesh_Vertex)
BRepMesh_Vertex._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_Vertex__kill_pointed, None, BRepMesh_Vertex)
BRepMesh_Vertex_swigregister = _BRepMesh.BRepMesh_Vertex_swigregister
BRepMesh_Vertex_swigregister(BRepMesh_Vertex)

class BRepMesh_VertexHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: BRepMesh_Vertex &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: BRepMesh_Vertex &
        :param K2:
        :type K2: BRepMesh_Vertex &
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_VertexHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BRepMesh.BRepMesh_VertexHasher_swiginit(self, _BRepMesh.new_BRepMesh_VertexHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_VertexHasher._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_VertexHasher__kill_pointed, None, BRepMesh_VertexHasher)
BRepMesh_VertexHasher_swigregister = _BRepMesh.BRepMesh_VertexHasher_swigregister
BRepMesh_VertexHasher_swigregister(BRepMesh_VertexHasher)

def BRepMesh_VertexHasher_HashCode(*args):
    """
    :param K:
    :type K: BRepMesh_Vertex &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BRepMesh.BRepMesh_VertexHasher_HashCode(*args)

def BRepMesh_VertexHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: BRepMesh_Vertex &
    :param K2:
    :type K2: BRepMesh_Vertex &
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_VertexHasher_IsEqual(*args)

class BRepMesh_VertexInspector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTolerance(self, *args):
        """
        :param theTol:
        :type theTol: float
        :rtype: None

        :param theTolX:
        :type theTolX: float
        :param theTolY:
        :type theTolY: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexInspector_SetTolerance(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexInspector_Clear(self, *args)


    def Delete(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexInspector_Delete(self, *args)


    def GetNbVertices(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexInspector_GetNbVertices(self, *args)


    def GetVertex(self, *args):
        """
        :param theInd:
        :type theInd: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_VertexInspector_GetVertex(self, *args)


    def SetCurrent(self, *args):
        """
        * Set current node to be checked

        :param theCurVertex:
        :type theCurVertex: gp_XY
        :param Standard_Boolean:
        :type Standard_Boolean: 
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexInspector_SetCurrent(self, *args)


    def GetCoincidentInd(self, *args):
        """
        * //!Get result index of node

        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexInspector_GetCoincidentInd(self, *args)


    def GetListOfDelNodes(self, *args):
        """
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_VertexInspector_GetListOfDelNodes(self, *args)


    def IsEqual(*args):
        """
        :param theIdx:
        :type theIdx: int
        :param theTarget:
        :type theTarget: int
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_VertexInspector_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_VertexInspector.SetTolerance = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_SetTolerance, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.Clear = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_Clear, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.Delete = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_Delete, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.GetNbVertices = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_GetNbVertices, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.GetVertex = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_GetVertex, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.SetCurrent = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_SetCurrent, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.GetCoincidentInd = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_GetCoincidentInd, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector.GetListOfDelNodes = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector_GetListOfDelNodes, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_VertexInspector__kill_pointed, None, BRepMesh_VertexInspector)
BRepMesh_VertexInspector_swigregister = _BRepMesh.BRepMesh_VertexInspector_swigregister
BRepMesh_VertexInspector_swigregister(BRepMesh_VertexInspector)

def BRepMesh_VertexInspector_IsEqual(*args):
    """
    :param theIdx:
    :type theIdx: int
    :param theTarget:
    :type theTarget: int
    :rtype: bool

    """
    return _BRepMesh.BRepMesh_VertexInspector_IsEqual(*args)

class BRepMesh_VertexTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theAlloc:
        :type theAlloc: BRepMesh_BaseAllocator &
        :rtype: None

        * Constructs a VertexTool with an evaluation of the number of vertices.

        :param nbComp:
        :type nbComp: int
        :param theAlloc:
        :type theAlloc: BRepMesh_BaseAllocator &
        :rtype: None

        """
        _BRepMesh.BRepMesh_VertexTool_swiginit(self, _BRepMesh.new_BRepMesh_VertexTool(*args))

    def SetCellSize(self, *args):
        """
        * Sets new size for cellfilter.

        :param theSize:
        :type theSize: float
        :rtype: None

        * Sets new size for cellfilter.

        :param theXSize:
        :type theXSize: float
        :param theYSize:
        :type theYSize: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexTool_SetCellSize(self, *args)


    def SetTolerance(self, *args):
        """
        * Sets new size for cellfilter.

        :param theTol:
        :type theTol: float
        :rtype: None

        * Sets new size for cellfilter.

        :param theTolX:
        :type theTolX: float
        :param theTolY:
        :type theTolY: float
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexTool_SetTolerance(self, *args)


    def Add(self, *args):
        """
        * Adds a vertex to the tool.

        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :param theParams:
        :type theParams: BRepMesh_ListOfInteger &
        :rtype: int

        * Adds a vertex to the tool.

        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexTool_Add(self, *args)


    def Delete(self, *args):
        """
        * Deletes a vertex from the tool.

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexTool_Delete(self, *args)


    def FindFromIndex(self, *args):
        """
        * Returns data assigned to theIndex.

        :param theIndex:
        :type theIndex: int
        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_VertexTool_FindFromIndex(self, *args)


    def FindKey(self, *args):
        """
        * Selects the vertex by theIndex.

        :param theIndex:
        :type theIndex: int
        :rtype: BRepMesh_Vertex

        """
        return _BRepMesh.BRepMesh_VertexTool_FindKey(self, *args)


    def FindIndex(self, *args):
        """
        * Returns an index of theVertex.

        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexTool_FindIndex(self, *args)


    def Extent(self, *args):
        """
        * Returns a number of vertices.

        :rtype: int

        """
        return _BRepMesh.BRepMesh_VertexTool_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        * Returns True when the map contains no keys.

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_VertexTool_IsEmpty(self, *args)


    def Substitute(self, *args):
        """
        * Substitutes vertex with Index on theVertex with attributes theData.

        :param Index:
        :type Index: int
        :param theVertex:
        :type theVertex: BRepMesh_Vertex &
        :param theData:
        :type theData: BRepMesh_ListOfInteger &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexTool_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        * Remove last node from the structure.

        :rtype: None

        """
        return _BRepMesh.BRepMesh_VertexTool_RemoveLast(self, *args)


    def GetListOfDelNodes(self, *args):
        """
        * Returns the list with indexes of vertices that have Movability attribute equal to BRepMesh_Deleted and can be replaced with another node.

        :rtype: BRepMesh_ListOfInteger

        """
        return _BRepMesh.BRepMesh_VertexTool_GetListOfDelNodes(self, *args)


    def StatisticsToString(self):
        """StatisticsToString(BRepMesh_VertexTool self) -> std::string"""
        return _BRepMesh.BRepMesh_VertexTool_StatisticsToString(self)


    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_VertexTool self)"""
        return _BRepMesh.BRepMesh_VertexTool__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_VertexTool.SetCellSize = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_SetCellSize, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.SetTolerance = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_SetTolerance, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.Add = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_Add, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.Delete = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_Delete, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.FindFromIndex = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_FindFromIndex, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.FindKey = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_FindKey, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.FindIndex = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_FindIndex, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.Extent = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_Extent, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.IsEmpty = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_IsEmpty, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.Substitute = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_Substitute, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.RemoveLast = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_RemoveLast, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.GetListOfDelNodes = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_GetListOfDelNodes, None, BRepMesh_VertexTool)
BRepMesh_VertexTool.StatisticsToString = new_instancemethod(_BRepMesh.BRepMesh_VertexTool_StatisticsToString, None, BRepMesh_VertexTool)
BRepMesh_VertexTool._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_VertexTool__kill_pointed, None, BRepMesh_VertexTool)
BRepMesh_VertexTool_swigregister = _BRepMesh.BRepMesh_VertexTool_swigregister
BRepMesh_VertexTool_swigregister(BRepMesh_VertexTool)

class BRepMesh_IncrementalMesh(BRepMesh_DiscretRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * If the boolean <Relatif> is True, the deflection used for the polygonalisation of each edge will be <D> * Size of Edge. the deflection used for the faces will be the maximum deflection of their edges.

        :param S:
        :type S: TopoDS_Shape &
        :param D:
        :type D: float
        :param Relatif: default value is Standard_False
        :type Relatif: bool
        :param Ang: default value is 0.5
        :type Ang: float
        :param InParallel: default value is Standard_False
        :type InParallel: bool
        :rtype: None

        """
        _BRepMesh.BRepMesh_IncrementalMesh_swiginit(self, _BRepMesh.new_BRepMesh_IncrementalMesh(*args))

    def SetRelative(self, *args):
        """
        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_SetRelative(self, *args)


    def Relative(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_Relative(self, *args)


    def Update(self, *args):
        """
        * Builds the incremental mesh of the shape

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_Update(self, *args)


    def IsModified(self, *args):
        """
        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_IsModified(self, *args)


    def GetStatusFlags(self, *args):
        """
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_GetStatusFlags(self, *args)


    def SetParallel(self, *args):
        """
        * Request algorithm to launch in multiple threads to improve performance.

        :param theInParallel:
        :type theInParallel: bool
        :rtype: None

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_SetParallel(self, *args)


    def IsParallel(self, *args):
        """
        * Returns the multi-threading usage flag.

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_IsParallel(self, *args)


    def Discret(*args):
        """
        * Plugin interface for the Mesh Factories.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param theDeflection:
        :type theDeflection: float
        :param theAngle:
        :type theAngle: float
        :param theAlgo:
        :type theAlgo: BRepMesh_PDiscretRoot &
        :rtype: int

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_Discret(*args)

    Discret = staticmethod(Discret)

    def IsParallelDefault(*args):
        """
        * Returns multi-threading usage flag set by default in Discret() static method (thus applied only to Mesh Factories).

        :rtype: bool

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_IsParallelDefault(*args)

    IsParallelDefault = staticmethod(IsParallelDefault)

    def SetParallelDefault(*args):
        """
        * Setup multi-threading usage flag set by default in Discret() static method (thus applied only to Mesh Factories).

        :param theInParallel:
        :type theInParallel: bool
        :rtype: void

        """
        return _BRepMesh.BRepMesh_IncrementalMesh_SetParallelDefault(*args)

    SetParallelDefault = staticmethod(SetParallelDefault)

    def _kill_pointed(self):
        """_kill_pointed(BRepMesh_IncrementalMesh self)"""
        return _BRepMesh.BRepMesh_IncrementalMesh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMesh_IncrementalMesh self) -> Handle_BRepMesh_IncrementalMesh"""
        return _BRepMesh.BRepMesh_IncrementalMesh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMesh_IncrementalMesh.SetRelative = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_SetRelative, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.Relative = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_Relative, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.Update = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_Update, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.IsModified = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_IsModified, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.GetStatusFlags = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_GetStatusFlags, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.SetParallel = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_SetParallel, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.IsParallel = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_IsParallel, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh._kill_pointed = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh__kill_pointed, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh.GetHandle = new_instancemethod(_BRepMesh.BRepMesh_IncrementalMesh_GetHandle, None, BRepMesh_IncrementalMesh)
BRepMesh_IncrementalMesh_swigregister = _BRepMesh.BRepMesh_IncrementalMesh_swigregister
BRepMesh_IncrementalMesh_swigregister(BRepMesh_IncrementalMesh)

def BRepMesh_IncrementalMesh_Discret(*args):
    """
    * Plugin interface for the Mesh Factories.

    :param theShape:
    :type theShape: TopoDS_Shape &
    :param theDeflection:
    :type theDeflection: float
    :param theAngle:
    :type theAngle: float
    :param theAlgo:
    :type theAlgo: BRepMesh_PDiscretRoot &
    :rtype: int

    """
    return _BRepMesh.BRepMesh_IncrementalMesh_Discret(*args)

def BRepMesh_IncrementalMesh_IsParallelDefault(*args):
    """
    * Returns multi-threading usage flag set by default in Discret() static method (thus applied only to Mesh Factories).

    :rtype: bool

    """
    return _BRepMesh.BRepMesh_IncrementalMesh_IsParallelDefault(*args)

def BRepMesh_IncrementalMesh_SetParallelDefault(*args):
    """
    * Setup multi-threading usage flag set by default in Discret() static method (thus applied only to Mesh Factories).

    :param theInParallel:
    :type theInParallel: bool
    :rtype: void

    """
    return _BRepMesh.BRepMesh_IncrementalMesh_SetParallelDefault(*args)

class Handle_BRepMesh_IncrementalMesh(Handle_BRepMesh_DiscretRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMesh.Handle_BRepMesh_IncrementalMesh_swiginit(self, _BRepMesh.new_Handle_BRepMesh_IncrementalMesh(*args))
    DownCast = staticmethod(_BRepMesh.Handle_BRepMesh_IncrementalMesh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMesh_IncrementalMesh.Nullify = new_instancemethod(_BRepMesh.Handle_BRepMesh_IncrementalMesh_Nullify, None, Handle_BRepMesh_IncrementalMesh)
Handle_BRepMesh_IncrementalMesh.IsNull = new_instancemethod(_BRepMesh.Handle_BRepMesh_IncrementalMesh_IsNull, None, Handle_BRepMesh_IncrementalMesh)
Handle_BRepMesh_IncrementalMesh.GetObject = new_instancemethod(_BRepMesh.Handle_BRepMesh_IncrementalMesh_GetObject, None, Handle_BRepMesh_IncrementalMesh)
Handle_BRepMesh_IncrementalMesh._kill_pointed = new_instancemethod(_BRepMesh.Handle_BRepMesh_IncrementalMesh__kill_pointed, None, Handle_BRepMesh_IncrementalMesh)
Handle_BRepMesh_IncrementalMesh_swigregister = _BRepMesh.Handle_BRepMesh_IncrementalMesh_swigregister
Handle_BRepMesh_IncrementalMesh_swigregister(Handle_BRepMesh_IncrementalMesh)

def Handle_BRepMesh_IncrementalMesh_DownCast(AnObject):
    return _BRepMesh.Handle_BRepMesh_IncrementalMesh_DownCast(AnObject)
Handle_BRepMesh_IncrementalMesh_DownCast = _BRepMesh.Handle_BRepMesh_IncrementalMesh_DownCast



