# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntTools', [dirname(__file__)])
        except ImportError:
            import _IntTools
            return _IntTools
        if fp is not None:
            try:
                _mod = imp.load_module('_IntTools', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IntTools = swig_import_helper()
    del swig_import_helper
else:
    import _IntTools
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.BRepAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.BOPInt
import OCC.BOPCol
import OCC.GeomAPI
import OCC.Quantity
import OCC.Extrema
import OCC.Approx
import OCC.AppCont
import OCC.AppParCurves
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.Bnd
import OCC.IntSurf
import OCC.IntCurvesFace
import OCC.Geom2dHatch
import OCC.IntRes2d
import OCC.HatchGen
import OCC.Geom2dInt
import OCC.IntCurve
class inttools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        * returns the length of the edge;

        :param E:
        :type E: TopoDS_Edge &
        :rtype: float

        """
        return _IntTools.inttools_Length(*args)

    Length = staticmethod(Length)

    def RemoveIdenticalRoots(*args):
        """
        * Remove from the sequence aSeq the Roots that have values ti and tj such as |ti-tj] < anEpsT.

        :param aSeq:
        :type aSeq: IntTools_SequenceOfRoots &
        :param anEpsT:
        :type anEpsT: float
        :rtype: void

        """
        return _IntTools.inttools_RemoveIdenticalRoots(*args)

    RemoveIdenticalRoots = staticmethod(RemoveIdenticalRoots)

    def SortRoots(*args):
        """
        * Sort the sequence aSeq of the Roots to arrange the Roons in increasing order

        :param aSeq:
        :type aSeq: IntTools_SequenceOfRoots &
        :param anEpsT:
        :type anEpsT: float
        :rtype: void

        """
        return _IntTools.inttools_SortRoots(*args)

    SortRoots = staticmethod(SortRoots)

    def FindRootStates(*args):
        """
        * Find the states (before and after) for each Root from the sequence aSeq

        :param aSeq:
        :type aSeq: IntTools_SequenceOfRoots &
        :param anEpsNull:
        :type anEpsNull: float
        :rtype: void

        """
        return _IntTools.inttools_FindRootStates(*args)

    FindRootStates = staticmethod(FindRootStates)

    def Parameter(*args):
        """
        :param P:
        :type P: gp_Pnt
        :param Curve:
        :type Curve: Handle_Geom_Curve &
        :param aParm:
        :type aParm: float &
        :rtype: int

        """
        return _IntTools.inttools_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def GetRadius(*args):
        """
        :param C:
        :type C: BRepAdaptor_Curve &
        :param t1:
        :type t1: float
        :param t3:
        :type t3: float
        :param R:
        :type R: float &
        :rtype: int

        """
        return _IntTools.inttools_GetRadius(*args)

    GetRadius = staticmethod(GetRadius)

    def PrepareArgs(*args):
        """
        :param C:
        :type C: BRepAdaptor_Curve &
        :param tMax:
        :type tMax: float
        :param tMin:
        :type tMin: float
        :param Discret:
        :type Discret: int
        :param Deflect:
        :type Deflect: float
        :param anArgs:
        :type anArgs: IntTools_CArray1OfReal &
        :rtype: int

        """
        return _IntTools.inttools_PrepareArgs(*args)

    PrepareArgs = staticmethod(PrepareArgs)

    def __init__(self):
        _IntTools.inttools_swiginit(self, _IntTools.new_inttools())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


inttools._kill_pointed = new_instancemethod(_IntTools.inttools__kill_pointed, None, inttools)
inttools_swigregister = _IntTools.inttools_swigregister
inttools_swigregister(inttools)

def inttools_Length(*args):
    """
    * returns the length of the edge;

    :param E:
    :type E: TopoDS_Edge &
    :rtype: float

    """
    return _IntTools.inttools_Length(*args)

def inttools_RemoveIdenticalRoots(*args):
    """
    * Remove from the sequence aSeq the Roots that have values ti and tj such as |ti-tj] < anEpsT.

    :param aSeq:
    :type aSeq: IntTools_SequenceOfRoots &
    :param anEpsT:
    :type anEpsT: float
    :rtype: void

    """
    return _IntTools.inttools_RemoveIdenticalRoots(*args)

def inttools_SortRoots(*args):
    """
    * Sort the sequence aSeq of the Roots to arrange the Roons in increasing order

    :param aSeq:
    :type aSeq: IntTools_SequenceOfRoots &
    :param anEpsT:
    :type anEpsT: float
    :rtype: void

    """
    return _IntTools.inttools_SortRoots(*args)

def inttools_FindRootStates(*args):
    """
    * Find the states (before and after) for each Root from the sequence aSeq

    :param aSeq:
    :type aSeq: IntTools_SequenceOfRoots &
    :param anEpsNull:
    :type anEpsNull: float
    :rtype: void

    """
    return _IntTools.inttools_FindRootStates(*args)

def inttools_Parameter(*args):
    """
    :param P:
    :type P: gp_Pnt
    :param Curve:
    :type Curve: Handle_Geom_Curve &
    :param aParm:
    :type aParm: float &
    :rtype: int

    """
    return _IntTools.inttools_Parameter(*args)

def inttools_GetRadius(*args):
    """
    :param C:
    :type C: BRepAdaptor_Curve &
    :param t1:
    :type t1: float
    :param t3:
    :type t3: float
    :param R:
    :type R: float &
    :rtype: int

    """
    return _IntTools.inttools_GetRadius(*args)

def inttools_PrepareArgs(*args):
    """
    :param C:
    :type C: BRepAdaptor_Curve &
    :param tMax:
    :type tMax: float
    :param tMin:
    :type tMin: float
    :param Discret:
    :type Discret: int
    :param Deflect:
    :type Deflect: float
    :param anArgs:
    :type anArgs: IntTools_CArray1OfReal &
    :rtype: int

    """
    return _IntTools.inttools_PrepareArgs(*args)

class IntTools_Array1OfRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: IntTools_Range &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _IntTools.IntTools_Array1OfRange_swiginit(self, _IntTools.new_IntTools_Array1OfRange(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: IntTools_Range &
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRange_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRange_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_Array1OfRange_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_Array1OfRange &
        :rtype: IntTools_Array1OfRange

        """
        return _IntTools.IntTools_Array1OfRange_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_Array1OfRange &
        :rtype: IntTools_Array1OfRange

        """
        return _IntTools.IntTools_Array1OfRange_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRange_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRange_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRange_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: IntTools_Range &
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRange_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_Array1OfRange_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_Array1OfRange_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Array1OfRange.Init = new_instancemethod(_IntTools.IntTools_Array1OfRange_Init, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Destroy = new_instancemethod(_IntTools.IntTools_Array1OfRange_Destroy, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.IsAllocated = new_instancemethod(_IntTools.IntTools_Array1OfRange_IsAllocated, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Assign = new_instancemethod(_IntTools.IntTools_Array1OfRange_Assign, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Set = new_instancemethod(_IntTools.IntTools_Array1OfRange_Set, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Length = new_instancemethod(_IntTools.IntTools_Array1OfRange_Length, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Lower = new_instancemethod(_IntTools.IntTools_Array1OfRange_Lower, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Upper = new_instancemethod(_IntTools.IntTools_Array1OfRange_Upper, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.SetValue = new_instancemethod(_IntTools.IntTools_Array1OfRange_SetValue, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Value = new_instancemethod(_IntTools.IntTools_Array1OfRange_Value, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.ChangeValue = new_instancemethod(_IntTools.IntTools_Array1OfRange_ChangeValue, None, IntTools_Array1OfRange)
IntTools_Array1OfRange._kill_pointed = new_instancemethod(_IntTools.IntTools_Array1OfRange__kill_pointed, None, IntTools_Array1OfRange)
IntTools_Array1OfRange_swigregister = _IntTools.IntTools_Array1OfRange_swigregister
IntTools_Array1OfRange_swigregister(IntTools_Array1OfRange)

class IntTools_Array1OfRoots(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: IntTools_Root &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _IntTools.IntTools_Array1OfRoots_swiginit(self, _IntTools.new_IntTools_Array1OfRoots(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: IntTools_Root &
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRoots_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRoots_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_Array1OfRoots_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_Array1OfRoots &
        :rtype: IntTools_Array1OfRoots

        """
        return _IntTools.IntTools_Array1OfRoots_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_Array1OfRoots &
        :rtype: IntTools_Array1OfRoots

        """
        return _IntTools.IntTools_Array1OfRoots_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRoots_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRoots_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_Array1OfRoots_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: IntTools_Root &
        :rtype: None

        """
        return _IntTools.IntTools_Array1OfRoots_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_Array1OfRoots_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_Array1OfRoots_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Array1OfRoots.Init = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Init, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Destroy = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Destroy, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.IsAllocated = new_instancemethod(_IntTools.IntTools_Array1OfRoots_IsAllocated, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Assign = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Assign, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Set = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Set, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Length = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Length, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Lower = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Lower, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Upper = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Upper, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.SetValue = new_instancemethod(_IntTools.IntTools_Array1OfRoots_SetValue, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Value = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Value, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.ChangeValue = new_instancemethod(_IntTools.IntTools_Array1OfRoots_ChangeValue, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots._kill_pointed = new_instancemethod(_IntTools.IntTools_Array1OfRoots__kill_pointed, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots_swigregister = _IntTools.IntTools_Array1OfRoots_swigregister
IntTools_Array1OfRoots_swigregister(IntTools_Array1OfRoots)

class IntTools_BaseRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theDepth:
        :type theDepth: int
        :rtype: None

        """
        _IntTools.IntTools_BaseRangeSample_swiginit(self, _IntTools.new_IntTools_BaseRangeSample(*args))

    def SetDepth(self, *args):
        """
        :param theDepth:
        :type theDepth: int
        :rtype: None

        """
        return _IntTools.IntTools_BaseRangeSample_SetDepth(self, *args)


    def GetDepth(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_BaseRangeSample_GetDepth(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_BaseRangeSample.SetDepth = new_instancemethod(_IntTools.IntTools_BaseRangeSample_SetDepth, None, IntTools_BaseRangeSample)
IntTools_BaseRangeSample.GetDepth = new_instancemethod(_IntTools.IntTools_BaseRangeSample_GetDepth, None, IntTools_BaseRangeSample)
IntTools_BaseRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_BaseRangeSample__kill_pointed, None, IntTools_BaseRangeSample)
IntTools_BaseRangeSample_swigregister = _IntTools.IntTools_BaseRangeSample_swigregister
IntTools_BaseRangeSample_swigregister(IntTools_BaseRangeSample)

class IntTools_BeanFaceIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Initializes the algorithm Warning: The parts of the edge which are on the surface of the face and belong to the whole in the face (if there is) is considered as result

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :param theFace:
        :type theFace: TopoDS_Face &
        :rtype: None

        * Initializes the algorithm

        :param theCurve:
        :type theCurve: BRepAdaptor_Curve &
        :param theSurface:
        :type theSurface: BRepAdaptor_Surface &
        :param theBeanTolerance:
        :type theBeanTolerance: float
        :param theFaceTolerance:
        :type theFaceTolerance: float
        :rtype: None

        * Initializes the algorithm theUMinParameter, ... are used for optimization purposes

        :param theCurve:
        :type theCurve: BRepAdaptor_Curve &
        :param theSurface:
        :type theSurface: BRepAdaptor_Surface &
        :param theFirstParOnCurve:
        :type theFirstParOnCurve: float
        :param theLastParOnCurve:
        :type theLastParOnCurve: float
        :param theUMinParameter:
        :type theUMinParameter: float
        :param theUMaxParameter:
        :type theUMaxParameter: float
        :param theVMinParameter:
        :type theVMinParameter: float
        :param theVMaxParameter:
        :type theVMaxParameter: float
        :param theBeanTolerance:
        :type theBeanTolerance: float
        :param theFaceTolerance:
        :type theFaceTolerance: float
        :rtype: None

        """
        _IntTools.IntTools_BeanFaceIntersector_swiginit(self, _IntTools.new_IntTools_BeanFaceIntersector(*args))

    def Init(self, *args):
        """
        * Initializes the algorithm Warning: The parts of the edge which are on the surface of the face and belong to the whole in the face (if there is) is considered as result

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :param theFace:
        :type theFace: TopoDS_Face &
        :rtype: None

        * Initializes the algorithm

        :param theCurve:
        :type theCurve: BRepAdaptor_Curve &
        :param theSurface:
        :type theSurface: BRepAdaptor_Surface &
        :param theBeanTolerance:
        :type theBeanTolerance: float
        :param theFaceTolerance:
        :type theFaceTolerance: float
        :rtype: None

        * Initializes the algorithm theUMinParameter, ... are used for optimization purposes

        :param theCurve:
        :type theCurve: BRepAdaptor_Curve &
        :param theSurface:
        :type theSurface: BRepAdaptor_Surface &
        :param theFirstParOnCurve:
        :type theFirstParOnCurve: float
        :param theLastParOnCurve:
        :type theLastParOnCurve: float
        :param theUMinParameter:
        :type theUMinParameter: float
        :param theUMaxParameter:
        :type theUMaxParameter: float
        :param theVMinParameter:
        :type theVMinParameter: float
        :param theVMaxParameter:
        :type theVMaxParameter: float
        :param theBeanTolerance:
        :type theBeanTolerance: float
        :param theFaceTolerance:
        :type theFaceTolerance: float
        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_Init(self, *args)


    def SetContext(self, *args):
        """
        * Sets the intersecton context

        :param theContext:
        :type theContext: Handle_BOPInt_Context &
        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_SetContext(self, *args)


    def Context(self, *args):
        """
        * Gets the intersecton context

        :rtype: Handle_BOPInt_Context

        """
        return _IntTools.IntTools_BeanFaceIntersector_Context(self, *args)


    def SetBeanParameters(self, *args):
        """
        * Set restrictions for curve

        :param theFirstParOnCurve:
        :type theFirstParOnCurve: float
        :param theLastParOnCurve:
        :type theLastParOnCurve: float
        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_SetBeanParameters(self, *args)


    def SetSurfaceParameters(self, *args):
        """
        * Set restrictions for surface

        :param theUMinParameter:
        :type theUMinParameter: float
        :param theUMaxParameter:
        :type theUMaxParameter: float
        :param theVMinParameter:
        :type theVMinParameter: float
        :param theVMaxParameter:
        :type theVMaxParameter: float
        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_SetSurfaceParameters(self, *args)


    def Perform(self, *args):
        """
        * Launches the algorithm

        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_BeanFaceIntersector_IsDone(self, *args)


    def Result(self, *args):
        """
        :rtype: IntTools_SequenceOfRanges

        :param theResults:
        :type theResults: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_BeanFaceIntersector_Result(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_BeanFaceIntersector.Init = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Init, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetContext = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetContext, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Context = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Context, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetBeanParameters = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetBeanParameters, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetSurfaceParameters = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetSurfaceParameters, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Perform = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Perform, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.IsDone = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_IsDone, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Result = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Result, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector._kill_pointed = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector__kill_pointed, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector_swigregister = _IntTools.IntTools_BeanFaceIntersector_swigregister
IntTools_BeanFaceIntersector_swigregister(IntTools_BeanFaceIntersector)

class IntTools_CommonPrt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Copy constructor

        :param aCPrt:
        :type aCPrt: IntTools_CommonPrt &
        :rtype: None

        """
        _IntTools.IntTools_CommonPrt_swiginit(self, _IntTools.new_IntTools_CommonPrt(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_CommonPrt &
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_CommonPrt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_CommonPrt &
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_CommonPrt_Set(self, *args)


    def SetEdge1(self, *args):
        """
        * Sets the first edge.

        :param anE:
        :type anE: TopoDS_Edge &
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetEdge1(self, *args)


    def SetEdge2(self, *args):
        """
        * Sets the second edge.

        :param anE:
        :type anE: TopoDS_Edge &
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetEdge2(self, *args)


    def SetType(self, *args):
        """
        * Sets the type of the common part Vertex or Edge

        :param aType:
        :type aType: TopAbs_ShapeEnum
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetType(self, *args)


    def SetRange1(self, *args):
        """
        * Sets the range of first edge.

        :param aR:
        :type aR: IntTools_Range &
        :rtype: None

        * Sets the range of first edge.

        :param tf:
        :type tf: float
        :param tl:
        :type tl: float
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetRange1(self, *args)


    def AppendRange2(self, *args):
        """
        * Appends the range of second edge.

        :param aR:
        :type aR: IntTools_Range &
        :rtype: None

        * Appends the range of second edge.

        :param tf:
        :type tf: float
        :param tl:
        :type tl: float
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_AppendRange2(self, *args)


    def SetVertexParameter1(self, *args):
        """
        * Sets a parameter of first vertex

        :param tV:
        :type tV: float
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetVertexParameter1(self, *args)


    def SetVertexParameter2(self, *args):
        """
        * Sets a parameter of second vertex

        :param tV:
        :type tV: float
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetVertexParameter2(self, *args)


    def Edge1(self, *args):
        """
        * Returns the first edge.

        :rtype: TopoDS_Edge

        """
        return _IntTools.IntTools_CommonPrt_Edge1(self, *args)


    def Edge2(self, *args):
        """
        * Returns the second edge

        :rtype: TopoDS_Edge

        """
        return _IntTools.IntTools_CommonPrt_Edge2(self, *args)


    def Type(self, *args):
        """
        * Returns the type of the common part

        :rtype: TopAbs_ShapeEnum

        """
        return _IntTools.IntTools_CommonPrt_Type(self, *args)


    def Range1(self, *args):
        """
        * Returns the range of first edge

        :rtype: IntTools_Range

        * Returns the range of first edge.

        :param tf:
        :type tf: float &
        :param tl:
        :type tl: float &
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_Range1(self, *args)


    def Ranges2(self, *args):
        """
        * Returns the ranges of second edge.

        :rtype: IntTools_SequenceOfRanges

        """
        return _IntTools.IntTools_CommonPrt_Ranges2(self, *args)


    def ChangeRanges2(self, *args):
        """
        * Returns the ranges of second edge.

        :rtype: IntTools_SequenceOfRanges

        """
        return _IntTools.IntTools_CommonPrt_ChangeRanges2(self, *args)


    def VertexParameter1(self, *args):
        """
        * Returns parameter of first vertex

        :rtype: float

        """
        return _IntTools.IntTools_CommonPrt_VertexParameter1(self, *args)


    def VertexParameter2(self, *args):
        """
        * Returns parameter of second vertex

        :rtype: float

        """
        return _IntTools.IntTools_CommonPrt_VertexParameter2(self, *args)


    def Copy(self, *args):
        """
        * Copies me to anOther

        :param anOther:
        :type anOther: IntTools_CommonPrt &
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_Copy(self, *args)


    def AllNullFlag(self, *args):
        """
        * Modifier

        :rtype: bool

        """
        return _IntTools.IntTools_CommonPrt_AllNullFlag(self, *args)


    def SetAllNullFlag(self, *args):
        """
        * Selector

        :param aFlag:
        :type aFlag: bool
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetAllNullFlag(self, *args)


    def SetBoundingPoints(self, *args):
        """
        * Modifier

        :param aP1:
        :type aP1: gp_Pnt
        :param aP2:
        :type aP2: gp_Pnt
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_SetBoundingPoints(self, *args)


    def BoundingPoints(self, *args):
        """
        * Selector

        :param aP1:
        :type aP1: gp_Pnt
        :param aP2:
        :type aP2: gp_Pnt
        :rtype: None

        """
        return _IntTools.IntTools_CommonPrt_BoundingPoints(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_CommonPrt.Assign = new_instancemethod(_IntTools.IntTools_CommonPrt_Assign, None, IntTools_CommonPrt)
IntTools_CommonPrt.Set = new_instancemethod(_IntTools.IntTools_CommonPrt_Set, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetEdge1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetEdge1, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetEdge2 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetEdge2, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetType = new_instancemethod(_IntTools.IntTools_CommonPrt_SetType, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetRange1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetRange1, None, IntTools_CommonPrt)
IntTools_CommonPrt.AppendRange2 = new_instancemethod(_IntTools.IntTools_CommonPrt_AppendRange2, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetVertexParameter1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetVertexParameter1, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetVertexParameter2 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetVertexParameter2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Edge1 = new_instancemethod(_IntTools.IntTools_CommonPrt_Edge1, None, IntTools_CommonPrt)
IntTools_CommonPrt.Edge2 = new_instancemethod(_IntTools.IntTools_CommonPrt_Edge2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Type = new_instancemethod(_IntTools.IntTools_CommonPrt_Type, None, IntTools_CommonPrt)
IntTools_CommonPrt.Range1 = new_instancemethod(_IntTools.IntTools_CommonPrt_Range1, None, IntTools_CommonPrt)
IntTools_CommonPrt.Ranges2 = new_instancemethod(_IntTools.IntTools_CommonPrt_Ranges2, None, IntTools_CommonPrt)
IntTools_CommonPrt.ChangeRanges2 = new_instancemethod(_IntTools.IntTools_CommonPrt_ChangeRanges2, None, IntTools_CommonPrt)
IntTools_CommonPrt.VertexParameter1 = new_instancemethod(_IntTools.IntTools_CommonPrt_VertexParameter1, None, IntTools_CommonPrt)
IntTools_CommonPrt.VertexParameter2 = new_instancemethod(_IntTools.IntTools_CommonPrt_VertexParameter2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Copy = new_instancemethod(_IntTools.IntTools_CommonPrt_Copy, None, IntTools_CommonPrt)
IntTools_CommonPrt.AllNullFlag = new_instancemethod(_IntTools.IntTools_CommonPrt_AllNullFlag, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetAllNullFlag = new_instancemethod(_IntTools.IntTools_CommonPrt_SetAllNullFlag, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetBoundingPoints = new_instancemethod(_IntTools.IntTools_CommonPrt_SetBoundingPoints, None, IntTools_CommonPrt)
IntTools_CommonPrt.BoundingPoints = new_instancemethod(_IntTools.IntTools_CommonPrt_BoundingPoints, None, IntTools_CommonPrt)
IntTools_CommonPrt._kill_pointed = new_instancemethod(_IntTools.IntTools_CommonPrt__kill_pointed, None, IntTools_CommonPrt)
IntTools_CommonPrt_swigregister = _IntTools.IntTools_CommonPrt_swigregister
IntTools_CommonPrt_swigregister(IntTools_CommonPrt)

class IntTools_Compare(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes me by tolerance

        :param aTol:
        :type aTol: float
        :rtype: None

        """
        _IntTools.IntTools_Compare_swiginit(self, _IntTools.new_IntTools_Compare(*args))

    def IsLower(self, *args):
        """
        * Returns True if <Left> is lower than <Right>.

        :param Left:
        :type Left: IntTools_Root &
        :param Right:
        :type Right: IntTools_Root &
        :rtype: bool

        """
        return _IntTools.IntTools_Compare_IsLower(self, *args)


    def IsGreater(self, *args):
        """
        * Returns True if <Left> is greater than <Right>.

        :param Left:
        :type Left: IntTools_Root &
        :param Right:
        :type Right: IntTools_Root &
        :rtype: bool

        """
        return _IntTools.IntTools_Compare_IsGreater(self, *args)


    def IsEqual(self, *args):
        """
        * Returns True when <Right> and <Left> are equal.

        :param Left:
        :type Left: IntTools_Root &
        :param Right:
        :type Right: IntTools_Root &
        :rtype: bool

        """
        return _IntTools.IntTools_Compare_IsEqual(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Compare.IsLower = new_instancemethod(_IntTools.IntTools_Compare_IsLower, None, IntTools_Compare)
IntTools_Compare.IsGreater = new_instancemethod(_IntTools.IntTools_Compare_IsGreater, None, IntTools_Compare)
IntTools_Compare.IsEqual = new_instancemethod(_IntTools.IntTools_Compare_IsEqual, None, IntTools_Compare)
IntTools_Compare._kill_pointed = new_instancemethod(_IntTools.IntTools_Compare__kill_pointed, None, IntTools_Compare)
IntTools_Compare_swigregister = _IntTools.IntTools_Compare_swigregister
IntTools_Compare_swigregister(IntTools_Compare)

class IntTools_CompareRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes me by tolerance

        :param aTol:
        :type aTol: float
        :rtype: None

        """
        _IntTools.IntTools_CompareRange_swiginit(self, _IntTools.new_IntTools_CompareRange(*args))

    def IsLower(self, *args):
        """
        * Returns True if <Left> is lower than <Right>.

        :param Left:
        :type Left: IntTools_Range &
        :param Right:
        :type Right: IntTools_Range &
        :rtype: bool

        """
        return _IntTools.IntTools_CompareRange_IsLower(self, *args)


    def IsGreater(self, *args):
        """
        * Returns True if <Left> is greater than <Right>.

        :param Left:
        :type Left: IntTools_Range &
        :param Right:
        :type Right: IntTools_Range &
        :rtype: bool

        """
        return _IntTools.IntTools_CompareRange_IsGreater(self, *args)


    def IsEqual(self, *args):
        """
        * Returns True when <Right> and <Left> are equal.

        :param Left:
        :type Left: IntTools_Range &
        :param Right:
        :type Right: IntTools_Range &
        :rtype: bool

        """
        return _IntTools.IntTools_CompareRange_IsEqual(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_CompareRange.IsLower = new_instancemethod(_IntTools.IntTools_CompareRange_IsLower, None, IntTools_CompareRange)
IntTools_CompareRange.IsGreater = new_instancemethod(_IntTools.IntTools_CompareRange_IsGreater, None, IntTools_CompareRange)
IntTools_CompareRange.IsEqual = new_instancemethod(_IntTools.IntTools_CompareRange_IsEqual, None, IntTools_CompareRange)
IntTools_CompareRange._kill_pointed = new_instancemethod(_IntTools.IntTools_CompareRange__kill_pointed, None, IntTools_CompareRange)
IntTools_CompareRange_swigregister = _IntTools.IntTools_CompareRange_swigregister
IntTools_CompareRange_swigregister(IntTools_CompareRange)

class IntTools_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes me by a 3d curve and two 2d curves

        :param Curve3d:
        :type Curve3d: Handle_Geom_Curve &
        :param FirstCurve2d:
        :type FirstCurve2d: Handle_Geom2d_Curve &
        :param SecondCurve2d:
        :type SecondCurve2d: Handle_Geom2d_Curve &
        :rtype: None

        """
        _IntTools.IntTools_Curve_swiginit(self, _IntTools.new_IntTools_Curve(*args))

    def SetCurves(self, *args):
        """
        * Modifier

        :param Curve3d:
        :type Curve3d: Handle_Geom_Curve &
        :param FirstCurve2d:
        :type FirstCurve2d: Handle_Geom2d_Curve &
        :param SecondCurve2d:
        :type SecondCurve2d: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _IntTools.IntTools_Curve_SetCurves(self, *args)


    def SetCurve(self, *args):
        """
        * Modifier

        :param Curve3d:
        :type Curve3d: Handle_Geom_Curve &
        :rtype: None

        """
        return _IntTools.IntTools_Curve_SetCurve(self, *args)


    def SetFirstCurve2d(self, *args):
        """
        * Modifier

        :param FirstCurve2d:
        :type FirstCurve2d: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _IntTools.IntTools_Curve_SetFirstCurve2d(self, *args)


    def SetSecondCurve2d(self, *args):
        """
        * Modifier

        :param SecondCurve2d:
        :type SecondCurve2d: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _IntTools.IntTools_Curve_SetSecondCurve2d(self, *args)


    def Curve(self, *args):
        """
        * Selector

        :rtype: Handle_Geom_Curve

        """
        return _IntTools.IntTools_Curve_Curve(self, *args)


    def FirstCurve2d(self, *args):
        """
        * Selector

        :rtype: Handle_Geom2d_Curve

        """
        return _IntTools.IntTools_Curve_FirstCurve2d(self, *args)


    def SecondCurve2d(self, *args):
        """
        * Selector

        :rtype: Handle_Geom2d_Curve

        """
        return _IntTools.IntTools_Curve_SecondCurve2d(self, *args)


    def HasBounds(self, *args):
        """
        * Returns true if 3d curve is BoundedCurve from Geom

        :rtype: bool

        """
        return _IntTools.IntTools_Curve_HasBounds(self, *args)


    def Bounds(self, *args):
        """
        * Returns boundary parameters and corresponded 3d point. Warning: If HasBounds returns false the returned parameters are equal to zero.

        :param aT1:
        :type aT1: float &
        :param aT2:
        :type aT2: float &
        :param aP1:
        :type aP1: gp_Pnt
        :param aP2:
        :type aP2: gp_Pnt
        :rtype: None

        """
        return _IntTools.IntTools_Curve_Bounds(self, *args)


    def D0(self, *args):
        """
        * Computes 3d point corresponded to parameter aT1 Returns true if given parameter aT1 is inside the boundaries of the curve

        :param aT1:
        :type aT1: float &
        :param aP1:
        :type aP1: gp_Pnt
        :rtype: bool

        """
        return _IntTools.IntTools_Curve_D0(self, *args)


    def Type(self, *args):
        """
        * Returns the type of 3d curve

        :rtype: GeomAbs_CurveType

        """
        return _IntTools.IntTools_Curve_Type(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Curve.SetCurves = new_instancemethod(_IntTools.IntTools_Curve_SetCurves, None, IntTools_Curve)
IntTools_Curve.SetCurve = new_instancemethod(_IntTools.IntTools_Curve_SetCurve, None, IntTools_Curve)
IntTools_Curve.SetFirstCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SetFirstCurve2d, None, IntTools_Curve)
IntTools_Curve.SetSecondCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SetSecondCurve2d, None, IntTools_Curve)
IntTools_Curve.Curve = new_instancemethod(_IntTools.IntTools_Curve_Curve, None, IntTools_Curve)
IntTools_Curve.FirstCurve2d = new_instancemethod(_IntTools.IntTools_Curve_FirstCurve2d, None, IntTools_Curve)
IntTools_Curve.SecondCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SecondCurve2d, None, IntTools_Curve)
IntTools_Curve.HasBounds = new_instancemethod(_IntTools.IntTools_Curve_HasBounds, None, IntTools_Curve)
IntTools_Curve.Bounds = new_instancemethod(_IntTools.IntTools_Curve_Bounds, None, IntTools_Curve)
IntTools_Curve.D0 = new_instancemethod(_IntTools.IntTools_Curve_D0, None, IntTools_Curve)
IntTools_Curve.Type = new_instancemethod(_IntTools.IntTools_Curve_Type, None, IntTools_Curve)
IntTools_Curve._kill_pointed = new_instancemethod(_IntTools.IntTools_Curve__kill_pointed, None, IntTools_Curve)
IntTools_Curve_swigregister = _IntTools.IntTools_Curve_swigregister
IntTools_Curve_swigregister(IntTools_Curve)

class IntTools_CurveRangeLocalizeData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theNbSample:
        :type theNbSample: int
        :param theMinRange:
        :type theMinRange: float
        :rtype: None

        """
        _IntTools.IntTools_CurveRangeLocalizeData_swiginit(self, _IntTools.new_IntTools_CurveRangeLocalizeData(*args))

    def GetNbSample(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_GetNbSample(self, *args)


    def GetMinRange(self, *args):
        """
        :rtype: float

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_GetMinRange(self, *args)


    def AddOutRange(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_CurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_AddOutRange(self, *args)


    def AddBox(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_CurveRangeSample &
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_AddBox(self, *args)


    def FindBox(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_CurveRangeSample &
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: bool

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_FindBox(self, *args)


    def IsRangeOut(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_IsRangeOut(self, *args)


    def ListRangeOut(self, *args):
        """
        :param theList:
        :type theList: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_CurveRangeLocalizeData_ListRangeOut(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_CurveRangeLocalizeData.GetNbSample = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_GetNbSample, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.GetMinRange = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_GetMinRange, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.AddOutRange = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_AddOutRange, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.AddBox = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_AddBox, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.FindBox = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_FindBox, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.IsRangeOut = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_IsRangeOut, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.ListRangeOut = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_ListRangeOut, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData._kill_pointed = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData__kill_pointed, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData_swigregister = _IntTools.IntTools_CurveRangeLocalizeData_swigregister
IntTools_CurveRangeLocalizeData_swigregister(IntTools_CurveRangeLocalizeData)

class IntTools_DataMapIteratorOfDataMapOfCurveSampleBox(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: IntTools_DataMapOfCurveSampleBox &
        :rtype: None

        """
        _IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapIteratorOfDataMapOfCurveSampleBox(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: IntTools_DataMapOfCurveSampleBox &
        :rtype: None

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapIteratorOfDataMapOfCurveSampleBox.Initialize = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Initialize, None, IntTools_DataMapIteratorOfDataMapOfCurveSampleBox)
IntTools_DataMapIteratorOfDataMapOfCurveSampleBox.Key = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Key, None, IntTools_DataMapIteratorOfDataMapOfCurveSampleBox)
IntTools_DataMapIteratorOfDataMapOfCurveSampleBox.Value = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_Value, None, IntTools_DataMapIteratorOfDataMapOfCurveSampleBox)
IntTools_DataMapIteratorOfDataMapOfCurveSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox__kill_pointed, None, IntTools_DataMapIteratorOfDataMapOfCurveSampleBox)
IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_swigregister = _IntTools.IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_swigregister
IntTools_DataMapIteratorOfDataMapOfCurveSampleBox_swigregister(IntTools_DataMapIteratorOfDataMapOfCurveSampleBox)

class IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: IntTools_DataMapOfSurfaceSampleBox &
        :rtype: None

        """
        _IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: IntTools_DataMapOfSurfaceSampleBox &
        :rtype: None

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox.Initialize = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Initialize, None, IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox)
IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox.Key = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Key, None, IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox)
IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox.Value = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_Value, None, IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox)
IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox__kill_pointed, None, IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox)
IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_swigregister = _IntTools.IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_swigregister
IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox_swigregister(IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox)

class IntTools_DataMapNodeOfDataMapOfCurveSampleBox(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :param I:
        :type I: Bnd_Box &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapNodeOfDataMapOfCurveSampleBox(*args))

    def Key(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_DataMapNodeOfDataMapOfCurveSampleBox self)"""
        return _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_DataMapNodeOfDataMapOfCurveSampleBox self) -> Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox"""
        return _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapNodeOfDataMapOfCurveSampleBox.Key = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_Key, None, IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
IntTools_DataMapNodeOfDataMapOfCurveSampleBox.Value = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_Value, None, IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
IntTools_DataMapNodeOfDataMapOfCurveSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox__kill_pointed, None, IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
IntTools_DataMapNodeOfDataMapOfCurveSampleBox.GetHandle = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_GetHandle, None, IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister = _IntTools.IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister
IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister(IntTools_DataMapNodeOfDataMapOfCurveSampleBox)

class Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swiginit(self, _IntTools.new_Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox.Nullify = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_Nullify, None, Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox.IsNull = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_IsNull, None, Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox.GetObject = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_GetObject, None, Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox__kill_pointed, None, Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister = _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_swigregister(Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox)

def Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_DownCast(AnObject):
    return _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_DownCast(AnObject)
Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_DownCast = _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfCurveSampleBox_DownCast

class IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :param I:
        :type I: Bnd_Box &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox(*args))

    def Key(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox self)"""
        return _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox self) -> Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox"""
        return _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.Key = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_Key, None, IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.Value = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_Value, None, IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox__kill_pointed, None, IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.GetHandle = new_instancemethod(_IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_GetHandle, None, IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister = _IntTools.IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister
IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister(IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)

class Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swiginit(self, _IntTools.new_Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.Nullify = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_Nullify, None, Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.IsNull = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_IsNull, None, Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.GetObject = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_GetObject, None, Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox__kill_pointed, None, Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister = _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_swigregister(Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox)

def Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_DownCast(AnObject):
    return _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_DownCast(AnObject)
Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_DownCast = _IntTools.Handle_IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox_DownCast

class IntTools_DataMapOfCurveSampleBox(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _IntTools.IntTools_DataMapOfCurveSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapOfCurveSampleBox(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_DataMapOfCurveSampleBox &
        :rtype: IntTools_DataMapOfCurveSampleBox

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_DataMapOfCurveSampleBox &
        :rtype: IntTools_DataMapOfCurveSampleBox

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :param I:
        :type I: Bnd_Box &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_DataMapOfCurveSampleBox_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_DataMapOfCurveSampleBox self)"""
        return _IntTools.IntTools_DataMapOfCurveSampleBox__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapOfCurveSampleBox.Assign = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Assign, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Set = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Set, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ReSize = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ReSize, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Clear = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Clear, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Bind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Bind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.IsBound = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_IsBound, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.UnBind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_UnBind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Find = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Find, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ChangeFind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ChangeFind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Find1 = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Find1, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ChangeFind1 = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ChangeFind1, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox__kill_pointed, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox_swigregister = _IntTools.IntTools_DataMapOfCurveSampleBox_swigregister
IntTools_DataMapOfCurveSampleBox_swigregister(IntTools_DataMapOfCurveSampleBox)

class IntTools_DataMapOfSurfaceSampleBox(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _IntTools.IntTools_DataMapOfSurfaceSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapOfSurfaceSampleBox(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_DataMapOfSurfaceSampleBox &
        :rtype: IntTools_DataMapOfSurfaceSampleBox

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_DataMapOfSurfaceSampleBox &
        :rtype: IntTools_DataMapOfSurfaceSampleBox

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :param I:
        :type I: Bnd_Box &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_DataMapOfSurfaceSampleBox self)"""
        return _IntTools.IntTools_DataMapOfSurfaceSampleBox__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_DataMapOfSurfaceSampleBox.Assign = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Assign, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Set = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Set, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ReSize = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ReSize, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Clear = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Clear, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Bind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Bind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.IsBound = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_IsBound, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.UnBind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_UnBind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Find = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Find, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ChangeFind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeFind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Find1 = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Find1, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ChangeFind1 = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeFind1, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox._kill_pointed = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox__kill_pointed, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox_swigregister = _IntTools.IntTools_DataMapOfSurfaceSampleBox_swigregister
IntTools_DataMapOfSurfaceSampleBox_swigregister(IntTools_DataMapOfSurfaceSampleBox)

class IntTools_EdgeEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor

        :param theEdge1:
        :type theEdge1: TopoDS_Edge &
        :param theEdge2:
        :type theEdge2: TopoDS_Edge &
        :rtype: None

        * Contructor

        :param theEdge1:
        :type theEdge1: TopoDS_Edge &
        :param aT11:
        :type aT11: float
        :param aT12:
        :type aT12: float
        :param theEdge2:
        :type theEdge2: TopoDS_Edge &
        :param aT21:
        :type aT21: float
        :param aT22:
        :type aT22: float
        :rtype: None

        """
        _IntTools.IntTools_EdgeEdge_swiginit(self, _IntTools.new_IntTools_EdgeEdge(*args))

    def SetEdge1(self, *args):
        """
        * Sets the first edge

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :rtype: None

        * Sets the first edge and its range

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :param aT1:
        :type aT1: float
        :param aT2:
        :type aT2: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeEdge_SetEdge1(self, *args)


    def SetRange1(self, *args):
        """
        * Sets the range for the first edge

        :param theRange1:
        :type theRange1: IntTools_Range &
        :rtype: None

        * Sets the range for the first edge

        :param aT1:
        :type aT1: float
        :param aT2:
        :type aT2: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeEdge_SetRange1(self, *args)


    def SetEdge2(self, *args):
        """
        * Sets the second edge

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :rtype: None

        * Sets the first edge and its range

        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :param aT1:
        :type aT1: float
        :param aT2:
        :type aT2: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeEdge_SetEdge2(self, *args)


    def SetRange2(self, *args):
        """
        * Sets the range for the second edge

        :param theRange:
        :type theRange: IntTools_Range &
        :rtype: None

        * Sets the range for the second edge

        :param aT1:
        :type aT1: float
        :param aT2:
        :type aT2: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeEdge_SetRange2(self, *args)


    def Perform(self, *args):
        """
        * Performs the intersection between edges

        :rtype: None

        """
        return _IntTools.IntTools_EdgeEdge_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns True if common part(s) is(are) found

        :rtype: bool

        """
        return _IntTools.IntTools_EdgeEdge_IsDone(self, *args)


    def CommonParts(self, *args):
        """
        * Returns common parts

        :rtype: IntTools_SequenceOfCommonPrts

        """
        return _IntTools.IntTools_EdgeEdge_CommonParts(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_EdgeEdge.SetEdge1 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetEdge1, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetRange1 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetRange1, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetEdge2 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetEdge2, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetRange2 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetRange2, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.Perform = new_instancemethod(_IntTools.IntTools_EdgeEdge_Perform, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.IsDone = new_instancemethod(_IntTools.IntTools_EdgeEdge_IsDone, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.CommonParts = new_instancemethod(_IntTools.IntTools_EdgeEdge_CommonParts, None, IntTools_EdgeEdge)
IntTools_EdgeEdge._kill_pointed = new_instancemethod(_IntTools.IntTools_EdgeEdge__kill_pointed, None, IntTools_EdgeEdge)
IntTools_EdgeEdge_swigregister = _IntTools.IntTools_EdgeEdge_swigregister
IntTools_EdgeEdge_swigregister(IntTools_EdgeEdge)

class IntTools_EdgeFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty Constructor

        :rtype: None

        """
        _IntTools.IntTools_EdgeFace_swiginit(self, _IntTools.new_IntTools_EdgeFace(*args))

    def SetEdge(self, *args):
        """
        * Initializes algorithm by the edge anEdge

        :param anEdge:
        :type anEdge: TopoDS_Edge &
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetEdge(self, *args)


    def SetTolE(self, *args):
        """
        * Initializes algorithm by edge tolerance

        :param aTolEdge1:
        :type aTolEdge1: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetTolE(self, *args)


    def SetFace(self, *args):
        """
        * Initializes algorithm by the face aFace

        :param aFace:
        :type aFace: TopoDS_Face &
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetFace(self, *args)


    def SetTolF(self, *args):
        """
        * Initializes algorithm by face tolerance

        :param aTolFace:
        :type aTolFace: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetTolF(self, *args)


    def SetDiscretize(self, *args):
        """
        * Initializes algorithm by discretization value

        :param aDiscret:
        :type aDiscret: int
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetDiscretize(self, *args)


    def SetDeflection(self, *args):
        """
        * Initializes algorithm by deflection value

        :param aDeflection:
        :type aDeflection: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetDeflection(self, *args)


    def SetEpsilonT(self, *args):
        """
        * Initializes algorithm by parameter tolerance

        :param anEpsT:
        :type anEpsT: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetEpsilonT(self, *args)


    def SetEpsilonNull(self, *args):
        """
        * Initializes algorithm by distance tolerance

        :param anEpsNull:
        :type anEpsNull: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetEpsilonNull(self, *args)


    def SetRange(self, *args):
        """
        * Sets boundaries for edge. The algorithm processes edge inside these boundaries.

        :param aRange:
        :type aRange: IntTools_Range &
        :rtype: None

        * Sets boundaries for edge. The algorithm processes edge inside these boundaries.

        :param aFirst:
        :type aFirst: float
        :param aLast:
        :type aLast: float
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetRange(self, *args)


    def SetContext(self, *args):
        """
        * Sets the intersecton context

        :param theContext:
        :type theContext: Handle_BOPInt_Context &
        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_SetContext(self, *args)


    def Context(self, *args):
        """
        * Gets the intersecton context

        :rtype: Handle_BOPInt_Context

        """
        return _IntTools.IntTools_EdgeFace_Context(self, *args)


    def Perform(self, *args):
        """
        * Launches the process

        :rtype: None

        """
        return _IntTools.IntTools_EdgeFace_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns true if computation was done successfully, otherwise returns false

        :rtype: bool

        """
        return _IntTools.IntTools_EdgeFace_IsDone(self, *args)


    def ErrorStatus(self, *args):
        """
        * Returns code of completion 0 - means successful completion 1 - the process was not started 2,3,4,5 - invalid source data for the algorithm 6 - discretization failed 7 - no projectable ranges found 11 - distance computing error

        :rtype: int

        """
        return _IntTools.IntTools_EdgeFace_ErrorStatus(self, *args)


    def CommonParts(self, *args):
        """
        * Returns results

        :rtype: IntTools_SequenceOfCommonPrts

        """
        return _IntTools.IntTools_EdgeFace_CommonParts(self, *args)


    def Range(self, *args):
        """
        * Returns boundaries for edge

        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_EdgeFace_Range(self, *args)


    def IsEqDistance(*args):
        """
        * 

        :param aP:
        :type aP: gp_Pnt
        :param aS:
        :type aS: BRepAdaptor_Surface &
        :param aT:
        :type aT: float
        :param aD:
        :type aD: float &
        :rtype: bool

        """
        return _IntTools.IntTools_EdgeFace_IsEqDistance(*args)

    IsEqDistance = staticmethod(IsEqDistance)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_EdgeFace.SetEdge = new_instancemethod(_IntTools.IntTools_EdgeFace_SetEdge, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetTolE = new_instancemethod(_IntTools.IntTools_EdgeFace_SetTolE, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetFace = new_instancemethod(_IntTools.IntTools_EdgeFace_SetFace, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetTolF = new_instancemethod(_IntTools.IntTools_EdgeFace_SetTolF, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetDiscretize = new_instancemethod(_IntTools.IntTools_EdgeFace_SetDiscretize, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetDeflection = new_instancemethod(_IntTools.IntTools_EdgeFace_SetDeflection, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetEpsilonT = new_instancemethod(_IntTools.IntTools_EdgeFace_SetEpsilonT, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetEpsilonNull = new_instancemethod(_IntTools.IntTools_EdgeFace_SetEpsilonNull, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetRange = new_instancemethod(_IntTools.IntTools_EdgeFace_SetRange, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetContext = new_instancemethod(_IntTools.IntTools_EdgeFace_SetContext, None, IntTools_EdgeFace)
IntTools_EdgeFace.Context = new_instancemethod(_IntTools.IntTools_EdgeFace_Context, None, IntTools_EdgeFace)
IntTools_EdgeFace.Perform = new_instancemethod(_IntTools.IntTools_EdgeFace_Perform, None, IntTools_EdgeFace)
IntTools_EdgeFace.IsDone = new_instancemethod(_IntTools.IntTools_EdgeFace_IsDone, None, IntTools_EdgeFace)
IntTools_EdgeFace.ErrorStatus = new_instancemethod(_IntTools.IntTools_EdgeFace_ErrorStatus, None, IntTools_EdgeFace)
IntTools_EdgeFace.CommonParts = new_instancemethod(_IntTools.IntTools_EdgeFace_CommonParts, None, IntTools_EdgeFace)
IntTools_EdgeFace.Range = new_instancemethod(_IntTools.IntTools_EdgeFace_Range, None, IntTools_EdgeFace)
IntTools_EdgeFace._kill_pointed = new_instancemethod(_IntTools.IntTools_EdgeFace__kill_pointed, None, IntTools_EdgeFace)
IntTools_EdgeFace_swigregister = _IntTools.IntTools_EdgeFace_swigregister
IntTools_EdgeFace_swigregister(IntTools_EdgeFace)

def IntTools_EdgeFace_IsEqDistance(*args):
    """
    * 

    :param aP:
    :type aP: gp_Pnt
    :param aS:
    :type aS: BRepAdaptor_Surface &
    :param aT:
    :type aT: float
    :param aD:
    :type aD: float &
    :rtype: bool

    """
    return _IntTools.IntTools_EdgeFace_IsEqDistance(*args)

class IntTools_FClass2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes algorithm by the face F and tolerance Tol

        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _IntTools.IntTools_FClass2d_swiginit(self, _IntTools.new_IntTools_FClass2d(*args))

    def Init(self, *args):
        """
        * Initializes algorithm by the face F and tolerance Tol

        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _IntTools.IntTools_FClass2d_Init(self, *args)


    def PerformInfinitePoint(self, *args):
        """
        * Returns state of infinite 2d point relatively to (0, 0)

        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_FClass2d_PerformInfinitePoint(self, *args)


    def Perform(self, *args):
        """
        * Returns state of the 2d point Puv. If RecadreOnPeriodic is true (defalut value), for the periodic surface 2d point, adjusted to period, is classified.

        :param Puv:
        :type Puv: gp_Pnt2d
        :param RecadreOnPeriodic: default value is Standard_True
        :type RecadreOnPeriodic: bool
        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_FClass2d_Perform(self, *args)


    def Destroy(self, *args):
        """
        * Destructor

        :rtype: None

        """
        return _IntTools.IntTools_FClass2d_Destroy(self, *args)


    def TestOnRestriction(self, *args):
        """
        * Test a point with +- an offset (Tol) and returns On if some points are OUT an some are IN (Caution: Internal use . see the code for more details)

        :param Puv:
        :type Puv: gp_Pnt2d
        :param Tol:
        :type Tol: float
        :param RecadreOnPeriodic: default value is Standard_True
        :type RecadreOnPeriodic: bool
        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_FClass2d_TestOnRestriction(self, *args)


    def IsHole(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_FClass2d_IsHole(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_FClass2d.Init = new_instancemethod(_IntTools.IntTools_FClass2d_Init, None, IntTools_FClass2d)
IntTools_FClass2d.PerformInfinitePoint = new_instancemethod(_IntTools.IntTools_FClass2d_PerformInfinitePoint, None, IntTools_FClass2d)
IntTools_FClass2d.Perform = new_instancemethod(_IntTools.IntTools_FClass2d_Perform, None, IntTools_FClass2d)
IntTools_FClass2d.Destroy = new_instancemethod(_IntTools.IntTools_FClass2d_Destroy, None, IntTools_FClass2d)
IntTools_FClass2d.TestOnRestriction = new_instancemethod(_IntTools.IntTools_FClass2d_TestOnRestriction, None, IntTools_FClass2d)
IntTools_FClass2d.IsHole = new_instancemethod(_IntTools.IntTools_FClass2d_IsHole, None, IntTools_FClass2d)
IntTools_FClass2d._kill_pointed = new_instancemethod(_IntTools.IntTools_FClass2d__kill_pointed, None, IntTools_FClass2d)
IntTools_FClass2d_swigregister = _IntTools.IntTools_FClass2d_swigregister
IntTools_FClass2d_swigregister(IntTools_FClass2d)

class IntTools_FaceFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _IntTools.IntTools_FaceFace_swiginit(self, _IntTools.new_IntTools_FaceFace(*args))

    def SetParameters(self, *args):
        """
        * Modifier

        :param ApproxCurves:
        :type ApproxCurves: bool
        :param ComputeCurveOnS1:
        :type ComputeCurveOnS1: bool
        :param ComputeCurveOnS2:
        :type ComputeCurveOnS2: bool
        :param ApproximationTolerance:
        :type ApproximationTolerance: float
        :rtype: None

        """
        return _IntTools.IntTools_FaceFace_SetParameters(self, *args)


    def Perform(self, *args):
        """
        * Intersects underliing surfaces of F1 and F2 Use sum of tolerance of F1 and F2 as intersection criteria

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: None

        """
        return _IntTools.IntTools_FaceFace_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns True if the intersection was successful

        :rtype: bool

        """
        return _IntTools.IntTools_FaceFace_IsDone(self, *args)


    def Lines(self, *args):
        """
        * Returns sequence of 3d curves as result of intersection

        :rtype: IntTools_SequenceOfCurves

        """
        return _IntTools.IntTools_FaceFace_Lines(self, *args)


    def Points(self, *args):
        """
        * Returns sequence of 3d curves as result of intersection

        :rtype: IntTools_SequenceOfPntOn2Faces

        """
        return _IntTools.IntTools_FaceFace_Points(self, *args)


    def TolReached3d(self, *args):
        """
        * Returns tolerance reached during approximation. If approximation was not done, returns zero.

        :rtype: float

        """
        return _IntTools.IntTools_FaceFace_TolReached3d(self, *args)


    def TolReached2d(self, *args):
        """
        * Returns tolerance reached during approximation. If approximation was not done, returns zero.

        :rtype: float

        """
        return _IntTools.IntTools_FaceFace_TolReached2d(self, *args)


    def Face1(self, *args):
        """
        * Returns first of processed faces

        :rtype: TopoDS_Face

        """
        return _IntTools.IntTools_FaceFace_Face1(self, *args)


    def Face2(self, *args):
        """
        * Returns second of processed faces

        :rtype: TopoDS_Face

        """
        return _IntTools.IntTools_FaceFace_Face2(self, *args)


    def TangentFaces(self, *args):
        """
        * Returns True if faces are tangent

        :rtype: bool

        """
        return _IntTools.IntTools_FaceFace_TangentFaces(self, *args)


    def PrepareLines3D(self, *args):
        """
        * Provides post-processing the result lines. <bToSplit> - the flag. In case of <bToSplit> is true the closed 3D-curves will be splitted on parts. In case of <bToSplit> is false the closed 3D-curves remain untouched.

        :param bToSplit: default value is Standard_True
        :type bToSplit: bool
        :rtype: None

        """
        return _IntTools.IntTools_FaceFace_PrepareLines3D(self, *args)


    def SetList(self, *args):
        """
        :param ListOfPnts:
        :type ListOfPnts: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntTools.IntTools_FaceFace_SetList(self, *args)


    def SetContext(self, *args):
        """
        * Sets the intersecton context

        :param aContext:
        :type aContext: Handle_BOPInt_Context &
        :rtype: None

        """
        return _IntTools.IntTools_FaceFace_SetContext(self, *args)


    def Context(self, *args):
        """
        * Gets the intersecton context

        :rtype: Handle_BOPInt_Context

        """
        return _IntTools.IntTools_FaceFace_Context(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_FaceFace.SetParameters = new_instancemethod(_IntTools.IntTools_FaceFace_SetParameters, None, IntTools_FaceFace)
IntTools_FaceFace.Perform = new_instancemethod(_IntTools.IntTools_FaceFace_Perform, None, IntTools_FaceFace)
IntTools_FaceFace.IsDone = new_instancemethod(_IntTools.IntTools_FaceFace_IsDone, None, IntTools_FaceFace)
IntTools_FaceFace.Lines = new_instancemethod(_IntTools.IntTools_FaceFace_Lines, None, IntTools_FaceFace)
IntTools_FaceFace.Points = new_instancemethod(_IntTools.IntTools_FaceFace_Points, None, IntTools_FaceFace)
IntTools_FaceFace.TolReached3d = new_instancemethod(_IntTools.IntTools_FaceFace_TolReached3d, None, IntTools_FaceFace)
IntTools_FaceFace.TolReached2d = new_instancemethod(_IntTools.IntTools_FaceFace_TolReached2d, None, IntTools_FaceFace)
IntTools_FaceFace.Face1 = new_instancemethod(_IntTools.IntTools_FaceFace_Face1, None, IntTools_FaceFace)
IntTools_FaceFace.Face2 = new_instancemethod(_IntTools.IntTools_FaceFace_Face2, None, IntTools_FaceFace)
IntTools_FaceFace.TangentFaces = new_instancemethod(_IntTools.IntTools_FaceFace_TangentFaces, None, IntTools_FaceFace)
IntTools_FaceFace.PrepareLines3D = new_instancemethod(_IntTools.IntTools_FaceFace_PrepareLines3D, None, IntTools_FaceFace)
IntTools_FaceFace.SetList = new_instancemethod(_IntTools.IntTools_FaceFace_SetList, None, IntTools_FaceFace)
IntTools_FaceFace.SetContext = new_instancemethod(_IntTools.IntTools_FaceFace_SetContext, None, IntTools_FaceFace)
IntTools_FaceFace.Context = new_instancemethod(_IntTools.IntTools_FaceFace_Context, None, IntTools_FaceFace)
IntTools_FaceFace._kill_pointed = new_instancemethod(_IntTools.IntTools_FaceFace__kill_pointed, None, IntTools_FaceFace)
IntTools_FaceFace_swigregister = _IntTools.IntTools_FaceFace_swigregister
IntTools_FaceFace_swigregister(IntTools_FaceFace)

class IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: Handle_Standard_Transient &
        :param K2:
        :type K2: int
        :param I:
        :type I: Standard_Address &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swiginit(self, _IntTools.new_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress(*args))

    def Key1(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress self) -> Standard_Integer"""
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress self, Standard_Integer value)"""
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Next2(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress self)"""
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress self) -> Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress"""
        return _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.Key1 = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Key1, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.GetKey2 = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_GetKey2, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.SetKey2 = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_SetKey2, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.Next2 = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Next2, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.Value = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Value, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress._kill_pointed = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress__kill_pointed, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.GetHandle = new_instancemethod(_IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_GetHandle, None, IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister = _IntTools.IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister
IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister(IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)

class Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swiginit(self, _IntTools.new_Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.Nullify = new_instancemethod(_IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_Nullify, None, Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.IsNull = new_instancemethod(_IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_IsNull, None, Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.GetObject = new_instancemethod(_IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_GetObject, None, Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress__kill_pointed, None, Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister = _IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_swigregister(Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress)

def Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_DownCast(AnObject):
    return _IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_DownCast(AnObject)
Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_DownCast = _IntTools.Handle_IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress_DownCast

class IntTools_IndexedDataMapOfTransientAddress(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _IntTools.IntTools_IndexedDataMapOfTransientAddress_swiginit(self, _IntTools.new_IntTools_IndexedDataMapOfTransientAddress(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_IndexedDataMapOfTransientAddress &
        :rtype: IntTools_IndexedDataMapOfTransientAddress

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_IndexedDataMapOfTransientAddress &
        :rtype: IntTools_IndexedDataMapOfTransientAddress

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Standard_Address &
        :rtype: int

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: Handle_Standard_Transient &
        :param T:
        :type T: Standard_Address &
        :rtype: None

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Handle_Standard_Transient

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_FindKey(self, *args)


    def FindFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromIndex(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: int

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_FindIndex(self, *args)


    def FindFromKey(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromKey(self, *args)


    def ChangeFromKey(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromKey1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_IndexedDataMapOfTransientAddress self)"""
        return _IntTools.IntTools_IndexedDataMapOfTransientAddress__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_IndexedDataMapOfTransientAddress.Assign = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Assign, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.Set = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Set, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.ReSize = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_ReSize, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.Clear = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Clear, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.Add = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Add, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.Substitute = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Substitute, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.RemoveLast = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_RemoveLast, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.Contains = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_Contains, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.FindKey = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_FindKey, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.FindFromIndex = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromIndex, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.ChangeFromIndex = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromIndex, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.FindIndex = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_FindIndex, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.FindFromKey = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromKey, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.ChangeFromKey = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromKey, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.FindFromKey1 = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_FindFromKey1, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress.ChangeFromKey1 = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress_ChangeFromKey1, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress._kill_pointed = new_instancemethod(_IntTools.IntTools_IndexedDataMapOfTransientAddress__kill_pointed, None, IntTools_IndexedDataMapOfTransientAddress)
IntTools_IndexedDataMapOfTransientAddress_swigregister = _IntTools.IntTools_IndexedDataMapOfTransientAddress_swigregister
IntTools_IndexedDataMapOfTransientAddress_swigregister(IntTools_IndexedDataMapOfTransientAddress)

class IntTools_ListIteratorOfListOfBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: IntTools_ListOfBox &
        :rtype: None

        """
        _IntTools.IntTools_ListIteratorOfListOfBox_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfBox(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: IntTools_ListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfBox_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListIteratorOfListOfBox_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfBox_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_ListIteratorOfListOfBox_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListIteratorOfListOfBox.Initialize = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_Initialize, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_More, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_Next, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_Value, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox._kill_pointed = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox__kill_pointed, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox_swigregister = _IntTools.IntTools_ListIteratorOfListOfBox_swigregister
IntTools_ListIteratorOfListOfBox_swigregister(IntTools_ListIteratorOfListOfBox)

class IntTools_ListIteratorOfListOfCurveRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfCurveRangeSample(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListIteratorOfListOfCurveRangeSample.Initialize = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Initialize, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_More, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Next, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Value, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample__kill_pointed, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample_swigregister = _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_swigregister
IntTools_ListIteratorOfListOfCurveRangeSample_swigregister(IntTools_ListIteratorOfListOfCurveRangeSample)

class IntTools_ListIteratorOfListOfSurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfSurfaceRangeSample(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListIteratorOfListOfSurfaceRangeSample.Initialize = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Initialize, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_More, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Next, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Value, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample__kill_pointed, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister = _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister
IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister(IntTools_ListIteratorOfListOfSurfaceRangeSample)

class IntTools_ListNodeOfListOfBox(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Bnd_Box &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_ListNodeOfListOfBox_swiginit(self, _IntTools.new_IntTools_ListNodeOfListOfBox(*args))

    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_ListNodeOfListOfBox_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_ListNodeOfListOfBox self)"""
        return _IntTools.IntTools_ListNodeOfListOfBox__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_ListNodeOfListOfBox self) -> Handle_IntTools_ListNodeOfListOfBox"""
        return _IntTools.IntTools_ListNodeOfListOfBox_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListNodeOfListOfBox.Value = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfBox_Value, None, IntTools_ListNodeOfListOfBox)
IntTools_ListNodeOfListOfBox._kill_pointed = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfBox__kill_pointed, None, IntTools_ListNodeOfListOfBox)
IntTools_ListNodeOfListOfBox.GetHandle = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfBox_GetHandle, None, IntTools_ListNodeOfListOfBox)
IntTools_ListNodeOfListOfBox_swigregister = _IntTools.IntTools_ListNodeOfListOfBox_swigregister
IntTools_ListNodeOfListOfBox_swigregister(IntTools_ListNodeOfListOfBox)

class Handle_IntTools_ListNodeOfListOfBox(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_ListNodeOfListOfBox_swiginit(self, _IntTools.new_Handle_IntTools_ListNodeOfListOfBox(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_ListNodeOfListOfBox_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_ListNodeOfListOfBox.Nullify = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfBox_Nullify, None, Handle_IntTools_ListNodeOfListOfBox)
Handle_IntTools_ListNodeOfListOfBox.IsNull = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfBox_IsNull, None, Handle_IntTools_ListNodeOfListOfBox)
Handle_IntTools_ListNodeOfListOfBox.GetObject = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfBox_GetObject, None, Handle_IntTools_ListNodeOfListOfBox)
Handle_IntTools_ListNodeOfListOfBox._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfBox__kill_pointed, None, Handle_IntTools_ListNodeOfListOfBox)
Handle_IntTools_ListNodeOfListOfBox_swigregister = _IntTools.Handle_IntTools_ListNodeOfListOfBox_swigregister
Handle_IntTools_ListNodeOfListOfBox_swigregister(Handle_IntTools_ListNodeOfListOfBox)

def Handle_IntTools_ListNodeOfListOfBox_DownCast(AnObject):
    return _IntTools.Handle_IntTools_ListNodeOfListOfBox_DownCast(AnObject)
Handle_IntTools_ListNodeOfListOfBox_DownCast = _IntTools.Handle_IntTools_ListNodeOfListOfBox_DownCast

class IntTools_ListNodeOfListOfCurveRangeSample(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_CurveRangeSample &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_ListNodeOfListOfCurveRangeSample_swiginit(self, _IntTools.new_IntTools_ListNodeOfListOfCurveRangeSample(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_ListNodeOfListOfCurveRangeSample_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_ListNodeOfListOfCurveRangeSample self)"""
        return _IntTools.IntTools_ListNodeOfListOfCurveRangeSample__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_ListNodeOfListOfCurveRangeSample self) -> Handle_IntTools_ListNodeOfListOfCurveRangeSample"""
        return _IntTools.IntTools_ListNodeOfListOfCurveRangeSample_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListNodeOfListOfCurveRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfCurveRangeSample_Value, None, IntTools_ListNodeOfListOfCurveRangeSample)
IntTools_ListNodeOfListOfCurveRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfCurveRangeSample__kill_pointed, None, IntTools_ListNodeOfListOfCurveRangeSample)
IntTools_ListNodeOfListOfCurveRangeSample.GetHandle = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfCurveRangeSample_GetHandle, None, IntTools_ListNodeOfListOfCurveRangeSample)
IntTools_ListNodeOfListOfCurveRangeSample_swigregister = _IntTools.IntTools_ListNodeOfListOfCurveRangeSample_swigregister
IntTools_ListNodeOfListOfCurveRangeSample_swigregister(IntTools_ListNodeOfListOfCurveRangeSample)

class Handle_IntTools_ListNodeOfListOfCurveRangeSample(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_swiginit(self, _IntTools.new_Handle_IntTools_ListNodeOfListOfCurveRangeSample(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_ListNodeOfListOfCurveRangeSample.Nullify = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_Nullify, None, Handle_IntTools_ListNodeOfListOfCurveRangeSample)
Handle_IntTools_ListNodeOfListOfCurveRangeSample.IsNull = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_IsNull, None, Handle_IntTools_ListNodeOfListOfCurveRangeSample)
Handle_IntTools_ListNodeOfListOfCurveRangeSample.GetObject = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_GetObject, None, Handle_IntTools_ListNodeOfListOfCurveRangeSample)
Handle_IntTools_ListNodeOfListOfCurveRangeSample._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample__kill_pointed, None, Handle_IntTools_ListNodeOfListOfCurveRangeSample)
Handle_IntTools_ListNodeOfListOfCurveRangeSample_swigregister = _IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_swigregister
Handle_IntTools_ListNodeOfListOfCurveRangeSample_swigregister(Handle_IntTools_ListNodeOfListOfCurveRangeSample)

def Handle_IntTools_ListNodeOfListOfCurveRangeSample_DownCast(AnObject):
    return _IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_DownCast(AnObject)
Handle_IntTools_ListNodeOfListOfCurveRangeSample_DownCast = _IntTools.Handle_IntTools_ListNodeOfListOfCurveRangeSample_DownCast

class IntTools_ListNodeOfListOfSurfaceRangeSample(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_ListNodeOfListOfSurfaceRangeSample(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_ListNodeOfListOfSurfaceRangeSample self)"""
        return _IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_ListNodeOfListOfSurfaceRangeSample self) -> Handle_IntTools_ListNodeOfListOfSurfaceRangeSample"""
        return _IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListNodeOfListOfSurfaceRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_Value, None, IntTools_ListNodeOfListOfSurfaceRangeSample)
IntTools_ListNodeOfListOfSurfaceRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample__kill_pointed, None, IntTools_ListNodeOfListOfSurfaceRangeSample)
IntTools_ListNodeOfListOfSurfaceRangeSample.GetHandle = new_instancemethod(_IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_GetHandle, None, IntTools_ListNodeOfListOfSurfaceRangeSample)
IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister = _IntTools.IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister
IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister(IntTools_ListNodeOfListOfSurfaceRangeSample)

class Handle_IntTools_ListNodeOfListOfSurfaceRangeSample(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_swiginit(self, _IntTools.new_Handle_IntTools_ListNodeOfListOfSurfaceRangeSample(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_ListNodeOfListOfSurfaceRangeSample.Nullify = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_Nullify, None, Handle_IntTools_ListNodeOfListOfSurfaceRangeSample)
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample.IsNull = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_IsNull, None, Handle_IntTools_ListNodeOfListOfSurfaceRangeSample)
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample.GetObject = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_GetObject, None, Handle_IntTools_ListNodeOfListOfSurfaceRangeSample)
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample__kill_pointed, None, Handle_IntTools_ListNodeOfListOfSurfaceRangeSample)
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister = _IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_swigregister(Handle_IntTools_ListNodeOfListOfSurfaceRangeSample)

def Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_DownCast(AnObject):
    return _IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_DownCast(AnObject)
Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_DownCast = _IntTools.Handle_IntTools_ListNodeOfListOfSurfaceRangeSample_DownCast

class IntTools_ListOfBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_ListOfBox_swiginit(self, _IntTools.new_IntTools_ListOfBox(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_ListOfBox_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListOfBox_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Bnd_Box &
        :rtype: None

        :param I:
        :type I: Bnd_Box &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Bnd_Box &
        :rtype: None

        :param I:
        :type I: Bnd_Box &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_ListOfBox_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntTools.IntTools_ListOfBox_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Bnd_Box &
        :param It:
        :type It: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfBox &
        :param It:
        :type It: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Bnd_Box &
        :param It:
        :type It: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfBox &
        :param It:
        :type It: IntTools_ListIteratorOfListOfBox &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfBox_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListOfBox.Assign = new_instancemethod(_IntTools.IntTools_ListOfBox_Assign, None, IntTools_ListOfBox)
IntTools_ListOfBox.Set = new_instancemethod(_IntTools.IntTools_ListOfBox_Set, None, IntTools_ListOfBox)
IntTools_ListOfBox.Extent = new_instancemethod(_IntTools.IntTools_ListOfBox_Extent, None, IntTools_ListOfBox)
IntTools_ListOfBox.Clear = new_instancemethod(_IntTools.IntTools_ListOfBox_Clear, None, IntTools_ListOfBox)
IntTools_ListOfBox.IsEmpty = new_instancemethod(_IntTools.IntTools_ListOfBox_IsEmpty, None, IntTools_ListOfBox)
IntTools_ListOfBox.Prepend = new_instancemethod(_IntTools.IntTools_ListOfBox_Prepend, None, IntTools_ListOfBox)
IntTools_ListOfBox.Append = new_instancemethod(_IntTools.IntTools_ListOfBox_Append, None, IntTools_ListOfBox)
IntTools_ListOfBox.First = new_instancemethod(_IntTools.IntTools_ListOfBox_First, None, IntTools_ListOfBox)
IntTools_ListOfBox.Last = new_instancemethod(_IntTools.IntTools_ListOfBox_Last, None, IntTools_ListOfBox)
IntTools_ListOfBox.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfBox_RemoveFirst, None, IntTools_ListOfBox)
IntTools_ListOfBox.Remove = new_instancemethod(_IntTools.IntTools_ListOfBox_Remove, None, IntTools_ListOfBox)
IntTools_ListOfBox.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfBox_InsertBefore, None, IntTools_ListOfBox)
IntTools_ListOfBox.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfBox_InsertAfter, None, IntTools_ListOfBox)
IntTools_ListOfBox._kill_pointed = new_instancemethod(_IntTools.IntTools_ListOfBox__kill_pointed, None, IntTools_ListOfBox)
IntTools_ListOfBox_swigregister = _IntTools.IntTools_ListOfBox_swigregister
IntTools_ListOfBox_swigregister(IntTools_ListOfBox)

class IntTools_ListOfCurveRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_ListOfCurveRangeSample_swiginit(self, _IntTools.new_IntTools_ListOfCurveRangeSample(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: IntTools_CurveRangeSample &
        :rtype: None

        :param I:
        :type I: IntTools_CurveRangeSample &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: IntTools_CurveRangeSample &
        :rtype: None

        :param I:
        :type I: IntTools_CurveRangeSample &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Append(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: IntTools_CurveRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: IntTools_CurveRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfCurveRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfCurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfCurveRangeSample_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListOfCurveRangeSample.Assign = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Assign, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Set = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Set, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Extent = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Extent, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Clear = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Clear, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.IsEmpty = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_IsEmpty, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Prepend = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Prepend, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Append = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Append, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.First = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_First, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Last = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Last, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_RemoveFirst, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Remove = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Remove, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_InsertBefore, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_InsertAfter, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample__kill_pointed, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample_swigregister = _IntTools.IntTools_ListOfCurveRangeSample_swigregister
IntTools_ListOfCurveRangeSample_swigregister(IntTools_ListOfCurveRangeSample)

class IntTools_ListOfSurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_ListOfSurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_ListOfSurfaceRangeSample(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :rtype: None

        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :rtype: None

        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :param theIt:
        :type theIt: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Append(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: IntTools_SurfaceRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_ListOfSurfaceRangeSample &
        :param It:
        :type It: IntTools_ListIteratorOfListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_ListOfSurfaceRangeSample_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_ListOfSurfaceRangeSample.Assign = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Assign, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Set = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Set, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Extent = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Extent, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Clear = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Clear, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.IsEmpty = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_IsEmpty, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Prepend = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Prepend, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Append = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Append, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.First = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_First, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Last = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Last, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_RemoveFirst, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Remove = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Remove, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_InsertBefore, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_InsertAfter, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample__kill_pointed, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample_swigregister = _IntTools.IntTools_ListOfSurfaceRangeSample_swigregister
IntTools_ListOfSurfaceRangeSample_swigregister(IntTools_ListOfSurfaceRangeSample)

class IntTools_MapIteratorOfMapOfCurveSample(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: IntTools_MapOfCurveSample &
        :rtype: None

        """
        _IntTools.IntTools_MapIteratorOfMapOfCurveSample_swiginit(self, _IntTools.new_IntTools_MapIteratorOfMapOfCurveSample(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: IntTools_MapOfCurveSample &
        :rtype: None

        """
        return _IntTools.IntTools_MapIteratorOfMapOfCurveSample_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_MapIteratorOfMapOfCurveSample_Key(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_MapIteratorOfMapOfCurveSample.Initialize = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfCurveSample_Initialize, None, IntTools_MapIteratorOfMapOfCurveSample)
IntTools_MapIteratorOfMapOfCurveSample.Key = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfCurveSample_Key, None, IntTools_MapIteratorOfMapOfCurveSample)
IntTools_MapIteratorOfMapOfCurveSample._kill_pointed = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfCurveSample__kill_pointed, None, IntTools_MapIteratorOfMapOfCurveSample)
IntTools_MapIteratorOfMapOfCurveSample_swigregister = _IntTools.IntTools_MapIteratorOfMapOfCurveSample_swigregister
IntTools_MapIteratorOfMapOfCurveSample_swigregister(IntTools_MapIteratorOfMapOfCurveSample)

class IntTools_MapIteratorOfMapOfSurfaceSample(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: IntTools_MapOfSurfaceSample &
        :rtype: None

        """
        _IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_swiginit(self, _IntTools.new_IntTools_MapIteratorOfMapOfSurfaceSample(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: IntTools_MapOfSurfaceSample &
        :rtype: None

        """
        return _IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_Key(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_MapIteratorOfMapOfSurfaceSample.Initialize = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_Initialize, None, IntTools_MapIteratorOfMapOfSurfaceSample)
IntTools_MapIteratorOfMapOfSurfaceSample.Key = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_Key, None, IntTools_MapIteratorOfMapOfSurfaceSample)
IntTools_MapIteratorOfMapOfSurfaceSample._kill_pointed = new_instancemethod(_IntTools.IntTools_MapIteratorOfMapOfSurfaceSample__kill_pointed, None, IntTools_MapIteratorOfMapOfSurfaceSample)
IntTools_MapIteratorOfMapOfSurfaceSample_swigregister = _IntTools.IntTools_MapIteratorOfMapOfSurfaceSample_swigregister
IntTools_MapIteratorOfMapOfSurfaceSample_swigregister(IntTools_MapIteratorOfMapOfSurfaceSample)

class IntTools_MapOfCurveSample(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _IntTools.IntTools_MapOfCurveSample_swiginit(self, _IntTools.new_IntTools_MapOfCurveSample(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_MapOfCurveSample &
        :rtype: IntTools_MapOfCurveSample

        """
        return _IntTools.IntTools_MapOfCurveSample_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_MapOfCurveSample &
        :rtype: IntTools_MapOfCurveSample

        """
        return _IntTools.IntTools_MapOfCurveSample_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _IntTools.IntTools_MapOfCurveSample_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_MapOfCurveSample_Clear(self, *args)


    def Add(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfCurveSample_Add(self, *args)


    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfCurveSample_Contains(self, *args)


    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfCurveSample_Remove(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_MapOfCurveSample self)"""
        return _IntTools.IntTools_MapOfCurveSample__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_MapOfCurveSample.Assign = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Assign, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Set = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Set, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.ReSize = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_ReSize, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Clear = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Clear, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Add = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Add, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Contains = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Contains, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Remove = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Remove, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample._kill_pointed = new_instancemethod(_IntTools.IntTools_MapOfCurveSample__kill_pointed, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample_swigregister = _IntTools.IntTools_MapOfCurveSample_swigregister
IntTools_MapOfCurveSample_swigregister(IntTools_MapOfCurveSample)

class IntTools_MapOfSurfaceSample(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _IntTools.IntTools_MapOfSurfaceSample_swiginit(self, _IntTools.new_IntTools_MapOfSurfaceSample(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_MapOfSurfaceSample &
        :rtype: IntTools_MapOfSurfaceSample

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_MapOfSurfaceSample &
        :rtype: IntTools_MapOfSurfaceSample

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _IntTools.IntTools_MapOfSurfaceSample_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Clear(self, *args)


    def Add(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Add(self, *args)


    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Contains(self, *args)


    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_MapOfSurfaceSample_Remove(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_MapOfSurfaceSample self)"""
        return _IntTools.IntTools_MapOfSurfaceSample__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_MapOfSurfaceSample.Assign = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Assign, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Set = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Set, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.ReSize = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_ReSize, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Clear = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Clear, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Add = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Add, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Contains = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Contains, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Remove = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Remove, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample._kill_pointed = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample__kill_pointed, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample_swigregister = _IntTools.IntTools_MapOfSurfaceSample_swigregister
IntTools_MapOfSurfaceSample_swigregister(IntTools_MapOfSurfaceSample)

class IntTools_MarkedRangeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * build set of ranges which consists of one range with boundary values theFirstBoundary and theLastBoundary

        :param theFirstBoundary:
        :type theFirstBoundary: float
        :param theLastBoundary:
        :type theLastBoundary: float
        :param theInitFlag:
        :type theInitFlag: int
        :rtype: None

        * Build set of ranges based on the array of progressive sorted values Warning: The constructor do not check if the values of array are not sorted It should be checked before function invocation

        :param theSortedArray:
        :type theSortedArray: IntTools_CArray1OfReal &
        :param theInitFlag:
        :type theInitFlag: int
        :rtype: None

        """
        _IntTools.IntTools_MarkedRangeSet_swiginit(self, _IntTools.new_IntTools_MarkedRangeSet(*args))

    def SetBoundaries(self, *args):
        """
        * build set of ranges which consists of one range with boundary values theFirstBoundary and theLastBoundary

        :param theFirstBoundary:
        :type theFirstBoundary: float
        :param theLastBoundary:
        :type theLastBoundary: float
        :param theInitFlag:
        :type theInitFlag: int
        :rtype: None

        """
        return _IntTools.IntTools_MarkedRangeSet_SetBoundaries(self, *args)


    def SetRanges(self, *args):
        """
        * Build set of ranges based on the array of progressive sorted values Warning: The function do not check if the values of array are not sorted It should be checked before function invocation

        :param theSortedArray:
        :type theSortedArray: IntTools_CArray1OfReal &
        :param theInitFlag:
        :type theInitFlag: int
        :rtype: None

        """
        return _IntTools.IntTools_MarkedRangeSet_SetRanges(self, *args)


    def InsertRange(self, *args):
        """
        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False

        :param theFirstBoundary:
        :type theFirstBoundary: float
        :param theLastBoundary:
        :type theLastBoundary: float
        :param theFlag:
        :type theFlag: int
        :rtype: bool

        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False

        :param theRange:
        :type theRange: IntTools_Range &
        :param theFlag:
        :type theFlag: int
        :rtype: bool

        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. The index theIndex is a position where the range will be inserted. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False

        :param theFirstBoundary:
        :type theFirstBoundary: float
        :param theLastBoundary:
        :type theLastBoundary: float
        :param theFlag:
        :type theFlag: int
        :param theIndex:
        :type theIndex: int
        :rtype: bool

        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. The index theIndex is a position where the range will be inserted. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False

        :param theRange:
        :type theRange: IntTools_Range &
        :param theFlag:
        :type theFlag: int
        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _IntTools.IntTools_MarkedRangeSet_InsertRange(self, *args)


    def SetFlag(self, *args):
        """
        * Set flag theFlag for range with index theIndex

        :param theIndex:
        :type theIndex: int
        :param theFlag:
        :type theFlag: int
        :rtype: None

        """
        return _IntTools.IntTools_MarkedRangeSet_SetFlag(self, *args)


    def Flag(self, *args):
        """
        * Returns flag of the range with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: int

        """
        return _IntTools.IntTools_MarkedRangeSet_Flag(self, *args)


    def GetIndices(self, *args):
        """
        :param theValue:
        :type theValue: float
        :rtype: TColStd_SequenceOfInteger

        """
        return _IntTools.IntTools_MarkedRangeSet_GetIndices(self, *args)


    def GetIndex(self, *args):
        """
        * Returns index of range which contains theValue. If theValue do not belong any range returns 0.

        :param theValue:
        :type theValue: float
        :rtype: int

        * Returns index of range which contains theValue If theValue do not belong any range returns 0. If UseLower is Standard_True then lower boundary of the range can be equal to theValue, otherwise upper boundary of the range can be equal to theValue.

        :param theValue:
        :type theValue: float
        :param UseLower:
        :type UseLower: bool
        :rtype: int

        """
        return _IntTools.IntTools_MarkedRangeSet_GetIndex(self, *args)


    def Length(self, *args):
        """
        * Returns number of ranges

        :rtype: int

        """
        return _IntTools.IntTools_MarkedRangeSet_Length(self, *args)


    def Range(self, *args):
        """
        * Returns the range with index theIndex. the Index can be from 1 to Length()

        :param theIndex:
        :type theIndex: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_MarkedRangeSet_Range(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_MarkedRangeSet.SetBoundaries = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetBoundaries, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.SetRanges = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetRanges, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.InsertRange = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_InsertRange, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.SetFlag = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetFlag, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.Flag = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Flag, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.GetIndices = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_GetIndices, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.GetIndex = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_GetIndex, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.Length = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Length, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.Range = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Range, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet._kill_pointed = new_instancemethod(_IntTools.IntTools_MarkedRangeSet__kill_pointed, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet_swigregister = _IntTools.IntTools_MarkedRangeSet_swigregister
IntTools_MarkedRangeSet_swigregister(IntTools_MarkedRangeSet)

class IntTools_PntOn2Faces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes me by two points aP1 and aP2

        :param aP1:
        :type aP1: IntTools_PntOnFace &
        :param aP2:
        :type aP2: IntTools_PntOnFace &
        :rtype: None

        """
        _IntTools.IntTools_PntOn2Faces_swiginit(self, _IntTools.new_IntTools_PntOn2Faces(*args))

    def SetP1(self, *args):
        """
        * Modifier

        :param aP1:
        :type aP1: IntTools_PntOnFace &
        :rtype: None

        """
        return _IntTools.IntTools_PntOn2Faces_SetP1(self, *args)


    def SetP2(self, *args):
        """
        * Modifier

        :param aP2:
        :type aP2: IntTools_PntOnFace &
        :rtype: None

        """
        return _IntTools.IntTools_PntOn2Faces_SetP2(self, *args)


    def SetValid(self, *args):
        """
        * Modifier

        :param bF:
        :type bF: bool
        :rtype: None

        """
        return _IntTools.IntTools_PntOn2Faces_SetValid(self, *args)


    def P1(self, *args):
        """
        * Selector

        :rtype: IntTools_PntOnFace

        """
        return _IntTools.IntTools_PntOn2Faces_P1(self, *args)


    def P2(self, *args):
        """
        * Selector

        :rtype: IntTools_PntOnFace

        """
        return _IntTools.IntTools_PntOn2Faces_P2(self, *args)


    def IsValid(self, *args):
        """
        * Selector

        :rtype: bool

        """
        return _IntTools.IntTools_PntOn2Faces_IsValid(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_PntOn2Faces.SetP1 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetP1, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.SetP2 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetP2, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.SetValid = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetValid, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.P1 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_P1, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.P2 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_P2, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.IsValid = new_instancemethod(_IntTools.IntTools_PntOn2Faces_IsValid, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces._kill_pointed = new_instancemethod(_IntTools.IntTools_PntOn2Faces__kill_pointed, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces_swigregister = _IntTools.IntTools_PntOn2Faces_swigregister
IntTools_PntOn2Faces_swigregister(IntTools_PntOn2Faces)

class IntTools_PntOnFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _IntTools.IntTools_PntOnFace_swiginit(self, _IntTools.new_IntTools_PntOnFace(*args))

    def Init(self, *args):
        """
        * Initializes me by aFace, a 3d point and it's UV parameters on face

        :param aF:
        :type aF: TopoDS_Face &
        :param aP:
        :type aP: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_Init(self, *args)


    def SetFace(self, *args):
        """
        * Modifier

        :param aF:
        :type aF: TopoDS_Face &
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_SetFace(self, *args)


    def SetPnt(self, *args):
        """
        * Modifier

        :param aP:
        :type aP: gp_Pnt
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_SetPnt(self, *args)


    def SetParameters(self, *args):
        """
        * Modifier

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_SetParameters(self, *args)


    def SetValid(self, *args):
        """
        * Modifier

        :param bF:
        :type bF: bool
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_SetValid(self, *args)


    def Face(self, *args):
        """
        * Selector

        :rtype: TopoDS_Face

        """
        return _IntTools.IntTools_PntOnFace_Face(self, *args)


    def Pnt(self, *args):
        """
        * Selector

        :rtype: gp_Pnt

        """
        return _IntTools.IntTools_PntOnFace_Pnt(self, *args)


    def Parameters(self, *args):
        """
        * Selector

        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntTools.IntTools_PntOnFace_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_PntOnFace.Init = new_instancemethod(_IntTools.IntTools_PntOnFace_Init, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetFace = new_instancemethod(_IntTools.IntTools_PntOnFace_SetFace, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetPnt = new_instancemethod(_IntTools.IntTools_PntOnFace_SetPnt, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetParameters = new_instancemethod(_IntTools.IntTools_PntOnFace_SetParameters, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetValid = new_instancemethod(_IntTools.IntTools_PntOnFace_SetValid, None, IntTools_PntOnFace)
IntTools_PntOnFace.Face = new_instancemethod(_IntTools.IntTools_PntOnFace_Face, None, IntTools_PntOnFace)
IntTools_PntOnFace.Pnt = new_instancemethod(_IntTools.IntTools_PntOnFace_Pnt, None, IntTools_PntOnFace)
IntTools_PntOnFace.Parameters = new_instancemethod(_IntTools.IntTools_PntOnFace_Parameters, None, IntTools_PntOnFace)
IntTools_PntOnFace._kill_pointed = new_instancemethod(_IntTools.IntTools_PntOnFace__kill_pointed, None, IntTools_PntOnFace)
IntTools_PntOnFace_swigregister = _IntTools.IntTools_PntOnFace_swigregister
IntTools_PntOnFace_swigregister(IntTools_PntOnFace)

class IntTools_QuickSort(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Sort(*args):
        """
        :param TheArray:
        :type TheArray: IntTools_Array1OfRoots &
        :param Comp:
        :type Comp: IntTools_Compare &
        :rtype: void

        """
        return _IntTools.IntTools_QuickSort_Sort(*args)

    Sort = staticmethod(Sort)

    def __init__(self):
        _IntTools.IntTools_QuickSort_swiginit(self, _IntTools.new_IntTools_QuickSort())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_QuickSort._kill_pointed = new_instancemethod(_IntTools.IntTools_QuickSort__kill_pointed, None, IntTools_QuickSort)
IntTools_QuickSort_swigregister = _IntTools.IntTools_QuickSort_swigregister
IntTools_QuickSort_swigregister(IntTools_QuickSort)

def IntTools_QuickSort_Sort(*args):
    """
    :param TheArray:
    :type TheArray: IntTools_Array1OfRoots &
    :param Comp:
    :type Comp: IntTools_Compare &
    :rtype: void

    """
    return _IntTools.IntTools_QuickSort_Sort(*args)

class IntTools_QuickSortRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Sort(*args):
        """
        :param TheArray:
        :type TheArray: IntTools_Array1OfRange &
        :param Comp:
        :type Comp: IntTools_CompareRange &
        :rtype: void

        """
        return _IntTools.IntTools_QuickSortRange_Sort(*args)

    Sort = staticmethod(Sort)

    def __init__(self):
        _IntTools.IntTools_QuickSortRange_swiginit(self, _IntTools.new_IntTools_QuickSortRange())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_QuickSortRange._kill_pointed = new_instancemethod(_IntTools.IntTools_QuickSortRange__kill_pointed, None, IntTools_QuickSortRange)
IntTools_QuickSortRange_swigregister = _IntTools.IntTools_QuickSortRange_swigregister
IntTools_QuickSortRange_swigregister(IntTools_QuickSortRange)

def IntTools_QuickSortRange_Sort(*args):
    """
    :param TheArray:
    :type TheArray: IntTools_Array1OfRange &
    :param Comp:
    :type Comp: IntTools_CompareRange &
    :rtype: void

    """
    return _IntTools.IntTools_QuickSortRange_Sort(*args)

class IntTools_Range(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initialize me by range boundaries

        :param aFirst:
        :type aFirst: float
        :param aLast:
        :type aLast: float
        :rtype: None

        """
        _IntTools.IntTools_Range_swiginit(self, _IntTools.new_IntTools_Range(*args))

    def SetFirst(self, *args):
        """
        * Modifier

        :param aFirst:
        :type aFirst: float
        :rtype: None

        """
        return _IntTools.IntTools_Range_SetFirst(self, *args)


    def SetLast(self, *args):
        """
        * Modifier

        :param aLast:
        :type aLast: float
        :rtype: None

        """
        return _IntTools.IntTools_Range_SetLast(self, *args)


    def First(self, *args):
        """
        * Selector

        :rtype: float

        """
        return _IntTools.IntTools_Range_First(self, *args)


    def Last(self, *args):
        """
        * Selector

        :rtype: float

        """
        return _IntTools.IntTools_Range_Last(self, *args)


    def Range(self, *args):
        """
        * Selector

        :param aFirst:
        :type aFirst: float &
        :param aLast:
        :type aLast: float &
        :rtype: None

        """
        return _IntTools.IntTools_Range_Range(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Range.SetFirst = new_instancemethod(_IntTools.IntTools_Range_SetFirst, None, IntTools_Range)
IntTools_Range.SetLast = new_instancemethod(_IntTools.IntTools_Range_SetLast, None, IntTools_Range)
IntTools_Range.First = new_instancemethod(_IntTools.IntTools_Range_First, None, IntTools_Range)
IntTools_Range.Last = new_instancemethod(_IntTools.IntTools_Range_Last, None, IntTools_Range)
IntTools_Range.Range = new_instancemethod(_IntTools.IntTools_Range_Range, None, IntTools_Range)
IntTools_Range._kill_pointed = new_instancemethod(_IntTools.IntTools_Range__kill_pointed, None, IntTools_Range)
IntTools_Range_swigregister = _IntTools.IntTools_Range_swigregister
IntTools_Range_swigregister(IntTools_Range)

class IntTools_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes my by range of parameters and type of root

        :param aRoot:
        :type aRoot: float
        :param aType:
        :type aType: int
        :rtype: None

        """
        _IntTools.IntTools_Root_swiginit(self, _IntTools.new_IntTools_Root(*args))

    def SetRoot(self, *args):
        """
        * Sets the Root's value

        :param aRoot:
        :type aRoot: float
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetRoot(self, *args)


    def SetType(self, *args):
        """
        * Sets the Root's Type

        :param aType:
        :type aType: int
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetType(self, *args)


    def SetStateBefore(self, *args):
        """
        * Set the value of the state before the root (at t=Root-dt)

        :param aState:
        :type aState: TopAbs_State
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetStateBefore(self, *args)


    def SetStateAfter(self, *args):
        """
        * Set the value of the state after the root (at t=Root-dt)

        :param aState:
        :type aState: TopAbs_State
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetStateAfter(self, *args)


    def SetLayerHeight(self, *args):
        """
        * Not used in Edge/Edge algorithm

        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetLayerHeight(self, *args)


    def SetInterval(self, *args):
        """
        * Sets the interval from which the Root was found [t1,t2] and the corresponding values of the function on the bounds f(t1), f(t2).

        :param t1:
        :type t1: float
        :param t2:
        :type t2: float
        :param f1:
        :type f1: float
        :param f2:
        :type f2: float
        :rtype: None

        """
        return _IntTools.IntTools_Root_SetInterval(self, *args)


    def Root(self, *args):
        """
        * Returns the Root value

        :rtype: float

        """
        return _IntTools.IntTools_Root_Root(self, *args)


    def Type(self, *args):
        """
        * Returns the type of the root =0 - Simple (was found by bisection method); =2 - Smart when f1=0, f2!=0 or vice versa (was found by Fibbonacci method); =1 - Pure (pure zero for all t [t1,t2] );

        :rtype: int

        """
        return _IntTools.IntTools_Root_Type(self, *args)


    def StateBefore(self, *args):
        """
        * Returns the state before the root

        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_Root_StateBefore(self, *args)


    def StateAfter(self, *args):
        """
        * Returns the state after the root

        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_Root_StateAfter(self, *args)


    def LayerHeight(self, *args):
        """
        * Not used in Edge/Edge algorithm

        :rtype: float

        """
        return _IntTools.IntTools_Root_LayerHeight(self, *args)


    def IsValid(self, *args):
        """
        * Returns the validity flag for the root, True if myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_IN or myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_ON or myStateBefore==TopAbs_ON && myStateAfter==TopAbs_OUT or myStateBefore==TopAbs_IN && myStateAfter==TopAbs_OUT . For other cases it returns False.

        :rtype: bool

        """
        return _IntTools.IntTools_Root_IsValid(self, *args)


    def Interval(self, *args):
        """
        * Returns the values of interval from which the Root was found [t1,t2] and the corresponding values of the function on the bounds f(t1), f(t2).

        :param t1:
        :type t1: float &
        :param t2:
        :type t2: float &
        :param f1:
        :type f1: float &
        :param f2:
        :type f2: float &
        :rtype: None

        """
        return _IntTools.IntTools_Root_Interval(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Root.SetRoot = new_instancemethod(_IntTools.IntTools_Root_SetRoot, None, IntTools_Root)
IntTools_Root.SetType = new_instancemethod(_IntTools.IntTools_Root_SetType, None, IntTools_Root)
IntTools_Root.SetStateBefore = new_instancemethod(_IntTools.IntTools_Root_SetStateBefore, None, IntTools_Root)
IntTools_Root.SetStateAfter = new_instancemethod(_IntTools.IntTools_Root_SetStateAfter, None, IntTools_Root)
IntTools_Root.SetLayerHeight = new_instancemethod(_IntTools.IntTools_Root_SetLayerHeight, None, IntTools_Root)
IntTools_Root.SetInterval = new_instancemethod(_IntTools.IntTools_Root_SetInterval, None, IntTools_Root)
IntTools_Root.Root = new_instancemethod(_IntTools.IntTools_Root_Root, None, IntTools_Root)
IntTools_Root.Type = new_instancemethod(_IntTools.IntTools_Root_Type, None, IntTools_Root)
IntTools_Root.StateBefore = new_instancemethod(_IntTools.IntTools_Root_StateBefore, None, IntTools_Root)
IntTools_Root.StateAfter = new_instancemethod(_IntTools.IntTools_Root_StateAfter, None, IntTools_Root)
IntTools_Root.LayerHeight = new_instancemethod(_IntTools.IntTools_Root_LayerHeight, None, IntTools_Root)
IntTools_Root.IsValid = new_instancemethod(_IntTools.IntTools_Root_IsValid, None, IntTools_Root)
IntTools_Root.Interval = new_instancemethod(_IntTools.IntTools_Root_Interval, None, IntTools_Root)
IntTools_Root._kill_pointed = new_instancemethod(_IntTools.IntTools_Root__kill_pointed, None, IntTools_Root)
IntTools_Root_swigregister = _IntTools.IntTools_Root_swigregister
IntTools_Root_swigregister(IntTools_Root)

class IntTools_SequenceNodeOfSequenceOfCommonPrts(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_CommonPrt &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_swiginit(self, _IntTools.new_IntTools_SequenceNodeOfSequenceOfCommonPrts(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_SequenceNodeOfSequenceOfCommonPrts self)"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_SequenceNodeOfSequenceOfCommonPrts self) -> Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceNodeOfSequenceOfCommonPrts.Value = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_Value, None, IntTools_SequenceNodeOfSequenceOfCommonPrts)
IntTools_SequenceNodeOfSequenceOfCommonPrts._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts__kill_pointed, None, IntTools_SequenceNodeOfSequenceOfCommonPrts)
IntTools_SequenceNodeOfSequenceOfCommonPrts.GetHandle = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_GetHandle, None, IntTools_SequenceNodeOfSequenceOfCommonPrts)
IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister = _IntTools.IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister
IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister(IntTools_SequenceNodeOfSequenceOfCommonPrts)

class Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_swiginit(self, _IntTools.new_Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts.Nullify = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_Nullify, None, Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts)
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts.IsNull = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_IsNull, None, Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts)
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts.GetObject = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_GetObject, None, Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts)
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts__kill_pointed, None, Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts)
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_swigregister(Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts)

def Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_DownCast(AnObject):
    return _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_DownCast(AnObject)
Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_DownCast = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCommonPrts_DownCast

class IntTools_SequenceNodeOfSequenceOfCurves(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_Curve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_SequenceNodeOfSequenceOfCurves_swiginit(self, _IntTools.new_IntTools_SequenceNodeOfSequenceOfCurves(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_Curve

        """
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCurves_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_SequenceNodeOfSequenceOfCurves self)"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCurves__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_SequenceNodeOfSequenceOfCurves self) -> Handle_IntTools_SequenceNodeOfSequenceOfCurves"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfCurves_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceNodeOfSequenceOfCurves.Value = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCurves_Value, None, IntTools_SequenceNodeOfSequenceOfCurves)
IntTools_SequenceNodeOfSequenceOfCurves._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCurves__kill_pointed, None, IntTools_SequenceNodeOfSequenceOfCurves)
IntTools_SequenceNodeOfSequenceOfCurves.GetHandle = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfCurves_GetHandle, None, IntTools_SequenceNodeOfSequenceOfCurves)
IntTools_SequenceNodeOfSequenceOfCurves_swigregister = _IntTools.IntTools_SequenceNodeOfSequenceOfCurves_swigregister
IntTools_SequenceNodeOfSequenceOfCurves_swigregister(IntTools_SequenceNodeOfSequenceOfCurves)

class Handle_IntTools_SequenceNodeOfSequenceOfCurves(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_swiginit(self, _IntTools.new_Handle_IntTools_SequenceNodeOfSequenceOfCurves(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_SequenceNodeOfSequenceOfCurves.Nullify = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_Nullify, None, Handle_IntTools_SequenceNodeOfSequenceOfCurves)
Handle_IntTools_SequenceNodeOfSequenceOfCurves.IsNull = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_IsNull, None, Handle_IntTools_SequenceNodeOfSequenceOfCurves)
Handle_IntTools_SequenceNodeOfSequenceOfCurves.GetObject = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_GetObject, None, Handle_IntTools_SequenceNodeOfSequenceOfCurves)
Handle_IntTools_SequenceNodeOfSequenceOfCurves._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves__kill_pointed, None, Handle_IntTools_SequenceNodeOfSequenceOfCurves)
Handle_IntTools_SequenceNodeOfSequenceOfCurves_swigregister = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_swigregister
Handle_IntTools_SequenceNodeOfSequenceOfCurves_swigregister(Handle_IntTools_SequenceNodeOfSequenceOfCurves)

def Handle_IntTools_SequenceNodeOfSequenceOfCurves_DownCast(AnObject):
    return _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_DownCast(AnObject)
Handle_IntTools_SequenceNodeOfSequenceOfCurves_DownCast = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfCurves_DownCast

class IntTools_SequenceNodeOfSequenceOfPntOn2Faces(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_PntOn2Faces &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swiginit(self, _IntTools.new_IntTools_SequenceNodeOfSequenceOfPntOn2Faces(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_PntOn2Faces

        """
        return _IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_SequenceNodeOfSequenceOfPntOn2Faces self)"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_SequenceNodeOfSequenceOfPntOn2Faces self) -> Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceNodeOfSequenceOfPntOn2Faces.Value = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_Value, None, IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
IntTools_SequenceNodeOfSequenceOfPntOn2Faces._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces__kill_pointed, None, IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
IntTools_SequenceNodeOfSequenceOfPntOn2Faces.GetHandle = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_GetHandle, None, IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister = _IntTools.IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister
IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister(IntTools_SequenceNodeOfSequenceOfPntOn2Faces)

class Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swiginit(self, _IntTools.new_Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces.Nullify = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_Nullify, None, Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces.IsNull = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_IsNull, None, Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces.GetObject = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_GetObject, None, Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces__kill_pointed, None, Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces)
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_swigregister(Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces)

def Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_DownCast(AnObject):
    return _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_DownCast(AnObject)
Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_DownCast = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfPntOn2Faces_DownCast

class IntTools_SequenceNodeOfSequenceOfRanges(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_Range &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_SequenceNodeOfSequenceOfRanges_swiginit(self, _IntTools.new_IntTools_SequenceNodeOfSequenceOfRanges(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRanges_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_SequenceNodeOfSequenceOfRanges self)"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRanges__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_SequenceNodeOfSequenceOfRanges self) -> Handle_IntTools_SequenceNodeOfSequenceOfRanges"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRanges_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceNodeOfSequenceOfRanges.Value = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRanges_Value, None, IntTools_SequenceNodeOfSequenceOfRanges)
IntTools_SequenceNodeOfSequenceOfRanges._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRanges__kill_pointed, None, IntTools_SequenceNodeOfSequenceOfRanges)
IntTools_SequenceNodeOfSequenceOfRanges.GetHandle = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRanges_GetHandle, None, IntTools_SequenceNodeOfSequenceOfRanges)
IntTools_SequenceNodeOfSequenceOfRanges_swigregister = _IntTools.IntTools_SequenceNodeOfSequenceOfRanges_swigregister
IntTools_SequenceNodeOfSequenceOfRanges_swigregister(IntTools_SequenceNodeOfSequenceOfRanges)

class Handle_IntTools_SequenceNodeOfSequenceOfRanges(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_swiginit(self, _IntTools.new_Handle_IntTools_SequenceNodeOfSequenceOfRanges(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_SequenceNodeOfSequenceOfRanges.Nullify = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_Nullify, None, Handle_IntTools_SequenceNodeOfSequenceOfRanges)
Handle_IntTools_SequenceNodeOfSequenceOfRanges.IsNull = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_IsNull, None, Handle_IntTools_SequenceNodeOfSequenceOfRanges)
Handle_IntTools_SequenceNodeOfSequenceOfRanges.GetObject = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_GetObject, None, Handle_IntTools_SequenceNodeOfSequenceOfRanges)
Handle_IntTools_SequenceNodeOfSequenceOfRanges._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges__kill_pointed, None, Handle_IntTools_SequenceNodeOfSequenceOfRanges)
Handle_IntTools_SequenceNodeOfSequenceOfRanges_swigregister = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_swigregister
Handle_IntTools_SequenceNodeOfSequenceOfRanges_swigregister(Handle_IntTools_SequenceNodeOfSequenceOfRanges)

def Handle_IntTools_SequenceNodeOfSequenceOfRanges_DownCast(AnObject):
    return _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_DownCast(AnObject)
Handle_IntTools_SequenceNodeOfSequenceOfRanges_DownCast = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRanges_DownCast

class IntTools_SequenceNodeOfSequenceOfRoots(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntTools_Root &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_SequenceNodeOfSequenceOfRoots_swiginit(self, _IntTools.new_IntTools_SequenceNodeOfSequenceOfRoots(*args))

    def Value(self, *args):
        """
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRoots_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_SequenceNodeOfSequenceOfRoots self)"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRoots__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_SequenceNodeOfSequenceOfRoots self) -> Handle_IntTools_SequenceNodeOfSequenceOfRoots"""
        return _IntTools.IntTools_SequenceNodeOfSequenceOfRoots_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceNodeOfSequenceOfRoots.Value = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRoots_Value, None, IntTools_SequenceNodeOfSequenceOfRoots)
IntTools_SequenceNodeOfSequenceOfRoots._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRoots__kill_pointed, None, IntTools_SequenceNodeOfSequenceOfRoots)
IntTools_SequenceNodeOfSequenceOfRoots.GetHandle = new_instancemethod(_IntTools.IntTools_SequenceNodeOfSequenceOfRoots_GetHandle, None, IntTools_SequenceNodeOfSequenceOfRoots)
IntTools_SequenceNodeOfSequenceOfRoots_swigregister = _IntTools.IntTools_SequenceNodeOfSequenceOfRoots_swigregister
IntTools_SequenceNodeOfSequenceOfRoots_swigregister(IntTools_SequenceNodeOfSequenceOfRoots)

class Handle_IntTools_SequenceNodeOfSequenceOfRoots(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_swiginit(self, _IntTools.new_Handle_IntTools_SequenceNodeOfSequenceOfRoots(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_SequenceNodeOfSequenceOfRoots.Nullify = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_Nullify, None, Handle_IntTools_SequenceNodeOfSequenceOfRoots)
Handle_IntTools_SequenceNodeOfSequenceOfRoots.IsNull = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_IsNull, None, Handle_IntTools_SequenceNodeOfSequenceOfRoots)
Handle_IntTools_SequenceNodeOfSequenceOfRoots.GetObject = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_GetObject, None, Handle_IntTools_SequenceNodeOfSequenceOfRoots)
Handle_IntTools_SequenceNodeOfSequenceOfRoots._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots__kill_pointed, None, Handle_IntTools_SequenceNodeOfSequenceOfRoots)
Handle_IntTools_SequenceNodeOfSequenceOfRoots_swigregister = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_swigregister
Handle_IntTools_SequenceNodeOfSequenceOfRoots_swigregister(Handle_IntTools_SequenceNodeOfSequenceOfRoots)

def Handle_IntTools_SequenceNodeOfSequenceOfRoots_DownCast(AnObject):
    return _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_DownCast(AnObject)
Handle_IntTools_SequenceNodeOfSequenceOfRoots_DownCast = _IntTools.Handle_IntTools_SequenceNodeOfSequenceOfRoots_DownCast

class IntTools_SequenceOfCommonPrts(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_SequenceOfCommonPrts_swiginit(self, _IntTools.new_IntTools_SequenceOfCommonPrts(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfCommonPrts &
        :rtype: IntTools_SequenceOfCommonPrts

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfCommonPrts &
        :rtype: IntTools_SequenceOfCommonPrts

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntTools_CommonPrt &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfCommonPrts &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntTools_CommonPrt &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfCommonPrts &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_CommonPrt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfCommonPrts &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_CommonPrt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfCommonPrts &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntTools_SequenceOfCommonPrts &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntTools_CommonPrt &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_CommonPrt

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCommonPrts_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceOfCommonPrts.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Clear, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Assign, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Set = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Set, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Append = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Append, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Prepend, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_InsertBefore, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_InsertAfter, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.First = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_First, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Last = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Last, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Split = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Split, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Value = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Value, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_SetValue, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_ChangeValue, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Remove, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts__kill_pointed, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts_swigregister = _IntTools.IntTools_SequenceOfCommonPrts_swigregister
IntTools_SequenceOfCommonPrts_swigregister(IntTools_SequenceOfCommonPrts)

class IntTools_SequenceOfCurves(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_SequenceOfCurves_swiginit(self, _IntTools.new_IntTools_SequenceOfCurves(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfCurves &
        :rtype: IntTools_SequenceOfCurves

        """
        return _IntTools.IntTools_SequenceOfCurves_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfCurves &
        :rtype: IntTools_SequenceOfCurves

        """
        return _IntTools.IntTools_SequenceOfCurves_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntTools_Curve &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfCurves &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntTools_Curve &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfCurves &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfCurves &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfCurves &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_Curve

        """
        return _IntTools.IntTools_SequenceOfCurves_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_Curve

        """
        return _IntTools.IntTools_SequenceOfCurves_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntTools_SequenceOfCurves &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Curve

        """
        return _IntTools.IntTools_SequenceOfCurves_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntTools_Curve &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Curve

        """
        return _IntTools.IntTools_SequenceOfCurves_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfCurves_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceOfCurves.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Clear, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Assign, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Set = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Set, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Append = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Append, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Prepend, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_InsertBefore, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_InsertAfter, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.First = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_First, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Last = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Last, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Split = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Split, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Value = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Value, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_SetValue, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_ChangeValue, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Remove, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceOfCurves__kill_pointed, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves_swigregister = _IntTools.IntTools_SequenceOfCurves_swigregister
IntTools_SequenceOfCurves_swigregister(IntTools_SequenceOfCurves)

class IntTools_SequenceOfPntOn2Faces(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_SequenceOfPntOn2Faces_swiginit(self, _IntTools.new_IntTools_SequenceOfPntOn2Faces(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfPntOn2Faces &
        :rtype: IntTools_SequenceOfPntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfPntOn2Faces &
        :rtype: IntTools_SequenceOfPntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntTools_PntOn2Faces &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfPntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntTools_PntOn2Faces &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfPntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_PntOn2Faces &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfPntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_PntOn2Faces &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfPntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_PntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_PntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntTools_SequenceOfPntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_PntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntTools_PntOn2Faces &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_PntOn2Faces

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfPntOn2Faces_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceOfPntOn2Faces.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Clear, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Assign, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Set = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Set, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Append = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Append, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Prepend, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_InsertBefore, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_InsertAfter, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.First = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_First, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Last = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Last, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Split = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Split, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Value = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Value, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_SetValue, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_ChangeValue, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Remove, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces__kill_pointed, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces_swigregister = _IntTools.IntTools_SequenceOfPntOn2Faces_swigregister
IntTools_SequenceOfPntOn2Faces_swigregister(IntTools_SequenceOfPntOn2Faces)

class IntTools_SequenceOfRanges(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_SequenceOfRanges_swiginit(self, _IntTools.new_IntTools_SequenceOfRanges(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfRanges &
        :rtype: IntTools_SequenceOfRanges

        """
        return _IntTools.IntTools_SequenceOfRanges_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfRanges &
        :rtype: IntTools_SequenceOfRanges

        """
        return _IntTools.IntTools_SequenceOfRanges_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntTools_Range &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntTools_Range &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Range &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Range &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SequenceOfRanges_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SequenceOfRanges_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntTools_SequenceOfRanges &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SequenceOfRanges_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntTools_Range &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SequenceOfRanges_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRanges_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceOfRanges.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Clear, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Assign, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Set = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Set, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Append = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Append, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Prepend, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_InsertBefore, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_InsertAfter, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.First = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_First, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Last = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Last, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Split = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Split, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Value = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Value, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_SetValue, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_ChangeValue, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Remove, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceOfRanges__kill_pointed, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges_swigregister = _IntTools.IntTools_SequenceOfRanges_swigregister
IntTools_SequenceOfRanges_swigregister(IntTools_SequenceOfRanges)

class IntTools_SequenceOfRoots(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntTools.IntTools_SequenceOfRoots_swiginit(self, _IntTools.new_IntTools_SequenceOfRoots(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfRoots &
        :rtype: IntTools_SequenceOfRoots

        """
        return _IntTools.IntTools_SequenceOfRoots_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SequenceOfRoots &
        :rtype: IntTools_SequenceOfRoots

        """
        return _IntTools.IntTools_SequenceOfRoots_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntTools_Root &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfRoots &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntTools_Root &
        :rtype: None

        :param S:
        :type S: IntTools_SequenceOfRoots &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Root &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfRoots &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntTools_Root &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntTools_SequenceOfRoots &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_SequenceOfRoots_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_SequenceOfRoots_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntTools_SequenceOfRoots &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_SequenceOfRoots_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntTools_Root &
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntTools_Root

        """
        return _IntTools.IntTools_SequenceOfRoots_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_SequenceOfRoots_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SequenceOfRoots.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Clear, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Assign, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Set = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Set, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Append = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Append, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Prepend, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_InsertBefore, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_InsertAfter, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.First = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_First, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Last = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Last, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Split = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Split, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Value = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Value, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_SetValue, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_ChangeValue, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Remove, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots._kill_pointed = new_instancemethod(_IntTools.IntTools_SequenceOfRoots__kill_pointed, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots_swigregister = _IntTools.IntTools_SequenceOfRoots_swigregister
IntTools_SequenceOfRoots_swigregister(IntTools_SequenceOfRoots)

class IntTools_StdMapNodeOfMapOfCurveSample(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: IntTools_CurveRangeSample &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_StdMapNodeOfMapOfCurveSample_swiginit(self, _IntTools.new_IntTools_StdMapNodeOfMapOfCurveSample(*args))

    def Key(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_StdMapNodeOfMapOfCurveSample_Key(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_StdMapNodeOfMapOfCurveSample self)"""
        return _IntTools.IntTools_StdMapNodeOfMapOfCurveSample__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_StdMapNodeOfMapOfCurveSample self) -> Handle_IntTools_StdMapNodeOfMapOfCurveSample"""
        return _IntTools.IntTools_StdMapNodeOfMapOfCurveSample_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_StdMapNodeOfMapOfCurveSample.Key = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfCurveSample_Key, None, IntTools_StdMapNodeOfMapOfCurveSample)
IntTools_StdMapNodeOfMapOfCurveSample._kill_pointed = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfCurveSample__kill_pointed, None, IntTools_StdMapNodeOfMapOfCurveSample)
IntTools_StdMapNodeOfMapOfCurveSample.GetHandle = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfCurveSample_GetHandle, None, IntTools_StdMapNodeOfMapOfCurveSample)
IntTools_StdMapNodeOfMapOfCurveSample_swigregister = _IntTools.IntTools_StdMapNodeOfMapOfCurveSample_swigregister
IntTools_StdMapNodeOfMapOfCurveSample_swigregister(IntTools_StdMapNodeOfMapOfCurveSample)

class Handle_IntTools_StdMapNodeOfMapOfCurveSample(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_swiginit(self, _IntTools.new_Handle_IntTools_StdMapNodeOfMapOfCurveSample(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_StdMapNodeOfMapOfCurveSample.Nullify = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_Nullify, None, Handle_IntTools_StdMapNodeOfMapOfCurveSample)
Handle_IntTools_StdMapNodeOfMapOfCurveSample.IsNull = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_IsNull, None, Handle_IntTools_StdMapNodeOfMapOfCurveSample)
Handle_IntTools_StdMapNodeOfMapOfCurveSample.GetObject = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_GetObject, None, Handle_IntTools_StdMapNodeOfMapOfCurveSample)
Handle_IntTools_StdMapNodeOfMapOfCurveSample._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample__kill_pointed, None, Handle_IntTools_StdMapNodeOfMapOfCurveSample)
Handle_IntTools_StdMapNodeOfMapOfCurveSample_swigregister = _IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_swigregister
Handle_IntTools_StdMapNodeOfMapOfCurveSample_swigregister(Handle_IntTools_StdMapNodeOfMapOfCurveSample)

def Handle_IntTools_StdMapNodeOfMapOfCurveSample_DownCast(AnObject):
    return _IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_DownCast(AnObject)
Handle_IntTools_StdMapNodeOfMapOfCurveSample_DownCast = _IntTools.Handle_IntTools_StdMapNodeOfMapOfCurveSample_DownCast

class IntTools_StdMapNodeOfMapOfSurfaceSample(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_swiginit(self, _IntTools.new_IntTools_StdMapNodeOfMapOfSurfaceSample(*args))

    def Key(self, *args):
        """
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_Key(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_StdMapNodeOfMapOfSurfaceSample self)"""
        return _IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_StdMapNodeOfMapOfSurfaceSample self) -> Handle_IntTools_StdMapNodeOfMapOfSurfaceSample"""
        return _IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_StdMapNodeOfMapOfSurfaceSample.Key = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_Key, None, IntTools_StdMapNodeOfMapOfSurfaceSample)
IntTools_StdMapNodeOfMapOfSurfaceSample._kill_pointed = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample__kill_pointed, None, IntTools_StdMapNodeOfMapOfSurfaceSample)
IntTools_StdMapNodeOfMapOfSurfaceSample.GetHandle = new_instancemethod(_IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_GetHandle, None, IntTools_StdMapNodeOfMapOfSurfaceSample)
IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister = _IntTools.IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister
IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister(IntTools_StdMapNodeOfMapOfSurfaceSample)

class Handle_IntTools_StdMapNodeOfMapOfSurfaceSample(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_swiginit(self, _IntTools.new_Handle_IntTools_StdMapNodeOfMapOfSurfaceSample(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_StdMapNodeOfMapOfSurfaceSample.Nullify = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_Nullify, None, Handle_IntTools_StdMapNodeOfMapOfSurfaceSample)
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample.IsNull = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_IsNull, None, Handle_IntTools_StdMapNodeOfMapOfSurfaceSample)
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample.GetObject = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_GetObject, None, Handle_IntTools_StdMapNodeOfMapOfSurfaceSample)
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample__kill_pointed, None, Handle_IntTools_StdMapNodeOfMapOfSurfaceSample)
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister = _IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_swigregister(Handle_IntTools_StdMapNodeOfMapOfSurfaceSample)

def Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_DownCast(AnObject):
    return _IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_DownCast(AnObject)
Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_DownCast = _IntTools.Handle_IntTools_StdMapNodeOfMapOfSurfaceSample_DownCast

class IntTools_SurfaceRangeLocalizeData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theNbSampleU:
        :type theNbSampleU: int
        :param theNbSampleV:
        :type theNbSampleV: int
        :param theMinRangeU:
        :type theMinRangeU: float
        :param theMinRangeV:
        :type theMinRangeV: float
        :rtype: None

        :param Other:
        :type Other: IntTools_SurfaceRangeLocalizeData &
        :rtype: None

        """
        _IntTools.IntTools_SurfaceRangeLocalizeData_swiginit(self, _IntTools.new_IntTools_SurfaceRangeLocalizeData(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SurfaceRangeLocalizeData &
        :rtype: IntTools_SurfaceRangeLocalizeData

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SurfaceRangeLocalizeData &
        :rtype: IntTools_SurfaceRangeLocalizeData

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_Set(self, *args)


    def GetNbSampleU(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleU(self, *args)


    def GetNbSampleV(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleV(self, *args)


    def GetMinRangeU(self, *args):
        """
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeU(self, *args)


    def GetMinRangeV(self, *args):
        """
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeV(self, *args)


    def AddOutRange(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_SurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_AddOutRange(self, *args)


    def AddBox(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_SurfaceRangeSample &
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_AddBox(self, *args)


    def FindBox(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_SurfaceRangeSample &
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: bool

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_FindBox(self, *args)


    def IsRangeOut(self, *args):
        """
        :param theRange:
        :type theRange: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_IsRangeOut(self, *args)


    def ListRangeOut(self, *args):
        """
        :param theList:
        :type theList: IntTools_ListOfSurfaceRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_ListRangeOut(self, *args)


    def RemoveRangeOutAll(self, *args):
        """
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_RemoveRangeOutAll(self, *args)


    def SetGridDeflection(self, *args):
        """
        * Set the grid deflection.

        :param theDeflection:
        :type theDeflection: float
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetGridDeflection(self, *args)


    def GetGridDeflection(self, *args):
        """
        * Query the grid deflection.

        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetGridDeflection(self, *args)


    def SetRangeUGrid(self, *args):
        """
        * Set the range U of the grid of points.

        :param theNbUGrid:
        :type theNbUGrid: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeUGrid(self, *args)


    def GetRangeUGrid(self, *args):
        """
        * Query the range U of the grid of points.

        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeUGrid(self, *args)


    def SetUParam(self, *args):
        """
        * Set the U parameter of the grid points at that index.

        :param theIndex:
        :type theIndex: int
        :param theUParam:
        :type theUParam: float
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetUParam(self, *args)


    def GetUParam(self, *args):
        """
        * Query the U parameter of the grid points at that index.

        :param theIndex:
        :type theIndex: int
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetUParam(self, *args)


    def SetRangeVGrid(self, *args):
        """
        * Set the range V of the grid of points.

        :param theNbVGrid:
        :type theNbVGrid: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeVGrid(self, *args)


    def GetRangeVGrid(self, *args):
        """
        * Query the range V of the grid of points.

        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeVGrid(self, *args)


    def SetVParam(self, *args):
        """
        * Set the V parameter of the grid points at that index.

        :param theIndex:
        :type theIndex: int
        :param theVParam:
        :type theVParam: float
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetVParam(self, *args)


    def GetVParam(self, *args):
        """
        * Query the V parameter of the grid points at that index.

        :param theIndex:
        :type theIndex: int
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetVParam(self, *args)


    def SetGridPoint(self, *args):
        """
        * Set the grid point.

        :param theUIndex:
        :type theUIndex: int
        :param theVIndex:
        :type theVIndex: int
        :param thePoint:
        :type thePoint: gp_Pnt
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetGridPoint(self, *args)


    def GetGridPoint(self, *args):
        """
        * Set the grid point.

        :param theUIndex:
        :type theUIndex: int
        :param theVIndex:
        :type theVIndex: int
        :rtype: gp_Pnt

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetGridPoint(self, *args)


    def SetFrame(self, *args):
        """
        * Sets the frame area. Used to work with grid points.

        :param theUMin:
        :type theUMin: float
        :param theUMax:
        :type theUMax: float
        :param theVMin:
        :type theVMin: float
        :param theVMax:
        :type theVMax: float
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetFrame(self, *args)


    def GetNBUPointsInFrame(self, *args):
        """
        * Returns the number of grid points on U direction in frame.

        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNBUPointsInFrame(self, *args)


    def GetNBVPointsInFrame(self, *args):
        """
        * Returns the number of grid points on V direction in frame.

        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNBVPointsInFrame(self, *args)


    def GetPointInFrame(self, *args):
        """
        * Returns the grid point in frame.

        :param theUIndex:
        :type theUIndex: int
        :param theVIndex:
        :type theVIndex: int
        :rtype: gp_Pnt

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetPointInFrame(self, *args)


    def GetUParamInFrame(self, *args):
        """
        * Query the U parameter of the grid points at that index in frame.

        :param theIndex:
        :type theIndex: int
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetUParamInFrame(self, *args)


    def GetVParamInFrame(self, *args):
        """
        * Query the V parameter of the grid points at that index in frame.

        :param theIndex:
        :type theIndex: int
        :rtype: float

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetVParamInFrame(self, *args)


    def ClearGrid(self, *args):
        """
        * Clears the grid of points.

        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_ClearGrid(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SurfaceRangeLocalizeData.Assign = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_Assign, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.Set = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_Set, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNbSampleU = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleU, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNbSampleV = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleV, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetMinRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeU, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetMinRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeV, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.AddOutRange = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_AddOutRange, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.AddBox = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_AddBox, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.FindBox = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_FindBox, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.IsRangeOut = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_IsRangeOut, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.ListRangeOut = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_ListRangeOut, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.RemoveRangeOutAll = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_RemoveRangeOutAll, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetGridDeflection = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetGridDeflection, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetGridDeflection = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetGridDeflection, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetRangeUGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeUGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetRangeUGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeUGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetUParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetUParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetUParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetUParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetRangeVGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeVGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetRangeVGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeVGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetVParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetVParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetVParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetVParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetGridPoint = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetGridPoint, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetGridPoint = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetGridPoint, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNBUPointsInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNBUPointsInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNBVPointsInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNBVPointsInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetPointInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetPointInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetUParamInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetUParamInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetVParamInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetVParamInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.ClearGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_ClearGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData._kill_pointed = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData__kill_pointed, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData_swigregister = _IntTools.IntTools_SurfaceRangeLocalizeData_swigregister
IntTools_SurfaceRangeLocalizeData_swigregister(IntTools_SurfaceRangeLocalizeData)

class IntTools_SurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theIndexU:
        :type theIndexU: int
        :param theDepthU:
        :type theDepthU: int
        :param theIndexV:
        :type theIndexV: int
        :param theDepthV:
        :type theDepthV: int
        :rtype: None

        :param theRangeU:
        :type theRangeU: IntTools_CurveRangeSample &
        :param theRangeV:
        :type theRangeV: IntTools_CurveRangeSample &
        :rtype: None

        :param Other:
        :type Other: IntTools_SurfaceRangeSample &
        :rtype: None

        """
        _IntTools.IntTools_SurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_SurfaceRangeSample(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntTools_SurfaceRangeSample &
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_SurfaceRangeSample_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntTools_SurfaceRangeSample &
        :rtype: IntTools_SurfaceRangeSample

        """
        return _IntTools.IntTools_SurfaceRangeSample_Set(self, *args)


    def SetRanges(self, *args):
        """
        :param theRangeU:
        :type theRangeU: IntTools_CurveRangeSample &
        :param theRangeV:
        :type theRangeV: IntTools_CurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetRanges(self, *args)


    def GetRanges(self, *args):
        """
        :param theRangeU:
        :type theRangeU: IntTools_CurveRangeSample &
        :param theRangeV:
        :type theRangeV: IntTools_CurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRanges(self, *args)


    def SetIndexes(self, *args):
        """
        :param theIndexU:
        :type theIndexU: int
        :param theIndexV:
        :type theIndexV: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexes(self, *args)


    def GetIndexes(self, *args):
        """
        :param theIndexU:
        :type theIndexU: int &
        :param theIndexV:
        :type theIndexV: int &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexes(self, *args)


    def GetDepths(self, *args):
        """
        :param theDepthU:
        :type theDepthU: int &
        :param theDepthV:
        :type theDepthV: int &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetDepths(self, *args)


    def SetSampleRangeU(self, *args):
        """
        :param theRangeSampleU:
        :type theRangeSampleU: IntTools_CurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetSampleRangeU(self, *args)


    def GetSampleRangeU(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetSampleRangeU(self, *args)


    def SetSampleRangeV(self, *args):
        """
        :param theRangeSampleV:
        :type theRangeSampleV: IntTools_CurveRangeSample &
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetSampleRangeV(self, *args)


    def GetSampleRangeV(self, *args):
        """
        :rtype: IntTools_CurveRangeSample

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetSampleRangeV(self, *args)


    def SetIndexU(self, *args):
        """
        :param theIndexU:
        :type theIndexU: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexU(self, *args)


    def GetIndexU(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexU(self, *args)


    def SetIndexV(self, *args):
        """
        :param theIndexV:
        :type theIndexV: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexV(self, *args)


    def GetIndexV(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexV(self, *args)


    def SetDepthU(self, *args):
        """
        :param theDepthU:
        :type theDepthU: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetDepthU(self, *args)


    def GetDepthU(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetDepthU(self, *args)


    def SetDepthV(self, *args):
        """
        :param theDepthV:
        :type theDepthV: int
        :rtype: None

        """
        return _IntTools.IntTools_SurfaceRangeSample_SetDepthV(self, *args)


    def GetDepthV(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetDepthV(self, *args)


    def GetRangeU(self, *args):
        """
        :param theFirstU:
        :type theFirstU: float
        :param theLastU:
        :type theLastU: float
        :param theNbSampleU:
        :type theNbSampleU: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeU(self, *args)


    def GetRangeV(self, *args):
        """
        :param theFirstV:
        :type theFirstV: float
        :param theLastV:
        :type theLastV: float
        :param theNbSampleV:
        :type theNbSampleV: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeV(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_SurfaceRangeSample_IsEqual(self, *args)


    def GetRangeIndexUDeeper(self, *args):
        """
        :param theNbSampleU:
        :type theNbSampleU: int
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeIndexUDeeper(self, *args)


    def GetRangeIndexVDeeper(self, *args):
        """
        :param theNbSampleV:
        :type theNbSampleV: int
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeIndexVDeeper(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SurfaceRangeSample.Assign = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_Assign, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.Set = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_Set, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetRanges = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetRanges, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRanges = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRanges, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexes = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexes, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexes = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexes, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepths = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepths, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetSampleRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetSampleRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetSampleRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetSampleRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetSampleRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetSampleRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetSampleRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetSampleRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetDepthU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetDepthU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepthU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepthU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetDepthV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetDepthV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepthV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepthV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.IsEqual = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_IsEqual, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeIndexUDeeper = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeIndexUDeeper, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeIndexVDeeper = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeIndexVDeeper, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample__kill_pointed, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample_swigregister = _IntTools.IntTools_SurfaceRangeSample_swigregister
IntTools_SurfaceRangeSample_swigregister(IntTools_SurfaceRangeSample)

class IntTools_SurfaceRangeSampleMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        * Returns a HasCode value for the Key <K> in the range 0..Upper.

        :param K:
        :type K: IntTools_SurfaceRangeSample &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _IntTools.IntTools_SurfaceRangeSampleMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

        :param S1:
        :type S1: IntTools_SurfaceRangeSample &
        :param S2:
        :type S2: IntTools_SurfaceRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _IntTools.IntTools_SurfaceRangeSampleMapHasher_swiginit(self, _IntTools.new_IntTools_SurfaceRangeSampleMapHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_SurfaceRangeSampleMapHasher._kill_pointed = new_instancemethod(_IntTools.IntTools_SurfaceRangeSampleMapHasher__kill_pointed, None, IntTools_SurfaceRangeSampleMapHasher)
IntTools_SurfaceRangeSampleMapHasher_swigregister = _IntTools.IntTools_SurfaceRangeSampleMapHasher_swigregister
IntTools_SurfaceRangeSampleMapHasher_swigregister(IntTools_SurfaceRangeSampleMapHasher)

def IntTools_SurfaceRangeSampleMapHasher_HashCode(*args):
    """
    * Returns a HasCode value for the Key <K> in the range 0..Upper.

    :param K:
    :type K: IntTools_SurfaceRangeSample &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _IntTools.IntTools_SurfaceRangeSampleMapHasher_HashCode(*args)

def IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args):
    """
    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

    :param S1:
    :type S1: IntTools_SurfaceRangeSample &
    :param S2:
    :type S2: IntTools_SurfaceRangeSample &
    :rtype: bool

    """
    return _IntTools.IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args)

class IntTools_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeVV(*args):
        """
        * Computes distance between vertex V1 and vertex V2, if the distance is less than sum of vertex tolerances returns zero, otherwise returns negative value

        :param V1:
        :type V1: TopoDS_Vertex &
        :param V2:
        :type V2: TopoDS_Vertex &
        :rtype: int

        """
        return _IntTools.IntTools_Tools_ComputeVV(*args)

    ComputeVV = staticmethod(ComputeVV)

    def HasInternalEdge(*args):
        """
        * Returns True if wire aW contains edges with INTERNAL orientation

        :param aW:
        :type aW: TopoDS_Wire &
        :rtype: bool

        """
        return _IntTools.IntTools_Tools_HasInternalEdge(*args)

    HasInternalEdge = staticmethod(HasInternalEdge)

    def MakeFaceFromWireAndFace(*args):
        """
        * Build a face based on surface of given face aF and bounded by wire aW

        :param aW:
        :type aW: TopoDS_Wire &
        :param aF:
        :type aF: TopoDS_Face &
        :param aFNew:
        :type aFNew: TopoDS_Face &
        :rtype: void

        """
        return _IntTools.IntTools_Tools_MakeFaceFromWireAndFace(*args)

    MakeFaceFromWireAndFace = staticmethod(MakeFaceFromWireAndFace)

    def ClassifyPointByFace(*args):
        """
        * 

        :param aF:
        :type aF: TopoDS_Face &
        :param P:
        :type P: gp_Pnt2d
        :rtype: TopAbs_State

        """
        return _IntTools.IntTools_Tools_ClassifyPointByFace(*args)

    ClassifyPointByFace = staticmethod(ClassifyPointByFace)

    def IsMiddlePointsEqual(*args):
        """
        * Gets boundary of parameters of E1 and E2. Computes 3d points on each corresponded to average parameters. Returns True if distance between computed points is less than sum of edge tolerance, otherwise returns False.

        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :rtype: bool

        """
        return _IntTools.IntTools_Tools_IsMiddlePointsEqual(*args)

    IsMiddlePointsEqual = staticmethod(IsMiddlePointsEqual)

    def IsVertex(*args):
        """
        * Computes square distance between a point on the edge E corresponded to parameter t and vertices of edge E. Returns True if this distance is less than square tolerance of vertex, otherwise returns false.

        :param E:
        :type E: TopoDS_Edge &
        :param t:
        :type t: float
        :rtype: bool

        * Returns True if square distance between vertex V and a point on the edge E corresponded to parameter t is less than square tolerance of V

        :param E:
        :type E: TopoDS_Edge &
        :param V:
        :type V: TopoDS_Vertex &
        :param t:
        :type t: float
        :rtype: bool

        * Returns True if IsVertx for middle parameter of fist range and first edge returns True and if IsVertex for middle parameter of second range and second range returns True, otherwise returns False

        :param aCmnPrt:
        :type aCmnPrt: IntTools_CommonPrt &
        :rtype: bool

        * Returns True if the distance between point aP and vertex aV is less or equal to sum of aTolPV and vertex tolerance, otherwise returns False

        :param aP:
        :type aP: gp_Pnt
        :param aTolPV:
        :type aTolPV: float
        :param aV:
        :type aV: TopoDS_Vertex &
        :rtype: bool

        """
        return _IntTools.IntTools_Tools_IsVertex(*args)

    IsVertex = staticmethod(IsVertex)

    def IntermediatePoint(*args):
        """
        * Returns some value between aFirst and aLast

        :param aFirst:
        :type aFirst: float
        :param aLast:
        :type aLast: float
        :rtype: float

        """
        return _IntTools.IntTools_Tools_IntermediatePoint(*args)

    IntermediatePoint = staticmethod(IntermediatePoint)

    def SplitCurve(*args):
        """
        * Split aC by average parameter if aC is closed in 3D. Returns positive value if splitting has been done, otherwise returns zero.

        :param aC:
        :type aC: IntTools_Curve &
        :param aS:
        :type aS: IntTools_SequenceOfCurves &
        :rtype: int

        """
        return _IntTools.IntTools_Tools_SplitCurve(*args)

    SplitCurve = staticmethod(SplitCurve)

    def RejectLines(*args):
        """
        * Puts curves from aSIn to aSOut except those curves that are coincide with first curve from aSIn.

        :param aSIn:
        :type aSIn: IntTools_SequenceOfCurves &
        :param aSOut:
        :type aSOut: IntTools_SequenceOfCurves &
        :rtype: void

        """
        return _IntTools.IntTools_Tools_RejectLines(*args)

    RejectLines = staticmethod(RejectLines)

    def IsDirsCoinside(*args):
        """
        * Returns True if D1 and D2 coinside

        :param D1:
        :type D1: gp_Dir
        :param D2:
        :type D2: gp_Dir
        :rtype: bool

        * Returns True if D1 and D2 coinside with given tolerance

        :param D1:
        :type D1: gp_Dir
        :param D2:
        :type D2: gp_Dir
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _IntTools.IntTools_Tools_IsDirsCoinside(*args)

    IsDirsCoinside = staticmethod(IsDirsCoinside)

    def IsClosed(*args):
        """
        * Returns True if aC is BoundedCurve from Geom and the distance between first point of the curve aC and last point is less than 1.e-12

        :param aC:
        :type aC: Handle_Geom_Curve &
        :rtype: bool

        """
        return _IntTools.IntTools_Tools_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def CurveTolerance(*args):
        """
        * Returns adaptive tolerance for given aTolBase if aC is trimmed curve and basis curve is parabola, otherwise returns value of aTolBase

        :param aC:
        :type aC: Handle_Geom_Curve &
        :param aTolBase:
        :type aTolBase: float
        :rtype: float

        """
        return _IntTools.IntTools_Tools_CurveTolerance(*args)

    CurveTolerance = staticmethod(CurveTolerance)

    def __init__(self):
        _IntTools.IntTools_Tools_swiginit(self, _IntTools.new_IntTools_Tools())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_Tools._kill_pointed = new_instancemethod(_IntTools.IntTools_Tools__kill_pointed, None, IntTools_Tools)
IntTools_Tools_swigregister = _IntTools.IntTools_Tools_swigregister
IntTools_Tools_swigregister(IntTools_Tools)

def IntTools_Tools_ComputeVV(*args):
    """
    * Computes distance between vertex V1 and vertex V2, if the distance is less than sum of vertex tolerances returns zero, otherwise returns negative value

    :param V1:
    :type V1: TopoDS_Vertex &
    :param V2:
    :type V2: TopoDS_Vertex &
    :rtype: int

    """
    return _IntTools.IntTools_Tools_ComputeVV(*args)

def IntTools_Tools_HasInternalEdge(*args):
    """
    * Returns True if wire aW contains edges with INTERNAL orientation

    :param aW:
    :type aW: TopoDS_Wire &
    :rtype: bool

    """
    return _IntTools.IntTools_Tools_HasInternalEdge(*args)

def IntTools_Tools_MakeFaceFromWireAndFace(*args):
    """
    * Build a face based on surface of given face aF and bounded by wire aW

    :param aW:
    :type aW: TopoDS_Wire &
    :param aF:
    :type aF: TopoDS_Face &
    :param aFNew:
    :type aFNew: TopoDS_Face &
    :rtype: void

    """
    return _IntTools.IntTools_Tools_MakeFaceFromWireAndFace(*args)

def IntTools_Tools_ClassifyPointByFace(*args):
    """
    * 

    :param aF:
    :type aF: TopoDS_Face &
    :param P:
    :type P: gp_Pnt2d
    :rtype: TopAbs_State

    """
    return _IntTools.IntTools_Tools_ClassifyPointByFace(*args)

def IntTools_Tools_IsMiddlePointsEqual(*args):
    """
    * Gets boundary of parameters of E1 and E2. Computes 3d points on each corresponded to average parameters. Returns True if distance between computed points is less than sum of edge tolerance, otherwise returns False.

    :param E1:
    :type E1: TopoDS_Edge &
    :param E2:
    :type E2: TopoDS_Edge &
    :rtype: bool

    """
    return _IntTools.IntTools_Tools_IsMiddlePointsEqual(*args)

def IntTools_Tools_IsVertex(*args):
    """
    * Computes square distance between a point on the edge E corresponded to parameter t and vertices of edge E. Returns True if this distance is less than square tolerance of vertex, otherwise returns false.

    :param E:
    :type E: TopoDS_Edge &
    :param t:
    :type t: float
    :rtype: bool

    * Returns True if square distance between vertex V and a point on the edge E corresponded to parameter t is less than square tolerance of V

    :param E:
    :type E: TopoDS_Edge &
    :param V:
    :type V: TopoDS_Vertex &
    :param t:
    :type t: float
    :rtype: bool

    * Returns True if IsVertx for middle parameter of fist range and first edge returns True and if IsVertex for middle parameter of second range and second range returns True, otherwise returns False

    :param aCmnPrt:
    :type aCmnPrt: IntTools_CommonPrt &
    :rtype: bool

    * Returns True if the distance between point aP and vertex aV is less or equal to sum of aTolPV and vertex tolerance, otherwise returns False

    :param aP:
    :type aP: gp_Pnt
    :param aTolPV:
    :type aTolPV: float
    :param aV:
    :type aV: TopoDS_Vertex &
    :rtype: bool

    """
    return _IntTools.IntTools_Tools_IsVertex(*args)

def IntTools_Tools_IntermediatePoint(*args):
    """
    * Returns some value between aFirst and aLast

    :param aFirst:
    :type aFirst: float
    :param aLast:
    :type aLast: float
    :rtype: float

    """
    return _IntTools.IntTools_Tools_IntermediatePoint(*args)

def IntTools_Tools_SplitCurve(*args):
    """
    * Split aC by average parameter if aC is closed in 3D. Returns positive value if splitting has been done, otherwise returns zero.

    :param aC:
    :type aC: IntTools_Curve &
    :param aS:
    :type aS: IntTools_SequenceOfCurves &
    :rtype: int

    """
    return _IntTools.IntTools_Tools_SplitCurve(*args)

def IntTools_Tools_RejectLines(*args):
    """
    * Puts curves from aSIn to aSOut except those curves that are coincide with first curve from aSIn.

    :param aSIn:
    :type aSIn: IntTools_SequenceOfCurves &
    :param aSOut:
    :type aSOut: IntTools_SequenceOfCurves &
    :rtype: void

    """
    return _IntTools.IntTools_Tools_RejectLines(*args)

def IntTools_Tools_IsDirsCoinside(*args):
    """
    * Returns True if D1 and D2 coinside

    :param D1:
    :type D1: gp_Dir
    :param D2:
    :type D2: gp_Dir
    :rtype: bool

    * Returns True if D1 and D2 coinside with given tolerance

    :param D1:
    :type D1: gp_Dir
    :param D2:
    :type D2: gp_Dir
    :param aTol:
    :type aTol: float
    :rtype: bool

    """
    return _IntTools.IntTools_Tools_IsDirsCoinside(*args)

def IntTools_Tools_IsClosed(*args):
    """
    * Returns True if aC is BoundedCurve from Geom and the distance between first point of the curve aC and last point is less than 1.e-12

    :param aC:
    :type aC: Handle_Geom_Curve &
    :rtype: bool

    """
    return _IntTools.IntTools_Tools_IsClosed(*args)

def IntTools_Tools_CurveTolerance(*args):
    """
    * Returns adaptive tolerance for given aTolBase if aC is trimmed curve and basis curve is parabola, otherwise returns value of aTolBase

    :param aC:
    :type aC: Handle_Geom_Curve &
    :param aTolBase:
    :type aTolBase: float
    :rtype: float

    """
    return _IntTools.IntTools_Tools_CurveTolerance(*args)

class IntTools_TopolTool(OCC.Adaptor3d.Adaptor3d_TopolTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Initializes me by surface

        :param theSurface:
        :type theSurface: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _IntTools.IntTools_TopolTool_swiginit(self, _IntTools.new_IntTools_TopolTool(*args))

    def Initialize(self, *args):
        """
        * Redefined empty initializer Warning: Raises the exception NotImplemented

        :rtype: void

        * Initializes me by surface

        :param theSurface:
        :type theSurface: Handle_Adaptor3d_HSurface &
        :rtype: void

        """
        return _IntTools.IntTools_TopolTool_Initialize(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntTools_TopolTool self)"""
        return _IntTools.IntTools_TopolTool__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntTools_TopolTool self) -> Handle_IntTools_TopolTool"""
        return _IntTools.IntTools_TopolTool_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_TopolTool.Initialize = new_instancemethod(_IntTools.IntTools_TopolTool_Initialize, None, IntTools_TopolTool)
IntTools_TopolTool._kill_pointed = new_instancemethod(_IntTools.IntTools_TopolTool__kill_pointed, None, IntTools_TopolTool)
IntTools_TopolTool.GetHandle = new_instancemethod(_IntTools.IntTools_TopolTool_GetHandle, None, IntTools_TopolTool)
IntTools_TopolTool_swigregister = _IntTools.IntTools_TopolTool_swigregister
IntTools_TopolTool_swigregister(IntTools_TopolTool)

class Handle_IntTools_TopolTool(OCC.Adaptor3d.Handle_Adaptor3d_TopolTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.Handle_IntTools_TopolTool_swiginit(self, _IntTools.new_Handle_IntTools_TopolTool(*args))
    DownCast = staticmethod(_IntTools.Handle_IntTools_TopolTool_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntTools_TopolTool.Nullify = new_instancemethod(_IntTools.Handle_IntTools_TopolTool_Nullify, None, Handle_IntTools_TopolTool)
Handle_IntTools_TopolTool.IsNull = new_instancemethod(_IntTools.Handle_IntTools_TopolTool_IsNull, None, Handle_IntTools_TopolTool)
Handle_IntTools_TopolTool.GetObject = new_instancemethod(_IntTools.Handle_IntTools_TopolTool_GetObject, None, Handle_IntTools_TopolTool)
Handle_IntTools_TopolTool._kill_pointed = new_instancemethod(_IntTools.Handle_IntTools_TopolTool__kill_pointed, None, Handle_IntTools_TopolTool)
Handle_IntTools_TopolTool_swigregister = _IntTools.Handle_IntTools_TopolTool_swigregister
Handle_IntTools_TopolTool_swigregister(Handle_IntTools_TopolTool)

def Handle_IntTools_TopolTool_DownCast(AnObject):
    return _IntTools.Handle_IntTools_TopolTool_DownCast(AnObject)
Handle_IntTools_TopolTool_DownCast = _IntTools.Handle_IntTools_TopolTool_DownCast

class IntTools_CurveRangeSample(IntTools_BaseRangeSample):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        _IntTools.IntTools_CurveRangeSample_swiginit(self, _IntTools.new_IntTools_CurveRangeSample(*args))

    def SetRangeIndex(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _IntTools.IntTools_CurveRangeSample_SetRangeIndex(self, *args)


    def GetRangeIndex(self, *args):
        """
        :rtype: int

        """
        return _IntTools.IntTools_CurveRangeSample_GetRangeIndex(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: IntTools_CurveRangeSample &
        :rtype: bool

        """
        return _IntTools.IntTools_CurveRangeSample_IsEqual(self, *args)


    def GetRange(self, *args):
        """
        :param theFirst:
        :type theFirst: float
        :param theLast:
        :type theLast: float
        :param theNbSample:
        :type theNbSample: int
        :rtype: IntTools_Range

        """
        return _IntTools.IntTools_CurveRangeSample_GetRange(self, *args)


    def GetRangeIndexDeeper(self, *args):
        """
        :param theNbSample:
        :type theNbSample: int
        :rtype: int

        """
        return _IntTools.IntTools_CurveRangeSample_GetRangeIndexDeeper(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntTools_CurveRangeSample.SetRangeIndex = new_instancemethod(_IntTools.IntTools_CurveRangeSample_SetRangeIndex, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.GetRangeIndex = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRangeIndex, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.IsEqual = new_instancemethod(_IntTools.IntTools_CurveRangeSample_IsEqual, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.GetRange = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRange, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.GetRangeIndexDeeper = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRangeIndexDeeper, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample._kill_pointed = new_instancemethod(_IntTools.IntTools_CurveRangeSample__kill_pointed, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample_swigregister = _IntTools.IntTools_CurveRangeSample_swigregister
IntTools_CurveRangeSample_swigregister(IntTools_CurveRangeSample)



