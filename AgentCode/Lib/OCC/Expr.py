# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Expr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Expr', [dirname(__file__)])
        except ImportError:
            import _Expr
            return _Expr
        if fp is not None:
            try:
                _mod = imp.load_module('_Expr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Expr = swig_import_helper()
    del swig_import_helper
else:
    import _Expr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Expr.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Expr.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Expr.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Expr.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Expr.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Expr.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Expr.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Expr.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Expr.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Expr.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Expr.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Expr.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Expr.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Expr.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Expr.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Expr.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Expr.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Expr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.TColStd
import OCC.TCollection
class expr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CopyShare(*args):
        """
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.expr_CopyShare(*args)

    CopyShare = staticmethod(CopyShare)

    def NbOfFreeVariables(*args):
        """
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: int

        :param exp:
        :type exp: Handle_Expr_GeneralRelation &
        :rtype: int

        """
        return _Expr.expr_NbOfFreeVariables(*args)

    NbOfFreeVariables = staticmethod(NbOfFreeVariables)

    def Sign(*args):
        """
        :param val:
        :type val: float
        :rtype: float

        """
        return _Expr.expr_Sign(*args)

    Sign = staticmethod(Sign)

    def __init__(self):
        _Expr.expr_swiginit(self, _Expr.new_expr())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


expr._kill_pointed = new_instancemethod(_Expr.expr__kill_pointed, None, expr)
expr_swigregister = _Expr.expr_swigregister
expr_swigregister(expr)

def expr_CopyShare(*args):
    """
    :param exp:
    :type exp: Handle_Expr_GeneralExpression &
    :rtype: Handle_Expr_GeneralExpression

    """
    return _Expr.expr_CopyShare(*args)

def expr_NbOfFreeVariables(*args):
    """
    :param exp:
    :type exp: Handle_Expr_GeneralExpression &
    :rtype: int

    :param exp:
    :type exp: Handle_Expr_GeneralRelation &
    :rtype: int

    """
    return _Expr.expr_NbOfFreeVariables(*args)

def expr_Sign(*args):
    """
    :param val:
    :type val: float
    :rtype: float

    """
    return _Expr.expr_Sign(*args)

class Expr_Array1OfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Expr_GeneralExpression &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Expr.Expr_Array1OfGeneralExpression_swiginit(self, _Expr.new_Expr_Array1OfGeneralExpression(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_Array1OfGeneralExpression_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_Array1OfGeneralExpression_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Expr.Expr_Array1OfGeneralExpression_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfGeneralExpression &
        :rtype: Expr_Array1OfGeneralExpression

        """
        return _Expr.Expr_Array1OfGeneralExpression_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfGeneralExpression &
        :rtype: Expr_Array1OfGeneralExpression

        """
        return _Expr.Expr_Array1OfGeneralExpression_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfGeneralExpression_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfGeneralExpression_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfGeneralExpression_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_Array1OfGeneralExpression_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_Array1OfGeneralExpression_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_Array1OfGeneralExpression_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Array1OfGeneralExpression.Init = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Init, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Destroy = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Destroy, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_IsAllocated, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Assign = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Assign, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Set = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Set, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Length = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Length, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Lower = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Lower, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Upper = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Upper, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.SetValue = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_SetValue, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Value = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Value, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_ChangeValue, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression._kill_pointed = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression__kill_pointed, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression_swigregister = _Expr.Expr_Array1OfGeneralExpression_swigregister
Expr_Array1OfGeneralExpression_swigregister(Expr_Array1OfGeneralExpression)

class Expr_Array1OfNamedUnknown(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Expr_NamedUnknown &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Expr.Expr_Array1OfNamedUnknown_swiginit(self, _Expr.new_Expr_Array1OfNamedUnknown(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Expr_NamedUnknown &
        :rtype: None

        """
        return _Expr.Expr_Array1OfNamedUnknown_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_Array1OfNamedUnknown_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Expr.Expr_Array1OfNamedUnknown_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfNamedUnknown &
        :rtype: Expr_Array1OfNamedUnknown

        """
        return _Expr.Expr_Array1OfNamedUnknown_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfNamedUnknown &
        :rtype: Expr_Array1OfNamedUnknown

        """
        return _Expr.Expr_Array1OfNamedUnknown_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfNamedUnknown_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfNamedUnknown_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfNamedUnknown_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Expr_NamedUnknown &
        :rtype: None

        """
        return _Expr.Expr_Array1OfNamedUnknown_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_Array1OfNamedUnknown_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_Array1OfNamedUnknown_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Array1OfNamedUnknown.Init = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Init, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Destroy = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Destroy, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_IsAllocated, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Assign = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Assign, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Set = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Set, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Length = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Length, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Lower = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Lower, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Upper = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Upper, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.SetValue = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_SetValue, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Value = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Value, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_ChangeValue, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown._kill_pointed = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown__kill_pointed, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown_swigregister = _Expr.Expr_Array1OfNamedUnknown_swigregister
Expr_Array1OfNamedUnknown_swigregister(Expr_Array1OfNamedUnknown)

class Expr_Array1OfSingleRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Expr_SingleRelation &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Expr.Expr_Array1OfSingleRelation_swiginit(self, _Expr.new_Expr_Array1OfSingleRelation(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Expr_SingleRelation &
        :rtype: None

        """
        return _Expr.Expr_Array1OfSingleRelation_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_Array1OfSingleRelation_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Expr.Expr_Array1OfSingleRelation_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfSingleRelation &
        :rtype: Expr_Array1OfSingleRelation

        """
        return _Expr.Expr_Array1OfSingleRelation_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_Array1OfSingleRelation &
        :rtype: Expr_Array1OfSingleRelation

        """
        return _Expr.Expr_Array1OfSingleRelation_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfSingleRelation_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfSingleRelation_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Expr.Expr_Array1OfSingleRelation_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Expr_SingleRelation &
        :rtype: None

        """
        return _Expr.Expr_Array1OfSingleRelation_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_SingleRelation

        """
        return _Expr.Expr_Array1OfSingleRelation_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_SingleRelation

        """
        return _Expr.Expr_Array1OfSingleRelation_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Array1OfSingleRelation.Init = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Init, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Destroy = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Destroy, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_IsAllocated, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Assign = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Assign, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Set = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Set, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Length = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Length, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Lower = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Lower, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Upper = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Upper, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.SetValue = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_SetValue, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Value = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Value, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_ChangeValue, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation._kill_pointed = new_instancemethod(_Expr.Expr_Array1OfSingleRelation__kill_pointed, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation_swigregister = _Expr.Expr_Array1OfSingleRelation_swigregister
Expr_Array1OfSingleRelation_swigregister(Expr_Array1OfSingleRelation)

class Expr_GeneralExpression(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbSubExpressions(self, *args):
        """
        * Returns the number of sub-expressions contained in <self> ( >= 0)

        :rtype: int

        """
        return _Expr.Expr_GeneralExpression_NbSubExpressions(self, *args)


    def SubExpression(self, *args):
        """
        * Returns the <I>-th sub-expression of <self> raises OutOfRange if <I> > NbSubExpressions(me)

        :param I:
        :type I: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_SubExpression(self, *args)


    def Simplified(self, *args):
        """
        * Returns a GeneralExpression after replacement of NamedUnknowns by an associated expression and after values computation.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_Simplified(self, *args)


    def ShallowSimplified(self, *args):
        """
        * Returns a GeneralExpression after a simplification of the arguments of <self>.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_ShallowSimplified(self, *args)


    def Copy(self, *args):
        """
        * Returns a copy of <self> having the same unknowns and functions.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_Copy(self, *args)


    def ContainsUnknowns(self, *args):
        """
        * Tests if <self> contains NamedUnknowns.

        :rtype: bool

        """
        return _Expr.Expr_GeneralExpression_ContainsUnknowns(self, *args)


    def Contains(self, *args):
        """
        * Tests if <exp> is contained in <self>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: bool

        """
        return _Expr.Expr_GeneralExpression_Contains(self, *args)


    def IsLinear(self, *args):
        """
        * Tests if <self> is linear on every NamedUnknown it contains.

        :rtype: bool

        """
        return _Expr.Expr_GeneralExpression_IsLinear(self, *args)


    def IsShareable(self, *args):
        """
        * Tests if <self> can be shared by one or more expressions or must be copied. This method returns False as a default value. To be redefined ( especially for NamedUnknown).

        :rtype: bool

        """
        return _Expr.Expr_GeneralExpression_IsShareable(self, *args)


    def IsIdentical(self, *args):
        """
        * Tests if <self> and <Other> define the same expression. Warning: This method does not include any simplification before testing. It could also be very slow; to be used carefully.

        :param Other:
        :type Other: Handle_Expr_GeneralExpression &
        :rtype: bool

        """
        return _Expr.Expr_GeneralExpression_IsIdentical(self, *args)


    def Derivative(self, *args):
        """
        * Returns the derivative on <X> unknown of <self>

        :param X:
        :type X: Handle_Expr_NamedUnknown &
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_Derivative(self, *args)


    def NDerivative(self, *args):
        """
        * Returns the <N>-th derivative on <X> unknown of <self>. Raise OutOfRange if N <= 0

        :param X:
        :type X: Handle_Expr_NamedUnknown &
        :param N:
        :type N: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_GeneralExpression_NDerivative(self, *args)


    def Replace(self, *args):
        """
        * Replaces all occurences of <var> with copies of <with> in <self>. Copies of <with> are made with the Copy() method. Raises InvalidOperand if <with> contains <self>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :param with:
        :type with: Handle_Expr_GeneralExpression &
        :rtype: void

        """
        return _Expr.Expr_GeneralExpression_Replace(self, *args)


    def Evaluate(self, *args):
        """
        * Returns the value of <self> (as a Real) by replacement of <vars> by <vals>. Raises NotEvaluable if <self> contains NamedUnknown not in <vars> or NumericError if result cannot be computed.

        :param vars:
        :type vars: Expr_Array1OfNamedUnknown &
        :param vals:
        :type vals: TColStd_Array1OfReal &
        :rtype: float

        """
        return _Expr.Expr_GeneralExpression_Evaluate(self, *args)


    def EvaluateNumeric(self, *args):
        """
        * Returns the value of <self> (as a Real) by replacement of <vars> by <vals>. Raises NotEvaluable if <self> contains NamedUnknown not in <vars> or NumericError if result cannot be computed.

        :rtype: float

        """
        return _Expr.Expr_GeneralExpression_EvaluateNumeric(self, *args)


    def String(self, *args):
        """
        * returns a string representing <self> in a readable way.

        :rtype: TCollection_AsciiString

        """
        return _Expr.Expr_GeneralExpression_String(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_GeneralExpression self)"""
        return _Expr.Expr_GeneralExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_GeneralExpression self) -> Handle_Expr_GeneralExpression"""
        return _Expr.Expr_GeneralExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_GeneralExpression.NbSubExpressions = new_instancemethod(_Expr.Expr_GeneralExpression_NbSubExpressions, None, Expr_GeneralExpression)
Expr_GeneralExpression.SubExpression = new_instancemethod(_Expr.Expr_GeneralExpression_SubExpression, None, Expr_GeneralExpression)
Expr_GeneralExpression.Simplified = new_instancemethod(_Expr.Expr_GeneralExpression_Simplified, None, Expr_GeneralExpression)
Expr_GeneralExpression.ShallowSimplified = new_instancemethod(_Expr.Expr_GeneralExpression_ShallowSimplified, None, Expr_GeneralExpression)
Expr_GeneralExpression.Copy = new_instancemethod(_Expr.Expr_GeneralExpression_Copy, None, Expr_GeneralExpression)
Expr_GeneralExpression.ContainsUnknowns = new_instancemethod(_Expr.Expr_GeneralExpression_ContainsUnknowns, None, Expr_GeneralExpression)
Expr_GeneralExpression.Contains = new_instancemethod(_Expr.Expr_GeneralExpression_Contains, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsLinear = new_instancemethod(_Expr.Expr_GeneralExpression_IsLinear, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsShareable = new_instancemethod(_Expr.Expr_GeneralExpression_IsShareable, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsIdentical = new_instancemethod(_Expr.Expr_GeneralExpression_IsIdentical, None, Expr_GeneralExpression)
Expr_GeneralExpression.Derivative = new_instancemethod(_Expr.Expr_GeneralExpression_Derivative, None, Expr_GeneralExpression)
Expr_GeneralExpression.NDerivative = new_instancemethod(_Expr.Expr_GeneralExpression_NDerivative, None, Expr_GeneralExpression)
Expr_GeneralExpression.Replace = new_instancemethod(_Expr.Expr_GeneralExpression_Replace, None, Expr_GeneralExpression)
Expr_GeneralExpression.Evaluate = new_instancemethod(_Expr.Expr_GeneralExpression_Evaluate, None, Expr_GeneralExpression)
Expr_GeneralExpression.EvaluateNumeric = new_instancemethod(_Expr.Expr_GeneralExpression_EvaluateNumeric, None, Expr_GeneralExpression)
Expr_GeneralExpression.String = new_instancemethod(_Expr.Expr_GeneralExpression_String, None, Expr_GeneralExpression)
Expr_GeneralExpression._kill_pointed = new_instancemethod(_Expr.Expr_GeneralExpression__kill_pointed, None, Expr_GeneralExpression)
Expr_GeneralExpression.GetHandle = new_instancemethod(_Expr.Expr_GeneralExpression_GetHandle, None, Expr_GeneralExpression)
Expr_GeneralExpression_swigregister = _Expr.Expr_GeneralExpression_swigregister
Expr_GeneralExpression_swigregister(Expr_GeneralExpression)

class Handle_Expr_GeneralExpression(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_GeneralExpression_swiginit(self, _Expr.new_Handle_Expr_GeneralExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_GeneralExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_GeneralExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_GeneralExpression_Nullify, None, Handle_Expr_GeneralExpression)
Handle_Expr_GeneralExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_GeneralExpression_IsNull, None, Handle_Expr_GeneralExpression)
Handle_Expr_GeneralExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_GeneralExpression_GetObject, None, Handle_Expr_GeneralExpression)
Handle_Expr_GeneralExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_GeneralExpression__kill_pointed, None, Handle_Expr_GeneralExpression)
Handle_Expr_GeneralExpression_swigregister = _Expr.Handle_Expr_GeneralExpression_swigregister
Handle_Expr_GeneralExpression_swigregister(Handle_Expr_GeneralExpression)

def Handle_Expr_GeneralExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_GeneralExpression_DownCast(AnObject)
Handle_Expr_GeneralExpression_DownCast = _Expr.Handle_Expr_GeneralExpression_DownCast

class Expr_GeneralFunction(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbOfVariables(self, *args):
        """
        * Returns the number of variables of <self>.

        :rtype: int

        """
        return _Expr.Expr_GeneralFunction_NbOfVariables(self, *args)


    def Variable(self, *args):
        """
        * Returns the variable denoted by <index> in <self>. Raises OutOfRange if index > NbOfVariables.

        :param index:
        :type index: int
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_GeneralFunction_Variable(self, *args)


    def Copy(self, *args):
        """
        * Returns a copy of <self> with the same form.

        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_GeneralFunction_Copy(self, *args)


    def Derivative(self, *args):
        """
        * Returns Derivative of <self> for variable <var>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :rtype: Handle_Expr_GeneralFunction

        * Returns Derivative of <self> for variable <var> with degree <deg>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :param deg:
        :type deg: int
        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_GeneralFunction_Derivative(self, *args)


    def Evaluate(self, *args):
        """
        * Computes the value of <self> with the given variables. Raises NotEvaluable if <vars> does not match all variables of <self>.

        :param vars:
        :type vars: Expr_Array1OfNamedUnknown &
        :param vals:
        :type vals: TColStd_Array1OfReal &
        :rtype: float

        """
        return _Expr.Expr_GeneralFunction_Evaluate(self, *args)


    def IsIdentical(self, *args):
        """
        * Tests if <self> and <func> are similar functions (same name and same used expression).

        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :rtype: bool

        """
        return _Expr.Expr_GeneralFunction_IsIdentical(self, *args)


    def IsLinearOnVariable(self, *args):
        """
        * Tests if <self> is linear on variable on range <index>

        :param index:
        :type index: int
        :rtype: bool

        """
        return _Expr.Expr_GeneralFunction_IsLinearOnVariable(self, *args)


    def GetStringName(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Expr.Expr_GeneralFunction_GetStringName(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_GeneralFunction self)"""
        return _Expr.Expr_GeneralFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_GeneralFunction self) -> Handle_Expr_GeneralFunction"""
        return _Expr.Expr_GeneralFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_GeneralFunction.NbOfVariables = new_instancemethod(_Expr.Expr_GeneralFunction_NbOfVariables, None, Expr_GeneralFunction)
Expr_GeneralFunction.Variable = new_instancemethod(_Expr.Expr_GeneralFunction_Variable, None, Expr_GeneralFunction)
Expr_GeneralFunction.Copy = new_instancemethod(_Expr.Expr_GeneralFunction_Copy, None, Expr_GeneralFunction)
Expr_GeneralFunction.Derivative = new_instancemethod(_Expr.Expr_GeneralFunction_Derivative, None, Expr_GeneralFunction)
Expr_GeneralFunction.Evaluate = new_instancemethod(_Expr.Expr_GeneralFunction_Evaluate, None, Expr_GeneralFunction)
Expr_GeneralFunction.IsIdentical = new_instancemethod(_Expr.Expr_GeneralFunction_IsIdentical, None, Expr_GeneralFunction)
Expr_GeneralFunction.IsLinearOnVariable = new_instancemethod(_Expr.Expr_GeneralFunction_IsLinearOnVariable, None, Expr_GeneralFunction)
Expr_GeneralFunction.GetStringName = new_instancemethod(_Expr.Expr_GeneralFunction_GetStringName, None, Expr_GeneralFunction)
Expr_GeneralFunction._kill_pointed = new_instancemethod(_Expr.Expr_GeneralFunction__kill_pointed, None, Expr_GeneralFunction)
Expr_GeneralFunction.GetHandle = new_instancemethod(_Expr.Expr_GeneralFunction_GetHandle, None, Expr_GeneralFunction)
Expr_GeneralFunction_swigregister = _Expr.Expr_GeneralFunction_swigregister
Expr_GeneralFunction_swigregister(Expr_GeneralFunction)

class Handle_Expr_GeneralFunction(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_GeneralFunction_swiginit(self, _Expr.new_Handle_Expr_GeneralFunction(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_GeneralFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_GeneralFunction.Nullify = new_instancemethod(_Expr.Handle_Expr_GeneralFunction_Nullify, None, Handle_Expr_GeneralFunction)
Handle_Expr_GeneralFunction.IsNull = new_instancemethod(_Expr.Handle_Expr_GeneralFunction_IsNull, None, Handle_Expr_GeneralFunction)
Handle_Expr_GeneralFunction.GetObject = new_instancemethod(_Expr.Handle_Expr_GeneralFunction_GetObject, None, Handle_Expr_GeneralFunction)
Handle_Expr_GeneralFunction._kill_pointed = new_instancemethod(_Expr.Handle_Expr_GeneralFunction__kill_pointed, None, Handle_Expr_GeneralFunction)
Handle_Expr_GeneralFunction_swigregister = _Expr.Handle_Expr_GeneralFunction_swigregister
Handle_Expr_GeneralFunction_swigregister(Handle_Expr_GeneralFunction)

def Handle_Expr_GeneralFunction_DownCast(AnObject):
    return _Expr.Handle_Expr_GeneralFunction_DownCast(AnObject)
Handle_Expr_GeneralFunction_DownCast = _Expr.Handle_Expr_GeneralFunction_DownCast

class Expr_GeneralRelation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsSatisfied(self, *args):
        """
        * Returns the current status of the relation

        :rtype: bool

        """
        return _Expr.Expr_GeneralRelation_IsSatisfied(self, *args)


    def IsLinear(self, *args):
        """
        * Tests if <self> is linear between its NamedUnknowns.

        :rtype: bool

        """
        return _Expr.Expr_GeneralRelation_IsLinear(self, *args)


    def Simplified(self, *args):
        """
        * Returns a GeneralRelation after replacement of NamedUnknowns by an associated expression, and after values computation.

        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_GeneralRelation_Simplified(self, *args)


    def Simplify(self, *args):
        """
        * Replaces NamedUnknowns by associated expressions, and computes values in <self>.

        :rtype: void

        """
        return _Expr.Expr_GeneralRelation_Simplify(self, *args)


    def Copy(self, *args):
        """
        * Returns a copy of <self> having the same unknowns and functions.

        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_GeneralRelation_Copy(self, *args)


    def NbOfSubRelations(self, *args):
        """
        * Returns the number of relations contained in <self>.

        :rtype: int

        """
        return _Expr.Expr_GeneralRelation_NbOfSubRelations(self, *args)


    def NbOfSingleRelations(self, *args):
        """
        * Returns the number of SingleRelations contained in <self>.

        :rtype: int

        """
        return _Expr.Expr_GeneralRelation_NbOfSingleRelations(self, *args)


    def SubRelation(self, *args):
        """
        * Returns the relation denoted by <index> in <self>. An exception is raised if <index> is out of range.

        :param index:
        :type index: int
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_GeneralRelation_SubRelation(self, *args)


    def Contains(self, *args):
        """
        * Tests if <exp> contains <var>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: bool

        """
        return _Expr.Expr_GeneralRelation_Contains(self, *args)


    def Replace(self, *args):
        """
        * Replaces all occurences of <var> with <with> in <self>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :param with:
        :type with: Handle_Expr_GeneralExpression &
        :rtype: void

        """
        return _Expr.Expr_GeneralRelation_Replace(self, *args)


    def String(self, *args):
        """
        * returns a string representing <self> in a readable way.

        :rtype: TCollection_AsciiString

        """
        return _Expr.Expr_GeneralRelation_String(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_GeneralRelation self)"""
        return _Expr.Expr_GeneralRelation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_GeneralRelation self) -> Handle_Expr_GeneralRelation"""
        return _Expr.Expr_GeneralRelation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_GeneralRelation.IsSatisfied = new_instancemethod(_Expr.Expr_GeneralRelation_IsSatisfied, None, Expr_GeneralRelation)
Expr_GeneralRelation.IsLinear = new_instancemethod(_Expr.Expr_GeneralRelation_IsLinear, None, Expr_GeneralRelation)
Expr_GeneralRelation.Simplified = new_instancemethod(_Expr.Expr_GeneralRelation_Simplified, None, Expr_GeneralRelation)
Expr_GeneralRelation.Simplify = new_instancemethod(_Expr.Expr_GeneralRelation_Simplify, None, Expr_GeneralRelation)
Expr_GeneralRelation.Copy = new_instancemethod(_Expr.Expr_GeneralRelation_Copy, None, Expr_GeneralRelation)
Expr_GeneralRelation.NbOfSubRelations = new_instancemethod(_Expr.Expr_GeneralRelation_NbOfSubRelations, None, Expr_GeneralRelation)
Expr_GeneralRelation.NbOfSingleRelations = new_instancemethod(_Expr.Expr_GeneralRelation_NbOfSingleRelations, None, Expr_GeneralRelation)
Expr_GeneralRelation.SubRelation = new_instancemethod(_Expr.Expr_GeneralRelation_SubRelation, None, Expr_GeneralRelation)
Expr_GeneralRelation.Contains = new_instancemethod(_Expr.Expr_GeneralRelation_Contains, None, Expr_GeneralRelation)
Expr_GeneralRelation.Replace = new_instancemethod(_Expr.Expr_GeneralRelation_Replace, None, Expr_GeneralRelation)
Expr_GeneralRelation.String = new_instancemethod(_Expr.Expr_GeneralRelation_String, None, Expr_GeneralRelation)
Expr_GeneralRelation._kill_pointed = new_instancemethod(_Expr.Expr_GeneralRelation__kill_pointed, None, Expr_GeneralRelation)
Expr_GeneralRelation.GetHandle = new_instancemethod(_Expr.Expr_GeneralRelation_GetHandle, None, Expr_GeneralRelation)
Expr_GeneralRelation_swigregister = _Expr.Expr_GeneralRelation_swigregister
Expr_GeneralRelation_swigregister(Expr_GeneralRelation)

class Handle_Expr_GeneralRelation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_GeneralRelation_swiginit(self, _Expr.new_Handle_Expr_GeneralRelation(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_GeneralRelation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_GeneralRelation.Nullify = new_instancemethod(_Expr.Handle_Expr_GeneralRelation_Nullify, None, Handle_Expr_GeneralRelation)
Handle_Expr_GeneralRelation.IsNull = new_instancemethod(_Expr.Handle_Expr_GeneralRelation_IsNull, None, Handle_Expr_GeneralRelation)
Handle_Expr_GeneralRelation.GetObject = new_instancemethod(_Expr.Handle_Expr_GeneralRelation_GetObject, None, Handle_Expr_GeneralRelation)
Handle_Expr_GeneralRelation._kill_pointed = new_instancemethod(_Expr.Handle_Expr_GeneralRelation__kill_pointed, None, Handle_Expr_GeneralRelation)
Handle_Expr_GeneralRelation_swigregister = _Expr.Handle_Expr_GeneralRelation_swigregister
Handle_Expr_GeneralRelation_swigregister(Handle_Expr_GeneralRelation)

def Handle_Expr_GeneralRelation_DownCast(AnObject):
    return _Expr.Handle_Expr_GeneralRelation_DownCast(AnObject)
Handle_Expr_GeneralRelation_DownCast = _Expr.Handle_Expr_GeneralRelation_DownCast

class Expr_IndexedMapNodeOfMapOfNamedUnknown(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: Handle_Expr_NamedUnknown &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_swiginit(self, _Expr.new_Expr_IndexedMapNodeOfMapOfNamedUnknown(*args))

    def Key1(self, *args):
        """
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(Expr_IndexedMapNodeOfMapOfNamedUnknown self) -> Standard_Integer"""
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(Expr_IndexedMapNodeOfMapOfNamedUnknown self, Standard_Integer value)"""
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_Next2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_IndexedMapNodeOfMapOfNamedUnknown self)"""
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_IndexedMapNodeOfMapOfNamedUnknown self) -> Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown"""
        return _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_IndexedMapNodeOfMapOfNamedUnknown.Key1 = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_Key1, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown.GetKey2 = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_GetKey2, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown.SetKey2 = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_SetKey2, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown.Next2 = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_Next2, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown._kill_pointed = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown__kill_pointed, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown.GetHandle = new_instancemethod(_Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_GetHandle, None, Expr_IndexedMapNodeOfMapOfNamedUnknown)
Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister = _Expr.Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister
Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister(Expr_IndexedMapNodeOfMapOfNamedUnknown)

class Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_swiginit(self, _Expr.new_Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown.Nullify = new_instancemethod(_Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_Nullify, None, Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown)
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown.IsNull = new_instancemethod(_Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_IsNull, None, Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown)
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown.GetObject = new_instancemethod(_Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_GetObject, None, Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown)
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown._kill_pointed = new_instancemethod(_Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown__kill_pointed, None, Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown)
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister = _Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_swigregister(Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown)

def Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_DownCast(AnObject):
    return _Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_DownCast(AnObject)
Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_DownCast = _Expr.Handle_Expr_IndexedMapNodeOfMapOfNamedUnknown_DownCast

class Expr_MapOfNamedUnknown(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Expr.Expr_MapOfNamedUnknown_swiginit(self, _Expr.new_Expr_MapOfNamedUnknown(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_MapOfNamedUnknown &
        :rtype: Expr_MapOfNamedUnknown

        """
        return _Expr.Expr_MapOfNamedUnknown_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_MapOfNamedUnknown &
        :rtype: Expr_MapOfNamedUnknown

        """
        return _Expr.Expr_MapOfNamedUnknown_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Expr.Expr_MapOfNamedUnknown_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_MapOfNamedUnknown_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: Handle_Expr_NamedUnknown &
        :rtype: int

        """
        return _Expr.Expr_MapOfNamedUnknown_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: Handle_Expr_NamedUnknown &
        :rtype: None

        """
        return _Expr.Expr_MapOfNamedUnknown_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_MapOfNamedUnknown_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: Handle_Expr_NamedUnknown &
        :rtype: bool

        """
        return _Expr.Expr_MapOfNamedUnknown_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_MapOfNamedUnknown_FindKey(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: Handle_Expr_NamedUnknown &
        :rtype: int

        """
        return _Expr.Expr_MapOfNamedUnknown_FindIndex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_MapOfNamedUnknown self)"""
        return _Expr.Expr_MapOfNamedUnknown__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_MapOfNamedUnknown.Assign = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Assign, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Set = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Set, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.ReSize = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_ReSize, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Clear = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Clear, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Add = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Add, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Substitute = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Substitute, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.RemoveLast = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_RemoveLast, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Contains = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Contains, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.FindKey = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_FindKey, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.FindIndex = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_FindIndex, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown._kill_pointed = new_instancemethod(_Expr.Expr_MapOfNamedUnknown__kill_pointed, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown_swigregister = _Expr.Expr_MapOfNamedUnknown_swigregister
Expr_MapOfNamedUnknown_swigregister(Expr_MapOfNamedUnknown)

class Expr_RUIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an iterator on every NamedUnknown contained in <rel>.

        :param rel:
        :type rel: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        _Expr.Expr_RUIterator_swiginit(self, _Expr.new_Expr_RUIterator(*args))

    def More(self, *args):
        """
        * Returns False if on other unknown remains.

        :rtype: bool

        """
        return _Expr.Expr_RUIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_RUIterator_Next(self, *args)


    def Value(self, *args):
        """
        * Returns current NamedUnknown. Raises exception if no more unknowns remain.

        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_RUIterator_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_RUIterator.More = new_instancemethod(_Expr.Expr_RUIterator_More, None, Expr_RUIterator)
Expr_RUIterator.Next = new_instancemethod(_Expr.Expr_RUIterator_Next, None, Expr_RUIterator)
Expr_RUIterator.Value = new_instancemethod(_Expr.Expr_RUIterator_Value, None, Expr_RUIterator)
Expr_RUIterator._kill_pointed = new_instancemethod(_Expr.Expr_RUIterator__kill_pointed, None, Expr_RUIterator)
Expr_RUIterator_swigregister = _Expr.Expr_RUIterator_swigregister
Expr_RUIterator_swigregister(Expr_RUIterator)

class Expr_RelationIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param rel:
        :type rel: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        _Expr.Expr_RelationIterator_swiginit(self, _Expr.new_Expr_RelationIterator(*args))

    def More(self, *args):
        """
        * Returns False if no other relation remains.

        :rtype: bool

        """
        return _Expr.Expr_RelationIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_RelationIterator_Next(self, *args)


    def Value(self, *args):
        """
        * Returns current basic relation. Exception is raised if no more relation remains.

        :rtype: Handle_Expr_SingleRelation

        """
        return _Expr.Expr_RelationIterator_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_RelationIterator.More = new_instancemethod(_Expr.Expr_RelationIterator_More, None, Expr_RelationIterator)
Expr_RelationIterator.Next = new_instancemethod(_Expr.Expr_RelationIterator_Next, None, Expr_RelationIterator)
Expr_RelationIterator.Value = new_instancemethod(_Expr.Expr_RelationIterator_Value, None, Expr_RelationIterator)
Expr_RelationIterator._kill_pointed = new_instancemethod(_Expr.Expr_RelationIterator__kill_pointed, None, Expr_RelationIterator)
Expr_RelationIterator_swigregister = _Expr.Expr_RelationIterator_swigregister
Expr_RelationIterator_swigregister(Expr_RelationIterator)

class Expr_SequenceNodeOfSequenceOfGeneralExpression(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_swiginit(self, _Expr.new_Expr_SequenceNodeOfSequenceOfGeneralExpression(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_SequenceNodeOfSequenceOfGeneralExpression self)"""
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_SequenceNodeOfSequenceOfGeneralExpression self) -> Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression"""
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SequenceNodeOfSequenceOfGeneralExpression.Value = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_Value, None, Expr_SequenceNodeOfSequenceOfGeneralExpression)
Expr_SequenceNodeOfSequenceOfGeneralExpression._kill_pointed = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression__kill_pointed, None, Expr_SequenceNodeOfSequenceOfGeneralExpression)
Expr_SequenceNodeOfSequenceOfGeneralExpression.GetHandle = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_GetHandle, None, Expr_SequenceNodeOfSequenceOfGeneralExpression)
Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister = _Expr.Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister
Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister(Expr_SequenceNodeOfSequenceOfGeneralExpression)

class Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_swiginit(self, _Expr.new_Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_Nullify, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression)
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_IsNull, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression)
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_GetObject, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression)
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression__kill_pointed, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression)
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister = _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_swigregister(Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression)

def Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_DownCast(AnObject)
Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_DownCast = _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralExpression_DownCast

class Expr_SequenceNodeOfSequenceOfGeneralRelation(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_swiginit(self, _Expr.new_Expr_SequenceNodeOfSequenceOfGeneralRelation(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_SequenceNodeOfSequenceOfGeneralRelation self)"""
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_SequenceNodeOfSequenceOfGeneralRelation self) -> Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation"""
        return _Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SequenceNodeOfSequenceOfGeneralRelation.Value = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_Value, None, Expr_SequenceNodeOfSequenceOfGeneralRelation)
Expr_SequenceNodeOfSequenceOfGeneralRelation._kill_pointed = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation__kill_pointed, None, Expr_SequenceNodeOfSequenceOfGeneralRelation)
Expr_SequenceNodeOfSequenceOfGeneralRelation.GetHandle = new_instancemethod(_Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_GetHandle, None, Expr_SequenceNodeOfSequenceOfGeneralRelation)
Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister = _Expr.Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister
Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister(Expr_SequenceNodeOfSequenceOfGeneralRelation)

class Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_swiginit(self, _Expr.new_Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation.Nullify = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_Nullify, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation)
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation.IsNull = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_IsNull, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation)
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation.GetObject = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_GetObject, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation)
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation._kill_pointed = new_instancemethod(_Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation__kill_pointed, None, Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation)
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister = _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_swigregister(Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation)

def Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_DownCast(AnObject):
    return _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_DownCast(AnObject)
Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_DownCast = _Expr.Handle_Expr_SequenceNodeOfSequenceOfGeneralRelation_DownCast

class Expr_SequenceOfGeneralExpression(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Expr.Expr_SequenceOfGeneralExpression_swiginit(self, _Expr.new_Expr_SequenceOfGeneralExpression(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_SequenceOfGeneralExpression &
        :rtype: Expr_SequenceOfGeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_SequenceOfGeneralExpression &
        :rtype: Expr_SequenceOfGeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Expr_GeneralExpression &
        :rtype: None

        :param S:
        :type S: Expr_SequenceOfGeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Expr_GeneralExpression &
        :rtype: None

        :param S:
        :type S: Expr_SequenceOfGeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_GeneralExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Expr_SequenceOfGeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_GeneralExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Expr_SequenceOfGeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Expr_SequenceOfGeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SequenceOfGeneralExpression_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralExpression_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SequenceOfGeneralExpression.Clear = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Clear, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Assign = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Assign, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Set = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Set, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Append = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Append, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Prepend = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Prepend, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.InsertBefore = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_InsertBefore, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.InsertAfter = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_InsertAfter, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.First = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_First, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Last = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Last, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Split = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Split, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Value = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Value, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.SetValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_SetValue, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.ChangeValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_ChangeValue, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Remove = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Remove, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression._kill_pointed = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression__kill_pointed, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression_swigregister = _Expr.Expr_SequenceOfGeneralExpression_swigregister
Expr_SequenceOfGeneralExpression_swigregister(Expr_SequenceOfGeneralExpression)

class Expr_SequenceOfGeneralRelation(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Expr.Expr_SequenceOfGeneralRelation_swiginit(self, _Expr.new_Expr_SequenceOfGeneralRelation(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Expr_SequenceOfGeneralRelation &
        :rtype: Expr_SequenceOfGeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Expr_SequenceOfGeneralRelation &
        :rtype: Expr_SequenceOfGeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Expr_GeneralRelation &
        :rtype: None

        :param S:
        :type S: Expr_SequenceOfGeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Expr_GeneralRelation &
        :rtype: None

        :param S:
        :type S: Expr_SequenceOfGeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_GeneralRelation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Expr_SequenceOfGeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_GeneralRelation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Expr_SequenceOfGeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Expr_SequenceOfGeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_GeneralRelation

        """
        return _Expr.Expr_SequenceOfGeneralRelation_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Expr.Expr_SequenceOfGeneralRelation_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SequenceOfGeneralRelation.Clear = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Clear, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Assign = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Assign, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Set = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Set, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Append = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Append, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Prepend = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Prepend, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.InsertBefore = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_InsertBefore, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.InsertAfter = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_InsertAfter, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.First = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_First, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Last = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Last, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Split = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Split, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Value = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Value, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.SetValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_SetValue, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.ChangeValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_ChangeValue, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Remove = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Remove, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation._kill_pointed = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation__kill_pointed, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation_swigregister = _Expr.Expr_SequenceOfGeneralRelation_swigregister
Expr_SequenceOfGeneralRelation_swigregister(Expr_SequenceOfGeneralRelation)

class Expr_UnknownIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_UnknownIterator_swiginit(self, _Expr.new_Expr_UnknownIterator(*args))

    def More(self, *args):
        """
        :rtype: bool

        """
        return _Expr.Expr_UnknownIterator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_UnknownIterator_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_UnknownIterator_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_UnknownIterator.More = new_instancemethod(_Expr.Expr_UnknownIterator_More, None, Expr_UnknownIterator)
Expr_UnknownIterator.Next = new_instancemethod(_Expr.Expr_UnknownIterator_Next, None, Expr_UnknownIterator)
Expr_UnknownIterator.Value = new_instancemethod(_Expr.Expr_UnknownIterator_Value, None, Expr_UnknownIterator)
Expr_UnknownIterator._kill_pointed = new_instancemethod(_Expr.Expr_UnknownIterator__kill_pointed, None, Expr_UnknownIterator)
Expr_UnknownIterator_swigregister = _Expr.Expr_UnknownIterator_swigregister
Expr_UnknownIterator_swigregister(Expr_UnknownIterator)

class Expr_BinaryExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstOperand(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_BinaryExpression_FirstOperand(self, *args)


    def SecondOperand(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_BinaryExpression_SecondOperand(self, *args)


    def SetFirstOperand(self, *args):
        """
        * Sets first operand of <self> Raises InvalidOperand if exp = me

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_BinaryExpression_SetFirstOperand(self, *args)


    def SetSecondOperand(self, *args):
        """
        * Sets second operand of <self> Raises InvalidOperand if <exp> contains <self>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_BinaryExpression_SetSecondOperand(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_BinaryExpression self)"""
        return _Expr.Expr_BinaryExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_BinaryExpression self) -> Handle_Expr_BinaryExpression"""
        return _Expr.Expr_BinaryExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_BinaryExpression.FirstOperand = new_instancemethod(_Expr.Expr_BinaryExpression_FirstOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SecondOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SecondOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SetFirstOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SetFirstOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SetSecondOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SetSecondOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression._kill_pointed = new_instancemethod(_Expr.Expr_BinaryExpression__kill_pointed, None, Expr_BinaryExpression)
Expr_BinaryExpression.GetHandle = new_instancemethod(_Expr.Expr_BinaryExpression_GetHandle, None, Expr_BinaryExpression)
Expr_BinaryExpression_swigregister = _Expr.Expr_BinaryExpression_swigregister
Expr_BinaryExpression_swigregister(Expr_BinaryExpression)

class Handle_Expr_BinaryExpression(Handle_Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_BinaryExpression_swiginit(self, _Expr.new_Handle_Expr_BinaryExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_BinaryExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_BinaryExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_BinaryExpression_Nullify, None, Handle_Expr_BinaryExpression)
Handle_Expr_BinaryExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_BinaryExpression_IsNull, None, Handle_Expr_BinaryExpression)
Handle_Expr_BinaryExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_BinaryExpression_GetObject, None, Handle_Expr_BinaryExpression)
Handle_Expr_BinaryExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_BinaryExpression__kill_pointed, None, Handle_Expr_BinaryExpression)
Handle_Expr_BinaryExpression_swigregister = _Expr.Handle_Expr_BinaryExpression_swigregister
Handle_Expr_BinaryExpression_swigregister(Handle_Expr_BinaryExpression)

def Handle_Expr_BinaryExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_BinaryExpression_DownCast(AnObject)
Handle_Expr_BinaryExpression_DownCast = _Expr.Handle_Expr_BinaryExpression_DownCast

class Expr_FunctionDerivative(Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a FunctionDerivative of degree <deg> relative to the <withX> variable. Raises OutOfRange if <deg> lower or equal to zero.

        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :param withX:
        :type withX: Handle_Expr_NamedUnknown &
        :param deg:
        :type deg: int
        :rtype: None

        """
        _Expr.Expr_FunctionDerivative_swiginit(self, _Expr.new_Expr_FunctionDerivative(*args))

    def Derivative(self, *args):
        """
        * Returns Derivative of <self> for variable <var>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :rtype: Handle_Expr_GeneralFunction

        * Returns Derivative of <self> for variable <var> with degree <deg>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :param deg:
        :type deg: int
        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_FunctionDerivative_Derivative(self, *args)


    def Function(self, *args):
        """
        * Returns the function of which <self> is the derivative.

        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_FunctionDerivative_Function(self, *args)


    def Degree(self, *args):
        """
        * Returns the degree of derivation of <self>.

        :rtype: int

        """
        return _Expr.Expr_FunctionDerivative_Degree(self, *args)


    def DerivVariable(self, *args):
        """
        * Returns the derivation variable of <self>.

        :rtype: Handle_Expr_NamedUnknown

        """
        return _Expr.Expr_FunctionDerivative_DerivVariable(self, *args)


    def Expression(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_FunctionDerivative_Expression(self, *args)


    def UpdateExpression(self, *args):
        """
        :rtype: None

        """
        return _Expr.Expr_FunctionDerivative_UpdateExpression(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_FunctionDerivative self)"""
        return _Expr.Expr_FunctionDerivative__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_FunctionDerivative self) -> Handle_Expr_FunctionDerivative"""
        return _Expr.Expr_FunctionDerivative_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_FunctionDerivative.Derivative = new_instancemethod(_Expr.Expr_FunctionDerivative_Derivative, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Function = new_instancemethod(_Expr.Expr_FunctionDerivative_Function, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Degree = new_instancemethod(_Expr.Expr_FunctionDerivative_Degree, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.DerivVariable = new_instancemethod(_Expr.Expr_FunctionDerivative_DerivVariable, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Expression = new_instancemethod(_Expr.Expr_FunctionDerivative_Expression, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.UpdateExpression = new_instancemethod(_Expr.Expr_FunctionDerivative_UpdateExpression, None, Expr_FunctionDerivative)
Expr_FunctionDerivative._kill_pointed = new_instancemethod(_Expr.Expr_FunctionDerivative__kill_pointed, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.GetHandle = new_instancemethod(_Expr.Expr_FunctionDerivative_GetHandle, None, Expr_FunctionDerivative)
Expr_FunctionDerivative_swigregister = _Expr.Expr_FunctionDerivative_swigregister
Expr_FunctionDerivative_swigregister(Expr_FunctionDerivative)

class Handle_Expr_FunctionDerivative(Handle_Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_FunctionDerivative_swiginit(self, _Expr.new_Handle_Expr_FunctionDerivative(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_FunctionDerivative_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_FunctionDerivative.Nullify = new_instancemethod(_Expr.Handle_Expr_FunctionDerivative_Nullify, None, Handle_Expr_FunctionDerivative)
Handle_Expr_FunctionDerivative.IsNull = new_instancemethod(_Expr.Handle_Expr_FunctionDerivative_IsNull, None, Handle_Expr_FunctionDerivative)
Handle_Expr_FunctionDerivative.GetObject = new_instancemethod(_Expr.Handle_Expr_FunctionDerivative_GetObject, None, Handle_Expr_FunctionDerivative)
Handle_Expr_FunctionDerivative._kill_pointed = new_instancemethod(_Expr.Handle_Expr_FunctionDerivative__kill_pointed, None, Handle_Expr_FunctionDerivative)
Handle_Expr_FunctionDerivative_swigregister = _Expr.Handle_Expr_FunctionDerivative_swigregister
Handle_Expr_FunctionDerivative_swigregister(Handle_Expr_FunctionDerivative)

def Handle_Expr_FunctionDerivative_DownCast(AnObject):
    return _Expr.Handle_Expr_FunctionDerivative_DownCast(AnObject)
Handle_Expr_FunctionDerivative_DownCast = _Expr.Handle_Expr_FunctionDerivative_DownCast

class Expr_NamedExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetName(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Expr.Expr_NamedExpression_GetName(self, *args)


    def SetName(self, *args):
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: None

        """
        return _Expr.Expr_NamedExpression_SetName(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_NamedExpression self)"""
        return _Expr.Expr_NamedExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_NamedExpression self) -> Handle_Expr_NamedExpression"""
        return _Expr.Expr_NamedExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_NamedExpression.GetName = new_instancemethod(_Expr.Expr_NamedExpression_GetName, None, Expr_NamedExpression)
Expr_NamedExpression.SetName = new_instancemethod(_Expr.Expr_NamedExpression_SetName, None, Expr_NamedExpression)
Expr_NamedExpression._kill_pointed = new_instancemethod(_Expr.Expr_NamedExpression__kill_pointed, None, Expr_NamedExpression)
Expr_NamedExpression.GetHandle = new_instancemethod(_Expr.Expr_NamedExpression_GetHandle, None, Expr_NamedExpression)
Expr_NamedExpression_swigregister = _Expr.Expr_NamedExpression_swigregister
Expr_NamedExpression_swigregister(Expr_NamedExpression)

class Handle_Expr_NamedExpression(Handle_Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_NamedExpression_swiginit(self, _Expr.new_Handle_Expr_NamedExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_NamedExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_NamedExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_NamedExpression_Nullify, None, Handle_Expr_NamedExpression)
Handle_Expr_NamedExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_NamedExpression_IsNull, None, Handle_Expr_NamedExpression)
Handle_Expr_NamedExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_NamedExpression_GetObject, None, Handle_Expr_NamedExpression)
Handle_Expr_NamedExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_NamedExpression__kill_pointed, None, Handle_Expr_NamedExpression)
Handle_Expr_NamedExpression_swigregister = _Expr.Handle_Expr_NamedExpression_swigregister
Handle_Expr_NamedExpression_swigregister(Handle_Expr_NamedExpression)

def Handle_Expr_NamedExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_NamedExpression_DownCast(AnObject)
Handle_Expr_NamedExpression_DownCast = _Expr.Handle_Expr_NamedExpression_DownCast

class Expr_NamedFunction(Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a function of given variables <vars> with name <name> defined by the expression <exp>.

        :param name:
        :type name: TCollection_AsciiString &
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :param vars:
        :type vars: Expr_Array1OfNamedUnknown &
        :rtype: None

        """
        _Expr.Expr_NamedFunction_swiginit(self, _Expr.new_Expr_NamedFunction(*args))

    def SetName(self, *args):
        """
        * Sets the name <newname> to <self>.

        :param newname:
        :type newname: TCollection_AsciiString &
        :rtype: None

        """
        return _Expr.Expr_NamedFunction_SetName(self, *args)


    def GetName(self, *args):
        """
        * Returns the name assigned to <self>

        :rtype: TCollection_AsciiString

        """
        return _Expr.Expr_NamedFunction_GetName(self, *args)


    def Derivative(self, *args):
        """
        * Returns Derivative of <self> for variable <var>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :rtype: Handle_Expr_GeneralFunction

        * Returns Derivative of <self> for variable <var> with degree <deg>.

        :param var:
        :type var: Handle_Expr_NamedUnknown &
        :param deg:
        :type deg: int
        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_NamedFunction_Derivative(self, *args)


    def Expression(self, *args):
        """
        * Returns equivalent expression of <self>.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_NamedFunction_Expression(self, *args)


    def SetExpression(self, *args):
        """
        * Modifies expression of <self>. Warning: Beware of derivatives. See FunctionDerivative

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_NamedFunction_SetExpression(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_NamedFunction self)"""
        return _Expr.Expr_NamedFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_NamedFunction self) -> Handle_Expr_NamedFunction"""
        return _Expr.Expr_NamedFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_NamedFunction.SetName = new_instancemethod(_Expr.Expr_NamedFunction_SetName, None, Expr_NamedFunction)
Expr_NamedFunction.GetName = new_instancemethod(_Expr.Expr_NamedFunction_GetName, None, Expr_NamedFunction)
Expr_NamedFunction.Derivative = new_instancemethod(_Expr.Expr_NamedFunction_Derivative, None, Expr_NamedFunction)
Expr_NamedFunction.Expression = new_instancemethod(_Expr.Expr_NamedFunction_Expression, None, Expr_NamedFunction)
Expr_NamedFunction.SetExpression = new_instancemethod(_Expr.Expr_NamedFunction_SetExpression, None, Expr_NamedFunction)
Expr_NamedFunction._kill_pointed = new_instancemethod(_Expr.Expr_NamedFunction__kill_pointed, None, Expr_NamedFunction)
Expr_NamedFunction.GetHandle = new_instancemethod(_Expr.Expr_NamedFunction_GetHandle, None, Expr_NamedFunction)
Expr_NamedFunction_swigregister = _Expr.Expr_NamedFunction_swigregister
Expr_NamedFunction_swigregister(Expr_NamedFunction)

class Handle_Expr_NamedFunction(Handle_Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_NamedFunction_swiginit(self, _Expr.new_Handle_Expr_NamedFunction(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_NamedFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_NamedFunction.Nullify = new_instancemethod(_Expr.Handle_Expr_NamedFunction_Nullify, None, Handle_Expr_NamedFunction)
Handle_Expr_NamedFunction.IsNull = new_instancemethod(_Expr.Handle_Expr_NamedFunction_IsNull, None, Handle_Expr_NamedFunction)
Handle_Expr_NamedFunction.GetObject = new_instancemethod(_Expr.Handle_Expr_NamedFunction_GetObject, None, Handle_Expr_NamedFunction)
Handle_Expr_NamedFunction._kill_pointed = new_instancemethod(_Expr.Handle_Expr_NamedFunction__kill_pointed, None, Handle_Expr_NamedFunction)
Handle_Expr_NamedFunction_swigregister = _Expr.Handle_Expr_NamedFunction_swigregister
Handle_Expr_NamedFunction_swigregister(Handle_Expr_NamedFunction)

def Handle_Expr_NamedFunction_DownCast(AnObject):
    return _Expr.Handle_Expr_NamedFunction_DownCast(AnObject)
Handle_Expr_NamedFunction_DownCast = _Expr.Handle_Expr_NamedFunction_DownCast

class Expr_NumericValue(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param val:
        :type val: float
        :rtype: None

        """
        _Expr.Expr_NumericValue_swiginit(self, _Expr.new_Expr_NumericValue(*args))

    def GetValue(self, *args):
        """
        :rtype: float

        """
        return _Expr.Expr_NumericValue_GetValue(self, *args)


    def SetValue(self, *args):
        """
        :param val:
        :type val: float
        :rtype: None

        """
        return _Expr.Expr_NumericValue_SetValue(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_NumericValue self)"""
        return _Expr.Expr_NumericValue__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_NumericValue self) -> Handle_Expr_NumericValue"""
        return _Expr.Expr_NumericValue_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_NumericValue.GetValue = new_instancemethod(_Expr.Expr_NumericValue_GetValue, None, Expr_NumericValue)
Expr_NumericValue.SetValue = new_instancemethod(_Expr.Expr_NumericValue_SetValue, None, Expr_NumericValue)
Expr_NumericValue._kill_pointed = new_instancemethod(_Expr.Expr_NumericValue__kill_pointed, None, Expr_NumericValue)
Expr_NumericValue.GetHandle = new_instancemethod(_Expr.Expr_NumericValue_GetHandle, None, Expr_NumericValue)
Expr_NumericValue_swigregister = _Expr.Expr_NumericValue_swigregister
Expr_NumericValue_swigregister(Expr_NumericValue)

class Handle_Expr_NumericValue(Handle_Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_NumericValue_swiginit(self, _Expr.new_Handle_Expr_NumericValue(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_NumericValue_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_NumericValue.Nullify = new_instancemethod(_Expr.Handle_Expr_NumericValue_Nullify, None, Handle_Expr_NumericValue)
Handle_Expr_NumericValue.IsNull = new_instancemethod(_Expr.Handle_Expr_NumericValue_IsNull, None, Handle_Expr_NumericValue)
Handle_Expr_NumericValue.GetObject = new_instancemethod(_Expr.Handle_Expr_NumericValue_GetObject, None, Handle_Expr_NumericValue)
Handle_Expr_NumericValue._kill_pointed = new_instancemethod(_Expr.Handle_Expr_NumericValue__kill_pointed, None, Handle_Expr_NumericValue)
Handle_Expr_NumericValue_swigregister = _Expr.Handle_Expr_NumericValue_swigregister
Handle_Expr_NumericValue_swigregister(Handle_Expr_NumericValue)

def Handle_Expr_NumericValue_DownCast(AnObject):
    return _Expr.Handle_Expr_NumericValue_DownCast(AnObject)
Handle_Expr_NumericValue_DownCast = _Expr.Handle_Expr_NumericValue_DownCast

class Expr_PolyExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbOperands(self, *args):
        """
        * returns the number of operands contained in <self>

        :rtype: int

        """
        return _Expr.Expr_PolyExpression_NbOperands(self, *args)


    def Operand(self, *args):
        """
        * Returns the <index>-th operand used in <self>. An exception is raised if index is out of range

        :param index:
        :type index: int
        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_PolyExpression_Operand(self, *args)


    def SetOperand(self, *args):
        """
        * Sets the <index>-th operand used in <self>. An exception is raised if <index> is out of range Raises InvalidOperand if <exp> contains <self>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :param index:
        :type index: int
        :rtype: None

        """
        return _Expr.Expr_PolyExpression_SetOperand(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_PolyExpression self)"""
        return _Expr.Expr_PolyExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_PolyExpression self) -> Handle_Expr_PolyExpression"""
        return _Expr.Expr_PolyExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_PolyExpression.NbOperands = new_instancemethod(_Expr.Expr_PolyExpression_NbOperands, None, Expr_PolyExpression)
Expr_PolyExpression.Operand = new_instancemethod(_Expr.Expr_PolyExpression_Operand, None, Expr_PolyExpression)
Expr_PolyExpression.SetOperand = new_instancemethod(_Expr.Expr_PolyExpression_SetOperand, None, Expr_PolyExpression)
Expr_PolyExpression._kill_pointed = new_instancemethod(_Expr.Expr_PolyExpression__kill_pointed, None, Expr_PolyExpression)
Expr_PolyExpression.GetHandle = new_instancemethod(_Expr.Expr_PolyExpression_GetHandle, None, Expr_PolyExpression)
Expr_PolyExpression_swigregister = _Expr.Expr_PolyExpression_swigregister
Expr_PolyExpression_swigregister(Expr_PolyExpression)

class Handle_Expr_PolyExpression(Handle_Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_PolyExpression_swiginit(self, _Expr.new_Handle_Expr_PolyExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_PolyExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_PolyExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_PolyExpression_Nullify, None, Handle_Expr_PolyExpression)
Handle_Expr_PolyExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_PolyExpression_IsNull, None, Handle_Expr_PolyExpression)
Handle_Expr_PolyExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_PolyExpression_GetObject, None, Handle_Expr_PolyExpression)
Handle_Expr_PolyExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_PolyExpression__kill_pointed, None, Handle_Expr_PolyExpression)
Handle_Expr_PolyExpression_swigregister = _Expr.Handle_Expr_PolyExpression_swigregister
Handle_Expr_PolyExpression_swigregister(Handle_Expr_PolyExpression)

def Handle_Expr_PolyExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_PolyExpression_DownCast(AnObject)
Handle_Expr_PolyExpression_DownCast = _Expr.Handle_Expr_PolyExpression_DownCast

class Expr_SingleRelation(Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFirstMember(self, *args):
        """
        * Defines the first member of the relation

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SingleRelation_SetFirstMember(self, *args)


    def SetSecondMember(self, *args):
        """
        * Defines the second member of the relation

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_SingleRelation_SetSecondMember(self, *args)


    def FirstMember(self, *args):
        """
        * Returns the first member of the relation

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SingleRelation_FirstMember(self, *args)


    def SecondMember(self, *args):
        """
        * Returns the second member of the relation

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_SingleRelation_SecondMember(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_SingleRelation self)"""
        return _Expr.Expr_SingleRelation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_SingleRelation self) -> Handle_Expr_SingleRelation"""
        return _Expr.Expr_SingleRelation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SingleRelation.SetFirstMember = new_instancemethod(_Expr.Expr_SingleRelation_SetFirstMember, None, Expr_SingleRelation)
Expr_SingleRelation.SetSecondMember = new_instancemethod(_Expr.Expr_SingleRelation_SetSecondMember, None, Expr_SingleRelation)
Expr_SingleRelation.FirstMember = new_instancemethod(_Expr.Expr_SingleRelation_FirstMember, None, Expr_SingleRelation)
Expr_SingleRelation.SecondMember = new_instancemethod(_Expr.Expr_SingleRelation_SecondMember, None, Expr_SingleRelation)
Expr_SingleRelation._kill_pointed = new_instancemethod(_Expr.Expr_SingleRelation__kill_pointed, None, Expr_SingleRelation)
Expr_SingleRelation.GetHandle = new_instancemethod(_Expr.Expr_SingleRelation_GetHandle, None, Expr_SingleRelation)
Expr_SingleRelation_swigregister = _Expr.Expr_SingleRelation_swigregister
Expr_SingleRelation_swigregister(Expr_SingleRelation)

class Handle_Expr_SingleRelation(Handle_Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_SingleRelation_swiginit(self, _Expr.new_Handle_Expr_SingleRelation(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_SingleRelation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_SingleRelation.Nullify = new_instancemethod(_Expr.Handle_Expr_SingleRelation_Nullify, None, Handle_Expr_SingleRelation)
Handle_Expr_SingleRelation.IsNull = new_instancemethod(_Expr.Handle_Expr_SingleRelation_IsNull, None, Handle_Expr_SingleRelation)
Handle_Expr_SingleRelation.GetObject = new_instancemethod(_Expr.Handle_Expr_SingleRelation_GetObject, None, Handle_Expr_SingleRelation)
Handle_Expr_SingleRelation._kill_pointed = new_instancemethod(_Expr.Handle_Expr_SingleRelation__kill_pointed, None, Handle_Expr_SingleRelation)
Handle_Expr_SingleRelation_swigregister = _Expr.Handle_Expr_SingleRelation_swigregister
Handle_Expr_SingleRelation_swigregister(Handle_Expr_SingleRelation)

def Handle_Expr_SingleRelation_DownCast(AnObject):
    return _Expr.Handle_Expr_SingleRelation_DownCast(AnObject)
Handle_Expr_SingleRelation_DownCast = _Expr.Handle_Expr_SingleRelation_DownCast

class Expr_SystemRelation(Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a system with one relation

        :param relation:
        :type relation: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        _Expr.Expr_SystemRelation_swiginit(self, _Expr.new_Expr_SystemRelation(*args))

    def Add(self, *args):
        """
        * Appends <relation> in the list of components of <self>.

        :param relation:
        :type relation: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SystemRelation_Add(self, *args)


    def Remove(self, *args):
        """
        :param relation:
        :type relation: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _Expr.Expr_SystemRelation_Remove(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_SystemRelation self)"""
        return _Expr.Expr_SystemRelation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_SystemRelation self) -> Handle_Expr_SystemRelation"""
        return _Expr.Expr_SystemRelation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SystemRelation.Add = new_instancemethod(_Expr.Expr_SystemRelation_Add, None, Expr_SystemRelation)
Expr_SystemRelation.Remove = new_instancemethod(_Expr.Expr_SystemRelation_Remove, None, Expr_SystemRelation)
Expr_SystemRelation._kill_pointed = new_instancemethod(_Expr.Expr_SystemRelation__kill_pointed, None, Expr_SystemRelation)
Expr_SystemRelation.GetHandle = new_instancemethod(_Expr.Expr_SystemRelation_GetHandle, None, Expr_SystemRelation)
Expr_SystemRelation_swigregister = _Expr.Expr_SystemRelation_swigregister
Expr_SystemRelation_swigregister(Expr_SystemRelation)

class Handle_Expr_SystemRelation(Handle_Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_SystemRelation_swiginit(self, _Expr.new_Handle_Expr_SystemRelation(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_SystemRelation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_SystemRelation.Nullify = new_instancemethod(_Expr.Handle_Expr_SystemRelation_Nullify, None, Handle_Expr_SystemRelation)
Handle_Expr_SystemRelation.IsNull = new_instancemethod(_Expr.Handle_Expr_SystemRelation_IsNull, None, Handle_Expr_SystemRelation)
Handle_Expr_SystemRelation.GetObject = new_instancemethod(_Expr.Handle_Expr_SystemRelation_GetObject, None, Handle_Expr_SystemRelation)
Handle_Expr_SystemRelation._kill_pointed = new_instancemethod(_Expr.Handle_Expr_SystemRelation__kill_pointed, None, Handle_Expr_SystemRelation)
Handle_Expr_SystemRelation_swigregister = _Expr.Handle_Expr_SystemRelation_swigregister
Handle_Expr_SystemRelation_swigregister(Handle_Expr_SystemRelation)

def Handle_Expr_SystemRelation_DownCast(AnObject):
    return _Expr.Handle_Expr_SystemRelation_DownCast(AnObject)
Handle_Expr_SystemRelation_DownCast = _Expr.Handle_Expr_SystemRelation_DownCast

class Expr_UnaryExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Operand(self, *args):
        """
        * Returns the operand used

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_UnaryExpression_Operand(self, *args)


    def SetOperand(self, *args):
        """
        * Sets the operand used Raises InvalidOperand if <exp> contains <self>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_UnaryExpression_SetOperand(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_UnaryExpression self)"""
        return _Expr.Expr_UnaryExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_UnaryExpression self) -> Handle_Expr_UnaryExpression"""
        return _Expr.Expr_UnaryExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_UnaryExpression.Operand = new_instancemethod(_Expr.Expr_UnaryExpression_Operand, None, Expr_UnaryExpression)
Expr_UnaryExpression.SetOperand = new_instancemethod(_Expr.Expr_UnaryExpression_SetOperand, None, Expr_UnaryExpression)
Expr_UnaryExpression._kill_pointed = new_instancemethod(_Expr.Expr_UnaryExpression__kill_pointed, None, Expr_UnaryExpression)
Expr_UnaryExpression.GetHandle = new_instancemethod(_Expr.Expr_UnaryExpression_GetHandle, None, Expr_UnaryExpression)
Expr_UnaryExpression_swigregister = _Expr.Expr_UnaryExpression_swigregister
Expr_UnaryExpression_swigregister(Expr_UnaryExpression)

class Handle_Expr_UnaryExpression(Handle_Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_UnaryExpression_swiginit(self, _Expr.new_Handle_Expr_UnaryExpression(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_UnaryExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_UnaryExpression.Nullify = new_instancemethod(_Expr.Handle_Expr_UnaryExpression_Nullify, None, Handle_Expr_UnaryExpression)
Handle_Expr_UnaryExpression.IsNull = new_instancemethod(_Expr.Handle_Expr_UnaryExpression_IsNull, None, Handle_Expr_UnaryExpression)
Handle_Expr_UnaryExpression.GetObject = new_instancemethod(_Expr.Handle_Expr_UnaryExpression_GetObject, None, Handle_Expr_UnaryExpression)
Handle_Expr_UnaryExpression._kill_pointed = new_instancemethod(_Expr.Handle_Expr_UnaryExpression__kill_pointed, None, Handle_Expr_UnaryExpression)
Handle_Expr_UnaryExpression_swigregister = _Expr.Handle_Expr_UnaryExpression_swigregister
Handle_Expr_UnaryExpression_swigregister(Handle_Expr_UnaryExpression)

def Handle_Expr_UnaryExpression_DownCast(AnObject):
    return _Expr.Handle_Expr_UnaryExpression_DownCast(AnObject)
Handle_Expr_UnaryExpression_DownCast = _Expr.Handle_Expr_UnaryExpression_DownCast

class Expr_Absolute(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Abs of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Absolute_swiginit(self, _Expr.new_Expr_Absolute(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Absolute self)"""
        return _Expr.Expr_Absolute__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Absolute self) -> Handle_Expr_Absolute"""
        return _Expr.Expr_Absolute_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Absolute._kill_pointed = new_instancemethod(_Expr.Expr_Absolute__kill_pointed, None, Expr_Absolute)
Expr_Absolute.GetHandle = new_instancemethod(_Expr.Expr_Absolute_GetHandle, None, Expr_Absolute)
Expr_Absolute_swigregister = _Expr.Expr_Absolute_swigregister
Expr_Absolute_swigregister(Expr_Absolute)

class Handle_Expr_Absolute(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Absolute_swiginit(self, _Expr.new_Handle_Expr_Absolute(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Absolute_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Absolute.Nullify = new_instancemethod(_Expr.Handle_Expr_Absolute_Nullify, None, Handle_Expr_Absolute)
Handle_Expr_Absolute.IsNull = new_instancemethod(_Expr.Handle_Expr_Absolute_IsNull, None, Handle_Expr_Absolute)
Handle_Expr_Absolute.GetObject = new_instancemethod(_Expr.Handle_Expr_Absolute_GetObject, None, Handle_Expr_Absolute)
Handle_Expr_Absolute._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Absolute__kill_pointed, None, Handle_Expr_Absolute)
Handle_Expr_Absolute_swigregister = _Expr.Handle_Expr_Absolute_swigregister
Handle_Expr_Absolute_swigregister(Handle_Expr_Absolute)

def Handle_Expr_Absolute_DownCast(AnObject):
    return _Expr.Handle_Expr_Absolute_DownCast(AnObject)
Handle_Expr_Absolute_DownCast = _Expr.Handle_Expr_Absolute_DownCast

class Expr_ArcCosine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arccos of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArcCosine_swiginit(self, _Expr.new_Expr_ArcCosine(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArcCosine self)"""
        return _Expr.Expr_ArcCosine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArcCosine self) -> Handle_Expr_ArcCosine"""
        return _Expr.Expr_ArcCosine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArcCosine._kill_pointed = new_instancemethod(_Expr.Expr_ArcCosine__kill_pointed, None, Expr_ArcCosine)
Expr_ArcCosine.GetHandle = new_instancemethod(_Expr.Expr_ArcCosine_GetHandle, None, Expr_ArcCosine)
Expr_ArcCosine_swigregister = _Expr.Expr_ArcCosine_swigregister
Expr_ArcCosine_swigregister(Expr_ArcCosine)

class Handle_Expr_ArcCosine(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArcCosine_swiginit(self, _Expr.new_Handle_Expr_ArcCosine(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArcCosine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArcCosine.Nullify = new_instancemethod(_Expr.Handle_Expr_ArcCosine_Nullify, None, Handle_Expr_ArcCosine)
Handle_Expr_ArcCosine.IsNull = new_instancemethod(_Expr.Handle_Expr_ArcCosine_IsNull, None, Handle_Expr_ArcCosine)
Handle_Expr_ArcCosine.GetObject = new_instancemethod(_Expr.Handle_Expr_ArcCosine_GetObject, None, Handle_Expr_ArcCosine)
Handle_Expr_ArcCosine._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArcCosine__kill_pointed, None, Handle_Expr_ArcCosine)
Handle_Expr_ArcCosine_swigregister = _Expr.Handle_Expr_ArcCosine_swigregister
Handle_Expr_ArcCosine_swigregister(Handle_Expr_ArcCosine)

def Handle_Expr_ArcCosine_DownCast(AnObject):
    return _Expr.Handle_Expr_ArcCosine_DownCast(AnObject)
Handle_Expr_ArcCosine_DownCast = _Expr.Handle_Expr_ArcCosine_DownCast

class Expr_ArcSine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arcsin of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArcSine_swiginit(self, _Expr.new_Expr_ArcSine(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArcSine self)"""
        return _Expr.Expr_ArcSine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArcSine self) -> Handle_Expr_ArcSine"""
        return _Expr.Expr_ArcSine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArcSine._kill_pointed = new_instancemethod(_Expr.Expr_ArcSine__kill_pointed, None, Expr_ArcSine)
Expr_ArcSine.GetHandle = new_instancemethod(_Expr.Expr_ArcSine_GetHandle, None, Expr_ArcSine)
Expr_ArcSine_swigregister = _Expr.Expr_ArcSine_swigregister
Expr_ArcSine_swigregister(Expr_ArcSine)

class Handle_Expr_ArcSine(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArcSine_swiginit(self, _Expr.new_Handle_Expr_ArcSine(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArcSine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArcSine.Nullify = new_instancemethod(_Expr.Handle_Expr_ArcSine_Nullify, None, Handle_Expr_ArcSine)
Handle_Expr_ArcSine.IsNull = new_instancemethod(_Expr.Handle_Expr_ArcSine_IsNull, None, Handle_Expr_ArcSine)
Handle_Expr_ArcSine.GetObject = new_instancemethod(_Expr.Handle_Expr_ArcSine_GetObject, None, Handle_Expr_ArcSine)
Handle_Expr_ArcSine._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArcSine__kill_pointed, None, Handle_Expr_ArcSine)
Handle_Expr_ArcSine_swigregister = _Expr.Handle_Expr_ArcSine_swigregister
Handle_Expr_ArcSine_swigregister(Handle_Expr_ArcSine)

def Handle_Expr_ArcSine_DownCast(AnObject):
    return _Expr.Handle_Expr_ArcSine_DownCast(AnObject)
Handle_Expr_ArcSine_DownCast = _Expr.Handle_Expr_ArcSine_DownCast

class Expr_ArcTangent(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arctan of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArcTangent_swiginit(self, _Expr.new_Expr_ArcTangent(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArcTangent self)"""
        return _Expr.Expr_ArcTangent__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArcTangent self) -> Handle_Expr_ArcTangent"""
        return _Expr.Expr_ArcTangent_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArcTangent._kill_pointed = new_instancemethod(_Expr.Expr_ArcTangent__kill_pointed, None, Expr_ArcTangent)
Expr_ArcTangent.GetHandle = new_instancemethod(_Expr.Expr_ArcTangent_GetHandle, None, Expr_ArcTangent)
Expr_ArcTangent_swigregister = _Expr.Expr_ArcTangent_swigregister
Expr_ArcTangent_swigregister(Expr_ArcTangent)

class Handle_Expr_ArcTangent(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArcTangent_swiginit(self, _Expr.new_Handle_Expr_ArcTangent(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArcTangent_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArcTangent.Nullify = new_instancemethod(_Expr.Handle_Expr_ArcTangent_Nullify, None, Handle_Expr_ArcTangent)
Handle_Expr_ArcTangent.IsNull = new_instancemethod(_Expr.Handle_Expr_ArcTangent_IsNull, None, Handle_Expr_ArcTangent)
Handle_Expr_ArcTangent.GetObject = new_instancemethod(_Expr.Handle_Expr_ArcTangent_GetObject, None, Handle_Expr_ArcTangent)
Handle_Expr_ArcTangent._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArcTangent__kill_pointed, None, Handle_Expr_ArcTangent)
Handle_Expr_ArcTangent_swigregister = _Expr.Handle_Expr_ArcTangent_swigregister
Handle_Expr_ArcTangent_swigregister(Handle_Expr_ArcTangent)

def Handle_Expr_ArcTangent_DownCast(AnObject):
    return _Expr.Handle_Expr_ArcTangent_DownCast(AnObject)
Handle_Expr_ArcTangent_DownCast = _Expr.Handle_Expr_ArcTangent_DownCast

class Expr_ArgCosh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the ArgCosh of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArgCosh_swiginit(self, _Expr.new_Expr_ArgCosh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArgCosh self)"""
        return _Expr.Expr_ArgCosh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArgCosh self) -> Handle_Expr_ArgCosh"""
        return _Expr.Expr_ArgCosh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArgCosh._kill_pointed = new_instancemethod(_Expr.Expr_ArgCosh__kill_pointed, None, Expr_ArgCosh)
Expr_ArgCosh.GetHandle = new_instancemethod(_Expr.Expr_ArgCosh_GetHandle, None, Expr_ArgCosh)
Expr_ArgCosh_swigregister = _Expr.Expr_ArgCosh_swigregister
Expr_ArgCosh_swigregister(Expr_ArgCosh)

class Handle_Expr_ArgCosh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArgCosh_swiginit(self, _Expr.new_Handle_Expr_ArgCosh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArgCosh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArgCosh.Nullify = new_instancemethod(_Expr.Handle_Expr_ArgCosh_Nullify, None, Handle_Expr_ArgCosh)
Handle_Expr_ArgCosh.IsNull = new_instancemethod(_Expr.Handle_Expr_ArgCosh_IsNull, None, Handle_Expr_ArgCosh)
Handle_Expr_ArgCosh.GetObject = new_instancemethod(_Expr.Handle_Expr_ArgCosh_GetObject, None, Handle_Expr_ArgCosh)
Handle_Expr_ArgCosh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArgCosh__kill_pointed, None, Handle_Expr_ArgCosh)
Handle_Expr_ArgCosh_swigregister = _Expr.Handle_Expr_ArgCosh_swigregister
Handle_Expr_ArgCosh_swigregister(Handle_Expr_ArgCosh)

def Handle_Expr_ArgCosh_DownCast(AnObject):
    return _Expr.Handle_Expr_ArgCosh_DownCast(AnObject)
Handle_Expr_ArgCosh_DownCast = _Expr.Handle_Expr_ArgCosh_DownCast

class Expr_ArgSinh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the ArgSinh of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArgSinh_swiginit(self, _Expr.new_Expr_ArgSinh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArgSinh self)"""
        return _Expr.Expr_ArgSinh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArgSinh self) -> Handle_Expr_ArgSinh"""
        return _Expr.Expr_ArgSinh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArgSinh._kill_pointed = new_instancemethod(_Expr.Expr_ArgSinh__kill_pointed, None, Expr_ArgSinh)
Expr_ArgSinh.GetHandle = new_instancemethod(_Expr.Expr_ArgSinh_GetHandle, None, Expr_ArgSinh)
Expr_ArgSinh_swigregister = _Expr.Expr_ArgSinh_swigregister
Expr_ArgSinh_swigregister(Expr_ArgSinh)

class Handle_Expr_ArgSinh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArgSinh_swiginit(self, _Expr.new_Handle_Expr_ArgSinh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArgSinh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArgSinh.Nullify = new_instancemethod(_Expr.Handle_Expr_ArgSinh_Nullify, None, Handle_Expr_ArgSinh)
Handle_Expr_ArgSinh.IsNull = new_instancemethod(_Expr.Handle_Expr_ArgSinh_IsNull, None, Handle_Expr_ArgSinh)
Handle_Expr_ArgSinh.GetObject = new_instancemethod(_Expr.Handle_Expr_ArgSinh_GetObject, None, Handle_Expr_ArgSinh)
Handle_Expr_ArgSinh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArgSinh__kill_pointed, None, Handle_Expr_ArgSinh)
Handle_Expr_ArgSinh_swigregister = _Expr.Handle_Expr_ArgSinh_swigregister
Handle_Expr_ArgSinh_swigregister(Handle_Expr_ArgSinh)

def Handle_Expr_ArgSinh_DownCast(AnObject):
    return _Expr.Handle_Expr_ArgSinh_DownCast(AnObject)
Handle_Expr_ArgSinh_DownCast = _Expr.Handle_Expr_ArgSinh_DownCast

class Expr_ArgTanh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Argtanh of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_ArgTanh_swiginit(self, _Expr.new_Expr_ArgTanh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_ArgTanh self)"""
        return _Expr.Expr_ArgTanh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_ArgTanh self) -> Handle_Expr_ArgTanh"""
        return _Expr.Expr_ArgTanh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_ArgTanh._kill_pointed = new_instancemethod(_Expr.Expr_ArgTanh__kill_pointed, None, Expr_ArgTanh)
Expr_ArgTanh.GetHandle = new_instancemethod(_Expr.Expr_ArgTanh_GetHandle, None, Expr_ArgTanh)
Expr_ArgTanh_swigregister = _Expr.Expr_ArgTanh_swigregister
Expr_ArgTanh_swigregister(Expr_ArgTanh)

class Handle_Expr_ArgTanh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_ArgTanh_swiginit(self, _Expr.new_Handle_Expr_ArgTanh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_ArgTanh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_ArgTanh.Nullify = new_instancemethod(_Expr.Handle_Expr_ArgTanh_Nullify, None, Handle_Expr_ArgTanh)
Handle_Expr_ArgTanh.IsNull = new_instancemethod(_Expr.Handle_Expr_ArgTanh_IsNull, None, Handle_Expr_ArgTanh)
Handle_Expr_ArgTanh.GetObject = new_instancemethod(_Expr.Handle_Expr_ArgTanh_GetObject, None, Handle_Expr_ArgTanh)
Handle_Expr_ArgTanh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_ArgTanh__kill_pointed, None, Handle_Expr_ArgTanh)
Handle_Expr_ArgTanh_swigregister = _Expr.Handle_Expr_ArgTanh_swigregister
Handle_Expr_ArgTanh_swigregister(Handle_Expr_ArgTanh)

def Handle_Expr_ArgTanh_DownCast(AnObject):
    return _Expr.Handle_Expr_ArgTanh_DownCast(AnObject)
Handle_Expr_ArgTanh_DownCast = _Expr.Handle_Expr_ArgTanh_DownCast

class Expr_BinaryFunction(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates <self> as <func> (<exp1>,<exp2>). Raises exception if <func> is not binary.

        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_BinaryFunction_swiginit(self, _Expr.new_Expr_BinaryFunction(*args))

    def Function(self, *args):
        """
        * Returns the function defining <self>.

        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_BinaryFunction_Function(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_BinaryFunction self)"""
        return _Expr.Expr_BinaryFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_BinaryFunction self) -> Handle_Expr_BinaryFunction"""
        return _Expr.Expr_BinaryFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_BinaryFunction.Function = new_instancemethod(_Expr.Expr_BinaryFunction_Function, None, Expr_BinaryFunction)
Expr_BinaryFunction._kill_pointed = new_instancemethod(_Expr.Expr_BinaryFunction__kill_pointed, None, Expr_BinaryFunction)
Expr_BinaryFunction.GetHandle = new_instancemethod(_Expr.Expr_BinaryFunction_GetHandle, None, Expr_BinaryFunction)
Expr_BinaryFunction_swigregister = _Expr.Expr_BinaryFunction_swigregister
Expr_BinaryFunction_swigregister(Expr_BinaryFunction)

class Handle_Expr_BinaryFunction(Handle_Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_BinaryFunction_swiginit(self, _Expr.new_Handle_Expr_BinaryFunction(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_BinaryFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_BinaryFunction.Nullify = new_instancemethod(_Expr.Handle_Expr_BinaryFunction_Nullify, None, Handle_Expr_BinaryFunction)
Handle_Expr_BinaryFunction.IsNull = new_instancemethod(_Expr.Handle_Expr_BinaryFunction_IsNull, None, Handle_Expr_BinaryFunction)
Handle_Expr_BinaryFunction.GetObject = new_instancemethod(_Expr.Handle_Expr_BinaryFunction_GetObject, None, Handle_Expr_BinaryFunction)
Handle_Expr_BinaryFunction._kill_pointed = new_instancemethod(_Expr.Handle_Expr_BinaryFunction__kill_pointed, None, Handle_Expr_BinaryFunction)
Handle_Expr_BinaryFunction_swigregister = _Expr.Handle_Expr_BinaryFunction_swigregister
Handle_Expr_BinaryFunction_swigregister(Handle_Expr_BinaryFunction)

def Handle_Expr_BinaryFunction_DownCast(AnObject):
    return _Expr.Handle_Expr_BinaryFunction_DownCast(AnObject)
Handle_Expr_BinaryFunction_DownCast = _Expr.Handle_Expr_BinaryFunction_DownCast

class Expr_Cosh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Cosh of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Cosh_swiginit(self, _Expr.new_Expr_Cosh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Cosh self)"""
        return _Expr.Expr_Cosh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Cosh self) -> Handle_Expr_Cosh"""
        return _Expr.Expr_Cosh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Cosh._kill_pointed = new_instancemethod(_Expr.Expr_Cosh__kill_pointed, None, Expr_Cosh)
Expr_Cosh.GetHandle = new_instancemethod(_Expr.Expr_Cosh_GetHandle, None, Expr_Cosh)
Expr_Cosh_swigregister = _Expr.Expr_Cosh_swigregister
Expr_Cosh_swigregister(Expr_Cosh)

class Handle_Expr_Cosh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Cosh_swiginit(self, _Expr.new_Handle_Expr_Cosh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Cosh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Cosh.Nullify = new_instancemethod(_Expr.Handle_Expr_Cosh_Nullify, None, Handle_Expr_Cosh)
Handle_Expr_Cosh.IsNull = new_instancemethod(_Expr.Handle_Expr_Cosh_IsNull, None, Handle_Expr_Cosh)
Handle_Expr_Cosh.GetObject = new_instancemethod(_Expr.Handle_Expr_Cosh_GetObject, None, Handle_Expr_Cosh)
Handle_Expr_Cosh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Cosh__kill_pointed, None, Handle_Expr_Cosh)
Handle_Expr_Cosh_swigregister = _Expr.Handle_Expr_Cosh_swigregister
Handle_Expr_Cosh_swigregister(Handle_Expr_Cosh)

def Handle_Expr_Cosh_DownCast(AnObject):
    return _Expr.Handle_Expr_Cosh_DownCast(AnObject)
Handle_Expr_Cosh_DownCast = _Expr.Handle_Expr_Cosh_DownCast

class Expr_Cosine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the cosine of Exp

        :param Exp:
        :type Exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Cosine_swiginit(self, _Expr.new_Expr_Cosine(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Cosine self)"""
        return _Expr.Expr_Cosine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Cosine self) -> Handle_Expr_Cosine"""
        return _Expr.Expr_Cosine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Cosine._kill_pointed = new_instancemethod(_Expr.Expr_Cosine__kill_pointed, None, Expr_Cosine)
Expr_Cosine.GetHandle = new_instancemethod(_Expr.Expr_Cosine_GetHandle, None, Expr_Cosine)
Expr_Cosine_swigregister = _Expr.Expr_Cosine_swigregister
Expr_Cosine_swigregister(Expr_Cosine)

class Handle_Expr_Cosine(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Cosine_swiginit(self, _Expr.new_Handle_Expr_Cosine(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Cosine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Cosine.Nullify = new_instancemethod(_Expr.Handle_Expr_Cosine_Nullify, None, Handle_Expr_Cosine)
Handle_Expr_Cosine.IsNull = new_instancemethod(_Expr.Handle_Expr_Cosine_IsNull, None, Handle_Expr_Cosine)
Handle_Expr_Cosine.GetObject = new_instancemethod(_Expr.Handle_Expr_Cosine_GetObject, None, Handle_Expr_Cosine)
Handle_Expr_Cosine._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Cosine__kill_pointed, None, Handle_Expr_Cosine)
Handle_Expr_Cosine_swigregister = _Expr.Handle_Expr_Cosine_swigregister
Handle_Expr_Cosine_swigregister(Handle_Expr_Cosine)

def Handle_Expr_Cosine_DownCast(AnObject):
    return _Expr.Handle_Expr_Cosine_DownCast(AnObject)
Handle_Expr_Cosine_DownCast = _Expr.Handle_Expr_Cosine_DownCast

class Expr_Difference(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the difference <exp1> - <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Difference_swiginit(self, _Expr.new_Expr_Difference(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Difference self)"""
        return _Expr.Expr_Difference__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Difference self) -> Handle_Expr_Difference"""
        return _Expr.Expr_Difference_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Difference._kill_pointed = new_instancemethod(_Expr.Expr_Difference__kill_pointed, None, Expr_Difference)
Expr_Difference.GetHandle = new_instancemethod(_Expr.Expr_Difference_GetHandle, None, Expr_Difference)
Expr_Difference_swigregister = _Expr.Expr_Difference_swigregister
Expr_Difference_swigregister(Expr_Difference)

class Handle_Expr_Difference(Handle_Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Difference_swiginit(self, _Expr.new_Handle_Expr_Difference(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Difference_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Difference.Nullify = new_instancemethod(_Expr.Handle_Expr_Difference_Nullify, None, Handle_Expr_Difference)
Handle_Expr_Difference.IsNull = new_instancemethod(_Expr.Handle_Expr_Difference_IsNull, None, Handle_Expr_Difference)
Handle_Expr_Difference.GetObject = new_instancemethod(_Expr.Handle_Expr_Difference_GetObject, None, Handle_Expr_Difference)
Handle_Expr_Difference._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Difference__kill_pointed, None, Handle_Expr_Difference)
Handle_Expr_Difference_swigregister = _Expr.Handle_Expr_Difference_swigregister
Handle_Expr_Difference_swigregister(Handle_Expr_Difference)

def Handle_Expr_Difference_DownCast(AnObject):
    return _Expr.Handle_Expr_Difference_DownCast(AnObject)
Handle_Expr_Difference_DownCast = _Expr.Handle_Expr_Difference_DownCast

class Expr_Different(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> # <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Different_swiginit(self, _Expr.new_Expr_Different(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Different self)"""
        return _Expr.Expr_Different__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Different self) -> Handle_Expr_Different"""
        return _Expr.Expr_Different_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Different._kill_pointed = new_instancemethod(_Expr.Expr_Different__kill_pointed, None, Expr_Different)
Expr_Different.GetHandle = new_instancemethod(_Expr.Expr_Different_GetHandle, None, Expr_Different)
Expr_Different_swigregister = _Expr.Expr_Different_swigregister
Expr_Different_swigregister(Expr_Different)

class Handle_Expr_Different(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Different_swiginit(self, _Expr.new_Handle_Expr_Different(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Different_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Different.Nullify = new_instancemethod(_Expr.Handle_Expr_Different_Nullify, None, Handle_Expr_Different)
Handle_Expr_Different.IsNull = new_instancemethod(_Expr.Handle_Expr_Different_IsNull, None, Handle_Expr_Different)
Handle_Expr_Different.GetObject = new_instancemethod(_Expr.Handle_Expr_Different_GetObject, None, Handle_Expr_Different)
Handle_Expr_Different._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Different__kill_pointed, None, Handle_Expr_Different)
Handle_Expr_Different_swigregister = _Expr.Handle_Expr_Different_swigregister
Handle_Expr_Different_swigregister(Handle_Expr_Different)

def Handle_Expr_Different_DownCast(AnObject):
    return _Expr.Handle_Expr_Different_DownCast(AnObject)
Handle_Expr_Different_DownCast = _Expr.Handle_Expr_Different_DownCast

class Expr_Division(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the division <exp1>/<exp2>

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Division_swiginit(self, _Expr.new_Expr_Division(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Division self)"""
        return _Expr.Expr_Division__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Division self) -> Handle_Expr_Division"""
        return _Expr.Expr_Division_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Division._kill_pointed = new_instancemethod(_Expr.Expr_Division__kill_pointed, None, Expr_Division)
Expr_Division.GetHandle = new_instancemethod(_Expr.Expr_Division_GetHandle, None, Expr_Division)
Expr_Division_swigregister = _Expr.Expr_Division_swigregister
Expr_Division_swigregister(Expr_Division)

class Handle_Expr_Division(Handle_Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Division_swiginit(self, _Expr.new_Handle_Expr_Division(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Division_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Division.Nullify = new_instancemethod(_Expr.Handle_Expr_Division_Nullify, None, Handle_Expr_Division)
Handle_Expr_Division.IsNull = new_instancemethod(_Expr.Handle_Expr_Division_IsNull, None, Handle_Expr_Division)
Handle_Expr_Division.GetObject = new_instancemethod(_Expr.Handle_Expr_Division_GetObject, None, Handle_Expr_Division)
Handle_Expr_Division._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Division__kill_pointed, None, Handle_Expr_Division)
Handle_Expr_Division_swigregister = _Expr.Handle_Expr_Division_swigregister
Handle_Expr_Division_swigregister(Handle_Expr_Division)

def Handle_Expr_Division_DownCast(AnObject):
    return _Expr.Handle_Expr_Division_DownCast(AnObject)
Handle_Expr_Division_DownCast = _Expr.Handle_Expr_Division_DownCast

class Expr_Equal(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> = <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Equal_swiginit(self, _Expr.new_Expr_Equal(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Equal self)"""
        return _Expr.Expr_Equal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Equal self) -> Handle_Expr_Equal"""
        return _Expr.Expr_Equal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Equal._kill_pointed = new_instancemethod(_Expr.Expr_Equal__kill_pointed, None, Expr_Equal)
Expr_Equal.GetHandle = new_instancemethod(_Expr.Expr_Equal_GetHandle, None, Expr_Equal)
Expr_Equal_swigregister = _Expr.Expr_Equal_swigregister
Expr_Equal_swigregister(Expr_Equal)

class Handle_Expr_Equal(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Equal_swiginit(self, _Expr.new_Handle_Expr_Equal(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Equal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Equal.Nullify = new_instancemethod(_Expr.Handle_Expr_Equal_Nullify, None, Handle_Expr_Equal)
Handle_Expr_Equal.IsNull = new_instancemethod(_Expr.Handle_Expr_Equal_IsNull, None, Handle_Expr_Equal)
Handle_Expr_Equal.GetObject = new_instancemethod(_Expr.Handle_Expr_Equal_GetObject, None, Handle_Expr_Equal)
Handle_Expr_Equal._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Equal__kill_pointed, None, Handle_Expr_Equal)
Handle_Expr_Equal_swigregister = _Expr.Handle_Expr_Equal_swigregister
Handle_Expr_Equal_swigregister(Handle_Expr_Equal)

def Handle_Expr_Equal_DownCast(AnObject):
    return _Expr.Handle_Expr_Equal_DownCast(AnObject)
Handle_Expr_Equal_DownCast = _Expr.Handle_Expr_Equal_DownCast

class Expr_Exponential(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the exponential of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Exponential_swiginit(self, _Expr.new_Expr_Exponential(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Exponential self)"""
        return _Expr.Expr_Exponential__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Exponential self) -> Handle_Expr_Exponential"""
        return _Expr.Expr_Exponential_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Exponential._kill_pointed = new_instancemethod(_Expr.Expr_Exponential__kill_pointed, None, Expr_Exponential)
Expr_Exponential.GetHandle = new_instancemethod(_Expr.Expr_Exponential_GetHandle, None, Expr_Exponential)
Expr_Exponential_swigregister = _Expr.Expr_Exponential_swigregister
Expr_Exponential_swigregister(Expr_Exponential)

class Handle_Expr_Exponential(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Exponential_swiginit(self, _Expr.new_Handle_Expr_Exponential(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Exponential_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Exponential.Nullify = new_instancemethod(_Expr.Handle_Expr_Exponential_Nullify, None, Handle_Expr_Exponential)
Handle_Expr_Exponential.IsNull = new_instancemethod(_Expr.Handle_Expr_Exponential_IsNull, None, Handle_Expr_Exponential)
Handle_Expr_Exponential.GetObject = new_instancemethod(_Expr.Handle_Expr_Exponential_GetObject, None, Handle_Expr_Exponential)
Handle_Expr_Exponential._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Exponential__kill_pointed, None, Handle_Expr_Exponential)
Handle_Expr_Exponential_swigregister = _Expr.Handle_Expr_Exponential_swigregister
Handle_Expr_Exponential_swigregister(Handle_Expr_Exponential)

def Handle_Expr_Exponential_DownCast(AnObject):
    return _Expr.Handle_Expr_Exponential_DownCast(AnObject)
Handle_Expr_Exponential_DownCast = _Expr.Handle_Expr_Exponential_DownCast

class Expr_Exponentiate(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the exponential <exp1> ^ <exp2>

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Exponentiate_swiginit(self, _Expr.new_Expr_Exponentiate(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Exponentiate self)"""
        return _Expr.Expr_Exponentiate__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Exponentiate self) -> Handle_Expr_Exponentiate"""
        return _Expr.Expr_Exponentiate_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Exponentiate._kill_pointed = new_instancemethod(_Expr.Expr_Exponentiate__kill_pointed, None, Expr_Exponentiate)
Expr_Exponentiate.GetHandle = new_instancemethod(_Expr.Expr_Exponentiate_GetHandle, None, Expr_Exponentiate)
Expr_Exponentiate_swigregister = _Expr.Expr_Exponentiate_swigregister
Expr_Exponentiate_swigregister(Expr_Exponentiate)

class Handle_Expr_Exponentiate(Handle_Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Exponentiate_swiginit(self, _Expr.new_Handle_Expr_Exponentiate(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Exponentiate_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Exponentiate.Nullify = new_instancemethod(_Expr.Handle_Expr_Exponentiate_Nullify, None, Handle_Expr_Exponentiate)
Handle_Expr_Exponentiate.IsNull = new_instancemethod(_Expr.Handle_Expr_Exponentiate_IsNull, None, Handle_Expr_Exponentiate)
Handle_Expr_Exponentiate.GetObject = new_instancemethod(_Expr.Handle_Expr_Exponentiate_GetObject, None, Handle_Expr_Exponentiate)
Handle_Expr_Exponentiate._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Exponentiate__kill_pointed, None, Handle_Expr_Exponentiate)
Handle_Expr_Exponentiate_swigregister = _Expr.Handle_Expr_Exponentiate_swigregister
Handle_Expr_Exponentiate_swigregister(Handle_Expr_Exponentiate)

def Handle_Expr_Exponentiate_DownCast(AnObject):
    return _Expr.Handle_Expr_Exponentiate_DownCast(AnObject)
Handle_Expr_Exponentiate_DownCast = _Expr.Handle_Expr_Exponentiate_DownCast

class Expr_GreaterThan(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> > <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_GreaterThan_swiginit(self, _Expr.new_Expr_GreaterThan(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_GreaterThan self)"""
        return _Expr.Expr_GreaterThan__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_GreaterThan self) -> Handle_Expr_GreaterThan"""
        return _Expr.Expr_GreaterThan_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_GreaterThan._kill_pointed = new_instancemethod(_Expr.Expr_GreaterThan__kill_pointed, None, Expr_GreaterThan)
Expr_GreaterThan.GetHandle = new_instancemethod(_Expr.Expr_GreaterThan_GetHandle, None, Expr_GreaterThan)
Expr_GreaterThan_swigregister = _Expr.Expr_GreaterThan_swigregister
Expr_GreaterThan_swigregister(Expr_GreaterThan)

class Handle_Expr_GreaterThan(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_GreaterThan_swiginit(self, _Expr.new_Handle_Expr_GreaterThan(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_GreaterThan_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_GreaterThan.Nullify = new_instancemethod(_Expr.Handle_Expr_GreaterThan_Nullify, None, Handle_Expr_GreaterThan)
Handle_Expr_GreaterThan.IsNull = new_instancemethod(_Expr.Handle_Expr_GreaterThan_IsNull, None, Handle_Expr_GreaterThan)
Handle_Expr_GreaterThan.GetObject = new_instancemethod(_Expr.Handle_Expr_GreaterThan_GetObject, None, Handle_Expr_GreaterThan)
Handle_Expr_GreaterThan._kill_pointed = new_instancemethod(_Expr.Handle_Expr_GreaterThan__kill_pointed, None, Handle_Expr_GreaterThan)
Handle_Expr_GreaterThan_swigregister = _Expr.Handle_Expr_GreaterThan_swigregister
Handle_Expr_GreaterThan_swigregister(Handle_Expr_GreaterThan)

def Handle_Expr_GreaterThan_DownCast(AnObject):
    return _Expr.Handle_Expr_GreaterThan_DownCast(AnObject)
Handle_Expr_GreaterThan_DownCast = _Expr.Handle_Expr_GreaterThan_DownCast

class Expr_GreaterThanOrEqual(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> >= <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_GreaterThanOrEqual_swiginit(self, _Expr.new_Expr_GreaterThanOrEqual(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_GreaterThanOrEqual self)"""
        return _Expr.Expr_GreaterThanOrEqual__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_GreaterThanOrEqual self) -> Handle_Expr_GreaterThanOrEqual"""
        return _Expr.Expr_GreaterThanOrEqual_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_GreaterThanOrEqual._kill_pointed = new_instancemethod(_Expr.Expr_GreaterThanOrEqual__kill_pointed, None, Expr_GreaterThanOrEqual)
Expr_GreaterThanOrEqual.GetHandle = new_instancemethod(_Expr.Expr_GreaterThanOrEqual_GetHandle, None, Expr_GreaterThanOrEqual)
Expr_GreaterThanOrEqual_swigregister = _Expr.Expr_GreaterThanOrEqual_swigregister
Expr_GreaterThanOrEqual_swigregister(Expr_GreaterThanOrEqual)

class Handle_Expr_GreaterThanOrEqual(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_GreaterThanOrEqual_swiginit(self, _Expr.new_Handle_Expr_GreaterThanOrEqual(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_GreaterThanOrEqual_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_GreaterThanOrEqual.Nullify = new_instancemethod(_Expr.Handle_Expr_GreaterThanOrEqual_Nullify, None, Handle_Expr_GreaterThanOrEqual)
Handle_Expr_GreaterThanOrEqual.IsNull = new_instancemethod(_Expr.Handle_Expr_GreaterThanOrEqual_IsNull, None, Handle_Expr_GreaterThanOrEqual)
Handle_Expr_GreaterThanOrEqual.GetObject = new_instancemethod(_Expr.Handle_Expr_GreaterThanOrEqual_GetObject, None, Handle_Expr_GreaterThanOrEqual)
Handle_Expr_GreaterThanOrEqual._kill_pointed = new_instancemethod(_Expr.Handle_Expr_GreaterThanOrEqual__kill_pointed, None, Handle_Expr_GreaterThanOrEqual)
Handle_Expr_GreaterThanOrEqual_swigregister = _Expr.Handle_Expr_GreaterThanOrEqual_swigregister
Handle_Expr_GreaterThanOrEqual_swigregister(Handle_Expr_GreaterThanOrEqual)

def Handle_Expr_GreaterThanOrEqual_DownCast(AnObject):
    return _Expr.Handle_Expr_GreaterThanOrEqual_DownCast(AnObject)
Handle_Expr_GreaterThanOrEqual_DownCast = _Expr.Handle_Expr_GreaterThanOrEqual_DownCast

class Expr_LessThan(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> < <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_LessThan_swiginit(self, _Expr.new_Expr_LessThan(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_LessThan self)"""
        return _Expr.Expr_LessThan__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_LessThan self) -> Handle_Expr_LessThan"""
        return _Expr.Expr_LessThan_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_LessThan._kill_pointed = new_instancemethod(_Expr.Expr_LessThan__kill_pointed, None, Expr_LessThan)
Expr_LessThan.GetHandle = new_instancemethod(_Expr.Expr_LessThan_GetHandle, None, Expr_LessThan)
Expr_LessThan_swigregister = _Expr.Expr_LessThan_swigregister
Expr_LessThan_swigregister(Expr_LessThan)

class Handle_Expr_LessThan(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_LessThan_swiginit(self, _Expr.new_Handle_Expr_LessThan(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_LessThan_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_LessThan.Nullify = new_instancemethod(_Expr.Handle_Expr_LessThan_Nullify, None, Handle_Expr_LessThan)
Handle_Expr_LessThan.IsNull = new_instancemethod(_Expr.Handle_Expr_LessThan_IsNull, None, Handle_Expr_LessThan)
Handle_Expr_LessThan.GetObject = new_instancemethod(_Expr.Handle_Expr_LessThan_GetObject, None, Handle_Expr_LessThan)
Handle_Expr_LessThan._kill_pointed = new_instancemethod(_Expr.Handle_Expr_LessThan__kill_pointed, None, Handle_Expr_LessThan)
Handle_Expr_LessThan_swigregister = _Expr.Handle_Expr_LessThan_swigregister
Handle_Expr_LessThan_swigregister(Handle_Expr_LessThan)

def Handle_Expr_LessThan_DownCast(AnObject):
    return _Expr.Handle_Expr_LessThan_DownCast(AnObject)
Handle_Expr_LessThan_DownCast = _Expr.Handle_Expr_LessThan_DownCast

class Expr_LessThanOrEqual(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> <= <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_LessThanOrEqual_swiginit(self, _Expr.new_Expr_LessThanOrEqual(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_LessThanOrEqual self)"""
        return _Expr.Expr_LessThanOrEqual__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_LessThanOrEqual self) -> Handle_Expr_LessThanOrEqual"""
        return _Expr.Expr_LessThanOrEqual_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_LessThanOrEqual._kill_pointed = new_instancemethod(_Expr.Expr_LessThanOrEqual__kill_pointed, None, Expr_LessThanOrEqual)
Expr_LessThanOrEqual.GetHandle = new_instancemethod(_Expr.Expr_LessThanOrEqual_GetHandle, None, Expr_LessThanOrEqual)
Expr_LessThanOrEqual_swigregister = _Expr.Expr_LessThanOrEqual_swigregister
Expr_LessThanOrEqual_swigregister(Expr_LessThanOrEqual)

class Handle_Expr_LessThanOrEqual(Handle_Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_LessThanOrEqual_swiginit(self, _Expr.new_Handle_Expr_LessThanOrEqual(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_LessThanOrEqual_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_LessThanOrEqual.Nullify = new_instancemethod(_Expr.Handle_Expr_LessThanOrEqual_Nullify, None, Handle_Expr_LessThanOrEqual)
Handle_Expr_LessThanOrEqual.IsNull = new_instancemethod(_Expr.Handle_Expr_LessThanOrEqual_IsNull, None, Handle_Expr_LessThanOrEqual)
Handle_Expr_LessThanOrEqual.GetObject = new_instancemethod(_Expr.Handle_Expr_LessThanOrEqual_GetObject, None, Handle_Expr_LessThanOrEqual)
Handle_Expr_LessThanOrEqual._kill_pointed = new_instancemethod(_Expr.Handle_Expr_LessThanOrEqual__kill_pointed, None, Handle_Expr_LessThanOrEqual)
Handle_Expr_LessThanOrEqual_swigregister = _Expr.Handle_Expr_LessThanOrEqual_swigregister
Handle_Expr_LessThanOrEqual_swigregister(Handle_Expr_LessThanOrEqual)

def Handle_Expr_LessThanOrEqual_DownCast(AnObject):
    return _Expr.Handle_Expr_LessThanOrEqual_DownCast(AnObject)
Handle_Expr_LessThanOrEqual_DownCast = _Expr.Handle_Expr_LessThanOrEqual_DownCast

class Expr_LogOf10(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the base 10 logarithm of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_LogOf10_swiginit(self, _Expr.new_Expr_LogOf10(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_LogOf10 self)"""
        return _Expr.Expr_LogOf10__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_LogOf10 self) -> Handle_Expr_LogOf10"""
        return _Expr.Expr_LogOf10_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_LogOf10._kill_pointed = new_instancemethod(_Expr.Expr_LogOf10__kill_pointed, None, Expr_LogOf10)
Expr_LogOf10.GetHandle = new_instancemethod(_Expr.Expr_LogOf10_GetHandle, None, Expr_LogOf10)
Expr_LogOf10_swigregister = _Expr.Expr_LogOf10_swigregister
Expr_LogOf10_swigregister(Expr_LogOf10)

class Handle_Expr_LogOf10(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_LogOf10_swiginit(self, _Expr.new_Handle_Expr_LogOf10(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_LogOf10_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_LogOf10.Nullify = new_instancemethod(_Expr.Handle_Expr_LogOf10_Nullify, None, Handle_Expr_LogOf10)
Handle_Expr_LogOf10.IsNull = new_instancemethod(_Expr.Handle_Expr_LogOf10_IsNull, None, Handle_Expr_LogOf10)
Handle_Expr_LogOf10.GetObject = new_instancemethod(_Expr.Handle_Expr_LogOf10_GetObject, None, Handle_Expr_LogOf10)
Handle_Expr_LogOf10._kill_pointed = new_instancemethod(_Expr.Handle_Expr_LogOf10__kill_pointed, None, Handle_Expr_LogOf10)
Handle_Expr_LogOf10_swigregister = _Expr.Handle_Expr_LogOf10_swigregister
Handle_Expr_LogOf10_swigregister(Handle_Expr_LogOf10)

def Handle_Expr_LogOf10_DownCast(AnObject):
    return _Expr.Handle_Expr_LogOf10_DownCast(AnObject)
Handle_Expr_LogOf10_DownCast = _Expr.Handle_Expr_LogOf10_DownCast

class Expr_LogOfe(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the natural logarithm of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_LogOfe_swiginit(self, _Expr.new_Expr_LogOfe(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_LogOfe self)"""
        return _Expr.Expr_LogOfe__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_LogOfe self) -> Handle_Expr_LogOfe"""
        return _Expr.Expr_LogOfe_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_LogOfe._kill_pointed = new_instancemethod(_Expr.Expr_LogOfe__kill_pointed, None, Expr_LogOfe)
Expr_LogOfe.GetHandle = new_instancemethod(_Expr.Expr_LogOfe_GetHandle, None, Expr_LogOfe)
Expr_LogOfe_swigregister = _Expr.Expr_LogOfe_swigregister
Expr_LogOfe_swigregister(Expr_LogOfe)

class Handle_Expr_LogOfe(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_LogOfe_swiginit(self, _Expr.new_Handle_Expr_LogOfe(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_LogOfe_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_LogOfe.Nullify = new_instancemethod(_Expr.Handle_Expr_LogOfe_Nullify, None, Handle_Expr_LogOfe)
Handle_Expr_LogOfe.IsNull = new_instancemethod(_Expr.Handle_Expr_LogOfe_IsNull, None, Handle_Expr_LogOfe)
Handle_Expr_LogOfe.GetObject = new_instancemethod(_Expr.Handle_Expr_LogOfe_GetObject, None, Handle_Expr_LogOfe)
Handle_Expr_LogOfe._kill_pointed = new_instancemethod(_Expr.Handle_Expr_LogOfe__kill_pointed, None, Handle_Expr_LogOfe)
Handle_Expr_LogOfe_swigregister = _Expr.Handle_Expr_LogOfe_swigregister
Handle_Expr_LogOfe_swigregister(Handle_Expr_LogOfe)

def Handle_Expr_LogOfe_DownCast(AnObject):
    return _Expr.Handle_Expr_LogOfe_DownCast(AnObject)
Handle_Expr_LogOfe_DownCast = _Expr.Handle_Expr_LogOfe_DownCast

class Expr_NamedConstant(Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a constant value of name <name> and value <value>.

        :param name:
        :type name: TCollection_AsciiString &
        :param value:
        :type value: float
        :rtype: None

        """
        _Expr.Expr_NamedConstant_swiginit(self, _Expr.new_Expr_NamedConstant(*args))

    def GetValue(self, *args):
        """
        :rtype: float

        """
        return _Expr.Expr_NamedConstant_GetValue(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_NamedConstant self)"""
        return _Expr.Expr_NamedConstant__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_NamedConstant self) -> Handle_Expr_NamedConstant"""
        return _Expr.Expr_NamedConstant_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_NamedConstant.GetValue = new_instancemethod(_Expr.Expr_NamedConstant_GetValue, None, Expr_NamedConstant)
Expr_NamedConstant._kill_pointed = new_instancemethod(_Expr.Expr_NamedConstant__kill_pointed, None, Expr_NamedConstant)
Expr_NamedConstant.GetHandle = new_instancemethod(_Expr.Expr_NamedConstant_GetHandle, None, Expr_NamedConstant)
Expr_NamedConstant_swigregister = _Expr.Expr_NamedConstant_swigregister
Expr_NamedConstant_swigregister(Expr_NamedConstant)

class Handle_Expr_NamedConstant(Handle_Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_NamedConstant_swiginit(self, _Expr.new_Handle_Expr_NamedConstant(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_NamedConstant_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_NamedConstant.Nullify = new_instancemethod(_Expr.Handle_Expr_NamedConstant_Nullify, None, Handle_Expr_NamedConstant)
Handle_Expr_NamedConstant.IsNull = new_instancemethod(_Expr.Handle_Expr_NamedConstant_IsNull, None, Handle_Expr_NamedConstant)
Handle_Expr_NamedConstant.GetObject = new_instancemethod(_Expr.Handle_Expr_NamedConstant_GetObject, None, Handle_Expr_NamedConstant)
Handle_Expr_NamedConstant._kill_pointed = new_instancemethod(_Expr.Handle_Expr_NamedConstant__kill_pointed, None, Handle_Expr_NamedConstant)
Handle_Expr_NamedConstant_swigregister = _Expr.Handle_Expr_NamedConstant_swigregister
Handle_Expr_NamedConstant_swigregister(Handle_Expr_NamedConstant)

def Handle_Expr_NamedConstant_DownCast(AnObject):
    return _Expr.Handle_Expr_NamedConstant_DownCast(AnObject)
Handle_Expr_NamedConstant_DownCast = _Expr.Handle_Expr_NamedConstant_DownCast

class Expr_NamedUnknown(Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: None

        """
        _Expr.Expr_NamedUnknown_swiginit(self, _Expr.new_Expr_NamedUnknown(*args))

    def IsAssigned(self, *args):
        """
        * Tests if an expression is assigned to <self>.

        :rtype: bool

        """
        return _Expr.Expr_NamedUnknown_IsAssigned(self, *args)


    def AssignedExpression(self, *args):
        """
        * If exists, returns the assigned expression. An exception is raised if the expression does not exist.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _Expr.Expr_NamedUnknown_AssignedExpression(self, *args)


    def Assign(self, *args):
        """
        * Assigns <self> to <exp> expression. Raises exception if <exp> refers to <self>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _Expr.Expr_NamedUnknown_Assign(self, *args)


    def Deassign(self, *args):
        """
        * Supresses the assigned expression

        :rtype: None

        """
        return _Expr.Expr_NamedUnknown_Deassign(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_NamedUnknown self)"""
        return _Expr.Expr_NamedUnknown__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_NamedUnknown self) -> Handle_Expr_NamedUnknown"""
        return _Expr.Expr_NamedUnknown_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_NamedUnknown.IsAssigned = new_instancemethod(_Expr.Expr_NamedUnknown_IsAssigned, None, Expr_NamedUnknown)
Expr_NamedUnknown.AssignedExpression = new_instancemethod(_Expr.Expr_NamedUnknown_AssignedExpression, None, Expr_NamedUnknown)
Expr_NamedUnknown.Assign = new_instancemethod(_Expr.Expr_NamedUnknown_Assign, None, Expr_NamedUnknown)
Expr_NamedUnknown.Deassign = new_instancemethod(_Expr.Expr_NamedUnknown_Deassign, None, Expr_NamedUnknown)
Expr_NamedUnknown._kill_pointed = new_instancemethod(_Expr.Expr_NamedUnknown__kill_pointed, None, Expr_NamedUnknown)
Expr_NamedUnknown.GetHandle = new_instancemethod(_Expr.Expr_NamedUnknown_GetHandle, None, Expr_NamedUnknown)
Expr_NamedUnknown_swigregister = _Expr.Expr_NamedUnknown_swigregister
Expr_NamedUnknown_swigregister(Expr_NamedUnknown)

class Handle_Expr_NamedUnknown(Handle_Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_NamedUnknown_swiginit(self, _Expr.new_Handle_Expr_NamedUnknown(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_NamedUnknown_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_NamedUnknown.Nullify = new_instancemethod(_Expr.Handle_Expr_NamedUnknown_Nullify, None, Handle_Expr_NamedUnknown)
Handle_Expr_NamedUnknown.IsNull = new_instancemethod(_Expr.Handle_Expr_NamedUnknown_IsNull, None, Handle_Expr_NamedUnknown)
Handle_Expr_NamedUnknown.GetObject = new_instancemethod(_Expr.Handle_Expr_NamedUnknown_GetObject, None, Handle_Expr_NamedUnknown)
Handle_Expr_NamedUnknown._kill_pointed = new_instancemethod(_Expr.Handle_Expr_NamedUnknown__kill_pointed, None, Handle_Expr_NamedUnknown)
Handle_Expr_NamedUnknown_swigregister = _Expr.Handle_Expr_NamedUnknown_swigregister
Handle_Expr_NamedUnknown_swigregister(Handle_Expr_NamedUnknown)

def Handle_Expr_NamedUnknown_DownCast(AnObject):
    return _Expr.Handle_Expr_NamedUnknown_DownCast(AnObject)
Handle_Expr_NamedUnknown_DownCast = _Expr.Handle_Expr_NamedUnknown_DownCast

class Expr_PolyFunction(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates <self> as <func>(<exps_1>,<exps_2>,...,<exps_n>)

        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :param exps:
        :type exps: Expr_Array1OfGeneralExpression &
        :rtype: None

        """
        _Expr.Expr_PolyFunction_swiginit(self, _Expr.new_Expr_PolyFunction(*args))

    def Function(self, *args):
        """
        * Returns the function defining <self>.

        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_PolyFunction_Function(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_PolyFunction self)"""
        return _Expr.Expr_PolyFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_PolyFunction self) -> Handle_Expr_PolyFunction"""
        return _Expr.Expr_PolyFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_PolyFunction.Function = new_instancemethod(_Expr.Expr_PolyFunction_Function, None, Expr_PolyFunction)
Expr_PolyFunction._kill_pointed = new_instancemethod(_Expr.Expr_PolyFunction__kill_pointed, None, Expr_PolyFunction)
Expr_PolyFunction.GetHandle = new_instancemethod(_Expr.Expr_PolyFunction_GetHandle, None, Expr_PolyFunction)
Expr_PolyFunction_swigregister = _Expr.Expr_PolyFunction_swigregister
Expr_PolyFunction_swigregister(Expr_PolyFunction)

class Handle_Expr_PolyFunction(Handle_Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_PolyFunction_swiginit(self, _Expr.new_Handle_Expr_PolyFunction(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_PolyFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_PolyFunction.Nullify = new_instancemethod(_Expr.Handle_Expr_PolyFunction_Nullify, None, Handle_Expr_PolyFunction)
Handle_Expr_PolyFunction.IsNull = new_instancemethod(_Expr.Handle_Expr_PolyFunction_IsNull, None, Handle_Expr_PolyFunction)
Handle_Expr_PolyFunction.GetObject = new_instancemethod(_Expr.Handle_Expr_PolyFunction_GetObject, None, Handle_Expr_PolyFunction)
Handle_Expr_PolyFunction._kill_pointed = new_instancemethod(_Expr.Handle_Expr_PolyFunction__kill_pointed, None, Handle_Expr_PolyFunction)
Handle_Expr_PolyFunction_swigregister = _Expr.Handle_Expr_PolyFunction_swigregister
Handle_Expr_PolyFunction_swigregister(Handle_Expr_PolyFunction)

def Handle_Expr_PolyFunction_DownCast(AnObject):
    return _Expr.Handle_Expr_PolyFunction_DownCast(AnObject)
Handle_Expr_PolyFunction_DownCast = _Expr.Handle_Expr_PolyFunction_DownCast

class Expr_Product(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the product of all members of sequence <exps>

        :param exps:
        :type exps: Expr_SequenceOfGeneralExpression &
        :rtype: None

        * Creates the product of <exp1> and <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Product_swiginit(self, _Expr.new_Expr_Product(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Product self)"""
        return _Expr.Expr_Product__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Product self) -> Handle_Expr_Product"""
        return _Expr.Expr_Product_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Product._kill_pointed = new_instancemethod(_Expr.Expr_Product__kill_pointed, None, Expr_Product)
Expr_Product.GetHandle = new_instancemethod(_Expr.Expr_Product_GetHandle, None, Expr_Product)
Expr_Product_swigregister = _Expr.Expr_Product_swigregister
Expr_Product_swigregister(Expr_Product)

class Handle_Expr_Product(Handle_Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Product_swiginit(self, _Expr.new_Handle_Expr_Product(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Product_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Product.Nullify = new_instancemethod(_Expr.Handle_Expr_Product_Nullify, None, Handle_Expr_Product)
Handle_Expr_Product.IsNull = new_instancemethod(_Expr.Handle_Expr_Product_IsNull, None, Handle_Expr_Product)
Handle_Expr_Product.GetObject = new_instancemethod(_Expr.Handle_Expr_Product_GetObject, None, Handle_Expr_Product)
Handle_Expr_Product._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Product__kill_pointed, None, Handle_Expr_Product)
Handle_Expr_Product_swigregister = _Expr.Handle_Expr_Product_swigregister
Handle_Expr_Product_swigregister(Handle_Expr_Product)

def Handle_Expr_Product_DownCast(AnObject):
    return _Expr.Handle_Expr_Product_DownCast(AnObject)
Handle_Expr_Product_DownCast = _Expr.Handle_Expr_Product_DownCast

class Expr_Sine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sine of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Sine_swiginit(self, _Expr.new_Expr_Sine(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Sine self)"""
        return _Expr.Expr_Sine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Sine self) -> Handle_Expr_Sine"""
        return _Expr.Expr_Sine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Sine._kill_pointed = new_instancemethod(_Expr.Expr_Sine__kill_pointed, None, Expr_Sine)
Expr_Sine.GetHandle = new_instancemethod(_Expr.Expr_Sine_GetHandle, None, Expr_Sine)
Expr_Sine_swigregister = _Expr.Expr_Sine_swigregister
Expr_Sine_swigregister(Expr_Sine)

class Handle_Expr_Sine(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Sine_swiginit(self, _Expr.new_Handle_Expr_Sine(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Sine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Sine.Nullify = new_instancemethod(_Expr.Handle_Expr_Sine_Nullify, None, Handle_Expr_Sine)
Handle_Expr_Sine.IsNull = new_instancemethod(_Expr.Handle_Expr_Sine_IsNull, None, Handle_Expr_Sine)
Handle_Expr_Sine.GetObject = new_instancemethod(_Expr.Handle_Expr_Sine_GetObject, None, Handle_Expr_Sine)
Handle_Expr_Sine._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Sine__kill_pointed, None, Handle_Expr_Sine)
Handle_Expr_Sine_swigregister = _Expr.Handle_Expr_Sine_swigregister
Handle_Expr_Sine_swigregister(Handle_Expr_Sine)

def Handle_Expr_Sine_DownCast(AnObject):
    return _Expr.Handle_Expr_Sine_DownCast(AnObject)
Handle_Expr_Sine_DownCast = _Expr.Handle_Expr_Sine_DownCast

class Expr_Sinh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sinh of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Sinh_swiginit(self, _Expr.new_Expr_Sinh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Sinh self)"""
        return _Expr.Expr_Sinh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Sinh self) -> Handle_Expr_Sinh"""
        return _Expr.Expr_Sinh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Sinh._kill_pointed = new_instancemethod(_Expr.Expr_Sinh__kill_pointed, None, Expr_Sinh)
Expr_Sinh.GetHandle = new_instancemethod(_Expr.Expr_Sinh_GetHandle, None, Expr_Sinh)
Expr_Sinh_swigregister = _Expr.Expr_Sinh_swigregister
Expr_Sinh_swigregister(Expr_Sinh)

class Handle_Expr_Sinh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Sinh_swiginit(self, _Expr.new_Handle_Expr_Sinh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Sinh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Sinh.Nullify = new_instancemethod(_Expr.Handle_Expr_Sinh_Nullify, None, Handle_Expr_Sinh)
Handle_Expr_Sinh.IsNull = new_instancemethod(_Expr.Handle_Expr_Sinh_IsNull, None, Handle_Expr_Sinh)
Handle_Expr_Sinh.GetObject = new_instancemethod(_Expr.Handle_Expr_Sinh_GetObject, None, Handle_Expr_Sinh)
Handle_Expr_Sinh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Sinh__kill_pointed, None, Handle_Expr_Sinh)
Handle_Expr_Sinh_swigregister = _Expr.Handle_Expr_Sinh_swigregister
Handle_Expr_Sinh_swigregister(Handle_Expr_Sinh)

def Handle_Expr_Sinh_DownCast(AnObject):
    return _Expr.Handle_Expr_Sinh_DownCast(AnObject)
Handle_Expr_Sinh_DownCast = _Expr.Handle_Expr_Sinh_DownCast

class Expr_Square(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the square of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Square_swiginit(self, _Expr.new_Expr_Square(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Square self)"""
        return _Expr.Expr_Square__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Square self) -> Handle_Expr_Square"""
        return _Expr.Expr_Square_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Square._kill_pointed = new_instancemethod(_Expr.Expr_Square__kill_pointed, None, Expr_Square)
Expr_Square.GetHandle = new_instancemethod(_Expr.Expr_Square_GetHandle, None, Expr_Square)
Expr_Square_swigregister = _Expr.Expr_Square_swigregister
Expr_Square_swigregister(Expr_Square)

class Handle_Expr_Square(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Square_swiginit(self, _Expr.new_Handle_Expr_Square(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Square_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Square.Nullify = new_instancemethod(_Expr.Handle_Expr_Square_Nullify, None, Handle_Expr_Square)
Handle_Expr_Square.IsNull = new_instancemethod(_Expr.Handle_Expr_Square_IsNull, None, Handle_Expr_Square)
Handle_Expr_Square.GetObject = new_instancemethod(_Expr.Handle_Expr_Square_GetObject, None, Handle_Expr_Square)
Handle_Expr_Square._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Square__kill_pointed, None, Handle_Expr_Square)
Handle_Expr_Square_swigregister = _Expr.Handle_Expr_Square_swigregister
Handle_Expr_Square_swigregister(Handle_Expr_Square)

def Handle_Expr_Square_DownCast(AnObject):
    return _Expr.Handle_Expr_Square_DownCast(AnObject)
Handle_Expr_Square_DownCast = _Expr.Handle_Expr_Square_DownCast

class Expr_SquareRoot(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the square root of <exp>

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_SquareRoot_swiginit(self, _Expr.new_Expr_SquareRoot(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_SquareRoot self)"""
        return _Expr.Expr_SquareRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_SquareRoot self) -> Handle_Expr_SquareRoot"""
        return _Expr.Expr_SquareRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_SquareRoot._kill_pointed = new_instancemethod(_Expr.Expr_SquareRoot__kill_pointed, None, Expr_SquareRoot)
Expr_SquareRoot.GetHandle = new_instancemethod(_Expr.Expr_SquareRoot_GetHandle, None, Expr_SquareRoot)
Expr_SquareRoot_swigregister = _Expr.Expr_SquareRoot_swigregister
Expr_SquareRoot_swigregister(Expr_SquareRoot)

class Handle_Expr_SquareRoot(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_SquareRoot_swiginit(self, _Expr.new_Handle_Expr_SquareRoot(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_SquareRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_SquareRoot.Nullify = new_instancemethod(_Expr.Handle_Expr_SquareRoot_Nullify, None, Handle_Expr_SquareRoot)
Handle_Expr_SquareRoot.IsNull = new_instancemethod(_Expr.Handle_Expr_SquareRoot_IsNull, None, Handle_Expr_SquareRoot)
Handle_Expr_SquareRoot.GetObject = new_instancemethod(_Expr.Handle_Expr_SquareRoot_GetObject, None, Handle_Expr_SquareRoot)
Handle_Expr_SquareRoot._kill_pointed = new_instancemethod(_Expr.Handle_Expr_SquareRoot__kill_pointed, None, Handle_Expr_SquareRoot)
Handle_Expr_SquareRoot_swigregister = _Expr.Handle_Expr_SquareRoot_swigregister
Handle_Expr_SquareRoot_swigregister(Handle_Expr_SquareRoot)

def Handle_Expr_SquareRoot_DownCast(AnObject):
    return _Expr.Handle_Expr_SquareRoot_DownCast(AnObject)
Handle_Expr_SquareRoot_DownCast = _Expr.Handle_Expr_SquareRoot_DownCast

class Expr_Sum(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sum of all the members of sequence <exps>.

        :param exps:
        :type exps: Expr_SequenceOfGeneralExpression &
        :rtype: None

        * Creates the sum of <exp1> and <exp2>.

        :param exp1:
        :type exp1: Handle_Expr_GeneralExpression &
        :param exp2:
        :type exp2: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Sum_swiginit(self, _Expr.new_Expr_Sum(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Sum self)"""
        return _Expr.Expr_Sum__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Sum self) -> Handle_Expr_Sum"""
        return _Expr.Expr_Sum_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Sum._kill_pointed = new_instancemethod(_Expr.Expr_Sum__kill_pointed, None, Expr_Sum)
Expr_Sum.GetHandle = new_instancemethod(_Expr.Expr_Sum_GetHandle, None, Expr_Sum)
Expr_Sum_swigregister = _Expr.Expr_Sum_swigregister
Expr_Sum_swigregister(Expr_Sum)

class Handle_Expr_Sum(Handle_Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Sum_swiginit(self, _Expr.new_Handle_Expr_Sum(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Sum_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Sum.Nullify = new_instancemethod(_Expr.Handle_Expr_Sum_Nullify, None, Handle_Expr_Sum)
Handle_Expr_Sum.IsNull = new_instancemethod(_Expr.Handle_Expr_Sum_IsNull, None, Handle_Expr_Sum)
Handle_Expr_Sum.GetObject = new_instancemethod(_Expr.Handle_Expr_Sum_GetObject, None, Handle_Expr_Sum)
Handle_Expr_Sum._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Sum__kill_pointed, None, Handle_Expr_Sum)
Handle_Expr_Sum_swigregister = _Expr.Handle_Expr_Sum_swigregister
Handle_Expr_Sum_swigregister(Handle_Expr_Sum)

def Handle_Expr_Sum_DownCast(AnObject):
    return _Expr.Handle_Expr_Sum_DownCast(AnObject)
Handle_Expr_Sum_DownCast = _Expr.Handle_Expr_Sum_DownCast

class Expr_Tangent(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the tangent of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Tangent_swiginit(self, _Expr.new_Expr_Tangent(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Tangent self)"""
        return _Expr.Expr_Tangent__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Tangent self) -> Handle_Expr_Tangent"""
        return _Expr.Expr_Tangent_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Tangent._kill_pointed = new_instancemethod(_Expr.Expr_Tangent__kill_pointed, None, Expr_Tangent)
Expr_Tangent.GetHandle = new_instancemethod(_Expr.Expr_Tangent_GetHandle, None, Expr_Tangent)
Expr_Tangent_swigregister = _Expr.Expr_Tangent_swigregister
Expr_Tangent_swigregister(Expr_Tangent)

class Handle_Expr_Tangent(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Tangent_swiginit(self, _Expr.new_Handle_Expr_Tangent(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Tangent_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Tangent.Nullify = new_instancemethod(_Expr.Handle_Expr_Tangent_Nullify, None, Handle_Expr_Tangent)
Handle_Expr_Tangent.IsNull = new_instancemethod(_Expr.Handle_Expr_Tangent_IsNull, None, Handle_Expr_Tangent)
Handle_Expr_Tangent.GetObject = new_instancemethod(_Expr.Handle_Expr_Tangent_GetObject, None, Handle_Expr_Tangent)
Handle_Expr_Tangent._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Tangent__kill_pointed, None, Handle_Expr_Tangent)
Handle_Expr_Tangent_swigregister = _Expr.Handle_Expr_Tangent_swigregister
Handle_Expr_Tangent_swigregister(Handle_Expr_Tangent)

def Handle_Expr_Tangent_DownCast(AnObject):
    return _Expr.Handle_Expr_Tangent_DownCast(AnObject)
Handle_Expr_Tangent_DownCast = _Expr.Handle_Expr_Tangent_DownCast

class Expr_Tanh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the hyperbolic tangent of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_Tanh_swiginit(self, _Expr.new_Expr_Tanh(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_Tanh self)"""
        return _Expr.Expr_Tanh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_Tanh self) -> Handle_Expr_Tanh"""
        return _Expr.Expr_Tanh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_Tanh._kill_pointed = new_instancemethod(_Expr.Expr_Tanh__kill_pointed, None, Expr_Tanh)
Expr_Tanh.GetHandle = new_instancemethod(_Expr.Expr_Tanh_GetHandle, None, Expr_Tanh)
Expr_Tanh_swigregister = _Expr.Expr_Tanh_swigregister
Expr_Tanh_swigregister(Expr_Tanh)

class Handle_Expr_Tanh(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_Tanh_swiginit(self, _Expr.new_Handle_Expr_Tanh(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_Tanh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_Tanh.Nullify = new_instancemethod(_Expr.Handle_Expr_Tanh_Nullify, None, Handle_Expr_Tanh)
Handle_Expr_Tanh.IsNull = new_instancemethod(_Expr.Handle_Expr_Tanh_IsNull, None, Handle_Expr_Tanh)
Handle_Expr_Tanh.GetObject = new_instancemethod(_Expr.Handle_Expr_Tanh_GetObject, None, Handle_Expr_Tanh)
Handle_Expr_Tanh._kill_pointed = new_instancemethod(_Expr.Handle_Expr_Tanh__kill_pointed, None, Handle_Expr_Tanh)
Handle_Expr_Tanh_swigregister = _Expr.Handle_Expr_Tanh_swigregister
Handle_Expr_Tanh_swigregister(Handle_Expr_Tanh)

def Handle_Expr_Tanh_DownCast(AnObject):
    return _Expr.Handle_Expr_Tanh_DownCast(AnObject)
Handle_Expr_Tanh_DownCast = _Expr.Handle_Expr_Tanh_DownCast

class Expr_UnaryFunction(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates me as <func>(<exp>). Raises exception if <func> is not unary.

        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_UnaryFunction_swiginit(self, _Expr.new_Expr_UnaryFunction(*args))

    def Function(self, *args):
        """
        * Returns the function defining <self>.

        :rtype: Handle_Expr_GeneralFunction

        """
        return _Expr.Expr_UnaryFunction_Function(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Expr_UnaryFunction self)"""
        return _Expr.Expr_UnaryFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_UnaryFunction self) -> Handle_Expr_UnaryFunction"""
        return _Expr.Expr_UnaryFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_UnaryFunction.Function = new_instancemethod(_Expr.Expr_UnaryFunction_Function, None, Expr_UnaryFunction)
Expr_UnaryFunction._kill_pointed = new_instancemethod(_Expr.Expr_UnaryFunction__kill_pointed, None, Expr_UnaryFunction)
Expr_UnaryFunction.GetHandle = new_instancemethod(_Expr.Expr_UnaryFunction_GetHandle, None, Expr_UnaryFunction)
Expr_UnaryFunction_swigregister = _Expr.Expr_UnaryFunction_swigregister
Expr_UnaryFunction_swigregister(Expr_UnaryFunction)

class Handle_Expr_UnaryFunction(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_UnaryFunction_swiginit(self, _Expr.new_Handle_Expr_UnaryFunction(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_UnaryFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_UnaryFunction.Nullify = new_instancemethod(_Expr.Handle_Expr_UnaryFunction_Nullify, None, Handle_Expr_UnaryFunction)
Handle_Expr_UnaryFunction.IsNull = new_instancemethod(_Expr.Handle_Expr_UnaryFunction_IsNull, None, Handle_Expr_UnaryFunction)
Handle_Expr_UnaryFunction.GetObject = new_instancemethod(_Expr.Handle_Expr_UnaryFunction_GetObject, None, Handle_Expr_UnaryFunction)
Handle_Expr_UnaryFunction._kill_pointed = new_instancemethod(_Expr.Handle_Expr_UnaryFunction__kill_pointed, None, Handle_Expr_UnaryFunction)
Handle_Expr_UnaryFunction_swigregister = _Expr.Handle_Expr_UnaryFunction_swigregister
Handle_Expr_UnaryFunction_swigregister(Handle_Expr_UnaryFunction)

def Handle_Expr_UnaryFunction_DownCast(AnObject):
    return _Expr.Handle_Expr_UnaryFunction_DownCast(AnObject)
Handle_Expr_UnaryFunction_DownCast = _Expr.Handle_Expr_UnaryFunction_DownCast

class Expr_UnaryMinus(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create the unary minus of <exp>.

        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        _Expr.Expr_UnaryMinus_swiginit(self, _Expr.new_Expr_UnaryMinus(*args))

    def _kill_pointed(self):
        """_kill_pointed(Expr_UnaryMinus self)"""
        return _Expr.Expr_UnaryMinus__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Expr_UnaryMinus self) -> Handle_Expr_UnaryMinus"""
        return _Expr.Expr_UnaryMinus_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Expr_UnaryMinus._kill_pointed = new_instancemethod(_Expr.Expr_UnaryMinus__kill_pointed, None, Expr_UnaryMinus)
Expr_UnaryMinus.GetHandle = new_instancemethod(_Expr.Expr_UnaryMinus_GetHandle, None, Expr_UnaryMinus)
Expr_UnaryMinus_swigregister = _Expr.Expr_UnaryMinus_swigregister
Expr_UnaryMinus_swigregister(Expr_UnaryMinus)

class Handle_Expr_UnaryMinus(Handle_Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Handle_Expr_UnaryMinus_swiginit(self, _Expr.new_Handle_Expr_UnaryMinus(*args))
    DownCast = staticmethod(_Expr.Handle_Expr_UnaryMinus_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Expr_UnaryMinus.Nullify = new_instancemethod(_Expr.Handle_Expr_UnaryMinus_Nullify, None, Handle_Expr_UnaryMinus)
Handle_Expr_UnaryMinus.IsNull = new_instancemethod(_Expr.Handle_Expr_UnaryMinus_IsNull, None, Handle_Expr_UnaryMinus)
Handle_Expr_UnaryMinus.GetObject = new_instancemethod(_Expr.Handle_Expr_UnaryMinus_GetObject, None, Handle_Expr_UnaryMinus)
Handle_Expr_UnaryMinus._kill_pointed = new_instancemethod(_Expr.Handle_Expr_UnaryMinus__kill_pointed, None, Handle_Expr_UnaryMinus)
Handle_Expr_UnaryMinus_swigregister = _Expr.Handle_Expr_UnaryMinus_swigregister
Handle_Expr_UnaryMinus_swigregister(Handle_Expr_UnaryMinus)

def Handle_Expr_UnaryMinus_DownCast(AnObject):
    return _Expr.Handle_Expr_UnaryMinus_DownCast(AnObject)
Handle_Expr_UnaryMinus_DownCast = _Expr.Handle_Expr_UnaryMinus_DownCast



