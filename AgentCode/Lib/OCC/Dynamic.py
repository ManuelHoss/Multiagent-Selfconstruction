# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Dynamic.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Dynamic', [dirname(__file__)])
        except ImportError:
            import _Dynamic
            return _Dynamic
        if fp is not None:
            try:
                _mod = imp.load_module('_Dynamic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Dynamic = swig_import_helper()
    del swig_import_helper
else:
    import _Dynamic
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Dynamic.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Dynamic.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Dynamic.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Dynamic.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Dynamic.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Dynamic.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Dynamic.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Dynamic.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Dynamic.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Dynamic.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Dynamic.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Dynamic.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Dynamic.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Dynamic.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Dynamic.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Dynamic.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Dynamic.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Dynamic.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.TCollection

_Dynamic.Dynamic_IN_swigconstant(_Dynamic)
Dynamic_IN = _Dynamic.Dynamic_IN

_Dynamic.Dynamic_OUT_swigconstant(_Dynamic)
Dynamic_OUT = _Dynamic.Dynamic_OUT

_Dynamic.Dynamic_INOUT_swigconstant(_Dynamic)
Dynamic_INOUT = _Dynamic.Dynamic_INOUT

_Dynamic.Dynamic_INTERNAL_swigconstant(_Dynamic)
Dynamic_INTERNAL = _Dynamic.Dynamic_INTERNAL

_Dynamic.Dynamic_CONSTANT_swigconstant(_Dynamic)
Dynamic_CONSTANT = _Dynamic.Dynamic_CONSTANT
class dynamic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Mode(*args):
        """
        :param amode:
        :type amode: char *
        :rtype: Dynamic_ModeEnum

        """
        return _Dynamic.dynamic_Mode(*args)

    Mode = staticmethod(Mode)

    def __init__(self):
        _Dynamic.dynamic_swiginit(self, _Dynamic.new_dynamic())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


dynamic._kill_pointed = new_instancemethod(_Dynamic.dynamic__kill_pointed, None, dynamic)
dynamic_swigregister = _Dynamic.dynamic_swigregister
dynamic_swigregister(dynamic)

def dynamic_Mode(*args):
    """
    :param amode:
    :type amode: char *
    :rtype: Dynamic_ModeEnum

    """
    return _Dynamic.dynamic_Mode(*args)

class Dynamic_DynamicClass(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a new empty instance of DynamicClass.

        :param aname:
        :type aname: char *
        :rtype: None

        """
        _Dynamic.Dynamic_DynamicClass_swiginit(self, _Dynamic.new_Dynamic_DynamicClass(*args))

    def Parameter(self, *args):
        """
        * Adds another parameter <aparameter> to the sequence of parameter definitions.

        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicClass_Parameter(self, *args)


    def CompiledMethod(self, *args):
        """
        * Adds another method to the sequence of methods. It has <amethod> as name and <anaddress> as mangled name of the corresponding C++ function which must be called.

        :param amethod:
        :type amethod: char *
        :param anaddress:
        :type anaddress: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicClass_CompiledMethod(self, *args)


    def InterpretedMethod(self, *args):
        """
        * Adds another method to the sequence of methods. It has <amethod> as name and <afile> as interpreted file.

        :param amethod:
        :type amethod: char *
        :param afile:
        :type afile: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicClass_InterpretedMethod(self, *args)


    def Method(self, *args):
        """
        * Returns a reference to the method object identified by the string <amethod>.

        :param amethod:
        :type amethod: char *
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_DynamicClass_Method(self, *args)


    def Instance(self, *args):
        """
        * Returns an instance object of this class.

        :rtype: Handle_Dynamic_DynamicInstance

        """
        return _Dynamic.Dynamic_DynamicClass_Instance(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_DynamicClass self) -> std::string"""
        return _Dynamic.Dynamic_DynamicClass_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_DynamicClass self)"""
        return _Dynamic.Dynamic_DynamicClass__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_DynamicClass self) -> Handle_Dynamic_DynamicClass"""
        return _Dynamic.Dynamic_DynamicClass_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_DynamicClass.Parameter = new_instancemethod(_Dynamic.Dynamic_DynamicClass_Parameter, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.CompiledMethod = new_instancemethod(_Dynamic.Dynamic_DynamicClass_CompiledMethod, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.InterpretedMethod = new_instancemethod(_Dynamic.Dynamic_DynamicClass_InterpretedMethod, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.Method = new_instancemethod(_Dynamic.Dynamic_DynamicClass_Method, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.Instance = new_instancemethod(_Dynamic.Dynamic_DynamicClass_Instance, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.DumpToString = new_instancemethod(_Dynamic.Dynamic_DynamicClass_DumpToString, None, Dynamic_DynamicClass)
Dynamic_DynamicClass._kill_pointed = new_instancemethod(_Dynamic.Dynamic_DynamicClass__kill_pointed, None, Dynamic_DynamicClass)
Dynamic_DynamicClass.GetHandle = new_instancemethod(_Dynamic.Dynamic_DynamicClass_GetHandle, None, Dynamic_DynamicClass)
Dynamic_DynamicClass_swigregister = _Dynamic.Dynamic_DynamicClass_swigregister
Dynamic_DynamicClass_swigregister(Dynamic_DynamicClass)

class Handle_Dynamic_DynamicClass(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_DynamicClass_swiginit(self, _Dynamic.new_Handle_Dynamic_DynamicClass(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_DynamicClass_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_DynamicClass.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicClass_Nullify, None, Handle_Dynamic_DynamicClass)
Handle_Dynamic_DynamicClass.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicClass_IsNull, None, Handle_Dynamic_DynamicClass)
Handle_Dynamic_DynamicClass.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicClass_GetObject, None, Handle_Dynamic_DynamicClass)
Handle_Dynamic_DynamicClass._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicClass__kill_pointed, None, Handle_Dynamic_DynamicClass)
Handle_Dynamic_DynamicClass_swigregister = _Dynamic.Handle_Dynamic_DynamicClass_swigregister
Handle_Dynamic_DynamicClass_swigregister(Handle_Dynamic_DynamicClass)

def Handle_Dynamic_DynamicClass_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_DynamicClass_DownCast(AnObject)
Handle_Dynamic_DynamicClass_DownCast = _Dynamic.Handle_Dynamic_DynamicClass_DownCast

class Dynamic_DynamicInstance(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty instance of this class.

        :rtype: None

        """
        _Dynamic.Dynamic_DynamicInstance_swiginit(self, _Dynamic.new_Dynamic_DynamicInstance(*args))

    def Parameter(self, *args):
        """
        * Adds <aparameter> to the sequence of parameters of <self>.

        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :rtype: None

        * Adds all the parameters of <self>, to the sequence of parameters of <aninstance>.

        :param aninstance:
        :type aninstance: Handle_Dynamic_DynamicInstance &
        :rtype: None

        * Puts the integer value <avalue> into the parameter object identified by the string <aparameter>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int
        :rtype: None

        * Puts the real value <avalue> into the parameter object identified by the string <aparameter>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float
        :rtype: None

        * Puts the string <avalue> into the parameter object identified by the string <aparameter>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: char *
        :rtype: None

        * Puts the dynamic instance <avalue> into the parameter object identified by the string <aparameter>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: Handle_Dynamic_DynamicInstance &
        :rtype: None

        * Searches and returns the parameter object identified by the string <aparameter>.

        :param aparameter:
        :type aparameter: char *
        :rtype: Handle_Dynamic_Parameter

        """
        return _Dynamic.Dynamic_DynamicInstance_Parameter(self, *args)


    def Class(self, *args):
        """
        * Sets the reference of the class.

        :param aclass:
        :type aclass: Handle_Dynamic_DynamicClass &
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicInstance_Class(self, *args)


    def Execute(self, *args):
        """
        * Calls the method identified by the string <amethod>.

        :param amethod:
        :type amethod: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicInstance_Execute(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_DynamicInstance self)"""
        return _Dynamic.Dynamic_DynamicInstance__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_DynamicInstance self) -> Handle_Dynamic_DynamicInstance"""
        return _Dynamic.Dynamic_DynamicInstance_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_DynamicInstance.Parameter = new_instancemethod(_Dynamic.Dynamic_DynamicInstance_Parameter, None, Dynamic_DynamicInstance)
Dynamic_DynamicInstance.Class = new_instancemethod(_Dynamic.Dynamic_DynamicInstance_Class, None, Dynamic_DynamicInstance)
Dynamic_DynamicInstance.Execute = new_instancemethod(_Dynamic.Dynamic_DynamicInstance_Execute, None, Dynamic_DynamicInstance)
Dynamic_DynamicInstance._kill_pointed = new_instancemethod(_Dynamic.Dynamic_DynamicInstance__kill_pointed, None, Dynamic_DynamicInstance)
Dynamic_DynamicInstance.GetHandle = new_instancemethod(_Dynamic.Dynamic_DynamicInstance_GetHandle, None, Dynamic_DynamicInstance)
Dynamic_DynamicInstance_swigregister = _Dynamic.Dynamic_DynamicInstance_swigregister
Dynamic_DynamicInstance_swigregister(Dynamic_DynamicInstance)

class Handle_Dynamic_DynamicInstance(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_DynamicInstance_swiginit(self, _Dynamic.new_Handle_Dynamic_DynamicInstance(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_DynamicInstance_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_DynamicInstance.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicInstance_Nullify, None, Handle_Dynamic_DynamicInstance)
Handle_Dynamic_DynamicInstance.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicInstance_IsNull, None, Handle_Dynamic_DynamicInstance)
Handle_Dynamic_DynamicInstance.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicInstance_GetObject, None, Handle_Dynamic_DynamicInstance)
Handle_Dynamic_DynamicInstance._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicInstance__kill_pointed, None, Handle_Dynamic_DynamicInstance)
Handle_Dynamic_DynamicInstance_swigregister = _Dynamic.Handle_Dynamic_DynamicInstance_swigregister
Handle_Dynamic_DynamicInstance_swigregister(Handle_Dynamic_DynamicInstance)

def Handle_Dynamic_DynamicInstance_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_DynamicInstance_DownCast(AnObject)
Handle_Dynamic_DynamicInstance_DownCast = _Dynamic.Handle_Dynamic_DynamicInstance_DownCast

class Dynamic_FuzzyClass(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Type(self, *args):
        """
        * This deferred method must returns the type of the object. If the instance is of the type FuzzyDefinition the method simply returns the field <thetype>. If the instance is of the type FuzzyInstance the method calls the Type method on the true definition.

        :rtype: TCollection_AsciiString

        """
        return _Dynamic.Dynamic_FuzzyClass_Type(self, *args)


    def FirstParameter(self, *args):
        """
        * Returns the head of the list of parameters. For the FuzzyDefinition class this method returns the head of the exaustive list of parameters defining the object and for the FuzzyInstance it just returns the head of the overloaded values.

        :rtype: Handle_Dynamic_ParameterNode

        """
        return _Dynamic.Dynamic_FuzzyClass_FirstParameter(self, *args)


    def Parameter(self, *args):
        """
        * Returns true if there is a parameter with <aparameter> as name, false otherwise.

        :param aparameter:
        :type aparameter: char *
        :rtype: bool

        * Adds another parameter <aparameter> to the sequence of parameters.

        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :rtype: None

        * Adds to the instance <self> the parameter <aparameter> with the boolean value <avalue>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: bool
        :rtype: void

        * Adds to the instance <self> the parameter <aparameter> with the integer value <avalue>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int
        :rtype: void

        * Adds to the instance <self> the parameter <aparameter> with the real value <avalue>.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float
        :rtype: void

        * Adds to the instance <self> the parameter <aparameter> with the string <astring>.

        :param aparameter:
        :type aparameter: char *
        :param astring:
        :type astring: char *
        :rtype: void

        * Adds to the instance <self> the parameter <aparameter> with the object value <anobject>.

        :param aparameter:
        :type aparameter: char *
        :param anobject:
        :type anobject: Handle_Standard_Transient &
        :rtype: void

        """
        return _Dynamic.Dynamic_FuzzyClass_Parameter(self, *args)


    def Value(self, *args):
        """
        * Returns True, if there is a parameter <aparameter> previously stored in the instance <self> and there is the corresponding boolean value in the output argument <avalue>, False otherwise.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: bool
        :rtype: bool

        * Returns True, if there is a parameter <aparameter> previously stored in the instance <self> and there is the corresponding integer value in the output argument <avalue>, False otherwise.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int &
        :rtype: bool

        * Returns True, if there is a parameter <aparameter> previously stored in the instance <self> and there is the corresponding real value in the output argument <avalue>, False otherwise.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float &
        :rtype: bool

        * Returns True, if there is a parameter <aparameter> previously stored in the instance <self> and there is the corresponding string in the output argument <avalue>, False otherwise.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: TCollection_AsciiString &
        :rtype: bool

        * Returns True, if there is a parameter <aparameter> previously stored in the instance <self> and there is the corresponding object value in the output argument <avalue>, False otherwise.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: Handle_Standard_Transient &
        :rtype: bool

        """
        return _Dynamic.Dynamic_FuzzyClass_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_FuzzyClass self) -> std::string"""
        return _Dynamic.Dynamic_FuzzyClass_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_FuzzyClass self)"""
        return _Dynamic.Dynamic_FuzzyClass__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_FuzzyClass self) -> Handle_Dynamic_FuzzyClass"""
        return _Dynamic.Dynamic_FuzzyClass_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_FuzzyClass.Type = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_Type, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass.FirstParameter = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_FirstParameter, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass.Parameter = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_Parameter, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass.Value = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_Value, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass.DumpToString = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_DumpToString, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass._kill_pointed = new_instancemethod(_Dynamic.Dynamic_FuzzyClass__kill_pointed, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass.GetHandle = new_instancemethod(_Dynamic.Dynamic_FuzzyClass_GetHandle, None, Dynamic_FuzzyClass)
Dynamic_FuzzyClass_swigregister = _Dynamic.Dynamic_FuzzyClass_swigregister
Dynamic_FuzzyClass_swigregister(Dynamic_FuzzyClass)

class Handle_Dynamic_FuzzyClass(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_FuzzyClass_swiginit(self, _Dynamic.new_Handle_Dynamic_FuzzyClass(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_FuzzyClass_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_FuzzyClass.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyClass_Nullify, None, Handle_Dynamic_FuzzyClass)
Handle_Dynamic_FuzzyClass.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyClass_IsNull, None, Handle_Dynamic_FuzzyClass)
Handle_Dynamic_FuzzyClass.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyClass_GetObject, None, Handle_Dynamic_FuzzyClass)
Handle_Dynamic_FuzzyClass._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyClass__kill_pointed, None, Handle_Dynamic_FuzzyClass)
Handle_Dynamic_FuzzyClass_swigregister = _Dynamic.Handle_Dynamic_FuzzyClass_swigregister
Handle_Dynamic_FuzzyClass_swigregister(Handle_Dynamic_FuzzyClass)

def Handle_Dynamic_FuzzyClass_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_FuzzyClass_DownCast(AnObject)
Handle_Dynamic_FuzzyClass_DownCast = _Dynamic.Handle_Dynamic_FuzzyClass_DownCast

class Dynamic_FuzzyDefinitionsDictionary(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Creates(self, *args):
        """
        * Starting with a file named <afilename>, fills the dictionary with all the wishes definitions.

        :param afilename:
        :type afilename: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_Creates(self, *args)


    def Switch(self, *args):
        """
        * This virtual method allows the user to add recognition of its own parameters when reading the file to fill the dictionary.

        :param aname:
        :type aname: char *
        :param atype:
        :type atype: char *
        :param avalue:
        :type avalue: char *
        :rtype: Handle_Dynamic_Parameter

        """
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_Switch(self, *args)


    def UpToDate(self, *args):
        """
        * Returns true if there has been no modification of the file fuzzyclasses.dat since the creation of the dictionary object, false otherwise.

        :rtype: bool

        """
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_UpToDate(self, *args)


    def NumberOfDefinitions(self, *args):
        """
        * Returns the number of definitions stored in the dictionary.

        :rtype: int

        """
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_NumberOfDefinitions(self, *args)


    def Definition(self, *args):
        """
        * Returns from the dictionary in the out variable <adefinition> a reference to the right instance of the definition identified by its type <atype>. The method returns true if the definition exist, false otherwise.

        :param atype:
        :type atype: char *
        :param adefinition:
        :type adefinition: Handle_Dynamic_FuzzyClass &
        :rtype: bool

        * Returns a reference on the definition identified by the index <anidex>.

        :param anindex:
        :type anindex: int
        :rtype: Handle_Dynamic_FuzzyClass

        """
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_Definition(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_FuzzyDefinitionsDictionary self) -> std::string"""
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_FuzzyDefinitionsDictionary self)"""
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_FuzzyDefinitionsDictionary self) -> Handle_Dynamic_FuzzyDefinitionsDictionary"""
        return _Dynamic.Dynamic_FuzzyDefinitionsDictionary_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_FuzzyDefinitionsDictionary.Creates = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_Creates, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.Switch = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_Switch, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.UpToDate = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_UpToDate, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.NumberOfDefinitions = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_NumberOfDefinitions, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.Definition = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_Definition, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.DumpToString = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_DumpToString, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary._kill_pointed = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary__kill_pointed, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary.GetHandle = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinitionsDictionary_GetHandle, None, Dynamic_FuzzyDefinitionsDictionary)
Dynamic_FuzzyDefinitionsDictionary_swigregister = _Dynamic.Dynamic_FuzzyDefinitionsDictionary_swigregister
Dynamic_FuzzyDefinitionsDictionary_swigregister(Dynamic_FuzzyDefinitionsDictionary)

class Handle_Dynamic_FuzzyDefinitionsDictionary(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_swiginit(self, _Dynamic.new_Handle_Dynamic_FuzzyDefinitionsDictionary(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_FuzzyDefinitionsDictionary.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_Nullify, None, Handle_Dynamic_FuzzyDefinitionsDictionary)
Handle_Dynamic_FuzzyDefinitionsDictionary.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_IsNull, None, Handle_Dynamic_FuzzyDefinitionsDictionary)
Handle_Dynamic_FuzzyDefinitionsDictionary.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_GetObject, None, Handle_Dynamic_FuzzyDefinitionsDictionary)
Handle_Dynamic_FuzzyDefinitionsDictionary._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary__kill_pointed, None, Handle_Dynamic_FuzzyDefinitionsDictionary)
Handle_Dynamic_FuzzyDefinitionsDictionary_swigregister = _Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_swigregister
Handle_Dynamic_FuzzyDefinitionsDictionary_swigregister(Handle_Dynamic_FuzzyDefinitionsDictionary)

def Handle_Dynamic_FuzzyDefinitionsDictionary_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_DownCast(AnObject)
Handle_Dynamic_FuzzyDefinitionsDictionary_DownCast = _Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary_DownCast

class Dynamic_Method(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Type(self, *args):
        """
        * Returns the type of object which is the name of the function definition.

        :rtype: TCollection_AsciiString

        """
        return _Dynamic.Dynamic_Method_Type(self, *args)


    def FirstVariableNode(self, *args):
        """
        * Returns the first variable node of the Method which contains a variable.

        :rtype: Handle_Dynamic_VariableNode

        """
        return _Dynamic.Dynamic_Method_FirstVariableNode(self, *args)


    def Variable(self, *args):
        """
        * Returns true if there is a variable with <avariable> as name, false otherwise.

        :param avariable:
        :type avariable: char *
        :rtype: bool

        * Adds another variable <avariable> to the sequence of variable definitions.

        :param avariable:
        :type avariable: Handle_Dynamic_Variable &
        :rtype: None

        """
        return _Dynamic.Dynamic_Method_Variable(self, *args)


    def Value(self, *args):
        """
        * Returns True, if there is a variable <avariable> previously stored in the instance <self> and there is the corresponding parameter value in the output argument <aparameter>, False otherwise.

        :param aname:
        :type aname: char *
        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :param amode:
        :type amode: Dynamic_ModeEnum &
        :rtype: bool

        * Returns True, if there is a variable named <aname> previously stored in the instance of <self> and returns the corresponding variable in the output argument <avariable>, False otherwise.

        :param aname:
        :type aname: char *
        :param avariable:
        :type avariable: Handle_Dynamic_Variable &
        :rtype: bool

        """
        return _Dynamic.Dynamic_Method_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_Method self) -> std::string"""
        return _Dynamic.Dynamic_Method_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_Method self)"""
        return _Dynamic.Dynamic_Method__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_Method self) -> Handle_Dynamic_Method"""
        return _Dynamic.Dynamic_Method_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_Method.Type = new_instancemethod(_Dynamic.Dynamic_Method_Type, None, Dynamic_Method)
Dynamic_Method.FirstVariableNode = new_instancemethod(_Dynamic.Dynamic_Method_FirstVariableNode, None, Dynamic_Method)
Dynamic_Method.Variable = new_instancemethod(_Dynamic.Dynamic_Method_Variable, None, Dynamic_Method)
Dynamic_Method.Value = new_instancemethod(_Dynamic.Dynamic_Method_Value, None, Dynamic_Method)
Dynamic_Method.DumpToString = new_instancemethod(_Dynamic.Dynamic_Method_DumpToString, None, Dynamic_Method)
Dynamic_Method._kill_pointed = new_instancemethod(_Dynamic.Dynamic_Method__kill_pointed, None, Dynamic_Method)
Dynamic_Method.GetHandle = new_instancemethod(_Dynamic.Dynamic_Method_GetHandle, None, Dynamic_Method)
Dynamic_Method_swigregister = _Dynamic.Dynamic_Method_swigregister
Dynamic_Method_swigregister(Dynamic_Method)

class Handle_Dynamic_Method(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_Method_swiginit(self, _Dynamic.new_Handle_Dynamic_Method(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_Method_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_Method.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_Method_Nullify, None, Handle_Dynamic_Method)
Handle_Dynamic_Method.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_Method_IsNull, None, Handle_Dynamic_Method)
Handle_Dynamic_Method.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_Method_GetObject, None, Handle_Dynamic_Method)
Handle_Dynamic_Method._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_Method__kill_pointed, None, Handle_Dynamic_Method)
Handle_Dynamic_Method_swigregister = _Dynamic.Handle_Dynamic_Method_swigregister
Handle_Dynamic_Method_swigregister(Handle_Dynamic_Method)

def Handle_Dynamic_Method_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_Method_DownCast(AnObject)
Handle_Dynamic_Method_DownCast = _Dynamic.Handle_Dynamic_Method_DownCast

class Dynamic_MethodDefinitionsDictionary(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Creates(self, *args):
        """
        * Starting with a file named <afilename>, fills the dictionary with all the wishes definitions.

        :param afilename:
        :type afilename: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_Creates(self, *args)


    def Switch(self, *args):
        """
        * This virtual method allows the user to add recognition of its own parameters when reading the file to fill the dictionary.

        :param aname:
        :type aname: char *
        :param atype:
        :type atype: char *
        :param avalue:
        :type avalue: char *
        :rtype: Handle_Dynamic_Parameter

        """
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_Switch(self, *args)


    def UpToDate(self, *args):
        """
        * Returns true if there has been no modification of the file method-definitions.dat since the creation of the dictionary object, false otherwise.

        :rtype: bool

        """
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_UpToDate(self, *args)


    def NumberOfDefinitions(self, *args):
        """
        * Returns the number of definitions stored in the dictionary.

        :rtype: int

        """
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_NumberOfDefinitions(self, *args)


    def Definition(self, *args):
        """
        * This method sets the new definition <adefinition> in the dictionary. It returns true if the operation is successful, false otherwise.

        :param adefinition:
        :type adefinition: Handle_Dynamic_Method &
        :rtype: bool

        * Returns from the dictionary in the out variable <adefinition> a reference to the right instance of the definition identified by its type <atype>. The method returns true if the definition exist, false otherwise.

        :param atype:
        :type atype: char *
        :param adefinition:
        :type adefinition: Handle_Dynamic_Method &
        :rtype: bool

        * Returns a reference on the definition identified by the index <anidex>.

        :param anindex:
        :type anindex: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_Definition(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_MethodDefinitionsDictionary self) -> std::string"""
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_MethodDefinitionsDictionary self)"""
        return _Dynamic.Dynamic_MethodDefinitionsDictionary__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_MethodDefinitionsDictionary self) -> Handle_Dynamic_MethodDefinitionsDictionary"""
        return _Dynamic.Dynamic_MethodDefinitionsDictionary_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_MethodDefinitionsDictionary.Creates = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_Creates, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.Switch = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_Switch, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.UpToDate = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_UpToDate, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.NumberOfDefinitions = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_NumberOfDefinitions, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.Definition = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_Definition, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.DumpToString = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_DumpToString, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary._kill_pointed = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary__kill_pointed, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary.GetHandle = new_instancemethod(_Dynamic.Dynamic_MethodDefinitionsDictionary_GetHandle, None, Dynamic_MethodDefinitionsDictionary)
Dynamic_MethodDefinitionsDictionary_swigregister = _Dynamic.Dynamic_MethodDefinitionsDictionary_swigregister
Dynamic_MethodDefinitionsDictionary_swigregister(Dynamic_MethodDefinitionsDictionary)

class Handle_Dynamic_MethodDefinitionsDictionary(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_swiginit(self, _Dynamic.new_Handle_Dynamic_MethodDefinitionsDictionary(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_MethodDefinitionsDictionary.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_Nullify, None, Handle_Dynamic_MethodDefinitionsDictionary)
Handle_Dynamic_MethodDefinitionsDictionary.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_IsNull, None, Handle_Dynamic_MethodDefinitionsDictionary)
Handle_Dynamic_MethodDefinitionsDictionary.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_GetObject, None, Handle_Dynamic_MethodDefinitionsDictionary)
Handle_Dynamic_MethodDefinitionsDictionary._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinitionsDictionary__kill_pointed, None, Handle_Dynamic_MethodDefinitionsDictionary)
Handle_Dynamic_MethodDefinitionsDictionary_swigregister = _Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_swigregister
Handle_Dynamic_MethodDefinitionsDictionary_swigregister(Handle_Dynamic_MethodDefinitionsDictionary)

def Handle_Dynamic_MethodDefinitionsDictionary_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_DownCast(AnObject)
Handle_Dynamic_MethodDefinitionsDictionary_DownCast = _Dynamic.Handle_Dynamic_MethodDefinitionsDictionary_DownCast

class Dynamic_Parameter(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self, *args):
        """
        * Returns in an AsciiString the name of the parameter.

        :rtype: TCollection_AsciiString

        """
        return _Dynamic.Dynamic_Parameter_Name(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_Parameter self) -> std::string"""
        return _Dynamic.Dynamic_Parameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_Parameter self)"""
        return _Dynamic.Dynamic_Parameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_Parameter self) -> Handle_Dynamic_Parameter"""
        return _Dynamic.Dynamic_Parameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_Parameter.Name = new_instancemethod(_Dynamic.Dynamic_Parameter_Name, None, Dynamic_Parameter)
Dynamic_Parameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_Parameter_DumpToString, None, Dynamic_Parameter)
Dynamic_Parameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_Parameter__kill_pointed, None, Dynamic_Parameter)
Dynamic_Parameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_Parameter_GetHandle, None, Dynamic_Parameter)
Dynamic_Parameter_swigregister = _Dynamic.Dynamic_Parameter_swigregister
Dynamic_Parameter_swigregister(Dynamic_Parameter)

class Handle_Dynamic_Parameter(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_Parameter_swiginit(self, _Dynamic.new_Handle_Dynamic_Parameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_Parameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_Parameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_Parameter_Nullify, None, Handle_Dynamic_Parameter)
Handle_Dynamic_Parameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_Parameter_IsNull, None, Handle_Dynamic_Parameter)
Handle_Dynamic_Parameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_Parameter_GetObject, None, Handle_Dynamic_Parameter)
Handle_Dynamic_Parameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_Parameter__kill_pointed, None, Handle_Dynamic_Parameter)
Handle_Dynamic_Parameter_swigregister = _Dynamic.Handle_Dynamic_Parameter_swigregister
Handle_Dynamic_Parameter_swigregister(Handle_Dynamic_Parameter)

def Handle_Dynamic_Parameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_Parameter_DownCast(AnObject)
Handle_Dynamic_Parameter_DownCast = _Dynamic.Handle_Dynamic_Parameter_DownCast

class Dynamic_ParameterNode(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anitem:
        :type anitem: Handle_Dynamic_Parameter &
        :rtype: None

        """
        _Dynamic.Dynamic_ParameterNode_swiginit(self, _Dynamic.new_Dynamic_ParameterNode(*args))

    def Object(self, *args):
        """
        :param anitem:
        :type anitem: Handle_Dynamic_Parameter &
        :rtype: None

        :rtype: Handle_Dynamic_Parameter

        """
        return _Dynamic.Dynamic_ParameterNode_Object(self, *args)


    def Next(self, *args):
        """
        :param anode:
        :type anode: Handle_Dynamic_ParameterNode &
        :rtype: None

        :rtype: Handle_Dynamic_ParameterNode

        """
        return _Dynamic.Dynamic_ParameterNode_Next(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_ParameterNode self)"""
        return _Dynamic.Dynamic_ParameterNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_ParameterNode self) -> Handle_Dynamic_ParameterNode"""
        return _Dynamic.Dynamic_ParameterNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_ParameterNode.Object = new_instancemethod(_Dynamic.Dynamic_ParameterNode_Object, None, Dynamic_ParameterNode)
Dynamic_ParameterNode.Next = new_instancemethod(_Dynamic.Dynamic_ParameterNode_Next, None, Dynamic_ParameterNode)
Dynamic_ParameterNode._kill_pointed = new_instancemethod(_Dynamic.Dynamic_ParameterNode__kill_pointed, None, Dynamic_ParameterNode)
Dynamic_ParameterNode.GetHandle = new_instancemethod(_Dynamic.Dynamic_ParameterNode_GetHandle, None, Dynamic_ParameterNode)
Dynamic_ParameterNode_swigregister = _Dynamic.Dynamic_ParameterNode_swigregister
Dynamic_ParameterNode_swigregister(Dynamic_ParameterNode)

class Handle_Dynamic_ParameterNode(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_ParameterNode_swiginit(self, _Dynamic.new_Handle_Dynamic_ParameterNode(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_ParameterNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_ParameterNode.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_ParameterNode_Nullify, None, Handle_Dynamic_ParameterNode)
Handle_Dynamic_ParameterNode.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_ParameterNode_IsNull, None, Handle_Dynamic_ParameterNode)
Handle_Dynamic_ParameterNode.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_ParameterNode_GetObject, None, Handle_Dynamic_ParameterNode)
Handle_Dynamic_ParameterNode._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_ParameterNode__kill_pointed, None, Handle_Dynamic_ParameterNode)
Handle_Dynamic_ParameterNode_swigregister = _Dynamic.Handle_Dynamic_ParameterNode_swigregister
Handle_Dynamic_ParameterNode_swigregister(Handle_Dynamic_ParameterNode)

def Handle_Dynamic_ParameterNode_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_ParameterNode_DownCast(AnObject)
Handle_Dynamic_ParameterNode_DownCast = _Dynamic.Handle_Dynamic_ParameterNode_DownCast

class Dynamic_SeqOfClasses(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SeqOfClasses_swiginit(self, _Dynamic.new_Dynamic_SeqOfClasses(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfClasses &
        :rtype: Dynamic_SeqOfClasses

        """
        return _Dynamic.Dynamic_SeqOfClasses_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfClasses &
        :rtype: Dynamic_SeqOfClasses

        """
        return _Dynamic.Dynamic_SeqOfClasses_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SeqOfClasses_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SeqOfClasses_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Dynamic_SeqOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SeqOfClasses_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Dynamic_DynamicClass &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SeqOfClasses_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfClasses_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SeqOfClasses.Clear = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Clear, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Assign = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Assign, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Set = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Set, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Append = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Append, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Prepend = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Prepend, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_InsertBefore, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_InsertAfter, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.First = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_First, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Last = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Last, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Split = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Split, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Value = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Value, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.SetValue = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_SetValue, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_ChangeValue, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses.Remove = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses_Remove, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SeqOfClasses__kill_pointed, None, Dynamic_SeqOfClasses)
Dynamic_SeqOfClasses_swigregister = _Dynamic.Dynamic_SeqOfClasses_swigregister
Dynamic_SeqOfClasses_swigregister(Dynamic_SeqOfClasses)

class Dynamic_SeqOfFuzzyDefinitions(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SeqOfFuzzyDefinitions_swiginit(self, _Dynamic.new_Dynamic_SeqOfFuzzyDefinitions(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: Dynamic_SeqOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: Dynamic_SeqOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Dynamic_SeqOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfFuzzyDefinitions_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SeqOfFuzzyDefinitions.Clear = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Clear, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Assign = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Assign, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Set = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Set, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Append = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Append, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Prepend = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Prepend, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_InsertBefore, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_InsertAfter, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.First = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_First, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Last = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Last, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Split = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Split, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Value, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.SetValue = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_SetValue, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_ChangeValue, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions.Remove = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions_Remove, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SeqOfFuzzyDefinitions__kill_pointed, None, Dynamic_SeqOfFuzzyDefinitions)
Dynamic_SeqOfFuzzyDefinitions_swigregister = _Dynamic.Dynamic_SeqOfFuzzyDefinitions_swigregister
Dynamic_SeqOfFuzzyDefinitions_swigregister(Dynamic_SeqOfFuzzyDefinitions)

class Dynamic_SeqOfMethodDefinitions(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SeqOfMethodDefinitions_swiginit(self, _Dynamic.new_Dynamic_SeqOfMethodDefinitions(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfMethodDefinitions &
        :rtype: Dynamic_SeqOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfMethodDefinitions &
        :rtype: Dynamic_SeqOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Dynamic_SeqOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Dynamic_MethodDefinition &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethodDefinitions_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SeqOfMethodDefinitions.Clear = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Clear, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Assign = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Assign, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Set = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Set, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Append = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Append, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Prepend = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Prepend, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_InsertBefore, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_InsertAfter, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.First = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_First, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Last = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Last, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Split = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Split, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Value, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.SetValue = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_SetValue, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_ChangeValue, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions.Remove = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions_Remove, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SeqOfMethodDefinitions__kill_pointed, None, Dynamic_SeqOfMethodDefinitions)
Dynamic_SeqOfMethodDefinitions_swigregister = _Dynamic.Dynamic_SeqOfMethodDefinitions_swigregister
Dynamic_SeqOfMethodDefinitions_swigregister(Dynamic_SeqOfMethodDefinitions)

class Dynamic_SeqOfMethods(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SeqOfMethods_swiginit(self, _Dynamic.new_Dynamic_SeqOfMethods(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfMethods &
        :rtype: Dynamic_SeqOfMethods

        """
        return _Dynamic.Dynamic_SeqOfMethods_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Dynamic_SeqOfMethods &
        :rtype: Dynamic_SeqOfMethods

        """
        return _Dynamic.Dynamic_SeqOfMethods_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_Method &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Dynamic_Method &
        :rtype: None

        :param S:
        :type S: Dynamic_SeqOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_Method &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Dynamic_Method &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Dynamic_SeqOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SeqOfMethods_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SeqOfMethods_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Dynamic_SeqOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SeqOfMethods_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Dynamic_Method &
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SeqOfMethods_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SeqOfMethods_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SeqOfMethods.Clear = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Clear, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Assign = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Assign, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Set = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Set, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Append = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Append, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Prepend = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Prepend, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_InsertBefore, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_InsertAfter, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.First = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_First, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Last = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Last, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Split = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Split, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Value = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Value, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.SetValue = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_SetValue, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_ChangeValue, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods.Remove = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods_Remove, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SeqOfMethods__kill_pointed, None, Dynamic_SeqOfMethods)
Dynamic_SeqOfMethods_swigregister = _Dynamic.Dynamic_SeqOfMethods_swigregister
Dynamic_SeqOfMethods_swigregister(Dynamic_SeqOfMethods)

class Dynamic_SequenceNodeOfSeqOfClasses(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Dynamic_DynamicClass &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_swiginit(self, _Dynamic.new_Dynamic_SequenceNodeOfSeqOfClasses(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceNodeOfSeqOfClasses self)"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfClasses__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceNodeOfSeqOfClasses self) -> Handle_Dynamic_SequenceNodeOfSeqOfClasses"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceNodeOfSeqOfClasses.Value = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_Value, None, Dynamic_SequenceNodeOfSeqOfClasses)
Dynamic_SequenceNodeOfSeqOfClasses._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfClasses__kill_pointed, None, Dynamic_SequenceNodeOfSeqOfClasses)
Dynamic_SequenceNodeOfSeqOfClasses.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_GetHandle, None, Dynamic_SequenceNodeOfSeqOfClasses)
Dynamic_SequenceNodeOfSeqOfClasses_swigregister = _Dynamic.Dynamic_SequenceNodeOfSeqOfClasses_swigregister
Dynamic_SequenceNodeOfSeqOfClasses_swigregister(Dynamic_SequenceNodeOfSeqOfClasses)

class Handle_Dynamic_SequenceNodeOfSeqOfClasses(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceNodeOfSeqOfClasses(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceNodeOfSeqOfClasses.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_Nullify, None, Handle_Dynamic_SequenceNodeOfSeqOfClasses)
Handle_Dynamic_SequenceNodeOfSeqOfClasses.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_IsNull, None, Handle_Dynamic_SequenceNodeOfSeqOfClasses)
Handle_Dynamic_SequenceNodeOfSeqOfClasses.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_GetObject, None, Handle_Dynamic_SequenceNodeOfSeqOfClasses)
Handle_Dynamic_SequenceNodeOfSeqOfClasses._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses__kill_pointed, None, Handle_Dynamic_SequenceNodeOfSeqOfClasses)
Handle_Dynamic_SequenceNodeOfSeqOfClasses_swigregister = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_swigregister
Handle_Dynamic_SequenceNodeOfSeqOfClasses_swigregister(Handle_Dynamic_SequenceNodeOfSeqOfClasses)

def Handle_Dynamic_SequenceNodeOfSeqOfClasses_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_DownCast(AnObject)
Handle_Dynamic_SequenceNodeOfSeqOfClasses_DownCast = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfClasses_DownCast

class Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Dynamic_FuzzyDefinition &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swiginit(self, _Dynamic.new_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions self)"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions self) -> Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_Value, None, Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions__kill_pointed, None, Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_GetHandle, None, Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister = _Dynamic.Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister
Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister(Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)

class Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_Nullify, None, Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_IsNull, None, Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_GetObject, None, Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions__kill_pointed, None, Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_swigregister(Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions)

def Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_DownCast(AnObject)
Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_DownCast = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfFuzzyDefinitions_DownCast

class Dynamic_SequenceNodeOfSeqOfMethodDefinitions(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Dynamic_MethodDefinition &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swiginit(self, _Dynamic.new_Dynamic_SequenceNodeOfSeqOfMethodDefinitions(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceNodeOfSeqOfMethodDefinitions self)"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceNodeOfSeqOfMethodDefinitions self) -> Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceNodeOfSeqOfMethodDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_Value, None, Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Dynamic_SequenceNodeOfSeqOfMethodDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions__kill_pointed, None, Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Dynamic_SequenceNodeOfSeqOfMethodDefinitions.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_GetHandle, None, Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister = _Dynamic.Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister
Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister(Dynamic_SequenceNodeOfSeqOfMethodDefinitions)

class Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_Nullify, None, Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_IsNull, None, Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_GetObject, None, Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions__kill_pointed, None, Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions)
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_swigregister(Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions)

def Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_DownCast(AnObject)
Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_DownCast = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethodDefinitions_DownCast

class Dynamic_SequenceNodeOfSeqOfMethods(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Dynamic_Method &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_swiginit(self, _Dynamic.new_Dynamic_SequenceNodeOfSeqOfMethods(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceNodeOfSeqOfMethods self)"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethods__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceNodeOfSeqOfMethods self) -> Handle_Dynamic_SequenceNodeOfSeqOfMethods"""
        return _Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceNodeOfSeqOfMethods.Value = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_Value, None, Dynamic_SequenceNodeOfSeqOfMethods)
Dynamic_SequenceNodeOfSeqOfMethods._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethods__kill_pointed, None, Dynamic_SequenceNodeOfSeqOfMethods)
Dynamic_SequenceNodeOfSeqOfMethods.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_GetHandle, None, Dynamic_SequenceNodeOfSeqOfMethods)
Dynamic_SequenceNodeOfSeqOfMethods_swigregister = _Dynamic.Dynamic_SequenceNodeOfSeqOfMethods_swigregister
Dynamic_SequenceNodeOfSeqOfMethods_swigregister(Dynamic_SequenceNodeOfSeqOfMethods)

class Handle_Dynamic_SequenceNodeOfSeqOfMethods(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceNodeOfSeqOfMethods(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceNodeOfSeqOfMethods.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_Nullify, None, Handle_Dynamic_SequenceNodeOfSeqOfMethods)
Handle_Dynamic_SequenceNodeOfSeqOfMethods.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_IsNull, None, Handle_Dynamic_SequenceNodeOfSeqOfMethods)
Handle_Dynamic_SequenceNodeOfSeqOfMethods.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_GetObject, None, Handle_Dynamic_SequenceNodeOfSeqOfMethods)
Handle_Dynamic_SequenceNodeOfSeqOfMethods._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods__kill_pointed, None, Handle_Dynamic_SequenceNodeOfSeqOfMethods)
Handle_Dynamic_SequenceNodeOfSeqOfMethods_swigregister = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_swigregister
Handle_Dynamic_SequenceNodeOfSeqOfMethods_swigregister(Handle_Dynamic_SequenceNodeOfSeqOfMethods)

def Handle_Dynamic_SequenceNodeOfSeqOfMethods_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_DownCast(AnObject)
Handle_Dynamic_SequenceNodeOfSeqOfMethods_DownCast = _Dynamic.Handle_Dynamic_SequenceNodeOfSeqOfMethods_DownCast

class Dynamic_SequenceOfClasses(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceOfClasses_swiginit(self, _Dynamic.new_Dynamic_SequenceOfClasses(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Dynamic.Dynamic_SequenceOfClasses_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_DynamicClass &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfClasses &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_SequenceOfClasses

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_DynamicClass &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_DynamicClass

        """
        return _Dynamic.Dynamic_SequenceOfClasses_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Dynamic_SeqOfClasses

        """
        return _Dynamic.Dynamic_SequenceOfClasses_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Dynamic_SeqOfClasses

        """
        return _Dynamic.Dynamic_SequenceOfClasses_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Dynamic_SequenceOfClasses

        """
        return _Dynamic.Dynamic_SequenceOfClasses_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceOfClasses self)"""
        return _Dynamic.Dynamic_SequenceOfClasses__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceOfClasses self) -> Handle_Dynamic_SequenceOfClasses"""
        return _Dynamic.Dynamic_SequenceOfClasses_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceOfClasses.IsEmpty = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_IsEmpty, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Length = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Length, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Clear = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Clear, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Append = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Append, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Prepend = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Prepend, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Reverse = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Reverse, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_InsertBefore, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_InsertAfter, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Exchange = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Exchange, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Split = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Split, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.SetValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_SetValue, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Value = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Value, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_ChangeValue, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Remove = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Remove, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.Sequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_Sequence, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.ChangeSequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_ChangeSequence, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.ShallowCopy = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_ShallowCopy, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses__kill_pointed, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceOfClasses_GetHandle, None, Dynamic_SequenceOfClasses)
Dynamic_SequenceOfClasses_swigregister = _Dynamic.Dynamic_SequenceOfClasses_swigregister
Dynamic_SequenceOfClasses_swigregister(Dynamic_SequenceOfClasses)

class Handle_Dynamic_SequenceOfClasses(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceOfClasses_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceOfClasses(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceOfClasses_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceOfClasses.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfClasses_Nullify, None, Handle_Dynamic_SequenceOfClasses)
Handle_Dynamic_SequenceOfClasses.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfClasses_IsNull, None, Handle_Dynamic_SequenceOfClasses)
Handle_Dynamic_SequenceOfClasses.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfClasses_GetObject, None, Handle_Dynamic_SequenceOfClasses)
Handle_Dynamic_SequenceOfClasses._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfClasses__kill_pointed, None, Handle_Dynamic_SequenceOfClasses)
Handle_Dynamic_SequenceOfClasses_swigregister = _Dynamic.Handle_Dynamic_SequenceOfClasses_swigregister
Handle_Dynamic_SequenceOfClasses_swigregister(Handle_Dynamic_SequenceOfClasses)

def Handle_Dynamic_SequenceOfClasses_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceOfClasses_DownCast(AnObject)
Handle_Dynamic_SequenceOfClasses_DownCast = _Dynamic.Handle_Dynamic_SequenceOfClasses_DownCast

class Dynamic_SequenceOfFuzzyDefinitions(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_swiginit(self, _Dynamic.new_Dynamic_SequenceOfFuzzyDefinitions(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfFuzzyDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_SequenceOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_FuzzyDefinition &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_FuzzyDefinition

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Dynamic_SeqOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Dynamic_SeqOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Dynamic_SequenceOfFuzzyDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceOfFuzzyDefinitions self)"""
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceOfFuzzyDefinitions self) -> Handle_Dynamic_SequenceOfFuzzyDefinitions"""
        return _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceOfFuzzyDefinitions.IsEmpty = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_IsEmpty, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Length = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Length, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Clear = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Clear, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Append = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Append, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Prepend = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Prepend, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Reverse = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Reverse, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_InsertBefore, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_InsertAfter, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Exchange = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Exchange, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Split = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Split, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.SetValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_SetValue, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Value, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ChangeValue, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Remove = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Remove, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.Sequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_Sequence, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.ChangeSequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ChangeSequence, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.ShallowCopy = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_ShallowCopy, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions__kill_pointed, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceOfFuzzyDefinitions_GetHandle, None, Dynamic_SequenceOfFuzzyDefinitions)
Dynamic_SequenceOfFuzzyDefinitions_swigregister = _Dynamic.Dynamic_SequenceOfFuzzyDefinitions_swigregister
Dynamic_SequenceOfFuzzyDefinitions_swigregister(Dynamic_SequenceOfFuzzyDefinitions)

class Handle_Dynamic_SequenceOfFuzzyDefinitions(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceOfFuzzyDefinitions(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceOfFuzzyDefinitions.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_Nullify, None, Handle_Dynamic_SequenceOfFuzzyDefinitions)
Handle_Dynamic_SequenceOfFuzzyDefinitions.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_IsNull, None, Handle_Dynamic_SequenceOfFuzzyDefinitions)
Handle_Dynamic_SequenceOfFuzzyDefinitions.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_GetObject, None, Handle_Dynamic_SequenceOfFuzzyDefinitions)
Handle_Dynamic_SequenceOfFuzzyDefinitions._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions__kill_pointed, None, Handle_Dynamic_SequenceOfFuzzyDefinitions)
Handle_Dynamic_SequenceOfFuzzyDefinitions_swigregister = _Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_swigregister
Handle_Dynamic_SequenceOfFuzzyDefinitions_swigregister(Handle_Dynamic_SequenceOfFuzzyDefinitions)

def Handle_Dynamic_SequenceOfFuzzyDefinitions_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_DownCast(AnObject)
Handle_Dynamic_SequenceOfFuzzyDefinitions_DownCast = _Dynamic.Handle_Dynamic_SequenceOfFuzzyDefinitions_DownCast

class Dynamic_SequenceOfMethodDefinitions(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceOfMethodDefinitions_swiginit(self, _Dynamic.new_Dynamic_SequenceOfMethodDefinitions(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_MethodDefinition &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethodDefinitions &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_SequenceOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_MethodDefinition &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_MethodDefinition

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Dynamic_SeqOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Dynamic_SeqOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Dynamic_SequenceOfMethodDefinitions

        """
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceOfMethodDefinitions self)"""
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceOfMethodDefinitions self) -> Handle_Dynamic_SequenceOfMethodDefinitions"""
        return _Dynamic.Dynamic_SequenceOfMethodDefinitions_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceOfMethodDefinitions.IsEmpty = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_IsEmpty, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Length = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Length, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Clear = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Clear, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Append = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Append, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Prepend = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Prepend, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Reverse = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Reverse, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_InsertBefore, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_InsertAfter, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Exchange = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Exchange, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Split = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Split, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.SetValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_SetValue, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Value = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Value, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_ChangeValue, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Remove = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Remove, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.Sequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_Sequence, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.ChangeSequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_ChangeSequence, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.ShallowCopy = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_ShallowCopy, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions__kill_pointed, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethodDefinitions_GetHandle, None, Dynamic_SequenceOfMethodDefinitions)
Dynamic_SequenceOfMethodDefinitions_swigregister = _Dynamic.Dynamic_SequenceOfMethodDefinitions_swigregister
Dynamic_SequenceOfMethodDefinitions_swigregister(Dynamic_SequenceOfMethodDefinitions)

class Handle_Dynamic_SequenceOfMethodDefinitions(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceOfMethodDefinitions(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceOfMethodDefinitions.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_Nullify, None, Handle_Dynamic_SequenceOfMethodDefinitions)
Handle_Dynamic_SequenceOfMethodDefinitions.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_IsNull, None, Handle_Dynamic_SequenceOfMethodDefinitions)
Handle_Dynamic_SequenceOfMethodDefinitions.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_GetObject, None, Handle_Dynamic_SequenceOfMethodDefinitions)
Handle_Dynamic_SequenceOfMethodDefinitions._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions__kill_pointed, None, Handle_Dynamic_SequenceOfMethodDefinitions)
Handle_Dynamic_SequenceOfMethodDefinitions_swigregister = _Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_swigregister
Handle_Dynamic_SequenceOfMethodDefinitions_swigregister(Handle_Dynamic_SequenceOfMethodDefinitions)

def Handle_Dynamic_SequenceOfMethodDefinitions_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_DownCast(AnObject)
Handle_Dynamic_SequenceOfMethodDefinitions_DownCast = _Dynamic.Handle_Dynamic_SequenceOfMethodDefinitions_DownCast

class Dynamic_SequenceOfMethods(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dynamic.Dynamic_SequenceOfMethods_swiginit(self, _Dynamic.new_Dynamic_SequenceOfMethods(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Dynamic.Dynamic_SequenceOfMethods_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_Method &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Dynamic_Method &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_Method &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_Method &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Dynamic_SequenceOfMethods &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_SequenceOfMethods

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Dynamic_Method &
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_SequenceOfMethods_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Dynamic_SeqOfMethods

        """
        return _Dynamic.Dynamic_SequenceOfMethods_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Dynamic_SeqOfMethods

        """
        return _Dynamic.Dynamic_SequenceOfMethods_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Dynamic_SequenceOfMethods

        """
        return _Dynamic.Dynamic_SequenceOfMethods_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_SequenceOfMethods self)"""
        return _Dynamic.Dynamic_SequenceOfMethods__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_SequenceOfMethods self) -> Handle_Dynamic_SequenceOfMethods"""
        return _Dynamic.Dynamic_SequenceOfMethods_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_SequenceOfMethods.IsEmpty = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_IsEmpty, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Length = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Length, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Clear = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Clear, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Append = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Append, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Prepend = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Prepend, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Reverse = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Reverse, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.InsertBefore = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_InsertBefore, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.InsertAfter = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_InsertAfter, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Exchange = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Exchange, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Split = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Split, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.SetValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_SetValue, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Value = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Value, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.ChangeValue = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_ChangeValue, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Remove = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Remove, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.Sequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_Sequence, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.ChangeSequence = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_ChangeSequence, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.ShallowCopy = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_ShallowCopy, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods._kill_pointed = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods__kill_pointed, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods.GetHandle = new_instancemethod(_Dynamic.Dynamic_SequenceOfMethods_GetHandle, None, Dynamic_SequenceOfMethods)
Dynamic_SequenceOfMethods_swigregister = _Dynamic.Dynamic_SequenceOfMethods_swigregister
Dynamic_SequenceOfMethods_swigregister(Dynamic_SequenceOfMethods)

class Handle_Dynamic_SequenceOfMethods(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_SequenceOfMethods_swiginit(self, _Dynamic.new_Handle_Dynamic_SequenceOfMethods(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_SequenceOfMethods_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_SequenceOfMethods.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethods_Nullify, None, Handle_Dynamic_SequenceOfMethods)
Handle_Dynamic_SequenceOfMethods.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethods_IsNull, None, Handle_Dynamic_SequenceOfMethods)
Handle_Dynamic_SequenceOfMethods.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethods_GetObject, None, Handle_Dynamic_SequenceOfMethods)
Handle_Dynamic_SequenceOfMethods._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_SequenceOfMethods__kill_pointed, None, Handle_Dynamic_SequenceOfMethods)
Handle_Dynamic_SequenceOfMethods_swigregister = _Dynamic.Handle_Dynamic_SequenceOfMethods_swigregister
Handle_Dynamic_SequenceOfMethods_swigregister(Handle_Dynamic_SequenceOfMethods)

def Handle_Dynamic_SequenceOfMethods_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_SequenceOfMethods_DownCast(AnObject)
Handle_Dynamic_SequenceOfMethods_DownCast = _Dynamic.Handle_Dynamic_SequenceOfMethods_DownCast

class Dynamic_Variable(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates and returns an empty instance of this class.

        :rtype: None

        """
        _Dynamic.Dynamic_Variable_swiginit(self, _Dynamic.new_Dynamic_Variable(*args))

    def Parameter(self, *args):
        """
        * Sets the parameter <aparameter> in <self>. This parameter gives the name, the type of value, and if necessary the default value of the variable.

        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :rtype: None

        * Returns the parameter stored in <self>.

        :rtype: Handle_Dynamic_Parameter

        """
        return _Dynamic.Dynamic_Variable_Parameter(self, *args)


    def Mode(self, *args):
        """
        * Sets the mode to the variable. the mode is to take in the enumeration IN, OUT, INOUT, INTERNAL, CONSTANT, which describes the type of the variable.

        :param amode:
        :type amode: Dynamic_ModeEnum
        :rtype: None

        * Returns the mode of the variable.

        :rtype: Dynamic_ModeEnum

        """
        return _Dynamic.Dynamic_Variable_Mode(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_Variable self) -> std::string"""
        return _Dynamic.Dynamic_Variable_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_Variable self)"""
        return _Dynamic.Dynamic_Variable__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_Variable self) -> Handle_Dynamic_Variable"""
        return _Dynamic.Dynamic_Variable_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_Variable.Parameter = new_instancemethod(_Dynamic.Dynamic_Variable_Parameter, None, Dynamic_Variable)
Dynamic_Variable.Mode = new_instancemethod(_Dynamic.Dynamic_Variable_Mode, None, Dynamic_Variable)
Dynamic_Variable.DumpToString = new_instancemethod(_Dynamic.Dynamic_Variable_DumpToString, None, Dynamic_Variable)
Dynamic_Variable._kill_pointed = new_instancemethod(_Dynamic.Dynamic_Variable__kill_pointed, None, Dynamic_Variable)
Dynamic_Variable.GetHandle = new_instancemethod(_Dynamic.Dynamic_Variable_GetHandle, None, Dynamic_Variable)
Dynamic_Variable_swigregister = _Dynamic.Dynamic_Variable_swigregister
Dynamic_Variable_swigregister(Dynamic_Variable)

class Handle_Dynamic_Variable(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_Variable_swiginit(self, _Dynamic.new_Handle_Dynamic_Variable(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_Variable_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_Variable.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_Variable_Nullify, None, Handle_Dynamic_Variable)
Handle_Dynamic_Variable.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_Variable_IsNull, None, Handle_Dynamic_Variable)
Handle_Dynamic_Variable.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_Variable_GetObject, None, Handle_Dynamic_Variable)
Handle_Dynamic_Variable._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_Variable__kill_pointed, None, Handle_Dynamic_Variable)
Handle_Dynamic_Variable_swigregister = _Dynamic.Handle_Dynamic_Variable_swigregister
Handle_Dynamic_Variable_swigregister(Handle_Dynamic_Variable)

def Handle_Dynamic_Variable_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_Variable_DownCast(AnObject)
Handle_Dynamic_Variable_DownCast = _Dynamic.Handle_Dynamic_Variable_DownCast

class Dynamic_VariableNode(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anitem:
        :type anitem: Handle_Dynamic_Variable &
        :rtype: None

        """
        _Dynamic.Dynamic_VariableNode_swiginit(self, _Dynamic.new_Dynamic_VariableNode(*args))

    def Object(self, *args):
        """
        :param anitem:
        :type anitem: Handle_Dynamic_Variable &
        :rtype: None

        :rtype: Handle_Dynamic_Variable

        """
        return _Dynamic.Dynamic_VariableNode_Object(self, *args)


    def Next(self, *args):
        """
        :param anode:
        :type anode: Handle_Dynamic_VariableNode &
        :rtype: None

        :rtype: Handle_Dynamic_VariableNode

        """
        return _Dynamic.Dynamic_VariableNode_Next(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_VariableNode self)"""
        return _Dynamic.Dynamic_VariableNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_VariableNode self) -> Handle_Dynamic_VariableNode"""
        return _Dynamic.Dynamic_VariableNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_VariableNode.Object = new_instancemethod(_Dynamic.Dynamic_VariableNode_Object, None, Dynamic_VariableNode)
Dynamic_VariableNode.Next = new_instancemethod(_Dynamic.Dynamic_VariableNode_Next, None, Dynamic_VariableNode)
Dynamic_VariableNode._kill_pointed = new_instancemethod(_Dynamic.Dynamic_VariableNode__kill_pointed, None, Dynamic_VariableNode)
Dynamic_VariableNode.GetHandle = new_instancemethod(_Dynamic.Dynamic_VariableNode_GetHandle, None, Dynamic_VariableNode)
Dynamic_VariableNode_swigregister = _Dynamic.Dynamic_VariableNode_swigregister
Dynamic_VariableNode_swigregister(Dynamic_VariableNode)

class Handle_Dynamic_VariableNode(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_VariableNode_swiginit(self, _Dynamic.new_Handle_Dynamic_VariableNode(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_VariableNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_VariableNode.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_VariableNode_Nullify, None, Handle_Dynamic_VariableNode)
Handle_Dynamic_VariableNode.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_VariableNode_IsNull, None, Handle_Dynamic_VariableNode)
Handle_Dynamic_VariableNode.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_VariableNode_GetObject, None, Handle_Dynamic_VariableNode)
Handle_Dynamic_VariableNode._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_VariableNode__kill_pointed, None, Handle_Dynamic_VariableNode)
Handle_Dynamic_VariableNode_swigregister = _Dynamic.Handle_Dynamic_VariableNode_swigregister
Handle_Dynamic_VariableNode_swigregister(Handle_Dynamic_VariableNode)

def Handle_Dynamic_VariableNode_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_VariableNode_DownCast(AnObject)
Handle_Dynamic_VariableNode_DownCast = _Dynamic.Handle_Dynamic_VariableNode_DownCast

class Dynamic_AbstractVariableInstance(Dynamic_Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Variable(self, *args):
        """
        * This deferred method must be implemented in the derived classes for setting reference(s) to the corresponding variable(s) which define the signature of the method definition.

        :param avariable:
        :type avariable: Handle_Dynamic_Variable &
        :rtype: void

        """
        return _Dynamic.Dynamic_AbstractVariableInstance_Variable(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_AbstractVariableInstance self)"""
        return _Dynamic.Dynamic_AbstractVariableInstance__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_AbstractVariableInstance self) -> Handle_Dynamic_AbstractVariableInstance"""
        return _Dynamic.Dynamic_AbstractVariableInstance_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_AbstractVariableInstance.Variable = new_instancemethod(_Dynamic.Dynamic_AbstractVariableInstance_Variable, None, Dynamic_AbstractVariableInstance)
Dynamic_AbstractVariableInstance._kill_pointed = new_instancemethod(_Dynamic.Dynamic_AbstractVariableInstance__kill_pointed, None, Dynamic_AbstractVariableInstance)
Dynamic_AbstractVariableInstance.GetHandle = new_instancemethod(_Dynamic.Dynamic_AbstractVariableInstance_GetHandle, None, Dynamic_AbstractVariableInstance)
Dynamic_AbstractVariableInstance_swigregister = _Dynamic.Dynamic_AbstractVariableInstance_swigregister
Dynamic_AbstractVariableInstance_swigregister(Dynamic_AbstractVariableInstance)

class Handle_Dynamic_AbstractVariableInstance(Handle_Dynamic_Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_AbstractVariableInstance_swiginit(self, _Dynamic.new_Handle_Dynamic_AbstractVariableInstance(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_AbstractVariableInstance_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_AbstractVariableInstance.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_AbstractVariableInstance_Nullify, None, Handle_Dynamic_AbstractVariableInstance)
Handle_Dynamic_AbstractVariableInstance.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_AbstractVariableInstance_IsNull, None, Handle_Dynamic_AbstractVariableInstance)
Handle_Dynamic_AbstractVariableInstance.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_AbstractVariableInstance_GetObject, None, Handle_Dynamic_AbstractVariableInstance)
Handle_Dynamic_AbstractVariableInstance._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_AbstractVariableInstance__kill_pointed, None, Handle_Dynamic_AbstractVariableInstance)
Handle_Dynamic_AbstractVariableInstance_swigregister = _Dynamic.Handle_Dynamic_AbstractVariableInstance_swigregister
Handle_Dynamic_AbstractVariableInstance_swigregister(Handle_Dynamic_AbstractVariableInstance)

def Handle_Dynamic_AbstractVariableInstance_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_AbstractVariableInstance_DownCast(AnObject)
Handle_Dynamic_AbstractVariableInstance_DownCast = _Dynamic.Handle_Dynamic_AbstractVariableInstance_DownCast

class Dynamic_BooleanParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a boolean parameter with <aparameter> as name.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * Creates a boolean parameter with <aparameter> and <avalue> respectively as name and value.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: bool
        :rtype: None

        * Creates a boolean parameter with <aparameter> as name and <avalue> as value. <avalue> is a CString with two possible values which are : 'Standard_True' and 'Standard_False'.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: char *
        :rtype: None

        """
        _Dynamic.Dynamic_BooleanParameter_swiginit(self, _Dynamic.new_Dynamic_BooleanParameter(*args))

    def Value(self, *args):
        """
        * Returns the boolean value <thevalue>.

        :rtype: bool

        * Sets the field <thevalue> with the boolean value <avalue>

        :param avalue:
        :type avalue: bool
        :rtype: None

        """
        return _Dynamic.Dynamic_BooleanParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_BooleanParameter self) -> std::string"""
        return _Dynamic.Dynamic_BooleanParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_BooleanParameter self)"""
        return _Dynamic.Dynamic_BooleanParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_BooleanParameter self) -> Handle_Dynamic_BooleanParameter"""
        return _Dynamic.Dynamic_BooleanParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_BooleanParameter.Value = new_instancemethod(_Dynamic.Dynamic_BooleanParameter_Value, None, Dynamic_BooleanParameter)
Dynamic_BooleanParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_BooleanParameter_DumpToString, None, Dynamic_BooleanParameter)
Dynamic_BooleanParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_BooleanParameter__kill_pointed, None, Dynamic_BooleanParameter)
Dynamic_BooleanParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_BooleanParameter_GetHandle, None, Dynamic_BooleanParameter)
Dynamic_BooleanParameter_swigregister = _Dynamic.Dynamic_BooleanParameter_swigregister
Dynamic_BooleanParameter_swigregister(Dynamic_BooleanParameter)

class Handle_Dynamic_BooleanParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_BooleanParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_BooleanParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_BooleanParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_BooleanParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_BooleanParameter_Nullify, None, Handle_Dynamic_BooleanParameter)
Handle_Dynamic_BooleanParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_BooleanParameter_IsNull, None, Handle_Dynamic_BooleanParameter)
Handle_Dynamic_BooleanParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_BooleanParameter_GetObject, None, Handle_Dynamic_BooleanParameter)
Handle_Dynamic_BooleanParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_BooleanParameter__kill_pointed, None, Handle_Dynamic_BooleanParameter)
Handle_Dynamic_BooleanParameter_swigregister = _Dynamic.Handle_Dynamic_BooleanParameter_swigregister
Handle_Dynamic_BooleanParameter_swigregister(Handle_Dynamic_BooleanParameter)

def Handle_Dynamic_BooleanParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_BooleanParameter_DownCast(AnObject)
Handle_Dynamic_BooleanParameter_DownCast = _Dynamic.Handle_Dynamic_BooleanParameter_DownCast

class Dynamic_DynamicDerivedClass(Dynamic_DynamicClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a new instance of this class with <aname> as name.

        :param aname:
        :type aname: char *
        :rtype: None

        """
        _Dynamic.Dynamic_DynamicDerivedClass_swiginit(self, _Dynamic.new_Dynamic_DynamicDerivedClass(*args))

    def AddClass(self, *args):
        """
        * Adds another class <aclass> to the sequence of derived classes.

        :param aclass:
        :type aclass: Handle_Dynamic_DynamicClass &
        :rtype: None

        """
        return _Dynamic.Dynamic_DynamicDerivedClass_AddClass(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_DynamicDerivedClass self)"""
        return _Dynamic.Dynamic_DynamicDerivedClass__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_DynamicDerivedClass self) -> Handle_Dynamic_DynamicDerivedClass"""
        return _Dynamic.Dynamic_DynamicDerivedClass_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_DynamicDerivedClass.AddClass = new_instancemethod(_Dynamic.Dynamic_DynamicDerivedClass_AddClass, None, Dynamic_DynamicDerivedClass)
Dynamic_DynamicDerivedClass._kill_pointed = new_instancemethod(_Dynamic.Dynamic_DynamicDerivedClass__kill_pointed, None, Dynamic_DynamicDerivedClass)
Dynamic_DynamicDerivedClass.GetHandle = new_instancemethod(_Dynamic.Dynamic_DynamicDerivedClass_GetHandle, None, Dynamic_DynamicDerivedClass)
Dynamic_DynamicDerivedClass_swigregister = _Dynamic.Dynamic_DynamicDerivedClass_swigregister
Dynamic_DynamicDerivedClass_swigregister(Dynamic_DynamicDerivedClass)

class Handle_Dynamic_DynamicDerivedClass(Handle_Dynamic_DynamicClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_DynamicDerivedClass_swiginit(self, _Dynamic.new_Handle_Dynamic_DynamicDerivedClass(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_DynamicDerivedClass_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_DynamicDerivedClass.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicDerivedClass_Nullify, None, Handle_Dynamic_DynamicDerivedClass)
Handle_Dynamic_DynamicDerivedClass.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicDerivedClass_IsNull, None, Handle_Dynamic_DynamicDerivedClass)
Handle_Dynamic_DynamicDerivedClass.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicDerivedClass_GetObject, None, Handle_Dynamic_DynamicDerivedClass)
Handle_Dynamic_DynamicDerivedClass._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_DynamicDerivedClass__kill_pointed, None, Handle_Dynamic_DynamicDerivedClass)
Handle_Dynamic_DynamicDerivedClass_swigregister = _Dynamic.Handle_Dynamic_DynamicDerivedClass_swigregister
Handle_Dynamic_DynamicDerivedClass_swigregister(Handle_Dynamic_DynamicDerivedClass)

def Handle_Dynamic_DynamicDerivedClass_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_DynamicDerivedClass_DownCast(AnObject)
Handle_Dynamic_DynamicDerivedClass_DownCast = _Dynamic.Handle_Dynamic_DynamicDerivedClass_DownCast

class Dynamic_FuzzyDefinition(Dynamic_FuzzyClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a FuzzyDefinition with <aname> as type.

        :param aname:
        :type aname: char *
        :rtype: None

        """
        _Dynamic.Dynamic_FuzzyDefinition_swiginit(self, _Dynamic.new_Dynamic_FuzzyDefinition(*args))

    def DumpToString(self):
        """DumpToString(Dynamic_FuzzyDefinition self) -> std::string"""
        return _Dynamic.Dynamic_FuzzyDefinition_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_FuzzyDefinition self)"""
        return _Dynamic.Dynamic_FuzzyDefinition__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_FuzzyDefinition self) -> Handle_Dynamic_FuzzyDefinition"""
        return _Dynamic.Dynamic_FuzzyDefinition_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_FuzzyDefinition.DumpToString = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinition_DumpToString, None, Dynamic_FuzzyDefinition)
Dynamic_FuzzyDefinition._kill_pointed = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinition__kill_pointed, None, Dynamic_FuzzyDefinition)
Dynamic_FuzzyDefinition.GetHandle = new_instancemethod(_Dynamic.Dynamic_FuzzyDefinition_GetHandle, None, Dynamic_FuzzyDefinition)
Dynamic_FuzzyDefinition_swigregister = _Dynamic.Dynamic_FuzzyDefinition_swigregister
Dynamic_FuzzyDefinition_swigregister(Dynamic_FuzzyDefinition)

class Handle_Dynamic_FuzzyDefinition(Handle_Dynamic_FuzzyClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_FuzzyDefinition_swiginit(self, _Dynamic.new_Handle_Dynamic_FuzzyDefinition(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_FuzzyDefinition_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_FuzzyDefinition.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinition_Nullify, None, Handle_Dynamic_FuzzyDefinition)
Handle_Dynamic_FuzzyDefinition.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinition_IsNull, None, Handle_Dynamic_FuzzyDefinition)
Handle_Dynamic_FuzzyDefinition.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinition_GetObject, None, Handle_Dynamic_FuzzyDefinition)
Handle_Dynamic_FuzzyDefinition._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_FuzzyDefinition__kill_pointed, None, Handle_Dynamic_FuzzyDefinition)
Handle_Dynamic_FuzzyDefinition_swigregister = _Dynamic.Handle_Dynamic_FuzzyDefinition_swigregister
Handle_Dynamic_FuzzyDefinition_swigregister(Handle_Dynamic_FuzzyDefinition)

def Handle_Dynamic_FuzzyDefinition_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_FuzzyDefinition_DownCast(AnObject)
Handle_Dynamic_FuzzyDefinition_DownCast = _Dynamic.Handle_Dynamic_FuzzyDefinition_DownCast

class Dynamic_InstanceParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an InstanceParameter with <aparameter> as identifier.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * Creates an InstanceParameter with <aparameter> as identifier and <avalue> as initial value.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: Handle_Dynamic_DynamicInstance &
        :rtype: None

        """
        _Dynamic.Dynamic_InstanceParameter_swiginit(self, _Dynamic.new_Dynamic_InstanceParameter(*args))

    def Value(self, *args):
        """
        * Returns <thevalue>.

        :rtype: Handle_Dynamic_DynamicInstance

        * Sets <avalue> to <thevalue>.

        :param avalue:
        :type avalue: Handle_Dynamic_DynamicInstance &
        :rtype: None

        """
        return _Dynamic.Dynamic_InstanceParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_InstanceParameter self) -> std::string"""
        return _Dynamic.Dynamic_InstanceParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_InstanceParameter self)"""
        return _Dynamic.Dynamic_InstanceParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_InstanceParameter self) -> Handle_Dynamic_InstanceParameter"""
        return _Dynamic.Dynamic_InstanceParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_InstanceParameter.Value = new_instancemethod(_Dynamic.Dynamic_InstanceParameter_Value, None, Dynamic_InstanceParameter)
Dynamic_InstanceParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_InstanceParameter_DumpToString, None, Dynamic_InstanceParameter)
Dynamic_InstanceParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_InstanceParameter__kill_pointed, None, Dynamic_InstanceParameter)
Dynamic_InstanceParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_InstanceParameter_GetHandle, None, Dynamic_InstanceParameter)
Dynamic_InstanceParameter_swigregister = _Dynamic.Dynamic_InstanceParameter_swigregister
Dynamic_InstanceParameter_swigregister(Dynamic_InstanceParameter)

class Handle_Dynamic_InstanceParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_InstanceParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_InstanceParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_InstanceParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_InstanceParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_InstanceParameter_Nullify, None, Handle_Dynamic_InstanceParameter)
Handle_Dynamic_InstanceParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_InstanceParameter_IsNull, None, Handle_Dynamic_InstanceParameter)
Handle_Dynamic_InstanceParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_InstanceParameter_GetObject, None, Handle_Dynamic_InstanceParameter)
Handle_Dynamic_InstanceParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_InstanceParameter__kill_pointed, None, Handle_Dynamic_InstanceParameter)
Handle_Dynamic_InstanceParameter_swigregister = _Dynamic.Handle_Dynamic_InstanceParameter_swigregister
Handle_Dynamic_InstanceParameter_swigregister(Handle_Dynamic_InstanceParameter)

def Handle_Dynamic_InstanceParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_InstanceParameter_DownCast(AnObject)
Handle_Dynamic_InstanceParameter_DownCast = _Dynamic.Handle_Dynamic_InstanceParameter_DownCast

class Dynamic_IntegerParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an IntegerParameter with <aparameter> as identifier.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * Creates an IntegerParameter with <aparameter> as identifier and <avalue> as initial value.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int
        :rtype: None

        """
        _Dynamic.Dynamic_IntegerParameter_swiginit(self, _Dynamic.new_Dynamic_IntegerParameter(*args))

    def Value(self, *args):
        """
        * Returns the integer value <thevalue>.

        :rtype: int

        * Sets the field <thevalue> with the integer value <avalue>

        :param avalue:
        :type avalue: int
        :rtype: None

        """
        return _Dynamic.Dynamic_IntegerParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_IntegerParameter self) -> std::string"""
        return _Dynamic.Dynamic_IntegerParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_IntegerParameter self)"""
        return _Dynamic.Dynamic_IntegerParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_IntegerParameter self) -> Handle_Dynamic_IntegerParameter"""
        return _Dynamic.Dynamic_IntegerParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_IntegerParameter.Value = new_instancemethod(_Dynamic.Dynamic_IntegerParameter_Value, None, Dynamic_IntegerParameter)
Dynamic_IntegerParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_IntegerParameter_DumpToString, None, Dynamic_IntegerParameter)
Dynamic_IntegerParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_IntegerParameter__kill_pointed, None, Dynamic_IntegerParameter)
Dynamic_IntegerParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_IntegerParameter_GetHandle, None, Dynamic_IntegerParameter)
Dynamic_IntegerParameter_swigregister = _Dynamic.Dynamic_IntegerParameter_swigregister
Dynamic_IntegerParameter_swigregister(Dynamic_IntegerParameter)

class Handle_Dynamic_IntegerParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_IntegerParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_IntegerParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_IntegerParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_IntegerParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_IntegerParameter_Nullify, None, Handle_Dynamic_IntegerParameter)
Handle_Dynamic_IntegerParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_IntegerParameter_IsNull, None, Handle_Dynamic_IntegerParameter)
Handle_Dynamic_IntegerParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_IntegerParameter_GetObject, None, Handle_Dynamic_IntegerParameter)
Handle_Dynamic_IntegerParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_IntegerParameter__kill_pointed, None, Handle_Dynamic_IntegerParameter)
Handle_Dynamic_IntegerParameter_swigregister = _Dynamic.Handle_Dynamic_IntegerParameter_swigregister
Handle_Dynamic_IntegerParameter_swigregister(Handle_Dynamic_IntegerParameter)

def Handle_Dynamic_IntegerParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_IntegerParameter_DownCast(AnObject)
Handle_Dynamic_IntegerParameter_DownCast = _Dynamic.Handle_Dynamic_IntegerParameter_DownCast

class Dynamic_MethodDefinition(Dynamic_Method):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddVariable(self, *args):
        """
        * Adds a new variable created from the parameter <aparameter>, which defines the name of the variable its type and if necessary its default value, the mode <amode> which precise if it is an in, out, inout, internal or constant variable and the flag <agroup> for accepting a set of homogeneous variables. with the parameter value <aparameter>.

        :param aparameter:
        :type aparameter: Handle_Dynamic_Parameter &
        :param amode:
        :type amode: Dynamic_ModeEnum
        :param agroup: default value is Standard_False
        :type agroup: bool
        :rtype: None

        """
        return _Dynamic.Dynamic_MethodDefinition_AddVariable(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_MethodDefinition self) -> std::string"""
        return _Dynamic.Dynamic_MethodDefinition_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_MethodDefinition self)"""
        return _Dynamic.Dynamic_MethodDefinition__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_MethodDefinition self) -> Handle_Dynamic_MethodDefinition"""
        return _Dynamic.Dynamic_MethodDefinition_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_MethodDefinition.AddVariable = new_instancemethod(_Dynamic.Dynamic_MethodDefinition_AddVariable, None, Dynamic_MethodDefinition)
Dynamic_MethodDefinition.DumpToString = new_instancemethod(_Dynamic.Dynamic_MethodDefinition_DumpToString, None, Dynamic_MethodDefinition)
Dynamic_MethodDefinition._kill_pointed = new_instancemethod(_Dynamic.Dynamic_MethodDefinition__kill_pointed, None, Dynamic_MethodDefinition)
Dynamic_MethodDefinition.GetHandle = new_instancemethod(_Dynamic.Dynamic_MethodDefinition_GetHandle, None, Dynamic_MethodDefinition)
Dynamic_MethodDefinition_swigregister = _Dynamic.Dynamic_MethodDefinition_swigregister
Dynamic_MethodDefinition_swigregister(Dynamic_MethodDefinition)

class Handle_Dynamic_MethodDefinition(Handle_Dynamic_Method):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_MethodDefinition_swiginit(self, _Dynamic.new_Handle_Dynamic_MethodDefinition(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_MethodDefinition_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_MethodDefinition.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinition_Nullify, None, Handle_Dynamic_MethodDefinition)
Handle_Dynamic_MethodDefinition.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinition_IsNull, None, Handle_Dynamic_MethodDefinition)
Handle_Dynamic_MethodDefinition.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinition_GetObject, None, Handle_Dynamic_MethodDefinition)
Handle_Dynamic_MethodDefinition._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_MethodDefinition__kill_pointed, None, Handle_Dynamic_MethodDefinition)
Handle_Dynamic_MethodDefinition_swigregister = _Dynamic.Handle_Dynamic_MethodDefinition_swigregister
Handle_Dynamic_MethodDefinition_swigregister(Handle_Dynamic_MethodDefinition)

def Handle_Dynamic_MethodDefinition_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_MethodDefinition_DownCast(AnObject)
Handle_Dynamic_MethodDefinition_DownCast = _Dynamic.Handle_Dynamic_MethodDefinition_DownCast

class Dynamic_ObjectParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an ObjectParameter with <aparameter> as name.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * With the name of the Parameter <aparameter> and the object <anobject>, creates an instance of ObjectParameter.

        :param aparameter:
        :type aparameter: char *
        :param anobject:
        :type anobject: Handle_Standard_Transient &
        :rtype: None

        """
        _Dynamic.Dynamic_ObjectParameter_swiginit(self, _Dynamic.new_Dynamic_ObjectParameter(*args))

    def Value(self, *args):
        """
        * Returns the value of the parameter which is an object.

        :rtype: Handle_Standard_Transient

        * Sets the object <anobject> in <self>.

        :param anobject:
        :type anobject: Handle_Standard_Transient &
        :rtype: None

        """
        return _Dynamic.Dynamic_ObjectParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_ObjectParameter self) -> std::string"""
        return _Dynamic.Dynamic_ObjectParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_ObjectParameter self)"""
        return _Dynamic.Dynamic_ObjectParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_ObjectParameter self) -> Handle_Dynamic_ObjectParameter"""
        return _Dynamic.Dynamic_ObjectParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_ObjectParameter.Value = new_instancemethod(_Dynamic.Dynamic_ObjectParameter_Value, None, Dynamic_ObjectParameter)
Dynamic_ObjectParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_ObjectParameter_DumpToString, None, Dynamic_ObjectParameter)
Dynamic_ObjectParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_ObjectParameter__kill_pointed, None, Dynamic_ObjectParameter)
Dynamic_ObjectParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_ObjectParameter_GetHandle, None, Dynamic_ObjectParameter)
Dynamic_ObjectParameter_swigregister = _Dynamic.Dynamic_ObjectParameter_swigregister
Dynamic_ObjectParameter_swigregister(Dynamic_ObjectParameter)

class Handle_Dynamic_ObjectParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_ObjectParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_ObjectParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_ObjectParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_ObjectParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_ObjectParameter_Nullify, None, Handle_Dynamic_ObjectParameter)
Handle_Dynamic_ObjectParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_ObjectParameter_IsNull, None, Handle_Dynamic_ObjectParameter)
Handle_Dynamic_ObjectParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_ObjectParameter_GetObject, None, Handle_Dynamic_ObjectParameter)
Handle_Dynamic_ObjectParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_ObjectParameter__kill_pointed, None, Handle_Dynamic_ObjectParameter)
Handle_Dynamic_ObjectParameter_swigregister = _Dynamic.Handle_Dynamic_ObjectParameter_swigregister
Handle_Dynamic_ObjectParameter_swigregister(Handle_Dynamic_ObjectParameter)

def Handle_Dynamic_ObjectParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_ObjectParameter_DownCast(AnObject)
Handle_Dynamic_ObjectParameter_DownCast = _Dynamic.Handle_Dynamic_ObjectParameter_DownCast

class Dynamic_RealParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a RealParameter with <aparameter> as name.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * With the name of the Parameter <aparameter> and the real <avalue>, creates an instance of RealParameter.

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float
        :rtype: None

        """
        _Dynamic.Dynamic_RealParameter_swiginit(self, _Dynamic.new_Dynamic_RealParameter(*args))

    def Value(self, *args):
        """
        * Returns the value of the parameter which is a real.

        :rtype: float

        * Sets the real <avalue> in <self>.

        :param avalue:
        :type avalue: float
        :rtype: None

        """
        return _Dynamic.Dynamic_RealParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_RealParameter self) -> std::string"""
        return _Dynamic.Dynamic_RealParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_RealParameter self)"""
        return _Dynamic.Dynamic_RealParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_RealParameter self) -> Handle_Dynamic_RealParameter"""
        return _Dynamic.Dynamic_RealParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_RealParameter.Value = new_instancemethod(_Dynamic.Dynamic_RealParameter_Value, None, Dynamic_RealParameter)
Dynamic_RealParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_RealParameter_DumpToString, None, Dynamic_RealParameter)
Dynamic_RealParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_RealParameter__kill_pointed, None, Dynamic_RealParameter)
Dynamic_RealParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_RealParameter_GetHandle, None, Dynamic_RealParameter)
Dynamic_RealParameter_swigregister = _Dynamic.Dynamic_RealParameter_swigregister
Dynamic_RealParameter_swigregister(Dynamic_RealParameter)

class Handle_Dynamic_RealParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_RealParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_RealParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_RealParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_RealParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_RealParameter_Nullify, None, Handle_Dynamic_RealParameter)
Handle_Dynamic_RealParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_RealParameter_IsNull, None, Handle_Dynamic_RealParameter)
Handle_Dynamic_RealParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_RealParameter_GetObject, None, Handle_Dynamic_RealParameter)
Handle_Dynamic_RealParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_RealParameter__kill_pointed, None, Handle_Dynamic_RealParameter)
Handle_Dynamic_RealParameter_swigregister = _Dynamic.Handle_Dynamic_RealParameter_swigregister
Handle_Dynamic_RealParameter_swigregister(Handle_Dynamic_RealParameter)

def Handle_Dynamic_RealParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_RealParameter_DownCast(AnObject)
Handle_Dynamic_RealParameter_DownCast = _Dynamic.Handle_Dynamic_RealParameter_DownCast

class Dynamic_StringParameter(Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a StringParameter with <aparameter> as name.

        :param aparameter:
        :type aparameter: char *
        :rtype: None

        * With the name of the Parameter <aparameter> and the string <astring>, creates an instance of StringParameter.

        :param aparameter:
        :type aparameter: char *
        :param astring:
        :type astring: char *
        :rtype: None

        """
        _Dynamic.Dynamic_StringParameter_swiginit(self, _Dynamic.new_Dynamic_StringParameter(*args))

    def Value(self, *args):
        """
        * Returns the value of the parameter which is an AsciiString.

        :rtype: TCollection_AsciiString

        * Sets the string <avalue> in <self>.

        :param avalue:
        :type avalue: char *
        :rtype: None

        """
        return _Dynamic.Dynamic_StringParameter_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_StringParameter self) -> std::string"""
        return _Dynamic.Dynamic_StringParameter_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_StringParameter self)"""
        return _Dynamic.Dynamic_StringParameter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_StringParameter self) -> Handle_Dynamic_StringParameter"""
        return _Dynamic.Dynamic_StringParameter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_StringParameter.Value = new_instancemethod(_Dynamic.Dynamic_StringParameter_Value, None, Dynamic_StringParameter)
Dynamic_StringParameter.DumpToString = new_instancemethod(_Dynamic.Dynamic_StringParameter_DumpToString, None, Dynamic_StringParameter)
Dynamic_StringParameter._kill_pointed = new_instancemethod(_Dynamic.Dynamic_StringParameter__kill_pointed, None, Dynamic_StringParameter)
Dynamic_StringParameter.GetHandle = new_instancemethod(_Dynamic.Dynamic_StringParameter_GetHandle, None, Dynamic_StringParameter)
Dynamic_StringParameter_swigregister = _Dynamic.Dynamic_StringParameter_swigregister
Dynamic_StringParameter_swigregister(Dynamic_StringParameter)

class Handle_Dynamic_StringParameter(Handle_Dynamic_Parameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_StringParameter_swiginit(self, _Dynamic.new_Handle_Dynamic_StringParameter(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_StringParameter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_StringParameter.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_StringParameter_Nullify, None, Handle_Dynamic_StringParameter)
Handle_Dynamic_StringParameter.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_StringParameter_IsNull, None, Handle_Dynamic_StringParameter)
Handle_Dynamic_StringParameter.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_StringParameter_GetObject, None, Handle_Dynamic_StringParameter)
Handle_Dynamic_StringParameter._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_StringParameter__kill_pointed, None, Handle_Dynamic_StringParameter)
Handle_Dynamic_StringParameter_swigregister = _Dynamic.Handle_Dynamic_StringParameter_swigregister
Handle_Dynamic_StringParameter_swigregister(Handle_Dynamic_StringParameter)

def Handle_Dynamic_StringParameter_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_StringParameter_DownCast(AnObject)
Handle_Dynamic_StringParameter_DownCast = _Dynamic.Handle_Dynamic_StringParameter_DownCast

class Dynamic_VariableGroup(Dynamic_Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates and Returns a new instance of this class.

        :rtype: None

        """
        _Dynamic.Dynamic_VariableGroup_swiginit(self, _Dynamic.new_Dynamic_VariableGroup(*args))

    def _kill_pointed(self):
        """_kill_pointed(Dynamic_VariableGroup self)"""
        return _Dynamic.Dynamic_VariableGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_VariableGroup self) -> Handle_Dynamic_VariableGroup"""
        return _Dynamic.Dynamic_VariableGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_VariableGroup._kill_pointed = new_instancemethod(_Dynamic.Dynamic_VariableGroup__kill_pointed, None, Dynamic_VariableGroup)
Dynamic_VariableGroup.GetHandle = new_instancemethod(_Dynamic.Dynamic_VariableGroup_GetHandle, None, Dynamic_VariableGroup)
Dynamic_VariableGroup_swigregister = _Dynamic.Dynamic_VariableGroup_swigregister
Dynamic_VariableGroup_swigregister(Dynamic_VariableGroup)

class Handle_Dynamic_VariableGroup(Handle_Dynamic_Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_VariableGroup_swiginit(self, _Dynamic.new_Handle_Dynamic_VariableGroup(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_VariableGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_VariableGroup.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_VariableGroup_Nullify, None, Handle_Dynamic_VariableGroup)
Handle_Dynamic_VariableGroup.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_VariableGroup_IsNull, None, Handle_Dynamic_VariableGroup)
Handle_Dynamic_VariableGroup.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_VariableGroup_GetObject, None, Handle_Dynamic_VariableGroup)
Handle_Dynamic_VariableGroup._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_VariableGroup__kill_pointed, None, Handle_Dynamic_VariableGroup)
Handle_Dynamic_VariableGroup_swigregister = _Dynamic.Handle_Dynamic_VariableGroup_swigregister
Handle_Dynamic_VariableGroup_swigregister(Handle_Dynamic_VariableGroup)

def Handle_Dynamic_VariableGroup_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_VariableGroup_DownCast(AnObject)
Handle_Dynamic_VariableGroup_DownCast = _Dynamic.Handle_Dynamic_VariableGroup_DownCast

class Dynamic_CompiledMethod(Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a compiled method with <aname> as user name and <afunction> as C++ mangled name.

        :param aname:
        :type aname: char *
        :param afunction:
        :type afunction: char *
        :rtype: None

        """
        _Dynamic.Dynamic_CompiledMethod_swiginit(self, _Dynamic.new_Dynamic_CompiledMethod(*args))

    def Function(self, *args):
        """
        * Sets the C++ mangled name of the method to the field <thefunction>.

        :param afunction:
        :type afunction: char *
        :rtype: None

        * Returns the C++ mangled name of the function.

        :rtype: TCollection_AsciiString

        """
        return _Dynamic.Dynamic_CompiledMethod_Function(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_CompiledMethod self)"""
        return _Dynamic.Dynamic_CompiledMethod__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_CompiledMethod self) -> Handle_Dynamic_CompiledMethod"""
        return _Dynamic.Dynamic_CompiledMethod_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_CompiledMethod.Function = new_instancemethod(_Dynamic.Dynamic_CompiledMethod_Function, None, Dynamic_CompiledMethod)
Dynamic_CompiledMethod._kill_pointed = new_instancemethod(_Dynamic.Dynamic_CompiledMethod__kill_pointed, None, Dynamic_CompiledMethod)
Dynamic_CompiledMethod.GetHandle = new_instancemethod(_Dynamic.Dynamic_CompiledMethod_GetHandle, None, Dynamic_CompiledMethod)
Dynamic_CompiledMethod_swigregister = _Dynamic.Dynamic_CompiledMethod_swigregister
Dynamic_CompiledMethod_swigregister(Dynamic_CompiledMethod)

class Handle_Dynamic_CompiledMethod(Handle_Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_CompiledMethod_swiginit(self, _Dynamic.new_Handle_Dynamic_CompiledMethod(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_CompiledMethod_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_CompiledMethod.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_CompiledMethod_Nullify, None, Handle_Dynamic_CompiledMethod)
Handle_Dynamic_CompiledMethod.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_CompiledMethod_IsNull, None, Handle_Dynamic_CompiledMethod)
Handle_Dynamic_CompiledMethod.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_CompiledMethod_GetObject, None, Handle_Dynamic_CompiledMethod)
Handle_Dynamic_CompiledMethod._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_CompiledMethod__kill_pointed, None, Handle_Dynamic_CompiledMethod)
Handle_Dynamic_CompiledMethod_swigregister = _Dynamic.Handle_Dynamic_CompiledMethod_swigregister
Handle_Dynamic_CompiledMethod_swigregister(Handle_Dynamic_CompiledMethod)

def Handle_Dynamic_CompiledMethod_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_CompiledMethod_DownCast(AnObject)
Handle_Dynamic_CompiledMethod_DownCast = _Dynamic.Handle_Dynamic_CompiledMethod_DownCast

class Dynamic_CompositMethod(Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a composit method with <aname> as name.

        :param aname:
        :type aname: char *
        :rtype: None

        """
        _Dynamic.Dynamic_CompositMethod_swiginit(self, _Dynamic.new_Dynamic_CompositMethod(*args))

    def NumberOfMethods(self, *args):
        """
        * Returns the number of methods referenced by the composit method <self>.

        :rtype: int

        """
        return _Dynamic.Dynamic_CompositMethod_NumberOfMethods(self, *args)


    def Method(self, *args):
        """
        * Adds <amethod>, which is an elementary or a composit method to <self>.

        :param amethod:
        :type amethod: Handle_Dynamic_Method &
        :rtype: None

        * Returns the method of range <anindex>.

        :param anindex:
        :type anindex: int
        :rtype: Handle_Dynamic_Method

        """
        return _Dynamic.Dynamic_CompositMethod_Method(self, *args)


    def DumpToString(self):
        """DumpToString(Dynamic_CompositMethod self) -> std::string"""
        return _Dynamic.Dynamic_CompositMethod_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_CompositMethod self)"""
        return _Dynamic.Dynamic_CompositMethod__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_CompositMethod self) -> Handle_Dynamic_CompositMethod"""
        return _Dynamic.Dynamic_CompositMethod_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_CompositMethod.NumberOfMethods = new_instancemethod(_Dynamic.Dynamic_CompositMethod_NumberOfMethods, None, Dynamic_CompositMethod)
Dynamic_CompositMethod.Method = new_instancemethod(_Dynamic.Dynamic_CompositMethod_Method, None, Dynamic_CompositMethod)
Dynamic_CompositMethod.DumpToString = new_instancemethod(_Dynamic.Dynamic_CompositMethod_DumpToString, None, Dynamic_CompositMethod)
Dynamic_CompositMethod._kill_pointed = new_instancemethod(_Dynamic.Dynamic_CompositMethod__kill_pointed, None, Dynamic_CompositMethod)
Dynamic_CompositMethod.GetHandle = new_instancemethod(_Dynamic.Dynamic_CompositMethod_GetHandle, None, Dynamic_CompositMethod)
Dynamic_CompositMethod_swigregister = _Dynamic.Dynamic_CompositMethod_swigregister
Dynamic_CompositMethod_swigregister(Dynamic_CompositMethod)

class Handle_Dynamic_CompositMethod(Handle_Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_CompositMethod_swiginit(self, _Dynamic.new_Handle_Dynamic_CompositMethod(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_CompositMethod_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_CompositMethod.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_CompositMethod_Nullify, None, Handle_Dynamic_CompositMethod)
Handle_Dynamic_CompositMethod.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_CompositMethod_IsNull, None, Handle_Dynamic_CompositMethod)
Handle_Dynamic_CompositMethod.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_CompositMethod_GetObject, None, Handle_Dynamic_CompositMethod)
Handle_Dynamic_CompositMethod._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_CompositMethod__kill_pointed, None, Handle_Dynamic_CompositMethod)
Handle_Dynamic_CompositMethod_swigregister = _Dynamic.Handle_Dynamic_CompositMethod_swigregister
Handle_Dynamic_CompositMethod_swigregister(Handle_Dynamic_CompositMethod)

def Handle_Dynamic_CompositMethod_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_CompositMethod_DownCast(AnObject)
Handle_Dynamic_CompositMethod_DownCast = _Dynamic.Handle_Dynamic_CompositMethod_DownCast

class Dynamic_CompositVariableInstance(Dynamic_AbstractVariableInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a new empty instance of CompositVariable- Instance.

        :rtype: None

        """
        _Dynamic.Dynamic_CompositVariableInstance_swiginit(self, _Dynamic.new_Dynamic_CompositVariableInstance(*args))

    def FirstVariableNode(self, *args):
        """
        * Returns the first VariableNode useful to explore the list of variables addressed by <self>.

        :rtype: Handle_Dynamic_VariableNode

        """
        return _Dynamic.Dynamic_CompositVariableInstance_FirstVariableNode(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_CompositVariableInstance self)"""
        return _Dynamic.Dynamic_CompositVariableInstance__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_CompositVariableInstance self) -> Handle_Dynamic_CompositVariableInstance"""
        return _Dynamic.Dynamic_CompositVariableInstance_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_CompositVariableInstance.FirstVariableNode = new_instancemethod(_Dynamic.Dynamic_CompositVariableInstance_FirstVariableNode, None, Dynamic_CompositVariableInstance)
Dynamic_CompositVariableInstance._kill_pointed = new_instancemethod(_Dynamic.Dynamic_CompositVariableInstance__kill_pointed, None, Dynamic_CompositVariableInstance)
Dynamic_CompositVariableInstance.GetHandle = new_instancemethod(_Dynamic.Dynamic_CompositVariableInstance_GetHandle, None, Dynamic_CompositVariableInstance)
Dynamic_CompositVariableInstance_swigregister = _Dynamic.Dynamic_CompositVariableInstance_swigregister
Dynamic_CompositVariableInstance_swigregister(Dynamic_CompositVariableInstance)

class Handle_Dynamic_CompositVariableInstance(Handle_Dynamic_AbstractVariableInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_CompositVariableInstance_swiginit(self, _Dynamic.new_Handle_Dynamic_CompositVariableInstance(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_CompositVariableInstance_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_CompositVariableInstance.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_CompositVariableInstance_Nullify, None, Handle_Dynamic_CompositVariableInstance)
Handle_Dynamic_CompositVariableInstance.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_CompositVariableInstance_IsNull, None, Handle_Dynamic_CompositVariableInstance)
Handle_Dynamic_CompositVariableInstance.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_CompositVariableInstance_GetObject, None, Handle_Dynamic_CompositVariableInstance)
Handle_Dynamic_CompositVariableInstance._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_CompositVariableInstance__kill_pointed, None, Handle_Dynamic_CompositVariableInstance)
Handle_Dynamic_CompositVariableInstance_swigregister = _Dynamic.Handle_Dynamic_CompositVariableInstance_swigregister
Handle_Dynamic_CompositVariableInstance_swigregister(Handle_Dynamic_CompositVariableInstance)

def Handle_Dynamic_CompositVariableInstance_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_CompositVariableInstance_DownCast(AnObject)
Handle_Dynamic_CompositVariableInstance_DownCast = _Dynamic.Handle_Dynamic_CompositVariableInstance_DownCast

class Dynamic_InterpretedMethod(Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a new InterpretedMethod with <aname> as name and <afile> as file name to be interpreted.

        :param aname:
        :type aname: char *
        :param afile:
        :type afile: char *
        :rtype: None

        """
        _Dynamic.Dynamic_InterpretedMethod_swiginit(self, _Dynamic.new_Dynamic_InterpretedMethod(*args))

    def Function(self, *args):
        """
        * Sets the the name of the file to be interpreted to <afile>.

        :param afile:
        :type afile: char *
        :rtype: None

        * Returns the name of the file to be interpreted.

        :rtype: TCollection_AsciiString

        """
        return _Dynamic.Dynamic_InterpretedMethod_Function(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_InterpretedMethod self)"""
        return _Dynamic.Dynamic_InterpretedMethod__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_InterpretedMethod self) -> Handle_Dynamic_InterpretedMethod"""
        return _Dynamic.Dynamic_InterpretedMethod_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_InterpretedMethod.Function = new_instancemethod(_Dynamic.Dynamic_InterpretedMethod_Function, None, Dynamic_InterpretedMethod)
Dynamic_InterpretedMethod._kill_pointed = new_instancemethod(_Dynamic.Dynamic_InterpretedMethod__kill_pointed, None, Dynamic_InterpretedMethod)
Dynamic_InterpretedMethod.GetHandle = new_instancemethod(_Dynamic.Dynamic_InterpretedMethod_GetHandle, None, Dynamic_InterpretedMethod)
Dynamic_InterpretedMethod_swigregister = _Dynamic.Dynamic_InterpretedMethod_swigregister
Dynamic_InterpretedMethod_swigregister(Dynamic_InterpretedMethod)

class Handle_Dynamic_InterpretedMethod(Handle_Dynamic_MethodDefinition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_InterpretedMethod_swiginit(self, _Dynamic.new_Handle_Dynamic_InterpretedMethod(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_InterpretedMethod_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_InterpretedMethod.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_InterpretedMethod_Nullify, None, Handle_Dynamic_InterpretedMethod)
Handle_Dynamic_InterpretedMethod.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_InterpretedMethod_IsNull, None, Handle_Dynamic_InterpretedMethod)
Handle_Dynamic_InterpretedMethod.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_InterpretedMethod_GetObject, None, Handle_Dynamic_InterpretedMethod)
Handle_Dynamic_InterpretedMethod._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_InterpretedMethod__kill_pointed, None, Handle_Dynamic_InterpretedMethod)
Handle_Dynamic_InterpretedMethod_swigregister = _Dynamic.Handle_Dynamic_InterpretedMethod_swigregister
Handle_Dynamic_InterpretedMethod_swigregister(Handle_Dynamic_InterpretedMethod)

def Handle_Dynamic_InterpretedMethod_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_InterpretedMethod_DownCast(AnObject)
Handle_Dynamic_InterpretedMethod_DownCast = _Dynamic.Handle_Dynamic_InterpretedMethod_DownCast

class Dynamic_VariableInstance(Dynamic_AbstractVariableInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a new empty instance of this class.

        :rtype: None

        """
        _Dynamic.Dynamic_VariableInstance_swiginit(self, _Dynamic.new_Dynamic_VariableInstance(*args))

    def Variable(self, *args):
        """
        * Sets the variable <avariable> into the VariableInstance <self>.

        :param avariable:
        :type avariable: Handle_Dynamic_Variable &
        :rtype: void

        * Returns the variable contained into the VariableInstance <self>.

        :rtype: Handle_Dynamic_Variable

        """
        return _Dynamic.Dynamic_VariableInstance_Variable(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Dynamic_VariableInstance self)"""
        return _Dynamic.Dynamic_VariableInstance__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Dynamic_VariableInstance self) -> Handle_Dynamic_VariableInstance"""
        return _Dynamic.Dynamic_VariableInstance_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Dynamic_VariableInstance.Variable = new_instancemethod(_Dynamic.Dynamic_VariableInstance_Variable, None, Dynamic_VariableInstance)
Dynamic_VariableInstance._kill_pointed = new_instancemethod(_Dynamic.Dynamic_VariableInstance__kill_pointed, None, Dynamic_VariableInstance)
Dynamic_VariableInstance.GetHandle = new_instancemethod(_Dynamic.Dynamic_VariableInstance_GetHandle, None, Dynamic_VariableInstance)
Dynamic_VariableInstance_swigregister = _Dynamic.Dynamic_VariableInstance_swigregister
Dynamic_VariableInstance_swigregister(Dynamic_VariableInstance)

class Handle_Dynamic_VariableInstance(Handle_Dynamic_AbstractVariableInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dynamic.Handle_Dynamic_VariableInstance_swiginit(self, _Dynamic.new_Handle_Dynamic_VariableInstance(*args))
    DownCast = staticmethod(_Dynamic.Handle_Dynamic_VariableInstance_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Dynamic_VariableInstance.Nullify = new_instancemethod(_Dynamic.Handle_Dynamic_VariableInstance_Nullify, None, Handle_Dynamic_VariableInstance)
Handle_Dynamic_VariableInstance.IsNull = new_instancemethod(_Dynamic.Handle_Dynamic_VariableInstance_IsNull, None, Handle_Dynamic_VariableInstance)
Handle_Dynamic_VariableInstance.GetObject = new_instancemethod(_Dynamic.Handle_Dynamic_VariableInstance_GetObject, None, Handle_Dynamic_VariableInstance)
Handle_Dynamic_VariableInstance._kill_pointed = new_instancemethod(_Dynamic.Handle_Dynamic_VariableInstance__kill_pointed, None, Handle_Dynamic_VariableInstance)
Handle_Dynamic_VariableInstance_swigregister = _Dynamic.Handle_Dynamic_VariableInstance_swigregister
Handle_Dynamic_VariableInstance_swigregister(Handle_Dynamic_VariableInstance)

def Handle_Dynamic_VariableInstance_DownCast(AnObject):
    return _Dynamic.Handle_Dynamic_VariableInstance_DownCast(AnObject)
Handle_Dynamic_VariableInstance_DownCast = _Dynamic.Handle_Dynamic_VariableInstance_DownCast



