# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Adaptor3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Adaptor3d', [dirname(__file__)])
        except ImportError:
            import _Adaptor3d
            return _Adaptor3d
        if fp is not None:
            try:
                _mod = imp.load_module('_Adaptor3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Adaptor3d = swig_import_helper()
    del swig_import_helper
else:
    import _Adaptor3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Adaptor3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Adaptor3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Adaptor3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Adaptor3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Adaptor3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Adaptor3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Adaptor3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Adaptor3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Adaptor3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Adaptor3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Adaptor3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Adaptor3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Adaptor3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Adaptor3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Adaptor3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Adaptor3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Adaptor3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Adaptor3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
class Adaptor3d_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_Delete(self, *args)


    def FirstParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Curve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Curve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Curve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.  The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_Intervals(self, *args)


    def Trim(self, *args):
        """
        * Returns a curve equivalent of <self> between parameters <First> and <Last>. <Tol> is used to test for 3d points confusion. If <First> >= <Last>

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Curve_Period(self, *args)


    def Value(self, *args):
        """
        * Computes the point of parameter U on the curve.

        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Curve_Value(self, *args)


    def D0(self, *args):
        """
        * Computes the point of parameter U on the curve.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_D0(self, *args)


    def D1(self, *args):
        """
        * Computes the point of parameter U on the curve with its first derivative. Raised if the continuity of the current interval is not C1.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_D1(self, *args)


    def D2(self, *args):
        """
        * Returns the point P of parameter U, the first and second derivatives V1 and V2. Raised if the continuity of the current interval is not C2.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_D2(self, *args)


    def D3(self, *args):
        """
        * Returns the point P of parameter U, the first, the second and the third derivative. Raised if the continuity of the current interval is not C3.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Curve_D3(self, *args)


    def DN(self, *args):
        """
        * The returned vector gives the value of the derivative for the order of derivation N. Raised if the continuity of the current interval is not CN. Raised if N < 1.

        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_DN(self, *args)


    def Resolution(self, *args):
        """
        * Returns the parametric resolution corresponding  to the real space resolution <R3d>.

        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Curve_Resolution(self, *args)


    def GetType(self, *args):
        """
        * Returns the type of the curve in the current interval : Line, Circle, Ellipse, Hyperbola, Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_Curve_GetType(self, *args)


    def Line(self, *args):
        """
        :rtype: gp_Lin

        """
        return _Adaptor3d.Adaptor3d_Curve_Line(self, *args)


    def Circle(self, *args):
        """
        :rtype: gp_Circ

        """
        return _Adaptor3d.Adaptor3d_Curve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        :rtype: gp_Elips

        """
        return _Adaptor3d.Adaptor3d_Curve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        :rtype: gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_Curve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        :rtype: gp_Parab

        """
        return _Adaptor3d.Adaptor3d_Curve_Parabola(self, *args)


    def Degree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Curve_Degree(self, *args)


    def IsRational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        :rtype: Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        :rtype: Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_Curve_BSpline(self, *args)


    def __init__(self):
        _Adaptor3d.Adaptor3d_Curve_swiginit(self, _Adaptor3d.new_Adaptor3d_Curve())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_Curve.Delete = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Delete, None, Adaptor3d_Curve)
Adaptor3d_Curve.FirstParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_FirstParameter, None, Adaptor3d_Curve)
Adaptor3d_Curve.LastParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_LastParameter, None, Adaptor3d_Curve)
Adaptor3d_Curve.Continuity = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Continuity, None, Adaptor3d_Curve)
Adaptor3d_Curve.NbIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_NbIntervals, None, Adaptor3d_Curve)
Adaptor3d_Curve.Intervals = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Intervals, None, Adaptor3d_Curve)
Adaptor3d_Curve.Trim = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Trim, None, Adaptor3d_Curve)
Adaptor3d_Curve.IsClosed = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_IsClosed, None, Adaptor3d_Curve)
Adaptor3d_Curve.IsPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_IsPeriodic, None, Adaptor3d_Curve)
Adaptor3d_Curve.Period = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Period, None, Adaptor3d_Curve)
Adaptor3d_Curve.Value = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Value, None, Adaptor3d_Curve)
Adaptor3d_Curve.D0 = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_D0, None, Adaptor3d_Curve)
Adaptor3d_Curve.D1 = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_D1, None, Adaptor3d_Curve)
Adaptor3d_Curve.D2 = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_D2, None, Adaptor3d_Curve)
Adaptor3d_Curve.D3 = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_D3, None, Adaptor3d_Curve)
Adaptor3d_Curve.DN = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_DN, None, Adaptor3d_Curve)
Adaptor3d_Curve.Resolution = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Resolution, None, Adaptor3d_Curve)
Adaptor3d_Curve.GetType = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_GetType, None, Adaptor3d_Curve)
Adaptor3d_Curve.Line = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Line, None, Adaptor3d_Curve)
Adaptor3d_Curve.Circle = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Circle, None, Adaptor3d_Curve)
Adaptor3d_Curve.Ellipse = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Ellipse, None, Adaptor3d_Curve)
Adaptor3d_Curve.Hyperbola = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Hyperbola, None, Adaptor3d_Curve)
Adaptor3d_Curve.Parabola = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Parabola, None, Adaptor3d_Curve)
Adaptor3d_Curve.Degree = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Degree, None, Adaptor3d_Curve)
Adaptor3d_Curve.IsRational = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_IsRational, None, Adaptor3d_Curve)
Adaptor3d_Curve.NbPoles = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_NbPoles, None, Adaptor3d_Curve)
Adaptor3d_Curve.NbKnots = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_NbKnots, None, Adaptor3d_Curve)
Adaptor3d_Curve.Bezier = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_Bezier, None, Adaptor3d_Curve)
Adaptor3d_Curve.BSpline = new_instancemethod(_Adaptor3d.Adaptor3d_Curve_BSpline, None, Adaptor3d_Curve)
Adaptor3d_Curve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_Curve__kill_pointed, None, Adaptor3d_Curve)
Adaptor3d_Curve_swigregister = _Adaptor3d.Adaptor3d_Curve_swigregister
Adaptor3d_Curve_swigregister(Adaptor3d_Curve)

class Adaptor3d_HCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Curve(self, *args):
        """
        * Returns a pointer to the Curve inside the HCurve.

        :rtype: Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Curve(self, *args)


    def GetCurve(self, *args):
        """
        * Returns a pointer to the Curve inside the HCurve.

        :rtype: Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetCurve(self, *args)


    def FirstParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.  The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        * Returns a curve equivalent of <self> between parameters <First> and <Last>. <Tol> is used to test for 3d points confusion. If <First> >= <Last>

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        :rtype: GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        :rtype: gp_Lin

        """
        return _Adaptor3d.Adaptor3d_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        :rtype: gp_Circ

        """
        return _Adaptor3d.Adaptor3d_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        :rtype: gp_Elips

        """
        return _Adaptor3d.Adaptor3d_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        :rtype: gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        :rtype: gp_Parab

        """
        return _Adaptor3d.Adaptor3d_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        :rtype: Handle_Geom_BezierCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        :rtype: Handle_Geom_BSplineCurve

        """
        return _Adaptor3d.Adaptor3d_HCurve_BSpline(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HCurve self)"""
        return _Adaptor3d.Adaptor3d_HCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HCurve self) -> Handle_Adaptor3d_HCurve"""
        return _Adaptor3d.Adaptor3d_HCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HCurve.Curve = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Curve, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.GetCurve = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_GetCurve, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.FirstParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_FirstParameter, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.LastParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_LastParameter, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Continuity = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Continuity, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.NbIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_NbIntervals, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Intervals = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Intervals, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Trim = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Trim, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.IsClosed = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_IsClosed, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.IsPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_IsPeriodic, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Period = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Period, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Value = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Value, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.D0 = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_D0, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.D1 = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_D1, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.D2 = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_D2, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.D3 = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_D3, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.DN = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_DN, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Resolution = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Resolution, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.GetType = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_GetType, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Line = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Line, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Circle = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Circle, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Ellipse = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Ellipse, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Hyperbola = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Hyperbola, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Parabola = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Parabola, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Degree = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Degree, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.IsRational = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_IsRational, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.NbPoles = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_NbPoles, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.NbKnots = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_NbKnots, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.Bezier = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_Bezier, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.BSpline = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_BSpline, None, Adaptor3d_HCurve)
Adaptor3d_HCurve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve__kill_pointed, None, Adaptor3d_HCurve)
Adaptor3d_HCurve.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HCurve_GetHandle, None, Adaptor3d_HCurve)
Adaptor3d_HCurve_swigregister = _Adaptor3d.Adaptor3d_HCurve_swigregister
Adaptor3d_HCurve_swigregister(Adaptor3d_HCurve)

class Handle_Adaptor3d_HCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HCurve_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HCurve(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HCurve.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurve_Nullify, None, Handle_Adaptor3d_HCurve)
Handle_Adaptor3d_HCurve.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurve_IsNull, None, Handle_Adaptor3d_HCurve)
Handle_Adaptor3d_HCurve.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurve_GetObject, None, Handle_Adaptor3d_HCurve)
Handle_Adaptor3d_HCurve._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurve__kill_pointed, None, Handle_Adaptor3d_HCurve)
Handle_Adaptor3d_HCurve_swigregister = _Adaptor3d.Handle_Adaptor3d_HCurve_swigregister
Handle_Adaptor3d_HCurve_swigregister(Handle_Adaptor3d_HCurve)

def Handle_Adaptor3d_HCurve_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast(AnObject)
Handle_Adaptor3d_HCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast

class Adaptor3d_HOffsetCurve(OCC.Adaptor2d.Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HOffsetCurve_swiginit(self, _Adaptor3d.new_Adaptor3d_HOffsetCurve(*args))

    def Set(self, *args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HOffsetCurve_Set(self, *args)


    def ChangeCurve2d(self, *args):
        """
        :rtype: Adaptor3d_OffsetCurve

        """
        return _Adaptor3d.Adaptor3d_HOffsetCurve_ChangeCurve2d(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HOffsetCurve self)"""
        return _Adaptor3d.Adaptor3d_HOffsetCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HOffsetCurve self) -> Handle_Adaptor3d_HOffsetCurve"""
        return _Adaptor3d.Adaptor3d_HOffsetCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HOffsetCurve.Set = new_instancemethod(_Adaptor3d.Adaptor3d_HOffsetCurve_Set, None, Adaptor3d_HOffsetCurve)
Adaptor3d_HOffsetCurve.ChangeCurve2d = new_instancemethod(_Adaptor3d.Adaptor3d_HOffsetCurve_ChangeCurve2d, None, Adaptor3d_HOffsetCurve)
Adaptor3d_HOffsetCurve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HOffsetCurve__kill_pointed, None, Adaptor3d_HOffsetCurve)
Adaptor3d_HOffsetCurve.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HOffsetCurve_GetHandle, None, Adaptor3d_HOffsetCurve)
Adaptor3d_HOffsetCurve_swigregister = _Adaptor3d.Adaptor3d_HOffsetCurve_swigregister
Adaptor3d_HOffsetCurve_swigregister(Adaptor3d_HOffsetCurve)

class Handle_Adaptor3d_HOffsetCurve(OCC.Adaptor2d.Handle_Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HOffsetCurve_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HOffsetCurve(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HOffsetCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HOffsetCurve.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HOffsetCurve_Nullify, None, Handle_Adaptor3d_HOffsetCurve)
Handle_Adaptor3d_HOffsetCurve.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HOffsetCurve_IsNull, None, Handle_Adaptor3d_HOffsetCurve)
Handle_Adaptor3d_HOffsetCurve.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HOffsetCurve_GetObject, None, Handle_Adaptor3d_HOffsetCurve)
Handle_Adaptor3d_HOffsetCurve._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HOffsetCurve__kill_pointed, None, Handle_Adaptor3d_HOffsetCurve)
Handle_Adaptor3d_HOffsetCurve_swigregister = _Adaptor3d.Handle_Adaptor3d_HOffsetCurve_swigregister
Handle_Adaptor3d_HOffsetCurve_swigregister(Handle_Adaptor3d_HOffsetCurve)

def Handle_Adaptor3d_HOffsetCurve_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HOffsetCurve_DownCast(AnObject)
Handle_Adaptor3d_HOffsetCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HOffsetCurve_DownCast

class Adaptor3d_HSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Surface(self, *args):
        """
        * Returns a reference to the Surface inside the HSurface.

        :rtype: Adaptor3d_Surface

        """
        return _Adaptor3d.Adaptor3d_HSurface_Surface(self, *args)


    def FirstUParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurface_Value(self, *args)


    def D0(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D0(self, *args)


    def D1(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D1(self, *args)


    def D2(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D2(self, *args)


    def D3(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D3(self, *args)


    def DN(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        :rtype: GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        :rtype: gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        :rtype: gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        :rtype: gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        :rtype: gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        :rtype: gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        :rtype: Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        :rtype: gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurface_OffsetValue(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HSurface self)"""
        return _Adaptor3d.Adaptor3d_HSurface__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HSurface self) -> Handle_Adaptor3d_HSurface"""
        return _Adaptor3d.Adaptor3d_HSurface_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HSurface.Surface = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Surface, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.FirstUParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_FirstUParameter, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.LastUParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_LastUParameter, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.FirstVParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_FirstVParameter, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.LastVParameter = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_LastVParameter, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UContinuity = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UContinuity, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VContinuity = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VContinuity, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbUIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbUIntervals, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbVIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbVIntervals, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UIntervals, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VIntervals, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UTrim = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UTrim, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VTrim = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VTrim, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsUClosed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsUClosed, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsVClosed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsVClosed, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsUPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsUPeriodic, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UPeriod = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UPeriod, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsVPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsVPeriodic, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VPeriod = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VPeriod, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Value = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Value, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.D0 = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_D0, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.D1 = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_D1, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.D2 = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_D2, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.D3 = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_D3, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.DN = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_DN, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UResolution = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UResolution, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VResolution = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VResolution, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.GetType = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_GetType, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Plane = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Plane, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Cylinder = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Cylinder, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Cone = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Cone, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Sphere = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Sphere, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Torus = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Torus, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.UDegree = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_UDegree, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbUPoles = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbUPoles, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.VDegree = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_VDegree, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbVPoles = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbVPoles, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbUKnots = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbUKnots, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.NbVKnots = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_NbVKnots, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsURational = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsURational, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.IsVRational = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_IsVRational, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Bezier = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Bezier, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.BSpline = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_BSpline, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.AxeOfRevolution = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_AxeOfRevolution, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.Direction = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_Direction, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.BasisCurve = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_BasisCurve, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.BasisSurface = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_BasisSurface, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.OffsetValue = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_OffsetValue, None, Adaptor3d_HSurface)
Adaptor3d_HSurface._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface__kill_pointed, None, Adaptor3d_HSurface)
Adaptor3d_HSurface.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HSurface_GetHandle, None, Adaptor3d_HSurface)
Adaptor3d_HSurface_swigregister = _Adaptor3d.Adaptor3d_HSurface_swigregister
Adaptor3d_HSurface_swigregister(Adaptor3d_HSurface)

class Handle_Adaptor3d_HSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HSurface_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HSurface(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HSurface_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HSurface.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurface_Nullify, None, Handle_Adaptor3d_HSurface)
Handle_Adaptor3d_HSurface.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurface_IsNull, None, Handle_Adaptor3d_HSurface)
Handle_Adaptor3d_HSurface.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurface_GetObject, None, Handle_Adaptor3d_HSurface)
Handle_Adaptor3d_HSurface._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurface__kill_pointed, None, Handle_Adaptor3d_HSurface)
Handle_Adaptor3d_HSurface_swigregister = _Adaptor3d.Handle_Adaptor3d_HSurface_swigregister
Handle_Adaptor3d_HSurface_swigregister(Handle_Adaptor3d_HSurface)

def Handle_Adaptor3d_HSurface_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast(AnObject)
Handle_Adaptor3d_HSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast

class Adaptor3d_HSurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstUParameter(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

    FirstUParameter = staticmethod(FirstUParameter)

    def FirstVParameter(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

    FirstVParameter = staticmethod(FirstVParameter)

    def LastUParameter(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

    LastUParameter = staticmethod(LastUParameter)

    def LastVParameter(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

    LastVParameter = staticmethod(LastVParameter)

    def NbUIntervals(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

    NbUIntervals = staticmethod(NbUIntervals)

    def NbVIntervals(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

    NbVIntervals = staticmethod(NbVIntervals)

    def UIntervals(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

    UIntervals = staticmethod(UIntervals)

    def VIntervals(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

    VIntervals = staticmethod(VIntervals)

    def UTrim(*args):
        """
        * If <First> >= <Last>

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

    UTrim = staticmethod(UTrim)

    def VTrim(*args):
        """
        * If <First> >= <Last>

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

    VTrim = staticmethod(VTrim)

    def IsUClosed(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

    IsUClosed = staticmethod(IsUClosed)

    def IsVClosed(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

    IsVClosed = staticmethod(IsVClosed)

    def IsUPeriodic(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

    IsUPeriodic = staticmethod(IsUPeriodic)

    def UPeriod(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

    UPeriod = staticmethod(UPeriod)

    def IsVPeriodic(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

    IsVPeriodic = staticmethod(IsVPeriodic)

    def VPeriod(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

    VPeriod = staticmethod(VPeriod)

    def Value(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1u:
        :type D1u: gp_Vec
        :param D1v:
        :type D1v: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def UResolution(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

    UResolution = staticmethod(UResolution)

    def VResolution(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

    VResolution = staticmethod(VResolution)

    def GetType(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Plane(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

    Plane = staticmethod(Plane)

    def Cylinder(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def Cone(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

    Cone = staticmethod(Cone)

    def Torus(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

    Torus = staticmethod(Torus)

    def Sphere(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

    Sphere = staticmethod(Sphere)

    def Bezier(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def AxeOfRevolution(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

    AxeOfRevolution = staticmethod(AxeOfRevolution)

    def Direction(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

    Direction = staticmethod(Direction)

    def BasisCurve(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

    BasisCurve = staticmethod(BasisCurve)

    def BasisSurface(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

    BasisSurface = staticmethod(BasisSurface)

    def OffsetValue(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

    OffsetValue = staticmethod(OffsetValue)

    def NbSamplesU(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: int

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: int

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param v1:
        :type v1: float
        :param v2:
        :type v2: float
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def __init__(self):
        _Adaptor3d.Adaptor3d_HSurfaceTool_swiginit(self, _Adaptor3d.new_Adaptor3d_HSurfaceTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HSurfaceTool._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceTool__kill_pointed, None, Adaptor3d_HSurfaceTool)
Adaptor3d_HSurfaceTool_swigregister = _Adaptor3d.Adaptor3d_HSurfaceTool_swigregister
Adaptor3d_HSurfaceTool_swigregister(Adaptor3d_HSurfaceTool)

def Adaptor3d_HSurfaceTool_FirstUParameter(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

def Adaptor3d_HSurfaceTool_FirstVParameter(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

def Adaptor3d_HSurfaceTool_LastUParameter(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

def Adaptor3d_HSurfaceTool_LastVParameter(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

def Adaptor3d_HSurfaceTool_NbUIntervals(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

def Adaptor3d_HSurfaceTool_NbVIntervals(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

def Adaptor3d_HSurfaceTool_UIntervals(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

def Adaptor3d_HSurfaceTool_VIntervals(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

def Adaptor3d_HSurfaceTool_UTrim(*args):
    """
    * If <First> >= <Last>

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param Tol:
    :type Tol: float
    :rtype: Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

def Adaptor3d_HSurfaceTool_VTrim(*args):
    """
    * If <First> >= <Last>

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param Tol:
    :type Tol: float
    :rtype: Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

def Adaptor3d_HSurfaceTool_IsUClosed(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

def Adaptor3d_HSurfaceTool_IsVClosed(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

def Adaptor3d_HSurfaceTool_IsUPeriodic(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

def Adaptor3d_HSurfaceTool_UPeriod(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

def Adaptor3d_HSurfaceTool_IsVPeriodic(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

def Adaptor3d_HSurfaceTool_VPeriod(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

def Adaptor3d_HSurfaceTool_Value(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :rtype: gp_Pnt

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

def Adaptor3d_HSurfaceTool_D0(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

def Adaptor3d_HSurfaceTool_D1(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1u:
    :type D1u: gp_Vec
    :param D1v:
    :type D1v: gp_Vec
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

def Adaptor3d_HSurfaceTool_D2(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :param D2U:
    :type D2U: gp_Vec
    :param D2V:
    :type D2V: gp_Vec
    :param D2UV:
    :type D2UV: gp_Vec
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

def Adaptor3d_HSurfaceTool_D3(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :param D2U:
    :type D2U: gp_Vec
    :param D2V:
    :type D2V: gp_Vec
    :param D2UV:
    :type D2UV: gp_Vec
    :param D3U:
    :type D3U: gp_Vec
    :param D3V:
    :type D3V: gp_Vec
    :param D3UUV:
    :type D3UUV: gp_Vec
    :param D3UVV:
    :type D3UVV: gp_Vec
    :rtype: void

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

def Adaptor3d_HSurfaceTool_DN(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param Nu:
    :type Nu: int
    :param Nv:
    :type Nv: int
    :rtype: gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

def Adaptor3d_HSurfaceTool_UResolution(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

def Adaptor3d_HSurfaceTool_VResolution(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

def Adaptor3d_HSurfaceTool_GetType(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: GeomAbs_SurfaceType

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

def Adaptor3d_HSurfaceTool_Plane(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Pln

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

def Adaptor3d_HSurfaceTool_Cylinder(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Cylinder

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

def Adaptor3d_HSurfaceTool_Cone(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Cone

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

def Adaptor3d_HSurfaceTool_Torus(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Torus

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

def Adaptor3d_HSurfaceTool_Sphere(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Sphere

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

def Adaptor3d_HSurfaceTool_Bezier(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: Handle_Geom_BezierSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

def Adaptor3d_HSurfaceTool_BSpline(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: Handle_Geom_BSplineSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

def Adaptor3d_HSurfaceTool_AxeOfRevolution(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Ax1

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

def Adaptor3d_HSurfaceTool_Direction(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: gp_Dir

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

def Adaptor3d_HSurfaceTool_BasisCurve(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: Handle_Adaptor3d_HCurve

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

def Adaptor3d_HSurfaceTool_BasisSurface(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: Handle_Adaptor3d_HSurface

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

def Adaptor3d_HSurfaceTool_OffsetValue(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

def Adaptor3d_HSurfaceTool_NbSamplesU(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: int

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u1:
    :type u1: float
    :param u2:
    :type u2: float
    :rtype: int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

def Adaptor3d_HSurfaceTool_NbSamplesV(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: int

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param v1:
    :type v1: float
    :param v2:
    :type v2: float
    :rtype: int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)

class Adaptor3d_HVertex(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pnt2d
        :param Ori:
        :type Ori: TopAbs_Orientation
        :param Resolution:
        :type Resolution: float
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HVertex_swiginit(self, _Adaptor3d.new_Adaptor3d_HVertex(*args))

    def Value(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _Adaptor3d.Adaptor3d_HVertex_Value(self, *args)


    def Parameter(self, *args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HVertex_Parameter(self, *args)


    def Resolution(self, *args):
        """
        * Parametric resolution (2d).

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_HVertex_Resolution(self, *args)


    def Orientation(self, *args):
        """
        :rtype: TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_HVertex_Orientation(self, *args)


    def IsSame(self, *args):
        """
        :param Other:
        :type Other: Handle_Adaptor3d_HVertex &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_HVertex_IsSame(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HVertex self)"""
        return _Adaptor3d.Adaptor3d_HVertex__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HVertex self) -> Handle_Adaptor3d_HVertex"""
        return _Adaptor3d.Adaptor3d_HVertex_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HVertex.Value = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_Value, None, Adaptor3d_HVertex)
Adaptor3d_HVertex.Parameter = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_Parameter, None, Adaptor3d_HVertex)
Adaptor3d_HVertex.Resolution = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_Resolution, None, Adaptor3d_HVertex)
Adaptor3d_HVertex.Orientation = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_Orientation, None, Adaptor3d_HVertex)
Adaptor3d_HVertex.IsSame = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_IsSame, None, Adaptor3d_HVertex)
Adaptor3d_HVertex._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex__kill_pointed, None, Adaptor3d_HVertex)
Adaptor3d_HVertex.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HVertex_GetHandle, None, Adaptor3d_HVertex)
Adaptor3d_HVertex_swigregister = _Adaptor3d.Adaptor3d_HVertex_swigregister
Adaptor3d_HVertex_swigregister(Adaptor3d_HVertex)

class Handle_Adaptor3d_HVertex(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HVertex_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HVertex(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HVertex_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HVertex.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HVertex_Nullify, None, Handle_Adaptor3d_HVertex)
Handle_Adaptor3d_HVertex.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HVertex_IsNull, None, Handle_Adaptor3d_HVertex)
Handle_Adaptor3d_HVertex.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HVertex_GetObject, None, Handle_Adaptor3d_HVertex)
Handle_Adaptor3d_HVertex._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HVertex__kill_pointed, None, Handle_Adaptor3d_HVertex)
Handle_Adaptor3d_HVertex_swigregister = _Adaptor3d.Handle_Adaptor3d_HVertex_swigregister
Handle_Adaptor3d_HVertex_swigregister(Handle_Adaptor3d_HVertex)

def Handle_Adaptor3d_HVertex_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast(AnObject)
Handle_Adaptor3d_HVertex_DownCast = _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast

class Adaptor3d_InterFunc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * build the function U(t)=FixVal if Fix =1 or  V(t)=FixVal if Fix=2

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param FixVal:
        :type FixVal: float
        :param Fix:
        :type Fix: int
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_InterFunc_swiginit(self, _Adaptor3d.new_Adaptor3d_InterFunc(*args))

    def Value(self, *args):
        """
        * computes the value <F>of the function for the variable <X>.  Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Value(self, *args)


    def Derivative(self, *args):
        """
        * computes the derivative <D> of the function for the variable <X>. Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Derivative(self, *args)


    def Values(self, *args):
        """
        * computes the value <F> and the derivative <D> of the function for the variable <X>. Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_InterFunc_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_InterFunc.Value = new_instancemethod(_Adaptor3d.Adaptor3d_InterFunc_Value, None, Adaptor3d_InterFunc)
Adaptor3d_InterFunc.Derivative = new_instancemethod(_Adaptor3d.Adaptor3d_InterFunc_Derivative, None, Adaptor3d_InterFunc)
Adaptor3d_InterFunc.Values = new_instancemethod(_Adaptor3d.Adaptor3d_InterFunc_Values, None, Adaptor3d_InterFunc)
Adaptor3d_InterFunc._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_InterFunc__kill_pointed, None, Adaptor3d_InterFunc)
Adaptor3d_InterFunc_swigregister = _Adaptor3d.Adaptor3d_InterFunc_swigregister
Adaptor3d_InterFunc_swigregister(Adaptor3d_InterFunc)

class Adaptor3d_OffsetCurve(OCC.Adaptor2d.Adaptor2d_Curve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * The Offset is set to 0.

        :rtype: None

        * The curve is loaded. The Offset is set to 0.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        * Creates an OffsetCurve curve. The Offset is set to Offset.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Offset:
        :type Offset: float
        :rtype: None

        * Create an Offset curve. WFirst,WLast define the bounds of the Offset curve.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Offset:
        :type Offset: float
        :param WFirst:
        :type WFirst: float
        :param WLast:
        :type WLast: float
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_OffsetCurve_swiginit(self, _Adaptor3d.new_Adaptor3d_OffsetCurve(*args))

    def Load(self, *args):
        """
        * Changes the curve. The Offset is reset to 0.

        :param S:
        :type S: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        * Changes the Offset on the current Curve.

        :param Offset:
        :type Offset: float
        :rtype: None

        * Changes the Offset Curve on the current Curve.

        :param Offset:
        :type Offset: float
        :param WFirst:
        :type WFirst: float
        :param WLast:
        :type WLast: float
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_OffsetCurve_Load(self, *args)


    def Curve(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_OffsetCurve_Curve(self, *args)


    def Offset(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_OffsetCurve_Offset(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_OffsetCurve.Load = new_instancemethod(_Adaptor3d.Adaptor3d_OffsetCurve_Load, None, Adaptor3d_OffsetCurve)
Adaptor3d_OffsetCurve.Curve = new_instancemethod(_Adaptor3d.Adaptor3d_OffsetCurve_Curve, None, Adaptor3d_OffsetCurve)
Adaptor3d_OffsetCurve.Offset = new_instancemethod(_Adaptor3d.Adaptor3d_OffsetCurve_Offset, None, Adaptor3d_OffsetCurve)
Adaptor3d_OffsetCurve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_OffsetCurve__kill_pointed, None, Adaptor3d_OffsetCurve)
Adaptor3d_OffsetCurve_swigregister = _Adaptor3d.Adaptor3d_OffsetCurve_swigregister
Adaptor3d_OffsetCurve_swigregister(Adaptor3d_OffsetCurve)

class Adaptor3d_Surface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_Delete(self, *args)


    def FirstUParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        * Returns the number of U intervals for continuity <S>. May be one if UContinuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        * Returns the number of V intervals for continuity <S>. May be one if VContinuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        * Returns the intervals with the requested continuity in the U direction.

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        * Returns the intervals with the requested continuity in the V direction.

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        * Returns a surface trimmed in the U direction equivalent of <self> between parameters <First> and <Last>. <Tol> is used to test for 3d points confusion. If <First> >= <Last>

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        * Returns a surface trimmed in the V direction between parameters <First> and <Last>. <Tol> is used to test for 3d points confusion. If <First> >= <Last>

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_VPeriod(self, *args)


    def Value(self, *args):
        """
        * Computes the point of parameters U,V on the surface.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Surface_Value(self, *args)


    def D0(self, *args):
        """
        * Computes the point of parameters U,V on the surface.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_D0(self, *args)


    def D1(self, *args):
        """
        * Computes the point and the first derivatives on the surface. Raised if the continuity of the current intervals is not C1.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_D1(self, *args)


    def D2(self, *args):
        """
        * Computes the point, the first and second derivatives on the surface. Raised if the continuity of the current intervals is not C2.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_D2(self, *args)


    def D3(self, *args):
        """
        * Computes the point, the first, second and third derivatives on the surface. Raised if the continuity of the current intervals is not C3.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_Surface_D3(self, *args)


    def DN(self, *args):
        """
        * Computes the derivative of order Nu in the direction U and Nv in the direction V at the point P(U, V). Raised if the current U interval is not not CNu and the current V interval is not CNv. Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_DN(self, *args)


    def UResolution(self, *args):
        """
        * Returns the parametric U resolution corresponding  to the real space resolution <R3d>.

        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        * Returns the parametric V resolution corresponding  to the real space resolution <R3d>.

        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_VResolution(self, *args)


    def GetType(self, *args):
        """
        * Returns the type of the surface : Plane, Cylinder, Cone, Sphere, Torus, BezierSurface, BSplineSurface, SurfaceOfRevolution, SurfaceOfExtrusion, OtherSurface

        :rtype: GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_Surface_GetType(self, *args)


    def Plane(self, *args):
        """
        :rtype: gp_Pln

        """
        return _Adaptor3d.Adaptor3d_Surface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        :rtype: gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_Surface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        :rtype: gp_Cone

        """
        return _Adaptor3d.Adaptor3d_Surface_Cone(self, *args)


    def Sphere(self, *args):
        """
        :rtype: gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_Surface_Sphere(self, *args)


    def Torus(self, *args):
        """
        :rtype: gp_Torus

        """
        return _Adaptor3d.Adaptor3d_Surface_Torus(self, *args)


    def UDegree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        :rtype: Handle_Geom_BezierSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        :rtype: gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_Surface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _Adaptor3d.Adaptor3d_Surface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_Surface_OffsetValue(self, *args)


    def __init__(self):
        _Adaptor3d.Adaptor3d_Surface_swiginit(self, _Adaptor3d.new_Adaptor3d_Surface())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_Surface.Delete = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Delete, None, Adaptor3d_Surface)
Adaptor3d_Surface.FirstUParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_FirstUParameter, None, Adaptor3d_Surface)
Adaptor3d_Surface.LastUParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_LastUParameter, None, Adaptor3d_Surface)
Adaptor3d_Surface.FirstVParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_FirstVParameter, None, Adaptor3d_Surface)
Adaptor3d_Surface.LastVParameter = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_LastVParameter, None, Adaptor3d_Surface)
Adaptor3d_Surface.UContinuity = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UContinuity, None, Adaptor3d_Surface)
Adaptor3d_Surface.VContinuity = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VContinuity, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbUIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbUIntervals, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbVIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbVIntervals, None, Adaptor3d_Surface)
Adaptor3d_Surface.UIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UIntervals, None, Adaptor3d_Surface)
Adaptor3d_Surface.VIntervals = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VIntervals, None, Adaptor3d_Surface)
Adaptor3d_Surface.UTrim = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UTrim, None, Adaptor3d_Surface)
Adaptor3d_Surface.VTrim = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VTrim, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsUClosed = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsUClosed, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsVClosed = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsVClosed, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsUPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsUPeriodic, None, Adaptor3d_Surface)
Adaptor3d_Surface.UPeriod = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UPeriod, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsVPeriodic = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsVPeriodic, None, Adaptor3d_Surface)
Adaptor3d_Surface.VPeriod = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VPeriod, None, Adaptor3d_Surface)
Adaptor3d_Surface.Value = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Value, None, Adaptor3d_Surface)
Adaptor3d_Surface.D0 = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_D0, None, Adaptor3d_Surface)
Adaptor3d_Surface.D1 = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_D1, None, Adaptor3d_Surface)
Adaptor3d_Surface.D2 = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_D2, None, Adaptor3d_Surface)
Adaptor3d_Surface.D3 = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_D3, None, Adaptor3d_Surface)
Adaptor3d_Surface.DN = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_DN, None, Adaptor3d_Surface)
Adaptor3d_Surface.UResolution = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UResolution, None, Adaptor3d_Surface)
Adaptor3d_Surface.VResolution = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VResolution, None, Adaptor3d_Surface)
Adaptor3d_Surface.GetType = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_GetType, None, Adaptor3d_Surface)
Adaptor3d_Surface.Plane = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Plane, None, Adaptor3d_Surface)
Adaptor3d_Surface.Cylinder = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Cylinder, None, Adaptor3d_Surface)
Adaptor3d_Surface.Cone = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Cone, None, Adaptor3d_Surface)
Adaptor3d_Surface.Sphere = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Sphere, None, Adaptor3d_Surface)
Adaptor3d_Surface.Torus = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Torus, None, Adaptor3d_Surface)
Adaptor3d_Surface.UDegree = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_UDegree, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbUPoles = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbUPoles, None, Adaptor3d_Surface)
Adaptor3d_Surface.VDegree = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_VDegree, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbVPoles = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbVPoles, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbUKnots = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbUKnots, None, Adaptor3d_Surface)
Adaptor3d_Surface.NbVKnots = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_NbVKnots, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsURational = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsURational, None, Adaptor3d_Surface)
Adaptor3d_Surface.IsVRational = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_IsVRational, None, Adaptor3d_Surface)
Adaptor3d_Surface.Bezier = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Bezier, None, Adaptor3d_Surface)
Adaptor3d_Surface.BSpline = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_BSpline, None, Adaptor3d_Surface)
Adaptor3d_Surface.AxeOfRevolution = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_AxeOfRevolution, None, Adaptor3d_Surface)
Adaptor3d_Surface.Direction = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_Direction, None, Adaptor3d_Surface)
Adaptor3d_Surface.BasisCurve = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_BasisCurve, None, Adaptor3d_Surface)
Adaptor3d_Surface.BasisSurface = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_BasisSurface, None, Adaptor3d_Surface)
Adaptor3d_Surface.OffsetValue = new_instancemethod(_Adaptor3d.Adaptor3d_Surface_OffsetValue, None, Adaptor3d_Surface)
Adaptor3d_Surface._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_Surface__kill_pointed, None, Adaptor3d_Surface)
Adaptor3d_Surface_swigregister = _Adaptor3d.Adaptor3d_Surface_swigregister
Adaptor3d_Surface_swigregister(Adaptor3d_Surface)

class Adaptor3d_TopolTool(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_TopolTool_swiginit(self, _Adaptor3d.new_Adaptor3d_TopolTool(*args))

    def Initialize(self, *args):
        """
        :rtype: void

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: void

        :param Curve:
        :type Curve: Handle_Adaptor2d_HCurve2d &
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Initialize(self, *args)


    def Init(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Init(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_More(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Value(self, *args)


    def Next(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Next(self, *args)


    def InitVertexIterator(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_InitVertexIterator(self, *args)


    def MoreVertex(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_MoreVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: Handle_Adaptor3d_HVertex

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Vertex(self, *args)


    def NextVertex(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NextVertex(self, *args)


    def Classify(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Tol:
        :type Tol: float
        :param ReacdreOnPeriodic: default value is Standard_True
        :type ReacdreOnPeriodic: bool
        :rtype: TopAbs_State

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Classify(self, *args)


    def IsThePointOn(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Tol:
        :type Tol: float
        :param ReacdreOnPeriodic: default value is Standard_True
        :type ReacdreOnPeriodic: bool
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsThePointOn(self, *args)


    def Orientation(self, *args):
        """
        * If the function returns the orientation of the arc. If the orientation is FORWARD or REVERSED, the arc is a 'real' limit of the surface. If the orientation is INTERNAL or EXTERNAL, the arc is considered as an arc on the surface.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: TopAbs_Orientation

        * Returns the orientation of the vertex V. The vertex has been found with an exploration on a given arc. The orientation is the orientation of the vertex on this arc.

        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Orientation(self, *args)


    def Identical(self, *args):
        """
        * Returns True if the vertices V1 and V2 are identical. This method does not take the orientation of the vertices in account.

        :param V1:
        :type V1: Handle_Adaptor3d_HVertex &
        :param V2:
        :type V2: Handle_Adaptor3d_HVertex &
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Identical(self, *args)


    def Has3d(self, *args):
        """
        * answers if arcs and vertices may have 3d representations, so that we could use Tol3d and Pnt methods.

        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Has3d(self, *args)


    def Tol3d(self, *args):
        """
        * returns 3d tolerance of the arc C

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        * returns 3d tolerance of the vertex V

        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Tol3d(self, *args)


    def Pnt(self, *args):
        """
        * returns 3d point of the vertex V

        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Pnt(self, *args)


    def ComputeSamplePoints(self, *args):
        """
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_ComputeSamplePoints(self, *args)


    def NbSamplesU(self, *args):
        """
        * compute the sample-points for the intersections algorithms

        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args):
        """
        * compute the sample-points for the intersections algorithms

        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesV(self, *args)


    def NbSamples(self, *args):
        """
        * compute the sample-points for the intersections algorithms

        :rtype: int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamples(self, *args)


    def UParameters(self, *args):
        """
        * return the set of U parameters on the surface obtained by the method SamplePnts

        :param theArray:
        :type theArray: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_UParameters(self, *args)


    def VParameters(self, *args):
        """
        * return the set of V parameters on the surface obtained by the method SamplePnts

        :param theArray:
        :type theArray: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_VParameters(self, *args)


    def SamplePoint(self, *args):
        """
        :param Index:
        :type Index: int
        :param P2d:
        :type P2d: gp_Pnt2d
        :param P3d:
        :type P3d: gp_Pnt
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePoint(self, *args)


    def DomainIsInfinite(self, *args):
        """
        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_DomainIsInfinite(self, *args)


    def Edge(self, *args):
        """
        :rtype: Standard_Address

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Edge(self, *args)


    def SamplePnts(self, *args):
        """
        * compute the sample-points for the intersections algorithms by adaptive algorithm for BSpline surfaces. For other surfaces algorithm is the same as in method ComputeSamplePoints(), but only fill arrays of U and V sample parameters; theDefl is a requred deflection theNUmin, theNVmin are minimal nb points for U and V.

        :param theDefl:
        :type theDefl: float
        :param theNUmin:
        :type theNUmin: int
        :param theNVmin:
        :type theNVmin: int
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePnts(self, *args)


    def BSplSamplePnts(self, *args):
        """
        * compute the sample-points for the intersections algorithms by adaptive algorithm for BSpline surfaces - is used in SamplePnts theDefl is a requred deflection theNUmin, theNVmin are minimal nb points for U and V.

        :param theDefl:
        :type theDefl: float
        :param theNUmin:
        :type theNUmin: int
        :param theNVmin:
        :type theNVmin: int
        :rtype: void

        """
        return _Adaptor3d.Adaptor3d_TopolTool_BSplSamplePnts(self, *args)


    def IsUniformSampling(self, *args):
        """
        * Returns true if provide uniform sampling of points.

        :rtype: bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsUniformSampling(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_TopolTool self)"""
        return _Adaptor3d.Adaptor3d_TopolTool__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_TopolTool self) -> Handle_Adaptor3d_TopolTool"""
        return _Adaptor3d.Adaptor3d_TopolTool_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_TopolTool.Initialize = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Initialize, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Init = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Init, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.More = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_More, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Value = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Value, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Next = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Next, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.InitVertexIterator = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_InitVertexIterator, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.MoreVertex = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_MoreVertex, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Vertex = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Vertex, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.NextVertex = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_NextVertex, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Classify = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Classify, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.IsThePointOn = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_IsThePointOn, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Orientation = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Orientation, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Identical = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Identical, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Has3d = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Has3d, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Tol3d = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Tol3d, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Pnt = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Pnt, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.ComputeSamplePoints = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_ComputeSamplePoints, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.NbSamplesU = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_NbSamplesU, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.NbSamplesV = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_NbSamplesV, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.NbSamples = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_NbSamples, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.UParameters = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_UParameters, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.VParameters = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_VParameters, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.SamplePoint = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_SamplePoint, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.DomainIsInfinite = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_DomainIsInfinite, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.Edge = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_Edge, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.SamplePnts = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_SamplePnts, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.BSplSamplePnts = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_BSplSamplePnts, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.IsUniformSampling = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_IsUniformSampling, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool__kill_pointed, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_TopolTool_GetHandle, None, Adaptor3d_TopolTool)
Adaptor3d_TopolTool_swigregister = _Adaptor3d.Adaptor3d_TopolTool_swigregister
Adaptor3d_TopolTool_swigregister(Adaptor3d_TopolTool)

class Handle_Adaptor3d_TopolTool(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_TopolTool_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_TopolTool(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_TopolTool.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_TopolTool_Nullify, None, Handle_Adaptor3d_TopolTool)
Handle_Adaptor3d_TopolTool.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_TopolTool_IsNull, None, Handle_Adaptor3d_TopolTool)
Handle_Adaptor3d_TopolTool.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_TopolTool_GetObject, None, Handle_Adaptor3d_TopolTool)
Handle_Adaptor3d_TopolTool._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_TopolTool__kill_pointed, None, Handle_Adaptor3d_TopolTool)
Handle_Adaptor3d_TopolTool_swigregister = _Adaptor3d.Handle_Adaptor3d_TopolTool_swigregister
Handle_Adaptor3d_TopolTool_swigregister(Handle_Adaptor3d_TopolTool)

def Handle_Adaptor3d_TopolTool_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast(AnObject)
Handle_Adaptor3d_TopolTool_DownCast = _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast

class Adaptor3d_CurveOnSurface(Adaptor3d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        * Creates a CurveOnSurface from the 2d curve <C> and the surface <S>.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_CurveOnSurface_swiginit(self, _Adaptor3d.new_Adaptor3d_CurveOnSurface(*args))

    def Load(self, *args):
        """
        * Changes the surface.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        * Changes the 2d curve.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Load(self, *args)


    def GetCurve(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_GetCurve(self, *args)


    def GetSurface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_GetSurface(self, *args)


    def ChangeCurve(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeCurve(self, *args)


    def ChangeSurface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeSurface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_CurveOnSurface.Load = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface_Load, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface.GetCurve = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface_GetCurve, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface.GetSurface = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface_GetSurface, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface.ChangeCurve = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface_ChangeCurve, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface.ChangeSurface = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface_ChangeSurface, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_CurveOnSurface__kill_pointed, None, Adaptor3d_CurveOnSurface)
Adaptor3d_CurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_CurveOnSurface_swigregister
Adaptor3d_CurveOnSurface_swigregister(Adaptor3d_CurveOnSurface)

class Adaptor3d_HCurveOnSurface(Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param C:
        :type C: Adaptor3d_CurveOnSurface &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HCurveOnSurface_swiginit(self, _Adaptor3d.new_Adaptor3d_HCurveOnSurface(*args))

    def Set(self, *args):
        """
        :param C:
        :type C: Adaptor3d_CurveOnSurface &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_Set(self, *args)


    def ChangeCurve(self, *args):
        """
        :rtype: Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_ChangeCurve(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HCurveOnSurface self)"""
        return _Adaptor3d.Adaptor3d_HCurveOnSurface__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HCurveOnSurface self) -> Handle_Adaptor3d_HCurveOnSurface"""
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HCurveOnSurface.Set = new_instancemethod(_Adaptor3d.Adaptor3d_HCurveOnSurface_Set, None, Adaptor3d_HCurveOnSurface)
Adaptor3d_HCurveOnSurface.ChangeCurve = new_instancemethod(_Adaptor3d.Adaptor3d_HCurveOnSurface_ChangeCurve, None, Adaptor3d_HCurveOnSurface)
Adaptor3d_HCurveOnSurface._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HCurveOnSurface__kill_pointed, None, Adaptor3d_HCurveOnSurface)
Adaptor3d_HCurveOnSurface.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HCurveOnSurface_GetHandle, None, Adaptor3d_HCurveOnSurface)
Adaptor3d_HCurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_HCurveOnSurface_swigregister
Adaptor3d_HCurveOnSurface_swigregister(Adaptor3d_HCurveOnSurface)

class Handle_Adaptor3d_HCurveOnSurface(Handle_Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HCurveOnSurface(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HCurveOnSurface.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Nullify, None, Handle_Adaptor3d_HCurveOnSurface)
Handle_Adaptor3d_HCurveOnSurface.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsNull, None, Handle_Adaptor3d_HCurveOnSurface)
Handle_Adaptor3d_HCurveOnSurface.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_GetObject, None, Handle_Adaptor3d_HCurveOnSurface)
Handle_Adaptor3d_HCurveOnSurface._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HCurveOnSurface__kill_pointed, None, Handle_Adaptor3d_HCurveOnSurface)
Handle_Adaptor3d_HCurveOnSurface_swigregister = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_swigregister
Handle_Adaptor3d_HCurveOnSurface_swigregister(Handle_Adaptor3d_HCurveOnSurface)

def Handle_Adaptor3d_HCurveOnSurface_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast(AnObject)
Handle_Adaptor3d_HCurveOnSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast

class Adaptor3d_HIsoCurve(Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param C:
        :type C: Adaptor3d_IsoCurve &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HIsoCurve_swiginit(self, _Adaptor3d.new_Adaptor3d_HIsoCurve(*args))

    def Set(self, *args):
        """
        :param C:
        :type C: Adaptor3d_IsoCurve &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_Set(self, *args)


    def ChangeCurve(self, *args):
        """
        :rtype: Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_ChangeCurve(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HIsoCurve self)"""
        return _Adaptor3d.Adaptor3d_HIsoCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HIsoCurve self) -> Handle_Adaptor3d_HIsoCurve"""
        return _Adaptor3d.Adaptor3d_HIsoCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HIsoCurve.Set = new_instancemethod(_Adaptor3d.Adaptor3d_HIsoCurve_Set, None, Adaptor3d_HIsoCurve)
Adaptor3d_HIsoCurve.ChangeCurve = new_instancemethod(_Adaptor3d.Adaptor3d_HIsoCurve_ChangeCurve, None, Adaptor3d_HIsoCurve)
Adaptor3d_HIsoCurve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HIsoCurve__kill_pointed, None, Adaptor3d_HIsoCurve)
Adaptor3d_HIsoCurve.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HIsoCurve_GetHandle, None, Adaptor3d_HIsoCurve)
Adaptor3d_HIsoCurve_swigregister = _Adaptor3d.Adaptor3d_HIsoCurve_swigregister
Adaptor3d_HIsoCurve_swigregister(Adaptor3d_HIsoCurve)

class Handle_Adaptor3d_HIsoCurve(Handle_Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HIsoCurve_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HIsoCurve(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HIsoCurve.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve_Nullify, None, Handle_Adaptor3d_HIsoCurve)
Handle_Adaptor3d_HIsoCurve.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsNull, None, Handle_Adaptor3d_HIsoCurve)
Handle_Adaptor3d_HIsoCurve.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve_GetObject, None, Handle_Adaptor3d_HIsoCurve)
Handle_Adaptor3d_HIsoCurve._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HIsoCurve__kill_pointed, None, Handle_Adaptor3d_HIsoCurve)
Handle_Adaptor3d_HIsoCurve_swigregister = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_swigregister
Handle_Adaptor3d_HIsoCurve_swigregister(Handle_Adaptor3d_HIsoCurve)

def Handle_Adaptor3d_HIsoCurve_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast(AnObject)
Handle_Adaptor3d_HIsoCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast

class Adaptor3d_HSurfaceOfLinearExtrusion(Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Adaptor3d_SurfaceOfLinearExtrusion &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_swiginit(self, _Adaptor3d.new_Adaptor3d_HSurfaceOfLinearExtrusion(*args))

    def Set(self, *args):
        """
        :param S:
        :type S: Adaptor3d_SurfaceOfLinearExtrusion &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_Set(self, *args)


    def ChangeSurface(self, *args):
        """
        :rtype: Adaptor3d_SurfaceOfLinearExtrusion

        """
        return _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_ChangeSurface(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HSurfaceOfLinearExtrusion self)"""
        return _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HSurfaceOfLinearExtrusion self) -> Handle_Adaptor3d_HSurfaceOfLinearExtrusion"""
        return _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HSurfaceOfLinearExtrusion.Set = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_Set, None, Adaptor3d_HSurfaceOfLinearExtrusion)
Adaptor3d_HSurfaceOfLinearExtrusion.ChangeSurface = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_ChangeSurface, None, Adaptor3d_HSurfaceOfLinearExtrusion)
Adaptor3d_HSurfaceOfLinearExtrusion._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion__kill_pointed, None, Adaptor3d_HSurfaceOfLinearExtrusion)
Adaptor3d_HSurfaceOfLinearExtrusion.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_GetHandle, None, Adaptor3d_HSurfaceOfLinearExtrusion)
Adaptor3d_HSurfaceOfLinearExtrusion_swigregister = _Adaptor3d.Adaptor3d_HSurfaceOfLinearExtrusion_swigregister
Adaptor3d_HSurfaceOfLinearExtrusion_swigregister(Adaptor3d_HSurfaceOfLinearExtrusion)

class Handle_Adaptor3d_HSurfaceOfLinearExtrusion(Handle_Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HSurfaceOfLinearExtrusion(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HSurfaceOfLinearExtrusion.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_Nullify, None, Handle_Adaptor3d_HSurfaceOfLinearExtrusion)
Handle_Adaptor3d_HSurfaceOfLinearExtrusion.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_IsNull, None, Handle_Adaptor3d_HSurfaceOfLinearExtrusion)
Handle_Adaptor3d_HSurfaceOfLinearExtrusion.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_GetObject, None, Handle_Adaptor3d_HSurfaceOfLinearExtrusion)
Handle_Adaptor3d_HSurfaceOfLinearExtrusion._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion__kill_pointed, None, Handle_Adaptor3d_HSurfaceOfLinearExtrusion)
Handle_Adaptor3d_HSurfaceOfLinearExtrusion_swigregister = _Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_swigregister
Handle_Adaptor3d_HSurfaceOfLinearExtrusion_swigregister(Handle_Adaptor3d_HSurfaceOfLinearExtrusion)

def Handle_Adaptor3d_HSurfaceOfLinearExtrusion_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_DownCast(AnObject)
Handle_Adaptor3d_HSurfaceOfLinearExtrusion_DownCast = _Adaptor3d.Handle_Adaptor3d_HSurfaceOfLinearExtrusion_DownCast

class Adaptor3d_HSurfaceOfRevolution(Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Adaptor3d_SurfaceOfRevolution &
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_HSurfaceOfRevolution_swiginit(self, _Adaptor3d.new_Adaptor3d_HSurfaceOfRevolution(*args))

    def Set(self, *args):
        """
        :param S:
        :type S: Adaptor3d_SurfaceOfRevolution &
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceOfRevolution_Set(self, *args)


    def ChangeSurface(self, *args):
        """
        :rtype: Adaptor3d_SurfaceOfRevolution

        """
        return _Adaptor3d.Adaptor3d_HSurfaceOfRevolution_ChangeSurface(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Adaptor3d_HSurfaceOfRevolution self)"""
        return _Adaptor3d.Adaptor3d_HSurfaceOfRevolution__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Adaptor3d_HSurfaceOfRevolution self) -> Handle_Adaptor3d_HSurfaceOfRevolution"""
        return _Adaptor3d.Adaptor3d_HSurfaceOfRevolution_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_HSurfaceOfRevolution.Set = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfRevolution_Set, None, Adaptor3d_HSurfaceOfRevolution)
Adaptor3d_HSurfaceOfRevolution.ChangeSurface = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfRevolution_ChangeSurface, None, Adaptor3d_HSurfaceOfRevolution)
Adaptor3d_HSurfaceOfRevolution._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfRevolution__kill_pointed, None, Adaptor3d_HSurfaceOfRevolution)
Adaptor3d_HSurfaceOfRevolution.GetHandle = new_instancemethod(_Adaptor3d.Adaptor3d_HSurfaceOfRevolution_GetHandle, None, Adaptor3d_HSurfaceOfRevolution)
Adaptor3d_HSurfaceOfRevolution_swigregister = _Adaptor3d.Adaptor3d_HSurfaceOfRevolution_swigregister
Adaptor3d_HSurfaceOfRevolution_swigregister(Adaptor3d_HSurfaceOfRevolution)

class Handle_Adaptor3d_HSurfaceOfRevolution(Handle_Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_swiginit(self, _Adaptor3d.new_Handle_Adaptor3d_HSurfaceOfRevolution(*args))
    DownCast = staticmethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Adaptor3d_HSurfaceOfRevolution.Nullify = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_Nullify, None, Handle_Adaptor3d_HSurfaceOfRevolution)
Handle_Adaptor3d_HSurfaceOfRevolution.IsNull = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_IsNull, None, Handle_Adaptor3d_HSurfaceOfRevolution)
Handle_Adaptor3d_HSurfaceOfRevolution.GetObject = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_GetObject, None, Handle_Adaptor3d_HSurfaceOfRevolution)
Handle_Adaptor3d_HSurfaceOfRevolution._kill_pointed = new_instancemethod(_Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution__kill_pointed, None, Handle_Adaptor3d_HSurfaceOfRevolution)
Handle_Adaptor3d_HSurfaceOfRevolution_swigregister = _Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_swigregister
Handle_Adaptor3d_HSurfaceOfRevolution_swigregister(Handle_Adaptor3d_HSurfaceOfRevolution)

def Handle_Adaptor3d_HSurfaceOfRevolution_DownCast(AnObject):
    return _Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_DownCast(AnObject)
Handle_Adaptor3d_HSurfaceOfRevolution_DownCast = _Adaptor3d.Handle_Adaptor3d_HSurfaceOfRevolution_DownCast

class Adaptor3d_IsoCurve(Adaptor3d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * The iso is set to NoneIso.

        :rtype: None

        * The surface is loaded. The iso is set to NoneIso.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        * Creates an IsoCurve curve. Iso defines the type (isoU or isoU) Param defines the value of the iso. The bounds of the iso are the bounds of the surface.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Iso:
        :type Iso: GeomAbs_IsoType
        :param Param:
        :type Param: float
        :rtype: None

        * Create an IsoCurve curve. Iso defines the type (isoU or isov). Param defines the value of the iso. WFirst,WLast define the bounds of the iso.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Iso:
        :type Iso: GeomAbs_IsoType
        :param Param:
        :type Param: float
        :param WFirst:
        :type WFirst: float
        :param WLast:
        :type WLast: float
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_IsoCurve_swiginit(self, _Adaptor3d.new_Adaptor3d_IsoCurve(*args))

    def Load(self, *args):
        """
        * Changes the surface. The iso is reset to NoneIso.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        * Changes the iso on the current surface.

        :param Iso:
        :type Iso: GeomAbs_IsoType
        :param Param:
        :type Param: float
        :rtype: None

        * Changes the iso on the current surface.

        :param Iso:
        :type Iso: GeomAbs_IsoType
        :param Param:
        :type Param: float
        :param WFirst:
        :type WFirst: float
        :param WLast:
        :type WLast: float
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Load(self, *args)


    def Surface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Surface(self, *args)


    def Iso(self, *args):
        """
        :rtype: GeomAbs_IsoType

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Iso(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Parameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_IsoCurve.Load = new_instancemethod(_Adaptor3d.Adaptor3d_IsoCurve_Load, None, Adaptor3d_IsoCurve)
Adaptor3d_IsoCurve.Surface = new_instancemethod(_Adaptor3d.Adaptor3d_IsoCurve_Surface, None, Adaptor3d_IsoCurve)
Adaptor3d_IsoCurve.Iso = new_instancemethod(_Adaptor3d.Adaptor3d_IsoCurve_Iso, None, Adaptor3d_IsoCurve)
Adaptor3d_IsoCurve.Parameter = new_instancemethod(_Adaptor3d.Adaptor3d_IsoCurve_Parameter, None, Adaptor3d_IsoCurve)
Adaptor3d_IsoCurve._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_IsoCurve__kill_pointed, None, Adaptor3d_IsoCurve)
Adaptor3d_IsoCurve_swigregister = _Adaptor3d.Adaptor3d_IsoCurve_swigregister
Adaptor3d_IsoCurve_swigregister(Adaptor3d_IsoCurve)

class Adaptor3d_SurfaceOfLinearExtrusion(Adaptor3d_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * The Curve is loaded.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        * Thew Curve and the Direction are loaded.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_SurfaceOfLinearExtrusion_swiginit(self, _Adaptor3d.new_Adaptor3d_SurfaceOfLinearExtrusion(*args))

    def Load(self, *args):
        """
        * Changes the Curve

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        * Changes the Direction

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_SurfaceOfLinearExtrusion_Load(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_SurfaceOfLinearExtrusion.Load = new_instancemethod(_Adaptor3d.Adaptor3d_SurfaceOfLinearExtrusion_Load, None, Adaptor3d_SurfaceOfLinearExtrusion)
Adaptor3d_SurfaceOfLinearExtrusion._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_SurfaceOfLinearExtrusion__kill_pointed, None, Adaptor3d_SurfaceOfLinearExtrusion)
Adaptor3d_SurfaceOfLinearExtrusion_swigregister = _Adaptor3d.Adaptor3d_SurfaceOfLinearExtrusion_swigregister
Adaptor3d_SurfaceOfLinearExtrusion_swigregister(Adaptor3d_SurfaceOfLinearExtrusion)

class Adaptor3d_SurfaceOfRevolution(Adaptor3d_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * The Curve is loaded.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        * The Curve and the Direction are loaded.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param V:
        :type V: gp_Ax1
        :rtype: None

        """
        _Adaptor3d.Adaptor3d_SurfaceOfRevolution_swiginit(self, _Adaptor3d.new_Adaptor3d_SurfaceOfRevolution(*args))

    def Load(self, *args):
        """
        * Changes the Curve

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        * Changes the Direction

        :param V:
        :type V: gp_Ax1
        :rtype: None

        """
        return _Adaptor3d.Adaptor3d_SurfaceOfRevolution_Load(self, *args)


    def Axis(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _Adaptor3d.Adaptor3d_SurfaceOfRevolution_Axis(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Adaptor3d_SurfaceOfRevolution.Load = new_instancemethod(_Adaptor3d.Adaptor3d_SurfaceOfRevolution_Load, None, Adaptor3d_SurfaceOfRevolution)
Adaptor3d_SurfaceOfRevolution.Axis = new_instancemethod(_Adaptor3d.Adaptor3d_SurfaceOfRevolution_Axis, None, Adaptor3d_SurfaceOfRevolution)
Adaptor3d_SurfaceOfRevolution._kill_pointed = new_instancemethod(_Adaptor3d.Adaptor3d_SurfaceOfRevolution__kill_pointed, None, Adaptor3d_SurfaceOfRevolution)
Adaptor3d_SurfaceOfRevolution_swigregister = _Adaptor3d.Adaptor3d_SurfaceOfRevolution_swigregister
Adaptor3d_SurfaceOfRevolution_swigregister(Adaptor3d_SurfaceOfRevolution)



