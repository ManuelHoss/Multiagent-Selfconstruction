# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepFill.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepFill', [dirname(__file__)])
        except ImportError:
            import _BRepFill
            return _BRepFill
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepFill', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepFill = swig_import_helper()
    del swig_import_helper
else:
    import _BRepFill
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFill.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepFill.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepFill.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepFill.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepFill.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepFill.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepFill.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepFill.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepFill.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepFill.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepFill.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepFill.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepFill.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepFill.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepFill.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepFill.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepFill.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepFill.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TColStd
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Geom2d
import OCC.TopTools
import OCC.Message
import OCC.AppParCurves
import OCC.GeomPlate
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.TColGeom2d
import OCC.Law
import OCC.GeomLProp
import OCC.AdvApp2Var
import OCC.AdvApprox
import OCC.PLib
import OCC.Plate
import OCC.MAT
import OCC.GeomFill
import OCC.Convert
import OCC.AppBlend
import OCC.Approx
import OCC.AppCont
import OCC.TColGeom
import OCC.BRepMAT2d
import OCC.Bisector
import OCC.IntRes2d

_BRepFill.BRepFill_Modified_swigconstant(_BRepFill)
BRepFill_Modified = _BRepFill.BRepFill_Modified

_BRepFill.BRepFill_Right_swigconstant(_BRepFill)
BRepFill_Right = _BRepFill.BRepFill_Right

_BRepFill.BRepFill_Round_swigconstant(_BRepFill)
BRepFill_Round = _BRepFill.BRepFill_Round

_BRepFill.BRepFill_NoContact_swigconstant(_BRepFill)
BRepFill_NoContact = _BRepFill.BRepFill_NoContact

_BRepFill.BRepFill_Contact_swigconstant(_BRepFill)
BRepFill_Contact = _BRepFill.BRepFill_Contact

_BRepFill.BRepFill_ContactOnBorder_swigconstant(_BRepFill)
BRepFill_ContactOnBorder = _BRepFill.BRepFill_ContactOnBorder
class brepfill(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Face(*args):
        """
        * Computes a ruled surface between two edges.

        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :rtype: TopoDS_Face

        """
        return _BRepFill.brepfill_Face(*args)

    Face = staticmethod(Face)

    def Shell(*args):
        """
        * Computes a ruled surface between two wires. The wires must have the same number of edges.

        :param Wire1:
        :type Wire1: TopoDS_Wire &
        :param Wire2:
        :type Wire2: TopoDS_Wire &
        :rtype: TopoDS_Shell

        """
        return _BRepFill.brepfill_Shell(*args)

    Shell = staticmethod(Shell)

    def Axe(*args):
        """
        * Computes <AxeProf> as Follow. <Location> is the Position of the nearest vertex V of <Profile> to <Spine>.<XDirection> is confused with the tangent to <Spine> at the projected point of V on the Spine. <Direction> is normal to <Spine>. <Spine> is a plane wire or a plane face.

        :param Spine:
        :type Spine: TopoDS_Shape &
        :param Profile:
        :type Profile: TopoDS_Wire &
        :param AxeProf:
        :type AxeProf: gp_Ax3
        :param ProfOnSpine:
        :type ProfOnSpine: bool
        :param Tol:
        :type Tol: float
        :rtype: void

        """
        return _BRepFill.brepfill_Axe(*args)

    Axe = staticmethod(Axe)

    def ComputeACR(*args):
        """
        * Compute ACR on a wire

        :param wire:
        :type wire: TopoDS_Wire &
        :param ACR:
        :type ACR: TColStd_Array1OfReal &
        :rtype: void

        """
        return _BRepFill.brepfill_ComputeACR(*args)

    ComputeACR = staticmethod(ComputeACR)

    def InsertACR(*args):
        """
        * Insert ACR on a wire

        :param wire:
        :type wire: TopoDS_Wire &
        :param ACRcuts:
        :type ACRcuts: TColStd_Array1OfReal &
        :param prec:
        :type prec: float
        :rtype: TopoDS_Wire

        """
        return _BRepFill.brepfill_InsertACR(*args)

    InsertACR = staticmethod(InsertACR)

    def __init__(self):
        _BRepFill.brepfill_swiginit(self, _BRepFill.new_brepfill())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


brepfill._kill_pointed = new_instancemethod(_BRepFill.brepfill__kill_pointed, None, brepfill)
brepfill_swigregister = _BRepFill.brepfill_swigregister
brepfill_swigregister(brepfill)

def brepfill_Face(*args):
    """
    * Computes a ruled surface between two edges.

    :param Edge1:
    :type Edge1: TopoDS_Edge &
    :param Edge2:
    :type Edge2: TopoDS_Edge &
    :rtype: TopoDS_Face

    """
    return _BRepFill.brepfill_Face(*args)

def brepfill_Shell(*args):
    """
    * Computes a ruled surface between two wires. The wires must have the same number of edges.

    :param Wire1:
    :type Wire1: TopoDS_Wire &
    :param Wire2:
    :type Wire2: TopoDS_Wire &
    :rtype: TopoDS_Shell

    """
    return _BRepFill.brepfill_Shell(*args)

def brepfill_Axe(*args):
    """
    * Computes <AxeProf> as Follow. <Location> is the Position of the nearest vertex V of <Profile> to <Spine>.<XDirection> is confused with the tangent to <Spine> at the projected point of V on the Spine. <Direction> is normal to <Spine>. <Spine> is a plane wire or a plane face.

    :param Spine:
    :type Spine: TopoDS_Shape &
    :param Profile:
    :type Profile: TopoDS_Wire &
    :param AxeProf:
    :type AxeProf: gp_Ax3
    :param ProfOnSpine:
    :type ProfOnSpine: bool
    :param Tol:
    :type Tol: float
    :rtype: void

    """
    return _BRepFill.brepfill_Axe(*args)

def brepfill_ComputeACR(*args):
    """
    * Compute ACR on a wire

    :param wire:
    :type wire: TopoDS_Wire &
    :param ACR:
    :type ACR: TColStd_Array1OfReal &
    :rtype: void

    """
    return _BRepFill.brepfill_ComputeACR(*args)

def brepfill_InsertACR(*args):
    """
    * Insert ACR on a wire

    :param wire:
    :type wire: TopoDS_Wire &
    :param ACRcuts:
    :type ACRcuts: TColStd_Array1OfReal &
    :param prec:
    :type prec: float
    :rtype: TopoDS_Wire

    """
    return _BRepFill.brepfill_InsertACR(*args)

class BRepFill_ApproxSeewing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: None

        """
        _BRepFill.BRepFill_ApproxSeewing_swiginit(self, _BRepFill.new_BRepFill_ApproxSeewing(*args))

    def Perform(self, *args):
        """
        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: None

        """
        return _BRepFill.BRepFill_ApproxSeewing_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_ApproxSeewing_IsDone(self, *args)


    def Curve(self, *args):
        """
        * returns the approximation of the 3d Curve

        :rtype: Handle_Geom_Curve

        """
        return _BRepFill.BRepFill_ApproxSeewing_Curve(self, *args)


    def CurveOnF1(self, *args):
        """
        * returns the approximation of the PCurve on the first face of the MultiLine

        :rtype: Handle_Geom2d_Curve

        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF1(self, *args)


    def CurveOnF2(self, *args):
        """
        * returns the approximation of the PCurve on the first face of the MultiLine

        :rtype: Handle_Geom2d_Curve

        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ApproxSeewing.Perform = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_Perform, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.IsDone = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_IsDone, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.Curve = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_Curve, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.CurveOnF1 = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_CurveOnF1, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.CurveOnF2 = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_CurveOnF2, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing__kill_pointed, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing_swigregister = _BRepFill.BRepFill_ApproxSeewing_swigregister
BRepFill_ApproxSeewing_swigregister(BRepFill_ApproxSeewing)

class BRepFill_CompatibleWires(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Sections:
        :type Sections: TopTools_SequenceOfShape &
        :rtype: None

        """
        _BRepFill.BRepFill_CompatibleWires_swiginit(self, _BRepFill.new_BRepFill_CompatibleWires(*args))

    def Init(self, *args):
        """
        :param Sections:
        :type Sections: TopTools_SequenceOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_CompatibleWires_Init(self, *args)


    def SetPercent(self, *args):
        """
        :param percent: default value is 0.01
        :type percent: float
        :rtype: None

        """
        return _BRepFill.BRepFill_CompatibleWires_SetPercent(self, *args)


    def Perform(self, *args):
        """
        * Performs CompatibleWires According to the orientation and the origin of each other

        :param WithRotation: default value is Standard_True
        :type WithRotation: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_CompatibleWires_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_CompatibleWires_IsDone(self, *args)


    def Shape(self, *args):
        """
        * returns the generated sequence.

        :rtype: TopTools_SequenceOfShape

        """
        return _BRepFill.BRepFill_CompatibleWires_Shape(self, *args)


    def GeneratedShapes(self, *args):
        """
        * Returns the shapes created from a subshape <SubSection> of a section.

        :param SubSection:
        :type SubSection: TopoDS_Edge &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_CompatibleWires_GeneratedShapes(self, *args)


    def Generated(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_CompatibleWires_Generated(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_CompatibleWires.Init = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Init, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.SetPercent = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_SetPercent, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Perform = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Perform, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.IsDone = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_IsDone, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Shape = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Shape, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_GeneratedShapes, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Generated = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Generated, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires._kill_pointed = new_instancemethod(_BRepFill.BRepFill_CompatibleWires__kill_pointed, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires_swigregister = _BRepFill.BRepFill_CompatibleWires_swigregister
BRepFill_CompatibleWires_swigregister(BRepFill_CompatibleWires)

class BRepFill_ComputeCLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: BRepFill_MultiLine &
        :param degreemin: default value is 3
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-5
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-5
        :type Tolerance2d: float
        :param cutting: default value is Standard_False
        :type cutting: bool
        :param FirstC: default value is AppParCurves_TangencyPoint
        :type FirstC: AppParCurves_Constraint
        :param LastC: default value is AppParCurves_TangencyPoint
        :type LastC: AppParCurves_Constraint
        :rtype: None

        :param degreemin: default value is 3
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-05
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-05
        :type Tolerance2d: float
        :param cutting: default value is Standard_False
        :type cutting: bool
        :param FirstC: default value is AppParCurves_TangencyPoint
        :type FirstC: AppParCurves_Constraint
        :param LastC: default value is AppParCurves_TangencyPoint
        :type LastC: AppParCurves_Constraint
        :rtype: None

        """
        _BRepFill.BRepFill_ComputeCLine_swiginit(self, _BRepFill.new_BRepFill_ComputeCLine(*args))

    def Perform(self, *args):
        """
        :param Line:
        :type Line: BRepFill_MultiLine &
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_Perform(self, *args)


    def SetDegrees(self, *args):
        """
        :param degreemin:
        :type degreemin: int
        :param degreemax:
        :type degreemax: int
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_SetDegrees(self, *args)


    def SetTolerances(self, *args):
        """
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_SetTolerances(self, *args)


    def SetConstraints(self, *args):
        """
        :param FirstC:
        :type FirstC: AppParCurves_Constraint
        :param LastC:
        :type LastC: AppParCurves_Constraint
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_SetConstraints(self, *args)


    def IsAllApproximated(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_ComputeCLine_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_ComputeCLine_IsToleranceReached(self, *args)


    def Error(self, *args):
        """
        :param Index:
        :type Index: int
        :param tol3d:
        :type tol3d: float &
        :param tol2d:
        :type tol2d: float &
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_Error(self, *args)


    def NbMultiCurves(self, *args):
        """
        :rtype: int

        """
        return _BRepFill.BRepFill_ComputeCLine_NbMultiCurves(self, *args)


    def Value(self, *args):
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepFill.BRepFill_ComputeCLine_Value(self, *args)


    def Parameters(self, *args):
        """
        :param Index:
        :type Index: int
        :param firstp:
        :type firstp: float &
        :param lastp:
        :type lastp: float &
        :rtype: None

        """
        return _BRepFill.BRepFill_ComputeCLine_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ComputeCLine.Perform = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Perform, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetDegrees = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetDegrees, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetTolerances = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetTolerances, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetConstraints = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetConstraints, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.IsAllApproximated = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_IsAllApproximated, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.IsToleranceReached = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_IsToleranceReached, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Error = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Error, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.NbMultiCurves = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_NbMultiCurves, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Value = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Value, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Parameters = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Parameters, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ComputeCLine__kill_pointed, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine_swigregister = _BRepFill.BRepFill_ComputeCLine_swigregister
BRepFill_ComputeCLine_swigregister(BRepFill_ComputeCLine)

class BRepFill_CurveConstraint(OCC.GeomPlate.GeomPlate_CurveConstraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a constraint Order is the order of the constraint. The possible values for order are -1,0,1,2. Order i means constraints Gi Npt is the number of points associated with the constraint. TolDist is the maximum error to satisfy for G0 constraints TolAng is the maximum error to satisfy for G1 constraints TolCurv is the maximum error to satisfy for G2 constraints These errors can be replaced by laws of criterion.

        :param Boundary:
        :type Boundary: Handle_Adaptor3d_HCurveOnSurface &
        :param Order:
        :type Order: int
        :param NPt: default value is 10
        :type NPt: int
        :param TolDist: default value is 0.0001
        :type TolDist: float
        :param TolAng: default value is 0.01
        :type TolAng: float
        :param TolCurv: default value is 0.1
        :type TolCurv: float
        :rtype: None

        :param Boundary:
        :type Boundary: Handle_Adaptor3d_HCurve &
        :param Tang:
        :type Tang: int
        :param NPt: default value is 10
        :type NPt: int
        :param TolDist: default value is 0.0001
        :type TolDist: float
        :rtype: None

        """
        _BRepFill.BRepFill_CurveConstraint_swiginit(self, _BRepFill.new_BRepFill_CurveConstraint(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepFill_CurveConstraint self)"""
        return _BRepFill.BRepFill_CurveConstraint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_CurveConstraint self) -> Handle_BRepFill_CurveConstraint"""
        return _BRepFill.BRepFill_CurveConstraint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_CurveConstraint._kill_pointed = new_instancemethod(_BRepFill.BRepFill_CurveConstraint__kill_pointed, None, BRepFill_CurveConstraint)
BRepFill_CurveConstraint.GetHandle = new_instancemethod(_BRepFill.BRepFill_CurveConstraint_GetHandle, None, BRepFill_CurveConstraint)
BRepFill_CurveConstraint_swigregister = _BRepFill.BRepFill_CurveConstraint_swigregister
BRepFill_CurveConstraint_swigregister(BRepFill_CurveConstraint)

class Handle_BRepFill_CurveConstraint(OCC.GeomPlate.Handle_GeomPlate_CurveConstraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_CurveConstraint_swiginit(self, _BRepFill.new_Handle_BRepFill_CurveConstraint(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_CurveConstraint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_CurveConstraint.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_CurveConstraint_Nullify, None, Handle_BRepFill_CurveConstraint)
Handle_BRepFill_CurveConstraint.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_CurveConstraint_IsNull, None, Handle_BRepFill_CurveConstraint)
Handle_BRepFill_CurveConstraint.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_CurveConstraint_GetObject, None, Handle_BRepFill_CurveConstraint)
Handle_BRepFill_CurveConstraint._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_CurveConstraint__kill_pointed, None, Handle_BRepFill_CurveConstraint)
Handle_BRepFill_CurveConstraint_swigregister = _BRepFill.Handle_BRepFill_CurveConstraint_swigregister
Handle_BRepFill_CurveConstraint_swigregister(Handle_BRepFill_CurveConstraint)

def Handle_BRepFill_CurveConstraint_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_CurveConstraint_DownCast(AnObject)
Handle_BRepFill_CurveConstraint_DownCast = _BRepFill.Handle_BRepFill_CurveConstraint_DownCast

class BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfNodeDataMapOfShapeShape &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfNodeDataMapOfShapeShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_MAT_Node

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Key, None, BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_Value, None, BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_swigregister
BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapIteratorOfDataMapOfNodeDataMapOfShapeShape)

class BRepFill_DataMapIteratorOfDataMapOfNodeShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfNodeShape &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfNodeShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfNodeShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_MAT_Node

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfNodeShape.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfNodeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Key, None, BRepFill_DataMapIteratorOfDataMapOfNodeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_Value, None, BRepFill_DataMapIteratorOfDataMapOfNodeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfNodeShape)
BRepFill_DataMapIteratorOfDataMapOfNodeShape_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfNodeShape_swigregister
BRepFill_DataMapIteratorOfDataMapOfNodeShape_swigregister(BRepFill_DataMapIteratorOfDataMapOfNodeShape)

class BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfOrientedShapeListOfShape &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfOrientedShapeListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Key, None, BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_Value, None, BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_swigregister
BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapIteratorOfDataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Key, None, BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_Value, None, BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister
BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapIteratorOfDataMapOfShapeDataMapOfShapeListOfShape)

class BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeHArray2OfShape &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeHArray2OfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Key, None, BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_Value, None, BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_swigregister
BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapIteratorOfDataMapOfShapeHArray2OfShape)

class BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeSequenceOfPnt &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeSequenceOfPnt &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColgp_SequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Key, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_Value, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_swigregister
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfPnt)

class BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeSequenceOfReal &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepFill_DataMapOfShapeSequenceOfReal &
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal.Initialize = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Initialize, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal.Key = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Key, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal.Value = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_Value, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal__kill_pointed, None, BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_swigregister = _BRepFill.BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_swigregister
BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapIteratorOfDataMapOfShapeSequenceOfReal)

class BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :param I:
        :type I: TopTools_DataMapOfShapeShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape(*args))

    def Key(self, *args):
        """
        :rtype: Handle_MAT_Node

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape self) -> Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_Key, None, BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_Value, None, BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister
BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)

class Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape)

def Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeDataMapOfShapeShape_DownCast

class BRepFill_DataMapNodeOfDataMapOfNodeShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfNodeShape(*args))

    def Key(self, *args):
        """
        :rtype: Handle_MAT_Node

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfNodeShape self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfNodeShape self) -> Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfNodeShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_Key, None, BRepFill_DataMapNodeOfDataMapOfNodeShape)
BRepFill_DataMapNodeOfDataMapOfNodeShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_Value, None, BRepFill_DataMapNodeOfDataMapOfNodeShape)
BRepFill_DataMapNodeOfDataMapOfNodeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfNodeShape)
BRepFill_DataMapNodeOfDataMapOfNodeShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfNodeShape)
BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister
BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister(BRepFill_DataMapNodeOfDataMapOfNodeShape)

class Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape)

def Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfNodeShape_DownCast

class BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_ListOfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape self) -> Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_Key, None, BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_Value, None, BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister
BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)

class Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape)

def Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfOrientedShapeListOfShape_DownCast

class BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_DataMapOfShapeListOfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape self) -> Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_Key, None, BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_Value, None, BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister
BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)

class Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape)

def Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeDataMapOfShapeListOfShape_DownCast

class BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Handle_TopTools_HArray2OfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape self) -> Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_Key, None, BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_Value, None, BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister
BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)

class Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape)

def Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeHArray2OfShape_DownCast

class BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TColgp_SequenceOfPnt
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColgp_SequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt self) -> Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_Key, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_Value, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)

class Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt)

def Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfPnt_DownCast

class BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TColStd_SequenceOfReal &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal self)"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal self) -> Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal"""
        return _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.Key = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_Key, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.Value = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_Value, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal__kill_pointed, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.GetHandle = new_instancemethod(_BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_GetHandle, None, BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister = _BRepFill.BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister
BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)

class Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_Nullify, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_IsNull, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_GetObject, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal__kill_pointed, None, Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_swigregister(Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal)

def Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_DownCast(AnObject)
Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_DownCast = _BRepFill.Handle_BRepFill_DataMapNodeOfDataMapOfShapeSequenceOfReal_DownCast

class BRepFill_DataMapOfNodeDataMapOfShapeShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeDataMapOfShapeShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfNodeDataMapOfShapeShape &
        :rtype: BRepFill_DataMapOfNodeDataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfNodeDataMapOfShapeShape &
        :rtype: BRepFill_DataMapOfNodeDataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :param I:
        :type I: TopTools_DataMapOfShapeShape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: TopTools_DataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: TopTools_DataMapOfShapeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfNodeDataMapOfShapeShape self)"""
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfNodeDataMapOfShapeShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Assign, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Set, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ReSize, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Clear, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_IsBound, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_UnBind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find1, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind1, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape__kill_pointed, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister = _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister
BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapOfNodeDataMapOfShapeShape)

class BRepFill_DataMapOfNodeShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfNodeShape &
        :rtype: BRepFill_DataMapOfNodeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfNodeShape &
        :rtype: BRepFill_DataMapOfNodeShape

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :param I:
        :type I: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_Node &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfNodeShape self)"""
        return _BRepFill.BRepFill_DataMapOfNodeShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfNodeShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Assign, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Set, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ReSize, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Clear, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Bind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_IsBound, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_UnBind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Find, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Find1, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind1, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape__kill_pointed, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape_swigregister = _BRepFill.BRepFill_DataMapOfNodeShape_swigregister
BRepFill_DataMapOfNodeShape_swigregister(BRepFill_DataMapOfNodeShape)

class BRepFill_DataMapOfOrientedShapeListOfShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfOrientedShapeListOfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfOrientedShapeListOfShape &
        :rtype: BRepFill_DataMapOfOrientedShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfOrientedShapeListOfShape &
        :rtype: BRepFill_DataMapOfOrientedShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_ListOfShape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfOrientedShapeListOfShape self)"""
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfOrientedShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Assign, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Set, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ReSize, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Clear, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_IsBound, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_UnBind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find1, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind1, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape__kill_pointed, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swigregister
BRepFill_DataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape &
        :rtype: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape &
        :rtype: BRepFill_DataMapOfShapeDataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_DataMapOfShapeListOfShape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfShapeDataMapOfShapeListOfShape self)"""
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Assign, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Set, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ReSize, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Clear, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_IsBound, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_UnBind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find1, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind1, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape__kill_pointed, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)

class BRepFill_DataMapOfShapeHArray2OfShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeHArray2OfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeHArray2OfShape &
        :rtype: BRepFill_DataMapOfShapeHArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeHArray2OfShape &
        :rtype: BRepFill_DataMapOfShapeHArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Handle_TopTools_HArray2OfShape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfShapeHArray2OfShape self)"""
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfShapeHArray2OfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Assign, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Set, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ReSize, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Clear, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_IsBound, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_UnBind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find1, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind1, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape__kill_pointed, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape_swigregister = _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swigregister
BRepFill_DataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapOfShapeHArray2OfShape)

class BRepFill_DataMapOfShapeSequenceOfPnt(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfPnt(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeSequenceOfPnt &
        :rtype: BRepFill_DataMapOfShapeSequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeSequenceOfPnt &
        :rtype: BRepFill_DataMapOfShapeSequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TColgp_SequenceOfPnt
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TColgp_SequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TColgp_SequenceOfPnt

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfShapeSequenceOfPnt self)"""
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfShapeSequenceOfPnt.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Assign, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Set, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ReSize, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Clear, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_IsBound, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_UnBind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find1, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind1, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt__kill_pointed, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt_swigregister = _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swigregister
BRepFill_DataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapOfShapeSequenceOfPnt)

class BRepFill_DataMapOfShapeSequenceOfReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfReal(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeSequenceOfReal &
        :rtype: BRepFill_DataMapOfShapeSequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_DataMapOfShapeSequenceOfReal &
        :rtype: BRepFill_DataMapOfShapeSequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TColStd_SequenceOfReal &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DataMapOfShapeSequenceOfReal self)"""
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DataMapOfShapeSequenceOfReal.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Assign, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Set, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ReSize, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Clear, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_IsBound, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_UnBind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Find1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find1, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ChangeFind1 = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind1, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal__kill_pointed, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal_swigregister = _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swigregister
BRepFill_DataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapOfShapeSequenceOfReal)

class BRepFill_Draft(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Shape:
        :type Shape: TopoDS_Shape &
        :param Dir:
        :type Dir: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _BRepFill.BRepFill_Draft_swiginit(self, _BRepFill.new_BRepFill_Draft(*args))

    def SetOptions(self, *args):
        """
        :param Style: default value is BRepFill_Right
        :type Style: BRepFill_TransitionStyle
        :param AngleMin: default value is 0.01
        :type AngleMin: float
        :param AngleMax: default value is 3.0
        :type AngleMax: float
        :rtype: None

        """
        return _BRepFill.BRepFill_Draft_SetOptions(self, *args)


    def SetDraft(self, *args):
        """
        :param IsInternal: default value is Standard_False
        :type IsInternal: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Draft_SetDraft(self, *args)


    def Perform(self, *args):
        """
        :param LengthMax:
        :type LengthMax: float
        :rtype: None

        :param Surface:
        :type Surface: Handle_Geom_Surface &
        :param KeepInsideSurface: default value is Standard_True
        :type KeepInsideSurface: bool
        :rtype: None

        :param StopShape:
        :type StopShape: TopoDS_Shape &
        :param KeepOutSide: default value is Standard_True
        :type KeepOutSide: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Draft_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Draft_IsDone(self, *args)


    def Shell(self, *args):
        """
        * Returns the draft surface To have the complete shape you have to use the Shape() methode.

        :rtype: TopoDS_Shell

        """
        return _BRepFill.BRepFill_Draft_Shell(self, *args)


    def Generated(self, *args):
        """
        * Returns the list of shapes generated from the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_Draft_Generated(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Draft_Shape(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Draft.SetOptions = new_instancemethod(_BRepFill.BRepFill_Draft_SetOptions, None, BRepFill_Draft)
BRepFill_Draft.SetDraft = new_instancemethod(_BRepFill.BRepFill_Draft_SetDraft, None, BRepFill_Draft)
BRepFill_Draft.Perform = new_instancemethod(_BRepFill.BRepFill_Draft_Perform, None, BRepFill_Draft)
BRepFill_Draft.IsDone = new_instancemethod(_BRepFill.BRepFill_Draft_IsDone, None, BRepFill_Draft)
BRepFill_Draft.Shell = new_instancemethod(_BRepFill.BRepFill_Draft_Shell, None, BRepFill_Draft)
BRepFill_Draft.Generated = new_instancemethod(_BRepFill.BRepFill_Draft_Generated, None, BRepFill_Draft)
BRepFill_Draft.Shape = new_instancemethod(_BRepFill.BRepFill_Draft_Shape, None, BRepFill_Draft)
BRepFill_Draft._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Draft__kill_pointed, None, BRepFill_Draft)
BRepFill_Draft_swigregister = _BRepFill.BRepFill_Draft_swigregister
BRepFill_Draft_swigregister(BRepFill_Draft)

class BRepFill_EdgeFaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anEdge:
        :type anEdge: TopoDS_Edge &
        :param aFace:
        :type aFace: TopoDS_Face &
        :param anOrder:
        :type anOrder: GeomAbs_Shape
        :rtype: None

        """
        _BRepFill.BRepFill_EdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_EdgeFaceAndOrder(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_EdgeFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_EdgeFaceAndOrder__kill_pointed, None, BRepFill_EdgeFaceAndOrder)
BRepFill_EdgeFaceAndOrder_swigregister = _BRepFill.BRepFill_EdgeFaceAndOrder_swigregister
BRepFill_EdgeFaceAndOrder_swigregister(BRepFill_EdgeFaceAndOrder)

class BRepFill_Evolved(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Creates an evolved shape by sweeping the <Profile> along the <Spine>. <AxeProf> is used to set the position of <Profile> along <Spine> as follows: <AxeProf> slides on the profile with direction colinear to the normal to <Spine>, and its <XDirection> mixed with the tangent to <Spine>.

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Wire &
        :param AxeProf:
        :type AxeProf: gp_Ax3
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Solid: default value is Standard_False
        :type Solid: bool
        :rtype: None

        * Creates an evolved shape by sweeping the <Profile> along the <Spine>

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Profile:
        :type Profile: TopoDS_Wire &
        :param AxeProf:
        :type AxeProf: gp_Ax3
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Solid: default value is Standard_False
        :type Solid: bool
        :rtype: None

        """
        _BRepFill.BRepFill_Evolved_swiginit(self, _BRepFill.new_BRepFill_Evolved(*args))

    def Perform(self, *args):
        """
        * Performs an evolved shape by sweeping the <Profile> along the <Spine>

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Wire &
        :param AxeProf:
        :type AxeProf: gp_Ax3
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Solid: default value is Standard_False
        :type Solid: bool
        :rtype: None

        * Performs an evolved shape by sweeping the <Profile> along the <Spine>

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Profile:
        :type Profile: TopoDS_Wire &
        :param AxeProf:
        :type AxeProf: gp_Ax3
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Solid: default value is Standard_False
        :type Solid: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Evolved_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Evolved_IsDone(self, *args)


    def Shape(self, *args):
        """
        * returns the generated shape.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Evolved_Shape(self, *args)


    def GeneratedShapes(self, *args):
        """
        * Returns the shapes created from a subshape <SpineShape> of the spine and a subshape <ProfShape> on the profile.

        :param SpineShape:
        :type SpineShape: TopoDS_Shape &
        :param ProfShape:
        :type ProfShape: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_Evolved_GeneratedShapes(self, *args)


    def JoinType(self, *args):
        """
        :rtype: GeomAbs_JoinType

        """
        return _BRepFill.BRepFill_Evolved_JoinType(self, *args)


    def Top(self, *args):
        """
        * Return the face Top if <Solid> is True in the constructor.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Evolved_Top(self, *args)


    def Bottom(self, *args):
        """
        * Return the face Bottom if <Solid> is True in the constructor.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Evolved_Bottom(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Evolved.Perform = new_instancemethod(_BRepFill.BRepFill_Evolved_Perform, None, BRepFill_Evolved)
BRepFill_Evolved.IsDone = new_instancemethod(_BRepFill.BRepFill_Evolved_IsDone, None, BRepFill_Evolved)
BRepFill_Evolved.Shape = new_instancemethod(_BRepFill.BRepFill_Evolved_Shape, None, BRepFill_Evolved)
BRepFill_Evolved.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_Evolved_GeneratedShapes, None, BRepFill_Evolved)
BRepFill_Evolved.JoinType = new_instancemethod(_BRepFill.BRepFill_Evolved_JoinType, None, BRepFill_Evolved)
BRepFill_Evolved.Top = new_instancemethod(_BRepFill.BRepFill_Evolved_Top, None, BRepFill_Evolved)
BRepFill_Evolved.Bottom = new_instancemethod(_BRepFill.BRepFill_Evolved_Bottom, None, BRepFill_Evolved)
BRepFill_Evolved._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Evolved__kill_pointed, None, BRepFill_Evolved)
BRepFill_Evolved_swigregister = _BRepFill.BRepFill_Evolved_swigregister
BRepFill_Evolved_swigregister(BRepFill_Evolved)

class BRepFill_FaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aFace:
        :type aFace: TopoDS_Face &
        :param anOrder:
        :type anOrder: GeomAbs_Shape
        :rtype: None

        """
        _BRepFill.BRepFill_FaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_FaceAndOrder(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_FaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_FaceAndOrder__kill_pointed, None, BRepFill_FaceAndOrder)
BRepFill_FaceAndOrder_swigregister = _BRepFill.BRepFill_FaceAndOrder_swigregister
BRepFill_FaceAndOrder_swigregister(BRepFill_FaceAndOrder)

class BRepFill_Filling(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor

        :param Degree: default value is 3
        :type Degree: int
        :param NbPtsOnCur: default value is 15
        :type NbPtsOnCur: int
        :param NbIter: default value is 2
        :type NbIter: int
        :param Anisotropie: default value is Standard_False
        :type Anisotropie: bool
        :param Tol2d: default value is 0.00001
        :type Tol2d: float
        :param Tol3d: default value is 0.0001
        :type Tol3d: float
        :param TolAng: default value is 0.01
        :type TolAng: float
        :param TolCurv: default value is 0.1
        :type TolCurv: float
        :param MaxDeg: default value is 8
        :type MaxDeg: int
        :param MaxSegments: default value is 9
        :type MaxSegments: int
        :rtype: None

        """
        _BRepFill.BRepFill_Filling_swiginit(self, _BRepFill.new_BRepFill_Filling(*args))

    def SetConstrParam(self, *args):
        """
        * Sets the values of Tolerances used to control the constraint. //!	Tol2d: //!	Tol3d: it is the maximum distance allowed between the support surface //!	 and the constraints //!	TolAng: it is the maximum angle allowed between the normal of the surface //!	 and the constraints //!	TolCurv: it is the maximum difference of curvature allowed between //!	 the surface and the constraint

        :param Tol2d: default value is 0.00001
        :type Tol2d: float
        :param Tol3d: default value is 0.0001
        :type Tol3d: float
        :param TolAng: default value is 0.01
        :type TolAng: float
        :param TolCurv: default value is 0.1
        :type TolCurv: float
        :rtype: None

        """
        return _BRepFill.BRepFill_Filling_SetConstrParam(self, *args)


    def SetResolParam(self, *args):
        """
        * Sets the parameters used for resolution. //!	The default values of these parameters have been chosen for a good //!	ratio quality/performance. //!	Degree: it is the order of energy criterion to minimize for computing //!	 the deformation of the surface. //!	 The default value is 3 //!	 The recommanded value is i+2 where i is the maximum order of the //!	 constraints. //!	NbPtsOnCur: it is the average number of points for discretisation //!	 of the edges. //!	NbIter: it is the maximum number of iterations of the process. //!	 For each iteration the number of discretisation points is //!	 increased. //!	Anisotropie:

        :param Degree: default value is 3
        :type Degree: int
        :param NbPtsOnCur: default value is 15
        :type NbPtsOnCur: int
        :param NbIter: default value is 2
        :type NbIter: int
        :param Anisotropie: default value is Standard_False
        :type Anisotropie: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Filling_SetResolParam(self, *args)


    def SetApproxParam(self, *args):
        """
        * Sets the parameters used for approximation of the surface

        :param MaxDeg: default value is 8
        :type MaxDeg: int
        :param MaxSegments: default value is 9
        :type MaxSegments: int
        :rtype: None

        """
        return _BRepFill.BRepFill_Filling_SetApproxParam(self, *args)


    def LoadInitSurface(self, *args):
        """
        * Loads the initial Surface

        :param aFace:
        :type aFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFill.BRepFill_Filling_LoadInitSurface(self, *args)


    def Add(self, *args):
        """
        * Adds a new constraint which also defines an edge of the wire //!	 of the face //!	Order: Order of the constraint: //!	 GeomAbs_C0 : the surface has to pass by 3D representation //!	  of the edge //!	 GeomAbs_G1 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency with the first //!	  face of the edge //!	 GeomAbs_G2 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency and curvature //!	  with the first face of the edge.

        :param anEdge:
        :type anEdge: TopoDS_Edge &
        :param Order:
        :type Order: GeomAbs_Shape
        :param IsBound: default value is Standard_True
        :type IsBound: bool
        :rtype: int

        * Adds a new constraint which also defines an edge of the wire //!	 of the face //!	Order: Order of the constraint: //!	 GeomAbs_C0 : the surface has to pass by 3D representation //!	  of the edge //!	 GeomAbs_G1 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency with the //!	  given face //!	 GeomAbs_G2 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency and curvature //!	  with the given face.

        :param anEdge:
        :type anEdge: TopoDS_Edge &
        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :param IsBound: default value is Standard_True
        :type IsBound: bool
        :rtype: int

        * Adds a free constraint on a face. The corresponding edge has to //!	be automatically recomputed. //!	It is always a bound.

        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :rtype: int

        * Adds a punctual constraint

        :param Point:
        :type Point: gp_Pnt
        :rtype: int

        * Adds a punctual constraint.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :rtype: int

        """
        return _BRepFill.BRepFill_Filling_Add(self, *args)


    def Build(self, *args):
        """
        * Builds the resulting faces

        :rtype: None

        """
        return _BRepFill.BRepFill_Filling_Build(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Filling_IsDone(self, *args)


    def Face(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepFill.BRepFill_Filling_Face(self, *args)


    def Generated(self, *args):
        """
        * Returns the list of shapes generated from the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_Filling_Generated(self, *args)


    def G0Error(self, *args):
        """
        :rtype: float

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepFill.BRepFill_Filling_G0Error(self, *args)


    def G1Error(self, *args):
        """
        :rtype: float

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepFill.BRepFill_Filling_G1Error(self, *args)


    def G2Error(self, *args):
        """
        :rtype: float

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepFill.BRepFill_Filling_G2Error(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Filling.SetConstrParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetConstrParam, None, BRepFill_Filling)
BRepFill_Filling.SetResolParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetResolParam, None, BRepFill_Filling)
BRepFill_Filling.SetApproxParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetApproxParam, None, BRepFill_Filling)
BRepFill_Filling.LoadInitSurface = new_instancemethod(_BRepFill.BRepFill_Filling_LoadInitSurface, None, BRepFill_Filling)
BRepFill_Filling.Add = new_instancemethod(_BRepFill.BRepFill_Filling_Add, None, BRepFill_Filling)
BRepFill_Filling.Build = new_instancemethod(_BRepFill.BRepFill_Filling_Build, None, BRepFill_Filling)
BRepFill_Filling.IsDone = new_instancemethod(_BRepFill.BRepFill_Filling_IsDone, None, BRepFill_Filling)
BRepFill_Filling.Face = new_instancemethod(_BRepFill.BRepFill_Filling_Face, None, BRepFill_Filling)
BRepFill_Filling.Generated = new_instancemethod(_BRepFill.BRepFill_Filling_Generated, None, BRepFill_Filling)
BRepFill_Filling.G0Error = new_instancemethod(_BRepFill.BRepFill_Filling_G0Error, None, BRepFill_Filling)
BRepFill_Filling.G1Error = new_instancemethod(_BRepFill.BRepFill_Filling_G1Error, None, BRepFill_Filling)
BRepFill_Filling.G2Error = new_instancemethod(_BRepFill.BRepFill_Filling_G2Error, None, BRepFill_Filling)
BRepFill_Filling._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Filling__kill_pointed, None, BRepFill_Filling)
BRepFill_Filling_swigregister = _BRepFill.BRepFill_Filling_swigregister
BRepFill_Filling_swigregister(BRepFill_Filling)

class BRepFill_Generator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFill.BRepFill_Generator_swiginit(self, _BRepFill.new_BRepFill_Generator(*args))

    def AddWire(self, *args):
        """
        :param Wire:
        :type Wire: TopoDS_Wire &
        :rtype: None

        """
        return _BRepFill.BRepFill_Generator_AddWire(self, *args)


    def Perform(self, *args):
        """
        * Compute the shell.

        :rtype: None

        """
        return _BRepFill.BRepFill_Generator_Perform(self, *args)


    def Shell(self, *args):
        """
        :rtype: TopoDS_Shell

        """
        return _BRepFill.BRepFill_Generator_Shell(self, *args)


    def Generated(self, *args):
        """
        * Returns all the shapes created

        :rtype: TopTools_DataMapOfShapeListOfShape

        """
        return _BRepFill.BRepFill_Generator_Generated(self, *args)


    def GeneratedShapes(self, *args):
        """
        * Returns the shapes created from a subshape <SSection> of a section.

        :param SSection:
        :type SSection: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_Generator_GeneratedShapes(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Generator.AddWire = new_instancemethod(_BRepFill.BRepFill_Generator_AddWire, None, BRepFill_Generator)
BRepFill_Generator.Perform = new_instancemethod(_BRepFill.BRepFill_Generator_Perform, None, BRepFill_Generator)
BRepFill_Generator.Shell = new_instancemethod(_BRepFill.BRepFill_Generator_Shell, None, BRepFill_Generator)
BRepFill_Generator.Generated = new_instancemethod(_BRepFill.BRepFill_Generator_Generated, None, BRepFill_Generator)
BRepFill_Generator.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_Generator_GeneratedShapes, None, BRepFill_Generator)
BRepFill_Generator._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Generator__kill_pointed, None, BRepFill_Generator)
BRepFill_Generator_swigregister = _BRepFill.BRepFill_Generator_swigregister
BRepFill_Generator_swigregister(BRepFill_Generator)

class BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: TopoDS_Shape &
        :param K2:
        :type K2: int
        :param I:
        :type I: TopTools_ListOfShape &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape(*args))

    def Key1(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape self) -> Standard_Integer"""
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape self, Standard_Integer value)"""
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Next2(self, *args)


    def Value(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape self)"""
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape self) -> Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape"""
        return _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.Key1 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Key1, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.GetKey2 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_GetKey2, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.SetKey2 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_SetKey2, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.Next2 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Next2, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.Value = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Value, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape__kill_pointed, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.GetHandle = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_GetHandle, None, BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister
BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)

class Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_Nullify, None, Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_IsNull, None, Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_GetObject, None, Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape__kill_pointed, None, Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_swigregister(Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape)

def Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_DownCast(AnObject)
Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_DownCast = _BRepFill.Handle_BRepFill_IndexedDataMapNodeOfIndexedDataMapOfOrientedShapeListOfShape_DownCast

class BRepFill_IndexedDataMapOfOrientedShapeListOfShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_IndexedDataMapOfOrientedShapeListOfShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_IndexedDataMapOfOrientedShapeListOfShape &
        :rtype: BRepFill_IndexedDataMapOfOrientedShapeListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_IndexedDataMapOfOrientedShapeListOfShape &
        :rtype: BRepFill_IndexedDataMapOfOrientedShapeListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_ListOfShape &
        :rtype: int

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: TopoDS_Shape &
        :param T:
        :type T: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindKey(self, *args)


    def FindFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromIndex(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: int

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindIndex(self, *args)


    def FindFromKey(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey(self, *args)


    def ChangeFromKey(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_IndexedDataMapOfOrientedShapeListOfShape self)"""
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Assign, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Set, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ReSize, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Clear, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Add = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Add, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Substitute = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Substitute, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.RemoveLast = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveLast, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Contains = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Contains, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindFromIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeFromIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindFromKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeFromKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindFromKey1 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey1, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeFromKey1 = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey1, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape._kill_pointed = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape__kill_pointed, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister
BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_IndexedDataMapOfOrientedShapeListOfShape)

class BRepFill_ListIteratorOfListOfOffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListIteratorOfListOfOffsetWire(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepFill_OffsetWire

        """
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ListIteratorOfListOfOffsetWire.Initialize = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Initialize, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.More = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_More, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.Next = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Next, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.Value = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Value, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire__kill_pointed, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire_swigregister = _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swigregister
BRepFill_ListIteratorOfListOfOffsetWire_swigregister(BRepFill_ListIteratorOfListOfOffsetWire)

class BRepFill_ListNodeOfListOfOffsetWire(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepFill_OffsetWire &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_ListNodeOfListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListNodeOfListOfOffsetWire(*args))

    def Value(self, *args):
        """
        :rtype: BRepFill_OffsetWire

        """
        return _BRepFill.BRepFill_ListNodeOfListOfOffsetWire_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_ListNodeOfListOfOffsetWire self)"""
        return _BRepFill.BRepFill_ListNodeOfListOfOffsetWire__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_ListNodeOfListOfOffsetWire self) -> Handle_BRepFill_ListNodeOfListOfOffsetWire"""
        return _BRepFill.BRepFill_ListNodeOfListOfOffsetWire_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ListNodeOfListOfOffsetWire.Value = new_instancemethod(_BRepFill.BRepFill_ListNodeOfListOfOffsetWire_Value, None, BRepFill_ListNodeOfListOfOffsetWire)
BRepFill_ListNodeOfListOfOffsetWire._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ListNodeOfListOfOffsetWire__kill_pointed, None, BRepFill_ListNodeOfListOfOffsetWire)
BRepFill_ListNodeOfListOfOffsetWire.GetHandle = new_instancemethod(_BRepFill.BRepFill_ListNodeOfListOfOffsetWire_GetHandle, None, BRepFill_ListNodeOfListOfOffsetWire)
BRepFill_ListNodeOfListOfOffsetWire_swigregister = _BRepFill.BRepFill_ListNodeOfListOfOffsetWire_swigregister
BRepFill_ListNodeOfListOfOffsetWire_swigregister(BRepFill_ListNodeOfListOfOffsetWire)

class Handle_BRepFill_ListNodeOfListOfOffsetWire(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_swiginit(self, _BRepFill.new_Handle_BRepFill_ListNodeOfListOfOffsetWire(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_ListNodeOfListOfOffsetWire.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_Nullify, None, Handle_BRepFill_ListNodeOfListOfOffsetWire)
Handle_BRepFill_ListNodeOfListOfOffsetWire.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_IsNull, None, Handle_BRepFill_ListNodeOfListOfOffsetWire)
Handle_BRepFill_ListNodeOfListOfOffsetWire.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_GetObject, None, Handle_BRepFill_ListNodeOfListOfOffsetWire)
Handle_BRepFill_ListNodeOfListOfOffsetWire._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire__kill_pointed, None, Handle_BRepFill_ListNodeOfListOfOffsetWire)
Handle_BRepFill_ListNodeOfListOfOffsetWire_swigregister = _BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_swigregister
Handle_BRepFill_ListNodeOfListOfOffsetWire_swigregister(Handle_BRepFill_ListNodeOfListOfOffsetWire)

def Handle_BRepFill_ListNodeOfListOfOffsetWire_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_DownCast(AnObject)
Handle_BRepFill_ListNodeOfListOfOffsetWire_DownCast = _BRepFill.Handle_BRepFill_ListNodeOfListOfOffsetWire_DownCast

class BRepFill_ListOfOffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFill.BRepFill_ListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListOfOffsetWire(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: BRepFill_OffsetWire &
        :rtype: None

        :param I:
        :type I: BRepFill_OffsetWire &
        :param theIt:
        :type theIt: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: BRepFill_OffsetWire &
        :rtype: None

        :param I:
        :type I: BRepFill_OffsetWire &
        :param theIt:
        :type theIt: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Append(self, *args)


    def First(self, *args):
        """
        :rtype: BRepFill_OffsetWire

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepFill_OffsetWire

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: BRepFill_OffsetWire &
        :param It:
        :type It: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :param It:
        :type It: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: BRepFill_OffsetWire &
        :param It:
        :type It: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        :param Other:
        :type Other: BRepFill_ListOfOffsetWire &
        :param It:
        :type It: BRepFill_ListIteratorOfListOfOffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_ListOfOffsetWire_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ListOfOffsetWire.Assign = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Assign, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Set = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Set, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Extent = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Extent, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Clear = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Clear, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.IsEmpty = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_IsEmpty, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Prepend = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Prepend, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Append = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Append, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.First = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_First, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Last = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Last, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.RemoveFirst = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_RemoveFirst, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Remove = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Remove, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.InsertBefore = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_InsertBefore, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.InsertAfter = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_InsertAfter, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire__kill_pointed, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire_swigregister = _BRepFill.BRepFill_ListOfOffsetWire_swigregister
BRepFill_ListOfOffsetWire_swigregister(BRepFill_ListOfOffsetWire)

class BRepFill_LocationLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetStatus(self, *args):
        """
        * Return a error status, if the status is not PipeOk then it exist a parameter tlike the law is not valuable for t.

        :rtype: GeomFill_PipeError

        """
        return _BRepFill.BRepFill_LocationLaw_GetStatus(self, *args)


    def TransformInG0Law(self, *args):
        """
        * Apply a linear transformation on each law, to have continuity of the global law beetween the edges.

        :rtype: void

        """
        return _BRepFill.BRepFill_LocationLaw_TransformInG0Law(self, *args)


    def TransformInCompatibleLaw(self, *args):
        """
        * Apply a linear transformation on each law, to reduce the dicontinuities of law at one rotation.

        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: void

        """
        return _BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw(self, *args)


    def DeleteTransform(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_DeleteTransform(self, *args)


    def NbHoles(self, *args):
        """
        :param Tol: default value is 1.0e-7
        :type Tol: float
        :rtype: int

        """
        return _BRepFill.BRepFill_LocationLaw_NbHoles(self, *args)


    def Holes(self, *args):
        """
        :param Interval:
        :type Interval: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_Holes(self, *args)


    def NbLaw(self, *args):
        """
        * Return the number of elementary Law

        :rtype: int

        """
        return _BRepFill.BRepFill_LocationLaw_NbLaw(self, *args)


    def law(self, *args):
        """
        * Return the elementary Law of rank <Index> <Index> have to be in [1, NbLaw()]

        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _BRepFill.BRepFill_LocationLaw_law(self, *args)


    def Wire(self, *args):
        """
        * return the path

        :rtype: TopoDS_Wire

        """
        return _BRepFill.BRepFill_LocationLaw_Wire(self, *args)


    def Edge(self, *args):
        """
        * Return the Edge of rank <Index> in the path <Index> have to be in [1, NbLaw()]

        :param Index:
        :type Index: int
        :rtype: TopoDS_Edge

        """
        return _BRepFill.BRepFill_LocationLaw_Edge(self, *args)


    def Vertex(self, *args):
        """
        * Return the vertex of rank <Index> in the path <Index> have to be in [0, NbLaw()]

        :param Index:
        :type Index: int
        :rtype: TopoDS_Vertex

        """
        return _BRepFill.BRepFill_LocationLaw_Vertex(self, *args)


    def PerformVertex(self, *args):
        """
        * Compute <OutputVertex> like a transformation of <InputVertex> the transformation is given by evaluation of the location law in the vertex of rank <Index>. <Location> is used to manage discontinuities : - -1 : The law before the vertex is used. - 1 : The law after the vertex is used. - 0 : Average of the both laws is used.

        :param Index:
        :type Index: int
        :param InputVertex:
        :type InputVertex: TopoDS_Vertex &
        :param TolMin:
        :type TolMin: float
        :param OutputVertex:
        :type OutputVertex: TopoDS_Vertex &
        :param Location: default value is 0
        :type Location: int
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_PerformVertex(self, *args)


    def CurvilinearBounds(self, *args):
        """
        * //!Return the Curvilinear Bounds of the <Index> Law

        :param Index:
        :type Index: int
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_CurvilinearBounds(self, *args)


    def IsClosed(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_LocationLaw_IsClosed(self, *args)


    def IsG1(self, *args):
        """
        * Compute the Law's continuity beetween 2 edges of the path The result can be : -1 : Case Not connex 0 : It is connex (G0) 1 : It is tangent (G1)

        :param Index:
        :type Index: int
        :param SpatialTolerance: default value is 1.0e-7
        :type SpatialTolerance: float
        :param AngularTolerance: default value is 1.0e-4
        :type AngularTolerance: float
        :rtype: int

        """
        return _BRepFill.BRepFill_LocationLaw_IsG1(self, *args)


    def D0(self, *args):
        """
        * Apply the Law to a shape, for a given Curnilinear abscissa

        :param Abscissa:
        :type Abscissa: float
        :param Section:
        :type Section: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_D0(self, *args)


    def Parameter(self, *args):
        """
        * Find the index Law and the parmaeter, for a given Curnilinear abscissa

        :param Abscissa:
        :type Abscissa: float
        :param Index:
        :type Index: int &
        :param Param:
        :type Param: float &
        :rtype: None

        """
        return _BRepFill.BRepFill_LocationLaw_Parameter(self, *args)


    def Abscissa(self, *args):
        """
        * //!Return the curvilinear abscissa corresponding to a point  of the path, defined by <Index> of Edge and a parameter on the edge.

        :param Index:
        :type Index: int
        :param Param:
        :type Param: float
        :rtype: float

        """
        return _BRepFill.BRepFill_LocationLaw_Abscissa(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_LocationLaw self)"""
        return _BRepFill.BRepFill_LocationLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_LocationLaw self) -> Handle_BRepFill_LocationLaw"""
        return _BRepFill.BRepFill_LocationLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_LocationLaw.GetStatus = new_instancemethod(_BRepFill.BRepFill_LocationLaw_GetStatus, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.TransformInG0Law = new_instancemethod(_BRepFill.BRepFill_LocationLaw_TransformInG0Law, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.TransformInCompatibleLaw = new_instancemethod(_BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.DeleteTransform = new_instancemethod(_BRepFill.BRepFill_LocationLaw_DeleteTransform, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.NbHoles = new_instancemethod(_BRepFill.BRepFill_LocationLaw_NbHoles, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Holes = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Holes, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.NbLaw = new_instancemethod(_BRepFill.BRepFill_LocationLaw_NbLaw, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.law = new_instancemethod(_BRepFill.BRepFill_LocationLaw_law, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Wire = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Wire, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Edge = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Edge, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Vertex = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Vertex, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.PerformVertex = new_instancemethod(_BRepFill.BRepFill_LocationLaw_PerformVertex, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.CurvilinearBounds = new_instancemethod(_BRepFill.BRepFill_LocationLaw_CurvilinearBounds, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.IsClosed = new_instancemethod(_BRepFill.BRepFill_LocationLaw_IsClosed, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.IsG1 = new_instancemethod(_BRepFill.BRepFill_LocationLaw_IsG1, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.D0 = new_instancemethod(_BRepFill.BRepFill_LocationLaw_D0, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Parameter = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Parameter, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Abscissa = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Abscissa, None, BRepFill_LocationLaw)
BRepFill_LocationLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_LocationLaw__kill_pointed, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_LocationLaw_GetHandle, None, BRepFill_LocationLaw)
BRepFill_LocationLaw_swigregister = _BRepFill.BRepFill_LocationLaw_swigregister
BRepFill_LocationLaw_swigregister(BRepFill_LocationLaw)

class Handle_BRepFill_LocationLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_LocationLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_LocationLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_LocationLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_LocationLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_LocationLaw_Nullify, None, Handle_BRepFill_LocationLaw)
Handle_BRepFill_LocationLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_LocationLaw_IsNull, None, Handle_BRepFill_LocationLaw)
Handle_BRepFill_LocationLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_LocationLaw_GetObject, None, Handle_BRepFill_LocationLaw)
Handle_BRepFill_LocationLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_LocationLaw__kill_pointed, None, Handle_BRepFill_LocationLaw)
Handle_BRepFill_LocationLaw_swigregister = _BRepFill.Handle_BRepFill_LocationLaw_swigregister
Handle_BRepFill_LocationLaw_swigregister(Handle_BRepFill_LocationLaw)

def Handle_BRepFill_LocationLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_LocationLaw_DownCast(AnObject)
Handle_BRepFill_LocationLaw_DownCast = _BRepFill.Handle_BRepFill_LocationLaw_DownCast

class BRepFill_MultiLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Face1:
        :type Face1: TopoDS_Face &
        :param Face2:
        :type Face2: TopoDS_Face &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Inv1:
        :type Inv1: bool
        :param Inv2:
        :type Inv2: bool
        :param Bissec:
        :type Bissec: Handle_Geom2d_Curve &
        :rtype: None

        """
        _BRepFill.BRepFill_MultiLine_swiginit(self, _BRepFill.new_BRepFill_MultiLine(*args))

    def IsParticularCase(self, *args):
        """
        * Search if the Projection of the Bissectrice on the faces needs an approximation or not. Returns true if the approximation is not needed.

        :rtype: bool

        """
        return _BRepFill.BRepFill_MultiLine_IsParticularCase(self, *args)


    def Continuity(self, *args):
        """
        * Returns the continuity betwwen the two faces seShape from GeomAbsparated by myBis.

        :rtype: GeomAbs_Shape

        """
        return _BRepFill.BRepFill_MultiLine_Continuity(self, *args)


    def Curves(self, *args):
        """
        * raises if IsParticularCase is <False>.

        :param Curve:
        :type Curve: Handle_Geom_Curve &
        :param PCurve1:
        :type PCurve1: Handle_Geom2d_Curve &
        :param PCurve2:
        :type PCurve2: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _BRepFill.BRepFill_MultiLine_Curves(self, *args)


    def FirstParameter(self, *args):
        """
        * returns the first parameter of the Bissectrice.

        :rtype: float

        """
        return _BRepFill.BRepFill_MultiLine_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        * returns the last parameter of the Bissectrice.

        :rtype: float

        """
        return _BRepFill.BRepFill_MultiLine_LastParameter(self, *args)


    def Value(self, *args):
        """
        * Returns the current point on the 3d curve

        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _BRepFill.BRepFill_MultiLine_Value(self, *args)


    def ValueOnF1(self, *args):
        """
        * returns the current point on the PCurve of the first face

        :param U:
        :type U: float
        :rtype: gp_Pnt2d

        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF1(self, *args)


    def ValueOnF2(self, *args):
        """
        * returns the current point on the PCurve of the first face

        :param U:
        :type U: float
        :rtype: gp_Pnt2d

        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF2(self, *args)


    def Value3dOnF1OnF2(self, *args):
        """
        :param U:
        :type U: float
        :param P3d:
        :type P3d: gp_Pnt
        :param PF1:
        :type PF1: gp_Pnt2d
        :param PF2:
        :type PF2: gp_Pnt2d
        :rtype: None

        """
        return _BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_MultiLine.IsParticularCase = new_instancemethod(_BRepFill.BRepFill_MultiLine_IsParticularCase, None, BRepFill_MultiLine)
BRepFill_MultiLine.Continuity = new_instancemethod(_BRepFill.BRepFill_MultiLine_Continuity, None, BRepFill_MultiLine)
BRepFill_MultiLine.Curves = new_instancemethod(_BRepFill.BRepFill_MultiLine_Curves, None, BRepFill_MultiLine)
BRepFill_MultiLine.FirstParameter = new_instancemethod(_BRepFill.BRepFill_MultiLine_FirstParameter, None, BRepFill_MultiLine)
BRepFill_MultiLine.LastParameter = new_instancemethod(_BRepFill.BRepFill_MultiLine_LastParameter, None, BRepFill_MultiLine)
BRepFill_MultiLine.Value = new_instancemethod(_BRepFill.BRepFill_MultiLine_Value, None, BRepFill_MultiLine)
BRepFill_MultiLine.ValueOnF1 = new_instancemethod(_BRepFill.BRepFill_MultiLine_ValueOnF1, None, BRepFill_MultiLine)
BRepFill_MultiLine.ValueOnF2 = new_instancemethod(_BRepFill.BRepFill_MultiLine_ValueOnF2, None, BRepFill_MultiLine)
BRepFill_MultiLine.Value3dOnF1OnF2 = new_instancemethod(_BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2, None, BRepFill_MultiLine)
BRepFill_MultiLine._kill_pointed = new_instancemethod(_BRepFill.BRepFill_MultiLine__kill_pointed, None, BRepFill_MultiLine)
BRepFill_MultiLine_swigregister = _BRepFill.BRepFill_MultiLine_swigregister
BRepFill_MultiLine_swigregister(BRepFill_MultiLine)

class BRepFill_MultiLineTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        * returns the first parameter of the Line.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: float

        """
        return _BRepFill.BRepFill_MultiLineTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        * returns the last parameter of the Line.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: float

        """
        return _BRepFill.BRepFill_MultiLineTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def NbP2d(*args):
        """
        * Returns the number of 2d points of a MLine

        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: int

        """
        return _BRepFill.BRepFill_MultiLineTool_NbP2d(*args)

    NbP2d = staticmethod(NbP2d)

    def NbP3d(*args):
        """
        * Returns the number of 3d points of a MLine.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :rtype: int

        """
        return _BRepFill.BRepFill_MultiLineTool_NbP3d(*args)

    NbP3d = staticmethod(NbP3d)

    def Value(*args):
        """
        * returns the 3d points of the multipoint <MPointIndex> when only 3d points exist.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: void

        * returns the 2d points of the multipoint <MPointIndex> when only 2d points exist.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        * returns the 3d and 2d points of the multipoint <MPointIndex>.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        """
        return _BRepFill.BRepFill_MultiLineTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        * returns the 3d derivative values of the multipoint <MPointIndex> when only 3d points exist. returns False if the derivative cannot be computed.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        * returns the 2d derivative values of the multipoint <MPointIndex> only when 2d points exist. returns False if the derivative cannot be computed.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        * returns the 3d and 2d derivative values of the multipoint <MPointIndex>. returns False if the derivative cannot be computed.

        :param ML:
        :type ML: BRepFill_MultiLine &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _BRepFill.BRepFill_MultiLineTool_D1(*args)

    D1 = staticmethod(D1)

    def __init__(self):
        _BRepFill.BRepFill_MultiLineTool_swiginit(self, _BRepFill.new_BRepFill_MultiLineTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_MultiLineTool._kill_pointed = new_instancemethod(_BRepFill.BRepFill_MultiLineTool__kill_pointed, None, BRepFill_MultiLineTool)
BRepFill_MultiLineTool_swigregister = _BRepFill.BRepFill_MultiLineTool_swigregister
BRepFill_MultiLineTool_swigregister(BRepFill_MultiLineTool)

def BRepFill_MultiLineTool_FirstParameter(*args):
    """
    * returns the first parameter of the Line.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :rtype: float

    """
    return _BRepFill.BRepFill_MultiLineTool_FirstParameter(*args)

def BRepFill_MultiLineTool_LastParameter(*args):
    """
    * returns the last parameter of the Line.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :rtype: float

    """
    return _BRepFill.BRepFill_MultiLineTool_LastParameter(*args)

def BRepFill_MultiLineTool_NbP2d(*args):
    """
    * Returns the number of 2d points of a MLine

    :param ML:
    :type ML: BRepFill_MultiLine &
    :rtype: int

    """
    return _BRepFill.BRepFill_MultiLineTool_NbP2d(*args)

def BRepFill_MultiLineTool_NbP3d(*args):
    """
    * Returns the number of 3d points of a MLine.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :rtype: int

    """
    return _BRepFill.BRepFill_MultiLineTool_NbP3d(*args)

def BRepFill_MultiLineTool_Value(*args):
    """
    * returns the 3d points of the multipoint <MPointIndex> when only 3d points exist.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :rtype: void

    * returns the 2d points of the multipoint <MPointIndex> when only 2d points exist.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    * returns the 3d and 2d points of the multipoint <MPointIndex>.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    """
    return _BRepFill.BRepFill_MultiLineTool_Value(*args)

def BRepFill_MultiLineTool_D1(*args):
    """
    * returns the 3d derivative values of the multipoint <MPointIndex> when only 3d points exist. returns False if the derivative cannot be computed.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    * returns the 2d derivative values of the multipoint <MPointIndex> only when 2d points exist. returns False if the derivative cannot be computed.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    * returns the 3d and 2d derivative values of the multipoint <MPointIndex>. returns False if the derivative cannot be computed.

    :param ML:
    :type ML: BRepFill_MultiLine &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _BRepFill.BRepFill_MultiLineTool_D1(*args)

class BRepFill_MyLeastSquareOfComputeCLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepFill_MultiLine &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Deg:
        :type Deg: int
        :param NbPoints: default value is 24
        :type NbPoints: int
        :rtype: None

        """
        _BRepFill.BRepFill_MyLeastSquareOfComputeCLine_swiginit(self, _BRepFill.new_BRepFill_MyLeastSquareOfComputeCLine(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_MyLeastSquareOfComputeCLine_IsDone(self, *args)


    def Value(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepFill.BRepFill_MyLeastSquareOfComputeCLine_Value(self, *args)


    def Error(self, *args):
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepFill.BRepFill_MyLeastSquareOfComputeCLine_Error(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_MyLeastSquareOfComputeCLine.IsDone = new_instancemethod(_BRepFill.BRepFill_MyLeastSquareOfComputeCLine_IsDone, None, BRepFill_MyLeastSquareOfComputeCLine)
BRepFill_MyLeastSquareOfComputeCLine.Value = new_instancemethod(_BRepFill.BRepFill_MyLeastSquareOfComputeCLine_Value, None, BRepFill_MyLeastSquareOfComputeCLine)
BRepFill_MyLeastSquareOfComputeCLine.Error = new_instancemethod(_BRepFill.BRepFill_MyLeastSquareOfComputeCLine_Error, None, BRepFill_MyLeastSquareOfComputeCLine)
BRepFill_MyLeastSquareOfComputeCLine._kill_pointed = new_instancemethod(_BRepFill.BRepFill_MyLeastSquareOfComputeCLine__kill_pointed, None, BRepFill_MyLeastSquareOfComputeCLine)
BRepFill_MyLeastSquareOfComputeCLine_swigregister = _BRepFill.BRepFill_MyLeastSquareOfComputeCLine_swigregister
BRepFill_MyLeastSquareOfComputeCLine_swigregister(BRepFill_MyLeastSquareOfComputeCLine)

class BRepFill_OffsetAncestors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Paral:
        :type Paral: BRepFill_OffsetWire &
        :rtype: None

        """
        _BRepFill.BRepFill_OffsetAncestors_swiginit(self, _BRepFill.new_BRepFill_OffsetAncestors(*args))

    def Perform(self, *args):
        """
        :param Paral:
        :type Paral: BRepFill_OffsetWire &
        :rtype: None

        """
        return _BRepFill.BRepFill_OffsetAncestors_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_OffsetAncestors_IsDone(self, *args)


    def HasAncestor(self, *args):
        """
        :param S1:
        :type S1: TopoDS_Edge &
        :rtype: bool

        """
        return _BRepFill.BRepFill_OffsetAncestors_HasAncestor(self, *args)


    def Ancestor(self, *args):
        """
        * may return a Null Shape if S1 is not a subShape of <Paral>; if Perform is not done.

        :param S1:
        :type S1: TopoDS_Edge &
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_OffsetAncestors_Ancestor(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_OffsetAncestors.Perform = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_Perform, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.IsDone = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_IsDone, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.HasAncestor = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_HasAncestor, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.Ancestor = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_Ancestor, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors._kill_pointed = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors__kill_pointed, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors_swigregister = _BRepFill.BRepFill_OffsetAncestors_swigregister
BRepFill_OffsetAncestors_swigregister(BRepFill_OffsetAncestors)

class BRepFill_OffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        _BRepFill.BRepFill_OffsetWire_swiginit(self, _BRepFill.new_BRepFill_OffsetWire(*args))

    def Init(self, *args):
        """
        * Initialize the evaluation of Offseting.

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        return _BRepFill.BRepFill_OffsetWire_Init(self, *args)


    def Perform(self, *args):
        """
        * Performs an OffsetWire at an altitude <Alt> from the face ( According to the orientation of the face)

        :param Offset:
        :type Offset: float
        :param Alt: default value is 0.0
        :type Alt: float
        :rtype: None

        """
        return _BRepFill.BRepFill_OffsetWire_Perform(self, *args)


    def PerformWithBiLo(self, *args):
        """
        * Performs an OffsetWire

        :param WSP:
        :type WSP: TopoDS_Face &
        :param Offset:
        :type Offset: float
        :param Locus:
        :type Locus: BRepMAT2d_BisectingLocus &
        :param Link:
        :type Link: BRepMAT2d_LinkTopoBilo &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Alt: default value is 0.0
        :type Alt: float
        :rtype: None

        """
        return _BRepFill.BRepFill_OffsetWire_PerformWithBiLo(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_OffsetWire_IsDone(self, *args)


    def Spine(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepFill.BRepFill_OffsetWire_Spine(self, *args)


    def Shape(self, *args):
        """
        * returns the generated shape.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_OffsetWire_Shape(self, *args)


    def GeneratedShapes(self, *args):
        """
        * Returns the shapes created from a subshape <SpineShape> of the spine. Returns the last computed Offset.

        :param SpineShape:
        :type SpineShape: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepFill.BRepFill_OffsetWire_GeneratedShapes(self, *args)


    def JoinType(self, *args):
        """
        :rtype: GeomAbs_JoinType

        """
        return _BRepFill.BRepFill_OffsetWire_JoinType(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_OffsetWire.Init = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Init, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Perform = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Perform, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.PerformWithBiLo = new_instancemethod(_BRepFill.BRepFill_OffsetWire_PerformWithBiLo, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.IsDone = new_instancemethod(_BRepFill.BRepFill_OffsetWire_IsDone, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Spine = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Spine, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Shape = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Shape, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_OffsetWire_GeneratedShapes, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.JoinType = new_instancemethod(_BRepFill.BRepFill_OffsetWire_JoinType, None, BRepFill_OffsetWire)
BRepFill_OffsetWire._kill_pointed = new_instancemethod(_BRepFill.BRepFill_OffsetWire__kill_pointed, None, BRepFill_OffsetWire)
BRepFill_OffsetWire_swigregister = _BRepFill.BRepFill_OffsetWire_swigregister
BRepFill_OffsetWire_swigregister(BRepFill_OffsetWire)

class BRepFill_Pipe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Shape &
        :param aMode: default value is GeomFill_IsCorrectedFrenet
        :type aMode: GeomFill_Trihedron
        :param ForceApproxC1: default value is Standard_False
        :type ForceApproxC1: bool
        :param GeneratePartCase: default value is Standard_False
        :type GeneratePartCase: bool
        :rtype: None

        """
        _BRepFill.BRepFill_Pipe_swiginit(self, _BRepFill.new_BRepFill_Pipe(*args))

    def Perform(self, *args):
        """
        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Shape &
        :param GeneratePartCase: default value is Standard_False
        :type GeneratePartCase: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Pipe_Perform(self, *args)


    def Spine(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_Spine(self, *args)


    def Profile(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_Profile(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_Shape(self, *args)


    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_LastShape(self, *args)


    def Face(self, *args):
        """
        * Returns the face created from an edge of the spine and an edge of the profile. if the edges are not in the spine or the profile

        :param ESpine:
        :type ESpine: TopoDS_Edge &
        :param EProfile:
        :type EProfile: TopoDS_Edge &
        :rtype: TopoDS_Face

        """
        return _BRepFill.BRepFill_Pipe_Face(self, *args)


    def Edge(self, *args):
        """
        * Returns the edge created from an edge of the spine and a vertex of the profile. if the edge or the vertex are not in the spine or the profile.

        :param ESpine:
        :type ESpine: TopoDS_Edge &
        :param VProfile:
        :type VProfile: TopoDS_Vertex &
        :rtype: TopoDS_Edge

        """
        return _BRepFill.BRepFill_Pipe_Edge(self, *args)


    def Section(self, *args):
        """
        * Returns the shape created from the profile at the position of the vertex VSpine. if the vertex is not in the Spine

        :param VSpine:
        :type VSpine: TopoDS_Vertex &
        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Pipe_Section(self, *args)


    def PipeLine(self, *args):
        """
        * Create a Wire by sweeping the Point along the <spine> if the <Spine> is undefined

        :param Point:
        :type Point: gp_Pnt
        :rtype: TopoDS_Wire

        """
        return _BRepFill.BRepFill_Pipe_PipeLine(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Pipe.Perform = new_instancemethod(_BRepFill.BRepFill_Pipe_Perform, None, BRepFill_Pipe)
BRepFill_Pipe.Spine = new_instancemethod(_BRepFill.BRepFill_Pipe_Spine, None, BRepFill_Pipe)
BRepFill_Pipe.Profile = new_instancemethod(_BRepFill.BRepFill_Pipe_Profile, None, BRepFill_Pipe)
BRepFill_Pipe.Shape = new_instancemethod(_BRepFill.BRepFill_Pipe_Shape, None, BRepFill_Pipe)
BRepFill_Pipe.FirstShape = new_instancemethod(_BRepFill.BRepFill_Pipe_FirstShape, None, BRepFill_Pipe)
BRepFill_Pipe.LastShape = new_instancemethod(_BRepFill.BRepFill_Pipe_LastShape, None, BRepFill_Pipe)
BRepFill_Pipe.Face = new_instancemethod(_BRepFill.BRepFill_Pipe_Face, None, BRepFill_Pipe)
BRepFill_Pipe.Edge = new_instancemethod(_BRepFill.BRepFill_Pipe_Edge, None, BRepFill_Pipe)
BRepFill_Pipe.Section = new_instancemethod(_BRepFill.BRepFill_Pipe_Section, None, BRepFill_Pipe)
BRepFill_Pipe.PipeLine = new_instancemethod(_BRepFill.BRepFill_Pipe_PipeLine, None, BRepFill_Pipe)
BRepFill_Pipe._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Pipe__kill_pointed, None, BRepFill_Pipe)
BRepFill_Pipe_swigregister = _BRepFill.BRepFill_Pipe_swigregister
BRepFill_Pipe_swigregister(BRepFill_Pipe)

class BRepFill_PipeShell(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Set an sweep's mode  If no mode are setted, the mode use in MakePipe is used

        :param Spine:
        :type Spine: TopoDS_Wire &
        :rtype: None

        """
        _BRepFill.BRepFill_PipeShell_swiginit(self, _BRepFill.new_BRepFill_PipeShell(*args))

    def SetDiscrete(self, *args):
        """
        * Set a Discrete trihedron to perform the sweeping

        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_SetDiscrete(self, *args)


    def Set(self, *args):
        """
        * Set an Frenet or an CorrectedFrenet trihedron to perform the sweeping

        :param Frenet: default value is Standard_False
        :type Frenet: bool
        :rtype: None

        * Set an fixed trihedron to perform the sweeping  all sections will be parallel.

        :param Axe:
        :type Axe: gp_Ax2
        :rtype: None

        * Set an fixed BiNormal direction to perform the sweeping

        :param BiNormal:
        :type BiNormal: gp_Dir
        :rtype: None

        * Set support to the spine to define the BiNormal at the spine, like the normal the surfaces. Warning: To be effective, Each edge of the <spine> must have an representaion on one face of<SpineSupport>

        :param SpineSupport:
        :type SpineSupport: TopoDS_Shape &
        :rtype: bool

        * Set an auxiliary spine to define the Normal For each Point of the Spine P, an Point Q is evalued on <AuxiliarySpine> If <CurvilinearEquivalence> Q split <AuxiliarySpine> with the same length ratio than P split <Spline>. Else the plan define by P and the tangent to the <Spine> intersect <AuxiliarySpine> in Q. If <KeepContact> equals BRepFill_NoContact: The Normal is defined by the vector PQ. If <KeepContact> equals BRepFill_Contact: The Normal is defined to achieve that the sweeped section is in contact to the auxiliarySpine. The width of section is constant all along the path. In other words, the auxiliary spine lies on the swept surface, but not necessarily is a boundary of this surface. However, the auxiliary spine has to be close enough to the main spine to provide intersection with any section all along the path. If <KeepContact> equals BRepFill_ContactOnBorder: The auxiliary spine becomes a boundary of the swept surface and the width of section varies along the path.

        :param AuxiliarySpine:
        :type AuxiliarySpine: TopoDS_Wire &
        :param CurvilinearEquivalence: default value is Standard_True
        :type CurvilinearEquivalence: bool
        :param KeepContact: default value is BRepFill_NoContact
        :type KeepContact: BRepFill_TypeOfContact
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_Set(self, *args)


    def SetForceApproxC1(self, *args):
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0. Give section to sweep. Possibilities are : //!	- Give one or sevral profile - Give one profile and an homotetic law. - Automatic compute of correspondance beetween profile, and section  on the sweeped shape - correspondance beetween profile, and section on the sweeped shape defined by a vertex of the spine

        :param ForceApproxC1:
        :type ForceApproxC1: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_SetForceApproxC1(self, *args)


    def Add(self, *args):
        """
        * Set an section. The corespondance with the spine, will be automaticaly performed.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        * Set an section. The corespondance with the spine, is given by <Location>

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param Location:
        :type Location: TopoDS_Vertex &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_Add(self, *args)


    def SetLaw(self, *args):
        """
        * Set an section and an homotetic law. The homotetie's centers is given by point on the <Spine>.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param L:
        :type L: Handle_Law_Function &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        * Set an section and an homotetic law. The homotetie center is given by point on the <Spine>

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param L:
        :type L: Handle_Law_Function &
        :param Location:
        :type Location: TopoDS_Vertex &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_SetLaw(self, *args)


    def Delete(self, *args):
        """
        * Delete an section.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_Delete(self, *args)


    def IsReady(self, *args):
        """
        * Say if <self> is ready to build the shape return False if <self> do not have section definition

        :rtype: bool

        """
        return _BRepFill.BRepFill_PipeShell_IsReady(self, *args)


    def GetStatus(self, *args):
        """
        * Get a status, when Simulate or Build failed.

        :rtype: GeomFill_PipeError

        """
        return _BRepFill.BRepFill_PipeShell_GetStatus(self, *args)


    def SetTolerance(self, *args):
        """
        :param Tol3d: default value is 1.0e-4
        :type Tol3d: float
        :param BoundTol: default value is 1.0e-4
        :type BoundTol: float
        :param TolAngular: default value is 1.0e-2
        :type TolAngular: float
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_SetTolerance(self, *args)


    def SetTransition(self, *args):
        """
        * Set the Transition Mode to manage discontinuities on the sweep.

        :param Mode: default value is BRepFill_Modified
        :type Mode: BRepFill_TransitionStyle
        :param Angmin: default value is 1.0e-2
        :type Angmin: float
        :param Angmax: default value is 6.0
        :type Angmax: float
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_SetTransition(self, *args)


    def Simulate(self, *args):
        """
        * Perform simulation of the sweep :  Somes Section are returned.

        :param NumberOfSection:
        :type NumberOfSection: int
        :param Sections:
        :type Sections: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_Simulate(self, *args)


    def Build(self, *args):
        """
        * Builds the resulting shape (redefined from MakeShape).

        :rtype: bool

        """
        return _BRepFill.BRepFill_PipeShell_Build(self, *args)


    def MakeSolid(self, *args):
        """
        * Transform the sweeping Shell in Solid. If the section are not closed returns False

        :rtype: bool

        """
        return _BRepFill.BRepFill_PipeShell_MakeSolid(self, *args)


    def Shape(self, *args):
        """
        * Returns the result Shape.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_PipeShell_Shape(self, *args)


    def FirstShape(self, *args):
        """
        * Returns the TopoDS Shape of the bottom of the sweep.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_PipeShell_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        * Returns the TopoDS Shape of the top of the sweep.

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_PipeShell_LastShape(self, *args)


    def Generated(self, *args):
        """
        * Returns the list of shapes generated from the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :param L:
        :type L: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_PipeShell_Generated(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_PipeShell self)"""
        return _BRepFill.BRepFill_PipeShell__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_PipeShell self) -> Handle_BRepFill_PipeShell"""
        return _BRepFill.BRepFill_PipeShell_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_PipeShell.SetDiscrete = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetDiscrete, None, BRepFill_PipeShell)
BRepFill_PipeShell.Set = new_instancemethod(_BRepFill.BRepFill_PipeShell_Set, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetForceApproxC1 = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetForceApproxC1, None, BRepFill_PipeShell)
BRepFill_PipeShell.Add = new_instancemethod(_BRepFill.BRepFill_PipeShell_Add, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetLaw = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetLaw, None, BRepFill_PipeShell)
BRepFill_PipeShell.Delete = new_instancemethod(_BRepFill.BRepFill_PipeShell_Delete, None, BRepFill_PipeShell)
BRepFill_PipeShell.IsReady = new_instancemethod(_BRepFill.BRepFill_PipeShell_IsReady, None, BRepFill_PipeShell)
BRepFill_PipeShell.GetStatus = new_instancemethod(_BRepFill.BRepFill_PipeShell_GetStatus, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetTolerance = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetTolerance, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetTransition = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetTransition, None, BRepFill_PipeShell)
BRepFill_PipeShell.Simulate = new_instancemethod(_BRepFill.BRepFill_PipeShell_Simulate, None, BRepFill_PipeShell)
BRepFill_PipeShell.Build = new_instancemethod(_BRepFill.BRepFill_PipeShell_Build, None, BRepFill_PipeShell)
BRepFill_PipeShell.MakeSolid = new_instancemethod(_BRepFill.BRepFill_PipeShell_MakeSolid, None, BRepFill_PipeShell)
BRepFill_PipeShell.Shape = new_instancemethod(_BRepFill.BRepFill_PipeShell_Shape, None, BRepFill_PipeShell)
BRepFill_PipeShell.FirstShape = new_instancemethod(_BRepFill.BRepFill_PipeShell_FirstShape, None, BRepFill_PipeShell)
BRepFill_PipeShell.LastShape = new_instancemethod(_BRepFill.BRepFill_PipeShell_LastShape, None, BRepFill_PipeShell)
BRepFill_PipeShell.Generated = new_instancemethod(_BRepFill.BRepFill_PipeShell_Generated, None, BRepFill_PipeShell)
BRepFill_PipeShell._kill_pointed = new_instancemethod(_BRepFill.BRepFill_PipeShell__kill_pointed, None, BRepFill_PipeShell)
BRepFill_PipeShell.GetHandle = new_instancemethod(_BRepFill.BRepFill_PipeShell_GetHandle, None, BRepFill_PipeShell)
BRepFill_PipeShell_swigregister = _BRepFill.BRepFill_PipeShell_swigregister
BRepFill_PipeShell_swigregister(BRepFill_PipeShell)

class Handle_BRepFill_PipeShell(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_PipeShell_swiginit(self, _BRepFill.new_Handle_BRepFill_PipeShell(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_PipeShell_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_PipeShell.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_PipeShell_Nullify, None, Handle_BRepFill_PipeShell)
Handle_BRepFill_PipeShell.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_PipeShell_IsNull, None, Handle_BRepFill_PipeShell)
Handle_BRepFill_PipeShell.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_PipeShell_GetObject, None, Handle_BRepFill_PipeShell)
Handle_BRepFill_PipeShell._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_PipeShell__kill_pointed, None, Handle_BRepFill_PipeShell)
Handle_BRepFill_PipeShell_swigregister = _BRepFill.Handle_BRepFill_PipeShell_swigregister
Handle_BRepFill_PipeShell_swigregister(Handle_BRepFill_PipeShell)

def Handle_BRepFill_PipeShell_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_PipeShell_DownCast(AnObject)
Handle_BRepFill_PipeShell_DownCast = _BRepFill.Handle_BRepFill_PipeShell_DownCast

class BRepFill_Section(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param V:
        :type V: TopoDS_Vertex &
        :param WithContact:
        :type WithContact: bool
        :param WithCorrection:
        :type WithCorrection: bool
        :rtype: None

        """
        _BRepFill.BRepFill_Section_swiginit(self, _BRepFill.new_BRepFill_Section(*args))

    def Set(self, *args):
        """
        :param IsLaw:
        :type IsLaw: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Section_Set(self, *args)


    def Wire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepFill.BRepFill_Section_Wire(self, *args)


    def Vertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepFill.BRepFill_Section_Vertex(self, *args)


    def IsLaw(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Section_IsLaw(self, *args)


    def WithContact(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Section_WithContact(self, *args)


    def WithCorrection(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_Section_WithCorrection(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Section.Set = new_instancemethod(_BRepFill.BRepFill_Section_Set, None, BRepFill_Section)
BRepFill_Section.Wire = new_instancemethod(_BRepFill.BRepFill_Section_Wire, None, BRepFill_Section)
BRepFill_Section.Vertex = new_instancemethod(_BRepFill.BRepFill_Section_Vertex, None, BRepFill_Section)
BRepFill_Section.IsLaw = new_instancemethod(_BRepFill.BRepFill_Section_IsLaw, None, BRepFill_Section)
BRepFill_Section.WithContact = new_instancemethod(_BRepFill.BRepFill_Section_WithContact, None, BRepFill_Section)
BRepFill_Section.WithCorrection = new_instancemethod(_BRepFill.BRepFill_Section_WithCorrection, None, BRepFill_Section)
BRepFill_Section._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Section__kill_pointed, None, BRepFill_Section)
BRepFill_Section_swigregister = _BRepFill.BRepFill_Section_swigregister
BRepFill_Section_swigregister(BRepFill_Section)

class BRepFill_SectionLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbLaw(self, *args):
        """
        :rtype: int

        """
        return _BRepFill.BRepFill_SectionLaw_NbLaw(self, *args)


    def law(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _BRepFill.BRepFill_SectionLaw_law(self, *args)


    def IsConstant(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_SectionLaw_IsConstant(self, *args)


    def IsUClosed(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_SectionLaw_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_SectionLaw_IsVClosed(self, *args)


    def IsVertex(self, *args):
        """
        * Say if the input sahpe is a vertex.

        :rtype: bool

        """
        return _BRepFill.BRepFill_SectionLaw_IsVertex(self, *args)


    def ConcatenedLaw(self, *args):
        """
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _BRepFill.BRepFill_SectionLaw_ConcatenedLaw(self, *args)


    def Continuity(self, *args):
        """
        :param Index:
        :type Index: int
        :param TolAngular:
        :type TolAngular: float
        :rtype: GeomAbs_Shape

        """
        return _BRepFill.BRepFill_SectionLaw_Continuity(self, *args)


    def VertexTol(self, *args):
        """
        :param Index:
        :type Index: int
        :param Param:
        :type Param: float
        :rtype: float

        """
        return _BRepFill.BRepFill_SectionLaw_VertexTol(self, *args)


    def Vertex(self, *args):
        """
        :param Index:
        :type Index: int
        :param Param:
        :type Param: float
        :rtype: TopoDS_Vertex

        """
        return _BRepFill.BRepFill_SectionLaw_Vertex(self, *args)


    def D0(self, *args):
        """
        :param U:
        :type U: float
        :param S:
        :type S: TopoDS_Shape &
        :rtype: void

        """
        return _BRepFill.BRepFill_SectionLaw_D0(self, *args)


    def Init(self, *args):
        """
        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        """
        return _BRepFill.BRepFill_SectionLaw_Init(self, *args)


    def CurrentEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepFill.BRepFill_SectionLaw_CurrentEdge(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_SectionLaw self)"""
        return _BRepFill.BRepFill_SectionLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_SectionLaw self) -> Handle_BRepFill_SectionLaw"""
        return _BRepFill.BRepFill_SectionLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SectionLaw.NbLaw = new_instancemethod(_BRepFill.BRepFill_SectionLaw_NbLaw, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.law = new_instancemethod(_BRepFill.BRepFill_SectionLaw_law, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsConstant = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsConstant, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsUClosed = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsUClosed, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsVClosed = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsVClosed, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsVertex = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsVertex, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.ConcatenedLaw = new_instancemethod(_BRepFill.BRepFill_SectionLaw_ConcatenedLaw, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Continuity = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Continuity, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.VertexTol = new_instancemethod(_BRepFill.BRepFill_SectionLaw_VertexTol, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Vertex = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Vertex, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.D0 = new_instancemethod(_BRepFill.BRepFill_SectionLaw_D0, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Init = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Init, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.CurrentEdge = new_instancemethod(_BRepFill.BRepFill_SectionLaw_CurrentEdge, None, BRepFill_SectionLaw)
BRepFill_SectionLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SectionLaw__kill_pointed, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_SectionLaw_GetHandle, None, BRepFill_SectionLaw)
BRepFill_SectionLaw_swigregister = _BRepFill.BRepFill_SectionLaw_swigregister
BRepFill_SectionLaw_swigregister(BRepFill_SectionLaw)

class Handle_BRepFill_SectionLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_SectionLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_SectionLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_SectionLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_SectionLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_SectionLaw_Nullify, None, Handle_BRepFill_SectionLaw)
Handle_BRepFill_SectionLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_SectionLaw_IsNull, None, Handle_BRepFill_SectionLaw)
Handle_BRepFill_SectionLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_SectionLaw_GetObject, None, Handle_BRepFill_SectionLaw)
Handle_BRepFill_SectionLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_SectionLaw__kill_pointed, None, Handle_BRepFill_SectionLaw)
Handle_BRepFill_SectionLaw_swigregister = _BRepFill.Handle_BRepFill_SectionLaw_swigregister
Handle_BRepFill_SectionLaw_swigregister(Handle_BRepFill_SectionLaw)

def Handle_BRepFill_SectionLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_SectionLaw_DownCast(AnObject)
Handle_BRepFill_SectionLaw_DownCast = _BRepFill.Handle_BRepFill_SectionLaw_DownCast

class BRepFill_SectionPlacement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Automatic placement

        :param Law:
        :type Law: Handle_BRepFill_LocationLaw &
        :param Section:
        :type Section: TopoDS_Shape &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        * Placement on vertex

        :param Law:
        :type Law: Handle_BRepFill_LocationLaw &
        :param Section:
        :type Section: TopoDS_Shape &
        :param Vertex:
        :type Vertex: TopoDS_Shape &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        """
        _BRepFill.BRepFill_SectionPlacement_swiginit(self, _BRepFill.new_BRepFill_SectionPlacement(*args))

    def Transformation(self, *args):
        """
        :rtype: gp_Trsf

        """
        return _BRepFill.BRepFill_SectionPlacement_Transformation(self, *args)


    def AbscissaOnPath(self, *args):
        """
        :rtype: float

        """
        return _BRepFill.BRepFill_SectionPlacement_AbscissaOnPath(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SectionPlacement.Transformation = new_instancemethod(_BRepFill.BRepFill_SectionPlacement_Transformation, None, BRepFill_SectionPlacement)
BRepFill_SectionPlacement.AbscissaOnPath = new_instancemethod(_BRepFill.BRepFill_SectionPlacement_AbscissaOnPath, None, BRepFill_SectionPlacement)
BRepFill_SectionPlacement._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SectionPlacement__kill_pointed, None, BRepFill_SectionPlacement)
BRepFill_SectionPlacement_swigregister = _BRepFill.BRepFill_SectionPlacement_swigregister
BRepFill_SectionPlacement_swigregister(BRepFill_SectionPlacement)

class BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepFill_EdgeFaceAndOrder &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder(*args))

    def Value(self, *args):
        """
        :rtype: BRepFill_EdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder self)"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder self) -> Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_Value, None, BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder__kill_pointed, None, BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder.GetHandle = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_GetHandle, None, BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister
BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister(BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)

class Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_Nullify, None, Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_IsNull, None, Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_GetObject, None, Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder__kill_pointed, None, Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_swigregister(Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder)

def Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_DownCast(AnObject)
Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_DownCast = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfEdgeFaceAndOrder_DownCast

class BRepFill_SequenceNodeOfSequenceOfFaceAndOrder(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepFill_FaceAndOrder &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder(*args))

    def Value(self, *args):
        """
        :rtype: BRepFill_FaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_SequenceNodeOfSequenceOfFaceAndOrder self)"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_SequenceNodeOfSequenceOfFaceAndOrder self) -> Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceNodeOfSequenceOfFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_Value, None, BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder__kill_pointed, None, BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfFaceAndOrder.GetHandle = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_GetHandle, None, BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister
BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister(BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)

class Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_Nullify, None, Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_IsNull, None, Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_GetObject, None, Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder__kill_pointed, None, Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_swigregister(Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder)

def Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_DownCast(AnObject)
Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_DownCast = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfFaceAndOrder_DownCast

class BRepFill_SequenceNodeOfSequenceOfSection(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepFill_Section &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_swiginit(self, _BRepFill.new_BRepFill_SequenceNodeOfSequenceOfSection(*args))

    def Value(self, *args):
        """
        :rtype: BRepFill_Section

        """
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_SequenceNodeOfSequenceOfSection self)"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfSection__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_SequenceNodeOfSequenceOfSection self) -> Handle_BRepFill_SequenceNodeOfSequenceOfSection"""
        return _BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceNodeOfSequenceOfSection.Value = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_Value, None, BRepFill_SequenceNodeOfSequenceOfSection)
BRepFill_SequenceNodeOfSequenceOfSection._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfSection__kill_pointed, None, BRepFill_SequenceNodeOfSequenceOfSection)
BRepFill_SequenceNodeOfSequenceOfSection.GetHandle = new_instancemethod(_BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_GetHandle, None, BRepFill_SequenceNodeOfSequenceOfSection)
BRepFill_SequenceNodeOfSequenceOfSection_swigregister = _BRepFill.BRepFill_SequenceNodeOfSequenceOfSection_swigregister
BRepFill_SequenceNodeOfSequenceOfSection_swigregister(BRepFill_SequenceNodeOfSequenceOfSection)

class Handle_BRepFill_SequenceNodeOfSequenceOfSection(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_swiginit(self, _BRepFill.new_Handle_BRepFill_SequenceNodeOfSequenceOfSection(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_SequenceNodeOfSequenceOfSection.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_Nullify, None, Handle_BRepFill_SequenceNodeOfSequenceOfSection)
Handle_BRepFill_SequenceNodeOfSequenceOfSection.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_IsNull, None, Handle_BRepFill_SequenceNodeOfSequenceOfSection)
Handle_BRepFill_SequenceNodeOfSequenceOfSection.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_GetObject, None, Handle_BRepFill_SequenceNodeOfSequenceOfSection)
Handle_BRepFill_SequenceNodeOfSequenceOfSection._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection__kill_pointed, None, Handle_BRepFill_SequenceNodeOfSequenceOfSection)
Handle_BRepFill_SequenceNodeOfSequenceOfSection_swigregister = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_swigregister
Handle_BRepFill_SequenceNodeOfSequenceOfSection_swigregister(Handle_BRepFill_SequenceNodeOfSequenceOfSection)

def Handle_BRepFill_SequenceNodeOfSequenceOfSection_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_DownCast(AnObject)
Handle_BRepFill_SequenceNodeOfSequenceOfSection_DownCast = _BRepFill.Handle_BRepFill_SequenceNodeOfSequenceOfSection_DownCast

class BRepFill_SequenceOfEdgeFaceAndOrder(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfEdgeFaceAndOrder(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: BRepFill_SequenceOfEdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: BRepFill_SequenceOfEdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: BRepFill_EdgeFaceAndOrder &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: BRepFill_EdgeFaceAndOrder &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_EdgeFaceAndOrder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_EdgeFaceAndOrder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: BRepFill_EdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepFill_EdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepFill_SequenceOfEdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_EdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: BRepFill_EdgeFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_EdgeFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceOfEdgeFaceAndOrder.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Clear, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Assign, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Set, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Append, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Prepend, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertBefore, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertAfter, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_First, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Last, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Split, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Value, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_SetValue, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeValue, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Remove, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder__kill_pointed, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swigregister
BRepFill_SequenceOfEdgeFaceAndOrder_swigregister(BRepFill_SequenceOfEdgeFaceAndOrder)

class BRepFill_SequenceOfFaceAndOrder(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfFaceAndOrder(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfFaceAndOrder &
        :rtype: BRepFill_SequenceOfFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfFaceAndOrder &
        :rtype: BRepFill_SequenceOfFaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: BRepFill_FaceAndOrder &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: BRepFill_FaceAndOrder &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_FaceAndOrder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_FaceAndOrder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: BRepFill_FaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepFill_FaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepFill_SequenceOfFaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_FaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: BRepFill_FaceAndOrder &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_FaceAndOrder

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceOfFaceAndOrder.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Clear, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Assign, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Set, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Append, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Prepend, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertBefore, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertAfter, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_First, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Last, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Split, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Value, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_SetValue, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeValue, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Remove, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder__kill_pointed, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceOfFaceAndOrder_swigregister
BRepFill_SequenceOfFaceAndOrder_swigregister(BRepFill_SequenceOfFaceAndOrder)

class BRepFill_SequenceOfSection(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFill.BRepFill_SequenceOfSection_swiginit(self, _BRepFill.new_BRepFill_SequenceOfSection(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfSection &
        :rtype: BRepFill_SequenceOfSection

        """
        return _BRepFill.BRepFill_SequenceOfSection_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepFill_SequenceOfSection &
        :rtype: BRepFill_SequenceOfSection

        """
        return _BRepFill.BRepFill_SequenceOfSection_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: BRepFill_Section &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfSection &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: BRepFill_Section &
        :rtype: None

        :param S:
        :type S: BRepFill_SequenceOfSection &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_Section &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfSection &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepFill_Section &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepFill_SequenceOfSection &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: BRepFill_Section

        """
        return _BRepFill.BRepFill_SequenceOfSection_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepFill_Section

        """
        return _BRepFill.BRepFill_SequenceOfSection_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepFill_SequenceOfSection &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_Section

        """
        return _BRepFill.BRepFill_SequenceOfSection_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: BRepFill_Section &
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepFill_Section

        """
        return _BRepFill.BRepFill_SequenceOfSection_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepFill.BRepFill_SequenceOfSection_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_SequenceOfSection.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Clear, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Assign, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Set, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Append, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Prepend, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_InsertBefore, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_InsertAfter, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_First, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Last, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Split, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Value, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_SetValue, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_ChangeValue, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Remove, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection._kill_pointed = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection__kill_pointed, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection_swigregister = _BRepFill.BRepFill_SequenceOfSection_swigregister
BRepFill_SequenceOfSection_swigregister(BRepFill_SequenceOfSection)

class BRepFill_Sweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Section:
        :type Section: Handle_BRepFill_SectionLaw &
        :param Location:
        :type Location: Handle_BRepFill_LocationLaw &
        :param WithKPart:
        :type WithKPart: bool
        :rtype: None

        """
        _BRepFill.BRepFill_Sweep_swiginit(self, _BRepFill.new_BRepFill_Sweep(*args))

    def SetBounds(self, *args):
        """
        :param FirstShape:
        :type FirstShape: TopoDS_Wire &
        :param LastShape:
        :type LastShape: TopoDS_Wire &
        :rtype: None

        """
        return _BRepFill.BRepFill_Sweep_SetBounds(self, *args)


    def SetTolerance(self, *args):
        """
        * Set Approximation Tolerance Tol3d : Tolerance to surface approximation Tol2d : Tolerance used to perform curve approximation  Normaly the 2d curve are approximated with a  tolerance given by the resolution on support surfaces,  but if this tolerance is too large Tol2d is used. TolAngular : Tolerance (in radian) to control the angle  beetween tangents on the section law and  tangent of iso-v on approximed surface

        :param Tol3d:
        :type Tol3d: float
        :param BoundTol: default value is 1.0
        :type BoundTol: float
        :param Tol2d: default value is 1.0e-5
        :type Tol2d: float
        :param TolAngular: default value is 1.0e-2
        :type TolAngular: float
        :rtype: None

        """
        return _BRepFill.BRepFill_Sweep_SetTolerance(self, *args)


    def SetAngularControl(self, *args):
        """
        * Tolerance To controle Corner management. If the discontinuity is lesser than <AngleMin> in radian The Transition Performed will be alway 'Modified'

        :param AngleMin: default value is 0.01
        :type AngleMin: float
        :param AngleMax: default value is 6.0
        :type AngleMax: float
        :rtype: None

        """
        return _BRepFill.BRepFill_Sweep_SetAngularControl(self, *args)


    def SetForceApproxC1(self, *args):
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0.

        :param ForceApproxC1:
        :type ForceApproxC1: bool
        :rtype: None

        """
        return _BRepFill.BRepFill_Sweep_SetForceApproxC1(self, *args)


    def Build(self, *args):
        """
        * Build the Sweeep Surface Transition define Transition strategy Approx define Approximation Strategy - GeomFill_Section : The composed Function Location X Section  is directly approximed. - GeomFill_Location : The location law is approximed, and the  SweepSurface is bulid algebric composition  of approximed location law and section law  This option is Ok, if Section.Surface() methode  is effective. Continuity : The continuity in v waiting on the surface Degmax : The maximum degree in v requiered on the surface Segmax : The maximum number of span in v requiered on  the surface.

        :param ReversedEdges:
        :type ReversedEdges: TopTools_MapOfShape &
        :param Tapes:
        :type Tapes: BRepFill_DataMapOfShapeHArray2OfShape &
        :param Transition: default value is BRepFill_Modified
        :type Transition: BRepFill_TransitionStyle
        :param Continuity: default value is GeomAbs_C2
        :type Continuity: GeomAbs_Shape
        :param Approx: default value is GeomFill_Location
        :type Approx: GeomFill_ApproxStyle
        :param Degmax: default value is 11
        :type Degmax: int
        :param Segmax: default value is 30
        :type Segmax: int
        :rtype: None

        """
        return _BRepFill.BRepFill_Sweep_Build(self, *args)


    def IsDone(self, *args):
        """
        * Say if the Shape is Build.

        :rtype: bool

        """
        return _BRepFill.BRepFill_Sweep_IsDone(self, *args)


    def Shape(self, *args):
        """
        * returns the Sweeping Shape

        :rtype: TopoDS_Shape

        """
        return _BRepFill.BRepFill_Sweep_Shape(self, *args)


    def ErrorOnSurface(self, *args):
        """
        * Get the Approximation error.

        :rtype: float

        """
        return _BRepFill.BRepFill_Sweep_ErrorOnSurface(self, *args)


    def SubShape(self, *args):
        """
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_Sweep_SubShape(self, *args)


    def InterFaces(self, *args):
        """
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_Sweep_InterFaces(self, *args)


    def Sections(self, *args):
        """
        :rtype: Handle_TopTools_HArray2OfShape

        """
        return _BRepFill.BRepFill_Sweep_Sections(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Sweep.SetBounds = new_instancemethod(_BRepFill.BRepFill_Sweep_SetBounds, None, BRepFill_Sweep)
BRepFill_Sweep.SetTolerance = new_instancemethod(_BRepFill.BRepFill_Sweep_SetTolerance, None, BRepFill_Sweep)
BRepFill_Sweep.SetAngularControl = new_instancemethod(_BRepFill.BRepFill_Sweep_SetAngularControl, None, BRepFill_Sweep)
BRepFill_Sweep.SetForceApproxC1 = new_instancemethod(_BRepFill.BRepFill_Sweep_SetForceApproxC1, None, BRepFill_Sweep)
BRepFill_Sweep.Build = new_instancemethod(_BRepFill.BRepFill_Sweep_Build, None, BRepFill_Sweep)
BRepFill_Sweep.IsDone = new_instancemethod(_BRepFill.BRepFill_Sweep_IsDone, None, BRepFill_Sweep)
BRepFill_Sweep.Shape = new_instancemethod(_BRepFill.BRepFill_Sweep_Shape, None, BRepFill_Sweep)
BRepFill_Sweep.ErrorOnSurface = new_instancemethod(_BRepFill.BRepFill_Sweep_ErrorOnSurface, None, BRepFill_Sweep)
BRepFill_Sweep.SubShape = new_instancemethod(_BRepFill.BRepFill_Sweep_SubShape, None, BRepFill_Sweep)
BRepFill_Sweep.InterFaces = new_instancemethod(_BRepFill.BRepFill_Sweep_InterFaces, None, BRepFill_Sweep)
BRepFill_Sweep.Sections = new_instancemethod(_BRepFill.BRepFill_Sweep_Sections, None, BRepFill_Sweep)
BRepFill_Sweep._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Sweep__kill_pointed, None, BRepFill_Sweep)
BRepFill_Sweep_swigregister = _BRepFill.BRepFill_Sweep_swigregister
BRepFill_Sweep_swigregister(BRepFill_Sweep)

class BRepFill_TrimEdgeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Bisec:
        :type Bisec: Bisector_Bisec &
        :param S1:
        :type S1: Handle_Geom2d_Geometry &
        :param S2:
        :type S2: Handle_Geom2d_Geometry &
        :param Offset:
        :type Offset: float
        :rtype: None

        """
        _BRepFill.BRepFill_TrimEdgeTool_swiginit(self, _BRepFill.new_BRepFill_TrimEdgeTool(*args))

    def IntersectWith(self, *args):
        """
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Params:
        :type Params: TColgp_SequenceOfPnt
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimEdgeTool_IntersectWith(self, *args)


    def AddOrConfuse(self, *args):
        """
        :param Start:
        :type Start: bool
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Params:
        :type Params: TColgp_SequenceOfPnt
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse(self, *args)


    def IsInside(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: bool

        """
        return _BRepFill.BRepFill_TrimEdgeTool_IsInside(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_TrimEdgeTool.IntersectWith = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_IntersectWith, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool.AddOrConfuse = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool.IsInside = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_IsInside, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool._kill_pointed = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool__kill_pointed, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool_swigregister = _BRepFill.BRepFill_TrimEdgeTool_swigregister
BRepFill_TrimEdgeTool_swigregister(BRepFill_TrimEdgeTool)

class BRepFill_TrimShellCorner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theFaces:
        :type theFaces: Handle_TopTools_HArray2OfShape &
        :param theAxeOfBisPlane:
        :type theAxeOfBisPlane: gp_Ax2
        :param theSecPlane:
        :type theSecPlane: TopoDS_Face &
        :rtype: None

        :param theFaces:
        :type theFaces: Handle_TopTools_HArray2OfShape &
        :param theAxeOfBisPlane:
        :type theAxeOfBisPlane: gp_Ax2
        :param theSpine:
        :type theSpine: TopoDS_Wire &
        :param theSecPlane:
        :type theSecPlane: TopoDS_Face &
        :rtype: None

        """
        _BRepFill.BRepFill_TrimShellCorner_swiginit(self, _BRepFill.new_BRepFill_TrimShellCorner(*args))

    def SetSpine(self, *args):
        """
        :param theSpine:
        :type theSpine: TopoDS_Wire &
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimShellCorner_SetSpine(self, *args)


    def AddBounds(self, *args):
        """
        :param Bounds:
        :type Bounds: Handle_TopTools_HArray2OfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimShellCorner_AddBounds(self, *args)


    def AddUEdges(self, *args):
        """
        :param theUEdges:
        :type theUEdges: Handle_TopTools_HArray2OfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimShellCorner_AddUEdges(self, *args)


    def Perform(self, *args):
        """
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimShellCorner_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_TrimShellCorner_IsDone(self, *args)


    def HasSection(self, *args):
        """
        :rtype: bool

        """
        return _BRepFill.BRepFill_TrimShellCorner_HasSection(self, *args)


    def Modified(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param theModified:
        :type theModified: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimShellCorner_Modified(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_TrimShellCorner.SetSpine = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_SetSpine, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.AddBounds = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_AddBounds, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.AddUEdges = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_AddUEdges, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.Perform = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_Perform, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.IsDone = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_IsDone, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.HasSection = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_HasSection, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.Modified = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_Modified, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner._kill_pointed = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner__kill_pointed, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner_swigregister = _BRepFill.BRepFill_TrimShellCorner_swigregister
BRepFill_TrimShellCorner_swigregister(BRepFill_TrimShellCorner)

class BRepFill_TrimSurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bis:
        :type Bis: Handle_Geom2d_Curve &
        :param Face1:
        :type Face1: TopoDS_Face &
        :param Face2:
        :type Face2: TopoDS_Face &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Inv1:
        :type Inv1: bool
        :param Inv2:
        :type Inv2: bool
        :rtype: None

        """
        _BRepFill.BRepFill_TrimSurfaceTool_swiginit(self, _BRepFill.new_BRepFill_TrimSurfaceTool(*args))

    def IntersectWith(self, *args):
        """
        * Intersect <Bis> with the projection of the edges <EdgeOnFi> and returns the intersecting parameters on Bis and on the edges P.X() : Parameter on Bis P.Y() : Parameter on EdgeOnF1 P.Z() : Parameter on EdgeOnF2 raises if <Edge> is not a edge of Face1 or Face2.

        :param EdgeOnF1:
        :type EdgeOnF1: TopoDS_Edge &
        :param EdgeOnF2:
        :type EdgeOnF2: TopoDS_Edge &
        :param Points:
        :type Points: TColgp_SequenceOfPnt
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IntersectWith(self, *args)


    def IsOnFace(self, *args):
        """
        * returns True if the Line (P, DZ) intersect the Faces

        :param Point:
        :type Point: gp_Pnt2d
        :rtype: bool

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IsOnFace(self, *args)


    def ProjOn(self, *args):
        """
        * returns the parameter of the point <Point> on the Edge <Edge>, assuming that the point is on the edge.

        :param Point:
        :type Point: gp_Pnt2d
        :param Edge:
        :type Edge: TopoDS_Edge &
        :rtype: float

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_ProjOn(self, *args)


    def Project(self, *args):
        """
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param Curve:
        :type Curve: Handle_Geom_Curve &
        :param PCurve1:
        :type PCurve1: Handle_Geom2d_Curve &
        :param PCurve2:
        :type PCurve2: Handle_Geom2d_Curve &
        :param myCont:
        :type myCont: GeomAbs_Shape &
        :rtype: None

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_Project(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_TrimSurfaceTool.IntersectWith = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_IntersectWith, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.IsOnFace = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_IsOnFace, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.ProjOn = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_ProjOn, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.Project = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_Project, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool._kill_pointed = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool__kill_pointed, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool_swigregister = _BRepFill.BRepFill_TrimSurfaceTool_swigregister
BRepFill_TrimSurfaceTool_swigregister(BRepFill_TrimSurfaceTool)

class BRepFill_ACRLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        :type Path: TopoDS_Wire &
        :param Law:
        :type Law: Handle_GeomFill_LocationGuide &
        :rtype: None

        """
        _BRepFill.BRepFill_ACRLaw_swiginit(self, _BRepFill.new_BRepFill_ACRLaw(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepFill_ACRLaw self)"""
        return _BRepFill.BRepFill_ACRLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_ACRLaw self) -> Handle_BRepFill_ACRLaw"""
        return _BRepFill.BRepFill_ACRLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ACRLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ACRLaw__kill_pointed, None, BRepFill_ACRLaw)
BRepFill_ACRLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_ACRLaw_GetHandle, None, BRepFill_ACRLaw)
BRepFill_ACRLaw_swigregister = _BRepFill.BRepFill_ACRLaw_swigregister
BRepFill_ACRLaw_swigregister(BRepFill_ACRLaw)

class Handle_BRepFill_ACRLaw(Handle_BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_ACRLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_ACRLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_ACRLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_ACRLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_ACRLaw_Nullify, None, Handle_BRepFill_ACRLaw)
Handle_BRepFill_ACRLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_ACRLaw_IsNull, None, Handle_BRepFill_ACRLaw)
Handle_BRepFill_ACRLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_ACRLaw_GetObject, None, Handle_BRepFill_ACRLaw)
Handle_BRepFill_ACRLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_ACRLaw__kill_pointed, None, Handle_BRepFill_ACRLaw)
Handle_BRepFill_ACRLaw_swigregister = _BRepFill.Handle_BRepFill_ACRLaw_swigregister
Handle_BRepFill_ACRLaw_swigregister(Handle_BRepFill_ACRLaw)

def Handle_BRepFill_ACRLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_ACRLaw_DownCast(AnObject)
Handle_BRepFill_ACRLaw_DownCast = _BRepFill.Handle_BRepFill_ACRLaw_DownCast

class BRepFill_Edge3DLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        :type Path: TopoDS_Wire &
        :param Law:
        :type Law: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        _BRepFill.BRepFill_Edge3DLaw_swiginit(self, _BRepFill.new_BRepFill_Edge3DLaw(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepFill_Edge3DLaw self)"""
        return _BRepFill.BRepFill_Edge3DLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_Edge3DLaw self) -> Handle_BRepFill_Edge3DLaw"""
        return _BRepFill.BRepFill_Edge3DLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_Edge3DLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_Edge3DLaw__kill_pointed, None, BRepFill_Edge3DLaw)
BRepFill_Edge3DLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_Edge3DLaw_GetHandle, None, BRepFill_Edge3DLaw)
BRepFill_Edge3DLaw_swigregister = _BRepFill.BRepFill_Edge3DLaw_swigregister
BRepFill_Edge3DLaw_swigregister(BRepFill_Edge3DLaw)

class Handle_BRepFill_Edge3DLaw(Handle_BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_Edge3DLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_Edge3DLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_Edge3DLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_Edge3DLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_Edge3DLaw_Nullify, None, Handle_BRepFill_Edge3DLaw)
Handle_BRepFill_Edge3DLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_Edge3DLaw_IsNull, None, Handle_BRepFill_Edge3DLaw)
Handle_BRepFill_Edge3DLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_Edge3DLaw_GetObject, None, Handle_BRepFill_Edge3DLaw)
Handle_BRepFill_Edge3DLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_Edge3DLaw__kill_pointed, None, Handle_BRepFill_Edge3DLaw)
Handle_BRepFill_Edge3DLaw_swigregister = _BRepFill.Handle_BRepFill_Edge3DLaw_swigregister
Handle_BRepFill_Edge3DLaw_swigregister(Handle_BRepFill_Edge3DLaw)

def Handle_BRepFill_Edge3DLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast(AnObject)
Handle_BRepFill_Edge3DLaw_DownCast = _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast

class BRepFill_EdgeOnSurfLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        :type Path: TopoDS_Wire &
        :param Surf:
        :type Surf: TopoDS_Shape &
        :rtype: None

        """
        _BRepFill.BRepFill_EdgeOnSurfLaw_swiginit(self, _BRepFill.new_BRepFill_EdgeOnSurfLaw(*args))

    def HasResult(self, *args):
        """
        * returns <False> if one Edge of <Path> do not have representation on <Surf>. In this case it is impossible to use this object.

        :rtype: bool

        """
        return _BRepFill.BRepFill_EdgeOnSurfLaw_HasResult(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_EdgeOnSurfLaw self)"""
        return _BRepFill.BRepFill_EdgeOnSurfLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_EdgeOnSurfLaw self) -> Handle_BRepFill_EdgeOnSurfLaw"""
        return _BRepFill.BRepFill_EdgeOnSurfLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_EdgeOnSurfLaw.HasResult = new_instancemethod(_BRepFill.BRepFill_EdgeOnSurfLaw_HasResult, None, BRepFill_EdgeOnSurfLaw)
BRepFill_EdgeOnSurfLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_EdgeOnSurfLaw__kill_pointed, None, BRepFill_EdgeOnSurfLaw)
BRepFill_EdgeOnSurfLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_EdgeOnSurfLaw_GetHandle, None, BRepFill_EdgeOnSurfLaw)
BRepFill_EdgeOnSurfLaw_swigregister = _BRepFill.BRepFill_EdgeOnSurfLaw_swigregister
BRepFill_EdgeOnSurfLaw_swigregister(BRepFill_EdgeOnSurfLaw)

class Handle_BRepFill_EdgeOnSurfLaw(Handle_BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_EdgeOnSurfLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_EdgeOnSurfLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_EdgeOnSurfLaw_Nullify, None, Handle_BRepFill_EdgeOnSurfLaw)
Handle_BRepFill_EdgeOnSurfLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_EdgeOnSurfLaw_IsNull, None, Handle_BRepFill_EdgeOnSurfLaw)
Handle_BRepFill_EdgeOnSurfLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_EdgeOnSurfLaw_GetObject, None, Handle_BRepFill_EdgeOnSurfLaw)
Handle_BRepFill_EdgeOnSurfLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_EdgeOnSurfLaw__kill_pointed, None, Handle_BRepFill_EdgeOnSurfLaw)
Handle_BRepFill_EdgeOnSurfLaw_swigregister = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_swigregister
Handle_BRepFill_EdgeOnSurfLaw_swigregister(Handle_BRepFill_EdgeOnSurfLaw)

def Handle_BRepFill_EdgeOnSurfLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast(AnObject)
Handle_BRepFill_EdgeOnSurfLaw_DownCast = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast

class BRepFill_NSections(BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Construct

        :param S:
        :type S: TopTools_SequenceOfShape &
        :param Build: default value is Standard_True
        :type Build: bool
        :rtype: None

        * Construct

        :param S:
        :type S: TopTools_SequenceOfShape &
        :param Trsfs:
        :type Trsfs: GeomFill_SequenceOfTrsf &
        :param P:
        :type P: TColStd_SequenceOfReal &
        :param VF:
        :type VF: float
        :param VL:
        :type VL: float
        :param Build: default value is Standard_True
        :type Build: bool
        :rtype: None

        """
        _BRepFill.BRepFill_NSections_swiginit(self, _BRepFill.new_BRepFill_NSections(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepFill_NSections self)"""
        return _BRepFill.BRepFill_NSections__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_NSections self) -> Handle_BRepFill_NSections"""
        return _BRepFill.BRepFill_NSections_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_NSections._kill_pointed = new_instancemethod(_BRepFill.BRepFill_NSections__kill_pointed, None, BRepFill_NSections)
BRepFill_NSections.GetHandle = new_instancemethod(_BRepFill.BRepFill_NSections_GetHandle, None, BRepFill_NSections)
BRepFill_NSections_swigregister = _BRepFill.BRepFill_NSections_swigregister
BRepFill_NSections_swigregister(BRepFill_NSections)

class Handle_BRepFill_NSections(Handle_BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_NSections_swiginit(self, _BRepFill.new_Handle_BRepFill_NSections(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_NSections_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_NSections.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_NSections_Nullify, None, Handle_BRepFill_NSections)
Handle_BRepFill_NSections.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_NSections_IsNull, None, Handle_BRepFill_NSections)
Handle_BRepFill_NSections.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_NSections_GetObject, None, Handle_BRepFill_NSections)
Handle_BRepFill_NSections._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_NSections__kill_pointed, None, Handle_BRepFill_NSections)
Handle_BRepFill_NSections_swigregister = _BRepFill.Handle_BRepFill_NSections_swigregister
Handle_BRepFill_NSections_swigregister(Handle_BRepFill_NSections)

def Handle_BRepFill_NSections_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_NSections_DownCast(AnObject)
Handle_BRepFill_NSections_DownCast = _BRepFill.Handle_BRepFill_NSections_DownCast

class BRepFill_ShapeLaw(BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Construct an constant Law

        :param V:
        :type V: TopoDS_Vertex &
        :param Build: default value is Standard_True
        :type Build: bool
        :rtype: None

        * Construct an constant Law

        :param W:
        :type W: TopoDS_Wire &
        :param Build: default value is Standard_True
        :type Build: bool
        :rtype: None

        * Construct an evolutive Law

        :param W:
        :type W: TopoDS_Wire &
        :param L:
        :type L: Handle_Law_Function &
        :param Build: default value is Standard_True
        :type Build: bool
        :rtype: None

        """
        _BRepFill.BRepFill_ShapeLaw_swiginit(self, _BRepFill.new_BRepFill_ShapeLaw(*args))

    def Edge(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TopoDS_Edge

        """
        return _BRepFill.BRepFill_ShapeLaw_Edge(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_ShapeLaw self)"""
        return _BRepFill.BRepFill_ShapeLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_ShapeLaw self) -> Handle_BRepFill_ShapeLaw"""
        return _BRepFill.BRepFill_ShapeLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_ShapeLaw.Edge = new_instancemethod(_BRepFill.BRepFill_ShapeLaw_Edge, None, BRepFill_ShapeLaw)
BRepFill_ShapeLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_ShapeLaw__kill_pointed, None, BRepFill_ShapeLaw)
BRepFill_ShapeLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_ShapeLaw_GetHandle, None, BRepFill_ShapeLaw)
BRepFill_ShapeLaw_swigregister = _BRepFill.BRepFill_ShapeLaw_swigregister
BRepFill_ShapeLaw_swigregister(BRepFill_ShapeLaw)

class Handle_BRepFill_ShapeLaw(Handle_BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_ShapeLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_ShapeLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_ShapeLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_ShapeLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_ShapeLaw_Nullify, None, Handle_BRepFill_ShapeLaw)
Handle_BRepFill_ShapeLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_ShapeLaw_IsNull, None, Handle_BRepFill_ShapeLaw)
Handle_BRepFill_ShapeLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_ShapeLaw_GetObject, None, Handle_BRepFill_ShapeLaw)
Handle_BRepFill_ShapeLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_ShapeLaw__kill_pointed, None, Handle_BRepFill_ShapeLaw)
Handle_BRepFill_ShapeLaw_swigregister = _BRepFill.Handle_BRepFill_ShapeLaw_swigregister
Handle_BRepFill_ShapeLaw_swigregister(Handle_BRepFill_ShapeLaw)

def Handle_BRepFill_ShapeLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_ShapeLaw_DownCast(AnObject)
Handle_BRepFill_ShapeLaw_DownCast = _BRepFill.Handle_BRepFill_ShapeLaw_DownCast

class BRepFill_DraftLaw(BRepFill_Edge3DLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        :type Path: TopoDS_Wire &
        :param Law:
        :type Law: Handle_GeomFill_LocationDraft &
        :rtype: None

        """
        _BRepFill.BRepFill_DraftLaw_swiginit(self, _BRepFill.new_BRepFill_DraftLaw(*args))

    def CleanLaw(self, *args):
        """
        * To clean the little discontinuities.

        :param TolAngular:
        :type TolAngular: float
        :rtype: None

        """
        return _BRepFill.BRepFill_DraftLaw_CleanLaw(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepFill_DraftLaw self)"""
        return _BRepFill.BRepFill_DraftLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepFill_DraftLaw self) -> Handle_BRepFill_DraftLaw"""
        return _BRepFill.BRepFill_DraftLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFill_DraftLaw.CleanLaw = new_instancemethod(_BRepFill.BRepFill_DraftLaw_CleanLaw, None, BRepFill_DraftLaw)
BRepFill_DraftLaw._kill_pointed = new_instancemethod(_BRepFill.BRepFill_DraftLaw__kill_pointed, None, BRepFill_DraftLaw)
BRepFill_DraftLaw.GetHandle = new_instancemethod(_BRepFill.BRepFill_DraftLaw_GetHandle, None, BRepFill_DraftLaw)
BRepFill_DraftLaw_swigregister = _BRepFill.BRepFill_DraftLaw_swigregister
BRepFill_DraftLaw_swigregister(BRepFill_DraftLaw)

class Handle_BRepFill_DraftLaw(Handle_BRepFill_Edge3DLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.Handle_BRepFill_DraftLaw_swiginit(self, _BRepFill.new_Handle_BRepFill_DraftLaw(*args))
    DownCast = staticmethod(_BRepFill.Handle_BRepFill_DraftLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepFill_DraftLaw.Nullify = new_instancemethod(_BRepFill.Handle_BRepFill_DraftLaw_Nullify, None, Handle_BRepFill_DraftLaw)
Handle_BRepFill_DraftLaw.IsNull = new_instancemethod(_BRepFill.Handle_BRepFill_DraftLaw_IsNull, None, Handle_BRepFill_DraftLaw)
Handle_BRepFill_DraftLaw.GetObject = new_instancemethod(_BRepFill.Handle_BRepFill_DraftLaw_GetObject, None, Handle_BRepFill_DraftLaw)
Handle_BRepFill_DraftLaw._kill_pointed = new_instancemethod(_BRepFill.Handle_BRepFill_DraftLaw__kill_pointed, None, Handle_BRepFill_DraftLaw)
Handle_BRepFill_DraftLaw_swigregister = _BRepFill.Handle_BRepFill_DraftLaw_swigregister
Handle_BRepFill_DraftLaw_swigregister(Handle_BRepFill_DraftLaw)

def Handle_BRepFill_DraftLaw_DownCast(AnObject):
    return _BRepFill.Handle_BRepFill_DraftLaw_DownCast(AnObject)
Handle_BRepFill_DraftLaw_DownCast = _BRepFill.Handle_BRepFill_DraftLaw_DownCast



