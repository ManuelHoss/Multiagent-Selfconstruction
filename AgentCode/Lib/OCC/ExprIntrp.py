# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ExprIntrp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ExprIntrp', [dirname(__file__)])
        except ImportError:
            import _ExprIntrp
            return _ExprIntrp
        if fp is not None:
            try:
                _mod = imp.load_module('_ExprIntrp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
else:
    import _ExprIntrp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ExprIntrp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ExprIntrp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ExprIntrp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ExprIntrp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ExprIntrp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ExprIntrp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ExprIntrp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ExprIntrp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ExprIntrp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ExprIntrp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ExprIntrp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ExprIntrp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ExprIntrp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ExprIntrp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ExprIntrp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ExprIntrp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Expr
import OCC.Standard
import OCC.MMgt
import OCC.TColStd
import OCC.TCollection
class exprintrp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


exprintrp._kill_pointed = new_instancemethod(_ExprIntrp.exprintrp__kill_pointed, None, exprintrp)
exprintrp_swigregister = _ExprIntrp.exprintrp_swigregister
exprintrp_swigregister(exprintrp)

class ExprIntrp_Analysis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_Analysis_swiginit(self, _ExprIntrp.new_ExprIntrp_Analysis(*args))

    def SetMaster(self, *args):
        """
        :param agen:
        :type agen: Handle_ExprIntrp_Generator &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_SetMaster(self, *args)


    def Push(self, *args):
        """
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Push(self, *args)


    def PushRelation(self, *args):
        """
        :param rel:
        :type rel: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushRelation(self, *args)


    def PushName(self, *args):
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushName(self, *args)


    def PushValue(self, *args):
        """
        :param degree:
        :type degree: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushValue(self, *args)


    def PushFunction(self, *args):
        """
        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushFunction(self, *args)


    def Pop(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_Analysis_Pop(self, *args)


    def PopRelation(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopRelation(self, *args)


    def PopName(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopName(self, *args)


    def PopValue(self, *args):
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopValue(self, *args)


    def PopFunction(self, *args):
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopFunction(self, *args)


    def IsExpStackEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty(self, *args)


    def IsRelStackEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty(self, *args)


    def ResetAll(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_ResetAll(self, *args)


    def Use(self, *args):
        """
        :param func:
        :type func: Handle_Expr_NamedFunction &
        :rtype: None

        :param named:
        :type named: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Use(self, *args)


    def GetNamed(self, *args):
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetNamed(self, *args)


    def GetFunction(self, *args):
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetFunction(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_Analysis.SetMaster = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_SetMaster, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Push = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Push, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Pop, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsExpStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsRelStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.ResetAll = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_ResetAll, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Use, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetNamed, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis__kill_pointed, None, ExprIntrp_Analysis)
ExprIntrp_Analysis_swigregister = _ExprIntrp.ExprIntrp_Analysis_swigregister
ExprIntrp_Analysis_swigregister(ExprIntrp_Analysis)

class ExprIntrp_Generator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Use(self, *args):
        """
        :param func:
        :type func: Handle_Expr_NamedFunction &
        :rtype: None

        :param named:
        :type named: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Generator_Use(self, *args)


    def GetFunctions(self, *args):
        """
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunctions(self, *args)


    def GetNamed(self, *args):
        """
        :rtype: ExprIntrp_SequenceOfNamedExpression

        * Returns NamedExpression with name <name> already interpreted if it exists. Returns a null handle if not.

        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_Generator_GetNamed(self, *args)


    def GetFunction(self, *args):
        """
        * Returns NamedFunction with name <name> already interpreted if it exists. Returns a null handle if not.

        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunction(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_Generator self)"""
        return _ExprIntrp.ExprIntrp_Generator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_Generator self) -> Handle_ExprIntrp_Generator"""
        return _ExprIntrp.ExprIntrp_Generator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_Generator.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_Use, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetFunctions = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunctions, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetNamed, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunction, None, ExprIntrp_Generator)
ExprIntrp_Generator._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_Generator__kill_pointed, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetHandle, None, ExprIntrp_Generator)
ExprIntrp_Generator_swigregister = _ExprIntrp.ExprIntrp_Generator_swigregister
ExprIntrp_Generator_swigregister(ExprIntrp_Generator)

class Handle_ExprIntrp_Generator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_Generator_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_Generator(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_Generator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_Generator.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator_Nullify, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator_IsNull, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator_GetObject, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator__kill_pointed, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator_swigregister = _ExprIntrp.Handle_ExprIntrp_Generator_swigregister
Handle_ExprIntrp_Generator_swigregister(Handle_ExprIntrp_Generator)

def Handle_ExprIntrp_Generator_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_Generator_DownCast(AnObject)
Handle_ExprIntrp_Generator_DownCast = _ExprIntrp.Handle_ExprIntrp_Generator_DownCast

class ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_NamedExpression &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_SequenceNodeOfSequenceOfNamedExpression self)"""
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_SequenceNodeOfSequenceOfNamedExpression self) -> Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression"""
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Value, None, ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression__kill_pointed, None, ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_GetHandle, None, ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister(ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)

class Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Nullify, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_IsNull, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_GetObject, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression__kill_pointed, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister(Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)

def Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast(AnObject)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast

class ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_NamedFunction &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_SequenceNodeOfSequenceOfNamedFunction self)"""
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_SequenceNodeOfSequenceOfNamedFunction self) -> Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction"""
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Value, None, ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction__kill_pointed, None, ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_GetHandle, None, ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister(ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)

class Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Nullify, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_IsNull, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_GetObject, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction__kill_pointed, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister(Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)

def Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast(AnObject)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast

class ExprIntrp_SequenceOfNamedExpression(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedExpression(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedExpression &
        :rtype: ExprIntrp_SequenceOfNamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedExpression &
        :rtype: ExprIntrp_SequenceOfNamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_SequenceOfNamedExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression__kill_pointed, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swigregister
ExprIntrp_SequenceOfNamedExpression_swigregister(ExprIntrp_SequenceOfNamedExpression)

class ExprIntrp_SequenceOfNamedFunction(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedFunction(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedFunction &
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedFunction &
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_NamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_SequenceOfNamedFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction__kill_pointed, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swigregister
ExprIntrp_SequenceOfNamedFunction_swigregister(ExprIntrp_SequenceOfNamedFunction)

class ExprIntrp_StackIteratorOfStackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackIteratorOfStackOfGeneralExpression(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackIteratorOfStackOfGeneralExpression.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Initialize, None, ExprIntrp_StackIteratorOfStackOfGeneralExpression)
ExprIntrp_StackIteratorOfStackOfGeneralExpression.More = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_More, None, ExprIntrp_StackIteratorOfStackOfGeneralExpression)
ExprIntrp_StackIteratorOfStackOfGeneralExpression.Next = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Next, None, ExprIntrp_StackIteratorOfStackOfGeneralExpression)
ExprIntrp_StackIteratorOfStackOfGeneralExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_Value, None, ExprIntrp_StackIteratorOfStackOfGeneralExpression)
ExprIntrp_StackIteratorOfStackOfGeneralExpression._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression__kill_pointed, None, ExprIntrp_StackIteratorOfStackOfGeneralExpression)
ExprIntrp_StackIteratorOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralExpression_swigregister
ExprIntrp_StackIteratorOfStackOfGeneralExpression_swigregister(ExprIntrp_StackIteratorOfStackOfGeneralExpression)

class ExprIntrp_StackIteratorOfStackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackIteratorOfStackOfGeneralFunction(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackIteratorOfStackOfGeneralFunction.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Initialize, None, ExprIntrp_StackIteratorOfStackOfGeneralFunction)
ExprIntrp_StackIteratorOfStackOfGeneralFunction.More = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_More, None, ExprIntrp_StackIteratorOfStackOfGeneralFunction)
ExprIntrp_StackIteratorOfStackOfGeneralFunction.Next = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Next, None, ExprIntrp_StackIteratorOfStackOfGeneralFunction)
ExprIntrp_StackIteratorOfStackOfGeneralFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_Value, None, ExprIntrp_StackIteratorOfStackOfGeneralFunction)
ExprIntrp_StackIteratorOfStackOfGeneralFunction._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction__kill_pointed, None, ExprIntrp_StackIteratorOfStackOfGeneralFunction)
ExprIntrp_StackIteratorOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralFunction_swigregister
ExprIntrp_StackIteratorOfStackOfGeneralFunction_swigregister(ExprIntrp_StackIteratorOfStackOfGeneralFunction)

class ExprIntrp_StackIteratorOfStackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackIteratorOfStackOfGeneralRelation(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackIteratorOfStackOfGeneralRelation.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Initialize, None, ExprIntrp_StackIteratorOfStackOfGeneralRelation)
ExprIntrp_StackIteratorOfStackOfGeneralRelation.More = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_More, None, ExprIntrp_StackIteratorOfStackOfGeneralRelation)
ExprIntrp_StackIteratorOfStackOfGeneralRelation.Next = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Next, None, ExprIntrp_StackIteratorOfStackOfGeneralRelation)
ExprIntrp_StackIteratorOfStackOfGeneralRelation.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_Value, None, ExprIntrp_StackIteratorOfStackOfGeneralRelation)
ExprIntrp_StackIteratorOfStackOfGeneralRelation._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation__kill_pointed, None, ExprIntrp_StackIteratorOfStackOfGeneralRelation)
ExprIntrp_StackIteratorOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackIteratorOfStackOfGeneralRelation_swigregister
ExprIntrp_StackIteratorOfStackOfGeneralRelation_swigregister(ExprIntrp_StackIteratorOfStackOfGeneralRelation)

class ExprIntrp_StackIteratorOfStackOfNames(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: ExprIntrp_StackOfNames &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_swiginit(self, _ExprIntrp.new_ExprIntrp_StackIteratorOfStackOfNames(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: ExprIntrp_StackOfNames &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackIteratorOfStackOfNames.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Initialize, None, ExprIntrp_StackIteratorOfStackOfNames)
ExprIntrp_StackIteratorOfStackOfNames.More = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_More, None, ExprIntrp_StackIteratorOfStackOfNames)
ExprIntrp_StackIteratorOfStackOfNames.Next = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Next, None, ExprIntrp_StackIteratorOfStackOfNames)
ExprIntrp_StackIteratorOfStackOfNames.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_Value, None, ExprIntrp_StackIteratorOfStackOfNames)
ExprIntrp_StackIteratorOfStackOfNames._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames__kill_pointed, None, ExprIntrp_StackIteratorOfStackOfNames)
ExprIntrp_StackIteratorOfStackOfNames_swigregister = _ExprIntrp.ExprIntrp_StackIteratorOfStackOfNames_swigregister
ExprIntrp_StackIteratorOfStackOfNames_swigregister(ExprIntrp_StackIteratorOfStackOfNames)

class ExprIntrp_StackNodeOfStackOfGeneralExpression(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackNodeOfStackOfGeneralExpression(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_StackNodeOfStackOfGeneralExpression self)"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_StackNodeOfStackOfGeneralExpression self) -> Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackNodeOfStackOfGeneralExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_Value, None, ExprIntrp_StackNodeOfStackOfGeneralExpression)
ExprIntrp_StackNodeOfStackOfGeneralExpression._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression__kill_pointed, None, ExprIntrp_StackNodeOfStackOfGeneralExpression)
ExprIntrp_StackNodeOfStackOfGeneralExpression.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_GetHandle, None, ExprIntrp_StackNodeOfStackOfGeneralExpression)
ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister
ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister(ExprIntrp_StackNodeOfStackOfGeneralExpression)

class Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_Nullify, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_IsNull, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_GetObject, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression__kill_pointed, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_swigregister(Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression)

def Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_DownCast(AnObject)
Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_DownCast = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralExpression_DownCast

class ExprIntrp_StackNodeOfStackOfGeneralFunction(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackNodeOfStackOfGeneralFunction(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_StackNodeOfStackOfGeneralFunction self)"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_StackNodeOfStackOfGeneralFunction self) -> Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackNodeOfStackOfGeneralFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_Value, None, ExprIntrp_StackNodeOfStackOfGeneralFunction)
ExprIntrp_StackNodeOfStackOfGeneralFunction._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction__kill_pointed, None, ExprIntrp_StackNodeOfStackOfGeneralFunction)
ExprIntrp_StackNodeOfStackOfGeneralFunction.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_GetHandle, None, ExprIntrp_StackNodeOfStackOfGeneralFunction)
ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister
ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister(ExprIntrp_StackNodeOfStackOfGeneralFunction)

class Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_Nullify, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_IsNull, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_GetObject, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction__kill_pointed, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_swigregister(Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction)

def Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_DownCast(AnObject)
Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_DownCast = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralFunction_DownCast

class ExprIntrp_StackNodeOfStackOfGeneralRelation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackNodeOfStackOfGeneralRelation(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_StackNodeOfStackOfGeneralRelation self)"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_StackNodeOfStackOfGeneralRelation self) -> Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackNodeOfStackOfGeneralRelation.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_Value, None, ExprIntrp_StackNodeOfStackOfGeneralRelation)
ExprIntrp_StackNodeOfStackOfGeneralRelation._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation__kill_pointed, None, ExprIntrp_StackNodeOfStackOfGeneralRelation)
ExprIntrp_StackNodeOfStackOfGeneralRelation.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_GetHandle, None, ExprIntrp_StackNodeOfStackOfGeneralRelation)
ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister
ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister(ExprIntrp_StackNodeOfStackOfGeneralRelation)

class Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_Nullify, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_IsNull, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_GetObject, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation__kill_pointed, None, Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_swigregister(Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation)

def Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_DownCast(AnObject)
Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_DownCast = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfGeneralRelation_DownCast

class ExprIntrp_StackNodeOfStackOfNames(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TCollection_AsciiString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_swiginit(self, _ExprIntrp.new_ExprIntrp_StackNodeOfStackOfNames(*args))

    def Value(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_StackNodeOfStackOfNames self)"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfNames__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_StackNodeOfStackOfNames self) -> Handle_ExprIntrp_StackNodeOfStackOfNames"""
        return _ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackNodeOfStackOfNames.Value = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_Value, None, ExprIntrp_StackNodeOfStackOfNames)
ExprIntrp_StackNodeOfStackOfNames._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfNames__kill_pointed, None, ExprIntrp_StackNodeOfStackOfNames)
ExprIntrp_StackNodeOfStackOfNames.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_GetHandle, None, ExprIntrp_StackNodeOfStackOfNames)
ExprIntrp_StackNodeOfStackOfNames_swigregister = _ExprIntrp.ExprIntrp_StackNodeOfStackOfNames_swigregister
ExprIntrp_StackNodeOfStackOfNames_swigregister(ExprIntrp_StackNodeOfStackOfNames)

class Handle_ExprIntrp_StackNodeOfStackOfNames(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_StackNodeOfStackOfNames(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_StackNodeOfStackOfNames.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_Nullify, None, Handle_ExprIntrp_StackNodeOfStackOfNames)
Handle_ExprIntrp_StackNodeOfStackOfNames.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_IsNull, None, Handle_ExprIntrp_StackNodeOfStackOfNames)
Handle_ExprIntrp_StackNodeOfStackOfNames.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_GetObject, None, Handle_ExprIntrp_StackNodeOfStackOfNames)
Handle_ExprIntrp_StackNodeOfStackOfNames._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames__kill_pointed, None, Handle_ExprIntrp_StackNodeOfStackOfNames)
Handle_ExprIntrp_StackNodeOfStackOfNames_swigregister = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_swigregister
Handle_ExprIntrp_StackNodeOfStackOfNames_swigregister(Handle_ExprIntrp_StackNodeOfStackOfNames)

def Handle_ExprIntrp_StackNodeOfStackOfNames_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_DownCast(AnObject)
Handle_ExprIntrp_StackNodeOfStackOfNames_DownCast = _ExprIntrp.Handle_ExprIntrp_StackNodeOfStackOfNames_DownCast

class ExprIntrp_StackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralExpression(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: ExprIntrp_StackOfGeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: ExprIntrp_StackOfGeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_IsEmpty(self, *args)


    def Depth(self, *args):
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Depth(self, *args)


    def Top(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Top(self, *args)


    def Push(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Push(self, *args)


    def Pop(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Pop(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear(self, *args)


    def ChangeTop(self, *args):
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_ChangeTop(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackOfGeneralExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_IsEmpty, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Depth = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Depth, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Top = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Top, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Push = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Push, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Pop, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.ChangeTop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_ChangeTop, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression__kill_pointed, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swigregister
ExprIntrp_StackOfGeneralExpression_swigregister(ExprIntrp_StackOfGeneralExpression)

class ExprIntrp_StackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralFunction(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: ExprIntrp_StackOfGeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: ExprIntrp_StackOfGeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_IsEmpty(self, *args)


    def Depth(self, *args):
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Depth(self, *args)


    def Top(self, *args):
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Top(self, *args)


    def Push(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Push(self, *args)


    def Pop(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Pop(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear(self, *args)


    def ChangeTop(self, *args):
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_ChangeTop(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackOfGeneralFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_IsEmpty, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Depth = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Depth, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Top = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Top, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Push = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Push, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Pop, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.ChangeTop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_ChangeTop, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction__kill_pointed, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swigregister
ExprIntrp_StackOfGeneralFunction_swigregister(ExprIntrp_StackOfGeneralFunction)

class ExprIntrp_StackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralRelation(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: ExprIntrp_StackOfGeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: ExprIntrp_StackOfGeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_IsEmpty(self, *args)


    def Depth(self, *args):
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Depth(self, *args)


    def Top(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Top(self, *args)


    def Push(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Push(self, *args)


    def Pop(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Pop(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear(self, *args)


    def ChangeTop(self, *args):
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_ChangeTop(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackOfGeneralRelation.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_IsEmpty, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Depth = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Depth, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Top = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Top, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Push = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Push, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Pop, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.ChangeTop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_ChangeTop, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation__kill_pointed, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swigregister
ExprIntrp_StackOfGeneralRelation_swigregister(ExprIntrp_StackOfGeneralRelation)

class ExprIntrp_StackOfNames(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfNames_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfNames(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfNames &
        :rtype: ExprIntrp_StackOfNames

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ExprIntrp_StackOfNames &
        :rtype: ExprIntrp_StackOfNames

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Set(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_IsEmpty(self, *args)


    def Depth(self, *args):
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Depth(self, *args)


    def Top(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Top(self, *args)


    def Push(self, *args):
        """
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Push(self, *args)


    def Pop(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Pop(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_Clear(self, *args)


    def ChangeTop(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_StackOfNames_ChangeTop(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_StackOfNames.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Assign, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Set, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_IsEmpty, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Depth = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Depth, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Top = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Top, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Push = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Push, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Pop, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_Clear, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames.ChangeTop = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames_ChangeTop, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfNames__kill_pointed, None, ExprIntrp_StackOfNames)
ExprIntrp_StackOfNames_swigregister = _ExprIntrp.ExprIntrp_StackOfNames_swigregister
ExprIntrp_StackOfNames_swigregister(ExprIntrp_StackOfNames)

class ExprIntrp_GenExp(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args):
        """
        :rtype: Handle_ExprIntrp_GenExp

        """
        return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args):
        """
        * Processes given string.

        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenExp_Process(self, *args)


    def IsDone(self, *args):
        """
        * Returns false if any syntax error has occurred during process.

        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenExp_IsDone(self, *args)


    def Expression(self, *args):
        """
        * Returns expression generated. Raises an exception if IsDone answers false.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_GenExp_Expression(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_GenExp self)"""
        return _ExprIntrp.ExprIntrp_GenExp__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_GenExp self) -> Handle_ExprIntrp_GenExp"""
        return _ExprIntrp.ExprIntrp_GenExp_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_GenExp.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Process, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_IsDone, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.Expression = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Expression, None, ExprIntrp_GenExp)
ExprIntrp_GenExp._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp__kill_pointed, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_GetHandle, None, ExprIntrp_GenExp)
ExprIntrp_GenExp_swigregister = _ExprIntrp.ExprIntrp_GenExp_swigregister
ExprIntrp_GenExp_swigregister(ExprIntrp_GenExp)

def ExprIntrp_GenExp_Create(*args):
    """
    :rtype: Handle_ExprIntrp_GenExp

    """
    return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

class Handle_ExprIntrp_GenExp(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenExp_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenExp(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenExp_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_GenExp.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp_Nullify, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp_IsNull, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp_GetObject, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp__kill_pointed, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp_swigregister = _ExprIntrp.Handle_ExprIntrp_GenExp_swigregister
Handle_ExprIntrp_GenExp_swigregister(Handle_ExprIntrp_GenExp)

def Handle_ExprIntrp_GenExp_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast(AnObject)
Handle_ExprIntrp_GenExp_DownCast = _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast

class ExprIntrp_GenFct(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args):
        """
        :rtype: Handle_ExprIntrp_GenFct

        """
        return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args):
        """
        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenFct_Process(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenFct_IsDone(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_GenFct self)"""
        return _ExprIntrp.ExprIntrp_GenFct__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_GenFct self) -> Handle_ExprIntrp_GenFct"""
        return _ExprIntrp.ExprIntrp_GenFct_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_GenFct.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_Process, None, ExprIntrp_GenFct)
ExprIntrp_GenFct.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_IsDone, None, ExprIntrp_GenFct)
ExprIntrp_GenFct._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct__kill_pointed, None, ExprIntrp_GenFct)
ExprIntrp_GenFct.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_GetHandle, None, ExprIntrp_GenFct)
ExprIntrp_GenFct_swigregister = _ExprIntrp.ExprIntrp_GenFct_swigregister
ExprIntrp_GenFct_swigregister(ExprIntrp_GenFct)

def ExprIntrp_GenFct_Create(*args):
    """
    :rtype: Handle_ExprIntrp_GenFct

    """
    return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

class Handle_ExprIntrp_GenFct(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenFct_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenFct(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenFct_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_GenFct.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct_Nullify, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct_IsNull, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct_GetObject, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct__kill_pointed, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct_swigregister = _ExprIntrp.Handle_ExprIntrp_GenFct_swigregister
Handle_ExprIntrp_GenFct_swigregister(Handle_ExprIntrp_GenFct)

def Handle_ExprIntrp_GenFct_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast(AnObject)
Handle_ExprIntrp_GenFct_DownCast = _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast

class ExprIntrp_GenRel(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args):
        """
        :rtype: Handle_ExprIntrp_GenRel

        """
        return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args):
        """
        * Processes given string.

        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenRel_Process(self, *args)


    def IsDone(self, *args):
        """
        * Returns false if any syntax error has occurred during process.

        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenRel_IsDone(self, *args)


    def Relation(self, *args):
        """
        * Returns relation generated. Raises an exception if IsDone answers false.

        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_GenRel_Relation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ExprIntrp_GenRel self)"""
        return _ExprIntrp.ExprIntrp_GenRel__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ExprIntrp_GenRel self) -> Handle_ExprIntrp_GenRel"""
        return _ExprIntrp.ExprIntrp_GenRel_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ExprIntrp_GenRel.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Process, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_IsDone, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.Relation = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Relation, None, ExprIntrp_GenRel)
ExprIntrp_GenRel._kill_pointed = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel__kill_pointed, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.GetHandle = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_GetHandle, None, ExprIntrp_GenRel)
ExprIntrp_GenRel_swigregister = _ExprIntrp.ExprIntrp_GenRel_swigregister
ExprIntrp_GenRel_swigregister(ExprIntrp_GenRel)

def ExprIntrp_GenRel_Create(*args):
    """
    :rtype: Handle_ExprIntrp_GenRel

    """
    return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

class Handle_ExprIntrp_GenRel(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenRel_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenRel(*args))
    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenRel_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ExprIntrp_GenRel.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel_Nullify, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel_IsNull, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel.GetObject = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel_GetObject, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel._kill_pointed = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel__kill_pointed, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel_swigregister = _ExprIntrp.Handle_ExprIntrp_GenRel_swigregister
Handle_ExprIntrp_GenRel_swigregister(Handle_ExprIntrp_GenRel)

def Handle_ExprIntrp_GenRel_DownCast(AnObject):
    return _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast(AnObject)
Handle_ExprIntrp_GenRel_DownCast = _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast



