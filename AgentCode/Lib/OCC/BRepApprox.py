# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepApprox.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepApprox', [dirname(__file__)])
        except ImportError:
            import _BRepApprox
            return _BRepApprox
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepApprox', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepApprox = swig_import_helper()
    del swig_import_helper
else:
    import _BRepApprox
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepApprox.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepApprox.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepApprox.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepApprox.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepApprox.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepApprox.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepApprox.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepApprox.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepApprox.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepApprox.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepApprox.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepApprox.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepApprox.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepApprox.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepApprox.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepApprox.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepApprox.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepApprox.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.Approx
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
import OCC.AppCont
import OCC.AppParCurves
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.TopoDS
import OCC.TopLoc
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.IntImp
import OCC.ApproxInt
class BRepApprox_Approx(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepApprox.BRepApprox_Approx_swiginit(self, _BRepApprox.new_BRepApprox_Approx(*args))

    def SetParameters(self, *args):
        """
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param DegMin:
        :type DegMin: int
        :param DegMax:
        :type DegMax: int
        :param NbIterMax:
        :type NbIterMax: int
        :param ApproxWithTangency: default value is Standard_True
        :type ApproxWithTangency: bool
        :param Parametrization: default value is Approx_ChordLength
        :type Parametrization: Approx_ParametrizationType
        :rtype: None

        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param RelativeTol:
        :type RelativeTol: bool
        :param DegMin:
        :type DegMin: int
        :param DegMax:
        :type DegMax: int
        :param NbIterMax:
        :type NbIterMax: int
        :param NbPntMax:
        :type NbPntMax: int
        :param ApproxWithTangency: default value is Standard_True
        :type ApproxWithTangency: bool
        :param Parametrization: default value is Approx_ChordLength
        :type Parametrization: Approx_ParametrizationType
        :rtype: None

        """
        return _BRepApprox.BRepApprox_Approx_SetParameters(self, *args)


    def TolReached3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_Approx_TolReached3d(self, *args)


    def TolReached2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_Approx_TolReached2d(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_Approx_IsDone(self, *args)


    def NbMultiCurves(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_Approx_NbMultiCurves(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_Approx_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_Approx.SetParameters = new_instancemethod(_BRepApprox.BRepApprox_Approx_SetParameters, None, BRepApprox_Approx)
BRepApprox_Approx.TolReached3d = new_instancemethod(_BRepApprox.BRepApprox_Approx_TolReached3d, None, BRepApprox_Approx)
BRepApprox_Approx.TolReached2d = new_instancemethod(_BRepApprox.BRepApprox_Approx_TolReached2d, None, BRepApprox_Approx)
BRepApprox_Approx.IsDone = new_instancemethod(_BRepApprox.BRepApprox_Approx_IsDone, None, BRepApprox_Approx)
BRepApprox_Approx.NbMultiCurves = new_instancemethod(_BRepApprox.BRepApprox_Approx_NbMultiCurves, None, BRepApprox_Approx)
BRepApprox_Approx.Value = new_instancemethod(_BRepApprox.BRepApprox_Approx_Value, None, BRepApprox_Approx)
BRepApprox_Approx._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_Approx__kill_pointed, None, BRepApprox_Approx)
BRepApprox_Approx_swigregister = _BRepApprox.BRepApprox_Approx_swigregister
BRepApprox_Approx_swigregister(BRepApprox_Approx)

class BRepApprox_ApproxLine(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param CurveXYZ:
        :type CurveXYZ: Handle_Geom_BSplineCurve &
        :param CurveUV1:
        :type CurveUV1: Handle_Geom2d_BSplineCurve &
        :param CurveUV2:
        :type CurveUV2: Handle_Geom2d_BSplineCurve &
        :rtype: None

        :param lin:
        :type lin: Handle_IntSurf_LineOn2S &
        :param Tang:
        :type Tang: bool
        :rtype: None

        """
        _BRepApprox.BRepApprox_ApproxLine_swiginit(self, _BRepApprox.new_BRepApprox_ApproxLine(*args))

    def NbPnts(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_ApproxLine_NbPnts(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PntOn2S

        """
        return _BRepApprox.BRepApprox_ApproxLine_Point(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepApprox_ApproxLine self)"""
        return _BRepApprox.BRepApprox_ApproxLine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepApprox_ApproxLine self) -> Handle_BRepApprox_ApproxLine"""
        return _BRepApprox.BRepApprox_ApproxLine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ApproxLine.NbPnts = new_instancemethod(_BRepApprox.BRepApprox_ApproxLine_NbPnts, None, BRepApprox_ApproxLine)
BRepApprox_ApproxLine.Point = new_instancemethod(_BRepApprox.BRepApprox_ApproxLine_Point, None, BRepApprox_ApproxLine)
BRepApprox_ApproxLine._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ApproxLine__kill_pointed, None, BRepApprox_ApproxLine)
BRepApprox_ApproxLine.GetHandle = new_instancemethod(_BRepApprox.BRepApprox_ApproxLine_GetHandle, None, BRepApprox_ApproxLine)
BRepApprox_ApproxLine_swigregister = _BRepApprox.BRepApprox_ApproxLine_swigregister
BRepApprox_ApproxLine_swigregister(BRepApprox_ApproxLine)

class Handle_BRepApprox_ApproxLine(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepApprox.Handle_BRepApprox_ApproxLine_swiginit(self, _BRepApprox.new_Handle_BRepApprox_ApproxLine(*args))
    DownCast = staticmethod(_BRepApprox.Handle_BRepApprox_ApproxLine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepApprox_ApproxLine.Nullify = new_instancemethod(_BRepApprox.Handle_BRepApprox_ApproxLine_Nullify, None, Handle_BRepApprox_ApproxLine)
Handle_BRepApprox_ApproxLine.IsNull = new_instancemethod(_BRepApprox.Handle_BRepApprox_ApproxLine_IsNull, None, Handle_BRepApprox_ApproxLine)
Handle_BRepApprox_ApproxLine.GetObject = new_instancemethod(_BRepApprox.Handle_BRepApprox_ApproxLine_GetObject, None, Handle_BRepApprox_ApproxLine)
Handle_BRepApprox_ApproxLine._kill_pointed = new_instancemethod(_BRepApprox.Handle_BRepApprox_ApproxLine__kill_pointed, None, Handle_BRepApprox_ApproxLine)
Handle_BRepApprox_ApproxLine_swigregister = _BRepApprox.Handle_BRepApprox_ApproxLine_swigregister
Handle_BRepApprox_ApproxLine_swigregister(Handle_BRepApprox_ApproxLine)

def Handle_BRepApprox_ApproxLine_DownCast(AnObject):
    return _BRepApprox.Handle_BRepApprox_ApproxLine_DownCast(AnObject)
Handle_BRepApprox_ApproxLine_DownCast = _BRepApprox.Handle_BRepApprox_ApproxLine_DownCast

class BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox(*args))

    def IsSolutionReached(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_IsSolutionReached(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox.IsSolutionReached = new_instancemethod(_BRepApprox.BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_IsSolutionReached, None, BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_swigregister
BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox_swigregister(BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox)

class BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox(*args))

    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_NbVariables(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Value(self, *args)


    def Gradient(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Gradient(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Values(self, *args)


    def NewParameters(self, *args):
        """
        :rtype: math_Vector

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_NewParameters(self, *args)


    def CurveValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_CurveValue(self, *args)


    def Error(self, *args):
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_MaxError2d(self, *args)


    def FunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_DerivativeFunctionMatrix(self, *args)


    def Index(self, *args):
        """
        :rtype: math_IntegerVector

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Index(self, *args)


    def FirstConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_LastConstraint(self, *args)


    def SetFirstLambda(self, *args):
        """
        :param l1:
        :type l1: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_SetFirstLambda(self, *args)


    def SetLastLambda(self, *args):
        """
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_SetLastLambda(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.NbVariables = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_NbVariables, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Value, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.Gradient = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Gradient, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.Values = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Values, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.NewParameters = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_NewParameters, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.CurveValue = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_CurveValue, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Error, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_MaxError3d, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_MaxError2d, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.FunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_FunctionMatrix, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.DerivativeFunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_DerivativeFunctionMatrix, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.Index = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_Index, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.FirstConstraint = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_FirstConstraint, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.LastConstraint = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_LastConstraint, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.SetFirstLambda = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_SetFirstLambda, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox.SetLastLambda = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_SetLastLambda, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_swigregister
BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox_swigregister(BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox)

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox(*args))

    def Perform(self, *args):
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_IsDone(self, *args)


    def BezierValue(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_BezierValue(self, *args)


    def BSplineValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args):
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_ErrorGradient(self, *args)


    def Distance(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Distance(self, *args)


    def Error(self, *args):
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Error(self, *args)


    def FirstLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_FirstLambda(self, *args)


    def LastLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_LastLambda(self, *args)


    def Points(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Points(self, *args)


    def Poles(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Poles(self, *args)


    def KIndex(self, *args):
        """
        :rtype: math_IntegerVector

        """
        return _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_KIndex(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Perform, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_IsDone, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.BezierValue = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_BezierValue, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.BSplineValue = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_BSplineValue, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.FunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_FunctionMatrix, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.DerivativeFunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_DerivativeFunctionMatrix, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.ErrorGradient = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_ErrorGradient, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.Distance = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Distance, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Error, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.FirstLambda = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_FirstLambda, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.LastLambda = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_LastLambda, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.Points = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Points, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.Poles = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_Poles, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox.KIndex = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_KIndex, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_swigregister
BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_swigregister(BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox)

class BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox(*args))

    def IsSolutionReached(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_IsSolutionReached(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox.IsSolutionReached = new_instancemethod(_BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_IsSolutionReached, None, BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_swigregister
BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox_swigregister(BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox)

class BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox(*args))

    def IsSolutionReached(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_IsSolutionReached(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox.IsSolutionReached = new_instancemethod(_BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_IsSolutionReached, None, BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_swigregister
BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox_swigregister(BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox)

class BRepApprox_MyBSplGradientOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 1
        :type NbIterations: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations:
        :type NbIterations: int
        :param lambda1:
        :type lambda1: float
        :param lambda2:
        :type lambda2: float
        :rtype: None

        """
        _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_MyBSplGradientOfTheComputeLineOfApprox(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_IsDone(self, *args)


    def Value(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_Value(self, *args)


    def Error(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_MaxError2d(self, *args)


    def AverageError(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_AverageError(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_IsDone, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_Value, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_Error, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_MaxError3d, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_MaxError2d, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox.AverageError = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_AverageError, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_swigregister
BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_swigregister(BRepApprox_MyBSplGradientOfTheComputeLineOfApprox)

class BRepApprox_MyGradientOfTheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_MyGradientOfTheComputeLineBezierOfApprox(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_IsDone(self, *args)


    def Value(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_Value(self, *args)


    def Error(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_MaxError2d(self, *args)


    def AverageError(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_AverageError(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_IsDone, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_Value, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_Error, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_MaxError3d, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_MaxError2d, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox.AverageError = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_AverageError, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_swigregister
BRepApprox_MyGradientOfTheComputeLineBezierOfApprox_swigregister(BRepApprox_MyGradientOfTheComputeLineBezierOfApprox)

class BRepApprox_MyGradientbisOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_MyGradientbisOfTheComputeLineOfApprox(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_IsDone(self, *args)


    def Value(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_Value(self, *args)


    def Error(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_MaxError2d(self, *args)


    def AverageError(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_AverageError(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_MyGradientbisOfTheComputeLineOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_IsDone, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_Value, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_Error, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_MaxError3d, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_MaxError2d, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox.AverageError = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_AverageError, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_MyGradientbisOfTheComputeLineOfApprox)
BRepApprox_MyGradientbisOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_MyGradientbisOfTheComputeLineOfApprox_swigregister
BRepApprox_MyGradientbisOfTheComputeLineOfApprox_swigregister(BRepApprox_MyGradientbisOfTheComputeLineOfApprox)

class BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox(*args))

    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_NbVariables(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Value(self, *args)


    def Gradient(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Gradient(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Values(self, *args)


    def NewParameters(self, *args):
        """
        :rtype: math_Vector

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_NewParameters(self, *args)


    def CurveValue(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_CurveValue(self, *args)


    def Error(self, *args):
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_MaxError2d(self, *args)


    def FirstConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_LastConstraint(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.NbVariables = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_NbVariables, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Value, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.Gradient = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Gradient, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.Values = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Values, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.NewParameters = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_NewParameters, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.CurveValue = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_CurveValue, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_Error, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_MaxError3d, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_MaxError2d, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.FirstConstraint = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_FirstConstraint, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox.LastConstraint = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_LastConstraint, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_swigregister
BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox_swigregister(BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox)

class BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox(*args))

    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_NbVariables(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Value(self, *args)


    def Gradient(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Gradient(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: float &
        :param G:
        :type G: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Values(self, *args)


    def NewParameters(self, *args):
        """
        :rtype: math_Vector

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_NewParameters(self, *args)


    def CurveValue(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_CurveValue(self, *args)


    def Error(self, *args):
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Error(self, *args)


    def MaxError3d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_MaxError2d(self, *args)


    def FirstConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args):
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_LastConstraint(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.NbVariables = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_NbVariables, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Value, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.Gradient = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Gradient, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.Values = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Values, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.NewParameters = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_NewParameters, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.CurveValue = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_CurveValue, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_Error, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.MaxError3d = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_MaxError3d, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.MaxError2d = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_MaxError2d, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.FirstConstraint = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_FirstConstraint, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox.LastConstraint = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_LastConstraint, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_swigregister
BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox_swigregister(BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox)

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox(*args))

    def Perform(self, *args):
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_IsDone(self, *args)


    def BezierValue(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_BezierValue(self, *args)


    def BSplineValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args):
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_ErrorGradient(self, *args)


    def Distance(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Distance(self, *args)


    def Error(self, *args):
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Error(self, *args)


    def FirstLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_FirstLambda(self, *args)


    def LastLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_LastLambda(self, *args)


    def Points(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Points(self, *args)


    def Poles(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Poles(self, *args)


    def KIndex(self, *args):
        """
        :rtype: math_IntegerVector

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_KIndex(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Perform, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_IsDone, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.BezierValue = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_BezierValue, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.BSplineValue = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_BSplineValue, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.FunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_FunctionMatrix, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.DerivativeFunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_DerivativeFunctionMatrix, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.ErrorGradient = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_ErrorGradient, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.Distance = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Distance, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Error, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.FirstLambda = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_FirstLambda, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.LastLambda = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_LastLambda, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.Points = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Points, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.Poles = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_Poles, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox.KIndex = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_KIndex, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_swigregister
BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_swigregister(BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox)

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox(*args))

    def Perform(self, *args):
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_IsDone(self, *args)


    def BezierValue(self, *args):
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_BezierValue(self, *args)


    def BSplineValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args):
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_ErrorGradient(self, *args)


    def Distance(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Distance(self, *args)


    def Error(self, *args):
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Error(self, *args)


    def FirstLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_FirstLambda(self, *args)


    def LastLambda(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_LastLambda(self, *args)


    def Points(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Points(self, *args)


    def Poles(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Poles(self, *args)


    def KIndex(self, *args):
        """
        :rtype: math_IntegerVector

        """
        return _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_KIndex(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Perform, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_IsDone, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.BezierValue = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_BezierValue, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.BSplineValue = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_BSplineValue, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.FunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_FunctionMatrix, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.DerivativeFunctionMatrix = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_DerivativeFunctionMatrix, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.ErrorGradient = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_ErrorGradient, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.Distance = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Distance, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Error, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.FirstLambda = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_FirstLambda, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.LastLambda = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_LastLambda, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.Points = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Points, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.Poles = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_Poles, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox.KIndex = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_KIndex, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_swigregister
BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_swigregister(BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox)

class BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param SCurv:
        :type SCurv: AppParCurves_MultiCurve &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param Constraints:
        :type Constraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Bern:
        :type Bern: math_Matrix &
        :param DerivativeBern:
        :type DerivativeBern: math_Matrix &
        :param Tolerance: default value is 1.0e-10
        :type Tolerance: float
        :rtype: None

        """
        _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_IsDone(self, *args)


    def ConstraintMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_ConstraintMatrix(self, *args)


    def Duale(self, *args):
        """
        :rtype: math_Vector

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_Duale(self, *args)


    def ConstraintDerivative(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param DA:
        :type DA: math_Matrix &
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_ConstraintDerivative(self, *args)


    def InverseMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_InverseMatrix(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_IsDone, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox.ConstraintMatrix = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_ConstraintMatrix, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox.Duale = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_Duale, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox.ConstraintDerivative = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_ConstraintDerivative, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox.InverseMatrix = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_InverseMatrix, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_swigregister
BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox_swigregister(BRepApprox_ResConstraintOfMyGradientOfTheComputeLineBezierOfApprox)

class BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param SCurv:
        :type SCurv: AppParCurves_MultiCurve &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param Constraints:
        :type Constraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Bern:
        :type Bern: math_Matrix &
        :param DerivativeBern:
        :type DerivativeBern: math_Matrix &
        :param Tolerance: default value is 1.0e-10
        :type Tolerance: float
        :rtype: None

        """
        _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_IsDone(self, *args)


    def ConstraintMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_ConstraintMatrix(self, *args)


    def Duale(self, *args):
        """
        :rtype: math_Vector

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_Duale(self, *args)


    def ConstraintDerivative(self, *args):
        """
        :param SSP:
        :type SSP: BRepApprox_TheMultiLineOfApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param DA:
        :type DA: math_Matrix &
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_ConstraintDerivative(self, *args)


    def InverseMatrix(self, *args):
        """
        :rtype: math_Matrix

        """
        return _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_InverseMatrix(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_IsDone, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox.ConstraintMatrix = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_ConstraintMatrix, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox.Duale = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_Duale, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox.ConstraintDerivative = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_ConstraintDerivative, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox.InverseMatrix = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_InverseMatrix, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox__kill_pointed, None, BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_swigregister
BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox_swigregister(BRepApprox_ResConstraintOfMyGradientbisOfTheComputeLineOfApprox)

class BRepApprox_SurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstUParameter(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_FirstUParameter(*args)

    FirstUParameter = staticmethod(FirstUParameter)

    def FirstVParameter(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_FirstVParameter(*args)

    FirstVParameter = staticmethod(FirstVParameter)

    def LastUParameter(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_LastUParameter(*args)

    LastUParameter = staticmethod(LastUParameter)

    def LastVParameter(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_LastVParameter(*args)

    LastVParameter = staticmethod(LastVParameter)

    def NbUIntervals(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: int

        """
        return _BRepApprox.BRepApprox_SurfaceTool_NbUIntervals(*args)

    NbUIntervals = staticmethod(NbUIntervals)

    def NbVIntervals(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: int

        """
        return _BRepApprox.BRepApprox_SurfaceTool_NbVIntervals(*args)

    NbVIntervals = staticmethod(NbVIntervals)

    def UIntervals(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_UIntervals(*args)

    UIntervals = staticmethod(UIntervals)

    def VIntervals(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param Sh:
        :type Sh: GeomAbs_Shape
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_VIntervals(*args)

    VIntervals = staticmethod(VIntervals)

    def UTrim(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _BRepApprox.BRepApprox_SurfaceTool_UTrim(*args)

    UTrim = staticmethod(UTrim)

    def VTrim(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol:
        :type Tol: float
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _BRepApprox.BRepApprox_SurfaceTool_VTrim(*args)

    VTrim = staticmethod(VTrim)

    def IsUClosed(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_SurfaceTool_IsUClosed(*args)

    IsUClosed = staticmethod(IsUClosed)

    def IsVClosed(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_SurfaceTool_IsVClosed(*args)

    IsVClosed = staticmethod(IsVClosed)

    def IsUPeriodic(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_SurfaceTool_IsUPeriodic(*args)

    IsUPeriodic = staticmethod(IsUPeriodic)

    def UPeriod(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_UPeriod(*args)

    UPeriod = staticmethod(UPeriod)

    def IsVPeriodic(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_SurfaceTool_IsVPeriodic(*args)

    IsVPeriodic = staticmethod(IsVPeriodic)

    def VPeriod(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_VPeriod(*args)

    VPeriod = staticmethod(VPeriod)

    def Value(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :rtype: gp_Pnt

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1u:
        :type D1u: gp_Vec
        :param D1v:
        :type D1v: gp_Vec
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: void

        """
        return _BRepApprox.BRepApprox_SurfaceTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _BRepApprox.BRepApprox_SurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def UResolution(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_UResolution(*args)

    UResolution = staticmethod(UResolution)

    def VResolution(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _BRepApprox.BRepApprox_SurfaceTool_VResolution(*args)

    VResolution = staticmethod(VResolution)

    def GetType(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: GeomAbs_SurfaceType

        """
        return _BRepApprox.BRepApprox_SurfaceTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Plane(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Pln

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Plane(*args)

    Plane = staticmethod(Plane)

    def Cylinder(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Cylinder

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def Cone(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Cone

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Cone(*args)

    Cone = staticmethod(Cone)

    def Torus(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Torus

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Torus(*args)

    Torus = staticmethod(Torus)

    def Sphere(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Sphere

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Sphere(*args)

    Sphere = staticmethod(Sphere)

    def Bezier(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: Handle_Geom_BezierSurface

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: Handle_Geom_BSplineSurface

        """
        return _BRepApprox.BRepApprox_SurfaceTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def AxeOfRevolution(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Ax1

        """
        return _BRepApprox.BRepApprox_SurfaceTool_AxeOfRevolution(*args)

    AxeOfRevolution = staticmethod(AxeOfRevolution)

    def Direction(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: gp_Dir

        """
        return _BRepApprox.BRepApprox_SurfaceTool_Direction(*args)

    Direction = staticmethod(Direction)

    def BasisCurve(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _BRepApprox.BRepApprox_SurfaceTool_BasisCurve(*args)

    BasisCurve = staticmethod(BasisCurve)

    def NbSamplesU(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: int

        :param S:
        :type S: BRepAdaptor_Surface &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :rtype: int

        """
        return _BRepApprox.BRepApprox_SurfaceTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args):
        """
        :param S:
        :type S: BRepAdaptor_Surface &
        :rtype: int

        :param S:
        :type S: BRepAdaptor_Surface &
        :param v1:
        :type v1: float
        :param v2:
        :type v2: float
        :rtype: int

        """
        return _BRepApprox.BRepApprox_SurfaceTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def __init__(self):
        _BRepApprox.BRepApprox_SurfaceTool_swiginit(self, _BRepApprox.new_BRepApprox_SurfaceTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_SurfaceTool._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_SurfaceTool__kill_pointed, None, BRepApprox_SurfaceTool)
BRepApprox_SurfaceTool_swigregister = _BRepApprox.BRepApprox_SurfaceTool_swigregister
BRepApprox_SurfaceTool_swigregister(BRepApprox_SurfaceTool)

def BRepApprox_SurfaceTool_FirstUParameter(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_FirstUParameter(*args)

def BRepApprox_SurfaceTool_FirstVParameter(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_FirstVParameter(*args)

def BRepApprox_SurfaceTool_LastUParameter(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_LastUParameter(*args)

def BRepApprox_SurfaceTool_LastVParameter(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_LastVParameter(*args)

def BRepApprox_SurfaceTool_NbUIntervals(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: int

    """
    return _BRepApprox.BRepApprox_SurfaceTool_NbUIntervals(*args)

def BRepApprox_SurfaceTool_NbVIntervals(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: int

    """
    return _BRepApprox.BRepApprox_SurfaceTool_NbVIntervals(*args)

def BRepApprox_SurfaceTool_UIntervals(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_UIntervals(*args)

def BRepApprox_SurfaceTool_VIntervals(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param Sh:
    :type Sh: GeomAbs_Shape
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_VIntervals(*args)

def BRepApprox_SurfaceTool_UTrim(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param Tol:
    :type Tol: float
    :rtype: Handle_Adaptor3d_HSurface

    """
    return _BRepApprox.BRepApprox_SurfaceTool_UTrim(*args)

def BRepApprox_SurfaceTool_VTrim(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param Tol:
    :type Tol: float
    :rtype: Handle_Adaptor3d_HSurface

    """
    return _BRepApprox.BRepApprox_SurfaceTool_VTrim(*args)

def BRepApprox_SurfaceTool_IsUClosed(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_SurfaceTool_IsUClosed(*args)

def BRepApprox_SurfaceTool_IsVClosed(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_SurfaceTool_IsVClosed(*args)

def BRepApprox_SurfaceTool_IsUPeriodic(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_SurfaceTool_IsUPeriodic(*args)

def BRepApprox_SurfaceTool_UPeriod(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_UPeriod(*args)

def BRepApprox_SurfaceTool_IsVPeriodic(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_SurfaceTool_IsVPeriodic(*args)

def BRepApprox_SurfaceTool_VPeriod(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_VPeriod(*args)

def BRepApprox_SurfaceTool_Value(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :rtype: gp_Pnt

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Value(*args)

def BRepApprox_SurfaceTool_D0(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_D0(*args)

def BRepApprox_SurfaceTool_D1(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1u:
    :type D1u: gp_Vec
    :param D1v:
    :type D1v: gp_Vec
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_D1(*args)

def BRepApprox_SurfaceTool_D2(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :param D2U:
    :type D2U: gp_Vec
    :param D2V:
    :type D2V: gp_Vec
    :param D2UV:
    :type D2UV: gp_Vec
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_D2(*args)

def BRepApprox_SurfaceTool_D3(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :param D2U:
    :type D2U: gp_Vec
    :param D2V:
    :type D2V: gp_Vec
    :param D2UV:
    :type D2UV: gp_Vec
    :param D3U:
    :type D3U: gp_Vec
    :param D3V:
    :type D3V: gp_Vec
    :param D3UUV:
    :type D3UUV: gp_Vec
    :param D3UVV:
    :type D3UVV: gp_Vec
    :rtype: void

    """
    return _BRepApprox.BRepApprox_SurfaceTool_D3(*args)

def BRepApprox_SurfaceTool_DN(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param u:
    :type u: float
    :param v:
    :type v: float
    :param Nu:
    :type Nu: int
    :param Nv:
    :type Nv: int
    :rtype: gp_Vec

    """
    return _BRepApprox.BRepApprox_SurfaceTool_DN(*args)

def BRepApprox_SurfaceTool_UResolution(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_UResolution(*args)

def BRepApprox_SurfaceTool_VResolution(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _BRepApprox.BRepApprox_SurfaceTool_VResolution(*args)

def BRepApprox_SurfaceTool_GetType(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: GeomAbs_SurfaceType

    """
    return _BRepApprox.BRepApprox_SurfaceTool_GetType(*args)

def BRepApprox_SurfaceTool_Plane(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Pln

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Plane(*args)

def BRepApprox_SurfaceTool_Cylinder(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Cylinder

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Cylinder(*args)

def BRepApprox_SurfaceTool_Cone(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Cone

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Cone(*args)

def BRepApprox_SurfaceTool_Torus(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Torus

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Torus(*args)

def BRepApprox_SurfaceTool_Sphere(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Sphere

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Sphere(*args)

def BRepApprox_SurfaceTool_Bezier(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: Handle_Geom_BezierSurface

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Bezier(*args)

def BRepApprox_SurfaceTool_BSpline(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: Handle_Geom_BSplineSurface

    """
    return _BRepApprox.BRepApprox_SurfaceTool_BSpline(*args)

def BRepApprox_SurfaceTool_AxeOfRevolution(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Ax1

    """
    return _BRepApprox.BRepApprox_SurfaceTool_AxeOfRevolution(*args)

def BRepApprox_SurfaceTool_Direction(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: gp_Dir

    """
    return _BRepApprox.BRepApprox_SurfaceTool_Direction(*args)

def BRepApprox_SurfaceTool_BasisCurve(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: Handle_Adaptor3d_HCurve

    """
    return _BRepApprox.BRepApprox_SurfaceTool_BasisCurve(*args)

def BRepApprox_SurfaceTool_NbSamplesU(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: int

    :param S:
    :type S: BRepAdaptor_Surface &
    :param u1:
    :type u1: float
    :param u2:
    :type u2: float
    :rtype: int

    """
    return _BRepApprox.BRepApprox_SurfaceTool_NbSamplesU(*args)

def BRepApprox_SurfaceTool_NbSamplesV(*args):
    """
    :param S:
    :type S: BRepAdaptor_Surface &
    :rtype: int

    :param S:
    :type S: BRepAdaptor_Surface &
    :param v1:
    :type v1: float
    :param v2:
    :type v2: float
    :rtype: int

    """
    return _BRepApprox.BRepApprox_SurfaceTool_NbSamplesV(*args)

class BRepApprox_TheComputeLineBezierOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-3
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-6
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheComputeLineBezierOfApprox(*args))

    def Init(self, *args):
        """
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Init(self, *args)


    def Perform(self, *args):
        """
        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Perform(self, *args)


    def SetDegrees(self, *args):
        """
        :param degreemin:
        :type degreemin: int
        :param degreemax:
        :type degreemax: int
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetDegrees(self, *args)


    def SetTolerances(self, *args):
        """
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetTolerances(self, *args)


    def SetConstraints(self, *args):
        """
        :param firstC:
        :type firstC: AppParCurves_Constraint
        :param lastC:
        :type lastC: AppParCurves_Constraint
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetConstraints(self, *args)


    def IsAllApproximated(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_IsToleranceReached(self, *args)


    def Error(self, *args):
        """
        :param Index:
        :type Index: int
        :param tol3d:
        :type tol3d: float &
        :param tol2d:
        :type tol2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Error(self, *args)


    def NbMultiCurves(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_NbMultiCurves(self, *args)


    def Value(self, *args):
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: AppParCurves_MultiCurve

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_ChangeValue(self, *args)


    def SplineValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SplineValue(self, *args)


    def Parametrization(self, *args):
        """
        :param partype:
        :type partype: Approx_ParametrizationType &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Parametrization(self, *args)


    def Parameters(self, *args):
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: TColStd_Array1OfReal

        """
        return _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheComputeLineBezierOfApprox.Init = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Init, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Perform, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.SetDegrees = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetDegrees, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.SetTolerances = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetTolerances, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.SetConstraints = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SetConstraints, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.IsAllApproximated = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_IsAllApproximated, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.IsToleranceReached = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_IsToleranceReached, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Error, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.NbMultiCurves = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_NbMultiCurves, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Value, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.ChangeValue = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_ChangeValue, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.SplineValue = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_SplineValue, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.Parametrization = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Parametrization, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox.Parameters = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_Parameters, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineBezierOfApprox__kill_pointed, None, BRepApprox_TheComputeLineBezierOfApprox)
BRepApprox_TheComputeLineBezierOfApprox_swigregister = _BRepApprox.BRepApprox_TheComputeLineBezierOfApprox_swigregister
BRepApprox_TheComputeLineBezierOfApprox_swigregister(BRepApprox_TheComputeLineBezierOfApprox)

class BRepApprox_TheComputeLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-3
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-6
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheComputeLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheComputeLineOfApprox(*args))

    def Interpol(self, *args):
        """
        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Interpol(self, *args)


    def Init(self, *args):
        """
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Init(self, *args)


    def Perform(self, *args):
        """
        :param Line:
        :type Line: BRepApprox_TheMultiLineOfApprox &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Perform(self, *args)


    def SetParameters(self, *args):
        """
        :param ThePar:
        :type ThePar: math_Vector &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetParameters(self, *args)


    def SetKnots(self, *args):
        """
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetKnots(self, *args)


    def SetKnotsAndMultiplicities(self, *args):
        """
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetKnotsAndMultiplicities(self, *args)


    def SetDegrees(self, *args):
        """
        :param degreemin:
        :type degreemin: int
        :param degreemax:
        :type degreemax: int
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetDegrees(self, *args)


    def SetTolerances(self, *args):
        """
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetTolerances(self, *args)


    def SetContinuity(self, *args):
        """
        :param C:
        :type C: int
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetContinuity(self, *args)


    def SetConstraints(self, *args):
        """
        :param firstC:
        :type firstC: AppParCurves_Constraint
        :param lastC:
        :type lastC: AppParCurves_Constraint
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_SetConstraints(self, *args)


    def IsAllApproximated(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_IsToleranceReached(self, *args)


    def Error(self, *args):
        """
        :param tol3d:
        :type tol3d: float &
        :param tol2d:
        :type tol2d: float &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Error(self, *args)


    def Value(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_ChangeValue(self, *args)


    def Parameters(self, *args):
        """
        :rtype: TColStd_Array1OfReal

        """
        return _BRepApprox.BRepApprox_TheComputeLineOfApprox_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheComputeLineOfApprox.Interpol = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Interpol, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.Init = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Init, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Perform, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetParameters = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetParameters, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetKnots = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetKnots, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetKnotsAndMultiplicities = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetKnotsAndMultiplicities, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetDegrees = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetDegrees, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetTolerances = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetTolerances, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetContinuity = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetContinuity, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.SetConstraints = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_SetConstraints, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.IsAllApproximated = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_IsAllApproximated, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.IsToleranceReached = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_IsToleranceReached, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.Error = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Error, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Value, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.ChangeValue = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_ChangeValue, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox.Parameters = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox_Parameters, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheComputeLineOfApprox__kill_pointed, None, BRepApprox_TheComputeLineOfApprox)
BRepApprox_TheComputeLineOfApprox_swigregister = _BRepApprox.BRepApprox_TheComputeLineOfApprox_swigregister
BRepApprox_TheComputeLineOfApprox_swigregister(BRepApprox_TheComputeLineOfApprox)

class BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S1:
        :type S1: BRepAdaptor_Surface &
        :param S2:
        :type S2: BRepAdaptor_Surface &
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox(*args))

    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Values(self, *args)


    def ComputeParameters(self, *args):
        """
        :param ChoixIso:
        :type ChoixIso: IntImp_ConstIsoparametric
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param UVap:
        :type UVap: math_Vector &
        :param BornInf:
        :type BornInf: math_Vector &
        :param BornSup:
        :type BornSup: math_Vector &
        :param Tolerance:
        :type Tolerance: math_Vector &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_ComputeParameters(self, *args)


    def Root(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Root(self, *args)


    def Point(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Point(self, *args)


    def IsTangent(self, *args):
        """
        :param UVap:
        :type UVap: math_Vector &
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param BestChoix:
        :type BestChoix: IntImp_ConstIsoparametric &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_IsTangent(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Direction(self, *args)


    def DirectionOnS1(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS2(self, *args)


    def AuxillarSurface1(self, *args):
        """
        :rtype: BRepAdaptor_Surface

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_AuxillarSurface1(self, *args)


    def AuxillarSurface2(self, *args):
        """
        :rtype: BRepAdaptor_Surface

        """
        return _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_AuxillarSurface2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.NbVariables = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_NbVariables, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.NbEquations = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_NbEquations, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Value, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Derivatives = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Derivatives, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Values = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Values, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.ComputeParameters = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_ComputeParameters, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Root = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Root, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Point = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Point, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.IsTangent = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_IsTangent, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.Direction = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_Direction, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.DirectionOnS1 = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS1, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.DirectionOnS2 = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS2, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.AuxillarSurface1 = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_AuxillarSurface1, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox.AuxillarSurface2 = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_AuxillarSurface2, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox__kill_pointed, None, BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister = _BRepApprox.BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister
BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister(BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox)

class BRepApprox_TheImpPrmSvSurfacesOfApprox(OCC.ApproxInt.ApproxInt_SvSurfaces):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: BRepAdaptor_Surface &
        :param Surf2:
        :type Surf2: IntSurf_Quadric &
        :rtype: None

        :param Surf1:
        :type Surf1: IntSurf_Quadric &
        :param Surf2:
        :type Surf2: BRepAdaptor_Surface &
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheImpPrmSvSurfacesOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheImpPrmSvSurfacesOfApprox(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheImpPrmSvSurfacesOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheImpPrmSvSurfacesOfApprox__kill_pointed, None, BRepApprox_TheImpPrmSvSurfacesOfApprox)
BRepApprox_TheImpPrmSvSurfacesOfApprox_swigregister = _BRepApprox.BRepApprox_TheImpPrmSvSurfacesOfApprox_swigregister
BRepApprox_TheImpPrmSvSurfacesOfApprox_swigregister(BRepApprox_TheImpPrmSvSurfacesOfApprox)

class BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param S1:
        :type S1: BRepAdaptor_Surface &
        :param S2:
        :type S2: BRepAdaptor_Surface &
        :param TolTangency:
        :type TolTangency: float
        :rtype: None

        :param S1:
        :type S1: BRepAdaptor_Surface &
        :param S2:
        :type S2: BRepAdaptor_Surface &
        :param TolTangency:
        :type TolTangency: float
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox(*args))

    def Perform(self, *args):
        """
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param Rsnld:
        :type Rsnld: math_FunctionSetRoot &
        :rtype: IntImp_ConstIsoparametric

        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param Rsnld:
        :type Rsnld: math_FunctionSetRoot &
        :param ChoixIso:
        :type ChoixIso: IntImp_ConstIsoparametric
        :rtype: IntImp_ConstIsoparametric

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsDone(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsEmpty(self, *args)


    def Point(self, *args):
        """
        :rtype: IntSurf_PntOn2S

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Point(self, *args)


    def IsTangent(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsTangent(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Direction(self, *args)


    def DirectionOnS1(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS2(self, *args)


    def Function(self, *args):
        """
        :rtype: BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox

        """
        return _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Function(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.Perform = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Perform, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.IsDone = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsDone, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.IsEmpty = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsEmpty, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.Point = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Point, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.IsTangent = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_IsTangent, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.Direction = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Direction, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.DirectionOnS1 = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS1, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.DirectionOnS2 = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_DirectionOnS2, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox.Function = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_Function, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox__kill_pointed, None, BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister = _BRepApprox.BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister
BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_swigregister(BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox)

class BRepApprox_TheMultiLineOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param line:
        :type line: Handle_BRepApprox_ApproxLine &
        :param PtrSvSurfaces:
        :type PtrSvSurfaces: Standard_Address
        :param NbP3d:
        :type NbP3d: int
        :param NbP2d:
        :type NbP2d: int
        :param xo:
        :type xo: float
        :param ax:
        :type ax: float
        :param yo:
        :type yo: float
        :param ay:
        :type ay: float
        :param zo:
        :type zo: float
        :param az:
        :type az: float
        :param u1o:
        :type u1o: float
        :param a1u:
        :type a1u: float
        :param v1o:
        :type v1o: float
        :param a1v:
        :type a1v: float
        :param u2o:
        :type u2o: float
        :param a2u:
        :type a2u: float
        :param v2o:
        :type v2o: float
        :param a2v:
        :type a2v: float
        :param P2DOnFirst:
        :type P2DOnFirst: bool
        :param IndMin: default value is 0
        :type IndMin: int
        :param IndMax: default value is 0
        :type IndMax: int
        :rtype: None

        :param line:
        :type line: Handle_BRepApprox_ApproxLine &
        :param NbP3d:
        :type NbP3d: int
        :param NbP2d:
        :type NbP2d: int
        :param xo:
        :type xo: float
        :param ax:
        :type ax: float
        :param yo:
        :type yo: float
        :param ay:
        :type ay: float
        :param zo:
        :type zo: float
        :param az:
        :type az: float
        :param u1o:
        :type u1o: float
        :param a1u:
        :type a1u: float
        :param v1o:
        :type v1o: float
        :param a1v:
        :type a1v: float
        :param u2o:
        :type u2o: float
        :param a2u:
        :type a2u: float
        :param v2o:
        :type v2o: float
        :param a2v:
        :type a2v: float
        :param P2DOnFirst:
        :type P2DOnFirst: bool
        :param IndMin: default value is 0
        :type IndMin: int
        :param IndMax: default value is 0
        :type IndMax: int
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheMultiLineOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheMultiLineOfApprox(*args))

    def FirstPoint(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_FirstPoint(self, *args)


    def LastPoint(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_LastPoint(self, *args)


    def NbP2d(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_NbP2d(self, *args)


    def NbP3d(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_NbP3d(self, *args)


    def WhatStatus(self, *args):
        """
        :rtype: Approx_Status

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_WhatStatus(self, *args)


    def Value(self, *args):
        """
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: None

        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: None

        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_Value(self, *args)


    def Tangency(self, *args):
        """
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_Tangency(self, *args)


    def MakeMLBetween(self, *args):
        """
        :param Low:
        :type Low: int
        :param High:
        :type High: int
        :param NbPointsToInsert:
        :type NbPointsToInsert: int
        :rtype: BRepApprox_TheMultiLineOfApprox

        """
        return _BRepApprox.BRepApprox_TheMultiLineOfApprox_MakeMLBetween(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheMultiLineOfApprox.FirstPoint = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_FirstPoint, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.LastPoint = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_LastPoint, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.NbP2d = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_NbP2d, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.NbP3d = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_NbP3d, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.WhatStatus = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_WhatStatus, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_Value, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.Tangency = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_Tangency, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox.MakeMLBetween = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox_MakeMLBetween, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineOfApprox__kill_pointed, None, BRepApprox_TheMultiLineOfApprox)
BRepApprox_TheMultiLineOfApprox_swigregister = _BRepApprox.BRepApprox_TheMultiLineOfApprox_swigregister
BRepApprox_TheMultiLineOfApprox_swigregister(BRepApprox_TheMultiLineOfApprox)

class BRepApprox_TheMultiLineToolOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstPoint(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_FirstPoint(*args)

    FirstPoint = staticmethod(FirstPoint)

    def LastPoint(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_LastPoint(*args)

    LastPoint = staticmethod(LastPoint)

    def NbP2d(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_NbP2d(*args)

    NbP2d = staticmethod(NbP2d)

    def NbP3d(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_NbP3d(*args)

    NbP3d = staticmethod(NbP3d)

    def Value(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: void

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Value(*args)

    Value = staticmethod(Value)

    def Tangency(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Tangency(*args)

    Tangency = staticmethod(Tangency)

    def Curvature(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Curvature(*args)

    Curvature = staticmethod(Curvature)

    def MakeMLBetween(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :param NbPMin:
        :type NbPMin: int
        :rtype: BRepApprox_TheMultiLineOfApprox

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_MakeMLBetween(*args)

    MakeMLBetween = staticmethod(MakeMLBetween)

    def WhatStatus(*args):
        """
        :param ML:
        :type ML: BRepApprox_TheMultiLineOfApprox &
        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :rtype: Approx_Status

        """
        return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_WhatStatus(*args)

    WhatStatus = staticmethod(WhatStatus)

    def __init__(self):
        _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheMultiLineToolOfApprox())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheMultiLineToolOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheMultiLineToolOfApprox__kill_pointed, None, BRepApprox_TheMultiLineToolOfApprox)
BRepApprox_TheMultiLineToolOfApprox_swigregister = _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_swigregister
BRepApprox_TheMultiLineToolOfApprox_swigregister(BRepApprox_TheMultiLineToolOfApprox)

def BRepApprox_TheMultiLineToolOfApprox_FirstPoint(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :rtype: int

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_FirstPoint(*args)

def BRepApprox_TheMultiLineToolOfApprox_LastPoint(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :rtype: int

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_LastPoint(*args)

def BRepApprox_TheMultiLineToolOfApprox_NbP2d(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :rtype: int

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_NbP2d(*args)

def BRepApprox_TheMultiLineToolOfApprox_NbP3d(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :rtype: int

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_NbP3d(*args)

def BRepApprox_TheMultiLineToolOfApprox_Value(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :rtype: void

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Value(*args)

def BRepApprox_TheMultiLineToolOfApprox_Tangency(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Tangency(*args)

def BRepApprox_TheMultiLineToolOfApprox_Curvature(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_Curvature(*args)

def BRepApprox_TheMultiLineToolOfApprox_MakeMLBetween(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param I1:
    :type I1: int
    :param I2:
    :type I2: int
    :param NbPMin:
    :type NbPMin: int
    :rtype: BRepApprox_TheMultiLineOfApprox

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_MakeMLBetween(*args)

def BRepApprox_TheMultiLineToolOfApprox_WhatStatus(*args):
    """
    :param ML:
    :type ML: BRepApprox_TheMultiLineOfApprox &
    :param I1:
    :type I1: int
    :param I2:
    :type I2: int
    :rtype: Approx_Status

    """
    return _BRepApprox.BRepApprox_TheMultiLineToolOfApprox_WhatStatus(*args)

class BRepApprox_ThePrmPrmSvSurfacesOfApprox(OCC.ApproxInt.ApproxInt_SvSurfaces):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: BRepAdaptor_Surface &
        :param Surf2:
        :type Surf2: BRepAdaptor_Surface &
        :rtype: None

        """
        _BRepApprox.BRepApprox_ThePrmPrmSvSurfacesOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_ThePrmPrmSvSurfacesOfApprox(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_ThePrmPrmSvSurfacesOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_ThePrmPrmSvSurfacesOfApprox__kill_pointed, None, BRepApprox_ThePrmPrmSvSurfacesOfApprox)
BRepApprox_ThePrmPrmSvSurfacesOfApprox_swigregister = _BRepApprox.BRepApprox_ThePrmPrmSvSurfacesOfApprox_swigregister
BRepApprox_ThePrmPrmSvSurfacesOfApprox_swigregister(BRepApprox_ThePrmPrmSvSurfacesOfApprox)

class BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param PS:
        :type PS: BRepAdaptor_Surface &
        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        """
        _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_swiginit(self, _BRepApprox.new_BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox(*args))

    def SetImplicitSurface(self, *args):
        """
        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_SetImplicitSurface(self, *args)


    def Set(self, *args):
        """
        :param PS:
        :type PS: BRepAdaptor_Surface &
        :rtype: None

        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Set(self, *args)


    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Values(self, *args)


    def Root(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Root(self, *args)


    def Tolerance(self, *args):
        """
        :rtype: float

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Tolerance(self, *args)


    def Point(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Point(self, *args)


    def IsTangent(self, *args):
        """
        :rtype: bool

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_IsTangent(self, *args)


    def Direction3d(self, *args):
        """
        :rtype: gp_Vec

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Direction3d(self, *args)


    def Direction2d(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Direction2d(self, *args)


    def PSurface(self, *args):
        """
        :rtype: BRepAdaptor_Surface

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_PSurface(self, *args)


    def ISurface(self, *args):
        """
        :rtype: IntSurf_Quadric

        """
        return _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_ISurface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.SetImplicitSurface = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_SetImplicitSurface, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Set = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Set, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.NbVariables = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_NbVariables, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.NbEquations = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_NbEquations, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Value = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Value, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Derivatives = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Derivatives, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Values = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Values, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Root = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Root, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Tolerance = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Tolerance, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Point = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Point, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.IsTangent = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_IsTangent, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Direction3d = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Direction3d, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.Direction2d = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_Direction2d, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.PSurface = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_PSurface, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox.ISurface = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_ISurface, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox._kill_pointed = new_instancemethod(_BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox__kill_pointed, None, BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_swigregister = _BRepApprox.BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_swigregister
BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_swigregister(BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox)



