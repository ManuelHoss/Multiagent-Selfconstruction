# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HatchGen.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HatchGen', [dirname(__file__)])
        except ImportError:
            import _HatchGen
            return _HatchGen
        if fp is not None:
            try:
                _mod = imp.load_module('_HatchGen', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HatchGen = swig_import_helper()
    del swig_import_helper
else:
    import _HatchGen
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HatchGen.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HatchGen.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HatchGen.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HatchGen.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HatchGen.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HatchGen.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HatchGen.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HatchGen.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HatchGen.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HatchGen.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HatchGen.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HatchGen.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HatchGen.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HatchGen.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HatchGen.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HatchGen.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HatchGen.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HatchGen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TopAbs
import OCC.IntRes2d
import OCC.gp

_HatchGen.HatchGen_NoProblem_swigconstant(_HatchGen)
HatchGen_NoProblem = _HatchGen.HatchGen_NoProblem

_HatchGen.HatchGen_TrimFailure_swigconstant(_HatchGen)
HatchGen_TrimFailure = _HatchGen.HatchGen_TrimFailure

_HatchGen.HatchGen_TransitionFailure_swigconstant(_HatchGen)
HatchGen_TransitionFailure = _HatchGen.HatchGen_TransitionFailure

_HatchGen.HatchGen_IncoherentParity_swigconstant(_HatchGen)
HatchGen_IncoherentParity = _HatchGen.HatchGen_IncoherentParity

_HatchGen.HatchGen_IncompatibleStates_swigconstant(_HatchGen)
HatchGen_IncompatibleStates = _HatchGen.HatchGen_IncompatibleStates

_HatchGen.HatchGen_TRUE_swigconstant(_HatchGen)
HatchGen_TRUE = _HatchGen.HatchGen_TRUE

_HatchGen.HatchGen_TOUCH_swigconstant(_HatchGen)
HatchGen_TOUCH = _HatchGen.HatchGen_TOUCH

_HatchGen.HatchGen_TANGENT_swigconstant(_HatchGen)
HatchGen_TANGENT = _HatchGen.HatchGen_TANGENT

_HatchGen.HatchGen_UNDETERMINED_swigconstant(_HatchGen)
HatchGen_UNDETERMINED = _HatchGen.HatchGen_UNDETERMINED
class HatchGen_Domain(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an infinite domain.

        :rtype: None

        * Creates a domain for the curve associated to a hatching.

        :param P1:
        :type P1: HatchGen_PointOnHatching &
        :param P2:
        :type P2: HatchGen_PointOnHatching &
        :rtype: None

        * Creates a semi-infinite domain for the curve associated to a hatching. The `First' flag means that the given point is the first one.

        :param P:
        :type P: HatchGen_PointOnHatching &
        :param First:
        :type First: bool
        :rtype: None

        """
        _HatchGen.HatchGen_Domain_swiginit(self, _HatchGen.new_HatchGen_Domain(*args))

    def SetPoints(self, *args):
        """
        * Sets the first and the second points of the domain.

        :param P1:
        :type P1: HatchGen_PointOnHatching &
        :param P2:
        :type P2: HatchGen_PointOnHatching &
        :rtype: None

        * Sets the first and the second points of the domain as the infinite.

        :rtype: None

        """
        return _HatchGen.HatchGen_Domain_SetPoints(self, *args)


    def SetFirstPoint(self, *args):
        """
        * Sets the first point of the domain.

        :param P:
        :type P: HatchGen_PointOnHatching &
        :rtype: None

        * Sets the first point of the domain at the infinite.

        :rtype: None

        """
        return _HatchGen.HatchGen_Domain_SetFirstPoint(self, *args)


    def SetSecondPoint(self, *args):
        """
        * Sets the second point of the domain.

        :param P:
        :type P: HatchGen_PointOnHatching &
        :rtype: None

        * Sets the second point of the domain at the infinite.

        :rtype: None

        """
        return _HatchGen.HatchGen_Domain_SetSecondPoint(self, *args)


    def HasFirstPoint(self, *args):
        """
        * Returns True if the domain has a first point.

        :rtype: bool

        """
        return _HatchGen.HatchGen_Domain_HasFirstPoint(self, *args)


    def FirstPoint(self, *args):
        """
        * Returns the first point of the domain. The exception DomainError is raised if HasFirstPoint returns False.

        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_Domain_FirstPoint(self, *args)


    def HasSecondPoint(self, *args):
        """
        * Returns True if the domain has a second point.

        :rtype: bool

        """
        return _HatchGen.HatchGen_Domain_HasSecondPoint(self, *args)


    def SecondPoint(self, *args):
        """
        * Returns the second point of the domain. The exception DomainError is raised if HasSecondPoint returns False.

        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_Domain_SecondPoint(self, *args)


    def Dump(self, *args):
        """
        * Dump of the domain.

        :param Index: default value is 0
        :type Index: int
        :rtype: None

        """
        return _HatchGen.HatchGen_Domain_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_Domain.SetPoints = new_instancemethod(_HatchGen.HatchGen_Domain_SetPoints, None, HatchGen_Domain)
HatchGen_Domain.SetFirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SetFirstPoint, None, HatchGen_Domain)
HatchGen_Domain.SetSecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SetSecondPoint, None, HatchGen_Domain)
HatchGen_Domain.HasFirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_HasFirstPoint, None, HatchGen_Domain)
HatchGen_Domain.FirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_FirstPoint, None, HatchGen_Domain)
HatchGen_Domain.HasSecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_HasSecondPoint, None, HatchGen_Domain)
HatchGen_Domain.SecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SecondPoint, None, HatchGen_Domain)
HatchGen_Domain.Dump = new_instancemethod(_HatchGen.HatchGen_Domain_Dump, None, HatchGen_Domain)
HatchGen_Domain._kill_pointed = new_instancemethod(_HatchGen.HatchGen_Domain__kill_pointed, None, HatchGen_Domain)
HatchGen_Domain_swigregister = _HatchGen.HatchGen_Domain_swigregister
HatchGen_Domain_swigregister(HatchGen_Domain)

class HatchGen_Domains(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HatchGen.HatchGen_Domains_swiginit(self, _HatchGen.new_HatchGen_Domains(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HatchGen_Domains &
        :rtype: HatchGen_Domains

        """
        return _HatchGen.HatchGen_Domains_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HatchGen_Domains &
        :rtype: HatchGen_Domains

        """
        return _HatchGen.HatchGen_Domains_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: HatchGen_Domain &
        :rtype: None

        :param S:
        :type S: HatchGen_Domains &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: HatchGen_Domain &
        :rtype: None

        :param S:
        :type S: HatchGen_Domains &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_Domain &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_Domains &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_Domain &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_Domains &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: HatchGen_Domain

        """
        return _HatchGen.HatchGen_Domains_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HatchGen_Domain

        """
        return _HatchGen.HatchGen_Domains_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: HatchGen_Domains &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_Domain

        """
        return _HatchGen.HatchGen_Domains_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: HatchGen_Domain &
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_Domain

        """
        return _HatchGen.HatchGen_Domains_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _HatchGen.HatchGen_Domains_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_Domains.Clear = new_instancemethod(_HatchGen.HatchGen_Domains_Clear, None, HatchGen_Domains)
HatchGen_Domains.Assign = new_instancemethod(_HatchGen.HatchGen_Domains_Assign, None, HatchGen_Domains)
HatchGen_Domains.Set = new_instancemethod(_HatchGen.HatchGen_Domains_Set, None, HatchGen_Domains)
HatchGen_Domains.Append = new_instancemethod(_HatchGen.HatchGen_Domains_Append, None, HatchGen_Domains)
HatchGen_Domains.Prepend = new_instancemethod(_HatchGen.HatchGen_Domains_Prepend, None, HatchGen_Domains)
HatchGen_Domains.InsertBefore = new_instancemethod(_HatchGen.HatchGen_Domains_InsertBefore, None, HatchGen_Domains)
HatchGen_Domains.InsertAfter = new_instancemethod(_HatchGen.HatchGen_Domains_InsertAfter, None, HatchGen_Domains)
HatchGen_Domains.First = new_instancemethod(_HatchGen.HatchGen_Domains_First, None, HatchGen_Domains)
HatchGen_Domains.Last = new_instancemethod(_HatchGen.HatchGen_Domains_Last, None, HatchGen_Domains)
HatchGen_Domains.Split = new_instancemethod(_HatchGen.HatchGen_Domains_Split, None, HatchGen_Domains)
HatchGen_Domains.Value = new_instancemethod(_HatchGen.HatchGen_Domains_Value, None, HatchGen_Domains)
HatchGen_Domains.SetValue = new_instancemethod(_HatchGen.HatchGen_Domains_SetValue, None, HatchGen_Domains)
HatchGen_Domains.ChangeValue = new_instancemethod(_HatchGen.HatchGen_Domains_ChangeValue, None, HatchGen_Domains)
HatchGen_Domains.Remove = new_instancemethod(_HatchGen.HatchGen_Domains_Remove, None, HatchGen_Domains)
HatchGen_Domains._kill_pointed = new_instancemethod(_HatchGen.HatchGen_Domains__kill_pointed, None, HatchGen_Domains)
HatchGen_Domains_swigregister = _HatchGen.HatchGen_Domains_swigregister
HatchGen_Domains_swigregister(HatchGen_Domains)

class HatchGen_IntersectionPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetIndex(self, *args):
        """
        * Sets the index of the supporting curve.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Returns the index of the supporting curve.

        :rtype: int

        """
        return _HatchGen.HatchGen_IntersectionPoint_Index(self, *args)


    def SetParameter(self, *args):
        """
        * Sets the parameter on the curve.

        :param Parameter:
        :type Parameter: float
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetParameter(self, *args)


    def Parameter(self, *args):
        """
        * Returns the parameter on the curve.

        :rtype: float

        """
        return _HatchGen.HatchGen_IntersectionPoint_Parameter(self, *args)


    def SetPosition(self, *args):
        """
        * Sets the position of the point on the curve.

        :param Position:
        :type Position: TopAbs_Orientation
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetPosition(self, *args)


    def Position(self, *args):
        """
        * Returns the position of the point on the curve.

        :rtype: TopAbs_Orientation

        """
        return _HatchGen.HatchGen_IntersectionPoint_Position(self, *args)


    def SetStateBefore(self, *args):
        """
        * Sets the transition state before the intersection.

        :param State:
        :type State: TopAbs_State
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateBefore(self, *args)


    def StateBefore(self, *args):
        """
        * Returns the transition state before the intersection.

        :rtype: TopAbs_State

        """
        return _HatchGen.HatchGen_IntersectionPoint_StateBefore(self, *args)


    def SetStateAfter(self, *args):
        """
        * Sets the transition state after the intersection.

        :param State:
        :type State: TopAbs_State
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateAfter(self, *args)


    def StateAfter(self, *args):
        """
        * Returns the transition state after of the intersection.

        :rtype: TopAbs_State

        """
        return _HatchGen.HatchGen_IntersectionPoint_StateAfter(self, *args)


    def SetSegmentBeginning(self, *args):
        """
        * Sets the flag that the point is the beginning of a segment.

        :param State: default value is Standard_True
        :type State: bool
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning(self, *args)


    def SegmentBeginning(self, *args):
        """
        * Returns the flag that the point is the beginning of a segment.

        :rtype: bool

        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentBeginning(self, *args)


    def SetSegmentEnd(self, *args):
        """
        * Sets the flag that the point is the end of a segment.

        :param State: default value is Standard_True
        :type State: bool
        :rtype: None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd(self, *args)


    def SegmentEnd(self, *args):
        """
        * Returns the flag that the point is the end of a segment.

        :rtype: bool

        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentEnd(self, *args)


    def Dump(self, *args):
        """
        * Dump of the point on element.

        :param Index: default value is 0
        :type Index: int
        :rtype: void

        """
        return _HatchGen.HatchGen_IntersectionPoint_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_IntersectionPoint.SetIndex = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetIndex, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Index = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Index, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetParameter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetParameter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Parameter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Parameter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetPosition = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetPosition, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Position = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Position, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetStateBefore = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetStateBefore, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.StateBefore = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_StateBefore, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetStateAfter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetStateAfter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.StateAfter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_StateAfter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetSegmentBeginning = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SegmentBeginning = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SegmentBeginning, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetSegmentEnd = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SegmentEnd = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SegmentEnd, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Dump = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Dump, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint._kill_pointed = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint__kill_pointed, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint_swigregister = _HatchGen.HatchGen_IntersectionPoint_swigregister
HatchGen_IntersectionPoint_swigregister(HatchGen_IntersectionPoint)

class HatchGen_PointsOnElement(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HatchGen.HatchGen_PointsOnElement_swiginit(self, _HatchGen.new_HatchGen_PointsOnElement(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HatchGen_PointsOnElement &
        :rtype: HatchGen_PointsOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HatchGen_PointsOnElement &
        :rtype: HatchGen_PointsOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: HatchGen_PointOnElement &
        :rtype: None

        :param S:
        :type S: HatchGen_PointsOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: HatchGen_PointOnElement &
        :rtype: None

        :param S:
        :type S: HatchGen_PointsOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_PointOnElement &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_PointsOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_PointOnElement &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_PointsOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: HatchGen_PointsOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: HatchGen_PointOnElement &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointsOnElement_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnElement_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_PointsOnElement.Clear = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Clear, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Assign = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Assign, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Set = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Set, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Append = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Append, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Prepend = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Prepend, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.InsertBefore = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_InsertBefore, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.InsertAfter = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_InsertAfter, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.First = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_First, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Last = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Last, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Split = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Split, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Value = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Value, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.SetValue = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_SetValue, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.ChangeValue = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_ChangeValue, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Remove = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Remove, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement._kill_pointed = new_instancemethod(_HatchGen.HatchGen_PointsOnElement__kill_pointed, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement_swigregister = _HatchGen.HatchGen_PointsOnElement_swigregister
HatchGen_PointsOnElement_swigregister(HatchGen_PointsOnElement)

class HatchGen_PointsOnHatching(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HatchGen.HatchGen_PointsOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointsOnHatching(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HatchGen_PointsOnHatching &
        :rtype: HatchGen_PointsOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HatchGen_PointsOnHatching &
        :rtype: HatchGen_PointsOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: HatchGen_PointOnHatching &
        :rtype: None

        :param S:
        :type S: HatchGen_PointsOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: HatchGen_PointOnHatching &
        :rtype: None

        :param S:
        :type S: HatchGen_PointsOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_PointOnHatching &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_PointsOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: HatchGen_PointOnHatching &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: HatchGen_PointsOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: HatchGen_PointsOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: HatchGen_PointOnHatching &
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_PointsOnHatching_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _HatchGen.HatchGen_PointsOnHatching_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_PointsOnHatching.Clear = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Clear, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Assign = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Assign, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Set = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Set, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Append = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Append, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Prepend = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Prepend, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.InsertBefore = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_InsertBefore, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.InsertAfter = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_InsertAfter, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.First = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_First, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Last = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Last, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Split = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Split, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Value = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Value, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.SetValue = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_SetValue, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.ChangeValue = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_ChangeValue, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Remove = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Remove, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching._kill_pointed = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching__kill_pointed, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching_swigregister = _HatchGen.HatchGen_PointsOnHatching_swigregister
HatchGen_PointsOnHatching_swigregister(HatchGen_PointsOnHatching)

class HatchGen_SequenceNodeOfDomains(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HatchGen_Domain &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _HatchGen.HatchGen_SequenceNodeOfDomains_swiginit(self, _HatchGen.new_HatchGen_SequenceNodeOfDomains(*args))

    def Value(self, *args):
        """
        :rtype: HatchGen_Domain

        """
        return _HatchGen.HatchGen_SequenceNodeOfDomains_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HatchGen_SequenceNodeOfDomains self)"""
        return _HatchGen.HatchGen_SequenceNodeOfDomains__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HatchGen_SequenceNodeOfDomains self) -> Handle_HatchGen_SequenceNodeOfDomains"""
        return _HatchGen.HatchGen_SequenceNodeOfDomains_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_SequenceNodeOfDomains.Value = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfDomains_Value, None, HatchGen_SequenceNodeOfDomains)
HatchGen_SequenceNodeOfDomains._kill_pointed = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfDomains__kill_pointed, None, HatchGen_SequenceNodeOfDomains)
HatchGen_SequenceNodeOfDomains.GetHandle = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfDomains_GetHandle, None, HatchGen_SequenceNodeOfDomains)
HatchGen_SequenceNodeOfDomains_swigregister = _HatchGen.HatchGen_SequenceNodeOfDomains_swigregister
HatchGen_SequenceNodeOfDomains_swigregister(HatchGen_SequenceNodeOfDomains)

class Handle_HatchGen_SequenceNodeOfDomains(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.Handle_HatchGen_SequenceNodeOfDomains_swiginit(self, _HatchGen.new_Handle_HatchGen_SequenceNodeOfDomains(*args))
    DownCast = staticmethod(_HatchGen.Handle_HatchGen_SequenceNodeOfDomains_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HatchGen_SequenceNodeOfDomains.Nullify = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfDomains_Nullify, None, Handle_HatchGen_SequenceNodeOfDomains)
Handle_HatchGen_SequenceNodeOfDomains.IsNull = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfDomains_IsNull, None, Handle_HatchGen_SequenceNodeOfDomains)
Handle_HatchGen_SequenceNodeOfDomains.GetObject = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfDomains_GetObject, None, Handle_HatchGen_SequenceNodeOfDomains)
Handle_HatchGen_SequenceNodeOfDomains._kill_pointed = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfDomains__kill_pointed, None, Handle_HatchGen_SequenceNodeOfDomains)
Handle_HatchGen_SequenceNodeOfDomains_swigregister = _HatchGen.Handle_HatchGen_SequenceNodeOfDomains_swigregister
Handle_HatchGen_SequenceNodeOfDomains_swigregister(Handle_HatchGen_SequenceNodeOfDomains)

def Handle_HatchGen_SequenceNodeOfDomains_DownCast(AnObject):
    return _HatchGen.Handle_HatchGen_SequenceNodeOfDomains_DownCast(AnObject)
Handle_HatchGen_SequenceNodeOfDomains_DownCast = _HatchGen.Handle_HatchGen_SequenceNodeOfDomains_DownCast

class HatchGen_SequenceNodeOfPointsOnElement(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HatchGen_PointOnElement &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _HatchGen.HatchGen_SequenceNodeOfPointsOnElement_swiginit(self, _HatchGen.new_HatchGen_SequenceNodeOfPointsOnElement(*args))

    def Value(self, *args):
        """
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnElement_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HatchGen_SequenceNodeOfPointsOnElement self)"""
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnElement__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HatchGen_SequenceNodeOfPointsOnElement self) -> Handle_HatchGen_SequenceNodeOfPointsOnElement"""
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnElement_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_SequenceNodeOfPointsOnElement.Value = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnElement_Value, None, HatchGen_SequenceNodeOfPointsOnElement)
HatchGen_SequenceNodeOfPointsOnElement._kill_pointed = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnElement__kill_pointed, None, HatchGen_SequenceNodeOfPointsOnElement)
HatchGen_SequenceNodeOfPointsOnElement.GetHandle = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnElement_GetHandle, None, HatchGen_SequenceNodeOfPointsOnElement)
HatchGen_SequenceNodeOfPointsOnElement_swigregister = _HatchGen.HatchGen_SequenceNodeOfPointsOnElement_swigregister
HatchGen_SequenceNodeOfPointsOnElement_swigregister(HatchGen_SequenceNodeOfPointsOnElement)

class Handle_HatchGen_SequenceNodeOfPointsOnElement(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_swiginit(self, _HatchGen.new_Handle_HatchGen_SequenceNodeOfPointsOnElement(*args))
    DownCast = staticmethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HatchGen_SequenceNodeOfPointsOnElement.Nullify = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_Nullify, None, Handle_HatchGen_SequenceNodeOfPointsOnElement)
Handle_HatchGen_SequenceNodeOfPointsOnElement.IsNull = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_IsNull, None, Handle_HatchGen_SequenceNodeOfPointsOnElement)
Handle_HatchGen_SequenceNodeOfPointsOnElement.GetObject = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_GetObject, None, Handle_HatchGen_SequenceNodeOfPointsOnElement)
Handle_HatchGen_SequenceNodeOfPointsOnElement._kill_pointed = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement__kill_pointed, None, Handle_HatchGen_SequenceNodeOfPointsOnElement)
Handle_HatchGen_SequenceNodeOfPointsOnElement_swigregister = _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_swigregister
Handle_HatchGen_SequenceNodeOfPointsOnElement_swigregister(Handle_HatchGen_SequenceNodeOfPointsOnElement)

def Handle_HatchGen_SequenceNodeOfPointsOnElement_DownCast(AnObject):
    return _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_DownCast(AnObject)
Handle_HatchGen_SequenceNodeOfPointsOnElement_DownCast = _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnElement_DownCast

class HatchGen_SequenceNodeOfPointsOnHatching(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HatchGen_PointOnHatching &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_swiginit(self, _HatchGen.new_HatchGen_SequenceNodeOfPointsOnHatching(*args))

    def Value(self, *args):
        """
        :rtype: HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HatchGen_SequenceNodeOfPointsOnHatching self)"""
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnHatching__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HatchGen_SequenceNodeOfPointsOnHatching self) -> Handle_HatchGen_SequenceNodeOfPointsOnHatching"""
        return _HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_SequenceNodeOfPointsOnHatching.Value = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_Value, None, HatchGen_SequenceNodeOfPointsOnHatching)
HatchGen_SequenceNodeOfPointsOnHatching._kill_pointed = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnHatching__kill_pointed, None, HatchGen_SequenceNodeOfPointsOnHatching)
HatchGen_SequenceNodeOfPointsOnHatching.GetHandle = new_instancemethod(_HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_GetHandle, None, HatchGen_SequenceNodeOfPointsOnHatching)
HatchGen_SequenceNodeOfPointsOnHatching_swigregister = _HatchGen.HatchGen_SequenceNodeOfPointsOnHatching_swigregister
HatchGen_SequenceNodeOfPointsOnHatching_swigregister(HatchGen_SequenceNodeOfPointsOnHatching)

class Handle_HatchGen_SequenceNodeOfPointsOnHatching(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_swiginit(self, _HatchGen.new_Handle_HatchGen_SequenceNodeOfPointsOnHatching(*args))
    DownCast = staticmethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HatchGen_SequenceNodeOfPointsOnHatching.Nullify = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_Nullify, None, Handle_HatchGen_SequenceNodeOfPointsOnHatching)
Handle_HatchGen_SequenceNodeOfPointsOnHatching.IsNull = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_IsNull, None, Handle_HatchGen_SequenceNodeOfPointsOnHatching)
Handle_HatchGen_SequenceNodeOfPointsOnHatching.GetObject = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_GetObject, None, Handle_HatchGen_SequenceNodeOfPointsOnHatching)
Handle_HatchGen_SequenceNodeOfPointsOnHatching._kill_pointed = new_instancemethod(_HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching__kill_pointed, None, Handle_HatchGen_SequenceNodeOfPointsOnHatching)
Handle_HatchGen_SequenceNodeOfPointsOnHatching_swigregister = _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_swigregister
Handle_HatchGen_SequenceNodeOfPointsOnHatching_swigregister(Handle_HatchGen_SequenceNodeOfPointsOnHatching)

def Handle_HatchGen_SequenceNodeOfPointsOnHatching_DownCast(AnObject):
    return _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_DownCast(AnObject)
Handle_HatchGen_SequenceNodeOfPointsOnHatching_DownCast = _HatchGen.Handle_HatchGen_SequenceNodeOfPointsOnHatching_DownCast

class HatchGen_PointOnElement(HatchGen_IntersectionPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * //!---Purpose; Creates an empty point on element

        :rtype: None

        * Creates a point from an other.

        :param Point:
        :type Point: HatchGen_PointOnElement &
        :rtype: None

        * Creates a point from an intersection point.

        :param Point:
        :type Point: IntRes2d_IntersectionPoint &
        :rtype: None

        """
        _HatchGen.HatchGen_PointOnElement_swiginit(self, _HatchGen.new_HatchGen_PointOnElement(*args))

    def SetIntersectionType(self, *args):
        """
        * Sets the intersection type at this point.

        :param Type:
        :type Type: HatchGen_IntersectionType
        :rtype: None

        """
        return _HatchGen.HatchGen_PointOnElement_SetIntersectionType(self, *args)


    def IntersectionType(self, *args):
        """
        * Returns the intersection type at this point.

        :rtype: HatchGen_IntersectionType

        """
        return _HatchGen.HatchGen_PointOnElement_IntersectionType(self, *args)


    def IsIdentical(self, *args):
        """
        * Tests if the point is identical to an other. That is to say :  P1.myIndex = P2.myIndex  Abs (P1.myParam - P2.myParam) <= Confusion  P1.myPosit = P2.myPosit  P1.myBefore = P2.myBefore  P1.myAfter = P2.myAfter  P1.mySegBeg = P2.mySegBeg  P1.mySegEnd = P2.mySegEnd  P1.myType = P2.myType

        :param Point:
        :type Point: HatchGen_PointOnElement &
        :param Confusion:
        :type Confusion: float
        :rtype: bool

        """
        return _HatchGen.HatchGen_PointOnElement_IsIdentical(self, *args)


    def IsDifferent(self, *args):
        """
        * Tests if the point is different from an other.

        :param Point:
        :type Point: HatchGen_PointOnElement &
        :param Confusion:
        :type Confusion: float
        :rtype: bool

        """
        return _HatchGen.HatchGen_PointOnElement_IsDifferent(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_PointOnElement.SetIntersectionType = new_instancemethod(_HatchGen.HatchGen_PointOnElement_SetIntersectionType, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.IntersectionType = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IntersectionType, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.IsIdentical = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IsIdentical, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.IsDifferent = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IsDifferent, None, HatchGen_PointOnElement)
HatchGen_PointOnElement._kill_pointed = new_instancemethod(_HatchGen.HatchGen_PointOnElement__kill_pointed, None, HatchGen_PointOnElement)
HatchGen_PointOnElement_swigregister = _HatchGen.HatchGen_PointOnElement_swigregister
HatchGen_PointOnElement_swigregister(HatchGen_PointOnElement)

class HatchGen_PointOnHatching(HatchGen_IntersectionPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty point.

        :rtype: None

        * Creates a point from an other.

        :param Point:
        :type Point: HatchGen_PointOnHatching &
        :rtype: None

        * Creates a point from an intersection point.

        :param Point:
        :type Point: IntRes2d_IntersectionPoint &
        :rtype: None

        """
        _HatchGen.HatchGen_PointOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointOnHatching(*args))

    def Delete(self, *args):
        """
        * linux porting

        :rtype: void

        """
        return _HatchGen.HatchGen_PointOnHatching_Delete(self, *args)


    def AddPoint(self, *args):
        """
        * Adds a point on element to the point.

        :param Point:
        :type Point: HatchGen_PointOnElement &
        :param Confusion:
        :type Confusion: float
        :rtype: None

        """
        return _HatchGen.HatchGen_PointOnHatching_AddPoint(self, *args)


    def NbPoints(self, *args):
        """
        * Returns the number of elements intersecting the hatching at this point.

        :rtype: int

        """
        return _HatchGen.HatchGen_PointOnHatching_NbPoints(self, *args)


    def Point(self, *args):
        """
        * Returns the Index-th point on element of the point. The exception OutOfRange is raised if Index > NbPoints.

        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointOnHatching_Point(self, *args)


    def RemPoint(self, *args):
        """
        * Removes the Index-th point on element of the point. The exception OutOfRange is raised if Index > NbPoints.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _HatchGen.HatchGen_PointOnHatching_RemPoint(self, *args)


    def ClrPoints(self, *args):
        """
        * Removes all the points on element of the point.

        :rtype: None

        """
        return _HatchGen.HatchGen_PointOnHatching_ClrPoints(self, *args)


    def IsLower(self, *args):
        """
        * Tests if the point is lower than an other. A point on hatching P1 is said to be lower than an other P2 if :  P2.myParam - P1.myParam > Confusion

        :param Point:
        :type Point: HatchGen_PointOnHatching &
        :param Confusion:
        :type Confusion: float
        :rtype: bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsLower(self, *args)


    def IsEqual(self, *args):
        """
        * Tests if the point is equal to an other. A point on hatching P1 is said to be equal to an other P2 if :  | P2.myParam - P1.myParam | <= Confusion

        :param Point:
        :type Point: HatchGen_PointOnHatching &
        :param Confusion:
        :type Confusion: float
        :rtype: bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsEqual(self, *args)


    def IsGreater(self, *args):
        """
        * Tests if the point is greater than an other. A point on hatching P1 is said to be greater than an other P2 if :  P1.myParam - P2.myParam > Confusion

        :param Point:
        :type Point: HatchGen_PointOnHatching &
        :param Confusion:
        :type Confusion: float
        :rtype: bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsGreater(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HatchGen_PointOnHatching.Delete = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_Delete, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.AddPoint = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_AddPoint, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.NbPoints = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_NbPoints, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.Point = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_Point, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.RemPoint = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_RemPoint, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.ClrPoints = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_ClrPoints, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsLower = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsLower, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsEqual = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsEqual, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsGreater = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsGreater, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching._kill_pointed = new_instancemethod(_HatchGen.HatchGen_PointOnHatching__kill_pointed, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching_swigregister = _HatchGen.HatchGen_PointOnHatching_swigregister
HatchGen_PointOnHatching_swigregister(HatchGen_PointOnHatching)



