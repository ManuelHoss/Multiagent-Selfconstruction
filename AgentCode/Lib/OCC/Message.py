# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _Message.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Message', [dirname(__file__)])
        except ImportError:
            import _Message
            return _Message
        if fp is not None:
            try:
                _mod = imp.load_module('_Message', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Message = swig_import_helper()
    del swig_import_helper
else:
    import _Message
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Message.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_Message.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Message.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Message.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Message.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Message.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Message.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Message.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Message.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Message.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Message.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Message.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Message.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Message.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Message.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Message.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Message.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _Message.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
Message_Trace = _Message.Message_Trace
Message_Info = _Message.Message_Info
Message_Warning = _Message.Message_Warning
Message_Alarm = _Message.Message_Alarm
Message_Fail = _Message.Message_Fail
Message_None = _Message.Message_None
Message_Done1 = _Message.Message_Done1
Message_Done2 = _Message.Message_Done2
Message_Done3 = _Message.Message_Done3
Message_Done4 = _Message.Message_Done4
Message_Done5 = _Message.Message_Done5
Message_Done6 = _Message.Message_Done6
Message_Done7 = _Message.Message_Done7
Message_Done8 = _Message.Message_Done8
Message_Done9 = _Message.Message_Done9
Message_Done10 = _Message.Message_Done10
Message_Done11 = _Message.Message_Done11
Message_Done12 = _Message.Message_Done12
Message_Done13 = _Message.Message_Done13
Message_Done14 = _Message.Message_Done14
Message_Done15 = _Message.Message_Done15
Message_Done16 = _Message.Message_Done16
Message_Done17 = _Message.Message_Done17
Message_Done18 = _Message.Message_Done18
Message_Done19 = _Message.Message_Done19
Message_Done20 = _Message.Message_Done20
Message_Done21 = _Message.Message_Done21
Message_Done22 = _Message.Message_Done22
Message_Done23 = _Message.Message_Done23
Message_Done24 = _Message.Message_Done24
Message_Done25 = _Message.Message_Done25
Message_Done26 = _Message.Message_Done26
Message_Done27 = _Message.Message_Done27
Message_Done28 = _Message.Message_Done28
Message_Done29 = _Message.Message_Done29
Message_Done30 = _Message.Message_Done30
Message_Done31 = _Message.Message_Done31
Message_Done32 = _Message.Message_Done32
Message_Warn1 = _Message.Message_Warn1
Message_Warn2 = _Message.Message_Warn2
Message_Warn3 = _Message.Message_Warn3
Message_Warn4 = _Message.Message_Warn4
Message_Warn5 = _Message.Message_Warn5
Message_Warn6 = _Message.Message_Warn6
Message_Warn7 = _Message.Message_Warn7
Message_Warn8 = _Message.Message_Warn8
Message_Warn9 = _Message.Message_Warn9
Message_Warn10 = _Message.Message_Warn10
Message_Warn11 = _Message.Message_Warn11
Message_Warn12 = _Message.Message_Warn12
Message_Warn13 = _Message.Message_Warn13
Message_Warn14 = _Message.Message_Warn14
Message_Warn15 = _Message.Message_Warn15
Message_Warn16 = _Message.Message_Warn16
Message_Warn17 = _Message.Message_Warn17
Message_Warn18 = _Message.Message_Warn18
Message_Warn19 = _Message.Message_Warn19
Message_Warn20 = _Message.Message_Warn20
Message_Warn21 = _Message.Message_Warn21
Message_Warn22 = _Message.Message_Warn22
Message_Warn23 = _Message.Message_Warn23
Message_Warn24 = _Message.Message_Warn24
Message_Warn25 = _Message.Message_Warn25
Message_Warn26 = _Message.Message_Warn26
Message_Warn27 = _Message.Message_Warn27
Message_Warn28 = _Message.Message_Warn28
Message_Warn29 = _Message.Message_Warn29
Message_Warn30 = _Message.Message_Warn30
Message_Warn31 = _Message.Message_Warn31
Message_Warn32 = _Message.Message_Warn32
Message_Alarm1 = _Message.Message_Alarm1
Message_Alarm2 = _Message.Message_Alarm2
Message_Alarm3 = _Message.Message_Alarm3
Message_Alarm4 = _Message.Message_Alarm4
Message_Alarm5 = _Message.Message_Alarm5
Message_Alarm6 = _Message.Message_Alarm6
Message_Alarm7 = _Message.Message_Alarm7
Message_Alarm8 = _Message.Message_Alarm8
Message_Alarm9 = _Message.Message_Alarm9
Message_Alarm10 = _Message.Message_Alarm10
Message_Alarm11 = _Message.Message_Alarm11
Message_Alarm12 = _Message.Message_Alarm12
Message_Alarm13 = _Message.Message_Alarm13
Message_Alarm14 = _Message.Message_Alarm14
Message_Alarm15 = _Message.Message_Alarm15
Message_Alarm16 = _Message.Message_Alarm16
Message_Alarm17 = _Message.Message_Alarm17
Message_Alarm18 = _Message.Message_Alarm18
Message_Alarm19 = _Message.Message_Alarm19
Message_Alarm20 = _Message.Message_Alarm20
Message_Alarm21 = _Message.Message_Alarm21
Message_Alarm22 = _Message.Message_Alarm22
Message_Alarm23 = _Message.Message_Alarm23
Message_Alarm24 = _Message.Message_Alarm24
Message_Alarm25 = _Message.Message_Alarm25
Message_Alarm26 = _Message.Message_Alarm26
Message_Alarm27 = _Message.Message_Alarm27
Message_Alarm28 = _Message.Message_Alarm28
Message_Alarm29 = _Message.Message_Alarm29
Message_Alarm30 = _Message.Message_Alarm30
Message_Alarm31 = _Message.Message_Alarm31
Message_Alarm32 = _Message.Message_Alarm32
Message_Fail1 = _Message.Message_Fail1
Message_Fail2 = _Message.Message_Fail2
Message_Fail3 = _Message.Message_Fail3
Message_Fail4 = _Message.Message_Fail4
Message_Fail5 = _Message.Message_Fail5
Message_Fail6 = _Message.Message_Fail6
Message_Fail7 = _Message.Message_Fail7
Message_Fail8 = _Message.Message_Fail8
Message_Fail9 = _Message.Message_Fail9
Message_Fail10 = _Message.Message_Fail10
Message_Fail11 = _Message.Message_Fail11
Message_Fail12 = _Message.Message_Fail12
Message_Fail13 = _Message.Message_Fail13
Message_Fail14 = _Message.Message_Fail14
Message_Fail15 = _Message.Message_Fail15
Message_Fail16 = _Message.Message_Fail16
Message_Fail17 = _Message.Message_Fail17
Message_Fail18 = _Message.Message_Fail18
Message_Fail19 = _Message.Message_Fail19
Message_Fail20 = _Message.Message_Fail20
Message_Fail21 = _Message.Message_Fail21
Message_Fail22 = _Message.Message_Fail22
Message_Fail23 = _Message.Message_Fail23
Message_Fail24 = _Message.Message_Fail24
Message_Fail25 = _Message.Message_Fail25
Message_Fail26 = _Message.Message_Fail26
Message_Fail27 = _Message.Message_Fail27
Message_Fail28 = _Message.Message_Fail28
Message_Fail29 = _Message.Message_Fail29
Message_Fail30 = _Message.Message_Fail30
Message_Fail31 = _Message.Message_Fail31
Message_Fail32 = _Message.Message_Fail32
Message_DONE = _Message.Message_DONE
Message_WARN = _Message.Message_WARN
Message_ALARM = _Message.Message_ALARM
Message_FAIL = _Message.Message_FAIL
class message(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def DefaultMessenger(*args):
        """
        * Defines default messenger for OCCT applications. This is global static instance of the messenger. By default, it contains single printer directed to cout. It can be customized according to the application needs.

        :rtype: Handle_Message_Messenger

        """
        return _Message.message_DefaultMessenger(*args)

    DefaultMessenger = staticmethod(DefaultMessenger)
    def FillTime(*args):
        """
        * Returns the string filled with values of hours, minutes and seconds. Example: 1. (5, 12, 26.3345) returns '05h:12m:26.33s', 2. (0, 6, 34.496 ) returns '06m:34.50s', 3. (0, 0, 4.5 ) returns '4.50s'

        :param Hour:
        :type Hour: int
        :param Minute:
        :type Minute: int
        :param Second:
        :type Second: float
        :rtype: TCollection_AsciiString

        """
        return _Message.message_FillTime(*args)

    FillTime = staticmethod(FillTime)
    def __init__(self): 
        _Message.message_swiginit(self,_Message.new_message())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


message._kill_pointed = new_instancemethod(_Message.message__kill_pointed,None,message)
message_swigregister = _Message.message_swigregister
message_swigregister(message)

def message_DefaultMessenger(*args):
  """
    * Defines default messenger for OCCT applications. This is global static instance of the messenger. By default, it contains single printer directed to cout. It can be customized according to the application needs.

    :rtype: Handle_Message_Messenger

    """
  return _Message.message_DefaultMessenger(*args)

def message_FillTime(*args):
  """
    * Returns the string filled with values of hours, minutes and seconds. Example: 1. (5, 12, 26.3345) returns '05h:12m:26.33s', 2. (0, 6, 34.496 ) returns '06m:34.50s', 3. (0, 0, 4.5 ) returns '4.50s'

    :param Hour:
    :type Hour: int
    :param Minute:
    :type Minute: int
    :param Second:
    :type Second: float
    :rtype: TCollection_AsciiString

    """
  return _Message.message_FillTime(*args)

class Message_Algorithm(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor

        :rtype: None

        """
        _Message.Message_Algorithm_swiginit(self,_Message.new_Message_Algorithm(*args))
    def SetStatus(self, *args):
        """
        * Sets status with no parameter

        :param theStat:
        :type theStat: Message_Status &
        :rtype: None

        * Sets status with integer parameter

        :param theStat:
        :type theStat: Message_Status &
        :param theInt:
        :type theInt: int
        :rtype: None

        * Sets status with string parameter. If noRepetitions is True, the parameter will be added only if it has not been yet recorded for the same status flag

        :param theStat:
        :type theStat: Message_Status &
        :param theStr:
        :type theStr: char *
        :param noRepetitions: default value is Standard_True
        :type noRepetitions: bool
        :rtype: None

        * Sets status with string parameter If noRepetitions is True, the parameter will be added only if it has not been yet recorded for the same status flag

        :param theStat:
        :type theStat: Message_Status &
        :param theStr:
        :type theStr: TCollection_AsciiString &
        :param noRepetitions: default value is Standard_True
        :type noRepetitions: bool
        :rtype: None

        * Sets status with string parameter If noRepetitions is True, the parameter will be added only if it has not been yet recorded for the same status flag

        :param theStat:
        :type theStat: Message_Status &
        :param theStr:
        :type theStr: Handle_TCollection_HAsciiString &
        :param noRepetitions: default value is Standard_True
        :type noRepetitions: bool
        :rtype: None

        * Sets status with string parameter If noRepetitions is True, the parameter will be added only if it has not been yet recorded for the same status flag

        :param theStat:
        :type theStat: Message_Status &
        :param theStr:
        :type theStr: TCollection_ExtendedString &
        :param noRepetitions: default value is Standard_True
        :type noRepetitions: bool
        :rtype: None

        * Sets status with string parameter If noRepetitions is True, the parameter will be added only if it has not been yet recorded for the same status flag

        :param theStat:
        :type theStat: Message_Status &
        :param theStr:
        :type theStr: Handle_TCollection_HExtendedString &
        :param noRepetitions: default value is Standard_True
        :type noRepetitions: bool
        :rtype: None

        * Sets status with preformatted message. This message will be used directly to report the status; automatic generation of status messages will be disabled for it.

        :param theStat:
        :type theStat: Message_Status &
        :param theMsg:
        :type theMsg: Message_Msg &
        :rtype: None

        """
        return _Message.Message_Algorithm_SetStatus(self, *args)

    def GetStatus(self, *args):
        """
        * Returns copy of exec status of algorithm

        :rtype: Message_ExecStatus

        """
        return _Message.Message_Algorithm_GetStatus(self, *args)

    def ChangeStatus(self, *args):
        """
        * Returns exec status of algorithm

        :rtype: Message_ExecStatus

        """
        return _Message.Message_Algorithm_ChangeStatus(self, *args)

    def ClearStatus(self, *args):
        """
        * Clear exec status of algorithm

        :rtype: None

        """
        return _Message.Message_Algorithm_ClearStatus(self, *args)

    def SetMessenger(self, *args):
        """
        * Sets messenger to algorithm

        :param theMsgr:
        :type theMsgr: Handle_Message_Messenger &
        :rtype: None

        """
        return _Message.Message_Algorithm_SetMessenger(self, *args)

    def GetMessenger(self, *args):
        """
        * Returns messenger of algorithm. The returned handle is always non-null and can be used for sending messages.

        :rtype: Handle_Message_Messenger

        """
        return _Message.Message_Algorithm_GetMessenger(self, *args)

    def SendStatusMessages(self, *args):
        """
        * Print messages for all status flags that have been set during algorithm execution, excluding statuses that are NOT set in theFilter.  The messages are taken from resource file, names being constructed as {dynamic class type}.{status name}, for instance, 'Message_Algorithm.Fail5'. If message is not found in resources for this class and all its base types, surrogate text is printed.  For the statuses having number or string parameters, theMaxCount defines maximal number of numbers or strings to be included in the message  Note that this method is virtual; this allows descendant classes to customize message output (e.g. by adding messages from other sub-algorithms)

        :param theFilter:
        :type theFilter: Message_ExecStatus &
        :param theTraceLevel: default value is Message_Warning
        :type theTraceLevel: Message_Gravity
        :param theMaxCount: default value is 20
        :type theMaxCount: int
        :rtype: void

        """
        return _Message.Message_Algorithm_SendStatusMessages(self, *args)

    def SendMessages(self, *args):
        """
        * Convenient variant of SendStatusMessages() with theFilter having defined all WARN, ALARM, and FAIL (but not DONE) status flags

        :param theTraceLevel: default value is Message_Warning
        :type theTraceLevel: Message_Gravity
        :param theMaxCount: default value is 20
        :type theMaxCount: int
        :rtype: None

        """
        return _Message.Message_Algorithm_SendMessages(self, *args)

    def AddStatus(self, *args):
        """
        * Add statuses to this algorithm from other algorithm (including messages)

        :param theOther:
        :type theOther: Handle_Message_Algorithm &
        :rtype: None

        * Add statuses to this algorithm from other algorithm, but only those items are moved that correspond to statuses set in theStatus

        :param theStatus:
        :type theStatus: Message_ExecStatus &
        :param theOther:
        :type theOther: Handle_Message_Algorithm &
        :rtype: None

        """
        return _Message.Message_Algorithm_AddStatus(self, *args)

    def GetMessageNumbers(self, *args):
        """
        * Return the numbers associated with the indicated status; Null handle if no such status or no numbers associated with it

        :param theStatus:
        :type theStatus: Message_Status &
        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _Message.Message_Algorithm_GetMessageNumbers(self, *args)

    def GetMessageStrings(self, *args):
        """
        * Return the strings associated with the indicated status; Null handle if no such status or no strings associated with it

        :param theStatus:
        :type theStatus: Message_Status &
        :rtype: Handle_TColStd_HSequenceOfHExtendedString

        """
        return _Message.Message_Algorithm_GetMessageStrings(self, *args)

    def PrepareReport(*args):
        """
        * Prepares a string containing a list of integers contained in theError map, but not more than theMaxCount

        :param theError:
        :type theError: Handle_TColStd_HPackedMapOfInteger &
        :param theMaxCount:
        :type theMaxCount: int
        :rtype: TCollection_ExtendedString

        * Prepares a string containing a list of names contained in theReportSeq sequence, but not more than theMaxCount

        :param theReportSeq:
        :type theReportSeq: TColStd_SequenceOfHExtendedString &
        :param theMaxCount:
        :type theMaxCount: int
        :rtype: TCollection_ExtendedString

        """
        return _Message.Message_Algorithm_PrepareReport(*args)

    PrepareReport = staticmethod(PrepareReport)
    def _kill_pointed(self):
        """_kill_pointed(Message_Algorithm self)"""
        return _Message.Message_Algorithm__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_Algorithm self) -> Handle_Message_Algorithm"""
        return _Message.Message_Algorithm_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_Algorithm.SetStatus = new_instancemethod(_Message.Message_Algorithm_SetStatus,None,Message_Algorithm)
Message_Algorithm.GetStatus = new_instancemethod(_Message.Message_Algorithm_GetStatus,None,Message_Algorithm)
Message_Algorithm.ChangeStatus = new_instancemethod(_Message.Message_Algorithm_ChangeStatus,None,Message_Algorithm)
Message_Algorithm.ClearStatus = new_instancemethod(_Message.Message_Algorithm_ClearStatus,None,Message_Algorithm)
Message_Algorithm.SetMessenger = new_instancemethod(_Message.Message_Algorithm_SetMessenger,None,Message_Algorithm)
Message_Algorithm.GetMessenger = new_instancemethod(_Message.Message_Algorithm_GetMessenger,None,Message_Algorithm)
Message_Algorithm.SendStatusMessages = new_instancemethod(_Message.Message_Algorithm_SendStatusMessages,None,Message_Algorithm)
Message_Algorithm.SendMessages = new_instancemethod(_Message.Message_Algorithm_SendMessages,None,Message_Algorithm)
Message_Algorithm.AddStatus = new_instancemethod(_Message.Message_Algorithm_AddStatus,None,Message_Algorithm)
Message_Algorithm.GetMessageNumbers = new_instancemethod(_Message.Message_Algorithm_GetMessageNumbers,None,Message_Algorithm)
Message_Algorithm.GetMessageStrings = new_instancemethod(_Message.Message_Algorithm_GetMessageStrings,None,Message_Algorithm)
Message_Algorithm._kill_pointed = new_instancemethod(_Message.Message_Algorithm__kill_pointed,None,Message_Algorithm)
Message_Algorithm.GetHandle = new_instancemethod(_Message.Message_Algorithm_GetHandle,None,Message_Algorithm)
Message_Algorithm_swigregister = _Message.Message_Algorithm_swigregister
Message_Algorithm_swigregister(Message_Algorithm)

def Message_Algorithm_PrepareReport(*args):
  """
    * Prepares a string containing a list of integers contained in theError map, but not more than theMaxCount

    :param theError:
    :type theError: Handle_TColStd_HPackedMapOfInteger &
    :param theMaxCount:
    :type theMaxCount: int
    :rtype: TCollection_ExtendedString

    * Prepares a string containing a list of names contained in theReportSeq sequence, but not more than theMaxCount

    :param theReportSeq:
    :type theReportSeq: TColStd_SequenceOfHExtendedString &
    :param theMaxCount:
    :type theMaxCount: int
    :rtype: TCollection_ExtendedString

    """
  return _Message.Message_Algorithm_PrepareReport(*args)

class Handle_Message_Algorithm(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_Algorithm_swiginit(self,_Message.new_Handle_Message_Algorithm(*args))
    DownCast = staticmethod(_Message.Handle_Message_Algorithm_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_Algorithm.Nullify = new_instancemethod(_Message.Handle_Message_Algorithm_Nullify,None,Handle_Message_Algorithm)
Handle_Message_Algorithm.IsNull = new_instancemethod(_Message.Handle_Message_Algorithm_IsNull,None,Handle_Message_Algorithm)
Handle_Message_Algorithm.GetObject = new_instancemethod(_Message.Handle_Message_Algorithm_GetObject,None,Handle_Message_Algorithm)
Handle_Message_Algorithm._kill_pointed = new_instancemethod(_Message.Handle_Message_Algorithm__kill_pointed,None,Handle_Message_Algorithm)
Handle_Message_Algorithm_swigregister = _Message.Handle_Message_Algorithm_swigregister
Handle_Message_Algorithm_swigregister(Handle_Message_Algorithm)

def Handle_Message_Algorithm_DownCast(*args):
  return _Message.Handle_Message_Algorithm_DownCast(*args)
Handle_Message_Algorithm_DownCast = _Message.Handle_Message_Algorithm_DownCast

class Message_ListIteratorOfListOfMsg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: Message_ListOfMsg &
        :rtype: None

        """
        _Message.Message_ListIteratorOfListOfMsg_swiginit(self,_Message.new_Message_ListIteratorOfListOfMsg(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: Message_ListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListIteratorOfListOfMsg_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _Message.Message_ListIteratorOfListOfMsg_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _Message.Message_ListIteratorOfListOfMsg_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Message_Msg

        """
        return _Message.Message_ListIteratorOfListOfMsg_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ListIteratorOfListOfMsg.Initialize = new_instancemethod(_Message.Message_ListIteratorOfListOfMsg_Initialize,None,Message_ListIteratorOfListOfMsg)
Message_ListIteratorOfListOfMsg.More = new_instancemethod(_Message.Message_ListIteratorOfListOfMsg_More,None,Message_ListIteratorOfListOfMsg)
Message_ListIteratorOfListOfMsg.Next = new_instancemethod(_Message.Message_ListIteratorOfListOfMsg_Next,None,Message_ListIteratorOfListOfMsg)
Message_ListIteratorOfListOfMsg.Value = new_instancemethod(_Message.Message_ListIteratorOfListOfMsg_Value,None,Message_ListIteratorOfListOfMsg)
Message_ListIteratorOfListOfMsg._kill_pointed = new_instancemethod(_Message.Message_ListIteratorOfListOfMsg__kill_pointed,None,Message_ListIteratorOfListOfMsg)
Message_ListIteratorOfListOfMsg_swigregister = _Message.Message_ListIteratorOfListOfMsg_swigregister
Message_ListIteratorOfListOfMsg_swigregister(Message_ListIteratorOfListOfMsg)

class Message_ListNodeOfListOfMsg(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Message_Msg &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Message.Message_ListNodeOfListOfMsg_swiginit(self,_Message.new_Message_ListNodeOfListOfMsg(*args))
    def Value(self, *args):
        """
        :rtype: Message_Msg

        """
        return _Message.Message_ListNodeOfListOfMsg_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_ListNodeOfListOfMsg self)"""
        return _Message.Message_ListNodeOfListOfMsg__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_ListNodeOfListOfMsg self) -> Handle_Message_ListNodeOfListOfMsg"""
        return _Message.Message_ListNodeOfListOfMsg_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ListNodeOfListOfMsg.Value = new_instancemethod(_Message.Message_ListNodeOfListOfMsg_Value,None,Message_ListNodeOfListOfMsg)
Message_ListNodeOfListOfMsg._kill_pointed = new_instancemethod(_Message.Message_ListNodeOfListOfMsg__kill_pointed,None,Message_ListNodeOfListOfMsg)
Message_ListNodeOfListOfMsg.GetHandle = new_instancemethod(_Message.Message_ListNodeOfListOfMsg_GetHandle,None,Message_ListNodeOfListOfMsg)
Message_ListNodeOfListOfMsg_swigregister = _Message.Message_ListNodeOfListOfMsg_swigregister
Message_ListNodeOfListOfMsg_swigregister(Message_ListNodeOfListOfMsg)

class Handle_Message_ListNodeOfListOfMsg(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_ListNodeOfListOfMsg_swiginit(self,_Message.new_Handle_Message_ListNodeOfListOfMsg(*args))
    DownCast = staticmethod(_Message.Handle_Message_ListNodeOfListOfMsg_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_ListNodeOfListOfMsg.Nullify = new_instancemethod(_Message.Handle_Message_ListNodeOfListOfMsg_Nullify,None,Handle_Message_ListNodeOfListOfMsg)
Handle_Message_ListNodeOfListOfMsg.IsNull = new_instancemethod(_Message.Handle_Message_ListNodeOfListOfMsg_IsNull,None,Handle_Message_ListNodeOfListOfMsg)
Handle_Message_ListNodeOfListOfMsg.GetObject = new_instancemethod(_Message.Handle_Message_ListNodeOfListOfMsg_GetObject,None,Handle_Message_ListNodeOfListOfMsg)
Handle_Message_ListNodeOfListOfMsg._kill_pointed = new_instancemethod(_Message.Handle_Message_ListNodeOfListOfMsg__kill_pointed,None,Handle_Message_ListNodeOfListOfMsg)
Handle_Message_ListNodeOfListOfMsg_swigregister = _Message.Handle_Message_ListNodeOfListOfMsg_swigregister
Handle_Message_ListNodeOfListOfMsg_swigregister(Handle_Message_ListNodeOfListOfMsg)

def Handle_Message_ListNodeOfListOfMsg_DownCast(*args):
  return _Message.Handle_Message_ListNodeOfListOfMsg_DownCast(*args)
Handle_Message_ListNodeOfListOfMsg_DownCast = _Message.Handle_Message_ListNodeOfListOfMsg_DownCast

class Message_ListOfMsg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Message.Message_ListOfMsg_swiginit(self,_Message.new_Message_ListOfMsg(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: Message_ListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Message_ListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Message.Message_ListOfMsg_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Message.Message_ListOfMsg_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Message_Msg &
        :rtype: None

        :param I:
        :type I: Message_Msg &
        :param theIt:
        :type theIt: Message_ListIteratorOfListOfMsg &
        :rtype: None

        :param Other:
        :type Other: Message_ListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Message_Msg &
        :rtype: None

        :param I:
        :type I: Message_Msg &
        :param theIt:
        :type theIt: Message_ListIteratorOfListOfMsg &
        :rtype: None

        :param Other:
        :type Other: Message_ListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Message_Msg

        """
        return _Message.Message_ListOfMsg_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Message_Msg

        """
        return _Message.Message_ListOfMsg_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Message.Message_ListOfMsg_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: Message_ListIteratorOfListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Message_Msg &
        :param It:
        :type It: Message_ListIteratorOfListOfMsg &
        :rtype: None

        :param Other:
        :type Other: Message_ListOfMsg &
        :param It:
        :type It: Message_ListIteratorOfListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Message_Msg &
        :param It:
        :type It: Message_ListIteratorOfListOfMsg &
        :rtype: None

        :param Other:
        :type Other: Message_ListOfMsg &
        :param It:
        :type It: Message_ListIteratorOfListOfMsg &
        :rtype: None

        """
        return _Message.Message_ListOfMsg_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ListOfMsg.Assign = new_instancemethod(_Message.Message_ListOfMsg_Assign,None,Message_ListOfMsg)
Message_ListOfMsg.Set = new_instancemethod(_Message.Message_ListOfMsg_Set,None,Message_ListOfMsg)
Message_ListOfMsg.Extent = new_instancemethod(_Message.Message_ListOfMsg_Extent,None,Message_ListOfMsg)
Message_ListOfMsg.Clear = new_instancemethod(_Message.Message_ListOfMsg_Clear,None,Message_ListOfMsg)
Message_ListOfMsg.IsEmpty = new_instancemethod(_Message.Message_ListOfMsg_IsEmpty,None,Message_ListOfMsg)
Message_ListOfMsg.Prepend = new_instancemethod(_Message.Message_ListOfMsg_Prepend,None,Message_ListOfMsg)
Message_ListOfMsg.Append = new_instancemethod(_Message.Message_ListOfMsg_Append,None,Message_ListOfMsg)
Message_ListOfMsg.First = new_instancemethod(_Message.Message_ListOfMsg_First,None,Message_ListOfMsg)
Message_ListOfMsg.Last = new_instancemethod(_Message.Message_ListOfMsg_Last,None,Message_ListOfMsg)
Message_ListOfMsg.RemoveFirst = new_instancemethod(_Message.Message_ListOfMsg_RemoveFirst,None,Message_ListOfMsg)
Message_ListOfMsg.Remove = new_instancemethod(_Message.Message_ListOfMsg_Remove,None,Message_ListOfMsg)
Message_ListOfMsg.InsertBefore = new_instancemethod(_Message.Message_ListOfMsg_InsertBefore,None,Message_ListOfMsg)
Message_ListOfMsg.InsertAfter = new_instancemethod(_Message.Message_ListOfMsg_InsertAfter,None,Message_ListOfMsg)
Message_ListOfMsg._kill_pointed = new_instancemethod(_Message.Message_ListOfMsg__kill_pointed,None,Message_ListOfMsg)
Message_ListOfMsg_swigregister = _Message.Message_ListOfMsg_swigregister
Message_ListOfMsg_swigregister(Message_ListOfMsg)

class Message_Messenger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor; initializes by single printer directed to cout. Note: the default messenger is not empty but directed to cout in order to protect against possibility to forget defining printers. If printing to cout is not needed, clear messenger by GetPrinters().Clear()

        :rtype: None

        * Create messenger with single printer

        :param thePrinter:
        :type thePrinter: Handle_Message_Printer &
        :rtype: None

        """
        _Message.Message_Messenger_swiginit(self,_Message.new_Message_Messenger(*args))
    def AddPrinter(self, *args):
        """
        * Add a printer to the messenger. The printer will be added only if it is not yet in the list. Returns True if printer has been added.

        :param thePrinter:
        :type thePrinter: Handle_Message_Printer &
        :rtype: bool

        """
        return _Message.Message_Messenger_AddPrinter(self, *args)

    def RemovePrinter(self, *args):
        """
        * Removes specified printer from the messenger. Returns True if this printer has been found in the list and removed.

        :param thePrinter:
        :type thePrinter: Handle_Message_Printer &
        :rtype: bool

        """
        return _Message.Message_Messenger_RemovePrinter(self, *args)

    def RemovePrinters(self, *args):
        """
        * Removes printers of specified type (including derived classes) from the messenger. Returns number of removed printers.

        :param theType:
        :type theType: Handle_Standard_Type &
        :rtype: int

        """
        return _Message.Message_Messenger_RemovePrinters(self, *args)

    def Printers(self, *args):
        """
        * Returns current sequence of printers

        :rtype: Message_SequenceOfPrinters

        """
        return _Message.Message_Messenger_Printers(self, *args)

    def ChangePrinters(self, *args):
        """
        * Returns sequence of printers The sequence can be modified.

        :rtype: Message_SequenceOfPrinters

        """
        return _Message.Message_Messenger_ChangePrinters(self, *args)

    def Send(self, *args):
        """
        * Dispatch a message to all the printers in the list. Three versions of string representations are accepted for convenience, by default all are converted to ExtendedString. The parameter putEndl specifies whether the new line should be started after this message (default) or not (may have sense in some conditions).

        :param theString:
        :type theString: char *
        :param theGravity: default value is Message_Warning
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: None

        * See above

        :param theString:
        :type theString: TCollection_AsciiString &
        :param theGravity: default value is Message_Warning
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: None

        * See above

        :param theString:
        :type theString: TCollection_ExtendedString &
        :param theGravity: default value is Message_Warning
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: None

        """
        return _Message.Message_Messenger_Send(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_Messenger self)"""
        return _Message.Message_Messenger__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_Messenger self) -> Handle_Message_Messenger"""
        return _Message.Message_Messenger_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_Messenger.AddPrinter = new_instancemethod(_Message.Message_Messenger_AddPrinter,None,Message_Messenger)
Message_Messenger.RemovePrinter = new_instancemethod(_Message.Message_Messenger_RemovePrinter,None,Message_Messenger)
Message_Messenger.RemovePrinters = new_instancemethod(_Message.Message_Messenger_RemovePrinters,None,Message_Messenger)
Message_Messenger.Printers = new_instancemethod(_Message.Message_Messenger_Printers,None,Message_Messenger)
Message_Messenger.ChangePrinters = new_instancemethod(_Message.Message_Messenger_ChangePrinters,None,Message_Messenger)
Message_Messenger.Send = new_instancemethod(_Message.Message_Messenger_Send,None,Message_Messenger)
Message_Messenger._kill_pointed = new_instancemethod(_Message.Message_Messenger__kill_pointed,None,Message_Messenger)
Message_Messenger.GetHandle = new_instancemethod(_Message.Message_Messenger_GetHandle,None,Message_Messenger)
Message_Messenger_swigregister = _Message.Message_Messenger_swigregister
Message_Messenger_swigregister(Message_Messenger)

class Handle_Message_Messenger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_Messenger_swiginit(self,_Message.new_Handle_Message_Messenger(*args))
    DownCast = staticmethod(_Message.Handle_Message_Messenger_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_Messenger.Nullify = new_instancemethod(_Message.Handle_Message_Messenger_Nullify,None,Handle_Message_Messenger)
Handle_Message_Messenger.IsNull = new_instancemethod(_Message.Handle_Message_Messenger_IsNull,None,Handle_Message_Messenger)
Handle_Message_Messenger.GetObject = new_instancemethod(_Message.Handle_Message_Messenger_GetObject,None,Handle_Message_Messenger)
Handle_Message_Messenger._kill_pointed = new_instancemethod(_Message.Handle_Message_Messenger__kill_pointed,None,Handle_Message_Messenger)
Handle_Message_Messenger_swigregister = _Message.Handle_Message_Messenger_swigregister
Handle_Message_Messenger_swigregister(Handle_Message_Messenger)

def Handle_Message_Messenger_DownCast(*args):
  return _Message.Handle_Message_Messenger_DownCast(*args)
Handle_Message_Messenger_DownCast = _Message.Handle_Message_Messenger_DownCast

class Message_MsgFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Load(*args):
        """
        * Load message file <theFileName> from directory <theDirName> or its sub-directory

        :param theDirName:
        :type theDirName: char *
        :param theFileName:
        :type theFileName: char *
        :rtype: bool

        """
        return _Message.Message_MsgFile_Load(*args)

    Load = staticmethod(Load)
    def LoadFile(*args):
        """
        * Load the messages from the given file, additive to any previously loaded messages. Messages with same keywords, if already present, are replaced with the new ones.

        :param theFName:
        :type theFName: char *
        :rtype: bool

        """
        return _Message.Message_MsgFile_LoadFile(*args)

    LoadFile = staticmethod(LoadFile)
    def LoadFromEnv(*args):
        """
        * Loads the messages from the file with name (without extension) given by environment variable. Extension of the file name is given separately. If its not defined, it is taken: - by default from environment CSF_LANGUAGE, - if not defined either, as 'us'.

        :param envname:
        :type envname: char *
        :param filename:
        :type filename: char *
        :param ext: default value is 
        :type ext: char *
        :rtype: void

        """
        return _Message.Message_MsgFile_LoadFromEnv(*args)

    LoadFromEnv = staticmethod(LoadFromEnv)
    def AddMsg(*args):
        """
        * Adds new message to the map. Parameter <key> gives the key of the message, <text> defines the message itself. If there already was defined the message identified by the same keyword, it is replaced with the new one.

        :param key:
        :type key: TCollection_AsciiString &
        :param text:
        :type text: TCollection_ExtendedString &
        :rtype: bool

        """
        return _Message.Message_MsgFile_AddMsg(*args)

    AddMsg = staticmethod(AddMsg)
    def Msg(*args):
        """
        :param key:
        :type key: char *
        :rtype: TCollection_ExtendedString

        * Gives the text for the message identified by the keyword <key> If there are no messages with such keyword defined, the error message is returned. In that case reference to static string is returned, it can be chenged with next call(s) to Msg(). Note: The error message is constructed like 'Unknown message: <key>', and can itself be customized by defining message with key Message_Msg_BadKeyword.

        :param key:
        :type key: TCollection_AsciiString &
        :rtype: TCollection_ExtendedString

        """
        return _Message.Message_MsgFile_Msg(*args)

    Msg = staticmethod(Msg)
    def __init__(self): 
        _Message.Message_MsgFile_swiginit(self,_Message.new_Message_MsgFile())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_MsgFile._kill_pointed = new_instancemethod(_Message.Message_MsgFile__kill_pointed,None,Message_MsgFile)
Message_MsgFile_swigregister = _Message.Message_MsgFile_swigregister
Message_MsgFile_swigregister(Message_MsgFile)

def Message_MsgFile_Load(*args):
  """
    * Load message file <theFileName> from directory <theDirName> or its sub-directory

    :param theDirName:
    :type theDirName: char *
    :param theFileName:
    :type theFileName: char *
    :rtype: bool

    """
  return _Message.Message_MsgFile_Load(*args)

def Message_MsgFile_LoadFile(*args):
  """
    * Load the messages from the given file, additive to any previously loaded messages. Messages with same keywords, if already present, are replaced with the new ones.

    :param theFName:
    :type theFName: char *
    :rtype: bool

    """
  return _Message.Message_MsgFile_LoadFile(*args)

def Message_MsgFile_LoadFromEnv(*args):
  """
    * Loads the messages from the file with name (without extension) given by environment variable. Extension of the file name is given separately. If its not defined, it is taken: - by default from environment CSF_LANGUAGE, - if not defined either, as 'us'.

    :param envname:
    :type envname: char *
    :param filename:
    :type filename: char *
    :param ext: default value is 
    :type ext: char *
    :rtype: void

    """
  return _Message.Message_MsgFile_LoadFromEnv(*args)

def Message_MsgFile_AddMsg(*args):
  """
    * Adds new message to the map. Parameter <key> gives the key of the message, <text> defines the message itself. If there already was defined the message identified by the same keyword, it is replaced with the new one.

    :param key:
    :type key: TCollection_AsciiString &
    :param text:
    :type text: TCollection_ExtendedString &
    :rtype: bool

    """
  return _Message.Message_MsgFile_AddMsg(*args)

def Message_MsgFile_Msg(*args):
  """
    :param key:
    :type key: char *
    :rtype: TCollection_ExtendedString

    * Gives the text for the message identified by the keyword <key> If there are no messages with such keyword defined, the error message is returned. In that case reference to static string is returned, it can be chenged with next call(s) to Msg(). Note: The error message is constructed like 'Unknown message: <key>', and can itself be customized by defining message with key Message_Msg_BadKeyword.

    :param key:
    :type key: TCollection_AsciiString &
    :rtype: TCollection_ExtendedString

    """
  return _Message.Message_MsgFile_Msg(*args)

class Message_Printer(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Send(self, *args):
        """
        * Send a string message with specified trace level. The parameter putEndl specified whether end-of-line should be added to the end of the message. This method must be redefined in descentant.

        :param theString:
        :type theString: TCollection_ExtendedString &
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl:
        :type putEndl: bool
        :rtype: void

        * Send a string message with specified trace level. The parameter putEndl specified whether end-of-line should be added to the end of the message. Default implementation calls first method Send().

        :param theString:
        :type theString: char *
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl:
        :type putEndl: bool
        :rtype: void

        * Send a string message with specified trace level. The parameter putEndl specified whether end-of-line should be added to the end of the message. Default implementation calls first method Send().

        :param theString:
        :type theString: TCollection_AsciiString &
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl:
        :type putEndl: bool
        :rtype: void

        """
        return _Message.Message_Printer_Send(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_Printer self)"""
        return _Message.Message_Printer__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_Printer self) -> Handle_Message_Printer"""
        return _Message.Message_Printer_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_Printer.Send = new_instancemethod(_Message.Message_Printer_Send,None,Message_Printer)
Message_Printer._kill_pointed = new_instancemethod(_Message.Message_Printer__kill_pointed,None,Message_Printer)
Message_Printer.GetHandle = new_instancemethod(_Message.Message_Printer_GetHandle,None,Message_Printer)
Message_Printer_swigregister = _Message.Message_Printer_swigregister
Message_Printer_swigregister(Message_Printer)

class Handle_Message_Printer(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_Printer_swiginit(self,_Message.new_Handle_Message_Printer(*args))
    DownCast = staticmethod(_Message.Handle_Message_Printer_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_Printer.Nullify = new_instancemethod(_Message.Handle_Message_Printer_Nullify,None,Handle_Message_Printer)
Handle_Message_Printer.IsNull = new_instancemethod(_Message.Handle_Message_Printer_IsNull,None,Handle_Message_Printer)
Handle_Message_Printer.GetObject = new_instancemethod(_Message.Handle_Message_Printer_GetObject,None,Handle_Message_Printer)
Handle_Message_Printer._kill_pointed = new_instancemethod(_Message.Handle_Message_Printer__kill_pointed,None,Handle_Message_Printer)
Handle_Message_Printer_swigregister = _Message.Handle_Message_Printer_swigregister
Handle_Message_Printer_swigregister(Handle_Message_Printer)

def Handle_Message_Printer_DownCast(*args):
  return _Message.Handle_Message_Printer_DownCast(*args)
Handle_Message_Printer_DownCast = _Message.Handle_Message_Printer_DownCast

class Message_ProgressIndicator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Reset(self, *args):
        """
        * Drops all scopes and sets scale from 0 to 100, step 1 This scale has name 'Step'

        :rtype: void

        """
        return _Message.Message_ProgressIndicator_Reset(self, *args)

    def SetName(self, *args):
        """
        :param name:
        :type name: char *
        :rtype: None

        * Set (optional) name for scale

        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetName(self, *args)

    def SetRange(self, *args):
        """
        * Set range for current scale

        :param min:
        :type min: float
        :param max:
        :type max: float
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetRange(self, *args)

    def SetStep(self, *args):
        """
        * Set step for current scale

        :param step:
        :type step: float
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetStep(self, *args)

    def SetInfinite(self, *args):
        """
        * Set or drop infinite mode for the current scale

        :param isInf: default value is Standard_True
        :type isInf: bool
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetInfinite(self, *args)

    def SetScale(self, *args):
        """
        :param name:
        :type name: char *
        :param min:
        :type min: float
        :param max:
        :type max: float
        :param step:
        :type step: float
        :param isInf: default value is Standard_False
        :type isInf: bool
        :rtype: None

        * Set all parameters for current scale

        :param min:
        :type min: float
        :param max:
        :type max: float
        :param step:
        :type step: float
        :param isInf: default value is Standard_False
        :type isInf: bool
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetScale(self, *args)

    def GetScale(self, *args):
        """
        * Returns all parameters for current scale

        :param min:
        :type min: float &
        :param max:
        :type max: float &
        :param step:
        :type step: float &
        :param isInf:
        :type isInf: bool
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_GetScale(self, *args)

    def SetValue(self, *args):
        """
        :param val:
        :type val: float
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_SetValue(self, *args)

    def GetValue(self, *args):
        """
        * Set and get progress value at current scale If the value to be set is more than currently set one, or out of range for the current scale, it is limited by that range

        :rtype: float

        """
        return _Message.Message_ProgressIndicator_GetValue(self, *args)

    def Increment(self, *args):
        """
        :rtype: None

        * Increment the progress value by the default of specified step

        :param step:
        :type step: float
        :rtype: None

        """
        return _Message.Message_ProgressIndicator_Increment(self, *args)

    def NewScope(self, *args):
        """
        :param name: default value is 0
        :type name: char *
        :rtype: bool

        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: bool

        :param span:
        :type span: float
        :param name: default value is 0
        :type name: char *
        :rtype: bool

        * Creates new scope on a part of a current scale from current position with span either equal to default step, or specified The scale for the new scope will have specified name and ranged from 0 to 100 with step 1 Returns False if something is wrong in arguments or in current position of progress indicator; scope is opened anyway

        :param span:
        :type span: float
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _Message.Message_ProgressIndicator_NewScope(self, *args)

    def EndScope(self, *args):
        """
        * Close the current scope and thus return to previous scale Updates position to be at the end of the closing scope Returns False if no scope is opened

        :rtype: bool

        """
        return _Message.Message_ProgressIndicator_EndScope(self, *args)

    def NextScope(self, *args):
        """
        :param name: default value is 0
        :type name: char *
        :rtype: bool

        * Optimized version of { return EndScope() && NewScope(); }

        :param span:
        :type span: float
        :param name: default value is 0
        :type name: char *
        :rtype: bool

        """
        return _Message.Message_ProgressIndicator_NextScope(self, *args)

    def UserBreak(self, *args):
        """
        * Should return True if user has send a break signal. Default implementation returns False.

        :rtype: bool

        """
        return _Message.Message_ProgressIndicator_UserBreak(self, *args)

    def Show(self, *args):
        """
        * Update presentation of the progress indicator Called when progress position is changed Flag force is intended for forcing update in case if it is optimized; all internal calls from ProgressIndicator are done with this flag equal to False

        :param force: default value is Standard_True
        :type force: bool
        :rtype: bool

        """
        return _Message.Message_ProgressIndicator_Show(self, *args)

    def GetPosition(self, *args):
        """
        * Returns total progress position on the basic scale ranged from 0. to 1.

        :rtype: float

        """
        return _Message.Message_ProgressIndicator_GetPosition(self, *args)

    def GetNbScopes(self, *args):
        """
        * Returns current number of opened scopes This number is always >=1 as top-level scale is always present

        :rtype: int

        """
        return _Message.Message_ProgressIndicator_GetNbScopes(self, *args)

    def GetScope(self, *args):
        """
        * Returns data for scale of index-th scope The first scope is current one, the last is the top-level one

        :param index:
        :type index: int
        :rtype: Message_ProgressScale

        """
        return _Message.Message_ProgressIndicator_GetScope(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_ProgressIndicator self)"""
        return _Message.Message_ProgressIndicator__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_ProgressIndicator self) -> Handle_Message_ProgressIndicator"""
        return _Message.Message_ProgressIndicator_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ProgressIndicator.Reset = new_instancemethod(_Message.Message_ProgressIndicator_Reset,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetName = new_instancemethod(_Message.Message_ProgressIndicator_SetName,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetRange = new_instancemethod(_Message.Message_ProgressIndicator_SetRange,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetStep = new_instancemethod(_Message.Message_ProgressIndicator_SetStep,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetInfinite = new_instancemethod(_Message.Message_ProgressIndicator_SetInfinite,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetScale = new_instancemethod(_Message.Message_ProgressIndicator_SetScale,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetScale = new_instancemethod(_Message.Message_ProgressIndicator_GetScale,None,Message_ProgressIndicator)
Message_ProgressIndicator.SetValue = new_instancemethod(_Message.Message_ProgressIndicator_SetValue,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetValue = new_instancemethod(_Message.Message_ProgressIndicator_GetValue,None,Message_ProgressIndicator)
Message_ProgressIndicator.Increment = new_instancemethod(_Message.Message_ProgressIndicator_Increment,None,Message_ProgressIndicator)
Message_ProgressIndicator.NewScope = new_instancemethod(_Message.Message_ProgressIndicator_NewScope,None,Message_ProgressIndicator)
Message_ProgressIndicator.EndScope = new_instancemethod(_Message.Message_ProgressIndicator_EndScope,None,Message_ProgressIndicator)
Message_ProgressIndicator.NextScope = new_instancemethod(_Message.Message_ProgressIndicator_NextScope,None,Message_ProgressIndicator)
Message_ProgressIndicator.UserBreak = new_instancemethod(_Message.Message_ProgressIndicator_UserBreak,None,Message_ProgressIndicator)
Message_ProgressIndicator.Show = new_instancemethod(_Message.Message_ProgressIndicator_Show,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetPosition = new_instancemethod(_Message.Message_ProgressIndicator_GetPosition,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetNbScopes = new_instancemethod(_Message.Message_ProgressIndicator_GetNbScopes,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetScope = new_instancemethod(_Message.Message_ProgressIndicator_GetScope,None,Message_ProgressIndicator)
Message_ProgressIndicator._kill_pointed = new_instancemethod(_Message.Message_ProgressIndicator__kill_pointed,None,Message_ProgressIndicator)
Message_ProgressIndicator.GetHandle = new_instancemethod(_Message.Message_ProgressIndicator_GetHandle,None,Message_ProgressIndicator)
Message_ProgressIndicator_swigregister = _Message.Message_ProgressIndicator_swigregister
Message_ProgressIndicator_swigregister(Message_ProgressIndicator)

class Handle_Message_ProgressIndicator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_ProgressIndicator_swiginit(self,_Message.new_Handle_Message_ProgressIndicator(*args))
    DownCast = staticmethod(_Message.Handle_Message_ProgressIndicator_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_ProgressIndicator.Nullify = new_instancemethod(_Message.Handle_Message_ProgressIndicator_Nullify,None,Handle_Message_ProgressIndicator)
Handle_Message_ProgressIndicator.IsNull = new_instancemethod(_Message.Handle_Message_ProgressIndicator_IsNull,None,Handle_Message_ProgressIndicator)
Handle_Message_ProgressIndicator.GetObject = new_instancemethod(_Message.Handle_Message_ProgressIndicator_GetObject,None,Handle_Message_ProgressIndicator)
Handle_Message_ProgressIndicator._kill_pointed = new_instancemethod(_Message.Handle_Message_ProgressIndicator__kill_pointed,None,Handle_Message_ProgressIndicator)
Handle_Message_ProgressIndicator_swigregister = _Message.Handle_Message_ProgressIndicator_swigregister
Handle_Message_ProgressIndicator_swigregister(Handle_Message_ProgressIndicator)

def Handle_Message_ProgressIndicator_DownCast(*args):
  return _Message.Handle_Message_ProgressIndicator_DownCast(*args)
Handle_Message_ProgressIndicator_DownCast = _Message.Handle_Message_ProgressIndicator_DownCast

class Message_ProgressScale(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates scale ranged from 0 to 100 with step 1

        :rtype: None

        """
        _Message.Message_ProgressScale_swiginit(self,_Message.new_Message_ProgressScale(*args))
    def SetName(self, *args):
        """
        :param theName:
        :type theName: char *
        :rtype: None

        * Sets scale name

        :param theName:
        :type theName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetName(self, *args)

    def GetName(self, *args):
        """
        * Gets scale name Name may be Null handle if not set

        :rtype: Handle_TCollection_HAsciiString

        """
        return _Message.Message_ProgressScale_GetName(self, *args)

    def SetMin(self, *args):
        """
        * Sets minimum value of scale

        :param theMin:
        :type theMin: float
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetMin(self, *args)

    def GetMin(self, *args):
        """
        * Gets minimum value of scale

        :rtype: float

        """
        return _Message.Message_ProgressScale_GetMin(self, *args)

    def SetMax(self, *args):
        """
        * Sets minimum value of scale

        :param theMax:
        :type theMax: float
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetMax(self, *args)

    def GetMax(self, *args):
        """
        * Gets minimum value of scale

        :rtype: float

        """
        return _Message.Message_ProgressScale_GetMax(self, *args)

    def SetRange(self, *args):
        """
        * Set both min and max

        :param min:
        :type min: float
        :param max:
        :type max: float
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetRange(self, *args)

    def SetStep(self, *args):
        """
        * Sets default step

        :param theStep:
        :type theStep: float
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetStep(self, *args)

    def GetStep(self, *args):
        """
        * Gets default step

        :rtype: float

        """
        return _Message.Message_ProgressScale_GetStep(self, *args)

    def SetInfinite(self, *args):
        """
        * Sets flag for infinite scale

        :param theInfinite: default value is Standard_True
        :type theInfinite: bool
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetInfinite(self, *args)

    def GetInfinite(self, *args):
        """
        * Gets flag for infinite scale

        :rtype: bool

        """
        return _Message.Message_ProgressScale_GetInfinite(self, *args)

    def SetScale(self, *args):
        """
        * Set all scale parameters

        :param min:
        :type min: float
        :param max:
        :type max: float
        :param step:
        :type step: float
        :param theInfinite: default value is Standard_True
        :type theInfinite: bool
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetScale(self, *args)

    def SetSpan(self, *args):
        """
        * Defines span occupied by the scale on the basis scale

        :param first:
        :type first: float
        :param last:
        :type last: float
        :rtype: None

        """
        return _Message.Message_ProgressScale_SetSpan(self, *args)

    def GetFirst(self, *args):
        """
        :rtype: float

        """
        return _Message.Message_ProgressScale_GetFirst(self, *args)

    def GetLast(self, *args):
        """
        * Return information on span occupied by the scale on the base scale

        :rtype: float

        """
        return _Message.Message_ProgressScale_GetLast(self, *args)

    def LocalToBase(self, *args):
        """
        :param val:
        :type val: float
        :rtype: float

        """
        return _Message.Message_ProgressScale_LocalToBase(self, *args)

    def BaseToLocal(self, *args):
        """
        * Convert value from this scale to base one and back

        :param val:
        :type val: float
        :rtype: float

        """
        return _Message.Message_ProgressScale_BaseToLocal(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ProgressScale.SetName = new_instancemethod(_Message.Message_ProgressScale_SetName,None,Message_ProgressScale)
Message_ProgressScale.GetName = new_instancemethod(_Message.Message_ProgressScale_GetName,None,Message_ProgressScale)
Message_ProgressScale.SetMin = new_instancemethod(_Message.Message_ProgressScale_SetMin,None,Message_ProgressScale)
Message_ProgressScale.GetMin = new_instancemethod(_Message.Message_ProgressScale_GetMin,None,Message_ProgressScale)
Message_ProgressScale.SetMax = new_instancemethod(_Message.Message_ProgressScale_SetMax,None,Message_ProgressScale)
Message_ProgressScale.GetMax = new_instancemethod(_Message.Message_ProgressScale_GetMax,None,Message_ProgressScale)
Message_ProgressScale.SetRange = new_instancemethod(_Message.Message_ProgressScale_SetRange,None,Message_ProgressScale)
Message_ProgressScale.SetStep = new_instancemethod(_Message.Message_ProgressScale_SetStep,None,Message_ProgressScale)
Message_ProgressScale.GetStep = new_instancemethod(_Message.Message_ProgressScale_GetStep,None,Message_ProgressScale)
Message_ProgressScale.SetInfinite = new_instancemethod(_Message.Message_ProgressScale_SetInfinite,None,Message_ProgressScale)
Message_ProgressScale.GetInfinite = new_instancemethod(_Message.Message_ProgressScale_GetInfinite,None,Message_ProgressScale)
Message_ProgressScale.SetScale = new_instancemethod(_Message.Message_ProgressScale_SetScale,None,Message_ProgressScale)
Message_ProgressScale.SetSpan = new_instancemethod(_Message.Message_ProgressScale_SetSpan,None,Message_ProgressScale)
Message_ProgressScale.GetFirst = new_instancemethod(_Message.Message_ProgressScale_GetFirst,None,Message_ProgressScale)
Message_ProgressScale.GetLast = new_instancemethod(_Message.Message_ProgressScale_GetLast,None,Message_ProgressScale)
Message_ProgressScale.LocalToBase = new_instancemethod(_Message.Message_ProgressScale_LocalToBase,None,Message_ProgressScale)
Message_ProgressScale.BaseToLocal = new_instancemethod(_Message.Message_ProgressScale_BaseToLocal,None,Message_ProgressScale)
Message_ProgressScale._kill_pointed = new_instancemethod(_Message.Message_ProgressScale__kill_pointed,None,Message_ProgressScale)
Message_ProgressScale_swigregister = _Message.Message_ProgressScale_swigregister
Message_ProgressScale_swigregister(Message_ProgressScale)

class Message_ProgressSentry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param PI:
        :type PI: Handle_Message_ProgressIndicator &
        :param name:
        :type name: char *
        :param min:
        :type min: float
        :param max:
        :type max: float
        :param step:
        :type step: float
        :param isInf: default value is Standard_False
        :type isInf: bool
        :param newScopeSpan: default value is 0.0
        :type newScopeSpan: float
        :rtype: None

        * Creates an instance of ProgressSentry attaching it to the specified ProgressIndicator, selects parameters of the current scale, and opens a new scope with specified span (equal to step by default)

        :param PI:
        :type PI: Handle_Message_ProgressIndicator &
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :param min:
        :type min: float
        :param max:
        :type max: float
        :param step:
        :type step: float
        :param isInf: default value is Standard_False
        :type isInf: bool
        :param newScopeSpan: default value is 0.0
        :type newScopeSpan: float
        :rtype: None

        """
        _Message.Message_ProgressSentry_swiginit(self,_Message.new_Message_ProgressSentry(*args))
    def Relieve(self, *args):
        """
        * Moves progress indicator to the end of the current scale and relieves sentry from its duty. Methods other than Show() will do nothing after this one is called.

        :rtype: None

        """
        return _Message.Message_ProgressSentry_Relieve(self, *args)

    def Next(self, *args):
        """
        :param name: default value is 0
        :type name: char *
        :rtype: None

        :param span:
        :type span: float
        :param name: default value is 0
        :type name: char *
        :rtype: None

        * Closes current scope and opens next one with either specified or default span

        :param span:
        :type span: float
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _Message.Message_ProgressSentry_Next(self, *args)

    def More(self, *args):
        """
        * Returns False if ProgressIndicator signals UserBreak

        :rtype: bool

        """
        return _Message.Message_ProgressSentry_More(self, *args)

    def Show(self, *args):
        """
        * Forces update of progress indicator display

        :rtype: None

        """
        return _Message.Message_ProgressSentry_Show(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_ProgressSentry.Relieve = new_instancemethod(_Message.Message_ProgressSentry_Relieve,None,Message_ProgressSentry)
Message_ProgressSentry.Next = new_instancemethod(_Message.Message_ProgressSentry_Next,None,Message_ProgressSentry)
Message_ProgressSentry.More = new_instancemethod(_Message.Message_ProgressSentry_More,None,Message_ProgressSentry)
Message_ProgressSentry.Show = new_instancemethod(_Message.Message_ProgressSentry_Show,None,Message_ProgressSentry)
Message_ProgressSentry._kill_pointed = new_instancemethod(_Message.Message_ProgressSentry__kill_pointed,None,Message_ProgressSentry)
Message_ProgressSentry_swigregister = _Message.Message_ProgressSentry_swigregister
Message_ProgressSentry_swigregister(Message_ProgressSentry)

class Message_SequenceNodeOfSequenceOfPrinters(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_Message_Printer &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Message.Message_SequenceNodeOfSequenceOfPrinters_swiginit(self,_Message.new_Message_SequenceNodeOfSequenceOfPrinters(*args))
    def Value(self, *args):
        """
        :rtype: Handle_Message_Printer

        """
        return _Message.Message_SequenceNodeOfSequenceOfPrinters_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_SequenceNodeOfSequenceOfPrinters self)"""
        return _Message.Message_SequenceNodeOfSequenceOfPrinters__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_SequenceNodeOfSequenceOfPrinters self) -> Handle_Message_SequenceNodeOfSequenceOfPrinters"""
        return _Message.Message_SequenceNodeOfSequenceOfPrinters_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_SequenceNodeOfSequenceOfPrinters.Value = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfPrinters_Value,None,Message_SequenceNodeOfSequenceOfPrinters)
Message_SequenceNodeOfSequenceOfPrinters._kill_pointed = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfPrinters__kill_pointed,None,Message_SequenceNodeOfSequenceOfPrinters)
Message_SequenceNodeOfSequenceOfPrinters.GetHandle = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfPrinters_GetHandle,None,Message_SequenceNodeOfSequenceOfPrinters)
Message_SequenceNodeOfSequenceOfPrinters_swigregister = _Message.Message_SequenceNodeOfSequenceOfPrinters_swigregister
Message_SequenceNodeOfSequenceOfPrinters_swigregister(Message_SequenceNodeOfSequenceOfPrinters)

class Handle_Message_SequenceNodeOfSequenceOfPrinters(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_swiginit(self,_Message.new_Handle_Message_SequenceNodeOfSequenceOfPrinters(*args))
    DownCast = staticmethod(_Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_SequenceNodeOfSequenceOfPrinters.Nullify = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_Nullify,None,Handle_Message_SequenceNodeOfSequenceOfPrinters)
Handle_Message_SequenceNodeOfSequenceOfPrinters.IsNull = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_IsNull,None,Handle_Message_SequenceNodeOfSequenceOfPrinters)
Handle_Message_SequenceNodeOfSequenceOfPrinters.GetObject = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_GetObject,None,Handle_Message_SequenceNodeOfSequenceOfPrinters)
Handle_Message_SequenceNodeOfSequenceOfPrinters._kill_pointed = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfPrinters__kill_pointed,None,Handle_Message_SequenceNodeOfSequenceOfPrinters)
Handle_Message_SequenceNodeOfSequenceOfPrinters_swigregister = _Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_swigregister
Handle_Message_SequenceNodeOfSequenceOfPrinters_swigregister(Handle_Message_SequenceNodeOfSequenceOfPrinters)

def Handle_Message_SequenceNodeOfSequenceOfPrinters_DownCast(*args):
  return _Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_DownCast(*args)
Handle_Message_SequenceNodeOfSequenceOfPrinters_DownCast = _Message.Handle_Message_SequenceNodeOfSequenceOfPrinters_DownCast

class Message_SequenceNodeOfSequenceOfProgressScale(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Message_ProgressScale &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Message.Message_SequenceNodeOfSequenceOfProgressScale_swiginit(self,_Message.new_Message_SequenceNodeOfSequenceOfProgressScale(*args))
    def Value(self, *args):
        """
        :rtype: Message_ProgressScale

        """
        return _Message.Message_SequenceNodeOfSequenceOfProgressScale_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_SequenceNodeOfSequenceOfProgressScale self)"""
        return _Message.Message_SequenceNodeOfSequenceOfProgressScale__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_SequenceNodeOfSequenceOfProgressScale self) -> Handle_Message_SequenceNodeOfSequenceOfProgressScale"""
        return _Message.Message_SequenceNodeOfSequenceOfProgressScale_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_SequenceNodeOfSequenceOfProgressScale.Value = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfProgressScale_Value,None,Message_SequenceNodeOfSequenceOfProgressScale)
Message_SequenceNodeOfSequenceOfProgressScale._kill_pointed = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfProgressScale__kill_pointed,None,Message_SequenceNodeOfSequenceOfProgressScale)
Message_SequenceNodeOfSequenceOfProgressScale.GetHandle = new_instancemethod(_Message.Message_SequenceNodeOfSequenceOfProgressScale_GetHandle,None,Message_SequenceNodeOfSequenceOfProgressScale)
Message_SequenceNodeOfSequenceOfProgressScale_swigregister = _Message.Message_SequenceNodeOfSequenceOfProgressScale_swigregister
Message_SequenceNodeOfSequenceOfProgressScale_swigregister(Message_SequenceNodeOfSequenceOfProgressScale)

class Handle_Message_SequenceNodeOfSequenceOfProgressScale(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_swiginit(self,_Message.new_Handle_Message_SequenceNodeOfSequenceOfProgressScale(*args))
    DownCast = staticmethod(_Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_SequenceNodeOfSequenceOfProgressScale.Nullify = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_Nullify,None,Handle_Message_SequenceNodeOfSequenceOfProgressScale)
Handle_Message_SequenceNodeOfSequenceOfProgressScale.IsNull = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_IsNull,None,Handle_Message_SequenceNodeOfSequenceOfProgressScale)
Handle_Message_SequenceNodeOfSequenceOfProgressScale.GetObject = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_GetObject,None,Handle_Message_SequenceNodeOfSequenceOfProgressScale)
Handle_Message_SequenceNodeOfSequenceOfProgressScale._kill_pointed = new_instancemethod(_Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale__kill_pointed,None,Handle_Message_SequenceNodeOfSequenceOfProgressScale)
Handle_Message_SequenceNodeOfSequenceOfProgressScale_swigregister = _Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_swigregister
Handle_Message_SequenceNodeOfSequenceOfProgressScale_swigregister(Handle_Message_SequenceNodeOfSequenceOfProgressScale)

def Handle_Message_SequenceNodeOfSequenceOfProgressScale_DownCast(*args):
  return _Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_DownCast(*args)
Handle_Message_SequenceNodeOfSequenceOfProgressScale_DownCast = _Message.Handle_Message_SequenceNodeOfSequenceOfProgressScale_DownCast

class Message_SequenceOfPrinters(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Message.Message_SequenceOfPrinters_swiginit(self,_Message.new_Message_SequenceOfPrinters(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Message_SequenceOfPrinters &
        :rtype: Message_SequenceOfPrinters

        """
        return _Message.Message_SequenceOfPrinters_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Message_SequenceOfPrinters &
        :rtype: Message_SequenceOfPrinters

        """
        return _Message.Message_SequenceOfPrinters_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Message_Printer &
        :rtype: None

        :param S:
        :type S: Message_SequenceOfPrinters &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Message_Printer &
        :rtype: None

        :param S:
        :type S: Message_SequenceOfPrinters &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Message_Printer &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Message_SequenceOfPrinters &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Message_Printer &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Message_SequenceOfPrinters &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_Message_Printer

        """
        return _Message.Message_SequenceOfPrinters_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_Message_Printer

        """
        return _Message.Message_SequenceOfPrinters_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Message_SequenceOfPrinters &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Message_Printer

        """
        return _Message.Message_SequenceOfPrinters_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Message_Printer &
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Message_Printer

        """
        return _Message.Message_SequenceOfPrinters_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Message.Message_SequenceOfPrinters_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_SequenceOfPrinters.Clear = new_instancemethod(_Message.Message_SequenceOfPrinters_Clear,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Assign = new_instancemethod(_Message.Message_SequenceOfPrinters_Assign,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Set = new_instancemethod(_Message.Message_SequenceOfPrinters_Set,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Append = new_instancemethod(_Message.Message_SequenceOfPrinters_Append,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Prepend = new_instancemethod(_Message.Message_SequenceOfPrinters_Prepend,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.InsertBefore = new_instancemethod(_Message.Message_SequenceOfPrinters_InsertBefore,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.InsertAfter = new_instancemethod(_Message.Message_SequenceOfPrinters_InsertAfter,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.First = new_instancemethod(_Message.Message_SequenceOfPrinters_First,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Last = new_instancemethod(_Message.Message_SequenceOfPrinters_Last,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Split = new_instancemethod(_Message.Message_SequenceOfPrinters_Split,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Value = new_instancemethod(_Message.Message_SequenceOfPrinters_Value,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.SetValue = new_instancemethod(_Message.Message_SequenceOfPrinters_SetValue,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.ChangeValue = new_instancemethod(_Message.Message_SequenceOfPrinters_ChangeValue,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters.Remove = new_instancemethod(_Message.Message_SequenceOfPrinters_Remove,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters._kill_pointed = new_instancemethod(_Message.Message_SequenceOfPrinters__kill_pointed,None,Message_SequenceOfPrinters)
Message_SequenceOfPrinters_swigregister = _Message.Message_SequenceOfPrinters_swigregister
Message_SequenceOfPrinters_swigregister(Message_SequenceOfPrinters)

class Message_SequenceOfProgressScale(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Message.Message_SequenceOfProgressScale_swiginit(self,_Message.new_Message_SequenceOfProgressScale(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Message_SequenceOfProgressScale &
        :rtype: Message_SequenceOfProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Message_SequenceOfProgressScale &
        :rtype: Message_SequenceOfProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Message_ProgressScale &
        :rtype: None

        :param S:
        :type S: Message_SequenceOfProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Message_ProgressScale &
        :rtype: None

        :param S:
        :type S: Message_SequenceOfProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Message_ProgressScale &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Message_SequenceOfProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Message_ProgressScale &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Message_SequenceOfProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Message_ProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Message_ProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Message_SequenceOfProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Message_ProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Message_ProgressScale &
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Message_ProgressScale

        """
        return _Message.Message_SequenceOfProgressScale_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Message.Message_SequenceOfProgressScale_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_SequenceOfProgressScale.Clear = new_instancemethod(_Message.Message_SequenceOfProgressScale_Clear,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Assign = new_instancemethod(_Message.Message_SequenceOfProgressScale_Assign,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Set = new_instancemethod(_Message.Message_SequenceOfProgressScale_Set,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Append = new_instancemethod(_Message.Message_SequenceOfProgressScale_Append,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Prepend = new_instancemethod(_Message.Message_SequenceOfProgressScale_Prepend,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.InsertBefore = new_instancemethod(_Message.Message_SequenceOfProgressScale_InsertBefore,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.InsertAfter = new_instancemethod(_Message.Message_SequenceOfProgressScale_InsertAfter,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.First = new_instancemethod(_Message.Message_SequenceOfProgressScale_First,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Last = new_instancemethod(_Message.Message_SequenceOfProgressScale_Last,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Split = new_instancemethod(_Message.Message_SequenceOfProgressScale_Split,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Value = new_instancemethod(_Message.Message_SequenceOfProgressScale_Value,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.SetValue = new_instancemethod(_Message.Message_SequenceOfProgressScale_SetValue,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.ChangeValue = new_instancemethod(_Message.Message_SequenceOfProgressScale_ChangeValue,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale.Remove = new_instancemethod(_Message.Message_SequenceOfProgressScale_Remove,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale._kill_pointed = new_instancemethod(_Message.Message_SequenceOfProgressScale__kill_pointed,None,Message_SequenceOfProgressScale)
Message_SequenceOfProgressScale_swigregister = _Message.Message_SequenceOfProgressScale_swigregister
Message_SequenceOfProgressScale_swigregister(Message_SequenceOfProgressScale)

class Message_PrinterOStream(Message_Printer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor, defaulting to cout

        :param theTraceLevel: default value is Message_Info
        :type theTraceLevel: Message_Gravity
        :rtype: None

        * Create printer for output to a specified file. The option theDoAppend specifies whether file should be appended or rewritten. For specific file names (cout, cerr) standard streams are used

        :param theFileName:
        :type theFileName: char *
        :param theDoAppend:
        :type theDoAppend: bool
        :param theTraceLevel: default value is Message_Info
        :type theTraceLevel: Message_Gravity
        :rtype: None

        """
        _Message.Message_PrinterOStream_swiginit(self,_Message.new_Message_PrinterOStream(*args))
    def Close(self, *args):
        """
        * Flushes the output stream and destroys it if it has been specified externally with option doFree (or if it is internal file stream)

        :rtype: None

        """
        return _Message.Message_PrinterOStream_Close(self, *args)

    def GetTraceLevel(self, *args):
        """
        * Return trace level used for filtering messages; messages with lover gravity will be ignored.

        :rtype: Message_Gravity

        """
        return _Message.Message_PrinterOStream_GetTraceLevel(self, *args)

    def SetTraceLevel(self, *args):
        """
        * Set trace level used for filtering messages. By default, trace level is Message_Info, so that all messages are output

        :param theTraceLevel:
        :type theTraceLevel: Message_Gravity
        :rtype: None

        """
        return _Message.Message_PrinterOStream_SetTraceLevel(self, *args)

    def GetUseUtf8(self, *args):
        """
        * Returns option to convert non-Ascii symbols to UTF8 encoding

        :rtype: bool

        """
        return _Message.Message_PrinterOStream_GetUseUtf8(self, *args)

    def SetUseUtf8(self, *args):
        """
        * Sets option to convert non-Ascii symbols to UTF8 encoding

        :param useUtf8:
        :type useUtf8: bool
        :rtype: None

        """
        return _Message.Message_PrinterOStream_SetUseUtf8(self, *args)

    def GetStream(self, *args):
        """
        * Returns reference to the output stream

        :rtype: Standard_OStream

        """
        return _Message.Message_PrinterOStream_GetStream(self, *args)

    def Send(self, *args):
        """
        * Puts a message to the current stream if its gravity is equal or greater to the trace level set by SetTraceLevel()

        :param theString:
        :type theString: char *
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: void

        * Puts a message to the current stream if its gravity is equal or greater to the trace level set by SetTraceLevel()

        :param theString:
        :type theString: TCollection_AsciiString &
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: void

        * Puts a message to the current stream if its gravity is equal or greater to the trace level set by SetTraceLevel() Non-Ascii symbols are converted to UTF-8 if UseUtf8 option is set, else replaced by symbols '?'

        :param theString:
        :type theString: TCollection_ExtendedString &
        :param theGravity:
        :type theGravity: Message_Gravity
        :param putEndl: default value is Standard_True
        :type putEndl: bool
        :rtype: void

        """
        return _Message.Message_PrinterOStream_Send(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Message_PrinterOStream self)"""
        return _Message.Message_PrinterOStream__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Message_PrinterOStream self) -> Handle_Message_PrinterOStream"""
        return _Message.Message_PrinterOStream_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Message_PrinterOStream.Close = new_instancemethod(_Message.Message_PrinterOStream_Close,None,Message_PrinterOStream)
Message_PrinterOStream.GetTraceLevel = new_instancemethod(_Message.Message_PrinterOStream_GetTraceLevel,None,Message_PrinterOStream)
Message_PrinterOStream.SetTraceLevel = new_instancemethod(_Message.Message_PrinterOStream_SetTraceLevel,None,Message_PrinterOStream)
Message_PrinterOStream.GetUseUtf8 = new_instancemethod(_Message.Message_PrinterOStream_GetUseUtf8,None,Message_PrinterOStream)
Message_PrinterOStream.SetUseUtf8 = new_instancemethod(_Message.Message_PrinterOStream_SetUseUtf8,None,Message_PrinterOStream)
Message_PrinterOStream.GetStream = new_instancemethod(_Message.Message_PrinterOStream_GetStream,None,Message_PrinterOStream)
Message_PrinterOStream.Send = new_instancemethod(_Message.Message_PrinterOStream_Send,None,Message_PrinterOStream)
Message_PrinterOStream._kill_pointed = new_instancemethod(_Message.Message_PrinterOStream__kill_pointed,None,Message_PrinterOStream)
Message_PrinterOStream.GetHandle = new_instancemethod(_Message.Message_PrinterOStream_GetHandle,None,Message_PrinterOStream)
Message_PrinterOStream_swigregister = _Message.Message_PrinterOStream_swigregister
Message_PrinterOStream_swigregister(Message_PrinterOStream)

class Handle_Message_PrinterOStream(Handle_Message_Printer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Message.Handle_Message_PrinterOStream_swiginit(self,_Message.new_Handle_Message_PrinterOStream(*args))
    DownCast = staticmethod(_Message.Handle_Message_PrinterOStream_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Message_PrinterOStream.Nullify = new_instancemethod(_Message.Handle_Message_PrinterOStream_Nullify,None,Handle_Message_PrinterOStream)
Handle_Message_PrinterOStream.IsNull = new_instancemethod(_Message.Handle_Message_PrinterOStream_IsNull,None,Handle_Message_PrinterOStream)
Handle_Message_PrinterOStream.GetObject = new_instancemethod(_Message.Handle_Message_PrinterOStream_GetObject,None,Handle_Message_PrinterOStream)
Handle_Message_PrinterOStream._kill_pointed = new_instancemethod(_Message.Handle_Message_PrinterOStream__kill_pointed,None,Handle_Message_PrinterOStream)
Handle_Message_PrinterOStream_swigregister = _Message.Handle_Message_PrinterOStream_swigregister
Handle_Message_PrinterOStream_swigregister(Handle_Message_PrinterOStream)

def Handle_Message_PrinterOStream_DownCast(*args):
  return _Message.Handle_Message_PrinterOStream_DownCast(*args)
Handle_Message_PrinterOStream_DownCast = _Message.Handle_Message_PrinterOStream_DownCast



