# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntSurf.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntSurf', [dirname(__file__)])
        except ImportError:
            import _IntSurf
            return _IntSurf
        if fp is not None:
            try:
                _mod = imp.load_module('_IntSurf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IntSurf = swig_import_helper()
    del swig_import_helper
else:
    import _IntSurf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntSurf.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntSurf.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntSurf.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntSurf.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntSurf.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntSurf.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntSurf.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntSurf.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntSurf.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntSurf.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntSurf.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntSurf.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntSurf.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntSurf.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntSurf.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntSurf.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntSurf.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntSurf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.gp
import OCC.Standard
import OCC.MMgt
import OCC.TCollection
import OCC.GeomAbs

_IntSurf.IntSurf_Inside_swigconstant(_IntSurf)
IntSurf_Inside = _IntSurf.IntSurf_Inside

_IntSurf.IntSurf_Outside_swigconstant(_IntSurf)
IntSurf_Outside = _IntSurf.IntSurf_Outside

_IntSurf.IntSurf_Unknown_swigconstant(_IntSurf)
IntSurf_Unknown = _IntSurf.IntSurf_Unknown

_IntSurf.IntSurf_In_swigconstant(_IntSurf)
IntSurf_In = _IntSurf.IntSurf_In

_IntSurf.IntSurf_Out_swigconstant(_IntSurf)
IntSurf_Out = _IntSurf.IntSurf_Out

_IntSurf.IntSurf_Touch_swigconstant(_IntSurf)
IntSurf_Touch = _IntSurf.IntSurf_Touch

_IntSurf.IntSurf_Undecided_swigconstant(_IntSurf)
IntSurf_Undecided = _IntSurf.IntSurf_Undecided
class intsurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeTransition(*args):
        """
        * Computes the transition of the intersection point between the two lines. TgFirst is the tangent vector of the first line. TgSecond is the tangent vector of the second line. Normal is the direction used to orientate the cross product TgFirst^TgSecond. TFirst is the transition of the point on the first line. TSecond is the transition of the point on the second line.

        :param TgFirst:
        :type TgFirst: gp_Vec
        :param TgSecond:
        :type TgSecond: gp_Vec
        :param Normal:
        :type Normal: gp_Dir
        :param TFirst:
        :type TFirst: IntSurf_Transition &
        :param TSecond:
        :type TSecond: IntSurf_Transition &
        :rtype: void

        """
        return _IntSurf.intsurf_MakeTransition(*args)

    MakeTransition = staticmethod(MakeTransition)

    def __init__(self):
        _IntSurf.intsurf_swiginit(self, _IntSurf.new_intsurf())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


intsurf._kill_pointed = new_instancemethod(_IntSurf.intsurf__kill_pointed, None, intsurf)
intsurf_swigregister = _IntSurf.intsurf_swigregister
intsurf_swigregister(intsurf)

def intsurf_MakeTransition(*args):
    """
    * Computes the transition of the intersection point between the two lines. TgFirst is the tangent vector of the first line. TgSecond is the tangent vector of the second line. Normal is the direction used to orientate the cross product TgFirst^TgSecond. TFirst is the transition of the point on the first line. TSecond is the transition of the point on the second line.

    :param TgFirst:
    :type TgFirst: gp_Vec
    :param TgSecond:
    :type TgSecond: gp_Vec
    :param Normal:
    :type Normal: gp_Dir
    :param TFirst:
    :type TFirst: IntSurf_Transition &
    :param TSecond:
    :type TSecond: IntSurf_Transition &
    :rtype: void

    """
    return _IntSurf.intsurf_MakeTransition(*args)

class IntSurf_Couple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Index1:
        :type Index1: int
        :param Index2:
        :type Index2: int
        :rtype: None

        """
        _IntSurf.IntSurf_Couple_swiginit(self, _IntSurf.new_IntSurf_Couple(*args))

    def First(self, *args):
        """
        * returns the first element

        :rtype: int

        """
        return _IntSurf.IntSurf_Couple_First(self, *args)


    def Second(self, *args):
        """
        * returns the Second element

        :rtype: int

        """
        return _IntSurf.IntSurf_Couple_Second(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_Couple.First = new_instancemethod(_IntSurf.IntSurf_Couple_First, None, IntSurf_Couple)
IntSurf_Couple.Second = new_instancemethod(_IntSurf.IntSurf_Couple_Second, None, IntSurf_Couple)
IntSurf_Couple._kill_pointed = new_instancemethod(_IntSurf.IntSurf_Couple__kill_pointed, None, IntSurf_Couple)
IntSurf_Couple_swigregister = _IntSurf.IntSurf_Couple_swigregister
IntSurf_Couple_swigregister(IntSurf_Couple)

class IntSurf_InteriorPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Direc:
        :type Direc: gp_Vec
        :param Direc2d:
        :type Direc2d: gp_Vec2d
        :rtype: None

        """
        _IntSurf.IntSurf_InteriorPoint_swiginit(self, _IntSurf.new_IntSurf_InteriorPoint(*args))

    def SetValue(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Direc:
        :type Direc: gp_Vec
        :param Direc2d:
        :type Direc2d: gp_Vec2d
        :rtype: None

        """
        return _IntSurf.IntSurf_InteriorPoint_SetValue(self, *args)


    def Value(self, *args):
        """
        * Returns the 3d coordinates of the interior point.

        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_InteriorPoint_Value(self, *args)


    def Parameters(self, *args):
        """
        * Returns the parameters of the interior point on the parametric surface.

        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_InteriorPoint_Parameters(self, *args)


    def UParameter(self, *args):
        """
        * Returns the first parameter of the interior point on the parametric surface.

        :rtype: float

        """
        return _IntSurf.IntSurf_InteriorPoint_UParameter(self, *args)


    def VParameter(self, *args):
        """
        * Returns the second parameter of the interior point on the parametric surface.

        :rtype: float

        """
        return _IntSurf.IntSurf_InteriorPoint_VParameter(self, *args)


    def Direction(self, *args):
        """
        * Returns the tangent at the intersection in 3d space associated to the interior point.

        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_InteriorPoint_Direction(self, *args)


    def Direction2d(self, *args):
        """
        * Returns the tangent at the intersection in the parametric space of the parametric surface.

        :rtype: gp_Vec2d

        """
        return _IntSurf.IntSurf_InteriorPoint_Direction2d(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_InteriorPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_SetValue, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Value = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Value, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Parameters = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Parameters, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.UParameter = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_UParameter, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.VParameter = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_VParameter, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Direction = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Direction, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Direction2d = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Direction2d, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_InteriorPoint__kill_pointed, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint_swigregister = _IntSurf.IntSurf_InteriorPoint_swigregister
IntSurf_InteriorPoint_swigregister(IntSurf_InteriorPoint)

class IntSurf_InteriorPointTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value3d(*args):
        """
        * Returns the 3d coordinates of the starting point.

        :param PStart:
        :type PStart: IntSurf_InteriorPoint &
        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_InteriorPointTool_Value3d(*args)

    Value3d = staticmethod(Value3d)

    def Value2d(*args):
        """
        * Returns the <U,V> parameters which are associated with <P> it's the parameters which start the marching algorithm

        :param PStart:
        :type PStart: IntSurf_InteriorPoint &
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: void

        """
        return _IntSurf.IntSurf_InteriorPointTool_Value2d(*args)

    Value2d = staticmethod(Value2d)

    def Direction3d(*args):
        """
        * returns the tangent at the intersectin in 3d space associated to <P>

        :param PStart:
        :type PStart: IntSurf_InteriorPoint &
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_InteriorPointTool_Direction3d(*args)

    Direction3d = staticmethod(Direction3d)

    def Direction2d(*args):
        """
        * returns the tangent at the intersectin in the parametric space of the parametrized surface.This tangent is associated to the value2d

        :param PStart:
        :type PStart: IntSurf_InteriorPoint &
        :rtype: gp_Dir2d

        """
        return _IntSurf.IntSurf_InteriorPointTool_Direction2d(*args)

    Direction2d = staticmethod(Direction2d)

    def __init__(self):
        _IntSurf.IntSurf_InteriorPointTool_swiginit(self, _IntSurf.new_IntSurf_InteriorPointTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_InteriorPointTool._kill_pointed = new_instancemethod(_IntSurf.IntSurf_InteriorPointTool__kill_pointed, None, IntSurf_InteriorPointTool)
IntSurf_InteriorPointTool_swigregister = _IntSurf.IntSurf_InteriorPointTool_swigregister
IntSurf_InteriorPointTool_swigregister(IntSurf_InteriorPointTool)

def IntSurf_InteriorPointTool_Value3d(*args):
    """
    * Returns the 3d coordinates of the starting point.

    :param PStart:
    :type PStart: IntSurf_InteriorPoint &
    :rtype: gp_Pnt

    """
    return _IntSurf.IntSurf_InteriorPointTool_Value3d(*args)

def IntSurf_InteriorPointTool_Value2d(*args):
    """
    * Returns the <U,V> parameters which are associated with <P> it's the parameters which start the marching algorithm

    :param PStart:
    :type PStart: IntSurf_InteriorPoint &
    :param U:
    :type U: float &
    :param V:
    :type V: float &
    :rtype: void

    """
    return _IntSurf.IntSurf_InteriorPointTool_Value2d(*args)

def IntSurf_InteriorPointTool_Direction3d(*args):
    """
    * returns the tangent at the intersectin in 3d space associated to <P>

    :param PStart:
    :type PStart: IntSurf_InteriorPoint &
    :rtype: gp_Vec

    """
    return _IntSurf.IntSurf_InteriorPointTool_Direction3d(*args)

def IntSurf_InteriorPointTool_Direction2d(*args):
    """
    * returns the tangent at the intersectin in the parametric space of the parametrized surface.This tangent is associated to the value2d

    :param PStart:
    :type PStart: IntSurf_InteriorPoint &
    :rtype: gp_Dir2d

    """
    return _IntSurf.IntSurf_InteriorPointTool_Direction2d(*args)

class IntSurf_LineOn2S(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theAllocator: default value is 0
        :type theAllocator: IntSurf_Allocator &
        :rtype: None

        """
        _IntSurf.IntSurf_LineOn2S_swiginit(self, _IntSurf.new_IntSurf_LineOn2S(*args))

    def Add(self, *args):
        """
        * Adds a point in the line.

        :param P:
        :type P: IntSurf_PntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_Add(self, *args)


    def NbPoints(self, *args):
        """
        * Returns the number of points in the line.

        :rtype: int

        """
        return _IntSurf.IntSurf_LineOn2S_NbPoints(self, *args)


    def Reverse(self, *args):
        """
        * Reverses the order of points of the line.

        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_Reverse(self, *args)


    def Split(self, *args):
        """
        * Keeps in <self> the points 1 to Index-1, and returns the items Index to the end.

        :param Index:
        :type Index: int
        :rtype: Handle_IntSurf_LineOn2S

        """
        return _IntSurf.IntSurf_LineOn2S_Split(self, *args)


    def Value(self, *args):
        """
        * Returns the point of range Index in the line.

        :param Index:
        :type Index: int
        :rtype: IntSurf_PntOn2S

        * Replaces the point of range Index in the line.

        :param Index:
        :type Index: int
        :param P:
        :type P: IntSurf_PntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_Value(self, *args)


    def SetUV(self, *args):
        """
        * Sets the parametric coordinates on one of the surfaces of the point of range Index in the line.

        :param Index:
        :type Index: int
        :param OnFirst:
        :type OnFirst: bool
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_SetUV(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_Clear(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: int
        :param P:
        :type P: IntSurf_PntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_InsertBefore(self, *args)


    def RemovePoint(self, *args):
        """
        :param I:
        :type I: int
        :rtype: None

        """
        return _IntSurf.IntSurf_LineOn2S_RemovePoint(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntSurf_LineOn2S self)"""
        return _IntSurf.IntSurf_LineOn2S__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntSurf_LineOn2S self) -> Handle_IntSurf_LineOn2S"""
        return _IntSurf.IntSurf_LineOn2S_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_LineOn2S.Add = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Add, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.NbPoints = new_instancemethod(_IntSurf.IntSurf_LineOn2S_NbPoints, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Reverse = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Reverse, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Split = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Split, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Value = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Value, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.SetUV = new_instancemethod(_IntSurf.IntSurf_LineOn2S_SetUV, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Clear = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Clear, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.InsertBefore = new_instancemethod(_IntSurf.IntSurf_LineOn2S_InsertBefore, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.RemovePoint = new_instancemethod(_IntSurf.IntSurf_LineOn2S_RemovePoint, None, IntSurf_LineOn2S)
IntSurf_LineOn2S._kill_pointed = new_instancemethod(_IntSurf.IntSurf_LineOn2S__kill_pointed, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.GetHandle = new_instancemethod(_IntSurf.IntSurf_LineOn2S_GetHandle, None, IntSurf_LineOn2S)
IntSurf_LineOn2S_swigregister = _IntSurf.IntSurf_LineOn2S_swigregister
IntSurf_LineOn2S_swigregister(IntSurf_LineOn2S)

class Handle_IntSurf_LineOn2S(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.Handle_IntSurf_LineOn2S_swiginit(self, _IntSurf.new_Handle_IntSurf_LineOn2S(*args))
    DownCast = staticmethod(_IntSurf.Handle_IntSurf_LineOn2S_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntSurf_LineOn2S.Nullify = new_instancemethod(_IntSurf.Handle_IntSurf_LineOn2S_Nullify, None, Handle_IntSurf_LineOn2S)
Handle_IntSurf_LineOn2S.IsNull = new_instancemethod(_IntSurf.Handle_IntSurf_LineOn2S_IsNull, None, Handle_IntSurf_LineOn2S)
Handle_IntSurf_LineOn2S.GetObject = new_instancemethod(_IntSurf.Handle_IntSurf_LineOn2S_GetObject, None, Handle_IntSurf_LineOn2S)
Handle_IntSurf_LineOn2S._kill_pointed = new_instancemethod(_IntSurf.Handle_IntSurf_LineOn2S__kill_pointed, None, Handle_IntSurf_LineOn2S)
Handle_IntSurf_LineOn2S_swigregister = _IntSurf.Handle_IntSurf_LineOn2S_swigregister
Handle_IntSurf_LineOn2S_swigregister(Handle_IntSurf_LineOn2S)

def Handle_IntSurf_LineOn2S_DownCast(AnObject):
    return _IntSurf.Handle_IntSurf_LineOn2S_DownCast(AnObject)
Handle_IntSurf_LineOn2S_DownCast = _IntSurf.Handle_IntSurf_LineOn2S_DownCast

class IntSurf_ListIteratorOfListOfPntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListIteratorOfListOfPntOn2S(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: IntSurf_PntOn2S

        """
        return _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_ListIteratorOfListOfPntOn2S.Initialize = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Initialize, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.More = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_More, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.Next = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Next, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Value, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S._kill_pointed = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S__kill_pointed, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S_swigregister = _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swigregister
IntSurf_ListIteratorOfListOfPntOn2S_swigregister(IntSurf_ListIteratorOfListOfPntOn2S)

class IntSurf_ListNodeOfListOfPntOn2S(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntSurf_PntOn2S &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _IntSurf.IntSurf_ListNodeOfListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListNodeOfListOfPntOn2S(*args))

    def Value(self, *args):
        """
        :rtype: IntSurf_PntOn2S

        """
        return _IntSurf.IntSurf_ListNodeOfListOfPntOn2S_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntSurf_ListNodeOfListOfPntOn2S self)"""
        return _IntSurf.IntSurf_ListNodeOfListOfPntOn2S__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntSurf_ListNodeOfListOfPntOn2S self) -> Handle_IntSurf_ListNodeOfListOfPntOn2S"""
        return _IntSurf.IntSurf_ListNodeOfListOfPntOn2S_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_ListNodeOfListOfPntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_ListNodeOfListOfPntOn2S_Value, None, IntSurf_ListNodeOfListOfPntOn2S)
IntSurf_ListNodeOfListOfPntOn2S._kill_pointed = new_instancemethod(_IntSurf.IntSurf_ListNodeOfListOfPntOn2S__kill_pointed, None, IntSurf_ListNodeOfListOfPntOn2S)
IntSurf_ListNodeOfListOfPntOn2S.GetHandle = new_instancemethod(_IntSurf.IntSurf_ListNodeOfListOfPntOn2S_GetHandle, None, IntSurf_ListNodeOfListOfPntOn2S)
IntSurf_ListNodeOfListOfPntOn2S_swigregister = _IntSurf.IntSurf_ListNodeOfListOfPntOn2S_swigregister
IntSurf_ListNodeOfListOfPntOn2S_swigregister(IntSurf_ListNodeOfListOfPntOn2S)

class Handle_IntSurf_ListNodeOfListOfPntOn2S(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_swiginit(self, _IntSurf.new_Handle_IntSurf_ListNodeOfListOfPntOn2S(*args))
    DownCast = staticmethod(_IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntSurf_ListNodeOfListOfPntOn2S.Nullify = new_instancemethod(_IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_Nullify, None, Handle_IntSurf_ListNodeOfListOfPntOn2S)
Handle_IntSurf_ListNodeOfListOfPntOn2S.IsNull = new_instancemethod(_IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_IsNull, None, Handle_IntSurf_ListNodeOfListOfPntOn2S)
Handle_IntSurf_ListNodeOfListOfPntOn2S.GetObject = new_instancemethod(_IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_GetObject, None, Handle_IntSurf_ListNodeOfListOfPntOn2S)
Handle_IntSurf_ListNodeOfListOfPntOn2S._kill_pointed = new_instancemethod(_IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S__kill_pointed, None, Handle_IntSurf_ListNodeOfListOfPntOn2S)
Handle_IntSurf_ListNodeOfListOfPntOn2S_swigregister = _IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_swigregister
Handle_IntSurf_ListNodeOfListOfPntOn2S_swigregister(Handle_IntSurf_ListNodeOfListOfPntOn2S)

def Handle_IntSurf_ListNodeOfListOfPntOn2S_DownCast(AnObject):
    return _IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_DownCast(AnObject)
Handle_IntSurf_ListNodeOfListOfPntOn2S_DownCast = _IntSurf.Handle_IntSurf_ListNodeOfListOfPntOn2S_DownCast

class IntSurf_ListOfPntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntSurf.IntSurf_ListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListOfPntOn2S(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: IntSurf_PntOn2S &
        :rtype: None

        :param I:
        :type I: IntSurf_PntOn2S &
        :param theIt:
        :type theIt: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: IntSurf_PntOn2S &
        :rtype: None

        :param I:
        :type I: IntSurf_PntOn2S &
        :param theIt:
        :type theIt: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Append(self, *args)


    def First(self, *args):
        """
        :rtype: IntSurf_PntOn2S

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntSurf_PntOn2S

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: IntSurf_PntOn2S &
        :param It:
        :type It: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :param It:
        :type It: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: IntSurf_PntOn2S &
        :param It:
        :type It: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        :param Other:
        :type Other: IntSurf_ListOfPntOn2S &
        :param It:
        :type It: IntSurf_ListIteratorOfListOfPntOn2S &
        :rtype: None

        """
        return _IntSurf.IntSurf_ListOfPntOn2S_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_ListOfPntOn2S.Assign = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Assign, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Set = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Set, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Extent = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Extent, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Clear = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Clear, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.IsEmpty = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_IsEmpty, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Prepend = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Prepend, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Append = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Append, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.First = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_First, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Last = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Last, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.RemoveFirst = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_RemoveFirst, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Remove = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Remove, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.InsertBefore = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_InsertBefore, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.InsertAfter = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_InsertAfter, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S._kill_pointed = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S__kill_pointed, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S_swigregister = _IntSurf.IntSurf_ListOfPntOn2S_swigregister
IntSurf_ListOfPntOn2S_swigregister(IntSurf_ListOfPntOn2S)

class IntSurf_PathPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        _IntSurf.IntSurf_PathPoint_swiginit(self, _IntSurf.new_IntSurf_PathPoint(*args))

    def SetValue(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_SetValue(self, *args)


    def AddUV(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_AddUV(self, *args)


    def SetDirections(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :param D:
        :type D: gp_Dir2d
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_SetDirections(self, *args)


    def SetTangency(self, *args):
        """
        :param Tang:
        :type Tang: bool
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_SetTangency(self, *args)


    def SetPassing(self, *args):
        """
        :param Pass:
        :type Pass: bool
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_SetPassing(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_PathPoint_Value(self, *args)


    def Value2d(self, *args):
        """
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_Value2d(self, *args)


    def IsPassingPnt(self, *args):
        """
        :rtype: bool

        """
        return _IntSurf.IntSurf_PathPoint_IsPassingPnt(self, *args)


    def IsTangent(self, *args):
        """
        :rtype: bool

        """
        return _IntSurf.IntSurf_PathPoint_IsTangent(self, *args)


    def Direction3d(self, *args):
        """
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_PathPoint_Direction3d(self, *args)


    def Direction2d(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _IntSurf.IntSurf_PathPoint_Direction2d(self, *args)


    def Multiplicity(self, *args):
        """
        :rtype: int

        """
        return _IntSurf.IntSurf_PathPoint_Multiplicity(self, *args)


    def Parameters(self, *args):
        """
        :param Index:
        :type Index: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_PathPoint_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_PathPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetValue, None, IntSurf_PathPoint)
IntSurf_PathPoint.AddUV = new_instancemethod(_IntSurf.IntSurf_PathPoint_AddUV, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetDirections = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetDirections, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetTangency = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetTangency, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetPassing = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetPassing, None, IntSurf_PathPoint)
IntSurf_PathPoint.Value = new_instancemethod(_IntSurf.IntSurf_PathPoint_Value, None, IntSurf_PathPoint)
IntSurf_PathPoint.Value2d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Value2d, None, IntSurf_PathPoint)
IntSurf_PathPoint.IsPassingPnt = new_instancemethod(_IntSurf.IntSurf_PathPoint_IsPassingPnt, None, IntSurf_PathPoint)
IntSurf_PathPoint.IsTangent = new_instancemethod(_IntSurf.IntSurf_PathPoint_IsTangent, None, IntSurf_PathPoint)
IntSurf_PathPoint.Direction3d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Direction3d, None, IntSurf_PathPoint)
IntSurf_PathPoint.Direction2d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Direction2d, None, IntSurf_PathPoint)
IntSurf_PathPoint.Multiplicity = new_instancemethod(_IntSurf.IntSurf_PathPoint_Multiplicity, None, IntSurf_PathPoint)
IntSurf_PathPoint.Parameters = new_instancemethod(_IntSurf.IntSurf_PathPoint_Parameters, None, IntSurf_PathPoint)
IntSurf_PathPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_PathPoint__kill_pointed, None, IntSurf_PathPoint)
IntSurf_PathPoint_swigregister = _IntSurf.IntSurf_PathPoint_swigregister
IntSurf_PathPoint_swigregister(IntSurf_PathPoint)

class IntSurf_PathPointTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value3d(*args):
        """
        * Returns the 3d coordinates of the starting point.

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_PathPointTool_Value3d(*args)

    Value3d = staticmethod(Value3d)

    def Value2d(*args):
        """
        * Returns the <U, V> parameters which are associated with <P> it's the parameters which start the marching algorithm

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: void

        """
        return _IntSurf.IntSurf_PathPointTool_Value2d(*args)

    Value2d = staticmethod(Value2d)

    def IsPassingPnt(*args):
        """
        * Returns True if the point is a point on a non-oriented arc, which means that the intersection line does not stop at such a point but just go through such a point. IsPassingPnt is True when IsOnArc is True

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: bool

        """
        return _IntSurf.IntSurf_PathPointTool_IsPassingPnt(*args)

    IsPassingPnt = staticmethod(IsPassingPnt)

    def IsTangent(*args):
        """
        * Returns True if the surfaces are tangent at this point. IsTangent can be True when IsOnArc is True if IsPassingPnt is True and IsTangent is True,this point is a stopped point.

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: bool

        """
        return _IntSurf.IntSurf_PathPointTool_IsTangent(*args)

    IsTangent = staticmethod(IsTangent)

    def Direction3d(*args):
        """
        * returns the tangent at the intersection in 3d space associated to <P>  an exception is raised if IsTangent is true.

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_PathPointTool_Direction3d(*args)

    Direction3d = staticmethod(Direction3d)

    def Direction2d(*args):
        """
        * returns the tangent at the intersection in the parametric space of the parametrized surface.This tangent is associated to the value2d la tangente a un sens signifiant (indique le sens de chemin ement) an exception is raised if IsTangent is true.

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: gp_Dir2d

        """
        return _IntSurf.IntSurf_PathPointTool_Direction2d(*args)

    Direction2d = staticmethod(Direction2d)

    def Multiplicity(*args):
        """
        * Returns the multiplicity of the point i-e the number of auxillar parameters associated to the point which the principal parameters are given by Value2d

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :rtype: int

        """
        return _IntSurf.IntSurf_PathPointTool_Multiplicity(*args)

    Multiplicity = staticmethod(Multiplicity)

    def Parameters(*args):
        """
        * Parametric coordinates associated to the multiplicity. An exception is raised if Mult<=0 or Mult>multiplicity.

        :param PStart:
        :type PStart: IntSurf_PathPoint &
        :param Mult:
        :type Mult: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: void

        """
        return _IntSurf.IntSurf_PathPointTool_Parameters(*args)

    Parameters = staticmethod(Parameters)

    def __init__(self):
        _IntSurf.IntSurf_PathPointTool_swiginit(self, _IntSurf.new_IntSurf_PathPointTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_PathPointTool._kill_pointed = new_instancemethod(_IntSurf.IntSurf_PathPointTool__kill_pointed, None, IntSurf_PathPointTool)
IntSurf_PathPointTool_swigregister = _IntSurf.IntSurf_PathPointTool_swigregister
IntSurf_PathPointTool_swigregister(IntSurf_PathPointTool)

def IntSurf_PathPointTool_Value3d(*args):
    """
    * Returns the 3d coordinates of the starting point.

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: gp_Pnt

    """
    return _IntSurf.IntSurf_PathPointTool_Value3d(*args)

def IntSurf_PathPointTool_Value2d(*args):
    """
    * Returns the <U, V> parameters which are associated with <P> it's the parameters which start the marching algorithm

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :param U:
    :type U: float &
    :param V:
    :type V: float &
    :rtype: void

    """
    return _IntSurf.IntSurf_PathPointTool_Value2d(*args)

def IntSurf_PathPointTool_IsPassingPnt(*args):
    """
    * Returns True if the point is a point on a non-oriented arc, which means that the intersection line does not stop at such a point but just go through such a point. IsPassingPnt is True when IsOnArc is True

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: bool

    """
    return _IntSurf.IntSurf_PathPointTool_IsPassingPnt(*args)

def IntSurf_PathPointTool_IsTangent(*args):
    """
    * Returns True if the surfaces are tangent at this point. IsTangent can be True when IsOnArc is True if IsPassingPnt is True and IsTangent is True,this point is a stopped point.

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: bool

    """
    return _IntSurf.IntSurf_PathPointTool_IsTangent(*args)

def IntSurf_PathPointTool_Direction3d(*args):
    """
    * returns the tangent at the intersection in 3d space associated to <P>  an exception is raised if IsTangent is true.

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: gp_Vec

    """
    return _IntSurf.IntSurf_PathPointTool_Direction3d(*args)

def IntSurf_PathPointTool_Direction2d(*args):
    """
    * returns the tangent at the intersection in the parametric space of the parametrized surface.This tangent is associated to the value2d la tangente a un sens signifiant (indique le sens de chemin ement) an exception is raised if IsTangent is true.

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: gp_Dir2d

    """
    return _IntSurf.IntSurf_PathPointTool_Direction2d(*args)

def IntSurf_PathPointTool_Multiplicity(*args):
    """
    * Returns the multiplicity of the point i-e the number of auxillar parameters associated to the point which the principal parameters are given by Value2d

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :rtype: int

    """
    return _IntSurf.IntSurf_PathPointTool_Multiplicity(*args)

def IntSurf_PathPointTool_Parameters(*args):
    """
    * Parametric coordinates associated to the multiplicity. An exception is raised if Mult<=0 or Mult>multiplicity.

    :param PStart:
    :type PStart: IntSurf_PathPoint &
    :param Mult:
    :type Mult: int
    :param U:
    :type U: float &
    :param V:
    :type V: float &
    :rtype: void

    """
    return _IntSurf.IntSurf_PathPointTool_Parameters(*args)

class IntSurf_PntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _IntSurf.IntSurf_PntOn2S_swiginit(self, _IntSurf.new_IntSurf_PntOn2S(*args))

    def SetValue(self, *args):
        """
        * Sets the value of the point in 3d space.

        :param Pt:
        :type Pt: gp_Pnt
        :rtype: None

        * Sets the values of the point in 3d space, and in the parametric space of one of the surface.

        :param Pt:
        :type Pt: gp_Pnt
        :param OnFirst:
        :type OnFirst: bool
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        * Sets the values of the point in 3d space, and in the parametric space of each surface.

        :param Pt:
        :type Pt: gp_Pnt
        :param U1:
        :type U1: float
        :param V1:
        :type V1: float
        :param U2:
        :type U2: float
        :param V2:
        :type V2: float
        :rtype: None

        * Set the values of the point in the parametric space of one of the surface.

        :param OnFirst:
        :type OnFirst: bool
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        * Set the values of the point in the parametric space of one of the surface.

        :param U1:
        :type U1: float
        :param V1:
        :type V1: float
        :param U2:
        :type U2: float
        :param V2:
        :type V2: float
        :rtype: None

        """
        return _IntSurf.IntSurf_PntOn2S_SetValue(self, *args)


    def Value(self, *args):
        """
        * Returns the point in 3d space.

        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_PntOn2S_Value(self, *args)


    def ParametersOnS1(self, *args):
        """
        * Returns the parameters of the point on the first surface.

        :param U1:
        :type U1: float &
        :param V1:
        :type V1: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_PntOn2S_ParametersOnS1(self, *args)


    def ParametersOnS2(self, *args):
        """
        * Returns the parameters of the point on the second surface.

        :param U2:
        :type U2: float &
        :param V2:
        :type V2: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_PntOn2S_ParametersOnS2(self, *args)


    def Parameters(self, *args):
        """
        * Returns the parameters of the point on both surfaces.

        :param U1:
        :type U1: float &
        :param V1:
        :type V1: float &
        :param U2:
        :type U2: float &
        :param V2:
        :type V2: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_PntOn2S_Parameters(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_PntOn2S.SetValue = new_instancemethod(_IntSurf.IntSurf_PntOn2S_SetValue, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_PntOn2S_Value, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ParametersOnS1 = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ParametersOnS1, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ParametersOnS2 = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ParametersOnS2, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.Parameters = new_instancemethod(_IntSurf.IntSurf_PntOn2S_Parameters, None, IntSurf_PntOn2S)
IntSurf_PntOn2S._kill_pointed = new_instancemethod(_IntSurf.IntSurf_PntOn2S__kill_pointed, None, IntSurf_PntOn2S)
IntSurf_PntOn2S_swigregister = _IntSurf.IntSurf_PntOn2S_swigregister
IntSurf_PntOn2S_swigregister(IntSurf_PntOn2S)

class IntSurf_Quadric(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pln
        :rtype: None

        :param C:
        :type C: gp_Cylinder
        :rtype: None

        :param S:
        :type S: gp_Sphere
        :rtype: None

        :param C:
        :type C: gp_Cone
        :rtype: None

        :param T:
        :type T: gp_Torus
        :rtype: None

        """
        _IntSurf.IntSurf_Quadric_swiginit(self, _IntSurf.new_IntSurf_Quadric(*args))

    def SetValue(self, *args):
        """
        :param P:
        :type P: gp_Pln
        :rtype: None

        :param C:
        :type C: gp_Cylinder
        :rtype: None

        :param S:
        :type S: gp_Sphere
        :rtype: None

        :param C:
        :type C: gp_Cone
        :rtype: None

        :param T:
        :type T: gp_Torus
        :rtype: None

        """
        return _IntSurf.IntSurf_Quadric_SetValue(self, *args)


    def Distance(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: float

        """
        return _IntSurf.IntSurf_Quadric_Distance(self, *args)


    def Gradient(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_Quadric_Gradient(self, *args)


    def ValAndGrad(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param Dist:
        :type Dist: float &
        :param Grad:
        :type Grad: gp_Vec
        :rtype: None

        """
        return _IntSurf.IntSurf_Quadric_ValAndGrad(self, *args)


    def TypeQuadric(self, *args):
        """
        :rtype: GeomAbs_SurfaceType

        """
        return _IntSurf.IntSurf_Quadric_TypeQuadric(self, *args)


    def Plane(self, *args):
        """
        :rtype: gp_Pln

        """
        return _IntSurf.IntSurf_Quadric_Plane(self, *args)


    def Sphere(self, *args):
        """
        :rtype: gp_Sphere

        """
        return _IntSurf.IntSurf_Quadric_Sphere(self, *args)


    def Cylinder(self, *args):
        """
        :rtype: gp_Cylinder

        """
        return _IntSurf.IntSurf_Quadric_Cylinder(self, *args)


    def Cone(self, *args):
        """
        :rtype: gp_Cone

        """
        return _IntSurf.IntSurf_Quadric_Cone(self, *args)


    def Torus(self, *args):
        """
        :rtype: gp_Torus

        """
        return _IntSurf.IntSurf_Quadric_Torus(self, *args)


    def Value(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Pnt

        """
        return _IntSurf.IntSurf_Quadric_Value(self, *args)


    def D1(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _IntSurf.IntSurf_Quadric_D1(self, *args)


    def DN(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_Quadric_DN(self, *args)


    def Parameters(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntSurf.IntSurf_Quadric_Parameters(self, *args)


    def Normale(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Vec

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Vec

        """
        return _IntSurf.IntSurf_Quadric_Normale(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_Quadric.SetValue = new_instancemethod(_IntSurf.IntSurf_Quadric_SetValue, None, IntSurf_Quadric)
IntSurf_Quadric.Distance = new_instancemethod(_IntSurf.IntSurf_Quadric_Distance, None, IntSurf_Quadric)
IntSurf_Quadric.Gradient = new_instancemethod(_IntSurf.IntSurf_Quadric_Gradient, None, IntSurf_Quadric)
IntSurf_Quadric.ValAndGrad = new_instancemethod(_IntSurf.IntSurf_Quadric_ValAndGrad, None, IntSurf_Quadric)
IntSurf_Quadric.TypeQuadric = new_instancemethod(_IntSurf.IntSurf_Quadric_TypeQuadric, None, IntSurf_Quadric)
IntSurf_Quadric.Plane = new_instancemethod(_IntSurf.IntSurf_Quadric_Plane, None, IntSurf_Quadric)
IntSurf_Quadric.Sphere = new_instancemethod(_IntSurf.IntSurf_Quadric_Sphere, None, IntSurf_Quadric)
IntSurf_Quadric.Cylinder = new_instancemethod(_IntSurf.IntSurf_Quadric_Cylinder, None, IntSurf_Quadric)
IntSurf_Quadric.Cone = new_instancemethod(_IntSurf.IntSurf_Quadric_Cone, None, IntSurf_Quadric)
IntSurf_Quadric.Torus = new_instancemethod(_IntSurf.IntSurf_Quadric_Torus, None, IntSurf_Quadric)
IntSurf_Quadric.Value = new_instancemethod(_IntSurf.IntSurf_Quadric_Value, None, IntSurf_Quadric)
IntSurf_Quadric.D1 = new_instancemethod(_IntSurf.IntSurf_Quadric_D1, None, IntSurf_Quadric)
IntSurf_Quadric.DN = new_instancemethod(_IntSurf.IntSurf_Quadric_DN, None, IntSurf_Quadric)
IntSurf_Quadric.Parameters = new_instancemethod(_IntSurf.IntSurf_Quadric_Parameters, None, IntSurf_Quadric)
IntSurf_Quadric.Normale = new_instancemethod(_IntSurf.IntSurf_Quadric_Normale, None, IntSurf_Quadric)
IntSurf_Quadric._kill_pointed = new_instancemethod(_IntSurf.IntSurf_Quadric__kill_pointed, None, IntSurf_Quadric)
IntSurf_Quadric_swigregister = _IntSurf.IntSurf_Quadric_swigregister
IntSurf_Quadric_swigregister(IntSurf_Quadric)

class IntSurf_QuadricTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value(*args):
        """
        * Returns the value of the function.

        :param Quad:
        :type Quad: IntSurf_Quadric &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: float

        """
        return _IntSurf.IntSurf_QuadricTool_Value(*args)

    Value = staticmethod(Value)

    def Gradient(*args):
        """
        * Returns the gradient of the function.

        :param Quad:
        :type Quad: IntSurf_Quadric &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param V:
        :type V: gp_Vec
        :rtype: void

        """
        return _IntSurf.IntSurf_QuadricTool_Gradient(*args)

    Gradient = staticmethod(Gradient)

    def ValueAndGradient(*args):
        """
        * Returns the value and the gradient.

        :param Quad:
        :type Quad: IntSurf_Quadric &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param Val:
        :type Val: float &
        :param Grad:
        :type Grad: gp_Vec
        :rtype: void

        """
        return _IntSurf.IntSurf_QuadricTool_ValueAndGradient(*args)

    ValueAndGradient = staticmethod(ValueAndGradient)

    def Tolerance(*args):
        """
        * returns the tolerance of the zero of the implicit function

        :param Quad:
        :type Quad: IntSurf_Quadric &
        :rtype: float

        """
        return _IntSurf.IntSurf_QuadricTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def __init__(self):
        _IntSurf.IntSurf_QuadricTool_swiginit(self, _IntSurf.new_IntSurf_QuadricTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_QuadricTool._kill_pointed = new_instancemethod(_IntSurf.IntSurf_QuadricTool__kill_pointed, None, IntSurf_QuadricTool)
IntSurf_QuadricTool_swigregister = _IntSurf.IntSurf_QuadricTool_swigregister
IntSurf_QuadricTool_swigregister(IntSurf_QuadricTool)

def IntSurf_QuadricTool_Value(*args):
    """
    * Returns the value of the function.

    :param Quad:
    :type Quad: IntSurf_Quadric &
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param Z:
    :type Z: float
    :rtype: float

    """
    return _IntSurf.IntSurf_QuadricTool_Value(*args)

def IntSurf_QuadricTool_Gradient(*args):
    """
    * Returns the gradient of the function.

    :param Quad:
    :type Quad: IntSurf_Quadric &
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param Z:
    :type Z: float
    :param V:
    :type V: gp_Vec
    :rtype: void

    """
    return _IntSurf.IntSurf_QuadricTool_Gradient(*args)

def IntSurf_QuadricTool_ValueAndGradient(*args):
    """
    * Returns the value and the gradient.

    :param Quad:
    :type Quad: IntSurf_Quadric &
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param Z:
    :type Z: float
    :param Val:
    :type Val: float &
    :param Grad:
    :type Grad: gp_Vec
    :rtype: void

    """
    return _IntSurf.IntSurf_QuadricTool_ValueAndGradient(*args)

def IntSurf_QuadricTool_Tolerance(*args):
    """
    * returns the tolerance of the zero of the implicit function

    :param Quad:
    :type Quad: IntSurf_Quadric &
    :rtype: float

    """
    return _IntSurf.IntSurf_QuadricTool_Tolerance(*args)

class IntSurf_SequenceNodeOfSequenceOfCouple(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntSurf_Couple &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_swiginit(self, _IntSurf.new_IntSurf_SequenceNodeOfSequenceOfCouple(*args))

    def Value(self, *args):
        """
        :rtype: IntSurf_Couple

        """
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntSurf_SequenceNodeOfSequenceOfCouple self)"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntSurf_SequenceNodeOfSequenceOfCouple self) -> Handle_IntSurf_SequenceNodeOfSequenceOfCouple"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceNodeOfSequenceOfCouple.Value = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_Value, None, IntSurf_SequenceNodeOfSequenceOfCouple)
IntSurf_SequenceNodeOfSequenceOfCouple._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple__kill_pointed, None, IntSurf_SequenceNodeOfSequenceOfCouple)
IntSurf_SequenceNodeOfSequenceOfCouple.GetHandle = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_GetHandle, None, IntSurf_SequenceNodeOfSequenceOfCouple)
IntSurf_SequenceNodeOfSequenceOfCouple_swigregister = _IntSurf.IntSurf_SequenceNodeOfSequenceOfCouple_swigregister
IntSurf_SequenceNodeOfSequenceOfCouple_swigregister(IntSurf_SequenceNodeOfSequenceOfCouple)

class Handle_IntSurf_SequenceNodeOfSequenceOfCouple(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_swiginit(self, _IntSurf.new_Handle_IntSurf_SequenceNodeOfSequenceOfCouple(*args))
    DownCast = staticmethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntSurf_SequenceNodeOfSequenceOfCouple.Nullify = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_Nullify, None, Handle_IntSurf_SequenceNodeOfSequenceOfCouple)
Handle_IntSurf_SequenceNodeOfSequenceOfCouple.IsNull = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_IsNull, None, Handle_IntSurf_SequenceNodeOfSequenceOfCouple)
Handle_IntSurf_SequenceNodeOfSequenceOfCouple.GetObject = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_GetObject, None, Handle_IntSurf_SequenceNodeOfSequenceOfCouple)
Handle_IntSurf_SequenceNodeOfSequenceOfCouple._kill_pointed = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple__kill_pointed, None, Handle_IntSurf_SequenceNodeOfSequenceOfCouple)
Handle_IntSurf_SequenceNodeOfSequenceOfCouple_swigregister = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_swigregister
Handle_IntSurf_SequenceNodeOfSequenceOfCouple_swigregister(Handle_IntSurf_SequenceNodeOfSequenceOfCouple)

def Handle_IntSurf_SequenceNodeOfSequenceOfCouple_DownCast(AnObject):
    return _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_DownCast(AnObject)
Handle_IntSurf_SequenceNodeOfSequenceOfCouple_DownCast = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfCouple_DownCast

class IntSurf_SequenceNodeOfSequenceOfInteriorPoint(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntSurf_InteriorPoint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceNodeOfSequenceOfInteriorPoint(*args))

    def Value(self, *args):
        """
        :rtype: IntSurf_InteriorPoint

        """
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntSurf_SequenceNodeOfSequenceOfInteriorPoint self)"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntSurf_SequenceNodeOfSequenceOfInteriorPoint self) -> Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceNodeOfSequenceOfInteriorPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_Value, None, IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
IntSurf_SequenceNodeOfSequenceOfInteriorPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint__kill_pointed, None, IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
IntSurf_SequenceNodeOfSequenceOfInteriorPoint.GetHandle = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_GetHandle, None, IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister = _IntSurf.IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister
IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister(IntSurf_SequenceNodeOfSequenceOfInteriorPoint)

class Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swiginit(self, _IntSurf.new_Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint(*args))
    DownCast = staticmethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint.Nullify = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_Nullify, None, Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint.IsNull = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_IsNull, None, Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint.GetObject = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_GetObject, None, Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint._kill_pointed = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint__kill_pointed, None, Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_swigregister(Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint)

def Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_DownCast(AnObject):
    return _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_DownCast(AnObject)
Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_DownCast = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfInteriorPoint_DownCast

class IntSurf_SequenceNodeOfSequenceOfPathPoint(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntSurf_PathPoint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceNodeOfSequenceOfPathPoint(*args))

    def Value(self, *args):
        """
        :rtype: IntSurf_PathPoint

        """
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntSurf_SequenceNodeOfSequenceOfPathPoint self)"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntSurf_SequenceNodeOfSequenceOfPathPoint self) -> Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint"""
        return _IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceNodeOfSequenceOfPathPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_Value, None, IntSurf_SequenceNodeOfSequenceOfPathPoint)
IntSurf_SequenceNodeOfSequenceOfPathPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint__kill_pointed, None, IntSurf_SequenceNodeOfSequenceOfPathPoint)
IntSurf_SequenceNodeOfSequenceOfPathPoint.GetHandle = new_instancemethod(_IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_GetHandle, None, IntSurf_SequenceNodeOfSequenceOfPathPoint)
IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister = _IntSurf.IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister
IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister(IntSurf_SequenceNodeOfSequenceOfPathPoint)

class Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_swiginit(self, _IntSurf.new_Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint(*args))
    DownCast = staticmethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint.Nullify = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_Nullify, None, Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint.IsNull = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_IsNull, None, Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint.GetObject = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_GetObject, None, Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint._kill_pointed = new_instancemethod(_IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint__kill_pointed, None, Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint)
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_swigregister(Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint)

def Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_DownCast(AnObject):
    return _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_DownCast(AnObject)
Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_DownCast = _IntSurf.Handle_IntSurf_SequenceNodeOfSequenceOfPathPoint_DownCast

class IntSurf_SequenceOfCouple(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceOfCouple_swiginit(self, _IntSurf.new_IntSurf_SequenceOfCouple(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfCouple &
        :rtype: IntSurf_SequenceOfCouple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfCouple &
        :rtype: IntSurf_SequenceOfCouple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntSurf_Couple &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfCouple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntSurf_Couple &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfCouple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_Couple &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfCouple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_Couple &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfCouple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntSurf_Couple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntSurf_Couple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntSurf_SequenceOfCouple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_Couple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntSurf_Couple &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_Couple

        """
        return _IntSurf.IntSurf_SequenceOfCouple_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfCouple_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceOfCouple.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Clear, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Assign, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Set, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Append, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Prepend, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_InsertBefore, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_InsertAfter, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_First, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Last, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Split, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Value, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_SetValue, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_ChangeValue, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Remove, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple__kill_pointed, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple_swigregister = _IntSurf.IntSurf_SequenceOfCouple_swigregister
IntSurf_SequenceOfCouple_swigregister(IntSurf_SequenceOfCouple)

class IntSurf_SequenceOfInteriorPoint(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceOfInteriorPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfInteriorPoint(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfInteriorPoint &
        :rtype: IntSurf_SequenceOfInteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfInteriorPoint &
        :rtype: IntSurf_SequenceOfInteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntSurf_InteriorPoint &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfInteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntSurf_InteriorPoint &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfInteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_InteriorPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfInteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_InteriorPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfInteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntSurf_InteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntSurf_InteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntSurf_SequenceOfInteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_InteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntSurf_InteriorPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_InteriorPoint

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfInteriorPoint_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceOfInteriorPoint.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Clear, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Assign, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Set, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Append, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Prepend, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertBefore, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertAfter, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_First, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Last, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Split, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Value, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_SetValue, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeValue, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Remove, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint__kill_pointed, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint_swigregister = _IntSurf.IntSurf_SequenceOfInteriorPoint_swigregister
IntSurf_SequenceOfInteriorPoint_swigregister(IntSurf_SequenceOfInteriorPoint)

class IntSurf_SequenceOfPathPoint(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntSurf.IntSurf_SequenceOfPathPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfPathPoint(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfPathPoint &
        :rtype: IntSurf_SequenceOfPathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntSurf_SequenceOfPathPoint &
        :rtype: IntSurf_SequenceOfPathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntSurf_PathPoint &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfPathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntSurf_PathPoint &
        :rtype: None

        :param S:
        :type S: IntSurf_SequenceOfPathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_PathPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfPathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntSurf_PathPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntSurf_SequenceOfPathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntSurf_PathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntSurf_PathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntSurf_SequenceOfPathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntSurf_PathPoint &
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PathPoint

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntSurf.IntSurf_SequenceOfPathPoint_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_SequenceOfPathPoint.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Clear, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Assign, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Set, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Append, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Prepend, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_InsertBefore, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_InsertAfter, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_First, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Last, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Split, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Value, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_SetValue, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeValue, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Remove, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint._kill_pointed = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint__kill_pointed, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint_swigregister = _IntSurf.IntSurf_SequenceOfPathPoint_swigregister
IntSurf_SequenceOfPathPoint_swigregister(IntSurf_SequenceOfPathPoint)

class IntSurf_Transition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor. Creates an UNDECIDED transition.

        :rtype: None

        * Create a IN or OUT transition

        :param Tangent:
        :type Tangent: bool
        :param Type:
        :type Type: IntSurf_TypeTrans
        :rtype: None

        * Create a TOUCH transition.

        :param Tangent:
        :type Tangent: bool
        :param Situ:
        :type Situ: IntSurf_Situation
        :param Oppos:
        :type Oppos: bool
        :rtype: None

        """
        _IntSurf.IntSurf_Transition_swiginit(self, _IntSurf.new_IntSurf_Transition(*args))

    def SetValue(self, *args):
        """
        * Set the values of an IN or OUT transition.

        :param Tangent:
        :type Tangent: bool
        :param Type:
        :type Type: IntSurf_TypeTrans
        :rtype: None

        * Set the values of a TOUCH transition.

        :param Tangent:
        :type Tangent: bool
        :param Situ:
        :type Situ: IntSurf_Situation
        :param Oppos:
        :type Oppos: bool
        :rtype: None

        * Set the values of an UNDECIDED transition.

        :rtype: None

        """
        return _IntSurf.IntSurf_Transition_SetValue(self, *args)


    def TransitionType(self, *args):
        """
        * Returns the type of Transition (in/out/touch/undecided) for the arc given by value. This the transition of the intersection line compared to the Arc of restriction, i-e when the function returns INSIDE for example, it means that the intersection line goes inside the part of plane limited by the arc of restriction.

        :rtype: IntSurf_TypeTrans

        """
        return _IntSurf.IntSurf_Transition_TransitionType(self, *args)


    def IsTangent(self, *args):
        """
        * Returns True if the point is tangent to the arc given by Value. An exception is raised if TransitionType returns UNDECIDED.

        :rtype: bool

        """
        return _IntSurf.IntSurf_Transition_IsTangent(self, *args)


    def Situation(self, *args):
        """
        * Returns a significant value if TransitionType returns TOUCH. In this case, the function returns : INSIDE when the intersection line remains inside the Arc, OUTSIDE when it remains outside the Arc, UNKNOWN when the calsulus cannot give results. If TransitionType returns IN, or OUT, or UNDECIDED, a exception is raised.

        :rtype: IntSurf_Situation

        """
        return _IntSurf.IntSurf_Transition_Situation(self, *args)


    def IsOpposite(self, *args):
        """
        * returns a significant value if TransitionType returns TOUCH. In this case, the function returns true when the 2 curves locally define two different parts of the space. If TransitionType returns IN or OUT or UNDECIDED, an exception is raised.

        :rtype: bool

        """
        return _IntSurf.IntSurf_Transition_IsOpposite(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntSurf_Transition.SetValue = new_instancemethod(_IntSurf.IntSurf_Transition_SetValue, None, IntSurf_Transition)
IntSurf_Transition.TransitionType = new_instancemethod(_IntSurf.IntSurf_Transition_TransitionType, None, IntSurf_Transition)
IntSurf_Transition.IsTangent = new_instancemethod(_IntSurf.IntSurf_Transition_IsTangent, None, IntSurf_Transition)
IntSurf_Transition.Situation = new_instancemethod(_IntSurf.IntSurf_Transition_Situation, None, IntSurf_Transition)
IntSurf_Transition.IsOpposite = new_instancemethod(_IntSurf.IntSurf_Transition_IsOpposite, None, IntSurf_Transition)
IntSurf_Transition._kill_pointed = new_instancemethod(_IntSurf.IntSurf_Transition__kill_pointed, None, IntSurf_Transition)
IntSurf_Transition_swigregister = _IntSurf.IntSurf_Transition_swigregister
IntSurf_Transition_swigregister(IntSurf_Transition)



