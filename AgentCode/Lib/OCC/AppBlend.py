# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _AppBlend.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppBlend', [dirname(__file__)])
        except ImportError:
            import _AppBlend
            return _AppBlend
        if fp is not None:
            try:
                _mod = imp.load_module('_AppBlend', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AppBlend = swig_import_helper()
    del swig_import_helper
else:
    import _AppBlend
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppBlend.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_AppBlend.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_AppBlend.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_AppBlend.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_AppBlend.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_AppBlend.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_AppBlend.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_AppBlend.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_AppBlend.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_AppBlend.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_AppBlend.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_AppBlend.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_AppBlend.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_AppBlend.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_AppBlend.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_AppBlend.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_AppBlend.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _AppBlend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TColgp
import OCC.gp
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
class AppBlend_Approx(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_Delete(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _AppBlend.AppBlend_Approx_IsDone(self, *args)


    def SurfShape(self, *args):
        """
        :param UDegree:
        :type UDegree: int &
        :param VDegree:
        :type VDegree: int &
        :param NbUPoles:
        :type NbUPoles: int &
        :param NbVPoles:
        :type NbVPoles: int &
        :param NbUKnots:
        :type NbUKnots: int &
        :param NbVKnots:
        :type NbVKnots: int &
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_SurfShape(self, *args)


    def Surface(self, *args):
        """
        :param TPoles:
        :type TPoles: TColgp_Array2OfPnt
        :param TWeights:
        :type TWeights: TColStd_Array2OfReal &
        :param TUKnots:
        :type TUKnots: TColStd_Array1OfReal &
        :param TVKnots:
        :type TVKnots: TColStd_Array1OfReal &
        :param TUMults:
        :type TUMults: TColStd_Array1OfInteger &
        :param TVMults:
        :type TVMults: TColStd_Array1OfInteger &
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_Surface(self, *args)


    def UDegree(self, *args):
        """
        :rtype: int

        """
        return _AppBlend.AppBlend_Approx_UDegree(self, *args)


    def VDegree(self, *args):
        """
        :rtype: int

        """
        return _AppBlend.AppBlend_Approx_VDegree(self, *args)


    def SurfPoles(self, *args):
        """
        :rtype: TColgp_Array2OfPnt

        """
        return _AppBlend.AppBlend_Approx_SurfPoles(self, *args)


    def SurfWeights(self, *args):
        """
        :rtype: TColStd_Array2OfReal

        """
        return _AppBlend.AppBlend_Approx_SurfWeights(self, *args)


    def SurfUKnots(self, *args):
        """
        :rtype: TColStd_Array1OfReal

        """
        return _AppBlend.AppBlend_Approx_SurfUKnots(self, *args)


    def SurfVKnots(self, *args):
        """
        :rtype: TColStd_Array1OfReal

        """
        return _AppBlend.AppBlend_Approx_SurfVKnots(self, *args)


    def SurfUMults(self, *args):
        """
        :rtype: TColStd_Array1OfInteger

        """
        return _AppBlend.AppBlend_Approx_SurfUMults(self, *args)


    def SurfVMults(self, *args):
        """
        :rtype: TColStd_Array1OfInteger

        """
        return _AppBlend.AppBlend_Approx_SurfVMults(self, *args)


    def NbCurves2d(self, *args):
        """
        :rtype: int

        """
        return _AppBlend.AppBlend_Approx_NbCurves2d(self, *args)


    def Curves2dShape(self, *args):
        """
        :param Degree:
        :type Degree: int &
        :param NbPoles:
        :type NbPoles: int &
        :param NbKnots:
        :type NbKnots: int &
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_Curves2dShape(self, *args)


    def Curve2d(self, *args):
        """
        :param Index:
        :type Index: int
        :param TPoles:
        :type TPoles: TColgp_Array1OfPnt2d
        :param TKnots:
        :type TKnots: TColStd_Array1OfReal &
        :param TMults:
        :type TMults: TColStd_Array1OfInteger &
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_Curve2d(self, *args)


    def Curves2dDegree(self, *args):
        """
        :rtype: int

        """
        return _AppBlend.AppBlend_Approx_Curves2dDegree(self, *args)


    def Curve2dPoles(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColgp_Array1OfPnt2d

        """
        return _AppBlend.AppBlend_Approx_Curve2dPoles(self, *args)


    def Curves2dKnots(self, *args):
        """
        :rtype: TColStd_Array1OfReal

        """
        return _AppBlend.AppBlend_Approx_Curves2dKnots(self, *args)


    def Curves2dMults(self, *args):
        """
        :rtype: TColStd_Array1OfInteger

        """
        return _AppBlend.AppBlend_Approx_Curves2dMults(self, *args)


    def TolReached(self, *args):
        """
        :param Tol3d:
        :type Tol3d: float &
        :param Tol2d:
        :type Tol2d: float &
        :rtype: void

        """
        return _AppBlend.AppBlend_Approx_TolReached(self, *args)


    def TolCurveOnSurf(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AppBlend.AppBlend_Approx_TolCurveOnSurf(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AppBlend_Approx.Delete = new_instancemethod(_AppBlend.AppBlend_Approx_Delete, None, AppBlend_Approx)
AppBlend_Approx.IsDone = new_instancemethod(_AppBlend.AppBlend_Approx_IsDone, None, AppBlend_Approx)
AppBlend_Approx.SurfShape = new_instancemethod(_AppBlend.AppBlend_Approx_SurfShape, None, AppBlend_Approx)
AppBlend_Approx.Surface = new_instancemethod(_AppBlend.AppBlend_Approx_Surface, None, AppBlend_Approx)
AppBlend_Approx.UDegree = new_instancemethod(_AppBlend.AppBlend_Approx_UDegree, None, AppBlend_Approx)
AppBlend_Approx.VDegree = new_instancemethod(_AppBlend.AppBlend_Approx_VDegree, None, AppBlend_Approx)
AppBlend_Approx.SurfPoles = new_instancemethod(_AppBlend.AppBlend_Approx_SurfPoles, None, AppBlend_Approx)
AppBlend_Approx.SurfWeights = new_instancemethod(_AppBlend.AppBlend_Approx_SurfWeights, None, AppBlend_Approx)
AppBlend_Approx.SurfUKnots = new_instancemethod(_AppBlend.AppBlend_Approx_SurfUKnots, None, AppBlend_Approx)
AppBlend_Approx.SurfVKnots = new_instancemethod(_AppBlend.AppBlend_Approx_SurfVKnots, None, AppBlend_Approx)
AppBlend_Approx.SurfUMults = new_instancemethod(_AppBlend.AppBlend_Approx_SurfUMults, None, AppBlend_Approx)
AppBlend_Approx.SurfVMults = new_instancemethod(_AppBlend.AppBlend_Approx_SurfVMults, None, AppBlend_Approx)
AppBlend_Approx.NbCurves2d = new_instancemethod(_AppBlend.AppBlend_Approx_NbCurves2d, None, AppBlend_Approx)
AppBlend_Approx.Curves2dShape = new_instancemethod(_AppBlend.AppBlend_Approx_Curves2dShape, None, AppBlend_Approx)
AppBlend_Approx.Curve2d = new_instancemethod(_AppBlend.AppBlend_Approx_Curve2d, None, AppBlend_Approx)
AppBlend_Approx.Curves2dDegree = new_instancemethod(_AppBlend.AppBlend_Approx_Curves2dDegree, None, AppBlend_Approx)
AppBlend_Approx.Curve2dPoles = new_instancemethod(_AppBlend.AppBlend_Approx_Curve2dPoles, None, AppBlend_Approx)
AppBlend_Approx.Curves2dKnots = new_instancemethod(_AppBlend.AppBlend_Approx_Curves2dKnots, None, AppBlend_Approx)
AppBlend_Approx.Curves2dMults = new_instancemethod(_AppBlend.AppBlend_Approx_Curves2dMults, None, AppBlend_Approx)
AppBlend_Approx.TolReached = new_instancemethod(_AppBlend.AppBlend_Approx_TolReached, None, AppBlend_Approx)
AppBlend_Approx.TolCurveOnSurf = new_instancemethod(_AppBlend.AppBlend_Approx_TolCurveOnSurf, None, AppBlend_Approx)
AppBlend_Approx._kill_pointed = new_instancemethod(_AppBlend.AppBlend_Approx__kill_pointed, None, AppBlend_Approx)
AppBlend_Approx_swigregister = _AppBlend.AppBlend_Approx_swigregister
AppBlend_Approx_swigregister(AppBlend_Approx)



