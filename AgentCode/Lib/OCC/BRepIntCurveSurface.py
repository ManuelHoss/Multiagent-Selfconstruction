# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepIntCurveSurface.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepIntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _BRepIntCurveSurface
            return _BRepIntCurveSurface
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepIntCurveSurface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _BRepIntCurveSurface
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepIntCurveSurface.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepIntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.GeomAdaptor
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.IntCurveSurface
import OCC.Intf
import OCC.Bnd
import OCC.IntSurf
class BRepIntCurveSurface_Inter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor;

        :rtype: None

        """
        _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swiginit(self, _BRepIntCurveSurface.new_BRepIntCurveSurface_Inter(*args))

    def Init(self, *args):
        """
        * Load the Shape, the curve and initialize the tolerance used for the classification.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param Cu:
        :type Cu: GeomAdaptor_Curve &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Load the Shape, the curve and initialize the tolerance used for the classification.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param L:
        :type L: gp_Lin
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init(self, *args)


    def More(self, *args):
        """
        * returns True if there is a current face.

        :rtype: bool

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_More(self, *args)


    def Next(self, *args):
        """
        * Sets the explorer to the next face.

        :rtype: None

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next(self, *args)


    def Point(self, *args):
        """
        * returns the current Intersection point.

        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point(self, *args)


    def Pnt(self, *args):
        """
        * returns the current geometric Point

        :rtype: gp_Pnt

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt(self, *args)


    def U(self, *args):
        """
        * returns the U parameter of the current point on the current face.

        :rtype: float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_U(self, *args)


    def V(self, *args):
        """
        * returns the V parameter of the current point on the current face.

        :rtype: float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_V(self, *args)


    def W(self, *args):
        """
        * returns the parameter of the current point on the curve.

        :rtype: float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_W(self, *args)


    def State(self, *args):
        """
        * returns the current state (IN or ON)

        :rtype: TopAbs_State

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_State(self, *args)


    def Transition(self, *args):
        """
        * returns the transition of the line on the surface (IN or OUT or UNKNOWN)

        :rtype: IntCurveSurface_TransitionOnCurve

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition(self, *args)


    def Face(self, *args):
        """
        * returns the current face.

        :rtype: TopoDS_Face

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepIntCurveSurface_Inter.Init = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.More = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_More, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Next = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Point = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Pnt = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.U = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_U, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.V = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_V, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.W = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_W, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.State = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_State, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Transition = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Face = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter._kill_pointed = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter__kill_pointed, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter_swigregister = _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swigregister
BRepIntCurveSurface_Inter_swigregister(BRepIntCurveSurface_Inter)



