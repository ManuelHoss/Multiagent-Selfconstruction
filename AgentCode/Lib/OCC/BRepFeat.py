# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepFeat.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepFeat', [dirname(__file__)])
        except ImportError:
            import _BRepFeat
            return _BRepFeat
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepFeat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepFeat = swig_import_helper()
    del swig_import_helper
else:
    import _BRepFeat
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFeat.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepFeat.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepFeat.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepFeat.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepFeat.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepFeat.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepFeat.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepFeat.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepFeat.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepFeat.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepFeat.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepFeat.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepFeat.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepFeat.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepFeat.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepFeat.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepFeat.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepFeat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TColgp
import OCC.Geom
import OCC.GeomAbs
import OCC.TColStd
import OCC.BOPAlgo
import OCC.TopTools
import OCC.Message
import OCC.BOPCol
import OCC.BRepBuilderAPI
import OCC.BRepTools
import OCC.Bnd
import OCC.BRep
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.TColGeom
import OCC.LocOpe
import OCC.TopOpeBRepBuild
import OCC.TopOpeBRepTool
import OCC.GeomAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.Geom2dAdaptor
import OCC.IntCurvesFace
import OCC.Extrema
import OCC.TopOpeBRepDS

_BRepFeat.BRepFeat_NoSelection_swigconstant(_BRepFeat)
BRepFeat_NoSelection = _BRepFeat.BRepFeat_NoSelection

_BRepFeat.BRepFeat_SelectionFU_swigconstant(_BRepFeat)
BRepFeat_SelectionFU = _BRepFeat.BRepFeat_SelectionFU

_BRepFeat.BRepFeat_SelectionU_swigconstant(_BRepFeat)
BRepFeat_SelectionU = _BRepFeat.BRepFeat_SelectionU

_BRepFeat.BRepFeat_SelectionSh_swigconstant(_BRepFeat)
BRepFeat_SelectionSh = _BRepFeat.BRepFeat_SelectionSh

_BRepFeat.BRepFeat_SelectionShU_swigconstant(_BRepFeat)
BRepFeat_SelectionShU = _BRepFeat.BRepFeat_SelectionShU

_BRepFeat.BRepFeat_NoError_swigconstant(_BRepFeat)
BRepFeat_NoError = _BRepFeat.BRepFeat_NoError

_BRepFeat.BRepFeat_InvalidPlacement_swigconstant(_BRepFeat)
BRepFeat_InvalidPlacement = _BRepFeat.BRepFeat_InvalidPlacement

_BRepFeat.BRepFeat_HoleTooLong_swigconstant(_BRepFeat)
BRepFeat_HoleTooLong = _BRepFeat.BRepFeat_HoleTooLong

_BRepFeat.BRepFeat_OK_swigconstant(_BRepFeat)
BRepFeat_OK = _BRepFeat.BRepFeat_OK

_BRepFeat.BRepFeat_BadDirect_swigconstant(_BRepFeat)
BRepFeat_BadDirect = _BRepFeat.BRepFeat_BadDirect

_BRepFeat.BRepFeat_BadIntersect_swigconstant(_BRepFeat)
BRepFeat_BadIntersect = _BRepFeat.BRepFeat_BadIntersect

_BRepFeat.BRepFeat_EmptyBaryCurve_swigconstant(_BRepFeat)
BRepFeat_EmptyBaryCurve = _BRepFeat.BRepFeat_EmptyBaryCurve

_BRepFeat.BRepFeat_EmptyCutResult_swigconstant(_BRepFeat)
BRepFeat_EmptyCutResult = _BRepFeat.BRepFeat_EmptyCutResult

_BRepFeat.BRepFeat_FalseSide_swigconstant(_BRepFeat)
BRepFeat_FalseSide = _BRepFeat.BRepFeat_FalseSide

_BRepFeat.BRepFeat_IncDirection_swigconstant(_BRepFeat)
BRepFeat_IncDirection = _BRepFeat.BRepFeat_IncDirection

_BRepFeat.BRepFeat_IncSlidFace_swigconstant(_BRepFeat)
BRepFeat_IncSlidFace = _BRepFeat.BRepFeat_IncSlidFace

_BRepFeat.BRepFeat_IncParameter_swigconstant(_BRepFeat)
BRepFeat_IncParameter = _BRepFeat.BRepFeat_IncParameter

_BRepFeat.BRepFeat_IncTypes_swigconstant(_BRepFeat)
BRepFeat_IncTypes = _BRepFeat.BRepFeat_IncTypes

_BRepFeat.BRepFeat_IntervalOverlap_swigconstant(_BRepFeat)
BRepFeat_IntervalOverlap = _BRepFeat.BRepFeat_IntervalOverlap

_BRepFeat.BRepFeat_InvFirstShape_swigconstant(_BRepFeat)
BRepFeat_InvFirstShape = _BRepFeat.BRepFeat_InvFirstShape

_BRepFeat.BRepFeat_InvOption_swigconstant(_BRepFeat)
BRepFeat_InvOption = _BRepFeat.BRepFeat_InvOption

_BRepFeat.BRepFeat_InvShape_swigconstant(_BRepFeat)
BRepFeat_InvShape = _BRepFeat.BRepFeat_InvShape

_BRepFeat.BRepFeat_LocOpeNotDone_swigconstant(_BRepFeat)
BRepFeat_LocOpeNotDone = _BRepFeat.BRepFeat_LocOpeNotDone

_BRepFeat.BRepFeat_LocOpeInvNotDone_swigconstant(_BRepFeat)
BRepFeat_LocOpeInvNotDone = _BRepFeat.BRepFeat_LocOpeInvNotDone

_BRepFeat.BRepFeat_NoExtFace_swigconstant(_BRepFeat)
BRepFeat_NoExtFace = _BRepFeat.BRepFeat_NoExtFace

_BRepFeat.BRepFeat_NoFaceProf_swigconstant(_BRepFeat)
BRepFeat_NoFaceProf = _BRepFeat.BRepFeat_NoFaceProf

_BRepFeat.BRepFeat_NoGluer_swigconstant(_BRepFeat)
BRepFeat_NoGluer = _BRepFeat.BRepFeat_NoGluer

_BRepFeat.BRepFeat_NoIntersectF_swigconstant(_BRepFeat)
BRepFeat_NoIntersectF = _BRepFeat.BRepFeat_NoIntersectF

_BRepFeat.BRepFeat_NoIntersectU_swigconstant(_BRepFeat)
BRepFeat_NoIntersectU = _BRepFeat.BRepFeat_NoIntersectU

_BRepFeat.BRepFeat_NoParts_swigconstant(_BRepFeat)
BRepFeat_NoParts = _BRepFeat.BRepFeat_NoParts

_BRepFeat.BRepFeat_NoProjPt_swigconstant(_BRepFeat)
BRepFeat_NoProjPt = _BRepFeat.BRepFeat_NoProjPt

_BRepFeat.BRepFeat_NotInitialized_swigconstant(_BRepFeat)
BRepFeat_NotInitialized = _BRepFeat.BRepFeat_NotInitialized

_BRepFeat.BRepFeat_NotYetImplemented_swigconstant(_BRepFeat)
BRepFeat_NotYetImplemented = _BRepFeat.BRepFeat_NotYetImplemented

_BRepFeat.BRepFeat_NullRealTool_swigconstant(_BRepFeat)
BRepFeat_NullRealTool = _BRepFeat.BRepFeat_NullRealTool

_BRepFeat.BRepFeat_NullToolF_swigconstant(_BRepFeat)
BRepFeat_NullToolF = _BRepFeat.BRepFeat_NullToolF

_BRepFeat.BRepFeat_NullToolU_swigconstant(_BRepFeat)
BRepFeat_NullToolU = _BRepFeat.BRepFeat_NullToolU
class brepfeat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SampleEdges(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Pt:
        :type Pt: TColgp_SequenceOfPnt
        :rtype: void

        """
        return _BRepFeat.brepfeat_SampleEdges(*args)

    SampleEdges = staticmethod(SampleEdges)

    def Barycenter(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Pt:
        :type Pt: gp_Pnt
        :rtype: void

        """
        return _BRepFeat.brepfeat_Barycenter(*args)

    Barycenter = staticmethod(Barycenter)

    def ParametricBarycenter(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: float

        """
        return _BRepFeat.brepfeat_ParametricBarycenter(*args)

    ParametricBarycenter = staticmethod(ParametricBarycenter)

    def ParametricMinMax(*args):
        """
        * Ori = True taking account the orientation

        :param S:
        :type S: TopoDS_Shape &
        :param C:
        :type C: Handle_Geom_Curve &
        :param prmin:
        :type prmin: float &
        :param prmax:
        :type prmax: float &
        :param prbmin:
        :type prbmin: float &
        :param prbmax:
        :type prbmax: float &
        :param flag:
        :type flag: bool
        :param Ori: default value is Standard_False
        :type Ori: bool
        :rtype: void

        """
        return _BRepFeat.brepfeat_ParametricMinMax(*args)

    ParametricMinMax = staticmethod(ParametricMinMax)

    def IsInside(*args):
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: bool

        """
        return _BRepFeat.brepfeat_IsInside(*args)

    IsInside = staticmethod(IsInside)

    def FaceUntil(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param F:
        :type F: TopoDS_Face &
        :rtype: void

        """
        return _BRepFeat.brepfeat_FaceUntil(*args)

    FaceUntil = staticmethod(FaceUntil)

    def Tool(*args):
        """
        :param SRef:
        :type SRef: TopoDS_Shape &
        :param Fac:
        :type Fac: TopoDS_Face &
        :param Orf:
        :type Orf: TopAbs_Orientation
        :rtype: TopoDS_Solid

        """
        return _BRepFeat.brepfeat_Tool(*args)

    Tool = staticmethod(Tool)

    def Print(*args):
        """
        * Prints the Error description of the State <St> as a String on the Stream <S> and returns <S>.

        :param SE:
        :type SE: BRepFeat_StatusError
        :param S:
        :type S: Standard_OStream &
        :rtype: Standard_OStream

        """
        return _BRepFeat.brepfeat_Print(*args)

    Print = staticmethod(Print)

    def __init__(self):
        _BRepFeat.brepfeat_swiginit(self, _BRepFeat.new_brepfeat())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


brepfeat._kill_pointed = new_instancemethod(_BRepFeat.brepfeat__kill_pointed, None, brepfeat)
brepfeat_swigregister = _BRepFeat.brepfeat_swigregister
brepfeat_swigregister(brepfeat)

def brepfeat_SampleEdges(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param Pt:
    :type Pt: TColgp_SequenceOfPnt
    :rtype: void

    """
    return _BRepFeat.brepfeat_SampleEdges(*args)

def brepfeat_Barycenter(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param Pt:
    :type Pt: gp_Pnt
    :rtype: void

    """
    return _BRepFeat.brepfeat_Barycenter(*args)

def brepfeat_ParametricBarycenter(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param C:
    :type C: Handle_Geom_Curve &
    :rtype: float

    """
    return _BRepFeat.brepfeat_ParametricBarycenter(*args)

def brepfeat_ParametricMinMax(*args):
    """
    * Ori = True taking account the orientation

    :param S:
    :type S: TopoDS_Shape &
    :param C:
    :type C: Handle_Geom_Curve &
    :param prmin:
    :type prmin: float &
    :param prmax:
    :type prmax: float &
    :param prbmin:
    :type prbmin: float &
    :param prbmax:
    :type prbmax: float &
    :param flag:
    :type flag: bool
    :param Ori: default value is Standard_False
    :type Ori: bool
    :rtype: void

    """
    return _BRepFeat.brepfeat_ParametricMinMax(*args)

def brepfeat_IsInside(*args):
    """
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :rtype: bool

    """
    return _BRepFeat.brepfeat_IsInside(*args)

def brepfeat_FaceUntil(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param F:
    :type F: TopoDS_Face &
    :rtype: void

    """
    return _BRepFeat.brepfeat_FaceUntil(*args)

def brepfeat_Tool(*args):
    """
    :param SRef:
    :type SRef: TopoDS_Shape &
    :param Fac:
    :type Fac: TopoDS_Face &
    :param Orf:
    :type Orf: TopAbs_Orientation
    :rtype: TopoDS_Solid

    """
    return _BRepFeat.brepfeat_Tool(*args)

def brepfeat_Print(*args):
    """
    * Prints the Error description of the State <St> as a String on the Stream <S> and returns <S>.

    :param SE:
    :type SE: BRepFeat_StatusError
    :param S:
    :type S: Standard_OStream &
    :rtype: Standard_OStream

    """
    return _BRepFeat.brepfeat_Print(*args)

class BRepFeat_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepFeat.BRepFeat_Builder_swiginit(self, _BRepFeat.new_BRepFeat_Builder(*args))

    def Clear(self, *args):
        """
        * Clears internal fields and arguments.

        :rtype: void

        """
        return _BRepFeat.BRepFeat_Builder_Clear(self, *args)


    def Init(self, *args):
        """
        * Initialyzes the object of local boolean operation.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: None

        * Initialyzes the arguments of local boolean operation.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param theTool:
        :type theTool: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_Init(self, *args)


    def SetOperation(self, *args):
        """
        * Sets the operation of local boolean operation. If theFuse = 0 than the operation is CUT, otherwise FUSE.

        :param theFuse:
        :type theFuse: int
        :rtype: None

        * Sets the operation of local boolean operation. If theFlag = True it means that no selection of parts of the tool is needed, t.e. no second part. In that case if theFuse = 0 than operation is COMMON, otherwise CUT21. If theFlag = False SetOperation(theFuse) function is called.

        :param theFuse:
        :type theFuse: int
        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_SetOperation(self, *args)


    def PartsOfTool(self, *args):
        """
        * Collects parts of the tool.

        :param theLT:
        :type theLT: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_PartsOfTool(self, *args)


    def KeepParts(self, *args):
        """
        * Initialyzes parts of the tool for second step of algorithm. Collects shapes and all sub-shapes into myShapes map.

        :param theIm:
        :type theIm: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_KeepParts(self, *args)


    def KeepPart(self, *args):
        """
        * Adds shape theS and all its sub-shapes into myShapes map.

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_KeepPart(self, *args)


    def PerformResult(self, *args):
        """
        * Main function to build the result of the local operation required.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_PerformResult(self, *args)


    def RebuildFaces(self, *args):
        """
        * Rebuilds faces in accordance with the kept parts of the tool.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_RebuildFaces(self, *args)


    def RebuildEdge(self, *args):
        """
        * Rebuilds edges in accordance with the kept parts of the tool.

        :param theE:
        :type theE: TopoDS_Shape &
        :param theF:
        :type theF: TopoDS_Face &
        :param theME:
        :type theME: BOPCol_MapOfShape &
        :param aLEIm:
        :type aLEIm: BOPCol_ListOfShape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_RebuildEdge(self, *args)


    def CheckSolidImages(self, *args):
        """
        * Collects the images of the object, that contains in the images of the tool.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_CheckSolidImages(self, *args)


    def FillRemoved(self, *args):
        """
        * Collects the removed parts of the tool into myRemoved map.

        :rtype: None

        * Adds the shape S and its sub-shapes into myRemoved map.

        :param theS:
        :type theS: TopoDS_Shape &
        :param theM:
        :type theM: BOPCol_MapOfShape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Builder_FillRemoved(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_Builder.Clear = new_instancemethod(_BRepFeat.BRepFeat_Builder_Clear, None, BRepFeat_Builder)
BRepFeat_Builder.Init = new_instancemethod(_BRepFeat.BRepFeat_Builder_Init, None, BRepFeat_Builder)
BRepFeat_Builder.SetOperation = new_instancemethod(_BRepFeat.BRepFeat_Builder_SetOperation, None, BRepFeat_Builder)
BRepFeat_Builder.PartsOfTool = new_instancemethod(_BRepFeat.BRepFeat_Builder_PartsOfTool, None, BRepFeat_Builder)
BRepFeat_Builder.KeepParts = new_instancemethod(_BRepFeat.BRepFeat_Builder_KeepParts, None, BRepFeat_Builder)
BRepFeat_Builder.KeepPart = new_instancemethod(_BRepFeat.BRepFeat_Builder_KeepPart, None, BRepFeat_Builder)
BRepFeat_Builder.PerformResult = new_instancemethod(_BRepFeat.BRepFeat_Builder_PerformResult, None, BRepFeat_Builder)
BRepFeat_Builder.RebuildFaces = new_instancemethod(_BRepFeat.BRepFeat_Builder_RebuildFaces, None, BRepFeat_Builder)
BRepFeat_Builder.RebuildEdge = new_instancemethod(_BRepFeat.BRepFeat_Builder_RebuildEdge, None, BRepFeat_Builder)
BRepFeat_Builder.CheckSolidImages = new_instancemethod(_BRepFeat.BRepFeat_Builder_CheckSolidImages, None, BRepFeat_Builder)
BRepFeat_Builder.FillRemoved = new_instancemethod(_BRepFeat.BRepFeat_Builder_FillRemoved, None, BRepFeat_Builder)
BRepFeat_Builder._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_Builder__kill_pointed, None, BRepFeat_Builder)
BRepFeat_Builder_swigregister = _BRepFeat.BRepFeat_Builder_swigregister
BRepFeat_Builder_swigregister(BRepFeat_Builder)

class BRepFeat_Form(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstShape(self, *args):
        """
        * Returns the list of shapes created at the bottom of the created form. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_Form_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        * Returns the list of shapes created at the top of the created form. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_Form_LastShape(self, *args)


    def NewEdges(self, *args):
        """
        * Returns a list of the limiting and glueing edges generated by the feature. These edges did not originally exist in the basis shape. The list provides the information necessary for subsequent addition of fillets. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_Form_NewEdges(self, *args)


    def TgtEdges(self, *args):
        """
        * Returns a list of the tangent edges among the limiting and glueing edges generated by the feature. These edges did not originally exist in the basis shape and are tangent to the face against which the feature is built. The list provides the information necessary for subsequent addition of fillets. It may be an empty list. If an edge is tangent, no fillet is possible, and the edge must subsequently be removed if you want to add a fillet.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_Form_TgtEdges(self, *args)


    def BasisShapeValid(self, *args):
        """
        * Initializes the topological construction if the basis shape is present.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_BasisShapeValid(self, *args)


    def GeneratedShapeValid(self, *args):
        """
        * Initializes the topological construction if the generated shape S is present.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_GeneratedShapeValid(self, *args)


    def ShapeFromValid(self, *args):
        """
        * Initializes the topological construction if the shape is present from the specified integer on.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_ShapeFromValid(self, *args)


    def ShapeUntilValid(self, *args):
        """
        * Initializes the topological construction if the shape is present until the specified integer.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_ShapeUntilValid(self, *args)


    def GluedFacesValid(self, *args):
        """
        * Initializes the topological construction if the glued face is present.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_GluedFacesValid(self, *args)


    def SketchFaceValid(self, *args):
        """
        * Initializes the topological construction if the sketch face is present. If the sketch face is inside the basis shape, local operations such as glueing can be performed.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_SketchFaceValid(self, *args)


    def PerfSelectionValid(self, *args):
        """
        * Initializes the topological construction if the selected face is present.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_Form_PerfSelectionValid(self, *args)


    def Curves(self, *args):
        """
        :param S:
        :type S: TColGeom_SequenceOfCurve &
        :rtype: void

        """
        return _BRepFeat.BRepFeat_Form_Curves(self, *args)


    def BarycCurve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _BRepFeat.BRepFeat_Form_BarycCurve(self, *args)


    def CurrentStatusError(self, *args):
        """
        :rtype: BRepFeat_StatusError

        """
        return _BRepFeat.BRepFeat_Form_CurrentStatusError(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_Form.FirstShape = new_instancemethod(_BRepFeat.BRepFeat_Form_FirstShape, None, BRepFeat_Form)
BRepFeat_Form.LastShape = new_instancemethod(_BRepFeat.BRepFeat_Form_LastShape, None, BRepFeat_Form)
BRepFeat_Form.NewEdges = new_instancemethod(_BRepFeat.BRepFeat_Form_NewEdges, None, BRepFeat_Form)
BRepFeat_Form.TgtEdges = new_instancemethod(_BRepFeat.BRepFeat_Form_TgtEdges, None, BRepFeat_Form)
BRepFeat_Form.BasisShapeValid = new_instancemethod(_BRepFeat.BRepFeat_Form_BasisShapeValid, None, BRepFeat_Form)
BRepFeat_Form.GeneratedShapeValid = new_instancemethod(_BRepFeat.BRepFeat_Form_GeneratedShapeValid, None, BRepFeat_Form)
BRepFeat_Form.ShapeFromValid = new_instancemethod(_BRepFeat.BRepFeat_Form_ShapeFromValid, None, BRepFeat_Form)
BRepFeat_Form.ShapeUntilValid = new_instancemethod(_BRepFeat.BRepFeat_Form_ShapeUntilValid, None, BRepFeat_Form)
BRepFeat_Form.GluedFacesValid = new_instancemethod(_BRepFeat.BRepFeat_Form_GluedFacesValid, None, BRepFeat_Form)
BRepFeat_Form.SketchFaceValid = new_instancemethod(_BRepFeat.BRepFeat_Form_SketchFaceValid, None, BRepFeat_Form)
BRepFeat_Form.PerfSelectionValid = new_instancemethod(_BRepFeat.BRepFeat_Form_PerfSelectionValid, None, BRepFeat_Form)
BRepFeat_Form.Curves = new_instancemethod(_BRepFeat.BRepFeat_Form_Curves, None, BRepFeat_Form)
BRepFeat_Form.BarycCurve = new_instancemethod(_BRepFeat.BRepFeat_Form_BarycCurve, None, BRepFeat_Form)
BRepFeat_Form.CurrentStatusError = new_instancemethod(_BRepFeat.BRepFeat_Form_CurrentStatusError, None, BRepFeat_Form)
BRepFeat_Form._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_Form__kill_pointed, None, BRepFeat_Form)
BRepFeat_Form_swigregister = _BRepFeat.BRepFeat_Form_swigregister
BRepFeat_Form_swigregister(BRepFeat_Form)

class BRepFeat_Gluer(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes an empty constructor

        :rtype: None

        * Initializes the shapes to be glued, the new shape Snew and the basis shape Sbase.

        :param Snew:
        :type Snew: TopoDS_Shape &
        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :rtype: None

        """
        _BRepFeat.BRepFeat_Gluer_swiginit(self, _BRepFeat.new_BRepFeat_Gluer(*args))

    def Init(self, *args):
        """
        * Initializes the new shape Snew and the basis shape Sbase for the local glueing operation.

        :param Snew:
        :type Snew: TopoDS_Shape &
        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Gluer_Init(self, *args)


    def Bind(self, *args):
        """
        * Defines a contact between Fnew on the new shape Snew and Fbase on the basis shape Sbase. Informs other methods that Fnew in the new shape Snew is connected to the face Fbase in the basis shape Sbase. The contact faces of the glued shape must not have parts outside the contact faces of the basis shape. This indicates that glueing is possible.

        :param Fnew:
        :type Fnew: TopoDS_Face &
        :param Fbase:
        :type Fbase: TopoDS_Face &
        :rtype: None

        * nforms other methods that the edge Enew in the new shape is the same as the edge Ebase in the basis shape and is therefore attached to the basis shape. This indicates that glueing is possible.

        :param Enew:
        :type Enew: TopoDS_Edge &
        :param Ebase:
        :type Ebase: TopoDS_Edge &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_Gluer_Bind(self, *args)


    def OpeType(self, *args):
        """
        * Determine which operation type to use glueing or sliding.

        :rtype: LocOpe_Operation

        """
        return _BRepFeat.BRepFeat_Gluer_OpeType(self, *args)


    def BasisShape(self, *args):
        """
        * Returns the basis shape of the compound shape.

        :rtype: TopoDS_Shape

        """
        return _BRepFeat.BRepFeat_Gluer_BasisShape(self, *args)


    def GluedShape(self, *args):
        """
        * Returns the resulting compound shape.

        :rtype: TopoDS_Shape

        """
        return _BRepFeat.BRepFeat_Gluer_GluedShape(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_Gluer.Init = new_instancemethod(_BRepFeat.BRepFeat_Gluer_Init, None, BRepFeat_Gluer)
BRepFeat_Gluer.Bind = new_instancemethod(_BRepFeat.BRepFeat_Gluer_Bind, None, BRepFeat_Gluer)
BRepFeat_Gluer.OpeType = new_instancemethod(_BRepFeat.BRepFeat_Gluer_OpeType, None, BRepFeat_Gluer)
BRepFeat_Gluer.BasisShape = new_instancemethod(_BRepFeat.BRepFeat_Gluer_BasisShape, None, BRepFeat_Gluer)
BRepFeat_Gluer.GluedShape = new_instancemethod(_BRepFeat.BRepFeat_Gluer_GluedShape, None, BRepFeat_Gluer)
BRepFeat_Gluer._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_Gluer__kill_pointed, None, BRepFeat_Gluer)
BRepFeat_Gluer_swigregister = _BRepFeat.BRepFeat_Gluer_swigregister
BRepFeat_Gluer_swigregister(BRepFeat_Gluer)

class BRepFeat_RibSlot(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstShape(self, *args):
        """
        * Returns the list of shapes created at the bottom of the created form. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_RibSlot_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        * Returns the list of shapes created at the top of the created form. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_RibSlot_LastShape(self, *args)


    def FacesForDraft(self, *args):
        """
        * Returns a list of the limiting and glueing faces generated by the feature. These faces did not originally exist in the basis shape. The list provides the information necessary for subsequent addition of a draft to a face. It may be an empty list. If a face has tangent edges, no draft is possible, and the tangent edges must subsequently be removed if you want to add a draft to the face.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_RibSlot_FacesForDraft(self, *args)


    def NewEdges(self, *args):
        """
        * Returns a list of the limiting and glueing edges generated by the feature. These edges did not originally exist in the basis shape. The list provides the information necessary for subsequent addition of fillets. It may be an empty list.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_RibSlot_NewEdges(self, *args)


    def TgtEdges(self, *args):
        """
        * Returns a list of the tangent edges among the limiting and glueing edges generated by the feature. These edges did not originally exist in the basis shape and are tangent to the face against which the feature is built. The list provides the information necessary for subsequent addition of fillets. It may be an empty list. If an edge is tangent, no fillet is possible, and the edge must subsequently be removed if you want to add a fillet.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_RibSlot_TgtEdges(self, *args)


    def IntPar(*args):
        """
        :param C:
        :type C: Handle_Geom_Curve &
        :param P:
        :type P: gp_Pnt
        :rtype: float

        """
        return _BRepFeat.BRepFeat_RibSlot_IntPar(*args)

    IntPar = staticmethod(IntPar)

    def ChoiceOfFaces(*args):
        """
        :param faces:
        :type faces: TopTools_ListOfShape &
        :param cc:
        :type cc: Handle_Geom_Curve &
        :param par:
        :type par: float
        :param bnd:
        :type bnd: float
        :param Pln:
        :type Pln: Handle_Geom_Plane &
        :rtype: TopoDS_Face

        """
        return _BRepFeat.BRepFeat_RibSlot_ChoiceOfFaces(*args)

    ChoiceOfFaces = staticmethod(ChoiceOfFaces)

    def CurrentStatusError(self, *args):
        """
        :rtype: BRepFeat_StatusError

        """
        return _BRepFeat.BRepFeat_RibSlot_CurrentStatusError(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_RibSlot.FirstShape = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_FirstShape, None, BRepFeat_RibSlot)
BRepFeat_RibSlot.LastShape = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_LastShape, None, BRepFeat_RibSlot)
BRepFeat_RibSlot.FacesForDraft = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_FacesForDraft, None, BRepFeat_RibSlot)
BRepFeat_RibSlot.NewEdges = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_NewEdges, None, BRepFeat_RibSlot)
BRepFeat_RibSlot.TgtEdges = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_TgtEdges, None, BRepFeat_RibSlot)
BRepFeat_RibSlot.CurrentStatusError = new_instancemethod(_BRepFeat.BRepFeat_RibSlot_CurrentStatusError, None, BRepFeat_RibSlot)
BRepFeat_RibSlot._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_RibSlot__kill_pointed, None, BRepFeat_RibSlot)
BRepFeat_RibSlot_swigregister = _BRepFeat.BRepFeat_RibSlot_swigregister
BRepFeat_RibSlot_swigregister(BRepFeat_RibSlot)

def BRepFeat_RibSlot_IntPar(*args):
    """
    :param C:
    :type C: Handle_Geom_Curve &
    :param P:
    :type P: gp_Pnt
    :rtype: float

    """
    return _BRepFeat.BRepFeat_RibSlot_IntPar(*args)

def BRepFeat_RibSlot_ChoiceOfFaces(*args):
    """
    :param faces:
    :type faces: TopTools_ListOfShape &
    :param cc:
    :type cc: Handle_Geom_Curve &
    :param par:
    :type par: float
    :param bnd:
    :type bnd: float
    :param Pln:
    :type Pln: Handle_Geom_Plane &
    :rtype: TopoDS_Face

    """
    return _BRepFeat.BRepFeat_RibSlot_ChoiceOfFaces(*args)

class BRepFeat_SplitShape(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Creates the process with the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _BRepFeat.BRepFeat_SplitShape_swiginit(self, _BRepFeat.new_BRepFeat_SplitShape(*args))

    def Init(self, *args):
        """
        * Initializes the process on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_SplitShape_Init(self, *args)


    def SetCheckInterior(self, *args):
        """
        * Set the flag of check internal intersections default value is True (to check)

        :param ToCheckInterior:
        :type ToCheckInterior: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_SplitShape_SetCheckInterior(self, *args)


    def Add(self, *args):
        """
        * Adds the wire <W> on the face <F>. Raises NoSuchObject if <F> does not belong to the original shape.

        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Adds the edge <E> on the face <F>.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Adds the compound <Comp> on the face <F>. The compound <Comp> must consist of edges lying on the face <F>. If edges are geometrically connected, they must be connected topologically, i.e. they must share common vertices. Raises NoSuchObject if <F> does not belong to the original shape.

        :param Comp:
        :type Comp: TopoDS_Compound &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Adds the edge <E> on the existing edge <EOn>.

        :param E:
        :type E: TopoDS_Edge &
        :param EOn:
        :type EOn: TopoDS_Edge &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_SplitShape_Add(self, *args)


    def DirectLeft(self, *args):
        """
        * Returns the faces which are the left of the projected wires.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_SplitShape_DirectLeft(self, *args)


    def Left(self, *args):
        """
        * Returns the faces of the 'left' part on the shape. (It is build from DirectLeft, with the faces connected to this set, and so on...). Raises NotDone if IsDone returns <Standard_False>.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_SplitShape_Left(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_SplitShape.Init = new_instancemethod(_BRepFeat.BRepFeat_SplitShape_Init, None, BRepFeat_SplitShape)
BRepFeat_SplitShape.SetCheckInterior = new_instancemethod(_BRepFeat.BRepFeat_SplitShape_SetCheckInterior, None, BRepFeat_SplitShape)
BRepFeat_SplitShape.Add = new_instancemethod(_BRepFeat.BRepFeat_SplitShape_Add, None, BRepFeat_SplitShape)
BRepFeat_SplitShape.DirectLeft = new_instancemethod(_BRepFeat.BRepFeat_SplitShape_DirectLeft, None, BRepFeat_SplitShape)
BRepFeat_SplitShape.Left = new_instancemethod(_BRepFeat.BRepFeat_SplitShape_Left, None, BRepFeat_SplitShape)
BRepFeat_SplitShape._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_SplitShape__kill_pointed, None, BRepFeat_SplitShape)
BRepFeat_SplitShape_swigregister = _BRepFeat.BRepFeat_SplitShape_swigregister
BRepFeat_SplitShape_swigregister(BRepFeat_SplitShape)

class BRepFeat_MakeCylindricalHole(BRepFeat_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _BRepFeat.BRepFeat_MakeCylindricalHole_swiginit(self, _BRepFeat.new_BRepFeat_MakeCylindricalHole(*args))

    def Init(self, *args):
        """
        * Sets the axis of the hole(s).

        :param Axis:
        :type Axis: gp_Ax1
        :rtype: None

        * Sets the shape and axis on which hole(s) will be performed.

        :param S:
        :type S: TopoDS_Shape &
        :param Axis:
        :type Axis: gp_Ax1
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_Init(self, *args)


    def Perform(self, *args):
        """
        * Performs every holes of radius <Radius>. This command has the same effect as a cut operation with an infinite cylinder defined by the given axis and <Radius>.

        :param Radius:
        :type Radius: float
        :rtype: None

        * Performs evry hole of radius <Radius> located between PFrom and PTo on the given axis. If <WithControl> is set to Standard_False no control are done on the resulting shape after the operation is performed.

        :param Radius:
        :type Radius: float
        :param PFrom:
        :type PFrom: float
        :param PTo:
        :type PTo: float
        :param WithControl: default value is Standard_True
        :type WithControl: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_Perform(self, *args)


    def PerformThruNext(self, *args):
        """
        * Performs the first hole of radius <Radius>, in the direction of the defined axis. First hole signify first encountered after the origin of the axis. If <WithControl> is set to Standard_False no control are done on the resulting shape after the operation is performed.

        :param Radius:
        :type Radius: float
        :param WithControl: default value is Standard_True
        :type WithControl: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_PerformThruNext(self, *args)


    def PerformUntilEnd(self, *args):
        """
        * Performs evry holes of radius <Radius> located after the origin of the given axis. If <WithControl> is set to Standard_False no control are done on the resulting shape after the operation is performed.

        :param Radius:
        :type Radius: float
        :param WithControl: default value is Standard_True
        :type WithControl: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_PerformUntilEnd(self, *args)


    def PerformBlind(self, *args):
        """
        * Performs a blind hole of radius <Radius> and length <Length>. The length is measured from the origin of the given axis. If <WithControl> is set to Standard_False no control are done after the operation is performed.

        :param Radius:
        :type Radius: float
        :param Length:
        :type Length: float
        :param WithControl: default value is Standard_True
        :type WithControl: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_PerformBlind(self, *args)


    def Status(self, *args):
        """
        * Returns the status after a hole is performed.

        :rtype: BRepFeat_Status

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_Status(self, *args)


    def Build(self, *args):
        """
        * Builds the resulting shape (redefined from MakeShape). Invalidates the given parts of tools if any, and performs the result of the local operation.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeCylindricalHole_Build(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakeCylindricalHole.Init = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_Init, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_Perform, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.PerformThruNext = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_PerformThruNext, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.PerformUntilEnd = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_PerformUntilEnd, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.PerformBlind = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_PerformBlind, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.Status = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_Status, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole.Build = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole_Build, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakeCylindricalHole__kill_pointed, None, BRepFeat_MakeCylindricalHole)
BRepFeat_MakeCylindricalHole_swigregister = _BRepFeat.BRepFeat_MakeCylindricalHole_swigregister
BRepFeat_MakeCylindricalHole_swigregister(BRepFeat_MakeCylindricalHole)

class BRepFeat_MakeDPrism(BRepFeat_Form):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * A face Pbase is selected in the shape Sbase to serve as the basis for the draft prism. The draft will be defined by the angle Angle and Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed. Initializes the draft prism class

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Face &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Angle:
        :type Angle: float
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        :rtype: None

        """
        _BRepFeat.BRepFeat_MakeDPrism_swiginit(self, _BRepFeat.new_BRepFeat_MakeDPrism(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for building draft prisms along surfaces. A face Pbase is selected in the basis shape Sbase to serve as the basis from the draft prism. The draft will be defined by the angle Angle and Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Face &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Angle:
        :type Angle: float
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_Add(self, *args)


    def Perform(self, *args):
        """
        :param Height:
        :type Height: float
        :rtype: None

        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        * Assigns one of the following semantics - to a height Height - to a face Until - from a face From to a height Until. Reconstructs the feature topologically according to the semantic option chosen.

        :param From:
        :type From: TopoDS_Shape &
        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_Perform(self, *args)


    def PerformUntilEnd(self, *args):
        """
        * Realizes a semi-infinite prism, limited by the position of the prism base.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_PerformUntilEnd(self, *args)


    def PerformFromEnd(self, *args):
        """
        * Realizes a semi-infinite prism, limited by the face Funtil.

        :param FUntil:
        :type FUntil: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_PerformFromEnd(self, *args)


    def PerformThruAll(self, *args):
        """
        * Builds an infinite prism. The infinite descendants will not be kept in the result.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_PerformThruAll(self, *args)


    def PerformUntilHeight(self, *args):
        """
        * Assigns both a limiting shape, Until from TopoDS_Shape, and a height, Height at which to stop generation of the prism feature.

        :param Until:
        :type Until: TopoDS_Shape &
        :param Height:
        :type Height: float
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_PerformUntilHeight(self, *args)


    def BossEdges(self, *args):
        """
        * Determination of TopEdges and LatEdges. sig = 1 -> TopEdges = FirstShape of the DPrism sig = 2 -> TOpEdges = LastShape of the DPrism

        :param sig:
        :type sig: int
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeDPrism_BossEdges(self, *args)


    def TopEdges(self, *args):
        """
        * Returns the list of TopoDS Edges of the top of the boss.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_MakeDPrism_TopEdges(self, *args)


    def LatEdges(self, *args):
        """
        * Returns the list of TopoDS Edges of the bottom of the boss.

        :rtype: TopTools_ListOfShape

        """
        return _BRepFeat.BRepFeat_MakeDPrism_LatEdges(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakeDPrism.Init = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_Init, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.Add = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_Add, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_Perform, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.PerformUntilEnd = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_PerformUntilEnd, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.PerformFromEnd = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_PerformFromEnd, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.PerformThruAll = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_PerformThruAll, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.PerformUntilHeight = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_PerformUntilHeight, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.BossEdges = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_BossEdges, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.TopEdges = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_TopEdges, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism.LatEdges = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism_LatEdges, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakeDPrism__kill_pointed, None, BRepFeat_MakeDPrism)
BRepFeat_MakeDPrism_swigregister = _BRepFeat.BRepFeat_MakeDPrism_swigregister
BRepFeat_MakeDPrism_swigregister(BRepFeat_MakeDPrism)

class BRepFeat_MakeLinearForm(BRepFeat_RibSlot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * initializes the linear form class

        :rtype: None

        * contour W, a shape Sbase and a plane P are initialized to serve as the basic elements in the construction of the rib or groove. Direction and Direction1 give The vectors for defining the direction(s) in which thickness will be built up. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 in case of the groove - adding matter with Boolean fusion using the setting 1 in case of the rib.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param W:
        :type W: TopoDS_Wire &
        :param P:
        :type P: Handle_Geom_Plane &
        :param Direction:
        :type Direction: gp_Vec
        :param Direction1:
        :type Direction1: gp_Vec
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        _BRepFeat.BRepFeat_MakeLinearForm_swiginit(self, _BRepFeat.new_BRepFeat_MakeLinearForm(*args))

    def Init(self, *args):
        """
        * Initializes this construction algorithm. A contour W, a shape Sbase and a plane P are initialized to serve as the basic elements in the construction of the rib or groove. The vectors for defining the direction(s) in which thickness will be built up are given by Direction and Direction1. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 in case of the groove - adding matter with Boolean fusion using the setting 1 in case of the rib.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param W:
        :type W: TopoDS_Wire &
        :param P:
        :type P: Handle_Geom_Plane &
        :param Direction:
        :type Direction: gp_Vec
        :param Direction1:
        :type Direction1: gp_Vec
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeLinearForm_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeLinearForm_Add(self, *args)


    def Perform(self, *args):
        """
        * Performs a prism from the wire to the plane along the basis shape Sbase. Reconstructs the feature topologically.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeLinearForm_Perform(self, *args)


    def Propagate(self, *args):
        """
        :param L:
        :type L: TopTools_ListOfShape &
        :param F:
        :type F: TopoDS_Face &
        :param FPoint:
        :type FPoint: gp_Pnt
        :param LPoint:
        :type LPoint: gp_Pnt
        :param falseside:
        :type falseside: bool
        :rtype: bool

        """
        return _BRepFeat.BRepFeat_MakeLinearForm_Propagate(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakeLinearForm.Init = new_instancemethod(_BRepFeat.BRepFeat_MakeLinearForm_Init, None, BRepFeat_MakeLinearForm)
BRepFeat_MakeLinearForm.Add = new_instancemethod(_BRepFeat.BRepFeat_MakeLinearForm_Add, None, BRepFeat_MakeLinearForm)
BRepFeat_MakeLinearForm.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakeLinearForm_Perform, None, BRepFeat_MakeLinearForm)
BRepFeat_MakeLinearForm.Propagate = new_instancemethod(_BRepFeat.BRepFeat_MakeLinearForm_Propagate, None, BRepFeat_MakeLinearForm)
BRepFeat_MakeLinearForm._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakeLinearForm__kill_pointed, None, BRepFeat_MakeLinearForm)
BRepFeat_MakeLinearForm_swigregister = _BRepFeat.BRepFeat_MakeLinearForm_swigregister
BRepFeat_MakeLinearForm_swigregister(BRepFeat_MakeLinearForm)

class BRepFeat_MakePipe(BRepFeat_Form):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * initializes the pipe class.

        :rtype: None

        * A face Pbase is selected in the shape Sbase to serve as the basis for the pipe. It will be defined by the wire Spine. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        _BRepFeat.BRepFeat_MakePipe_swiginit(self, _BRepFeat.new_BRepFeat_MakePipe(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for adding pipes to shapes. A face Pbase is selected in the shape Sbase to serve as the basis for the pipe. It will be defined by the wire Spine. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePipe_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePipe_Add(self, *args)


    def Perform(self, *args):
        """
        :rtype: None

        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        * Assigns one of the following semantics - to a face Until - from a face From to a height Until. Reconstructs the feature topologically according to the semantic option chosen.

        :param From:
        :type From: TopoDS_Shape &
        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePipe_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakePipe.Init = new_instancemethod(_BRepFeat.BRepFeat_MakePipe_Init, None, BRepFeat_MakePipe)
BRepFeat_MakePipe.Add = new_instancemethod(_BRepFeat.BRepFeat_MakePipe_Add, None, BRepFeat_MakePipe)
BRepFeat_MakePipe.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakePipe_Perform, None, BRepFeat_MakePipe)
BRepFeat_MakePipe._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakePipe__kill_pointed, None, BRepFeat_MakePipe)
BRepFeat_MakePipe_swigregister = _BRepFeat.BRepFeat_MakePipe_swigregister
BRepFeat_MakePipe_swigregister(BRepFeat_MakePipe)

class BRepFeat_MakePrism(BRepFeat_Form):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Builds a prism by projecting a wire along the face of a shape. Initializes the prism class.

        :rtype: None

        * Builds a prism by projecting a wire along the face of a shape. a face Pbase is selected in the shape Sbase to serve as the basis for the prism. The orientation of the prism will be defined by the vector Direction. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed. Exceptions Standard_ConstructionError if the face does not belong to the basis or the prism shape.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Direction:
        :type Direction: gp_Dir
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        _BRepFeat.BRepFeat_MakePrism_swiginit(self, _BRepFeat.new_BRepFeat_MakePrism(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for building prisms along surfaces. A face Pbase is selected in the shape Sbase to serve as the basis for the prism. The orientation of the prism will be defined by the vector Direction. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Direction:
        :type Direction: gp_Dir
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_Add(self, *args)


    def Perform(self, *args):
        """
        :param Length:
        :type Length: float
        :rtype: None

        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        * Assigns one of the following semantics - to a height Length - to a face Until - from a face From to a height Until. Reconstructs the feature topologically according to the semantic option chosen.

        :param From:
        :type From: TopoDS_Shape &
        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_Perform(self, *args)


    def PerformUntilEnd(self, *args):
        """
        * Realizes a semi-infinite prism, limited by the position of the prism base. All other faces extend infinitely.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_PerformUntilEnd(self, *args)


    def PerformFromEnd(self, *args):
        """
        * Realizes a semi-infinite prism, limited by the face Funtil.

        :param FUntil:
        :type FUntil: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_PerformFromEnd(self, *args)


    def PerformThruAll(self, *args):
        """
        * Builds an infinite prism. The infinite descendants will not be kept in the result.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_PerformThruAll(self, *args)


    def PerformUntilHeight(self, *args):
        """
        * Assigns both a limiting shape, Until from TopoDS_Shape, and a height, Length at which to stop generation of the prism feature.

        :param Until:
        :type Until: TopoDS_Shape &
        :param Length:
        :type Length: float
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakePrism_PerformUntilHeight(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakePrism.Init = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_Init, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.Add = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_Add, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_Perform, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.PerformUntilEnd = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_PerformUntilEnd, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.PerformFromEnd = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_PerformFromEnd, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.PerformThruAll = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_PerformThruAll, None, BRepFeat_MakePrism)
BRepFeat_MakePrism.PerformUntilHeight = new_instancemethod(_BRepFeat.BRepFeat_MakePrism_PerformUntilHeight, None, BRepFeat_MakePrism)
BRepFeat_MakePrism._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakePrism__kill_pointed, None, BRepFeat_MakePrism)
BRepFeat_MakePrism_swigregister = _BRepFeat.BRepFeat_MakePrism_swigregister
BRepFeat_MakePrism_swigregister(BRepFeat_MakePrism)

class BRepFeat_MakeRevol(BRepFeat_Form):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * initializes the revolved shell class.

        :rtype: None

        * a face Pbase is selected in the shape Sbase to serve as the basis for the revolved shell. The revolution will be defined by the axis Axis and Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 - adding matter with Boolean fusion using the setting 1. The sketch face Skface serves to determine the type of operation. If it is inside the basis shape, a local operation such as glueing can be performed.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Axis:
        :type Axis: gp_Ax1
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        _BRepFeat.BRepFeat_MakeRevol_swiginit(self, _BRepFeat.new_BRepFeat_MakeRevol(*args))

    def Init(self, *args):
        """
        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Pbase:
        :type Pbase: TopoDS_Shape &
        :param Skface:
        :type Skface: TopoDS_Face &
        :param Axis:
        :type Axis: gp_Ax1
        :param Fuse:
        :type Fuse: int
        :param Modify:
        :type Modify: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevol_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevol_Add(self, *args)


    def Perform(self, *args):
        """
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        * Reconstructs the feature topologically.

        :param From:
        :type From: TopoDS_Shape &
        :param Until:
        :type Until: TopoDS_Shape &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevol_Perform(self, *args)


    def PerformThruAll(self, *args):
        """
        * Builds an infinite shell. The infinite descendants will not be kept in the result.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevol_PerformThruAll(self, *args)


    def PerformUntilAngle(self, *args):
        """
        * Assigns both a limiting shape, Until from TopoDS_Shape, and an angle, Angle at which to stop generation of the revolved shell feature.

        :param Until:
        :type Until: TopoDS_Shape &
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevol_PerformUntilAngle(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakeRevol.Init = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol_Init, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol.Add = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol_Add, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol_Perform, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol.PerformThruAll = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol_PerformThruAll, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol.PerformUntilAngle = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol_PerformUntilAngle, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakeRevol__kill_pointed, None, BRepFeat_MakeRevol)
BRepFeat_MakeRevol_swigregister = _BRepFeat.BRepFeat_MakeRevol_swigregister
BRepFeat_MakeRevol_swigregister(BRepFeat_MakeRevol)

class BRepFeat_MakeRevolutionForm(BRepFeat_RibSlot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * initializes the linear form class.

        :rtype: None

        * a contour W, a shape Sbase and a plane P are initialized to serve as the basic elements in the construction of the rib or groove. The axis Axis of the revolved surface in the basis shape defines the feature's axis of revolution. Height1 and Height2 may be used as limits to the construction of the feature. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 in case of the groove - adding matter with Boolean fusion using the setting 1 in case of the rib.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param W:
        :type W: TopoDS_Wire &
        :param Plane:
        :type Plane: Handle_Geom_Plane &
        :param Axis:
        :type Axis: gp_Ax1
        :param Height1:
        :type Height1: float
        :param Height2:
        :type Height2: float
        :param Fuse:
        :type Fuse: int
        :param Sliding:
        :type Sliding: bool
        :rtype: None

        """
        _BRepFeat.BRepFeat_MakeRevolutionForm_swiginit(self, _BRepFeat.new_BRepFeat_MakeRevolutionForm(*args))

    def Init(self, *args):
        """
        * Initializes this construction algorithm A contour W, a shape Sbase and a plane P are initialized to serve as the basic elements in the construction of the rib or groove. The axis Axis of the revolved surface in the basis shape defines the feature's axis of revolution. Height1 and Height2 may be used as limits to the construction of the feature. Fuse offers a choice between: - removing matter with a Boolean cut using the setting 0 in case of the groove - adding matter with Boolean fusion using the setting 1 in case of the rib.

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param W:
        :type W: TopoDS_Wire &
        :param Plane:
        :type Plane: Handle_Geom_Plane &
        :param Axis:
        :type Axis: gp_Ax1
        :param Height1:
        :type Height1: float
        :param Height2:
        :type Height2: float
        :param Fuse:
        :type Fuse: int
        :param Sliding:
        :type Sliding: bool
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevolutionForm_Init(self, *args)


    def Add(self, *args):
        """
        * Indicates that the edge <E> will slide on the face <OnFace>. Raises ConstructionError if the face does not belong to the basis shape, or the edge to the prismed shape.

        :param E:
        :type E: TopoDS_Edge &
        :param OnFace:
        :type OnFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevolutionForm_Add(self, *args)


    def Perform(self, *args):
        """
        * Performs a prism from the wire to the plane along the basis shape S. Reconstructs the feature topologically.

        :rtype: None

        """
        return _BRepFeat.BRepFeat_MakeRevolutionForm_Perform(self, *args)


    def Propagate(self, *args):
        """
        :param L:
        :type L: TopTools_ListOfShape &
        :param F:
        :type F: TopoDS_Face &
        :param FPoint:
        :type FPoint: gp_Pnt
        :param LPoint:
        :type LPoint: gp_Pnt
        :param falseside:
        :type falseside: bool
        :rtype: bool

        """
        return _BRepFeat.BRepFeat_MakeRevolutionForm_Propagate(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFeat_MakeRevolutionForm.Init = new_instancemethod(_BRepFeat.BRepFeat_MakeRevolutionForm_Init, None, BRepFeat_MakeRevolutionForm)
BRepFeat_MakeRevolutionForm.Add = new_instancemethod(_BRepFeat.BRepFeat_MakeRevolutionForm_Add, None, BRepFeat_MakeRevolutionForm)
BRepFeat_MakeRevolutionForm.Perform = new_instancemethod(_BRepFeat.BRepFeat_MakeRevolutionForm_Perform, None, BRepFeat_MakeRevolutionForm)
BRepFeat_MakeRevolutionForm.Propagate = new_instancemethod(_BRepFeat.BRepFeat_MakeRevolutionForm_Propagate, None, BRepFeat_MakeRevolutionForm)
BRepFeat_MakeRevolutionForm._kill_pointed = new_instancemethod(_BRepFeat.BRepFeat_MakeRevolutionForm__kill_pointed, None, BRepFeat_MakeRevolutionForm)
BRepFeat_MakeRevolutionForm_swigregister = _BRepFeat.BRepFeat_MakeRevolutionForm_swigregister
BRepFeat_MakeRevolutionForm_swigregister(BRepFeat_MakeRevolutionForm)



