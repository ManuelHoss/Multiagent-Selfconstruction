# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _LocOpe.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LocOpe', [dirname(__file__)])
        except ImportError:
            import _LocOpe
            return _LocOpe
        if fp is not None:
            try:
                _mod = imp.load_module('_LocOpe', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _LocOpe = swig_import_helper()
    del swig_import_helper
else:
    import _LocOpe
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocOpe.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_LocOpe.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_LocOpe.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_LocOpe.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_LocOpe.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_LocOpe.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_LocOpe.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_LocOpe.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_LocOpe.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_LocOpe.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_LocOpe.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_LocOpe.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_LocOpe.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_LocOpe.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_LocOpe.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_LocOpe.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_LocOpe.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _LocOpe.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TColgp
import OCC.TopTools
import OCC.TColStd
import OCC.Message
import OCC.TColGeom
import OCC.Geom
import OCC.GeomAbs
import OCC.TopOpeBRepBuild
import OCC.TopOpeBRepTool
import OCC.Bnd
import OCC.Geom2d
import OCC.GeomAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.Geom2dAdaptor
import OCC.IntCurvesFace
import OCC.Extrema
import OCC.TopOpeBRepDS

_LocOpe.LocOpe_FUSE_swigconstant(_LocOpe)
LocOpe_FUSE = _LocOpe.LocOpe_FUSE

_LocOpe.LocOpe_CUT_swigconstant(_LocOpe)
LocOpe_CUT = _LocOpe.LocOpe_CUT

_LocOpe.LocOpe_INVALID_swigconstant(_LocOpe)
LocOpe_INVALID = _LocOpe.LocOpe_INVALID
class locope(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Closed(*args):
        """
        * Returns Standard_True when the wire <W> is closed on the face <OnF>.

        :param W:
        :type W: TopoDS_Wire &
        :param OnF:
        :type OnF: TopoDS_Face &
        :rtype: bool

        * Returns Standard_True when the edge <E> is closed on the face <OnF>.

        :param E:
        :type E: TopoDS_Edge &
        :param OnF:
        :type OnF: TopoDS_Face &
        :rtype: bool

        """
        return _LocOpe.locope_Closed(*args)

    Closed = staticmethod(Closed)

    def TgtFaces(*args):
        """
        * Returns Standard_True when the faces are tangent

        :param E:
        :type E: TopoDS_Edge &
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: bool

        """
        return _LocOpe.locope_TgtFaces(*args)

    TgtFaces = staticmethod(TgtFaces)

    def SampleEdges(*args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Pt:
        :type Pt: TColgp_SequenceOfPnt
        :rtype: void

        """
        return _LocOpe.locope_SampleEdges(*args)

    SampleEdges = staticmethod(SampleEdges)

    def __init__(self):
        _LocOpe.locope_swiginit(self, _LocOpe.new_locope())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


locope._kill_pointed = new_instancemethod(_LocOpe.locope__kill_pointed, None, locope)
locope_swigregister = _LocOpe.locope_swigregister
locope_swigregister(locope)

def locope_Closed(*args):
    """
    * Returns Standard_True when the wire <W> is closed on the face <OnF>.

    :param W:
    :type W: TopoDS_Wire &
    :param OnF:
    :type OnF: TopoDS_Face &
    :rtype: bool

    * Returns Standard_True when the edge <E> is closed on the face <OnF>.

    :param E:
    :type E: TopoDS_Edge &
    :param OnF:
    :type OnF: TopoDS_Face &
    :rtype: bool

    """
    return _LocOpe.locope_Closed(*args)

def locope_TgtFaces(*args):
    """
    * Returns Standard_True when the faces are tangent

    :param E:
    :type E: TopoDS_Edge &
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :rtype: bool

    """
    return _LocOpe.locope_TgtFaces(*args)

def locope_SampleEdges(*args):
    """
    :param S:
    :type S: TopoDS_Shape &
    :param Pt:
    :type Pt: TColgp_SequenceOfPnt
    :rtype: void

    """
    return _LocOpe.locope_SampleEdges(*args)

class LocOpe_BuildShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Builds shape(s) from the list <L>. Uses only the faces of <L>.

        :param L:
        :type L: TopTools_ListOfShape &
        :rtype: None

        """
        _LocOpe.LocOpe_BuildShape_swiginit(self, _LocOpe.new_LocOpe_BuildShape(*args))

    def Perform(self, *args):
        """
        * Builds shape(s) from the list <L>. Uses only the faces of <L>.

        :param L:
        :type L: TopTools_ListOfShape &
        :rtype: None

        """
        return _LocOpe.LocOpe_BuildShape_Perform(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_BuildShape_Shape(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_BuildShape.Perform = new_instancemethod(_LocOpe.LocOpe_BuildShape_Perform, None, LocOpe_BuildShape)
LocOpe_BuildShape.Shape = new_instancemethod(_LocOpe.LocOpe_BuildShape_Shape, None, LocOpe_BuildShape)
LocOpe_BuildShape._kill_pointed = new_instancemethod(_LocOpe.LocOpe_BuildShape__kill_pointed, None, LocOpe_BuildShape)
LocOpe_BuildShape_swigregister = _LocOpe.LocOpe_BuildShape_swigregister
LocOpe_BuildShape_swigregister(LocOpe_BuildShape)

class LocOpe_BuildWires(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Ledges:
        :type Ledges: TopTools_ListOfShape &
        :param PW:
        :type PW: Handle_LocOpe_ProjectedWires &
        :rtype: None

        """
        _LocOpe.LocOpe_BuildWires_swiginit(self, _LocOpe.new_LocOpe_BuildWires(*args))

    def Perform(self, *args):
        """
        :param Ledges:
        :type Ledges: TopTools_ListOfShape &
        :param PW:
        :type PW: Handle_LocOpe_ProjectedWires &
        :rtype: None

        """
        return _LocOpe.LocOpe_BuildWires_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_BuildWires_IsDone(self, *args)


    def Result(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_BuildWires_Result(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_BuildWires.Perform = new_instancemethod(_LocOpe.LocOpe_BuildWires_Perform, None, LocOpe_BuildWires)
LocOpe_BuildWires.IsDone = new_instancemethod(_LocOpe.LocOpe_BuildWires_IsDone, None, LocOpe_BuildWires)
LocOpe_BuildWires.Result = new_instancemethod(_LocOpe.LocOpe_BuildWires_Result, None, LocOpe_BuildWires)
LocOpe_BuildWires._kill_pointed = new_instancemethod(_LocOpe.LocOpe_BuildWires__kill_pointed, None, LocOpe_BuildWires)
LocOpe_BuildWires_swigregister = _LocOpe.LocOpe_BuildWires_swigregister
LocOpe_BuildWires_swigregister(LocOpe_BuildWires)

class LocOpe_CSIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates and performs the intersection betwwen <Ax1> and <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_CSIntersector_swiginit(self, _LocOpe.new_LocOpe_CSIntersector(*args))

    def Init(self, *args):
        """
        * Performs the intersection between <Ax1 and <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_CSIntersector_Init(self, *args)


    def Perform(self, *args):
        """
        :param Slin:
        :type Slin: LocOpe_SequenceOfLin &
        :rtype: None

        :param Scir:
        :type Scir: LocOpe_SequenceOfCirc &
        :rtype: None

        :param Scur:
        :type Scur: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _LocOpe.LocOpe_CSIntersector_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns <Standard_True> if the intersection has been done.

        :rtype: bool

        """
        return _LocOpe.LocOpe_CSIntersector_IsDone(self, *args)


    def NbPoints(self, *args):
        """
        * Returns the number of intersection point on the element of range <I>.

        :param I:
        :type I: int
        :rtype: int

        """
        return _LocOpe.LocOpe_CSIntersector_NbPoints(self, *args)


    def Point(self, *args):
        """
        * Returns the intersection point of range <Index> on element of range <I>. The points are sorted in increasing order of parameter along the axis.

        :param I:
        :type I: int
        :param Index:
        :type Index: int
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_CSIntersector_Point(self, *args)


    def LocalizeAfter(self, *args):
        """
        * On the element of range <I>, searches the first intersection point located after the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal.  Otherwise, returns <Standard_False>.

        :param I:
        :type I: int
        :param From:
        :type From: float
        :param Tol:
        :type Tol: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        * On the element of range <I>, searches the first intersection point located after the index <FromInd> ( >= FromInd + 1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal.  Otherwise, returns <Standard_False>.

        :param I:
        :type I: int
        :param FromInd:
        :type FromInd: int
        :param Tol:
        :type Tol: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        """
        return _LocOpe.LocOpe_CSIntersector_LocalizeAfter(self, *args)


    def LocalizeBefore(self, *args):
        """
        * On the element of range <I>, searches the first intersection point located before the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal.  Otherwise, returns <Standard_False>.

        :param I:
        :type I: int
        :param From:
        :type From: float
        :param Tol:
        :type Tol: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        * On the element of range <I>, searches the first intersection point located before the index <FromInd> ( <= FromInd -1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal.  Otherwise, returns <Standard_False>.

        :param I:
        :type I: int
        :param FromInd:
        :type FromInd: int
        :param Tol:
        :type Tol: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        """
        return _LocOpe.LocOpe_CSIntersector_LocalizeBefore(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_CSIntersector_Destroy(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_CSIntersector.Init = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Init, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Perform = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Perform, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.IsDone = new_instancemethod(_LocOpe.LocOpe_CSIntersector_IsDone, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.NbPoints = new_instancemethod(_LocOpe.LocOpe_CSIntersector_NbPoints, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Point = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Point, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.LocalizeAfter = new_instancemethod(_LocOpe.LocOpe_CSIntersector_LocalizeAfter, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.LocalizeBefore = new_instancemethod(_LocOpe.LocOpe_CSIntersector_LocalizeBefore, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Destroy = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Destroy, None, LocOpe_CSIntersector)
LocOpe_CSIntersector._kill_pointed = new_instancemethod(_LocOpe.LocOpe_CSIntersector__kill_pointed, None, LocOpe_CSIntersector)
LocOpe_CSIntersector_swigregister = _LocOpe.LocOpe_CSIntersector_swigregister
LocOpe_CSIntersector_swigregister(LocOpe_CSIntersector)

class LocOpe_CurveShapeIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates and performs the intersection betwwen <Ax1> and <S>.

        :param Axis:
        :type Axis: gp_Ax1
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        * Creates and performs yte intersection betwwen <C> and <S>.

        :param C:
        :type C: gp_Circ
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_CurveShapeIntersector_swiginit(self, _LocOpe.new_LocOpe_CurveShapeIntersector(*args))

    def Init(self, *args):
        """
        * Performs the intersection between <Ax1 and <S>.

        :param Axis:
        :type Axis: gp_Ax1
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        * Performs the intersection between <Ax1 and <S>.

        :param C:
        :type C: gp_Circ
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_Init(self, *args)


    def IsDone(self, *args):
        """
        * Returns <Standard_True> if the intersection has been done.

        :rtype: bool

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_IsDone(self, *args)


    def NbPoints(self, *args):
        """
        * Returns the number of intersection point.

        :rtype: int

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_NbPoints(self, *args)


    def Point(self, *args):
        """
        * Returns the intersection point of range <Index>. The points are sorted in increasing order of parameter along the axis.

        :param Index:
        :type Index: int
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_Point(self, *args)


    def LocalizeAfter(self, *args):
        """
        * Searches the first intersection point located after the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo).  Otherwise, returns <Standard_False>.

        :param From:
        :type From: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        * Searches the first intersection point located after the index <FromInd> ( >= FromInd + 1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo).  Otherwise, returns <Standard_False>.

        :param FromInd:
        :type FromInd: int
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_LocalizeAfter(self, *args)


    def LocalizeBefore(self, *args):
        """
        * Searches the first intersection point located before the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo).  Otherwise, returns <Standard_False>.

        :param From:
        :type From: float
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        * Searches the first intersection point located before the index <FromInd> ( <= FromInd -1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo).  Otherwise, returns <Standard_False>.

        :param FromInd:
        :type FromInd: int
        :param Or:
        :type Or: TopAbs_Orientation &
        :param IndFrom:
        :type IndFrom: int &
        :param IndTo:
        :type IndTo: int &
        :rtype: bool

        """
        return _LocOpe.LocOpe_CurveShapeIntersector_LocalizeBefore(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_CurveShapeIntersector.Init = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_Init, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.IsDone = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_IsDone, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.NbPoints = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_NbPoints, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.Point = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_Point, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.LocalizeAfter = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_LocalizeAfter, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.LocalizeBefore = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_LocalizeBefore, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector._kill_pointed = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector__kill_pointed, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector_swigregister = _LocOpe.LocOpe_CurveShapeIntersector_swigregister
LocOpe_CurveShapeIntersector_swigregister(LocOpe_CurveShapeIntersector)

class LocOpe_DPrism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Spine:
        :type Spine: TopoDS_Face &
        :param Height1:
        :type Height1: float
        :param Height2:
        :type Height2: float
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Height:
        :type Height: float
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _LocOpe.LocOpe_DPrism_swiginit(self, _LocOpe.new_LocOpe_DPrism(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_DPrism_IsDone(self, *args)


    def Spine(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DPrism_Spine(self, *args)


    def Profile(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DPrism_Profile(self, *args)


    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DPrism_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DPrism_LastShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DPrism_Shape(self, *args)


    def Shapes(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_DPrism_Shapes(self, *args)


    def Curves(self, *args):
        """
        :param SCurves:
        :type SCurves: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _LocOpe.LocOpe_DPrism_Curves(self, *args)


    def BarycCurve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _LocOpe.LocOpe_DPrism_BarycCurve(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_DPrism.IsDone = new_instancemethod(_LocOpe.LocOpe_DPrism_IsDone, None, LocOpe_DPrism)
LocOpe_DPrism.Spine = new_instancemethod(_LocOpe.LocOpe_DPrism_Spine, None, LocOpe_DPrism)
LocOpe_DPrism.Profile = new_instancemethod(_LocOpe.LocOpe_DPrism_Profile, None, LocOpe_DPrism)
LocOpe_DPrism.FirstShape = new_instancemethod(_LocOpe.LocOpe_DPrism_FirstShape, None, LocOpe_DPrism)
LocOpe_DPrism.LastShape = new_instancemethod(_LocOpe.LocOpe_DPrism_LastShape, None, LocOpe_DPrism)
LocOpe_DPrism.Shape = new_instancemethod(_LocOpe.LocOpe_DPrism_Shape, None, LocOpe_DPrism)
LocOpe_DPrism.Shapes = new_instancemethod(_LocOpe.LocOpe_DPrism_Shapes, None, LocOpe_DPrism)
LocOpe_DPrism.Curves = new_instancemethod(_LocOpe.LocOpe_DPrism_Curves, None, LocOpe_DPrism)
LocOpe_DPrism.BarycCurve = new_instancemethod(_LocOpe.LocOpe_DPrism_BarycCurve, None, LocOpe_DPrism)
LocOpe_DPrism._kill_pointed = new_instancemethod(_LocOpe.LocOpe_DPrism__kill_pointed, None, LocOpe_DPrism)
LocOpe_DPrism_swigregister = _LocOpe.LocOpe_DPrism_swigregister
LocOpe_DPrism_swigregister(LocOpe_DPrism)

class LocOpe_DataMapIteratorOfDataMapOfShapePnt(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: LocOpe_DataMapOfShapePnt &
        :rtype: None

        """
        _LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_swiginit(self, _LocOpe.new_LocOpe_DataMapIteratorOfDataMapOfShapePnt(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: LocOpe_DataMapOfShapePnt &
        :rtype: None

        """
        return _LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_DataMapIteratorOfDataMapOfShapePnt.Initialize = new_instancemethod(_LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Initialize, None, LocOpe_DataMapIteratorOfDataMapOfShapePnt)
LocOpe_DataMapIteratorOfDataMapOfShapePnt.Key = new_instancemethod(_LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Key, None, LocOpe_DataMapIteratorOfDataMapOfShapePnt)
LocOpe_DataMapIteratorOfDataMapOfShapePnt.Value = new_instancemethod(_LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_Value, None, LocOpe_DataMapIteratorOfDataMapOfShapePnt)
LocOpe_DataMapIteratorOfDataMapOfShapePnt._kill_pointed = new_instancemethod(_LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt__kill_pointed, None, LocOpe_DataMapIteratorOfDataMapOfShapePnt)
LocOpe_DataMapIteratorOfDataMapOfShapePnt_swigregister = _LocOpe.LocOpe_DataMapIteratorOfDataMapOfShapePnt_swigregister
LocOpe_DataMapIteratorOfDataMapOfShapePnt_swigregister(LocOpe_DataMapIteratorOfDataMapOfShapePnt)

class LocOpe_DataMapNodeOfDataMapOfShapePnt(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: gp_Pnt
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_swiginit(self, _LocOpe.new_LocOpe_DataMapNodeOfDataMapOfShapePnt(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_DataMapNodeOfDataMapOfShapePnt self)"""
        return _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_DataMapNodeOfDataMapOfShapePnt self) -> Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt"""
        return _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_DataMapNodeOfDataMapOfShapePnt.Key = new_instancemethod(_LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_Key, None, LocOpe_DataMapNodeOfDataMapOfShapePnt)
LocOpe_DataMapNodeOfDataMapOfShapePnt.Value = new_instancemethod(_LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_Value, None, LocOpe_DataMapNodeOfDataMapOfShapePnt)
LocOpe_DataMapNodeOfDataMapOfShapePnt._kill_pointed = new_instancemethod(_LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt__kill_pointed, None, LocOpe_DataMapNodeOfDataMapOfShapePnt)
LocOpe_DataMapNodeOfDataMapOfShapePnt.GetHandle = new_instancemethod(_LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_GetHandle, None, LocOpe_DataMapNodeOfDataMapOfShapePnt)
LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister = _LocOpe.LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister
LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister(LocOpe_DataMapNodeOfDataMapOfShapePnt)

class Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_swiginit(self, _LocOpe.new_Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_Nullify, None, Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt)
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_IsNull, None, Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt)
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_GetObject, None, Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt)
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt__kill_pointed, None, Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt)
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister = _LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_swigregister(Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt)

def Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_DownCast(AnObject)
Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_DownCast = _LocOpe.Handle_LocOpe_DataMapNodeOfDataMapOfShapePnt_DownCast

class LocOpe_DataMapOfShapePnt(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _LocOpe.LocOpe_DataMapOfShapePnt_swiginit(self, _LocOpe.new_LocOpe_DataMapOfShapePnt(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: LocOpe_DataMapOfShapePnt &
        :rtype: LocOpe_DataMapOfShapePnt

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: LocOpe_DataMapOfShapePnt &
        :rtype: LocOpe_DataMapOfShapePnt

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: gp_Pnt
        :rtype: bool

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: gp_Pnt

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: gp_Pnt

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _LocOpe.LocOpe_DataMapOfShapePnt_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_DataMapOfShapePnt self)"""
        return _LocOpe.LocOpe_DataMapOfShapePnt__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_DataMapOfShapePnt.Assign = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Assign, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Set = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Set, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ReSize = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ReSize, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Clear = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Clear, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Bind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Bind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.IsBound = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_IsBound, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.UnBind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_UnBind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Find = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Find, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ChangeFind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ChangeFind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Find1 = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Find1, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ChangeFind1 = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ChangeFind1, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt._kill_pointed = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt__kill_pointed, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt_swigregister = _LocOpe.LocOpe_DataMapOfShapePnt_swigregister
LocOpe_DataMapOfShapePnt_swigregister(LocOpe_DataMapOfShapePnt)

class LocOpe_FindEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param FFrom:
        :type FFrom: TopoDS_Shape &
        :param FTo:
        :type FTo: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_FindEdges_swiginit(self, _LocOpe.new_LocOpe_FindEdges(*args))

    def Set(self, *args):
        """
        :param FFrom:
        :type FFrom: TopoDS_Shape &
        :param FTo:
        :type FTo: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdges_Set(self, *args)


    def InitIterator(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdges_InitIterator(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_FindEdges_More(self, *args)


    def EdgeFrom(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _LocOpe.LocOpe_FindEdges_EdgeFrom(self, *args)


    def EdgeTo(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _LocOpe.LocOpe_FindEdges_EdgeTo(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdges_Next(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_FindEdges.Set = new_instancemethod(_LocOpe.LocOpe_FindEdges_Set, None, LocOpe_FindEdges)
LocOpe_FindEdges.InitIterator = new_instancemethod(_LocOpe.LocOpe_FindEdges_InitIterator, None, LocOpe_FindEdges)
LocOpe_FindEdges.More = new_instancemethod(_LocOpe.LocOpe_FindEdges_More, None, LocOpe_FindEdges)
LocOpe_FindEdges.EdgeFrom = new_instancemethod(_LocOpe.LocOpe_FindEdges_EdgeFrom, None, LocOpe_FindEdges)
LocOpe_FindEdges.EdgeTo = new_instancemethod(_LocOpe.LocOpe_FindEdges_EdgeTo, None, LocOpe_FindEdges)
LocOpe_FindEdges.Next = new_instancemethod(_LocOpe.LocOpe_FindEdges_Next, None, LocOpe_FindEdges)
LocOpe_FindEdges._kill_pointed = new_instancemethod(_LocOpe.LocOpe_FindEdges__kill_pointed, None, LocOpe_FindEdges)
LocOpe_FindEdges_swigregister = _LocOpe.LocOpe_FindEdges_swigregister
LocOpe_FindEdges_swigregister(LocOpe_FindEdges)

class LocOpe_FindEdgesInFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _LocOpe.LocOpe_FindEdgesInFace_swiginit(self, _LocOpe.new_LocOpe_FindEdgesInFace(*args))

    def Set(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdgesInFace_Set(self, *args)


    def Init(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdgesInFace_Init(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_FindEdgesInFace_More(self, *args)


    def Edge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _LocOpe.LocOpe_FindEdgesInFace_Edge(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_FindEdgesInFace_Next(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_FindEdgesInFace.Set = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Set, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Init = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Init, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.More = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_More, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Edge = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Edge, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Next = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Next, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace._kill_pointed = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace__kill_pointed, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace_swigregister = _LocOpe.LocOpe_FindEdgesInFace_swigregister
LocOpe_FindEdgesInFace_swigregister(LocOpe_FindEdgesInFace)

class LocOpe_GeneratedShape(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GeneratingEdges(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_GeneratedShape_GeneratingEdges(self, *args)


    def Generated(self, *args):
        """
        * Returns the edge created by the vertex <V>. If none, must return a null shape.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: TopoDS_Edge

        * Returns the face created by the edge <E>. If none, must return a null shape.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Face

        """
        return _LocOpe.LocOpe_GeneratedShape_Generated(self, *args)


    def OrientedFaces(self, *args):
        """
        * Returns the list of correctly oriented generated faces.

        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_GeneratedShape_OrientedFaces(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_GeneratedShape self)"""
        return _LocOpe.LocOpe_GeneratedShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_GeneratedShape self) -> Handle_LocOpe_GeneratedShape"""
        return _LocOpe.LocOpe_GeneratedShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_GeneratedShape.GeneratingEdges = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_GeneratingEdges, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape.Generated = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_Generated, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape.OrientedFaces = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_OrientedFaces, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape._kill_pointed = new_instancemethod(_LocOpe.LocOpe_GeneratedShape__kill_pointed, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape.GetHandle = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_GetHandle, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape_swigregister = _LocOpe.LocOpe_GeneratedShape_swigregister
LocOpe_GeneratedShape_swigregister(LocOpe_GeneratedShape)

class Handle_LocOpe_GeneratedShape(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_GeneratedShape_swiginit(self, _LocOpe.new_Handle_LocOpe_GeneratedShape(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_GeneratedShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_GeneratedShape.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_GeneratedShape_Nullify, None, Handle_LocOpe_GeneratedShape)
Handle_LocOpe_GeneratedShape.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_GeneratedShape_IsNull, None, Handle_LocOpe_GeneratedShape)
Handle_LocOpe_GeneratedShape.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_GeneratedShape_GetObject, None, Handle_LocOpe_GeneratedShape)
Handle_LocOpe_GeneratedShape._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_GeneratedShape__kill_pointed, None, Handle_LocOpe_GeneratedShape)
Handle_LocOpe_GeneratedShape_swigregister = _LocOpe.Handle_LocOpe_GeneratedShape_swigregister
Handle_LocOpe_GeneratedShape_swigregister(Handle_LocOpe_GeneratedShape)

def Handle_LocOpe_GeneratedShape_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_GeneratedShape_DownCast(AnObject)
Handle_LocOpe_GeneratedShape_DownCast = _LocOpe.Handle_LocOpe_GeneratedShape_DownCast

class LocOpe_Generator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates the algorithm on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_Generator_swiginit(self, _LocOpe.new_LocOpe_Generator(*args))

    def Init(self, *args):
        """
        * Initializes the algorithm on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_Generator_Init(self, *args)


    def Perform(self, *args):
        """
        :param G:
        :type G: Handle_LocOpe_GeneratedShape &
        :rtype: None

        """
        return _LocOpe.LocOpe_Generator_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_Generator_IsDone(self, *args)


    def ResultingShape(self, *args):
        """
        * Returns the new shape

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Generator_ResultingShape(self, *args)


    def Shape(self, *args):
        """
        * Returns the initial shape

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Generator_Shape(self, *args)


    def DescendantFace(self, *args):
        """
        * Returns the descendant face of <F>. <F> may belong to the original shape or to the 'generated' shape. The returned face may be a null shape (when <F> disappears).

        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Generator_DescendantFace(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_Generator.Init = new_instancemethod(_LocOpe.LocOpe_Generator_Init, None, LocOpe_Generator)
LocOpe_Generator.Perform = new_instancemethod(_LocOpe.LocOpe_Generator_Perform, None, LocOpe_Generator)
LocOpe_Generator.IsDone = new_instancemethod(_LocOpe.LocOpe_Generator_IsDone, None, LocOpe_Generator)
LocOpe_Generator.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Generator_ResultingShape, None, LocOpe_Generator)
LocOpe_Generator.Shape = new_instancemethod(_LocOpe.LocOpe_Generator_Shape, None, LocOpe_Generator)
LocOpe_Generator.DescendantFace = new_instancemethod(_LocOpe.LocOpe_Generator_DescendantFace, None, LocOpe_Generator)
LocOpe_Generator._kill_pointed = new_instancemethod(_LocOpe.LocOpe_Generator__kill_pointed, None, LocOpe_Generator)
LocOpe_Generator_swigregister = _LocOpe.LocOpe_Generator_swigregister
LocOpe_Generator_swigregister(LocOpe_Generator)

class LocOpe_Gluer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Snew:
        :type Snew: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_Gluer_swiginit(self, _LocOpe.new_LocOpe_Gluer(*args))

    def Init(self, *args):
        """
        :param Sbase:
        :type Sbase: TopoDS_Shape &
        :param Snew:
        :type Snew: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_Gluer_Init(self, *args)


    def Bind(self, *args):
        """
        :param Fnew:
        :type Fnew: TopoDS_Face &
        :param Fbase:
        :type Fbase: TopoDS_Face &
        :rtype: None

        :param Enew:
        :type Enew: TopoDS_Edge &
        :param Ebase:
        :type Ebase: TopoDS_Edge &
        :rtype: None

        """
        return _LocOpe.LocOpe_Gluer_Bind(self, *args)


    def OpeType(self, *args):
        """
        :rtype: LocOpe_Operation

        """
        return _LocOpe.LocOpe_Gluer_OpeType(self, *args)


    def Perform(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_Gluer_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_Gluer_IsDone(self, *args)


    def ResultingShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Gluer_ResultingShape(self, *args)


    def DescendantFaces(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Gluer_DescendantFaces(self, *args)


    def BasisShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Gluer_BasisShape(self, *args)


    def GluedShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Gluer_GluedShape(self, *args)


    def Edges(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Gluer_Edges(self, *args)


    def TgtEdges(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Gluer_TgtEdges(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_Gluer.Init = new_instancemethod(_LocOpe.LocOpe_Gluer_Init, None, LocOpe_Gluer)
LocOpe_Gluer.Bind = new_instancemethod(_LocOpe.LocOpe_Gluer_Bind, None, LocOpe_Gluer)
LocOpe_Gluer.OpeType = new_instancemethod(_LocOpe.LocOpe_Gluer_OpeType, None, LocOpe_Gluer)
LocOpe_Gluer.Perform = new_instancemethod(_LocOpe.LocOpe_Gluer_Perform, None, LocOpe_Gluer)
LocOpe_Gluer.IsDone = new_instancemethod(_LocOpe.LocOpe_Gluer_IsDone, None, LocOpe_Gluer)
LocOpe_Gluer.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Gluer_ResultingShape, None, LocOpe_Gluer)
LocOpe_Gluer.DescendantFaces = new_instancemethod(_LocOpe.LocOpe_Gluer_DescendantFaces, None, LocOpe_Gluer)
LocOpe_Gluer.BasisShape = new_instancemethod(_LocOpe.LocOpe_Gluer_BasisShape, None, LocOpe_Gluer)
LocOpe_Gluer.GluedShape = new_instancemethod(_LocOpe.LocOpe_Gluer_GluedShape, None, LocOpe_Gluer)
LocOpe_Gluer.Edges = new_instancemethod(_LocOpe.LocOpe_Gluer_Edges, None, LocOpe_Gluer)
LocOpe_Gluer.TgtEdges = new_instancemethod(_LocOpe.LocOpe_Gluer_TgtEdges, None, LocOpe_Gluer)
LocOpe_Gluer._kill_pointed = new_instancemethod(_LocOpe.LocOpe_Gluer__kill_pointed, None, LocOpe_Gluer)
LocOpe_Gluer_swigregister = _LocOpe.LocOpe_Gluer_swigregister
LocOpe_Gluer_swigregister(LocOpe_Gluer)

class LocOpe_HBuilder(OCC.TopOpeBRepBuild.TopOpeBRepBuild_HBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param BT:
        :type BT: TopOpeBRepDS_BuildTool &
        :rtype: None

        """
        _LocOpe.LocOpe_HBuilder_swiginit(self, _LocOpe.new_LocOpe_HBuilder(*args))

    def Classify(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _LocOpe.LocOpe_HBuilder_Classify(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_HBuilder self)"""
        return _LocOpe.LocOpe_HBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_HBuilder self) -> Handle_LocOpe_HBuilder"""
        return _LocOpe.LocOpe_HBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_HBuilder.Classify = new_instancemethod(_LocOpe.LocOpe_HBuilder_Classify, None, LocOpe_HBuilder)
LocOpe_HBuilder._kill_pointed = new_instancemethod(_LocOpe.LocOpe_HBuilder__kill_pointed, None, LocOpe_HBuilder)
LocOpe_HBuilder.GetHandle = new_instancemethod(_LocOpe.LocOpe_HBuilder_GetHandle, None, LocOpe_HBuilder)
LocOpe_HBuilder_swigregister = _LocOpe.LocOpe_HBuilder_swigregister
LocOpe_HBuilder_swigregister(LocOpe_HBuilder)

class Handle_LocOpe_HBuilder(OCC.TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_HBuilder_swiginit(self, _LocOpe.new_Handle_LocOpe_HBuilder(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_HBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_HBuilder.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_HBuilder_Nullify, None, Handle_LocOpe_HBuilder)
Handle_LocOpe_HBuilder.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_HBuilder_IsNull, None, Handle_LocOpe_HBuilder)
Handle_LocOpe_HBuilder.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_HBuilder_GetObject, None, Handle_LocOpe_HBuilder)
Handle_LocOpe_HBuilder._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_HBuilder__kill_pointed, None, Handle_LocOpe_HBuilder)
Handle_LocOpe_HBuilder_swigregister = _LocOpe.Handle_LocOpe_HBuilder_swigregister
Handle_LocOpe_HBuilder_swigregister(Handle_LocOpe_HBuilder)

def Handle_LocOpe_HBuilder_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_HBuilder_DownCast(AnObject)
Handle_LocOpe_HBuilder_DownCast = _LocOpe.Handle_LocOpe_HBuilder_DownCast

class LocOpe_LinearForm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Pnt1:
        :type Pnt1: gp_Pnt
        :param Pnt2:
        :type Pnt2: gp_Pnt
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Vectra:
        :type Vectra: gp_Vec
        :param Pnt1:
        :type Pnt1: gp_Pnt
        :param Pnt2:
        :type Pnt2: gp_Pnt
        :rtype: None

        """
        _LocOpe.LocOpe_LinearForm_swiginit(self, _LocOpe.new_LocOpe_LinearForm(*args))

    def Perform(self, *args):
        """
        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Pnt1:
        :type Pnt1: gp_Pnt
        :param Pnt2:
        :type Pnt2: gp_Pnt
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Vectra:
        :type Vectra: gp_Vec
        :param Pnt1:
        :type Pnt1: gp_Pnt
        :param Pnt2:
        :type Pnt2: gp_Pnt
        :rtype: None

        """
        return _LocOpe.LocOpe_LinearForm_Perform(self, *args)


    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_LinearForm_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_LinearForm_LastShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_LinearForm_Shape(self, *args)


    def Shapes(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_LinearForm_Shapes(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_LinearForm.Perform = new_instancemethod(_LocOpe.LocOpe_LinearForm_Perform, None, LocOpe_LinearForm)
LocOpe_LinearForm.FirstShape = new_instancemethod(_LocOpe.LocOpe_LinearForm_FirstShape, None, LocOpe_LinearForm)
LocOpe_LinearForm.LastShape = new_instancemethod(_LocOpe.LocOpe_LinearForm_LastShape, None, LocOpe_LinearForm)
LocOpe_LinearForm.Shape = new_instancemethod(_LocOpe.LocOpe_LinearForm_Shape, None, LocOpe_LinearForm)
LocOpe_LinearForm.Shapes = new_instancemethod(_LocOpe.LocOpe_LinearForm_Shapes, None, LocOpe_LinearForm)
LocOpe_LinearForm._kill_pointed = new_instancemethod(_LocOpe.LocOpe_LinearForm__kill_pointed, None, LocOpe_LinearForm)
LocOpe_LinearForm_swigregister = _LocOpe.LocOpe_LinearForm_swigregister
LocOpe_LinearForm_swigregister(LocOpe_LinearForm)

class LocOpe_Pipe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_Pipe_swiginit(self, _LocOpe.new_LocOpe_Pipe(*args))

    def Spine(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Pipe_Spine(self, *args)


    def Profile(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Pipe_Profile(self, *args)


    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Pipe_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Pipe_LastShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Pipe_Shape(self, *args)


    def Shapes(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Pipe_Shapes(self, *args)


    def Curves(self, *args):
        """
        :param Spt:
        :type Spt: TColgp_SequenceOfPnt
        :rtype: TColGeom_SequenceOfCurve

        """
        return _LocOpe.LocOpe_Pipe_Curves(self, *args)


    def BarycCurve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _LocOpe.LocOpe_Pipe_BarycCurve(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_Pipe.Spine = new_instancemethod(_LocOpe.LocOpe_Pipe_Spine, None, LocOpe_Pipe)
LocOpe_Pipe.Profile = new_instancemethod(_LocOpe.LocOpe_Pipe_Profile, None, LocOpe_Pipe)
LocOpe_Pipe.FirstShape = new_instancemethod(_LocOpe.LocOpe_Pipe_FirstShape, None, LocOpe_Pipe)
LocOpe_Pipe.LastShape = new_instancemethod(_LocOpe.LocOpe_Pipe_LastShape, None, LocOpe_Pipe)
LocOpe_Pipe.Shape = new_instancemethod(_LocOpe.LocOpe_Pipe_Shape, None, LocOpe_Pipe)
LocOpe_Pipe.Shapes = new_instancemethod(_LocOpe.LocOpe_Pipe_Shapes, None, LocOpe_Pipe)
LocOpe_Pipe.Curves = new_instancemethod(_LocOpe.LocOpe_Pipe_Curves, None, LocOpe_Pipe)
LocOpe_Pipe.BarycCurve = new_instancemethod(_LocOpe.LocOpe_Pipe_BarycCurve, None, LocOpe_Pipe)
LocOpe_Pipe._kill_pointed = new_instancemethod(_LocOpe.LocOpe_Pipe__kill_pointed, None, LocOpe_Pipe)
LocOpe_Pipe_swigregister = _LocOpe.LocOpe_Pipe_swigregister
LocOpe_Pipe_swigregister(LocOpe_Pipe)

class LocOpe_PntFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor. Useful only for the list.

        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param F:
        :type F: TopoDS_Face &
        :param Or:
        :type Or: TopAbs_Orientation
        :param Param:
        :type Param: float
        :param UPar:
        :type UPar: float
        :param VPar:
        :type VPar: float
        :rtype: None

        """
        _LocOpe.LocOpe_PntFace_swiginit(self, _LocOpe.new_LocOpe_PntFace(*args))

    def Pnt(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _LocOpe.LocOpe_PntFace_Pnt(self, *args)


    def Face(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _LocOpe.LocOpe_PntFace_Face(self, *args)


    def Orientation(self, *args):
        """
        :rtype: TopAbs_Orientation

        """
        return _LocOpe.LocOpe_PntFace_Orientation(self, *args)


    def ChangeOrientation(self, *args):
        """
        :rtype: TopAbs_Orientation

        """
        return _LocOpe.LocOpe_PntFace_ChangeOrientation(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _LocOpe.LocOpe_PntFace_Parameter(self, *args)


    def UParameter(self, *args):
        """
        :rtype: float

        """
        return _LocOpe.LocOpe_PntFace_UParameter(self, *args)


    def VParameter(self, *args):
        """
        :rtype: float

        """
        return _LocOpe.LocOpe_PntFace_VParameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_PntFace.Pnt = new_instancemethod(_LocOpe.LocOpe_PntFace_Pnt, None, LocOpe_PntFace)
LocOpe_PntFace.Face = new_instancemethod(_LocOpe.LocOpe_PntFace_Face, None, LocOpe_PntFace)
LocOpe_PntFace.Orientation = new_instancemethod(_LocOpe.LocOpe_PntFace_Orientation, None, LocOpe_PntFace)
LocOpe_PntFace.ChangeOrientation = new_instancemethod(_LocOpe.LocOpe_PntFace_ChangeOrientation, None, LocOpe_PntFace)
LocOpe_PntFace.Parameter = new_instancemethod(_LocOpe.LocOpe_PntFace_Parameter, None, LocOpe_PntFace)
LocOpe_PntFace.UParameter = new_instancemethod(_LocOpe.LocOpe_PntFace_UParameter, None, LocOpe_PntFace)
LocOpe_PntFace.VParameter = new_instancemethod(_LocOpe.LocOpe_PntFace_VParameter, None, LocOpe_PntFace)
LocOpe_PntFace._kill_pointed = new_instancemethod(_LocOpe.LocOpe_PntFace__kill_pointed, None, LocOpe_PntFace)
LocOpe_PntFace_swigregister = _LocOpe.LocOpe_PntFace_swigregister
LocOpe_PntFace_swigregister(LocOpe_PntFace)

class LocOpe_Prism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Vectra:
        :type Vectra: gp_Vec
        :rtype: None

        """
        _LocOpe.LocOpe_Prism_swiginit(self, _LocOpe.new_LocOpe_Prism(*args))

    def Perform(self, *args):
        """
        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param Base:
        :type Base: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Vtra:
        :type Vtra: gp_Vec
        :rtype: None

        """
        return _LocOpe.LocOpe_Prism_Perform(self, *args)


    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Prism_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Prism_LastShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Prism_Shape(self, *args)


    def Shapes(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Prism_Shapes(self, *args)


    def Curves(self, *args):
        """
        :param SCurves:
        :type SCurves: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _LocOpe.LocOpe_Prism_Curves(self, *args)


    def BarycCurve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _LocOpe.LocOpe_Prism_BarycCurve(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_Prism.Perform = new_instancemethod(_LocOpe.LocOpe_Prism_Perform, None, LocOpe_Prism)
LocOpe_Prism.FirstShape = new_instancemethod(_LocOpe.LocOpe_Prism_FirstShape, None, LocOpe_Prism)
LocOpe_Prism.LastShape = new_instancemethod(_LocOpe.LocOpe_Prism_LastShape, None, LocOpe_Prism)
LocOpe_Prism.Shape = new_instancemethod(_LocOpe.LocOpe_Prism_Shape, None, LocOpe_Prism)
LocOpe_Prism.Shapes = new_instancemethod(_LocOpe.LocOpe_Prism_Shapes, None, LocOpe_Prism)
LocOpe_Prism.Curves = new_instancemethod(_LocOpe.LocOpe_Prism_Curves, None, LocOpe_Prism)
LocOpe_Prism.BarycCurve = new_instancemethod(_LocOpe.LocOpe_Prism_BarycCurve, None, LocOpe_Prism)
LocOpe_Prism._kill_pointed = new_instancemethod(_LocOpe.LocOpe_Prism__kill_pointed, None, LocOpe_Prism)
LocOpe_Prism_swigregister = _LocOpe.LocOpe_Prism_swigregister
LocOpe_Prism_swigregister(LocOpe_Prism)

class LocOpe_ProjectedWires(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def InitEdgeIterator(self, *args):
        """
        :rtype: void

        """
        return _LocOpe.LocOpe_ProjectedWires_InitEdgeIterator(self, *args)


    def MoreEdge(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_ProjectedWires_MoreEdge(self, *args)


    def Edge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _LocOpe.LocOpe_ProjectedWires_Edge(self, *args)


    def OnFace(self, *args):
        """
        * Returns the face of the shape on which the current edge is projected.

        :rtype: TopoDS_Face

        """
        return _LocOpe.LocOpe_ProjectedWires_OnFace(self, *args)


    def NextEdge(self, *args):
        """
        :rtype: void

        """
        return _LocOpe.LocOpe_ProjectedWires_NextEdge(self, *args)


    def OnVertex(self, *args):
        """
        :param Vwire:
        :type Vwire: TopoDS_Vertex &
        :param Vshape:
        :type Vshape: TopoDS_Vertex &
        :rtype: bool

        """
        return _LocOpe.LocOpe_ProjectedWires_OnVertex(self, *args)


    def OnEdge(self, *args):
        """
        * If the current edge is projected on an edge, returns <Standard_True> and sets the value of <E>. Otherwise, returns <Standard_False>.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        * If the vertex <V> lies on an edge of the original shape, returns <Standard_True> and sets the concerned edge in <E>, and the parameter on the edge in <P>. Else returns <Standard_False>.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: float &
        :rtype: bool

        """
        return _LocOpe.LocOpe_ProjectedWires_OnEdge(self, *args)


    def IsFaceWithSection(self, *args):
        """
        * tells is the face to be split by section or not

        :param aFace:
        :type aFace: TopoDS_Shape &
        :rtype: bool

        """
        return _LocOpe.LocOpe_ProjectedWires_IsFaceWithSection(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_ProjectedWires self)"""
        return _LocOpe.LocOpe_ProjectedWires__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_ProjectedWires self) -> Handle_LocOpe_ProjectedWires"""
        return _LocOpe.LocOpe_ProjectedWires_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_ProjectedWires.InitEdgeIterator = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_InitEdgeIterator, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.MoreEdge = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_MoreEdge, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.Edge = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_Edge, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.OnFace = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_OnFace, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.NextEdge = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_NextEdge, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.OnVertex = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_OnVertex, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.OnEdge = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_OnEdge, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.IsFaceWithSection = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_IsFaceWithSection, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires._kill_pointed = new_instancemethod(_LocOpe.LocOpe_ProjectedWires__kill_pointed, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires.GetHandle = new_instancemethod(_LocOpe.LocOpe_ProjectedWires_GetHandle, None, LocOpe_ProjectedWires)
LocOpe_ProjectedWires_swigregister = _LocOpe.LocOpe_ProjectedWires_swigregister
LocOpe_ProjectedWires_swigregister(LocOpe_ProjectedWires)

class Handle_LocOpe_ProjectedWires(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_ProjectedWires_swiginit(self, _LocOpe.new_Handle_LocOpe_ProjectedWires(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_ProjectedWires_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_ProjectedWires.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_ProjectedWires_Nullify, None, Handle_LocOpe_ProjectedWires)
Handle_LocOpe_ProjectedWires.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_ProjectedWires_IsNull, None, Handle_LocOpe_ProjectedWires)
Handle_LocOpe_ProjectedWires.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_ProjectedWires_GetObject, None, Handle_LocOpe_ProjectedWires)
Handle_LocOpe_ProjectedWires._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_ProjectedWires__kill_pointed, None, Handle_LocOpe_ProjectedWires)
Handle_LocOpe_ProjectedWires_swigregister = _LocOpe.Handle_LocOpe_ProjectedWires_swigregister
Handle_LocOpe_ProjectedWires_swigregister(Handle_LocOpe_ProjectedWires)

def Handle_LocOpe_ProjectedWires_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_ProjectedWires_DownCast(AnObject)
Handle_LocOpe_ProjectedWires_DownCast = _LocOpe.Handle_LocOpe_ProjectedWires_DownCast

class LocOpe_SequenceNodeOfSequenceOfCirc(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: gp_Circ
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_swiginit(self, _LocOpe.new_LocOpe_SequenceNodeOfSequenceOfCirc(*args))

    def Value(self, *args):
        """
        :rtype: gp_Circ

        """
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_SequenceNodeOfSequenceOfCirc self)"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_SequenceNodeOfSequenceOfCirc self) -> Handle_LocOpe_SequenceNodeOfSequenceOfCirc"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceNodeOfSequenceOfCirc.Value = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_Value, None, LocOpe_SequenceNodeOfSequenceOfCirc)
LocOpe_SequenceNodeOfSequenceOfCirc._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc__kill_pointed, None, LocOpe_SequenceNodeOfSequenceOfCirc)
LocOpe_SequenceNodeOfSequenceOfCirc.GetHandle = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_GetHandle, None, LocOpe_SequenceNodeOfSequenceOfCirc)
LocOpe_SequenceNodeOfSequenceOfCirc_swigregister = _LocOpe.LocOpe_SequenceNodeOfSequenceOfCirc_swigregister
LocOpe_SequenceNodeOfSequenceOfCirc_swigregister(LocOpe_SequenceNodeOfSequenceOfCirc)

class Handle_LocOpe_SequenceNodeOfSequenceOfCirc(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_swiginit(self, _LocOpe.new_Handle_LocOpe_SequenceNodeOfSequenceOfCirc(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_SequenceNodeOfSequenceOfCirc.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_Nullify, None, Handle_LocOpe_SequenceNodeOfSequenceOfCirc)
Handle_LocOpe_SequenceNodeOfSequenceOfCirc.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_IsNull, None, Handle_LocOpe_SequenceNodeOfSequenceOfCirc)
Handle_LocOpe_SequenceNodeOfSequenceOfCirc.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_GetObject, None, Handle_LocOpe_SequenceNodeOfSequenceOfCirc)
Handle_LocOpe_SequenceNodeOfSequenceOfCirc._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc__kill_pointed, None, Handle_LocOpe_SequenceNodeOfSequenceOfCirc)
Handle_LocOpe_SequenceNodeOfSequenceOfCirc_swigregister = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_swigregister
Handle_LocOpe_SequenceNodeOfSequenceOfCirc_swigregister(Handle_LocOpe_SequenceNodeOfSequenceOfCirc)

def Handle_LocOpe_SequenceNodeOfSequenceOfCirc_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_DownCast(AnObject)
Handle_LocOpe_SequenceNodeOfSequenceOfCirc_DownCast = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfCirc_DownCast

class LocOpe_SequenceNodeOfSequenceOfLin(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: gp_Lin
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_swiginit(self, _LocOpe.new_LocOpe_SequenceNodeOfSequenceOfLin(*args))

    def Value(self, *args):
        """
        :rtype: gp_Lin

        """
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_SequenceNodeOfSequenceOfLin self)"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfLin__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_SequenceNodeOfSequenceOfLin self) -> Handle_LocOpe_SequenceNodeOfSequenceOfLin"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceNodeOfSequenceOfLin.Value = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_Value, None, LocOpe_SequenceNodeOfSequenceOfLin)
LocOpe_SequenceNodeOfSequenceOfLin._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfLin__kill_pointed, None, LocOpe_SequenceNodeOfSequenceOfLin)
LocOpe_SequenceNodeOfSequenceOfLin.GetHandle = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_GetHandle, None, LocOpe_SequenceNodeOfSequenceOfLin)
LocOpe_SequenceNodeOfSequenceOfLin_swigregister = _LocOpe.LocOpe_SequenceNodeOfSequenceOfLin_swigregister
LocOpe_SequenceNodeOfSequenceOfLin_swigregister(LocOpe_SequenceNodeOfSequenceOfLin)

class Handle_LocOpe_SequenceNodeOfSequenceOfLin(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_swiginit(self, _LocOpe.new_Handle_LocOpe_SequenceNodeOfSequenceOfLin(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_SequenceNodeOfSequenceOfLin.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_Nullify, None, Handle_LocOpe_SequenceNodeOfSequenceOfLin)
Handle_LocOpe_SequenceNodeOfSequenceOfLin.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_IsNull, None, Handle_LocOpe_SequenceNodeOfSequenceOfLin)
Handle_LocOpe_SequenceNodeOfSequenceOfLin.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_GetObject, None, Handle_LocOpe_SequenceNodeOfSequenceOfLin)
Handle_LocOpe_SequenceNodeOfSequenceOfLin._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin__kill_pointed, None, Handle_LocOpe_SequenceNodeOfSequenceOfLin)
Handle_LocOpe_SequenceNodeOfSequenceOfLin_swigregister = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_swigregister
Handle_LocOpe_SequenceNodeOfSequenceOfLin_swigregister(Handle_LocOpe_SequenceNodeOfSequenceOfLin)

def Handle_LocOpe_SequenceNodeOfSequenceOfLin_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_DownCast(AnObject)
Handle_LocOpe_SequenceNodeOfSequenceOfLin_DownCast = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfLin_DownCast

class LocOpe_SequenceNodeOfSequenceOfPntFace(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: LocOpe_PntFace &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_swiginit(self, _LocOpe.new_LocOpe_SequenceNodeOfSequenceOfPntFace(*args))

    def Value(self, *args):
        """
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_SequenceNodeOfSequenceOfPntFace self)"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_SequenceNodeOfSequenceOfPntFace self) -> Handle_LocOpe_SequenceNodeOfSequenceOfPntFace"""
        return _LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceNodeOfSequenceOfPntFace.Value = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_Value, None, LocOpe_SequenceNodeOfSequenceOfPntFace)
LocOpe_SequenceNodeOfSequenceOfPntFace._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace__kill_pointed, None, LocOpe_SequenceNodeOfSequenceOfPntFace)
LocOpe_SequenceNodeOfSequenceOfPntFace.GetHandle = new_instancemethod(_LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_GetHandle, None, LocOpe_SequenceNodeOfSequenceOfPntFace)
LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister = _LocOpe.LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister
LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister(LocOpe_SequenceNodeOfSequenceOfPntFace)

class Handle_LocOpe_SequenceNodeOfSequenceOfPntFace(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_swiginit(self, _LocOpe.new_Handle_LocOpe_SequenceNodeOfSequenceOfPntFace(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_SequenceNodeOfSequenceOfPntFace.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_Nullify, None, Handle_LocOpe_SequenceNodeOfSequenceOfPntFace)
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_IsNull, None, Handle_LocOpe_SequenceNodeOfSequenceOfPntFace)
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_GetObject, None, Handle_LocOpe_SequenceNodeOfSequenceOfPntFace)
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace__kill_pointed, None, Handle_LocOpe_SequenceNodeOfSequenceOfPntFace)
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_swigregister(Handle_LocOpe_SequenceNodeOfSequenceOfPntFace)

def Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_DownCast(AnObject)
Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_DownCast = _LocOpe.Handle_LocOpe_SequenceNodeOfSequenceOfPntFace_DownCast

class LocOpe_SequenceOfCirc(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceOfCirc_swiginit(self, _LocOpe.new_LocOpe_SequenceOfCirc(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfCirc &
        :rtype: LocOpe_SequenceOfCirc

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfCirc &
        :rtype: LocOpe_SequenceOfCirc

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: gp_Circ
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfCirc &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: gp_Circ
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfCirc &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Circ
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfCirc &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Circ
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfCirc &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: gp_Circ

        """
        return _LocOpe.LocOpe_SequenceOfCirc_First(self, *args)


    def Last(self, *args):
        """
        :rtype: gp_Circ

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: LocOpe_SequenceOfCirc &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: gp_Circ
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ

        """
        return _LocOpe.LocOpe_SequenceOfCirc_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfCirc_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceOfCirc.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Clear, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Assign, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Set, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Append, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Prepend, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_InsertBefore, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_InsertAfter, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_First, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Last, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Split, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Value, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_SetValue, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_ChangeValue, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Remove, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc__kill_pointed, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc_swigregister = _LocOpe.LocOpe_SequenceOfCirc_swigregister
LocOpe_SequenceOfCirc_swigregister(LocOpe_SequenceOfCirc)

class LocOpe_SequenceOfLin(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceOfLin_swiginit(self, _LocOpe.new_LocOpe_SequenceOfLin(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfLin &
        :rtype: LocOpe_SequenceOfLin

        """
        return _LocOpe.LocOpe_SequenceOfLin_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfLin &
        :rtype: LocOpe_SequenceOfLin

        """
        return _LocOpe.LocOpe_SequenceOfLin_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: gp_Lin
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfLin &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: gp_Lin
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfLin &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Lin
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfLin &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Lin
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfLin &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: gp_Lin

        """
        return _LocOpe.LocOpe_SequenceOfLin_First(self, *args)


    def Last(self, *args):
        """
        :rtype: gp_Lin

        """
        return _LocOpe.LocOpe_SequenceOfLin_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: LocOpe_SequenceOfLin &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Lin

        """
        return _LocOpe.LocOpe_SequenceOfLin_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: gp_Lin
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Lin

        """
        return _LocOpe.LocOpe_SequenceOfLin_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfLin_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceOfLin.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Clear, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Assign, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Set, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Append, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Prepend, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_InsertBefore, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_InsertAfter, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_First, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Last, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Split, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Value, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_SetValue, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_ChangeValue, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Remove, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin__kill_pointed, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin_swigregister = _LocOpe.LocOpe_SequenceOfLin_swigregister
LocOpe_SequenceOfLin_swigregister(LocOpe_SequenceOfLin)

class LocOpe_SequenceOfPntFace(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _LocOpe.LocOpe_SequenceOfPntFace_swiginit(self, _LocOpe.new_LocOpe_SequenceOfPntFace(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfPntFace &
        :rtype: LocOpe_SequenceOfPntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: LocOpe_SequenceOfPntFace &
        :rtype: LocOpe_SequenceOfPntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: LocOpe_PntFace &
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfPntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: LocOpe_PntFace &
        :rtype: None

        :param S:
        :type S: LocOpe_SequenceOfPntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: LocOpe_PntFace &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfPntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: LocOpe_PntFace &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LocOpe_SequenceOfPntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_First(self, *args)


    def Last(self, *args):
        """
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: LocOpe_SequenceOfPntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: LocOpe_PntFace &
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: LocOpe_PntFace

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _LocOpe.LocOpe_SequenceOfPntFace_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SequenceOfPntFace.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Clear, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Assign, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Set, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Append, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Prepend, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_InsertBefore, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_InsertAfter, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_First, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Last, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Split, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Value, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_SetValue, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_ChangeValue, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Remove, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace__kill_pointed, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace_swigregister = _LocOpe.LocOpe_SequenceOfPntFace_swigregister
LocOpe_SequenceOfPntFace_swigregister(LocOpe_SequenceOfPntFace)

class LocOpe_SplitDrafts(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates the algoritm on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_SplitDrafts_swiginit(self, _LocOpe.new_LocOpe_SplitDrafts(*args))

    def Init(self, *args):
        """
        * Initializes the algoritm with the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_SplitDrafts_Init(self, *args)


    def Perform(self, *args):
        """
        * Splits the face <F> of the former given shape with the wire <W>. The wire is assumed to lie on the face. Puts a draft angle on both parts of the wire. <Extractg>, <Nplg>, <Angleg> define the arguments for the left part of the wire. <Extractd>, <Npld>, <Angled> define the arguments for the right part of the wire. The draft angle is measured with the direction <Extract>. <Npl> defines the neutral plane (points belonging to the neutral plane are not modified). <Angle> is the value of the draft angle. If <ModifyLeft> is set to <Standard_False>, no draft angle is applied to the left part of the wire. If <ModifyRight> is set to <Standard_False>,no draft angle is applied to the right part of the wire.

        :param F:
        :type F: TopoDS_Face &
        :param W:
        :type W: TopoDS_Wire &
        :param Extractg:
        :type Extractg: gp_Dir
        :param NPlg:
        :type NPlg: gp_Pln
        :param Angleg:
        :type Angleg: float
        :param Extractd:
        :type Extractd: gp_Dir
        :param NPld:
        :type NPld: gp_Pln
        :param Angled:
        :type Angled: float
        :param ModifyLeft: default value is Standard_True
        :type ModifyLeft: bool
        :param ModifyRight: default value is Standard_True
        :type ModifyRight: bool
        :rtype: None

        * Splits the face <F> of the former given shape with the wire <W>. The wire is assumed to lie on the face. Puts a draft angle on the left part of the wire. The draft angle is measured with the direction <Extract>. <Npl> defines the neutral plane (points belonging to the neutral plane are not modified). <Angle> is the value of the draft angle.

        :param F:
        :type F: TopoDS_Face &
        :param W:
        :type W: TopoDS_Wire &
        :param Extract:
        :type Extract: gp_Dir
        :param NPl:
        :type NPl: gp_Pln
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        return _LocOpe.LocOpe_SplitDrafts_Perform(self, *args)


    def IsDone(self, *args):
        """
        * Returns <Standard_True> if the modification has been succesfully performed.

        :rtype: bool

        """
        return _LocOpe.LocOpe_SplitDrafts_IsDone(self, *args)


    def OriginalShape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_SplitDrafts_OriginalShape(self, *args)


    def Shape(self, *args):
        """
        * Returns the modified shape.

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_SplitDrafts_Shape(self, *args)


    def ShapesFromShape(self, *args):
        """
        * Manages the descendant shapes.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_SplitDrafts_ShapesFromShape(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SplitDrafts.Init = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Init, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.Perform = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Perform, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.IsDone = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_IsDone, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.OriginalShape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_OriginalShape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.Shape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Shape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.ShapesFromShape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_ShapesFromShape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SplitDrafts__kill_pointed, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts_swigregister = _LocOpe.LocOpe_SplitDrafts_swigregister
LocOpe_SplitDrafts_swigregister(LocOpe_SplitDrafts)

class LocOpe_SplitShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates the process with the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_SplitShape_swiginit(self, _LocOpe.new_LocOpe_SplitShape(*args))

    def Init(self, *args):
        """
        * Initializes the process on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_SplitShape_Init(self, *args)


    def CanSplit(self, *args):
        """
        * Tests if it is possible to split the edge <E>.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _LocOpe.LocOpe_SplitShape_CanSplit(self, *args)


    def Add(self, *args):
        """
        * Adds the vertex <V> on the edge <E>, at parameter <P>.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds the wire <W> on the face <F>.

        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Adds the list of wires <Lwires> on the face <F>.

        :param Lwires:
        :type Lwires: TopTools_ListOfShape &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _LocOpe.LocOpe_SplitShape_Add(self, *args)


    def Shape(self, *args):
        """
        * Returns the 'original' shape.

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_SplitShape_Shape(self, *args)


    def DescendantShapes(self, *args):
        """
        * Returns the list of descendant shapes of <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_SplitShape_DescendantShapes(self, *args)


    def LeftOf(self, *args):
        """
        * Returns the 'left' part defined by the wire <W> on the face <F>. The returned list of shape is in fact a list of faces. The face <F> is considered with its topological orientation in the original shape. <W> is considered with its orientation.

        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_SplitShape_LeftOf(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_SplitShape.Init = new_instancemethod(_LocOpe.LocOpe_SplitShape_Init, None, LocOpe_SplitShape)
LocOpe_SplitShape.CanSplit = new_instancemethod(_LocOpe.LocOpe_SplitShape_CanSplit, None, LocOpe_SplitShape)
LocOpe_SplitShape.Add = new_instancemethod(_LocOpe.LocOpe_SplitShape_Add, None, LocOpe_SplitShape)
LocOpe_SplitShape.Shape = new_instancemethod(_LocOpe.LocOpe_SplitShape_Shape, None, LocOpe_SplitShape)
LocOpe_SplitShape.DescendantShapes = new_instancemethod(_LocOpe.LocOpe_SplitShape_DescendantShapes, None, LocOpe_SplitShape)
LocOpe_SplitShape.LeftOf = new_instancemethod(_LocOpe.LocOpe_SplitShape_LeftOf, None, LocOpe_SplitShape)
LocOpe_SplitShape._kill_pointed = new_instancemethod(_LocOpe.LocOpe_SplitShape__kill_pointed, None, LocOpe_SplitShape)
LocOpe_SplitShape_swigregister = _LocOpe.LocOpe_SplitShape_swigregister
LocOpe_SplitShape_swigregister(LocOpe_SplitShape)

class LocOpe_Spliter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Creates the algorithm on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_Spliter_swiginit(self, _LocOpe.new_LocOpe_Spliter(*args))

    def Init(self, *args):
        """
        * Initializes the algorithm on the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_Spliter_Init(self, *args)


    def Perform(self, *args):
        """
        :param PW:
        :type PW: Handle_LocOpe_ProjectedWires &
        :rtype: None

        """
        return _LocOpe.LocOpe_Spliter_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_Spliter_IsDone(self, *args)


    def ResultingShape(self, *args):
        """
        * Returns the new shape

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Spliter_ResultingShape(self, *args)


    def Shape(self, *args):
        """
        * Returns the initial shape

        :rtype: TopoDS_Shape

        """
        return _LocOpe.LocOpe_Spliter_Shape(self, *args)


    def DirectLeft(self, *args):
        """
        * Returns the faces which are the left of the projected wires and which are

        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Spliter_DirectLeft(self, *args)


    def Left(self, *args):
        """
        * Returns the faces of the 'left' part on the shape. (It is build from DirectLeft, with the faces connected to this set, and so on...).

        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Spliter_Left(self, *args)


    def DescendantShapes(self, *args):
        """
        * Returns the list of descendant shapes of <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _LocOpe.LocOpe_Spliter_DescendantShapes(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_Spliter.Init = new_instancemethod(_LocOpe.LocOpe_Spliter_Init, None, LocOpe_Spliter)
LocOpe_Spliter.Perform = new_instancemethod(_LocOpe.LocOpe_Spliter_Perform, None, LocOpe_Spliter)
LocOpe_Spliter.IsDone = new_instancemethod(_LocOpe.LocOpe_Spliter_IsDone, None, LocOpe_Spliter)
LocOpe_Spliter.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Spliter_ResultingShape, None, LocOpe_Spliter)
LocOpe_Spliter.Shape = new_instancemethod(_LocOpe.LocOpe_Spliter_Shape, None, LocOpe_Spliter)
LocOpe_Spliter.DirectLeft = new_instancemethod(_LocOpe.LocOpe_Spliter_DirectLeft, None, LocOpe_Spliter)
LocOpe_Spliter.Left = new_instancemethod(_LocOpe.LocOpe_Spliter_Left, None, LocOpe_Spliter)
LocOpe_Spliter.DescendantShapes = new_instancemethod(_LocOpe.LocOpe_Spliter_DescendantShapes, None, LocOpe_Spliter)
LocOpe_Spliter._kill_pointed = new_instancemethod(_LocOpe.LocOpe_Spliter__kill_pointed, None, LocOpe_Spliter)
LocOpe_Spliter_swigregister = _LocOpe.LocOpe_Spliter_swigregister
LocOpe_Spliter_swigregister(LocOpe_Spliter)

class LocOpe_GluedShape(LocOpe_GeneratedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_GluedShape_swiginit(self, _LocOpe.new_LocOpe_GluedShape(*args))

    def Init(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_GluedShape_Init(self, *args)


    def GlueOnFace(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _LocOpe.LocOpe_GluedShape_GlueOnFace(self, *args)


    def Generated(self, *args):
        """
        * Returns the edge created by the vertex <V>. If none, must return a null shape.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: TopoDS_Edge

        * Returns the face created by the edge <E>. If none, must return a null shape.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Face

        """
        return _LocOpe.LocOpe_GluedShape_Generated(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_GluedShape self)"""
        return _LocOpe.LocOpe_GluedShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_GluedShape self) -> Handle_LocOpe_GluedShape"""
        return _LocOpe.LocOpe_GluedShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_GluedShape.Init = new_instancemethod(_LocOpe.LocOpe_GluedShape_Init, None, LocOpe_GluedShape)
LocOpe_GluedShape.GlueOnFace = new_instancemethod(_LocOpe.LocOpe_GluedShape_GlueOnFace, None, LocOpe_GluedShape)
LocOpe_GluedShape.Generated = new_instancemethod(_LocOpe.LocOpe_GluedShape_Generated, None, LocOpe_GluedShape)
LocOpe_GluedShape._kill_pointed = new_instancemethod(_LocOpe.LocOpe_GluedShape__kill_pointed, None, LocOpe_GluedShape)
LocOpe_GluedShape.GetHandle = new_instancemethod(_LocOpe.LocOpe_GluedShape_GetHandle, None, LocOpe_GluedShape)
LocOpe_GluedShape_swigregister = _LocOpe.LocOpe_GluedShape_swigregister
LocOpe_GluedShape_swigregister(LocOpe_GluedShape)

class Handle_LocOpe_GluedShape(Handle_LocOpe_GeneratedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_GluedShape_swiginit(self, _LocOpe.new_Handle_LocOpe_GluedShape(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_GluedShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_GluedShape.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_GluedShape_Nullify, None, Handle_LocOpe_GluedShape)
Handle_LocOpe_GluedShape.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_GluedShape_IsNull, None, Handle_LocOpe_GluedShape)
Handle_LocOpe_GluedShape.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_GluedShape_GetObject, None, Handle_LocOpe_GluedShape)
Handle_LocOpe_GluedShape._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_GluedShape__kill_pointed, None, Handle_LocOpe_GluedShape)
Handle_LocOpe_GluedShape_swigregister = _LocOpe.Handle_LocOpe_GluedShape_swigregister
Handle_LocOpe_GluedShape_swigregister(Handle_LocOpe_GluedShape)

def Handle_LocOpe_GluedShape_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_GluedShape_DownCast(AnObject)
Handle_LocOpe_GluedShape_DownCast = _LocOpe.Handle_LocOpe_GluedShape_DownCast

class LocOpe_WiresOnShape(LocOpe_ProjectedWires):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _LocOpe.LocOpe_WiresOnShape_swiginit(self, _LocOpe.new_LocOpe_WiresOnShape(*args))

    def Init(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _LocOpe.LocOpe_WiresOnShape_Init(self, *args)


    def SetCheckInterior(self, *args):
        """
        * Set the flag of check internal intersections default value is True (to check)

        :param ToCheckInterior:
        :type ToCheckInterior: bool
        :rtype: None

        """
        return _LocOpe.LocOpe_WiresOnShape_SetCheckInterior(self, *args)


    def Bind(self, *args):
        """
        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        :param Comp:
        :type Comp: TopoDS_Compound &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        :param EfromW:
        :type EfromW: TopoDS_Edge &
        :param EonFace:
        :type EonFace: TopoDS_Edge &
        :rtype: None

        """
        return _LocOpe.LocOpe_WiresOnShape_Bind(self, *args)


    def BindAll(self, *args):
        """
        :rtype: None

        """
        return _LocOpe.LocOpe_WiresOnShape_BindAll(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _LocOpe.LocOpe_WiresOnShape_IsDone(self, *args)


    def OnEdge(self, *args):
        """
        * If the current edge is projected on an edge, returns <Standard_True> and sets the value of <E>. Otherwise, returns <Standard_False>.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        * If the vertex <V> lies on an edge of the original shape, returns <Standard_True> and sets the concerned edge in <E>, and the parameter on the edge in <P>. Else returns <Standard_False>.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: float &
        :rtype: bool

        """
        return _LocOpe.LocOpe_WiresOnShape_OnEdge(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(LocOpe_WiresOnShape self)"""
        return _LocOpe.LocOpe_WiresOnShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(LocOpe_WiresOnShape self) -> Handle_LocOpe_WiresOnShape"""
        return _LocOpe.LocOpe_WiresOnShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LocOpe_WiresOnShape.Init = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Init, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.SetCheckInterior = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_SetCheckInterior, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.Bind = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Bind, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.BindAll = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_BindAll, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.IsDone = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_IsDone, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.OnEdge = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_OnEdge, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape._kill_pointed = new_instancemethod(_LocOpe.LocOpe_WiresOnShape__kill_pointed, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.GetHandle = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_GetHandle, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape_swigregister = _LocOpe.LocOpe_WiresOnShape_swigregister
LocOpe_WiresOnShape_swigregister(LocOpe_WiresOnShape)

class Handle_LocOpe_WiresOnShape(Handle_LocOpe_ProjectedWires):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.Handle_LocOpe_WiresOnShape_swiginit(self, _LocOpe.new_Handle_LocOpe_WiresOnShape(*args))
    DownCast = staticmethod(_LocOpe.Handle_LocOpe_WiresOnShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LocOpe_WiresOnShape.Nullify = new_instancemethod(_LocOpe.Handle_LocOpe_WiresOnShape_Nullify, None, Handle_LocOpe_WiresOnShape)
Handle_LocOpe_WiresOnShape.IsNull = new_instancemethod(_LocOpe.Handle_LocOpe_WiresOnShape_IsNull, None, Handle_LocOpe_WiresOnShape)
Handle_LocOpe_WiresOnShape.GetObject = new_instancemethod(_LocOpe.Handle_LocOpe_WiresOnShape_GetObject, None, Handle_LocOpe_WiresOnShape)
Handle_LocOpe_WiresOnShape._kill_pointed = new_instancemethod(_LocOpe.Handle_LocOpe_WiresOnShape__kill_pointed, None, Handle_LocOpe_WiresOnShape)
Handle_LocOpe_WiresOnShape_swigregister = _LocOpe.Handle_LocOpe_WiresOnShape_swigregister
Handle_LocOpe_WiresOnShape_swigregister(Handle_LocOpe_WiresOnShape)

def Handle_LocOpe_WiresOnShape_DownCast(AnObject):
    return _LocOpe.Handle_LocOpe_WiresOnShape_DownCast(AnObject)
Handle_LocOpe_WiresOnShape_DownCast = _LocOpe.Handle_LocOpe_WiresOnShape_DownCast



