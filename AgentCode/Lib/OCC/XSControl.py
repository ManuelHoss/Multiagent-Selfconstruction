# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _XSControl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XSControl', [dirname(__file__)])
        except ImportError:
            import _XSControl
            return _XSControl
        if fp is not None:
            try:
                _mod = imp.load_module('_XSControl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XSControl = swig_import_helper()
    del swig_import_helper
else:
    import _XSControl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XSControl.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_XSControl.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XSControl.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XSControl.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XSControl.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XSControl.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XSControl.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XSControl.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XSControl.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XSControl.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XSControl.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XSControl.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XSControl.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XSControl.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XSControl.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XSControl.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XSControl.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _XSControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.IFSelect
import OCC.Standard
import OCC.MMgt
import OCC.TCollection
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.Dico
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TopTools
class xscontrol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Session(*args):
        """
        Args:
        	pilot(Handle_IFSelect_SessionPilot)

        Returns:
        	static Handle_XSControl_WorkSession

        Returns the WorkSession of a SessionPilot, but casts it as  
                  from XSControl : it then gives access to Control & Transfers
        """
        return _XSControl.xscontrol_Session(*args)

    Session = staticmethod(Session)
    def Vars(*args):
        """
        Args:
        	pilot(Handle_IFSelect_SessionPilot)

        Returns:
        	static Handle_XSControl_Vars

        Returns the Vars of a SessionPilot, it is brought by Session  
                  it provides access to external variables
        """
        return _XSControl.xscontrol_Vars(*args)

    Vars = staticmethod(Vars)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


xscontrol._kill_pointed = new_instancemethod(_XSControl.xscontrol__kill_pointed,None,xscontrol)
xscontrol_swigregister = _XSControl.xscontrol_swigregister
xscontrol_swigregister(xscontrol)

def xscontrol_Session(*args):
  """
    Args:
    	pilot(Handle_IFSelect_SessionPilot)

    Returns:
    	static Handle_XSControl_WorkSession

    Returns the WorkSession of a SessionPilot, but casts it as  
              from XSControl : it then gives access to Control & Transfers
    """
  return _XSControl.xscontrol_Session(*args)

def xscontrol_Vars(*args):
  """
    Args:
    	pilot(Handle_IFSelect_SessionPilot)

    Returns:
    	static Handle_XSControl_Vars

    Returns the Vars of a SessionPilot, it is brought by Session  
              it provides access to external variables
    """
  return _XSControl.xscontrol_Vars(*args)

class XSControl_ConnectedShapes(OCC.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a Selection ConnectedShapes. It remains to be set a  
                  TransferReader
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Creates a Selection ConnectedShapes, which will work with the  
                  current TransferProcess brought by the TransferReader
        """
        _XSControl.XSControl_ConnectedShapes_swiginit(self,_XSControl.new_XSControl_ConnectedShapes(*args))
    def SetReader(self, *args):
        """
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Sets a TransferReader to sort entities : it brings the  
                  TransferProcess which may change, while the TransferReader does not
        """
        return _XSControl.XSControl_ConnectedShapes_SetReader(self, *args)

    def AdjacentEntities(*args):
        """
        Args:
        	ashape(TopoDS_Shape)
        	TP(Handle_Transfer_TransientProcess)
        	type(TopAbs_ShapeEnum)

        Returns:
        	static Handle_TColStd_HSequenceOfTransient

        This functions considers a shape from a transfer and performs  
                  the search function explained above
        """
        return _XSControl.XSControl_ConnectedShapes_AdjacentEntities(*args)

    AdjacentEntities = staticmethod(AdjacentEntities)
    def _kill_pointed(self):
        """_kill_pointed(XSControl_ConnectedShapes self)"""
        return _XSControl.XSControl_ConnectedShapes__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_ConnectedShapes self) -> Handle_XSControl_ConnectedShapes"""
        return _XSControl.XSControl_ConnectedShapes_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_ConnectedShapes.SetReader = new_instancemethod(_XSControl.XSControl_ConnectedShapes_SetReader,None,XSControl_ConnectedShapes)
XSControl_ConnectedShapes._kill_pointed = new_instancemethod(_XSControl.XSControl_ConnectedShapes__kill_pointed,None,XSControl_ConnectedShapes)
XSControl_ConnectedShapes.GetHandle = new_instancemethod(_XSControl.XSControl_ConnectedShapes_GetHandle,None,XSControl_ConnectedShapes)
XSControl_ConnectedShapes_swigregister = _XSControl.XSControl_ConnectedShapes_swigregister
XSControl_ConnectedShapes_swigregister(XSControl_ConnectedShapes)

def XSControl_ConnectedShapes_AdjacentEntities(*args):
  """
    Args:
    	ashape(TopoDS_Shape)
    	TP(Handle_Transfer_TransientProcess)
    	type(TopAbs_ShapeEnum)

    Returns:
    	static Handle_TColStd_HSequenceOfTransient

    This functions considers a shape from a transfer and performs  
              the search function explained above
    """
  return _XSControl.XSControl_ConnectedShapes_AdjacentEntities(*args)

class Handle_XSControl_ConnectedShapes(OCC.IFSelect.Handle_IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_ConnectedShapes_swiginit(self,_XSControl.new_Handle_XSControl_ConnectedShapes(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_ConnectedShapes_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_ConnectedShapes.Nullify = new_instancemethod(_XSControl.Handle_XSControl_ConnectedShapes_Nullify,None,Handle_XSControl_ConnectedShapes)
Handle_XSControl_ConnectedShapes.IsNull = new_instancemethod(_XSControl.Handle_XSControl_ConnectedShapes_IsNull,None,Handle_XSControl_ConnectedShapes)
Handle_XSControl_ConnectedShapes.GetObject = new_instancemethod(_XSControl.Handle_XSControl_ConnectedShapes_GetObject,None,Handle_XSControl_ConnectedShapes)
Handle_XSControl_ConnectedShapes._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_ConnectedShapes__kill_pointed,None,Handle_XSControl_ConnectedShapes)
Handle_XSControl_ConnectedShapes_swigregister = _XSControl.Handle_XSControl_ConnectedShapes_swigregister
Handle_XSControl_ConnectedShapes_swigregister(Handle_XSControl_ConnectedShapes)

def Handle_XSControl_ConnectedShapes_DownCast(*args):
  return _XSControl.Handle_XSControl_ConnectedShapes_DownCast(*args)
Handle_XSControl_ConnectedShapes_DownCast = _XSControl.Handle_XSControl_ConnectedShapes_DownCast

class XSControl_Controller(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def SetNames(self, *args):
        """
        Args:
        	longname(char *)
        	shortname(char *)

        Returns:
        	None

        Changes names  
                  if a name is empty, the formerly set one remains  
                  Remark : Does not call Record or AutoRecord
        """
        return _XSControl.XSControl_Controller_SetNames(self, *args)

    def AutoRecord(self):
        """
        Args:
        	None
        Returns:
        	None

        Records <self> is a general dictionary under Short and Long  
                  Names (see method Name)
        """
        return _XSControl.XSControl_Controller_AutoRecord(self)

    def Record(self, *args):
        """
        Args:
        	name(char *)

        Returns:
        	None

        Records <self> in a general dictionary under a name  
                  Error if <name> already used for another one
        """
        return _XSControl.XSControl_Controller_Record(self, *args)

    def Recorded(*args):
        """
        Args:
        	name(char *)

        Returns:
        	static Handle_XSControl_Controller

        Returns the Controller attached to a given name  
                  Returns a Null Handle if <name> is unknown
        """
        return _XSControl.XSControl_Controller_Recorded(*args)

    Recorded = staticmethod(Recorded)
    def ListRecorded(mode=0):
        """
        Args:
        	mode(Standard_Integer)=0

        Returns:
        	static Handle_TColStd_HSequenceOfHAsciiString

        Returns the list of names of recorded norms, according to mode  
                  = 0 (D) : all the recorded names  
                  < 0 : for each distinct norm, its resource (short) name  
                  > 0 : for each distinct norm, its complete (long)  name
        Args:
        	mode(Standard_Integer)=0

        Returns:
        	static Handle_TColStd_HSequenceOfHAsciiString

        Returns the list of names of recorded norms, according to mode  
                  = 0 (D) : all the recorded names  
                  < 0 : for each distinct norm, its resource (short) name  
                  > 0 : for each distinct norm, its complete (long)  name
        """
        return _XSControl.XSControl_Controller_ListRecorded(mode)

    ListRecorded = staticmethod(ListRecorded)
    def Name(self, *args):
        """
        Args:
        	rsc(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns a name, as given when initializing :  
                  rsc = False (D) : True Name attached to the Norm (long name)  
                  rsc = True : Name of the ressource set (i.e. short name)
        Args:
        	rsc(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns a name, as given when initializing :  
                  rsc = False (D) : True Name attached to the Norm (long name)  
                  rsc = True : Name of the ressource set (i.e. short name)
        """
        return _XSControl.XSControl_Controller_Name(self, *args)

    def Profile(self):
        """
        Args:
        	None
        Returns:
        	Handle_IFSelect_Profile

        Returns the Profile  
                  It starts with a first configuration Base (empty) and the  
                  following options :  
                  protocol    for the Protocol  
                  sign-type   for the SignType (Default Signature for Type)  
                  access      for the WorkLibrary  
                  tr-read  for ActorRead  (import processor)  
                  tr-write for ActorWrite (export processor)
        """
        return _XSControl.XSControl_Controller_Profile(self)

    def DefineProfile(self, *args):
        """
        Args:
        	confname(char *)

        Returns:
        	None

        Considers the current state of the Controller as defining a  
                  configuration, newly created or already existing
        """
        return _XSControl.XSControl_Controller_DefineProfile(self, *args)

    def SetProfile(self, *args):
        """
        Args:
        	confname(char *)

        Returns:
        	Standard_Boolean

        Sets the Controller in a given Configuration of its Profile  
                  Calls SettingProfile (which can be redefined)  
         
                  Returns True if done, False if <confname> unknown
        """
        return _XSControl.XSControl_Controller_SetProfile(self, *args)

    def SettingProfile(self, *args):
        """
        Args:
        	confname(char *)

        Returns:
        	virtual Standard_Boolean

        This method is called by SetProfile, it can be redefined  
                  for specific sub-class of Controller  
                  The default does nothing
        """
        return _XSControl.XSControl_Controller_SettingProfile(self, *args)

    def ApplyProfile(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)
        	confname(char *)

        Returns:
        	Standard_Boolean

        Applies a Configuration of the Profile to the WorkSession  
                  I.E. calls SetProfile then fills WorkSession with definitions
        """
        return _XSControl.XSControl_Controller_ApplyProfile(self, *args)

    def ApplyingProfile(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)
        	confname(char *)

        Returns:
        	virtual Standard_Boolean

        Called by ApplyProfile, can be redefined for specific  
                  sub-class of Controller  
                  The default does nothing
        """
        return _XSControl.XSControl_Controller_ApplyingProfile(self, *args)

    def Protocol(self):
        """
        Args:
        	None
        Returns:
        	Handle_Interface_Protocol

        Returns the Protocol attached to the Norm (from field)
        """
        return _XSControl.XSControl_Controller_Protocol(self)

    def SignType(self):
        """
        Args:
        	None
        Returns:
        	Handle_IFSelect_Signature

        Returns the SignType attached to the norm (from field)
        """
        return _XSControl.XSControl_Controller_SignType(self)

    def WorkLibrary(self):
        """
        Args:
        	None
        Returns:
        	Handle_IFSelect_WorkLibrary

        Returns the WorkLibrary attached to the Norm. Remark that it  
                  has to be in phase with the Protocol  (read from field)
        """
        return _XSControl.XSControl_Controller_WorkLibrary(self)

    def NewModel(self):
        """
        Args:
        	None
        Returns:
        	virtual Handle_Interface_InterfaceModel

        Creates a new empty Model ready to receive data of the Norm  
                  Used to write data from Imagine to an interface file
        """
        return _XSControl.XSControl_Controller_NewModel(self)

    def ActorRead(self, *args):
        """
        Args:
        	model(Handle_Interface_InterfaceModel)

        Returns:
        	virtual Handle_Transfer_ActorOfTransientProcess

        Returns the Actor for Read attached to the pair (norm,appli)  
                  It can be adapted for data of the input Model, as required  
                  Can be read from field then adapted with Model as required
        """
        return _XSControl.XSControl_Controller_ActorRead(self, *args)

    def ActorWrite(self):
        """
        Args:
        	None
        Returns:
        	virtual Handle_Transfer_ActorOfFinderProcess

        Returns the Actor for Write attached to the pair (norm,appli)  
                  Read from field. Can be redefined
        """
        return _XSControl.XSControl_Controller_ActorWrite(self)

    def UpdateStatics(self, *args):
        """
        Args:
        	mode(Standard_Integer)
        	criter(char *)=

        Returns:
        	virtual void

        Updates static values  
                  <mode> precises the kind of updating : (see Items from Static)  
                  -1 : a precise static item : criter = its name  
                  0  : all items of a family : criter = the family name  
                  1  : all items which match regexp name : criter = regexp name  
                  By default (criter empty) should consider all relevant statics  
                  If <name> is defined, can consider only this static item  
                  The provided default method does nothing, to be redefined
        Args:
        	mode(Standard_Integer)
        	criter(char *)=

        Returns:
        	virtual void

        Updates static values  
                  <mode> precises the kind of updating : (see Items from Static)  
                  -1 : a precise static item : criter = its name  
                  0  : all items of a family : criter = the family name  
                  1  : all items which match regexp name : criter = regexp name  
                  By default (criter empty) should consider all relevant statics  
                  If <name> is defined, can consider only this static item  
                  The provided default method does nothing, to be redefined
        """
        return _XSControl.XSControl_Controller_UpdateStatics(self, *args)

    def SetModeWrite(self, *args):
        """
        Args:
        	modemin(Standard_Integer)
        	modemax(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets mininum and maximum values for modetrans (write)  
                  Erases formerly recorded bounds and values  
                  Actually only for shape  
                  Then, for each value a little help can be attached
        Args:
        	modemin(Standard_Integer)
        	modemax(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets mininum and maximum values for modetrans (write)  
                  Erases formerly recorded bounds and values  
                  Actually only for shape  
                  Then, for each value a little help can be attached
        """
        return _XSControl.XSControl_Controller_SetModeWrite(self, *args)

    def SetModeWriteHelp(self, *args):
        """
        Args:
        	modetrans(Standard_Integer)
        	help(char *)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	None

        Attaches a short line of help to a value of modetrans (write)
        Args:
        	modetrans(Standard_Integer)
        	help(char *)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	None

        Attaches a short line of help to a value of modetrans (write)
        """
        return _XSControl.XSControl_Controller_SetModeWriteHelp(self, *args)

    def ModeWriteBounds(self, *args):
        """
        Args:
        	modemin(Standard_Integer)
        	modemax(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Boolean

        Returns recorded min and max values for modetrans (write)  
                  Actually only for shapes  
                  Returns True if bounds are set, False else (then, free value)
        Args:
        	modemin(Standard_Integer)
        	modemax(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Boolean

        Returns recorded min and max values for modetrans (write)  
                  Actually only for shapes  
                  Returns True if bounds are set, False else (then, free value)
        """
        return _XSControl.XSControl_Controller_ModeWriteBounds(self, *args)

    def IsModeWrite(self, *args):
        """
        Args:
        	modetrans(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Boolean

        Tells if a value of <modetrans> is a good value(within bounds)  
                  Actually only for shapes
        Args:
        	modetrans(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Boolean

        Tells if a value of <modetrans> is a good value(within bounds)  
                  Actually only for shapes
        """
        return _XSControl.XSControl_Controller_IsModeWrite(self, *args)

    def ModeWriteHelp(self, *args):
        """
        Args:
        	modetrans(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	char *

        Returns the help line recorded for a value of modetrans  
                  empty if help not defined or not within bounds or if values are free
        Args:
        	modetrans(Standard_Integer)
        	shape(Standard_Boolean)=Standard_True

        Returns:
        	char *

        Returns the help line recorded for a value of modetrans  
                  empty if help not defined or not within bounds or if values are free
        """
        return _XSControl.XSControl_Controller_ModeWriteHelp(self, *args)

    def RecognizeWriteTransient(self, *args):
        """
        Args:
        	obj(Handle_Standard_Transient)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual Standard_Boolean

        Tells if <obj> (an application object) is a valid candidate  
                  for a transfer to a Model.  
                  By default, asks the ActorWrite if known (through a  
                  TransientMapper). Can be redefined
        Args:
        	obj(Handle_Standard_Transient)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual Standard_Boolean

        Tells if <obj> (an application object) is a valid candidate  
                  for a transfer to a Model.  
                  By default, asks the ActorWrite if known (through a  
                  TransientMapper). Can be redefined
        """
        return _XSControl.XSControl_Controller_RecognizeWriteTransient(self, *args)

    def TransferWriteTransient(self, *args):
        """
        Args:
        	obj(Handle_Standard_Transient)
        	FP(Handle_Transfer_FinderProcess)
        	model(Handle_Interface_InterfaceModel)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual IFSelect_ReturnStatus

        Takes one Transient Object and transfers it to an  
                    InterfaceModel (already created, e.g. by NewModel)  
                  (result is recorded in the model by AddWithRefs)  
                  FP records produced results and checks  
         
                  Default uses ActorWrite; can be redefined as necessary  
                  Returned value is a status, as follows :  
                    0  OK ,  1 No Result ,  2 Fail (e.g. exception raised)  
                    -1 bad conditions ,  -2 bad model or null model  
                  For type of object not recognized : should return 1
        Args:
        	obj(Handle_Standard_Transient)
        	FP(Handle_Transfer_FinderProcess)
        	model(Handle_Interface_InterfaceModel)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual IFSelect_ReturnStatus

        Takes one Transient Object and transfers it to an  
                    InterfaceModel (already created, e.g. by NewModel)  
                  (result is recorded in the model by AddWithRefs)  
                  FP records produced results and checks  
         
                  Default uses ActorWrite; can be redefined as necessary  
                  Returned value is a status, as follows :  
                    0  OK ,  1 No Result ,  2 Fail (e.g. exception raised)  
                    -1 bad conditions ,  -2 bad model or null model  
                  For type of object not recognized : should return 1
        """
        return _XSControl.XSControl_Controller_TransferWriteTransient(self, *args)

    def RecognizeWriteShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual Standard_Boolean

        Tells if a shape is valid for a transfer to a model  
                  Asks the ActorWrite (through a ShapeMapper)
        Args:
        	shape(TopoDS_Shape)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual Standard_Boolean

        Tells if a shape is valid for a transfer to a model  
                  Asks the ActorWrite (through a ShapeMapper)
        """
        return _XSControl.XSControl_Controller_RecognizeWriteShape(self, *args)

    def TransferWriteShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	FP(Handle_Transfer_FinderProcess)
        	model(Handle_Interface_InterfaceModel)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual IFSelect_ReturnStatus

        Takes one Shape and transfers it to an  
                    InterfaceModel (already created, e.g. by NewModel)  
                  Default uses ActorWrite; can be redefined as necessary  
                  Returned value is a status, as follows :  
                    Done  OK ,  Void : No Result ,  Fail : Fail (e.g. exception)  
                    Error : bad conditions , bad model or null model  
         Resolution of file clusters  
         According to each norm, there can (or not) be files of which  
         definition is not complete but refers to other files : this defines  
         a file cluster.  
         It can then be resolved by two calls :  
         - ClusterContext prepares the resolution, specific of each case  
         - ResolveCluster performs the resolution, its result consists in  
           having all data gathered in one final model
        Args:
        	shape(TopoDS_Shape)
        	FP(Handle_Transfer_FinderProcess)
        	model(Handle_Interface_InterfaceModel)
        	modetrans(Standard_Integer)=0

        Returns:
        	virtual IFSelect_ReturnStatus

        Takes one Shape and transfers it to an  
                    InterfaceModel (already created, e.g. by NewModel)  
                  Default uses ActorWrite; can be redefined as necessary  
                  Returned value is a status, as follows :  
                    Done  OK ,  Void : No Result ,  Fail : Fail (e.g. exception)  
                    Error : bad conditions , bad model or null model  
         Resolution of file clusters  
         According to each norm, there can (or not) be files of which  
         definition is not complete but refers to other files : this defines  
         a file cluster.  
         It can then be resolved by two calls :  
         - ClusterContext prepares the resolution, specific of each case  
         - ResolveCluster performs the resolution, its result consists in  
           having all data gathered in one final model
        """
        return _XSControl.XSControl_Controller_TransferWriteShape(self, *args)

    def ClusterContext(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)

        Returns:
        	virtual Handle_Standard_Transient

        Prepares and returns a context to resolve a cluster  
                  All data to be used are detained by the WorkSession  
                  The definition of this context is free and proper to each case  
                  remark that it is aimed to be used in ResolveCluster  
         
                  The context must be prepared, but resolution must not have  
                  began  
         
                  If no cluster has to be resolved, should return a null handle  
                  This is the default case, which can be redefined
        """
        return _XSControl.XSControl_Controller_ClusterContext(self, *args)

    def ResolveCluster(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)
        	context(Handle_Standard_Transient)

        Returns:
        	virtual Interface_CheckIterator

        Performs the resolution itself, from the starting data and  
                  the cluster context  
         
                  Can fill a CheckList as necessary (especially when one or  
                  more references remain unresolved)  
         
                  Default does nothing and returns an empty CheckList
        """
        return _XSControl.XSControl_Controller_ResolveCluster(self, *args)

    def AddControlItem(self, *args):
        """
        Args:
        	item(Handle_Standard_Transient)
        	name(char *)

        Returns:
        	None

        Adds an item in the control list  
                  A control item of a controller is accessed by its name which  
                  is specific of a kind of item (i.e. a kind of functionnality)  
                  Adds or replaces if <name> is already recorded
        """
        return _XSControl.XSControl_Controller_AddControlItem(self, *args)

    def ControlItem(self, *args):
        """
        Args:
        	name(char *)

        Returns:
        	Handle_Standard_Transient

        Returns a control item from its name, Null if <name> unknown  
                  To be used then, it just remains to be down-casted
        """
        return _XSControl.XSControl_Controller_ControlItem(self, *args)

    def TraceStatic(self, *args):
        """
        Args:
        	name(char *)
        	use(Standard_Integer)

        Returns:
        	None

        Records the name of a Static to be traced for a given use
        """
        return _XSControl.XSControl_Controller_TraceStatic(self, *args)

    def AddSessionItem(self, *args):
        """
        Args:
        	item(Handle_Standard_Transient)
        	name(char *)
        	setapplied(char *)=

        Returns:
        	None

        Records a Session Item, to be added for customisation of the  
                  Work Session. It must have a specific name.  
                  <setapplied> is used if <item> is a GeneralModifier, to decide  
                  to which hook list it will be applied, if not empty (else,  
                  not applied to any hook list)  
                  ACTUAL : only one hook list is managed : 'send'  
                  Remark : this method is to be called at Create time, the  
                  recorded items will be used by Customise  
         Warning : if <name> conflicts, the last recorded item is kept
        Args:
        	item(Handle_Standard_Transient)
        	name(char *)
        	setapplied(char *)=

        Returns:
        	None

        Records a Session Item, to be added for customisation of the  
                  Work Session. It must have a specific name.  
                  <setapplied> is used if <item> is a GeneralModifier, to decide  
                  to which hook list it will be applied, if not empty (else,  
                  not applied to any hook list)  
                  ACTUAL : only one hook list is managed : 'send'  
                  Remark : this method is to be called at Create time, the  
                  recorded items will be used by Customise  
         Warning : if <name> conflicts, the last recorded item is kept
        """
        return _XSControl.XSControl_Controller_AddSessionItem(self, *args)

    def SessionItem(self, *args):
        """
        Args:
        	name(char *)

        Returns:
        	Handle_Standard_Transient

        Returns an item given its name to record in a Session  
                  If <name> is unknown, returns a Null Handle
        """
        return _XSControl.XSControl_Controller_SessionItem(self, *args)

    def IsApplied(self, *args):
        """
        Args:
        	item(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns True if <item> is recorded as <setapplied = True>
        """
        return _XSControl.XSControl_Controller_IsApplied(self, *args)

    def Customise(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)

        Returns:
        	virtual void

        Customises a WorkSession, by adding to it the recorded items  
                  (by AddSessionItem), then by calling a specific method  
                  Customising, set by default to do nothing
        """
        return _XSControl.XSControl_Controller_Customise(self, *args)

    def Customising(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)

        Returns:
        	None

        Specific customisation method, which can be redefined  
                  Default does nothing
        """
        return _XSControl.XSControl_Controller_Customising(self, *args)

    def AdaptorSession(self):
        """
        Args:
        	None
        Returns:
        	Handle_Dico_DictionaryOfTransient

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Controller_AdaptorSession(self)

    def _kill_pointed(self):
        """_kill_pointed(XSControl_Controller self)"""
        return _XSControl.XSControl_Controller__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_Controller self) -> Handle_XSControl_Controller"""
        return _XSControl.XSControl_Controller_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_Controller.SetNames = new_instancemethod(_XSControl.XSControl_Controller_SetNames,None,XSControl_Controller)
XSControl_Controller.AutoRecord = new_instancemethod(_XSControl.XSControl_Controller_AutoRecord,None,XSControl_Controller)
XSControl_Controller.Record = new_instancemethod(_XSControl.XSControl_Controller_Record,None,XSControl_Controller)
XSControl_Controller.Name = new_instancemethod(_XSControl.XSControl_Controller_Name,None,XSControl_Controller)
XSControl_Controller.Profile = new_instancemethod(_XSControl.XSControl_Controller_Profile,None,XSControl_Controller)
XSControl_Controller.DefineProfile = new_instancemethod(_XSControl.XSControl_Controller_DefineProfile,None,XSControl_Controller)
XSControl_Controller.SetProfile = new_instancemethod(_XSControl.XSControl_Controller_SetProfile,None,XSControl_Controller)
XSControl_Controller.SettingProfile = new_instancemethod(_XSControl.XSControl_Controller_SettingProfile,None,XSControl_Controller)
XSControl_Controller.ApplyProfile = new_instancemethod(_XSControl.XSControl_Controller_ApplyProfile,None,XSControl_Controller)
XSControl_Controller.ApplyingProfile = new_instancemethod(_XSControl.XSControl_Controller_ApplyingProfile,None,XSControl_Controller)
XSControl_Controller.Protocol = new_instancemethod(_XSControl.XSControl_Controller_Protocol,None,XSControl_Controller)
XSControl_Controller.SignType = new_instancemethod(_XSControl.XSControl_Controller_SignType,None,XSControl_Controller)
XSControl_Controller.WorkLibrary = new_instancemethod(_XSControl.XSControl_Controller_WorkLibrary,None,XSControl_Controller)
XSControl_Controller.NewModel = new_instancemethod(_XSControl.XSControl_Controller_NewModel,None,XSControl_Controller)
XSControl_Controller.ActorRead = new_instancemethod(_XSControl.XSControl_Controller_ActorRead,None,XSControl_Controller)
XSControl_Controller.ActorWrite = new_instancemethod(_XSControl.XSControl_Controller_ActorWrite,None,XSControl_Controller)
XSControl_Controller.UpdateStatics = new_instancemethod(_XSControl.XSControl_Controller_UpdateStatics,None,XSControl_Controller)
XSControl_Controller.SetModeWrite = new_instancemethod(_XSControl.XSControl_Controller_SetModeWrite,None,XSControl_Controller)
XSControl_Controller.SetModeWriteHelp = new_instancemethod(_XSControl.XSControl_Controller_SetModeWriteHelp,None,XSControl_Controller)
XSControl_Controller.ModeWriteBounds = new_instancemethod(_XSControl.XSControl_Controller_ModeWriteBounds,None,XSControl_Controller)
XSControl_Controller.IsModeWrite = new_instancemethod(_XSControl.XSControl_Controller_IsModeWrite,None,XSControl_Controller)
XSControl_Controller.ModeWriteHelp = new_instancemethod(_XSControl.XSControl_Controller_ModeWriteHelp,None,XSControl_Controller)
XSControl_Controller.RecognizeWriteTransient = new_instancemethod(_XSControl.XSControl_Controller_RecognizeWriteTransient,None,XSControl_Controller)
XSControl_Controller.TransferWriteTransient = new_instancemethod(_XSControl.XSControl_Controller_TransferWriteTransient,None,XSControl_Controller)
XSControl_Controller.RecognizeWriteShape = new_instancemethod(_XSControl.XSControl_Controller_RecognizeWriteShape,None,XSControl_Controller)
XSControl_Controller.TransferWriteShape = new_instancemethod(_XSControl.XSControl_Controller_TransferWriteShape,None,XSControl_Controller)
XSControl_Controller.ClusterContext = new_instancemethod(_XSControl.XSControl_Controller_ClusterContext,None,XSControl_Controller)
XSControl_Controller.ResolveCluster = new_instancemethod(_XSControl.XSControl_Controller_ResolveCluster,None,XSControl_Controller)
XSControl_Controller.AddControlItem = new_instancemethod(_XSControl.XSControl_Controller_AddControlItem,None,XSControl_Controller)
XSControl_Controller.ControlItem = new_instancemethod(_XSControl.XSControl_Controller_ControlItem,None,XSControl_Controller)
XSControl_Controller.TraceStatic = new_instancemethod(_XSControl.XSControl_Controller_TraceStatic,None,XSControl_Controller)
XSControl_Controller.AddSessionItem = new_instancemethod(_XSControl.XSControl_Controller_AddSessionItem,None,XSControl_Controller)
XSControl_Controller.SessionItem = new_instancemethod(_XSControl.XSControl_Controller_SessionItem,None,XSControl_Controller)
XSControl_Controller.IsApplied = new_instancemethod(_XSControl.XSControl_Controller_IsApplied,None,XSControl_Controller)
XSControl_Controller.Customise = new_instancemethod(_XSControl.XSControl_Controller_Customise,None,XSControl_Controller)
XSControl_Controller.Customising = new_instancemethod(_XSControl.XSControl_Controller_Customising,None,XSControl_Controller)
XSControl_Controller.AdaptorSession = new_instancemethod(_XSControl.XSControl_Controller_AdaptorSession,None,XSControl_Controller)
XSControl_Controller._kill_pointed = new_instancemethod(_XSControl.XSControl_Controller__kill_pointed,None,XSControl_Controller)
XSControl_Controller.GetHandle = new_instancemethod(_XSControl.XSControl_Controller_GetHandle,None,XSControl_Controller)
XSControl_Controller_swigregister = _XSControl.XSControl_Controller_swigregister
XSControl_Controller_swigregister(XSControl_Controller)

def XSControl_Controller_Recorded(*args):
  """
    Args:
    	name(char *)

    Returns:
    	static Handle_XSControl_Controller

    Returns the Controller attached to a given name  
              Returns a Null Handle if <name> is unknown
    """
  return _XSControl.XSControl_Controller_Recorded(*args)

def XSControl_Controller_ListRecorded(mode=0):
  """
    Args:
    	mode(Standard_Integer)=0

    Returns:
    	static Handle_TColStd_HSequenceOfHAsciiString

    Returns the list of names of recorded norms, according to mode  
              = 0 (D) : all the recorded names  
              < 0 : for each distinct norm, its resource (short) name  
              > 0 : for each distinct norm, its complete (long)  name
    Args:
    	mode(Standard_Integer)=0

    Returns:
    	static Handle_TColStd_HSequenceOfHAsciiString

    Returns the list of names of recorded norms, according to mode  
              = 0 (D) : all the recorded names  
              < 0 : for each distinct norm, its resource (short) name  
              > 0 : for each distinct norm, its complete (long)  name
    """
  return _XSControl.XSControl_Controller_ListRecorded(mode)

class Handle_XSControl_Controller(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_Controller_swiginit(self,_XSControl.new_Handle_XSControl_Controller(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_Controller_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_Controller.Nullify = new_instancemethod(_XSControl.Handle_XSControl_Controller_Nullify,None,Handle_XSControl_Controller)
Handle_XSControl_Controller.IsNull = new_instancemethod(_XSControl.Handle_XSControl_Controller_IsNull,None,Handle_XSControl_Controller)
Handle_XSControl_Controller.GetObject = new_instancemethod(_XSControl.Handle_XSControl_Controller_GetObject,None,Handle_XSControl_Controller)
Handle_XSControl_Controller._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_Controller__kill_pointed,None,Handle_XSControl_Controller)
Handle_XSControl_Controller_swigregister = _XSControl.Handle_XSControl_Controller_swigregister
Handle_XSControl_Controller_swigregister(Handle_XSControl_Controller)

def Handle_XSControl_Controller_DownCast(*args):
  return _XSControl.Handle_XSControl_Controller_DownCast(*args)
Handle_XSControl_Controller_DownCast = _XSControl.Handle_XSControl_Controller_DownCast

class XSControl_FuncShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Init():
        """
        Args:
        	None
        Returns:
        	static void

        Defines and loads all functions which work on shapes for XSControl (as ActFunc)
        """
        return _XSControl.XSControl_FuncShape_Init()

    Init = staticmethod(Init)
    def MoreShapes(*args):
        """
        Args:
        	session(Handle_XSControl_WorkSession)
        	list(Handle_TopTools_HSequenceOfShape)
        	name(char *)

        Returns:
        	static Standard_Integer

        Analyses a name as designating Shapes from a Vars or from  
                  XSTEP transfer (last Transfer on Reading). <name> can be :  
                  '*' : all the root shapes produced by last Transfer (Read)  
                        i.e. considers roots of the TransientProcess  
                  a name : a name of a variable DRAW  
         
                  Returns the count of designated Shapes. Their list is put in  
                  <list>. If <list> is null, it is firstly created. Then it is  
                  completed (Append without Clear) by the Shapes found  
                  Returns 0 if no Shape could be found
        """
        return _XSControl.XSControl_FuncShape_MoreShapes(*args)

    MoreShapes = staticmethod(MoreShapes)
    def FileAndVar(*args):
        """
        Args:
        	session(Handle_XSControl_WorkSession)
        	file(char *)
        	var(char *)
        	def(char *)
        	resfile(TCollection_AsciiString)
        	resvar(TCollection_AsciiString)

        Returns:
        	static Standard_Boolean

        Analyses given file name and variable name, with a default  
                  name for variables. Returns resulting file name and variable  
                  name plus status 'file to read'(True) or 'already read'(False)  
                  In the latter case, empty resfile means no file available  
         
                  If <file> is null or empty or equates '.', considers Session  
                    and returned status is False  
                  Else, returns resfile = file and status is True  
                  If <var> is neither null nor empty, resvar = var  
                  Else, the root part of <resfile> is considered, if defined  
                  Else, <def> is taken
        """
        return _XSControl.XSControl_FuncShape_FileAndVar(*args)

    FileAndVar = staticmethod(FileAndVar)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_FuncShape._kill_pointed = new_instancemethod(_XSControl.XSControl_FuncShape__kill_pointed,None,XSControl_FuncShape)
XSControl_FuncShape_swigregister = _XSControl.XSControl_FuncShape_swigregister
XSControl_FuncShape_swigregister(XSControl_FuncShape)

def XSControl_FuncShape_Init():
  """
    Args:
    	None
    Returns:
    	static void

    Defines and loads all functions which work on shapes for XSControl (as ActFunc)
    """
  return _XSControl.XSControl_FuncShape_Init()

def XSControl_FuncShape_MoreShapes(*args):
  """
    Args:
    	session(Handle_XSControl_WorkSession)
    	list(Handle_TopTools_HSequenceOfShape)
    	name(char *)

    Returns:
    	static Standard_Integer

    Analyses a name as designating Shapes from a Vars or from  
              XSTEP transfer (last Transfer on Reading). <name> can be :  
              '*' : all the root shapes produced by last Transfer (Read)  
                    i.e. considers roots of the TransientProcess  
              a name : a name of a variable DRAW  
     
              Returns the count of designated Shapes. Their list is put in  
              <list>. If <list> is null, it is firstly created. Then it is  
              completed (Append without Clear) by the Shapes found  
              Returns 0 if no Shape could be found
    """
  return _XSControl.XSControl_FuncShape_MoreShapes(*args)

def XSControl_FuncShape_FileAndVar(*args):
  """
    Args:
    	session(Handle_XSControl_WorkSession)
    	file(char *)
    	var(char *)
    	def(char *)
    	resfile(TCollection_AsciiString)
    	resvar(TCollection_AsciiString)

    Returns:
    	static Standard_Boolean

    Analyses given file name and variable name, with a default  
              name for variables. Returns resulting file name and variable  
              name plus status 'file to read'(True) or 'already read'(False)  
              In the latter case, empty resfile means no file available  
     
              If <file> is null or empty or equates '.', considers Session  
                and returned status is False  
              Else, returns resfile = file and status is True  
              If <var> is neither null nor empty, resvar = var  
              Else, the root part of <resfile> is considered, if defined  
              Else, <def> is taken
    """
  return _XSControl.XSControl_FuncShape_FileAndVar(*args)

class XSControl_Functions(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Init():
        """
        Args:
        	None
        Returns:
        	static void

        Defines and loads all functions for XSControl (as ActFunc)
        """
        return _XSControl.XSControl_Functions_Init()

    Init = staticmethod(Init)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_Functions._kill_pointed = new_instancemethod(_XSControl.XSControl_Functions__kill_pointed,None,XSControl_Functions)
XSControl_Functions_swigregister = _XSControl.XSControl_Functions_swigregister
XSControl_Functions_swigregister(XSControl_Functions)

def XSControl_Functions_Init():
  """
    Args:
    	None
    Returns:
    	static void

    Defines and loads all functions for XSControl (as ActFunc)
    """
  return _XSControl.XSControl_Functions_Init()

class XSControl_Reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a Reader from scratch (creates an empty WorkSession)  
                  A WorkSession or a Controller must be provided before running
        Args:
        	norm(char *)

        Returns:
        	None

        Creates a Reader from scratch, with a norm name which  
                  identifies a Controller
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Creates a Reader from an already existing Session, with a  
                  Controller already set  Virtual destructor
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Creates a Reader from an already existing Session, with a  
                  Controller already set  Virtual destructor
        """
        _XSControl.XSControl_Reader_swiginit(self,_XSControl.new_XSControl_Reader(*args))
    def SetNorm(self, *args):
        """
        Args:
        	norm(char *)

        Returns:
        	Standard_Boolean

        Sets a specific norm to <self>  
                  Returns True if done, False if <norm> is not available
        """
        return _XSControl.XSControl_Reader_SetNorm(self, *args)

    def SetWS(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets a specific session to <self>
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets a specific session to <self>
        """
        return _XSControl.XSControl_Reader_SetWS(self, *args)

    def WS(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_WorkSession

        Returns the session used in <self>
        """
        return _XSControl.XSControl_Reader_WS(self)

    def ReadFile(self, *args):
        """
        Args:
        	filename(char *)

        Returns:
        	IFSelect_ReturnStatus

        Loads a file and returns the read status  
                  Zero for a Model which compies with the Controller
        """
        return _XSControl.XSControl_Reader_ReadFile(self, *args)

    def Model(self):
        """
        Args:
        	None
        Returns:
        	Handle_Interface_InterfaceModel

        Returns the model. It can then be consulted (header, product)
        """
        return _XSControl.XSControl_Reader_Model(self)

    def GiveList(self, *args):
        """
        Args:
        	first(char *)=
        	second(char *)=

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns a list of entities from the IGES or STEP file  
        according to the following rules:  
        - if first and second are empty strings, the whole file is selected.  
        - if first is an entity number or label, the entity referred to is selected.  
        - if first is a list of entity numbers/labels separated by commas, the entities referred to are selected,  
        - if first is the name of a selection in the worksession and second is not defined,  
        the list contains the standard output for that selection.  
        - if first is the name of a selection and second is defined, the criterion defined  
        by second is applied to the result of the first selection.  
         A selection is an operator which computes a list of entities from a list given in  
        input according to its type. If no list is specified, the selection computes its  
        list of entities from the whole model.  
          A selection can be:  
        - A predefined selection (xst-transferrable-mode)  
        - A filter based on a signature  
        A Signature is an operator which returns a string from an entity according to its type. For example:  
        - 'xst-type' (CDL)  
        - 'iges-level'  
        - 'step-type'.  
        For example, if you wanted to select only the advanced_faces in a STEP file you  
        would use the following code:  
        Example  
        Reader.GiveList('xst-transferrable-roots','step-type(ADVANCED_FACE)');  
        Warning  
        If the value given to second is incorrect, it will simply be ignored.
        Args:
        	first(char *)=
        	second(char *)=

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns a list of entities from the IGES or STEP file  
        according to the following rules:  
        - if first and second are empty strings, the whole file is selected.  
        - if first is an entity number or label, the entity referred to is selected.  
        - if first is a list of entity numbers/labels separated by commas, the entities referred to are selected,  
        - if first is the name of a selection in the worksession and second is not defined,  
        the list contains the standard output for that selection.  
        - if first is the name of a selection and second is defined, the criterion defined  
        by second is applied to the result of the first selection.  
         A selection is an operator which computes a list of entities from a list given in  
        input according to its type. If no list is specified, the selection computes its  
        list of entities from the whole model.  
          A selection can be:  
        - A predefined selection (xst-transferrable-mode)  
        - A filter based on a signature  
        A Signature is an operator which returns a string from an entity according to its type. For example:  
        - 'xst-type' (CDL)  
        - 'iges-level'  
        - 'step-type'.  
        For example, if you wanted to select only the advanced_faces in a STEP file you  
        would use the following code:  
        Example  
        Reader.GiveList('xst-transferrable-roots','step-type(ADVANCED_FACE)');  
        Warning  
        If the value given to second is incorrect, it will simply be ignored.
        Args:
        	first(char *)=
        	second(char *)=

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns a list of entities from the IGES or STEP file  
        according to the following rules:  
        - if first and second are empty strings, the whole file is selected.  
        - if first is an entity number or label, the entity referred to is selected.  
        - if first is a list of entity numbers/labels separated by commas, the entities referred to are selected,  
        - if first is the name of a selection in the worksession and second is not defined,  
        the list contains the standard output for that selection.  
        - if first is the name of a selection and second is defined, the criterion defined  
        by second is applied to the result of the first selection.  
         A selection is an operator which computes a list of entities from a list given in  
        input according to its type. If no list is specified, the selection computes its  
        list of entities from the whole model.  
          A selection can be:  
        - A predefined selection (xst-transferrable-mode)  
        - A filter based on a signature  
        A Signature is an operator which returns a string from an entity according to its type. For example:  
        - 'xst-type' (CDL)  
        - 'iges-level'  
        - 'step-type'.  
        For example, if you wanted to select only the advanced_faces in a STEP file you  
        would use the following code:  
        Example  
        Reader.GiveList('xst-transferrable-roots','step-type(ADVANCED_FACE)');  
        Warning  
        If the value given to second is incorrect, it will simply be ignored.
        Args:
        	first(char *)
        	ent(Handle_Standard_Transient)

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Computes a List of entities from the model as follows  
                  <first> beeing a Selection, <ent> beeing an entity or a list  
                  of entities (as a HSequenceOfTransient) :  
                    the standard result of this selection applied to this list  
                  if <first> is erroneous, a null handle is returned
        """
        return _XSControl.XSControl_Reader_GiveList(self, *args)

    def NbRootsForTransfer(self):
        """
        Args:
        	None
        Returns:
        	virtual Standard_Integer

        Determines the list of root entities which are candidate for  
                  a transfer to a Shape, and returns the number  
                  of entities in the list
        """
        return _XSControl.XSControl_Reader_NbRootsForTransfer(self)

    def RootForTransfer(self, num=1):
        """
        Args:
        	num(Standard_Integer)=1

        Returns:
        	Handle_Standard_Transient

        Returns an IGES or STEP root  
                  entity for translation. The entity is identified by its  
                  rank in a list.
        Args:
        	num(Standard_Integer)=1

        Returns:
        	Handle_Standard_Transient

        Returns an IGES or STEP root  
                  entity for translation. The entity is identified by its  
                  rank in a list.
        """
        return _XSControl.XSControl_Reader_RootForTransfer(self, num)

    def TransferOneRoot(self, num=1):
        """
        Args:
        	num(Standard_Integer)=1

        Returns:
        	Standard_Boolean

        Translates a root identified by the rank num in the model.  
                  false is returned if no shape is produced.
        Args:
        	num(Standard_Integer)=1

        Returns:
        	Standard_Boolean

        Translates a root identified by the rank num in the model.  
                  false is returned if no shape is produced.
        """
        return _XSControl.XSControl_Reader_TransferOneRoot(self, num)

    def TransferOne(self, *args):
        """
        Args:
        	num(Standard_Integer)

        Returns:
        	Standard_Boolean

        Translates an IGES or STEP  
                  entity identified by the rank num in the model.  
                  false is returned if no shape is produced.
        """
        return _XSControl.XSControl_Reader_TransferOne(self, *args)

    def TransferEntity(self, *args):
        """
        Args:
        	start(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Translates an IGES or STEP  
                  entity in the model. true is returned if a shape is  
                  produced; otherwise, false is returned.
        """
        return _XSControl.XSControl_Reader_TransferEntity(self, *args)

    def TransferList(self, *args):
        """
        Args:
        	list(Handle_TColStd_HSequenceOfTransient)

        Returns:
        	Standard_Integer

        Translates a list of entities.  
                  Returns the number of IGES or STEP entities that were  
                  successfully translated. The list can be produced with GiveList.  
                  Warning - This function does not clear the existing output shapes.
        """
        return _XSControl.XSControl_Reader_TransferList(self, *args)

    def TransferRoots(self):
        """
        Args:
        	None
        Returns:
        	Standard_Integer

        Translates all translatable  
                  roots and returns the number of successful translations.  
                  Warning - This function clears existing output shapes first.
        """
        return _XSControl.XSControl_Reader_TransferRoots(self)

    def ClearShapes(self):
        """
        Args:
        	None
        Returns:
        	None

        Clears the list of shapes that  
                  may have accumulated in calls to TransferOne or TransferRoot.C
        """
        return _XSControl.XSControl_Reader_ClearShapes(self)

    def NbShapes(self):
        """
        Args:
        	None
        Returns:
        	Standard_Integer

        Returns the number of shapes produced by translation.
        """
        return _XSControl.XSControl_Reader_NbShapes(self)

    def Shape(self, num=1):
        """
        Args:
        	num(Standard_Integer)=1

        Returns:
        	TopoDS_Shape

        Returns the shape resulting  
        from a translation and identified by the rank num.  
        num equals 1 by default. In other words, the first shape  
        resulting from the translation is returned.
        Args:
        	num(Standard_Integer)=1

        Returns:
        	TopoDS_Shape

        Returns the shape resulting  
        from a translation and identified by the rank num.  
        num equals 1 by default. In other words, the first shape  
        resulting from the translation is returned.
        """
        return _XSControl.XSControl_Reader_Shape(self, num)

    def OneShape(self):
        """
        Args:
        	None
        Returns:
        	TopoDS_Shape

        Returns all of the results in  
        a single shape which is:  
        - a null shape if there are no results,  
        - a shape if there is one result,  
        - a compound containing the resulting shapes if there are more than one.
        """
        return _XSControl.XSControl_Reader_OneShape(self)

    def PrintCheckLoad(self, *args):
        """
        Args:
        	failsonly(Standard_Boolean)
        	mode(IFSelect_PrintCount)

        Returns:
        	None

        Prints the check list attached to loaded data, on the Standard  
                   Trace File (starts at cout)  
                  All messages or fails only, according to <failsonly>  
                  mode = 0 : per entity, prints messages  
                  mode = 1 : per message, just gives count of entities per check  
                  mode = 2 : also gives entity numbers
        """
        return _XSControl.XSControl_Reader_PrintCheckLoad(self, *args)

    def PrintCheckTransfer(self, *args):
        """
        Args:
        	failsonly(Standard_Boolean)
        	mode(IFSelect_PrintCount)

        Returns:
        	None

        Displays check results for the  
        last translation of IGES or STEP entities to Open CASCADE  
        entities. Only fail messages are displayed if failsonly is  
        true. All messages are displayed if failsonly is  
        false. mode determines the contents and the order of the  
        messages according to the terms of the IFSelect_PrintCount enumeration.
        """
        return _XSControl.XSControl_Reader_PrintCheckTransfer(self, *args)

    def PrintStatsTransfer(self, *args):
        """
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Displays the statistics for  
        the last translation. what defines the kind of  
        statistics that are displayed as follows:  
        - 0 gives general statistics (number of translated roots,  
        number of warnings, number of fail messages),  
        - 1 gives root results,  
           - 2 gives statistics for all checked entities,  
        - 3 gives the list of translated entities,  
        - 4 gives warning and fail messages,  
        - 5 gives fail messages only.  
        The use of mode depends on the value of what. If what is 0,  
        mode is ignored. If what is 1, 2 or 3, mode defines the following:  
        - 0 lists the numbers of IGES or STEP entities in the respective model  
        - 1 gives the number, identifier, type and result  
        type for each IGES or STEP entity and/or its status  
        (fail, warning, etc.)  
        - 2 gives maximum information for each IGES or STEP entity (i.e. checks)  
        - 3 gives the number of entities per type of IGES or STEP entity  
        - 4 gives the number of IGES or STEP entities per result type and/or status  
        - 5 gives the number of pairs (IGES or STEP or result type and status)  
        - 6 gives the number of pairs (IGES or STEP or result type  
        and status) AND the list of entity numbers in the IGES or STEP model.  
          If what is 4 or 5, mode defines the warning and fail  
        messages as follows:  
        - if mode is 0 all warnings and checks per entity are returned  
        - if mode is 2 the list of entities per warning is returned.  
          If mode is not set, only the list of all entities per warning is given.
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Displays the statistics for  
        the last translation. what defines the kind of  
        statistics that are displayed as follows:  
        - 0 gives general statistics (number of translated roots,  
        number of warnings, number of fail messages),  
        - 1 gives root results,  
           - 2 gives statistics for all checked entities,  
        - 3 gives the list of translated entities,  
        - 4 gives warning and fail messages,  
        - 5 gives fail messages only.  
        The use of mode depends on the value of what. If what is 0,  
        mode is ignored. If what is 1, 2 or 3, mode defines the following:  
        - 0 lists the numbers of IGES or STEP entities in the respective model  
        - 1 gives the number, identifier, type and result  
        type for each IGES or STEP entity and/or its status  
        (fail, warning, etc.)  
        - 2 gives maximum information for each IGES or STEP entity (i.e. checks)  
        - 3 gives the number of entities per type of IGES or STEP entity  
        - 4 gives the number of IGES or STEP entities per result type and/or status  
        - 5 gives the number of pairs (IGES or STEP or result type and status)  
        - 6 gives the number of pairs (IGES or STEP or result type  
        and status) AND the list of entity numbers in the IGES or STEP model.  
          If what is 4 or 5, mode defines the warning and fail  
        messages as follows:  
        - if mode is 0 all warnings and checks per entity are returned  
        - if mode is 2 the list of entities per warning is returned.  
          If mode is not set, only the list of all entities per warning is given.
        """
        return _XSControl.XSControl_Reader_PrintStatsTransfer(self, *args)

    def GetStatsTransfer(self, *args):
        """
        Args:
        	list(Handle_TColStd_HSequenceOfTransient)
        	nbMapped(Standard_Integer)
        	nbWithResult(Standard_Integer)
        	nbWithFail(Standard_Integer)

        Returns:
        	None

        Gives statistics about Transfer
        """
        return _XSControl.XSControl_Reader_GetStatsTransfer(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_Reader.SetNorm = new_instancemethod(_XSControl.XSControl_Reader_SetNorm,None,XSControl_Reader)
XSControl_Reader.SetWS = new_instancemethod(_XSControl.XSControl_Reader_SetWS,None,XSControl_Reader)
XSControl_Reader.WS = new_instancemethod(_XSControl.XSControl_Reader_WS,None,XSControl_Reader)
XSControl_Reader.ReadFile = new_instancemethod(_XSControl.XSControl_Reader_ReadFile,None,XSControl_Reader)
XSControl_Reader.Model = new_instancemethod(_XSControl.XSControl_Reader_Model,None,XSControl_Reader)
XSControl_Reader.GiveList = new_instancemethod(_XSControl.XSControl_Reader_GiveList,None,XSControl_Reader)
XSControl_Reader.NbRootsForTransfer = new_instancemethod(_XSControl.XSControl_Reader_NbRootsForTransfer,None,XSControl_Reader)
XSControl_Reader.RootForTransfer = new_instancemethod(_XSControl.XSControl_Reader_RootForTransfer,None,XSControl_Reader)
XSControl_Reader.TransferOneRoot = new_instancemethod(_XSControl.XSControl_Reader_TransferOneRoot,None,XSControl_Reader)
XSControl_Reader.TransferOne = new_instancemethod(_XSControl.XSControl_Reader_TransferOne,None,XSControl_Reader)
XSControl_Reader.TransferEntity = new_instancemethod(_XSControl.XSControl_Reader_TransferEntity,None,XSControl_Reader)
XSControl_Reader.TransferList = new_instancemethod(_XSControl.XSControl_Reader_TransferList,None,XSControl_Reader)
XSControl_Reader.TransferRoots = new_instancemethod(_XSControl.XSControl_Reader_TransferRoots,None,XSControl_Reader)
XSControl_Reader.ClearShapes = new_instancemethod(_XSControl.XSControl_Reader_ClearShapes,None,XSControl_Reader)
XSControl_Reader.NbShapes = new_instancemethod(_XSControl.XSControl_Reader_NbShapes,None,XSControl_Reader)
XSControl_Reader.Shape = new_instancemethod(_XSControl.XSControl_Reader_Shape,None,XSControl_Reader)
XSControl_Reader.OneShape = new_instancemethod(_XSControl.XSControl_Reader_OneShape,None,XSControl_Reader)
XSControl_Reader.PrintCheckLoad = new_instancemethod(_XSControl.XSControl_Reader_PrintCheckLoad,None,XSControl_Reader)
XSControl_Reader.PrintCheckTransfer = new_instancemethod(_XSControl.XSControl_Reader_PrintCheckTransfer,None,XSControl_Reader)
XSControl_Reader.PrintStatsTransfer = new_instancemethod(_XSControl.XSControl_Reader_PrintStatsTransfer,None,XSControl_Reader)
XSControl_Reader.GetStatsTransfer = new_instancemethod(_XSControl.XSControl_Reader_GetStatsTransfer,None,XSControl_Reader)
XSControl_Reader._kill_pointed = new_instancemethod(_XSControl.XSControl_Reader__kill_pointed,None,XSControl_Reader)
XSControl_Reader_swigregister = _XSControl.XSControl_Reader_swigregister
XSControl_Reader_swigregister(XSControl_Reader)

class XSControl_SelectForTransfer(OCC.IFSelect.IFSelect_SelectExtract):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a SelectForTransfer, non initialised  
                  it sorts nothing, unless an Actor has been defined
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Creates a SelectForTransfer, which will work with the  
                  currently defined Actor brought by the TransferReader
        """
        _XSControl.XSControl_SelectForTransfer_swiginit(self,_XSControl.new_XSControl_SelectForTransfer(*args))
    def SetReader(self, *args):
        """
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Sets a TransferReader to sort entities : it brings the Actor,  
                  which may change, while the TransferReader does not
        """
        return _XSControl.XSControl_SelectForTransfer_SetReader(self, *args)

    def SetActor(self, *args):
        """
        Args:
        	act(Handle_Transfer_ActorOfTransientProcess)

        Returns:
        	None

        Sets a precise actor to sort entities  
                  This definition oversedes the creation with a TransferReader
        """
        return _XSControl.XSControl_SelectForTransfer_SetActor(self, *args)

    def Actor(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_ActorOfTransientProcess

        Returns the Actor used as precised one.  
                  Returns a Null Handle for a creation from a TransferReader  
                  without any further setting
        """
        return _XSControl.XSControl_SelectForTransfer_Actor(self)

    def Reader(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_TransferReader

        Returns the Reader (if created with a Reader)  
                  Returns a Null Handle if not created with a Reader
        """
        return _XSControl.XSControl_SelectForTransfer_Reader(self)

    def _kill_pointed(self):
        """_kill_pointed(XSControl_SelectForTransfer self)"""
        return _XSControl.XSControl_SelectForTransfer__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_SelectForTransfer self) -> Handle_XSControl_SelectForTransfer"""
        return _XSControl.XSControl_SelectForTransfer_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_SelectForTransfer.SetReader = new_instancemethod(_XSControl.XSControl_SelectForTransfer_SetReader,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer.SetActor = new_instancemethod(_XSControl.XSControl_SelectForTransfer_SetActor,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer.Actor = new_instancemethod(_XSControl.XSControl_SelectForTransfer_Actor,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer.Reader = new_instancemethod(_XSControl.XSControl_SelectForTransfer_Reader,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer._kill_pointed = new_instancemethod(_XSControl.XSControl_SelectForTransfer__kill_pointed,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer.GetHandle = new_instancemethod(_XSControl.XSControl_SelectForTransfer_GetHandle,None,XSControl_SelectForTransfer)
XSControl_SelectForTransfer_swigregister = _XSControl.XSControl_SelectForTransfer_swigregister
XSControl_SelectForTransfer_swigregister(XSControl_SelectForTransfer)

class Handle_XSControl_SelectForTransfer(OCC.IFSelect.Handle_IFSelect_SelectExtract):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_SelectForTransfer_swiginit(self,_XSControl.new_Handle_XSControl_SelectForTransfer(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_SelectForTransfer_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_SelectForTransfer.Nullify = new_instancemethod(_XSControl.Handle_XSControl_SelectForTransfer_Nullify,None,Handle_XSControl_SelectForTransfer)
Handle_XSControl_SelectForTransfer.IsNull = new_instancemethod(_XSControl.Handle_XSControl_SelectForTransfer_IsNull,None,Handle_XSControl_SelectForTransfer)
Handle_XSControl_SelectForTransfer.GetObject = new_instancemethod(_XSControl.Handle_XSControl_SelectForTransfer_GetObject,None,Handle_XSControl_SelectForTransfer)
Handle_XSControl_SelectForTransfer._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_SelectForTransfer__kill_pointed,None,Handle_XSControl_SelectForTransfer)
Handle_XSControl_SelectForTransfer_swigregister = _XSControl.Handle_XSControl_SelectForTransfer_swigregister
Handle_XSControl_SelectForTransfer_swigregister(Handle_XSControl_SelectForTransfer)

def Handle_XSControl_SelectForTransfer_DownCast(*args):
  return _XSControl.Handle_XSControl_SelectForTransfer_DownCast(*args)
Handle_XSControl_SelectForTransfer_DownCast = _XSControl.Handle_XSControl_SelectForTransfer_DownCast

class XSControl_SignTransferStatus(OCC.IFSelect.IFSelect_Signature):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a SignTransferStatus, not initialised  
                  it gives nothing (empty string)
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Creates a SignTransferStatus, which will work on the current  
                  TransientProcess brought by the TransferReader (its MapReader)
        """
        _XSControl.XSControl_SignTransferStatus_swiginit(self,_XSControl.new_XSControl_SignTransferStatus(*args))
    def SetReader(self, *args):
        """
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Sets a TransferReader to work
        """
        return _XSControl.XSControl_SignTransferStatus_SetReader(self, *args)

    def SetMap(self, *args):
        """
        Args:
        	TP(Handle_Transfer_TransientProcess)

        Returns:
        	None

        Sets a precise map to sign entities  
                  This definition oversedes the creation with a TransferReader
        """
        return _XSControl.XSControl_SignTransferStatus_SetMap(self, *args)

    def Map(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_TransientProcess

        Returns the TransientProcess used as precised one  
                  Returns a Null Handle for a creation from a TransferReader  
                  without any further setting
        """
        return _XSControl.XSControl_SignTransferStatus_Map(self)

    def Reader(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_TransferReader

        Returns the Reader (if created with a Reader)  
                  Returns a Null Handle if not created with a Reader
        """
        return _XSControl.XSControl_SignTransferStatus_Reader(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_SignTransferStatus.SetReader = new_instancemethod(_XSControl.XSControl_SignTransferStatus_SetReader,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus.SetMap = new_instancemethod(_XSControl.XSControl_SignTransferStatus_SetMap,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus.Map = new_instancemethod(_XSControl.XSControl_SignTransferStatus_Map,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus.Reader = new_instancemethod(_XSControl.XSControl_SignTransferStatus_Reader,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus._kill_pointed = new_instancemethod(_XSControl.XSControl_SignTransferStatus__kill_pointed,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus.GetHandle = new_instancemethod(_XSControl.XSControl_SignTransferStatus_GetHandle,None,XSControl_SignTransferStatus)
XSControl_SignTransferStatus_swigregister = _XSControl.XSControl_SignTransferStatus_swigregister
XSControl_SignTransferStatus_swigregister(XSControl_SignTransferStatus)

class Handle_XSControl_SignTransferStatus(OCC.IFSelect.Handle_IFSelect_Signature):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_SignTransferStatus_swiginit(self,_XSControl.new_Handle_XSControl_SignTransferStatus(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_SignTransferStatus_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_SignTransferStatus.Nullify = new_instancemethod(_XSControl.Handle_XSControl_SignTransferStatus_Nullify,None,Handle_XSControl_SignTransferStatus)
Handle_XSControl_SignTransferStatus.IsNull = new_instancemethod(_XSControl.Handle_XSControl_SignTransferStatus_IsNull,None,Handle_XSControl_SignTransferStatus)
Handle_XSControl_SignTransferStatus.GetObject = new_instancemethod(_XSControl.Handle_XSControl_SignTransferStatus_GetObject,None,Handle_XSControl_SignTransferStatus)
Handle_XSControl_SignTransferStatus._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_SignTransferStatus__kill_pointed,None,Handle_XSControl_SignTransferStatus)
Handle_XSControl_SignTransferStatus_swigregister = _XSControl.Handle_XSControl_SignTransferStatus_swigregister
Handle_XSControl_SignTransferStatus_swigregister(Handle_XSControl_SignTransferStatus)

def Handle_XSControl_SignTransferStatus_DownCast(*args):
  return _XSControl.Handle_XSControl_SignTransferStatus_DownCast(*args)
Handle_XSControl_SignTransferStatus_DownCast = _XSControl.Handle_XSControl_SignTransferStatus_DownCast

class XSControl_TransferReader(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a TransferReader, empty
        """
        _XSControl.XSControl_TransferReader_swiginit(self,_XSControl.new_XSControl_TransferReader())
    def SetController(self, *args):
        """
        Args:
        	control(Handle_XSControl_Controller)

        Returns:
        	None

        Sets a Controller. It is required to generate the Actor.  
                  Elsewhere, the Actor must be provided directly
        """
        return _XSControl.XSControl_TransferReader_SetController(self, *args)

    def SetActor(self, *args):
        """
        Args:
        	actor(Handle_Transfer_ActorOfTransientProcess)

        Returns:
        	None

        Sets the Actor directly : this value will be used if the  
                  Controller is not set
        """
        return _XSControl.XSControl_TransferReader_SetActor(self, *args)

    def Actor(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_ActorOfTransientProcess

        Returns the Actor, determined by the Controller, or if this  
                  one is unknown, directly set.  
                  Once it has been defined, it can then be edited.
        """
        return _XSControl.XSControl_TransferReader_Actor(self)

    def SetModel(self, *args):
        """
        Args:
        	model(Handle_Interface_InterfaceModel)

        Returns:
        	None

        Sets an InterfaceModel. This causes former results, computed  
                  from another one, to be lost (see also Clear)
        """
        return _XSControl.XSControl_TransferReader_SetModel(self, *args)

    def SetGraph(self, *args):
        """
        Args:
        	graph(Handle_Interface_HGraph)

        Returns:
        	None

        Sets a Graph and its InterfaceModel (calls SetModel)
        """
        return _XSControl.XSControl_TransferReader_SetGraph(self, *args)

    def Model(self):
        """
        Args:
        	None
        Returns:
        	Handle_Interface_InterfaceModel

        Returns the currently set InterfaceModel
        """
        return _XSControl.XSControl_TransferReader_Model(self)

    def SetContext(self, *args):
        """
        Args:
        	name(char *)
        	ctx(Handle_Standard_Transient)

        Returns:
        	None

        Sets a Context : according to receiving appli, to be  
                  interpreted by the Actor
        """
        return _XSControl.XSControl_TransferReader_SetContext(self, *args)

    def GetContext(self, *args):
        """
        Args:
        	name(char *)
        	type(Handle_Standard_Type)
        	ctx(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns the Context attached to a name, if set and if it is  
                  Kind of the type, else a Null Handle  
                  Returns True if OK, False if no Context
        """
        return _XSControl.XSControl_TransferReader_GetContext(self, *args)

    def Context(self):
        """
        Args:
        	None
        Returns:
        	Handle_Dico_DictionaryOfTransient

        Returns (modifiable) the whole definition of Context  
                  Rather for internal use (ex.: preparing and setting in once)
        """
        return _XSControl.XSControl_TransferReader_Context(self)

    def SetFileName(self, *args):
        """
        Args:
        	name(char *)

        Returns:
        	None

        Sets a new value for (loaded) file name
        """
        return _XSControl.XSControl_TransferReader_SetFileName(self, *args)

    def FileName(self):
        """
        Args:
        	None
        Returns:
        	char *

        Returns actual value of file name
        """
        return _XSControl.XSControl_TransferReader_FileName(self)

    def Clear(self, *args):
        """
        Args:
        	mode(Standard_Integer)

        Returns:
        	None

        Clears data, according mode :  
                  -1 all  
                   0 nothing done  
                  +1 final results  
                  +2 working data (model, context, transfer process)
        """
        return _XSControl.XSControl_TransferReader_Clear(self, *args)

    def TransientProcess(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_TransientProcess

        Returns the currently used TransientProcess  
                  It is computed from the model by TransferReadRoots, or by  
                  BeginTransferRead
        """
        return _XSControl.XSControl_TransferReader_TransientProcess(self)

    def SetTransientProcess(self, *args):
        """
        Args:
        	TP(Handle_Transfer_TransientProcess)

        Returns:
        	None

        Forces the TransientProcess  
                  Remark : it also changes the Model and the Actor, from those  
                  recorded in the new TransientProcess
        """
        return _XSControl.XSControl_TransferReader_SetTransientProcess(self, *args)

    def RecordResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Records a final result of transferring an entity  
                  This result is recorded as a ResultFromModel, taken from  
                  the TransientProcess  
                  Returns True if a result is available, False else
        """
        return _XSControl.XSControl_TransferReader_RecordResult(self, *args)

    def IsRecorded(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns True if a final result is recorded for an entity  
                  Remark that it can bring no effective result if transfer has  
                  completely failed (FinalResult brings only fail messages ...)
        """
        return _XSControl.XSControl_TransferReader_IsRecorded(self, *args)

    def HasResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns True if a final result is recorded AND BRINGS AN  
                  EFFECTIVE RESULT (else, it brings only fail messages)
        """
        return _XSControl.XSControl_TransferReader_HasResult(self, *args)

    def RecordedList(self):
        """
        Args:
        	None
        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of entities to which a final result is  
                  attached (i.e. processed by RecordResult)
        """
        return _XSControl.XSControl_TransferReader_RecordedList(self)

    def Skip(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Note that an entity has been required for transfer but no  
                  result at all is available (typically : case not implemented)  
                  It is not an error, but it gives a specific status : Skipped  
                  Returns True if done, False if <ent> is not in starting model
        """
        return _XSControl.XSControl_TransferReader_Skip(self, *args)

    def IsSkipped(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns True if an entity is noted as skipped
        """
        return _XSControl.XSControl_TransferReader_IsSkipped(self, *args)

    def IsMarked(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Returns True if an entity has been asked for transfert, hence  
                  it is marked, as : Recorded (a computation has ran, with or  
                  without an effective result), or Skipped (case ignored)
        """
        return _XSControl.XSControl_TransferReader_IsMarked(self, *args)

    def FinalResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Handle_Transfer_ResultFromModel

        Returns the final result recorded for an entity, as such
        """
        return _XSControl.XSControl_TransferReader_FinalResult(self, *args)

    def FinalEntityLabel(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	char *

        Returns the label attached to an entity recorded for final,  
                  or an empty string if not recorded
        """
        return _XSControl.XSControl_TransferReader_FinalEntityLabel(self, *args)

    def FinalEntityNumber(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Integer

        Returns the number attached to the entity recorded for final,  
                  or zero if not recorded (looks in the ResultFromModel)
        """
        return _XSControl.XSControl_TransferReader_FinalEntityNumber(self, *args)

    def ResultFromNumber(self, *args):
        """
        Args:
        	num(Standard_Integer)

        Returns:
        	Handle_Transfer_ResultFromModel

        Returns the final result recorded for a NUMBER of entity  
                  (internal use). Null if out of range
        """
        return _XSControl.XSControl_TransferReader_ResultFromNumber(self, *args)

    def TransientResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Handle_Standard_Transient

        Returns the resulting object as a Transient  
                  Null Handle if no result or result not transient
        """
        return _XSControl.XSControl_TransferReader_TransientResult(self, *args)

    def ShapeResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	TopoDS_Shape

        Returns the resulting object as a Shape  
                  Null Shape if no result or result not a shape
        """
        return _XSControl.XSControl_TransferReader_ShapeResult(self, *args)

    def ClearResult(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	mode(Standard_Integer)

        Returns:
        	Standard_Boolean

        Clears recorded result for an entity, according mode  
                  <mode> = -1 : true, complete, clearing (erasing result)  
                  <mode> >= 0 : simple 'stripping', see ResultFromModel,  
                    in particular, 0 for simple internal strip,  
                    10 for all but final result,  
                    11 for all : just label, status and filename are kept  
                  Returns True when done, False if nothing was to clear
        """
        return _XSControl.XSControl_TransferReader_ClearResult(self, *args)

    def EntityFromResult(self, *args):
        """
        Args:
        	res(Handle_Standard_Transient)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_Standard_Transient

        Returns an entity from which a given result was produced.  
                  If <mode> = 0 (D), searches in last root transfers  
                  If <mode> = 1,     searches in last (root & sub) transfers  
                  If <mode> = 2,     searches in root recorded results  
                  If <mode> = 3,     searches in all (root & sub) recordeds  
                  <res> can be, either a transient object (result itself) or  
                  a binder. For a binder of shape, calls EntityFromShapeResult  
                  Returns a Null Handle if <res> not recorded
        Args:
        	res(Handle_Standard_Transient)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_Standard_Transient

        Returns an entity from which a given result was produced.  
                  If <mode> = 0 (D), searches in last root transfers  
                  If <mode> = 1,     searches in last (root & sub) transfers  
                  If <mode> = 2,     searches in root recorded results  
                  If <mode> = 3,     searches in all (root & sub) recordeds  
                  <res> can be, either a transient object (result itself) or  
                  a binder. For a binder of shape, calls EntityFromShapeResult  
                  Returns a Null Handle if <res> not recorded
        """
        return _XSControl.XSControl_TransferReader_EntityFromResult(self, *args)

    def EntityFromShapeResult(self, *args):
        """
        Args:
        	res(TopoDS_Shape)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_Standard_Transient

        Returns an entity from which a given shape result was produced  
                  Returns a Null Handle if <res> not recorded or not a Shape
        Args:
        	res(TopoDS_Shape)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_Standard_Transient

        Returns an entity from which a given shape result was produced  
                  Returns a Null Handle if <res> not recorded or not a Shape
        """
        return _XSControl.XSControl_TransferReader_EntityFromShapeResult(self, *args)

    def EntitiesFromShapeList(self, *args):
        """
        Args:
        	res(Handle_TopTools_HSequenceOfShape)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of entities from which some shapes were  
                  produced : it corresponds to a loop on EntityFromShapeResult,  
                  but is optimised
        Args:
        	res(Handle_TopTools_HSequenceOfShape)
        	mode(Standard_Integer)=0

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of entities from which some shapes were  
                  produced : it corresponds to a loop on EntityFromShapeResult,  
                  but is optimised
        """
        return _XSControl.XSControl_TransferReader_EntitiesFromShapeList(self, *args)

    def CheckList(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	level(Standard_Integer)=0

        Returns:
        	Interface_CheckIterator

        Returns the CheckList resulting from transferring <ent>, i.e.  
                  stored in its recorded form ResultFromModel  
                  (empty if transfer successful or not recorded ...)  
         
                  If <ent> is the Model, returns the complete cumulated  
                  check-list, <level> is ignored  
         
                  If <ent> is an entity of the Model, <level> applies as follows  
                  <level> : -1 for <ent> only, LAST transfer (TransientProcess)  
                  <level> : 0  for <ent> only (D)  
                            1  for <ent> and its immediate subtransfers, if any  
                            2  for <ent> and subtransferts at all levels
        Args:
        	ent(Handle_Standard_Transient)
        	level(Standard_Integer)=0

        Returns:
        	Interface_CheckIterator

        Returns the CheckList resulting from transferring <ent>, i.e.  
                  stored in its recorded form ResultFromModel  
                  (empty if transfer successful or not recorded ...)  
         
                  If <ent> is the Model, returns the complete cumulated  
                  check-list, <level> is ignored  
         
                  If <ent> is an entity of the Model, <level> applies as follows  
                  <level> : -1 for <ent> only, LAST transfer (TransientProcess)  
                  <level> : 0  for <ent> only (D)  
                            1  for <ent> and its immediate subtransfers, if any  
                            2  for <ent> and subtransferts at all levels
        """
        return _XSControl.XSControl_TransferReader_CheckList(self, *args)

    def HasChecks(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	failsonly(Standard_Boolean)

        Returns:
        	Standard_Boolean

        Returns True if an entity (with a final result) has checks :  
                  - failsonly = False : any kind of check message  
                  - failsonly = True  : fails only  
                  Returns False if <ent> is not recorded
        """
        return _XSControl.XSControl_TransferReader_HasChecks(self, *args)

    def CheckedList(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	withcheck(Interface_CheckStatus)=Interface_CheckAny
        	result(Standard_Boolean)=Standard_True

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of starting entities to which a given check  
                  status is attached, IN FINAL RESULTS  
                  <ent> can be an entity, or the model to query all entities  
                  Below, 'entities' are, either <ent> plus its sub-transferred,  
                  or all the entities of the model  
         
                  <check> = -2 , all entities whatever the check (see result)  
                  <check> = -1 , entities with no fail (warning allowed)  
                  <check> =  0 , entities with no check at all  
                  <check> =  1 , entities with warning but no fail  
                  <check> =  2 , entities with fail  
                  <result> : if True, only entities with an attached result  
                  Remark : result True and check=0 will give an empty list
        Args:
        	ent(Handle_Standard_Transient)
        	withcheck(Interface_CheckStatus)=Interface_CheckAny
        	result(Standard_Boolean)=Standard_True

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of starting entities to which a given check  
                  status is attached, IN FINAL RESULTS  
                  <ent> can be an entity, or the model to query all entities  
                  Below, 'entities' are, either <ent> plus its sub-transferred,  
                  or all the entities of the model  
         
                  <check> = -2 , all entities whatever the check (see result)  
                  <check> = -1 , entities with no fail (warning allowed)  
                  <check> =  0 , entities with no check at all  
                  <check> =  1 , entities with warning but no fail  
                  <check> =  2 , entities with fail  
                  <result> : if True, only entities with an attached result  
                  Remark : result True and check=0 will give an empty list
        Args:
        	ent(Handle_Standard_Transient)
        	withcheck(Interface_CheckStatus)=Interface_CheckAny
        	result(Standard_Boolean)=Standard_True

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of starting entities to which a given check  
                  status is attached, IN FINAL RESULTS  
                  <ent> can be an entity, or the model to query all entities  
                  Below, 'entities' are, either <ent> plus its sub-transferred,  
                  or all the entities of the model  
         
                  <check> = -2 , all entities whatever the check (see result)  
                  <check> = -1 , entities with no fail (warning allowed)  
                  <check> =  0 , entities with no check at all  
                  <check> =  1 , entities with warning but no fail  
                  <check> =  2 , entities with fail  
                  <result> : if True, only entities with an attached result  
                  Remark : result True and check=0 will give an empty list
        """
        return _XSControl.XSControl_TransferReader_CheckedList(self, *args)

    def BeginTransfer(self):
        """
        Args:
        	None
        Returns:
        	Standard_Boolean

        Defines a new TransferProcess for reading transfer  
                  Returns True if done, False if data are not properly defined  
                  (the Model, the Actor for Read)
        """
        return _XSControl.XSControl_TransferReader_BeginTransfer(self)

    def Recognize(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Tells if an entity is recognized as a valid candidate for  
                  Transfer. Calls method Recognize from the Actor (if known)
        """
        return _XSControl.XSControl_TransferReader_Recognize(self, *args)

    def TransferOne(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	rec(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Integer

        Commands the transfer on reading for an entity to data for  
                  Imagine, using the selected Actor for Read  
                  Returns count of transferred entities, ok or with fails (0/1)  
                  If <rec> is True (D), the result is recorded by RecordResult
        Args:
        	ent(Handle_Standard_Transient)
        	rec(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Integer

        Commands the transfer on reading for an entity to data for  
                  Imagine, using the selected Actor for Read  
                  Returns count of transferred entities, ok or with fails (0/1)  
                  If <rec> is True (D), the result is recorded by RecordResult
        """
        return _XSControl.XSControl_TransferReader_TransferOne(self, *args)

    def TransferList(self, *args):
        """
        Args:
        	list(Handle_TColStd_HSequenceOfTransient)
        	rec(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Integer

        Commands the transfer on reading for a list of entities to  
                  data for Imagine, using the selected Actor for Read  
                  Returns count of transferred entities, ok or with fails (0/1)  
                  If <rec> is True (D), the results are recorded by RecordResult
        Args:
        	list(Handle_TColStd_HSequenceOfTransient)
        	rec(Standard_Boolean)=Standard_True

        Returns:
        	Standard_Integer

        Commands the transfer on reading for a list of entities to  
                  data for Imagine, using the selected Actor for Read  
                  Returns count of transferred entities, ok or with fails (0/1)  
                  If <rec> is True (D), the results are recorded by RecordResult
        """
        return _XSControl.XSControl_TransferReader_TransferList(self, *args)

    def TransferRoots(self, *args):
        """
        Args:
        	G(Interface_Graph)

        Returns:
        	Standard_Integer

        Transfers the content of the current Interface Model to  
                  data handled by Imagine, starting from its Roots (determined  
                  by the Graph <G>),  using the selected Actor for Read  
                  Returns the count of performed root transfers (i.e. 0 if none)  
                  or -1 if no actor is defined
        """
        return _XSControl.XSControl_TransferReader_TransferRoots(self, *args)

    def TransferClear(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	level(Standard_Integer)=0

        Returns:
        	None

        Clears the results attached to an entity  
                  if <ents> equates the starting model, clears all results
        Args:
        	ent(Handle_Standard_Transient)
        	level(Standard_Integer)=0

        Returns:
        	None

        Clears the results attached to an entity  
                  if <ents> equates the starting model, clears all results
        """
        return _XSControl.XSControl_TransferReader_TransferClear(self, *args)

    def PrintStats(self, *args):
        """
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints statistics on current Trace File, according <what> and  
                  <mode>.  See PrintStatsProcess for details
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints statistics on current Trace File, according <what> and  
                  <mode>.  See PrintStatsProcess for details
        """
        return _XSControl.XSControl_TransferReader_PrintStats(self, *args)

    def LastCheckList(self):
        """
        Args:
        	None
        Returns:
        	Interface_CheckIterator

        Returns the CheckList resulting from last TransferRead  
                  i.e. from TransientProcess itself, recorded from last Clear
        """
        return _XSControl.XSControl_TransferReader_LastCheckList(self)

    def LastTransferList(self, *args):
        """
        Args:
        	roots(Standard_Boolean)

        Returns:
        	Handle_TColStd_HSequenceOfTransient

        Returns the list of entities recorded as lastly transferred  
                  i.e. from TransientProcess itself, recorded from last Clear  
                  If <roots> is True , considers only roots of transfer  
                  If <roots> is False, considers all entities bound with result
        """
        return _XSControl.XSControl_TransferReader_LastTransferList(self, *args)

    def ShapeResultList(self, *args):
        """
        Args:
        	rec(Standard_Boolean)

        Returns:
        	Handle_TopTools_HSequenceOfShape

        Returns a list of result Shapes  
                  If <rec> is True , sees RecordedList  
                  If <rec> is False, sees LastTransferList (last ROOT transfers)  
                  For each one, if it is a Shape, it is cumulated to the list  
                  If no Shape is found, returns an empty Sequence
        """
        return _XSControl.XSControl_TransferReader_ShapeResultList(self, *args)

    def PrintStatsProcess(*args):
        """
        Args:
        	TP(Handle_Transfer_TransientProcess)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        This routines prints statistics about a TransientProcess  
                  It can be called, by a TransferReader, or isolately  
                  Prints are done on the default trace file  
                  <what> defines what kind of statistics are to be printed :  
                  0 : basic figures  
                  1 : root results  
                  2 : all recorded (roots, intermediate, checked entities)  
                  3 : abnormal records  
                  4 : check messages (warnings and fails)  
                  5 : fail messages  
         
                  <mode> is used according <what> :  
                  <what> = 0 : <mode> is ignored  
                  <what> = 1,2,3 : <mode> as follows :  
                  0 (D) : just lists numbers of concerned entities in the model  
                  1 : for each entity, gives number,label, type and result  
                         type and/or status (fail/warning...)  
                  2 : for each entity, gives maximal information (i.e. checks)  
                  3 : counts per type of starting entity (class type)  
                  4 : counts per result type and/or status  
                  5 : counts per couple (starting type / result type/status)  
                  6 : idem plus gives for each item, the list of numbers of  
                         entities in the starting model  
         
                  <what> = 4,5 : modes relays on an enum PrintCount :  
                  0 (D) : ItemsByEntity (sequential list by entity)  
                  1 : CountByItem  
                  2 : ShortByItem       (count + 5 first numbers)  
                  3 : ListByItem        (count + entity numbers)  
                  4 : EntitiesByItem    (count + entity numbers and labels)
        Args:
        	TP(Handle_Transfer_TransientProcess)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        This routines prints statistics about a TransientProcess  
                  It can be called, by a TransferReader, or isolately  
                  Prints are done on the default trace file  
                  <what> defines what kind of statistics are to be printed :  
                  0 : basic figures  
                  1 : root results  
                  2 : all recorded (roots, intermediate, checked entities)  
                  3 : abnormal records  
                  4 : check messages (warnings and fails)  
                  5 : fail messages  
         
                  <mode> is used according <what> :  
                  <what> = 0 : <mode> is ignored  
                  <what> = 1,2,3 : <mode> as follows :  
                  0 (D) : just lists numbers of concerned entities in the model  
                  1 : for each entity, gives number,label, type and result  
                         type and/or status (fail/warning...)  
                  2 : for each entity, gives maximal information (i.e. checks)  
                  3 : counts per type of starting entity (class type)  
                  4 : counts per result type and/or status  
                  5 : counts per couple (starting type / result type/status)  
                  6 : idem plus gives for each item, the list of numbers of  
                         entities in the starting model  
         
                  <what> = 4,5 : modes relays on an enum PrintCount :  
                  0 (D) : ItemsByEntity (sequential list by entity)  
                  1 : CountByItem  
                  2 : ShortByItem       (count + 5 first numbers)  
                  3 : ListByItem        (count + entity numbers)  
                  4 : EntitiesByItem    (count + entity numbers and labels)
        """
        return _XSControl.XSControl_TransferReader_PrintStatsProcess(*args)

    PrintStatsProcess = staticmethod(PrintStatsProcess)
    def PrintStatsOnList(*args):
        """
        Args:
        	TP(Handle_Transfer_TransientProcess)
        	list(Handle_TColStd_HSequenceOfTransient)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        Works as PrintStatsProcess, but displays data only on the  
                  entities which are in <list> (filter)
        Args:
        	TP(Handle_Transfer_TransientProcess)
        	list(Handle_TColStd_HSequenceOfTransient)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        Works as PrintStatsProcess, but displays data only on the  
                  entities which are in <list> (filter)
        """
        return _XSControl.XSControl_TransferReader_PrintStatsOnList(*args)

    PrintStatsOnList = staticmethod(PrintStatsOnList)
    def _kill_pointed(self):
        """_kill_pointed(XSControl_TransferReader self)"""
        return _XSControl.XSControl_TransferReader__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_TransferReader self) -> Handle_XSControl_TransferReader"""
        return _XSControl.XSControl_TransferReader_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_TransferReader.SetController = new_instancemethod(_XSControl.XSControl_TransferReader_SetController,None,XSControl_TransferReader)
XSControl_TransferReader.SetActor = new_instancemethod(_XSControl.XSControl_TransferReader_SetActor,None,XSControl_TransferReader)
XSControl_TransferReader.Actor = new_instancemethod(_XSControl.XSControl_TransferReader_Actor,None,XSControl_TransferReader)
XSControl_TransferReader.SetModel = new_instancemethod(_XSControl.XSControl_TransferReader_SetModel,None,XSControl_TransferReader)
XSControl_TransferReader.SetGraph = new_instancemethod(_XSControl.XSControl_TransferReader_SetGraph,None,XSControl_TransferReader)
XSControl_TransferReader.Model = new_instancemethod(_XSControl.XSControl_TransferReader_Model,None,XSControl_TransferReader)
XSControl_TransferReader.SetContext = new_instancemethod(_XSControl.XSControl_TransferReader_SetContext,None,XSControl_TransferReader)
XSControl_TransferReader.GetContext = new_instancemethod(_XSControl.XSControl_TransferReader_GetContext,None,XSControl_TransferReader)
XSControl_TransferReader.Context = new_instancemethod(_XSControl.XSControl_TransferReader_Context,None,XSControl_TransferReader)
XSControl_TransferReader.SetFileName = new_instancemethod(_XSControl.XSControl_TransferReader_SetFileName,None,XSControl_TransferReader)
XSControl_TransferReader.FileName = new_instancemethod(_XSControl.XSControl_TransferReader_FileName,None,XSControl_TransferReader)
XSControl_TransferReader.Clear = new_instancemethod(_XSControl.XSControl_TransferReader_Clear,None,XSControl_TransferReader)
XSControl_TransferReader.TransientProcess = new_instancemethod(_XSControl.XSControl_TransferReader_TransientProcess,None,XSControl_TransferReader)
XSControl_TransferReader.SetTransientProcess = new_instancemethod(_XSControl.XSControl_TransferReader_SetTransientProcess,None,XSControl_TransferReader)
XSControl_TransferReader.RecordResult = new_instancemethod(_XSControl.XSControl_TransferReader_RecordResult,None,XSControl_TransferReader)
XSControl_TransferReader.IsRecorded = new_instancemethod(_XSControl.XSControl_TransferReader_IsRecorded,None,XSControl_TransferReader)
XSControl_TransferReader.HasResult = new_instancemethod(_XSControl.XSControl_TransferReader_HasResult,None,XSControl_TransferReader)
XSControl_TransferReader.RecordedList = new_instancemethod(_XSControl.XSControl_TransferReader_RecordedList,None,XSControl_TransferReader)
XSControl_TransferReader.Skip = new_instancemethod(_XSControl.XSControl_TransferReader_Skip,None,XSControl_TransferReader)
XSControl_TransferReader.IsSkipped = new_instancemethod(_XSControl.XSControl_TransferReader_IsSkipped,None,XSControl_TransferReader)
XSControl_TransferReader.IsMarked = new_instancemethod(_XSControl.XSControl_TransferReader_IsMarked,None,XSControl_TransferReader)
XSControl_TransferReader.FinalResult = new_instancemethod(_XSControl.XSControl_TransferReader_FinalResult,None,XSControl_TransferReader)
XSControl_TransferReader.FinalEntityLabel = new_instancemethod(_XSControl.XSControl_TransferReader_FinalEntityLabel,None,XSControl_TransferReader)
XSControl_TransferReader.FinalEntityNumber = new_instancemethod(_XSControl.XSControl_TransferReader_FinalEntityNumber,None,XSControl_TransferReader)
XSControl_TransferReader.ResultFromNumber = new_instancemethod(_XSControl.XSControl_TransferReader_ResultFromNumber,None,XSControl_TransferReader)
XSControl_TransferReader.TransientResult = new_instancemethod(_XSControl.XSControl_TransferReader_TransientResult,None,XSControl_TransferReader)
XSControl_TransferReader.ShapeResult = new_instancemethod(_XSControl.XSControl_TransferReader_ShapeResult,None,XSControl_TransferReader)
XSControl_TransferReader.ClearResult = new_instancemethod(_XSControl.XSControl_TransferReader_ClearResult,None,XSControl_TransferReader)
XSControl_TransferReader.EntityFromResult = new_instancemethod(_XSControl.XSControl_TransferReader_EntityFromResult,None,XSControl_TransferReader)
XSControl_TransferReader.EntityFromShapeResult = new_instancemethod(_XSControl.XSControl_TransferReader_EntityFromShapeResult,None,XSControl_TransferReader)
XSControl_TransferReader.EntitiesFromShapeList = new_instancemethod(_XSControl.XSControl_TransferReader_EntitiesFromShapeList,None,XSControl_TransferReader)
XSControl_TransferReader.CheckList = new_instancemethod(_XSControl.XSControl_TransferReader_CheckList,None,XSControl_TransferReader)
XSControl_TransferReader.HasChecks = new_instancemethod(_XSControl.XSControl_TransferReader_HasChecks,None,XSControl_TransferReader)
XSControl_TransferReader.CheckedList = new_instancemethod(_XSControl.XSControl_TransferReader_CheckedList,None,XSControl_TransferReader)
XSControl_TransferReader.BeginTransfer = new_instancemethod(_XSControl.XSControl_TransferReader_BeginTransfer,None,XSControl_TransferReader)
XSControl_TransferReader.Recognize = new_instancemethod(_XSControl.XSControl_TransferReader_Recognize,None,XSControl_TransferReader)
XSControl_TransferReader.TransferOne = new_instancemethod(_XSControl.XSControl_TransferReader_TransferOne,None,XSControl_TransferReader)
XSControl_TransferReader.TransferList = new_instancemethod(_XSControl.XSControl_TransferReader_TransferList,None,XSControl_TransferReader)
XSControl_TransferReader.TransferRoots = new_instancemethod(_XSControl.XSControl_TransferReader_TransferRoots,None,XSControl_TransferReader)
XSControl_TransferReader.TransferClear = new_instancemethod(_XSControl.XSControl_TransferReader_TransferClear,None,XSControl_TransferReader)
XSControl_TransferReader.PrintStats = new_instancemethod(_XSControl.XSControl_TransferReader_PrintStats,None,XSControl_TransferReader)
XSControl_TransferReader.LastCheckList = new_instancemethod(_XSControl.XSControl_TransferReader_LastCheckList,None,XSControl_TransferReader)
XSControl_TransferReader.LastTransferList = new_instancemethod(_XSControl.XSControl_TransferReader_LastTransferList,None,XSControl_TransferReader)
XSControl_TransferReader.ShapeResultList = new_instancemethod(_XSControl.XSControl_TransferReader_ShapeResultList,None,XSControl_TransferReader)
XSControl_TransferReader._kill_pointed = new_instancemethod(_XSControl.XSControl_TransferReader__kill_pointed,None,XSControl_TransferReader)
XSControl_TransferReader.GetHandle = new_instancemethod(_XSControl.XSControl_TransferReader_GetHandle,None,XSControl_TransferReader)
XSControl_TransferReader_swigregister = _XSControl.XSControl_TransferReader_swigregister
XSControl_TransferReader_swigregister(XSControl_TransferReader)

def XSControl_TransferReader_PrintStatsProcess(*args):
  """
    Args:
    	TP(Handle_Transfer_TransientProcess)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    This routines prints statistics about a TransientProcess  
              It can be called, by a TransferReader, or isolately  
              Prints are done on the default trace file  
              <what> defines what kind of statistics are to be printed :  
              0 : basic figures  
              1 : root results  
              2 : all recorded (roots, intermediate, checked entities)  
              3 : abnormal records  
              4 : check messages (warnings and fails)  
              5 : fail messages  
     
              <mode> is used according <what> :  
              <what> = 0 : <mode> is ignored  
              <what> = 1,2,3 : <mode> as follows :  
              0 (D) : just lists numbers of concerned entities in the model  
              1 : for each entity, gives number,label, type and result  
                     type and/or status (fail/warning...)  
              2 : for each entity, gives maximal information (i.e. checks)  
              3 : counts per type of starting entity (class type)  
              4 : counts per result type and/or status  
              5 : counts per couple (starting type / result type/status)  
              6 : idem plus gives for each item, the list of numbers of  
                     entities in the starting model  
     
              <what> = 4,5 : modes relays on an enum PrintCount :  
              0 (D) : ItemsByEntity (sequential list by entity)  
              1 : CountByItem  
              2 : ShortByItem       (count + 5 first numbers)  
              3 : ListByItem        (count + entity numbers)  
              4 : EntitiesByItem    (count + entity numbers and labels)
    Args:
    	TP(Handle_Transfer_TransientProcess)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    This routines prints statistics about a TransientProcess  
              It can be called, by a TransferReader, or isolately  
              Prints are done on the default trace file  
              <what> defines what kind of statistics are to be printed :  
              0 : basic figures  
              1 : root results  
              2 : all recorded (roots, intermediate, checked entities)  
              3 : abnormal records  
              4 : check messages (warnings and fails)  
              5 : fail messages  
     
              <mode> is used according <what> :  
              <what> = 0 : <mode> is ignored  
              <what> = 1,2,3 : <mode> as follows :  
              0 (D) : just lists numbers of concerned entities in the model  
              1 : for each entity, gives number,label, type and result  
                     type and/or status (fail/warning...)  
              2 : for each entity, gives maximal information (i.e. checks)  
              3 : counts per type of starting entity (class type)  
              4 : counts per result type and/or status  
              5 : counts per couple (starting type / result type/status)  
              6 : idem plus gives for each item, the list of numbers of  
                     entities in the starting model  
     
              <what> = 4,5 : modes relays on an enum PrintCount :  
              0 (D) : ItemsByEntity (sequential list by entity)  
              1 : CountByItem  
              2 : ShortByItem       (count + 5 first numbers)  
              3 : ListByItem        (count + entity numbers)  
              4 : EntitiesByItem    (count + entity numbers and labels)
    """
  return _XSControl.XSControl_TransferReader_PrintStatsProcess(*args)

def XSControl_TransferReader_PrintStatsOnList(*args):
  """
    Args:
    	TP(Handle_Transfer_TransientProcess)
    	list(Handle_TColStd_HSequenceOfTransient)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    Works as PrintStatsProcess, but displays data only on the  
              entities which are in <list> (filter)
    Args:
    	TP(Handle_Transfer_TransientProcess)
    	list(Handle_TColStd_HSequenceOfTransient)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    Works as PrintStatsProcess, but displays data only on the  
              entities which are in <list> (filter)
    """
  return _XSControl.XSControl_TransferReader_PrintStatsOnList(*args)

class Handle_XSControl_TransferReader(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_TransferReader_swiginit(self,_XSControl.new_Handle_XSControl_TransferReader(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_TransferReader_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_TransferReader.Nullify = new_instancemethod(_XSControl.Handle_XSControl_TransferReader_Nullify,None,Handle_XSControl_TransferReader)
Handle_XSControl_TransferReader.IsNull = new_instancemethod(_XSControl.Handle_XSControl_TransferReader_IsNull,None,Handle_XSControl_TransferReader)
Handle_XSControl_TransferReader.GetObject = new_instancemethod(_XSControl.Handle_XSControl_TransferReader_GetObject,None,Handle_XSControl_TransferReader)
Handle_XSControl_TransferReader._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_TransferReader__kill_pointed,None,Handle_XSControl_TransferReader)
Handle_XSControl_TransferReader_swigregister = _XSControl.Handle_XSControl_TransferReader_swigregister
Handle_XSControl_TransferReader_swigregister(Handle_XSControl_TransferReader)

def Handle_XSControl_TransferReader_DownCast(*args):
  return _XSControl.Handle_XSControl_TransferReader_DownCast(*args)
Handle_XSControl_TransferReader_DownCast = _XSControl.Handle_XSControl_TransferReader_DownCast

class XSControl_TransferWriter(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a TransferWriter, empty, ready to run  
                  with an empty FinderProcess (but no controller, etc)
        """
        _XSControl.XSControl_TransferWriter_swiginit(self,_XSControl.new_XSControl_TransferWriter())
    def FinderProcess(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_FinderProcess

        Returns the FinderProcess itself
        """
        return _XSControl.XSControl_TransferWriter_FinderProcess(self)

    def SetFinderProcess(self, *args):
        """
        Args:
        	FP(Handle_Transfer_FinderProcess)

        Returns:
        	None

        Sets a new FinderProcess and forgets the former one
        """
        return _XSControl.XSControl_TransferWriter_SetFinderProcess(self, *args)

    def Controller(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_Controller

        Returns the currently used Controller
        """
        return _XSControl.XSControl_TransferWriter_Controller(self)

    def SetController(self, *args):
        """
        Args:
        	ctl(Handle_XSControl_Controller)

        Returns:
        	None

        Sets a new Controller, also sets a new FinderProcess
        """
        return _XSControl.XSControl_TransferWriter_SetController(self, *args)

    def Clear(self, *args):
        """
        Args:
        	mode(Standard_Integer)

        Returns:
        	None

        Clears recorded data according a mode  
                  0 clears FinderProcess (results, checks)  
                 -1 create a new FinderProcess
        """
        return _XSControl.XSControl_TransferWriter_Clear(self, *args)

    def TransferMode(self):
        """
        Args:
        	None
        Returns:
        	Standard_Integer

        Returns the current Transfer Mode (an Integer)  
                  It will be interpreted by the Controller to run Transfers  
                  This call form could be later replaced by more specific ones  
                    (parameters suited for each norm / transfer case)
        """
        return _XSControl.XSControl_TransferWriter_TransferMode(self)

    def SetTransferMode(self, *args):
        """
        Args:
        	mode(Standard_Integer)

        Returns:
        	None

        Changes the Transfer Mode
        """
        return _XSControl.XSControl_TransferWriter_SetTransferMode(self, *args)

    def PrintStats(self, *args):
        """
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints statistics on current Trace File, according what,mode  
                  See PrintStatsProcess for details
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints statistics on current Trace File, according what,mode  
                  See PrintStatsProcess for details
        """
        return _XSControl.XSControl_TransferWriter_PrintStats(self, *args)

    def RecognizeTransient(self, *args):
        """
        Args:
        	obj(Handle_Standard_Transient)

        Returns:
        	Standard_Boolean

        Tells if a transient object (from an application) is a valid  
                  candidate for a transfer to a model  
                  Asks the Controller (RecognizeWriteTransient)  
                  If <obj> is a HShape, calls RecognizeShape
        """
        return _XSControl.XSControl_TransferWriter_RecognizeTransient(self, *args)

    def TransferWriteTransient(self, *args):
        """
        Args:
        	model(Handle_Interface_InterfaceModel)
        	obj(Handle_Standard_Transient)

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Transient object (from an application) to a model  
                  of current norm, according to the last call to SetTransferMode  
                  Works by calling the Controller  
                  Returns status : =0 if OK, >0 if error during transfer, <0 if  
                      transfer badly initialised
        """
        return _XSControl.XSControl_TransferWriter_TransferWriteTransient(self, *args)

    def RecognizeShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)

        Returns:
        	Standard_Boolean

        Tells if a Shape is valid for a transfer to a model  
                  Asks the Controller (RecognizeWriteShape)
        """
        return _XSControl.XSControl_TransferWriter_RecognizeShape(self, *args)

    def TransferWriteShape(self, *args):
        """
        Args:
        	model(Handle_Interface_InterfaceModel)
        	shape(TopoDS_Shape)

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Shape from CasCade to a model of current norm,  
                  according to the last call to SetTransferMode  
                  Works by calling the Controller  
                  Returns status : =0 if OK, >0 if error during transfer, <0 if  
                      transfer badly initialised
        """
        return _XSControl.XSControl_TransferWriter_TransferWriteShape(self, *args)

    def CheckList(self):
        """
        Args:
        	None
        Returns:
        	Interface_CheckIterator

        Returns the check-list of last transfer (write), i.e. the  
                  check-list currently recorded in the FinderProcess
        """
        return _XSControl.XSControl_TransferWriter_CheckList(self)

    def ResultCheckList(self, *args):
        """
        Args:
        	model(Handle_Interface_InterfaceModel)

        Returns:
        	Interface_CheckIterator

        Returns the check-list of last transfer (write), but tries  
                  to bind to each check, the resulting entity in the model  
                  instead of keeping the original Mapper, whenever known
        """
        return _XSControl.XSControl_TransferWriter_ResultCheckList(self, *args)

    def PrintStatsProcess(*args):
        """
        Args:
        	TP(Handle_Transfer_FinderProcess)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        Forecast to print statitics about a FinderProcess
        Args:
        	TP(Handle_Transfer_FinderProcess)
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	static void

        Forecast to print statitics about a FinderProcess
        """
        return _XSControl.XSControl_TransferWriter_PrintStatsProcess(*args)

    PrintStatsProcess = staticmethod(PrintStatsProcess)
    def _kill_pointed(self):
        """_kill_pointed(XSControl_TransferWriter self)"""
        return _XSControl.XSControl_TransferWriter__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_TransferWriter self) -> Handle_XSControl_TransferWriter"""
        return _XSControl.XSControl_TransferWriter_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_TransferWriter.FinderProcess = new_instancemethod(_XSControl.XSControl_TransferWriter_FinderProcess,None,XSControl_TransferWriter)
XSControl_TransferWriter.SetFinderProcess = new_instancemethod(_XSControl.XSControl_TransferWriter_SetFinderProcess,None,XSControl_TransferWriter)
XSControl_TransferWriter.Controller = new_instancemethod(_XSControl.XSControl_TransferWriter_Controller,None,XSControl_TransferWriter)
XSControl_TransferWriter.SetController = new_instancemethod(_XSControl.XSControl_TransferWriter_SetController,None,XSControl_TransferWriter)
XSControl_TransferWriter.Clear = new_instancemethod(_XSControl.XSControl_TransferWriter_Clear,None,XSControl_TransferWriter)
XSControl_TransferWriter.TransferMode = new_instancemethod(_XSControl.XSControl_TransferWriter_TransferMode,None,XSControl_TransferWriter)
XSControl_TransferWriter.SetTransferMode = new_instancemethod(_XSControl.XSControl_TransferWriter_SetTransferMode,None,XSControl_TransferWriter)
XSControl_TransferWriter.PrintStats = new_instancemethod(_XSControl.XSControl_TransferWriter_PrintStats,None,XSControl_TransferWriter)
XSControl_TransferWriter.RecognizeTransient = new_instancemethod(_XSControl.XSControl_TransferWriter_RecognizeTransient,None,XSControl_TransferWriter)
XSControl_TransferWriter.TransferWriteTransient = new_instancemethod(_XSControl.XSControl_TransferWriter_TransferWriteTransient,None,XSControl_TransferWriter)
XSControl_TransferWriter.RecognizeShape = new_instancemethod(_XSControl.XSControl_TransferWriter_RecognizeShape,None,XSControl_TransferWriter)
XSControl_TransferWriter.TransferWriteShape = new_instancemethod(_XSControl.XSControl_TransferWriter_TransferWriteShape,None,XSControl_TransferWriter)
XSControl_TransferWriter.CheckList = new_instancemethod(_XSControl.XSControl_TransferWriter_CheckList,None,XSControl_TransferWriter)
XSControl_TransferWriter.ResultCheckList = new_instancemethod(_XSControl.XSControl_TransferWriter_ResultCheckList,None,XSControl_TransferWriter)
XSControl_TransferWriter._kill_pointed = new_instancemethod(_XSControl.XSControl_TransferWriter__kill_pointed,None,XSControl_TransferWriter)
XSControl_TransferWriter.GetHandle = new_instancemethod(_XSControl.XSControl_TransferWriter_GetHandle,None,XSControl_TransferWriter)
XSControl_TransferWriter_swigregister = _XSControl.XSControl_TransferWriter_swigregister
XSControl_TransferWriter_swigregister(XSControl_TransferWriter)

def XSControl_TransferWriter_PrintStatsProcess(*args):
  """
    Args:
    	TP(Handle_Transfer_FinderProcess)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    Forecast to print statitics about a FinderProcess
    Args:
    	TP(Handle_Transfer_FinderProcess)
    	what(Standard_Integer)
    	mode(Standard_Integer)=0

    Returns:
    	static void

    Forecast to print statitics about a FinderProcess
    """
  return _XSControl.XSControl_TransferWriter_PrintStatsProcess(*args)

class Handle_XSControl_TransferWriter(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_TransferWriter_swiginit(self,_XSControl.new_Handle_XSControl_TransferWriter(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_TransferWriter_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_TransferWriter.Nullify = new_instancemethod(_XSControl.Handle_XSControl_TransferWriter_Nullify,None,Handle_XSControl_TransferWriter)
Handle_XSControl_TransferWriter.IsNull = new_instancemethod(_XSControl.Handle_XSControl_TransferWriter_IsNull,None,Handle_XSControl_TransferWriter)
Handle_XSControl_TransferWriter.GetObject = new_instancemethod(_XSControl.Handle_XSControl_TransferWriter_GetObject,None,Handle_XSControl_TransferWriter)
Handle_XSControl_TransferWriter._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_TransferWriter__kill_pointed,None,Handle_XSControl_TransferWriter)
Handle_XSControl_TransferWriter_swigregister = _XSControl.Handle_XSControl_TransferWriter_swigregister
Handle_XSControl_TransferWriter_swigregister(Handle_XSControl_TransferWriter)

def Handle_XSControl_TransferWriter_DownCast(*args):
  return _XSControl.Handle_XSControl_TransferWriter_DownCast(*args)
Handle_XSControl_TransferWriter_DownCast = _XSControl.Handle_XSControl_TransferWriter_DownCast

class XSControl_Utils(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        Args:
        	None
        Returns:
        	None

        the only use of this, is to allow a frontal to get one  
                  distinct 'Utils' set per separate engine
        """
        _XSControl.XSControl_Utils_swiginit(self,_XSControl.new_XSControl_Utils())
    def TraceLine(self, *args):
        """
        Args:
        	line(char *)

        Returns:
        	None

        Just prints a line into the current Trace File. This allows to  
                  better characterise the various trace outputs, as desired.
        """
        return _XSControl.XSControl_Utils_TraceLine(self, *args)

    def TraceLines(self, *args):
        """
        Args:
        	lines(Handle_Standard_Transient)

        Returns:
        	None

        Just prints a line or a set of lines into the current Trace  
                  File. <lines> can be a HAscii/ExtendedString (produces a print  
                  without ending line) or a HSequence or HArray1 Of ..  
                   (one new line per item)
        """
        return _XSControl.XSControl_Utils_TraceLines(self, *args)

    def IsKind(self, *args):
        """
        Args:
        	item(Handle_Standard_Transient)
        	what(Handle_Standard_Type)

        Returns:
        	Standard_Boolean

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_IsKind(self, *args)

    def TypeName(self, *args):
        """
        Args:
        	item(Handle_Standard_Transient)
        	nopk(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns the name of the dynamic type of an object, i.e. :  
                  If it is a Type, its Name  
                  If it is a object not a type, the Name of its DynamicType  
                  If it is Null, an empty string  
                  If <nopk> is False (D), gives complete name  
                  If <nopk> is True, returns class name without package
        Args:
        	item(Handle_Standard_Transient)
        	nopk(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns the name of the dynamic type of an object, i.e. :  
                  If it is a Type, its Name  
                  If it is a object not a type, the Name of its DynamicType  
                  If it is Null, an empty string  
                  If <nopk> is False (D), gives complete name  
                  If <nopk> is True, returns class name without package
        """
        return _XSControl.XSControl_Utils_TypeName(self, *args)

    def TraValue(self, *args):
        """
        Args:
        	list(Handle_Standard_Transient)
        	num(Standard_Integer)

        Returns:
        	Handle_Standard_Transient

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_TraValue(self, *args)

    def NewSeqTra(self):
        """
        Args:
        	None
        Returns:
        	Handle_TColStd_HSequenceOfTransient

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_NewSeqTra(self)

    def AppendTra(self, *args):
        """
        Args:
        	seqval(Handle_TColStd_HSequenceOfTransient)
        	traval(Handle_Standard_Transient)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_AppendTra(self, *args)

    def DateString(self, *args):
        """
        Args:
        	yy(Standard_Integer)
        	mm(Standard_Integer)
        	dd(Standard_Integer)
        	hh(Standard_Integer)
        	mn(Standard_Integer)
        	ss(Standard_Integer)

        Returns:
        	char *

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_DateString(self, *args)

    def DateValues(self, *args):
        """
        Args:
        	text(char *)
        	yy(Standard_Integer)
        	mm(Standard_Integer)
        	dd(Standard_Integer)
        	hh(Standard_Integer)
        	mn(Standard_Integer)
        	ss(Standard_Integer)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_DateValues(self, *args)

    def ToCString(self, *args):
        """
        Args:
        	strval(Handle_TCollection_HAsciiString)

        Returns:
        	char *

        No detailed docstring for this function.
        Args:
        	strval(TCollection_AsciiString)

        Returns:
        	char *

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ToCString(self, *args)

    def ToAString(self, *args):
        """
        Args:
        	strcon(char *)

        Returns:
        	TCollection_AsciiString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ToAString(self, *args)

    def ToEString(self, *args):
        """
        Args:
        	strval(Handle_TCollection_HExtendedString)

        Returns:
        	Standard_ExtString

        No detailed docstring for this function.
        Args:
        	strval(TCollection_ExtendedString)

        Returns:
        	Standard_ExtString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ToEString(self, *args)

    def ToHString(self, *args):
        """
        Args:
        	strcon(char *)

        Returns:
        	Handle_TCollection_HAsciiString

        No detailed docstring for this function.
        Args:
        	strcon(Standard_ExtString)

        Returns:
        	Handle_TCollection_HExtendedString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ToHString(self, *args)

    def ToXString(self, *args):
        """
        Args:
        	strcon(Standard_ExtString)

        Returns:
        	TCollection_ExtendedString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ToXString(self, *args)

    def AsciiToExtended(self, *args):
        """
        Args:
        	str(char *)

        Returns:
        	Standard_ExtString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_AsciiToExtended(self, *args)

    def IsAscii(self, *args):
        """
        Args:
        	str(Standard_ExtString)

        Returns:
        	Standard_Boolean

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_IsAscii(self, *args)

    def ExtendedToAscii(self, *args):
        """
        Args:
        	str(Standard_ExtString)

        Returns:
        	char *

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ExtendedToAscii(self, *args)

    def CStrValue(self, *args):
        """
        Args:
        	list(Handle_Standard_Transient)
        	num(Standard_Integer)

        Returns:
        	char *

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_CStrValue(self, *args)

    def EStrValue(self, *args):
        """
        Args:
        	list(Handle_Standard_Transient)
        	num(Standard_Integer)

        Returns:
        	Standard_ExtString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_EStrValue(self, *args)

    def NewSeqCStr(self):
        """
        Args:
        	None
        Returns:
        	Handle_TColStd_HSequenceOfHAsciiString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_NewSeqCStr(self)

    def AppendCStr(self, *args):
        """
        Args:
        	seqval(Handle_TColStd_HSequenceOfHAsciiString)
        	strval(char *)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_AppendCStr(self, *args)

    def NewSeqEStr(self):
        """
        Args:
        	None
        Returns:
        	Handle_TColStd_HSequenceOfHExtendedString

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_NewSeqEStr(self)

    def AppendEStr(self, *args):
        """
        Args:
        	seqval(Handle_TColStd_HSequenceOfHExtendedString)
        	strval(Standard_ExtString)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_AppendEStr(self, *args)

    def WriteShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	filename(char *)

        Returns:
        	Standard_Boolean

        Writes a Shape under the internal BRepTools form  
                  (an internal help utility)  
                  Returns True if writing has succeeded, False else
        """
        return _XSControl.XSControl_Utils_WriteShape(self, *args)

    def NewShape(self):
        """
        Args:
        	None
        Returns:
        	TopoDS_Shape

        Returns a new empty, undefined Shape, which can then be filled  
                  by ReadShape
        """
        return _XSControl.XSControl_Utils_NewShape(self)

    def ReadShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	filename(char *)

        Returns:
        	Standard_Boolean

        Reads a Shape from the internal BRepTools form and returns it  
                  (an internal help utility)  
                  Returns True if reading has succeeded, False else
        """
        return _XSControl.XSControl_Utils_ReadShape(self, *args)

    def IsNullShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)

        Returns:
        	Standard_Boolean

        Returns True if a Shape is Null
        """
        return _XSControl.XSControl_Utils_IsNullShape(self, *args)

    def CompoundFromSeq(self, *args):
        """
        Args:
        	seqval(Handle_TopTools_HSequenceOfShape)

        Returns:
        	TopoDS_Shape

        Converts a list of Shapes to a Compound (a kind of Shape)
        """
        return _XSControl.XSControl_Utils_CompoundFromSeq(self, *args)

    def ShapeType(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	compound(Standard_Boolean)

        Returns:
        	TopAbs_ShapeEnum

        Returns the type of a Shape : true type if <compound> is False  
                  If <compound> is True and <shape> is a Compound, iterates on  
                  its items. If all are of the same type, returns this type.  
                  Else, returns COMPOUND. If it is empty, returns SHAPE  
                  For a Null Shape, returns SHAPE
        """
        return _XSControl.XSControl_Utils_ShapeType(self, *args)

    def SortedCompound(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	type(TopAbs_ShapeEnum)
        	explore(Standard_Boolean)
        	compound(Standard_Boolean)

        Returns:
        	TopoDS_Shape

        From a Shape, builds a Compound as follows :  
                  explores it level by level  
                  If <explore> is False, only COMPOUND items. Else, all items  
                  Adds to the result, shapes which comply to <type>  
                  + if <type> is WIRE, considers free edges (and makes wires)  
                  + if <type> is SHELL, considers free faces (and makes shells)  
                  If <compound> is True, gathers items in compounds which  
                  correspond to starting COMPOUND,SOLID or SHELL containers, or  
                  items directly contained in a Compound
        """
        return _XSControl.XSControl_Utils_SortedCompound(self, *args)

    def ShapeValue(self, *args):
        """
        Args:
        	seqv(Handle_TopTools_HSequenceOfShape)
        	num(Standard_Integer)

        Returns:
        	TopoDS_Shape

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ShapeValue(self, *args)

    def NewSeqShape(self):
        """
        Args:
        	None
        Returns:
        	Handle_TopTools_HSequenceOfShape

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_NewSeqShape(self)

    def AppendShape(self, *args):
        """
        Args:
        	seqv(Handle_TopTools_HSequenceOfShape)
        	shape(TopoDS_Shape)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_AppendShape(self, *args)

    def ShapeBinder(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	hs(Standard_Boolean)=Standard_True

        Returns:
        	Handle_Standard_Transient

        Creates a Transient Object from a Shape : it is either a Binder  
                  (used by functions which require a Transient but can process  
                  a Shape, such as viewing functions) or a HShape (according to hs)  
                  Default is a HShape
        Args:
        	shape(TopoDS_Shape)
        	hs(Standard_Boolean)=Standard_True

        Returns:
        	Handle_Standard_Transient

        Creates a Transient Object from a Shape : it is either a Binder  
                  (used by functions which require a Transient but can process  
                  a Shape, such as viewing functions) or a HShape (according to hs)  
                  Default is a HShape
        """
        return _XSControl.XSControl_Utils_ShapeBinder(self, *args)

    def BinderShape(self, *args):
        """
        Args:
        	tr(Handle_Standard_Transient)

        Returns:
        	TopoDS_Shape

        From a Transient, returns a Shape.  
                  In fact, recognizes ShapeBinder ShapeMapper and HShape
        """
        return _XSControl.XSControl_Utils_BinderShape(self, *args)

    def SeqLength(self, *args):
        """
        Args:
        	list(Handle_Standard_Transient)

        Returns:
        	Standard_Integer

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_SeqLength(self, *args)

    def SeqToArr(self, *args):
        """
        Args:
        	seq(Handle_Standard_Transient)
        	first(Standard_Integer)=1

        Returns:
        	Handle_Standard_Transient

        No detailed docstring for this function.
        Args:
        	seq(Handle_Standard_Transient)
        	first(Standard_Integer)=1

        Returns:
        	Handle_Standard_Transient

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_SeqToArr(self, *args)

    def ArrToSeq(self, *args):
        """
        Args:
        	arr(Handle_Standard_Transient)

        Returns:
        	Handle_Standard_Transient

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_ArrToSeq(self, *args)

    def SeqIntValue(self, *args):
        """
        Args:
        	list(Handle_TColStd_HSequenceOfInteger)
        	num(Standard_Integer)

        Returns:
        	Standard_Integer

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_Utils_SeqIntValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_Utils.TraceLine = new_instancemethod(_XSControl.XSControl_Utils_TraceLine,None,XSControl_Utils)
XSControl_Utils.TraceLines = new_instancemethod(_XSControl.XSControl_Utils_TraceLines,None,XSControl_Utils)
XSControl_Utils.IsKind = new_instancemethod(_XSControl.XSControl_Utils_IsKind,None,XSControl_Utils)
XSControl_Utils.TypeName = new_instancemethod(_XSControl.XSControl_Utils_TypeName,None,XSControl_Utils)
XSControl_Utils.TraValue = new_instancemethod(_XSControl.XSControl_Utils_TraValue,None,XSControl_Utils)
XSControl_Utils.NewSeqTra = new_instancemethod(_XSControl.XSControl_Utils_NewSeqTra,None,XSControl_Utils)
XSControl_Utils.AppendTra = new_instancemethod(_XSControl.XSControl_Utils_AppendTra,None,XSControl_Utils)
XSControl_Utils.DateString = new_instancemethod(_XSControl.XSControl_Utils_DateString,None,XSControl_Utils)
XSControl_Utils.DateValues = new_instancemethod(_XSControl.XSControl_Utils_DateValues,None,XSControl_Utils)
XSControl_Utils.ToCString = new_instancemethod(_XSControl.XSControl_Utils_ToCString,None,XSControl_Utils)
XSControl_Utils.ToAString = new_instancemethod(_XSControl.XSControl_Utils_ToAString,None,XSControl_Utils)
XSControl_Utils.ToEString = new_instancemethod(_XSControl.XSControl_Utils_ToEString,None,XSControl_Utils)
XSControl_Utils.ToHString = new_instancemethod(_XSControl.XSControl_Utils_ToHString,None,XSControl_Utils)
XSControl_Utils.ToXString = new_instancemethod(_XSControl.XSControl_Utils_ToXString,None,XSControl_Utils)
XSControl_Utils.AsciiToExtended = new_instancemethod(_XSControl.XSControl_Utils_AsciiToExtended,None,XSControl_Utils)
XSControl_Utils.IsAscii = new_instancemethod(_XSControl.XSControl_Utils_IsAscii,None,XSControl_Utils)
XSControl_Utils.ExtendedToAscii = new_instancemethod(_XSControl.XSControl_Utils_ExtendedToAscii,None,XSControl_Utils)
XSControl_Utils.CStrValue = new_instancemethod(_XSControl.XSControl_Utils_CStrValue,None,XSControl_Utils)
XSControl_Utils.EStrValue = new_instancemethod(_XSControl.XSControl_Utils_EStrValue,None,XSControl_Utils)
XSControl_Utils.NewSeqCStr = new_instancemethod(_XSControl.XSControl_Utils_NewSeqCStr,None,XSControl_Utils)
XSControl_Utils.AppendCStr = new_instancemethod(_XSControl.XSControl_Utils_AppendCStr,None,XSControl_Utils)
XSControl_Utils.NewSeqEStr = new_instancemethod(_XSControl.XSControl_Utils_NewSeqEStr,None,XSControl_Utils)
XSControl_Utils.AppendEStr = new_instancemethod(_XSControl.XSControl_Utils_AppendEStr,None,XSControl_Utils)
XSControl_Utils.WriteShape = new_instancemethod(_XSControl.XSControl_Utils_WriteShape,None,XSControl_Utils)
XSControl_Utils.NewShape = new_instancemethod(_XSControl.XSControl_Utils_NewShape,None,XSControl_Utils)
XSControl_Utils.ReadShape = new_instancemethod(_XSControl.XSControl_Utils_ReadShape,None,XSControl_Utils)
XSControl_Utils.IsNullShape = new_instancemethod(_XSControl.XSControl_Utils_IsNullShape,None,XSControl_Utils)
XSControl_Utils.CompoundFromSeq = new_instancemethod(_XSControl.XSControl_Utils_CompoundFromSeq,None,XSControl_Utils)
XSControl_Utils.ShapeType = new_instancemethod(_XSControl.XSControl_Utils_ShapeType,None,XSControl_Utils)
XSControl_Utils.SortedCompound = new_instancemethod(_XSControl.XSControl_Utils_SortedCompound,None,XSControl_Utils)
XSControl_Utils.ShapeValue = new_instancemethod(_XSControl.XSControl_Utils_ShapeValue,None,XSControl_Utils)
XSControl_Utils.NewSeqShape = new_instancemethod(_XSControl.XSControl_Utils_NewSeqShape,None,XSControl_Utils)
XSControl_Utils.AppendShape = new_instancemethod(_XSControl.XSControl_Utils_AppendShape,None,XSControl_Utils)
XSControl_Utils.ShapeBinder = new_instancemethod(_XSControl.XSControl_Utils_ShapeBinder,None,XSControl_Utils)
XSControl_Utils.BinderShape = new_instancemethod(_XSControl.XSControl_Utils_BinderShape,None,XSControl_Utils)
XSControl_Utils.SeqLength = new_instancemethod(_XSControl.XSControl_Utils_SeqLength,None,XSControl_Utils)
XSControl_Utils.SeqToArr = new_instancemethod(_XSControl.XSControl_Utils_SeqToArr,None,XSControl_Utils)
XSControl_Utils.ArrToSeq = new_instancemethod(_XSControl.XSControl_Utils_ArrToSeq,None,XSControl_Utils)
XSControl_Utils.SeqIntValue = new_instancemethod(_XSControl.XSControl_Utils_SeqIntValue,None,XSControl_Utils)
XSControl_Utils._kill_pointed = new_instancemethod(_XSControl.XSControl_Utils__kill_pointed,None,XSControl_Utils)
XSControl_Utils_swigregister = _XSControl.XSControl_Utils_swigregister
XSControl_Utils_swigregister(XSControl_Utils)

class XSControl_WorkSession(OCC.IFSelect.IFSelect_WorkSession):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        Args:
        	None
        Returns:
        	None

        No detailed docstring for this function.
        """
        _XSControl.XSControl_WorkSession_swiginit(self,_XSControl.new_XSControl_WorkSession())
    def SelectNorm(self, *args):
        """
        Args:
        	normname(char *)
        	profile(char *)=

        Returns:
        	Standard_Boolean

        Selects a Norm defined by its name.  
                  A Norm is described and handled by a Controller  
                  Returns True if done, False if <normname> is unknown  
         
                  A Profile may be set too. If no Profile is provided, the  
                  current Profile for this Norm is taken  
                  If the asked Profile is not defined for this Norm, it remains  
                  in current Profile, returned value is True
        Args:
        	normname(char *)
        	profile(char *)=

        Returns:
        	Standard_Boolean

        Selects a Norm defined by its name.  
                  A Norm is described and handled by a Controller  
                  Returns True if done, False if <normname> is unknown  
         
                  A Profile may be set too. If no Profile is provided, the  
                  current Profile for this Norm is taken  
                  If the asked Profile is not defined for this Norm, it remains  
                  in current Profile, returned value is True
        """
        return _XSControl.XSControl_WorkSession_SelectNorm(self, *args)

    def SelectProfile(self, *args):
        """
        Args:
        	profile(char *)

        Returns:
        	Standard_Boolean

        Sets a Profile as current for the current Norm  
                  Returns True if done, False if <profile> is unknown for this norm  
         
                  For more infos on Profile, query the Profile of the Controller
        """
        return _XSControl.XSControl_WorkSession_SelectProfile(self, *args)

    def SetController(self, *args):
        """
        Args:
        	ctl(Handle_XSControl_Controller)

        Returns:
        	None

        Selects a Norm defined by its Controller itself
        """
        return _XSControl.XSControl_WorkSession_SetController(self, *args)

    def AdaptNorm(self):
        """
        Args:
        	None
        Returns:
        	virtual void

        This method is called once a new norm has been successfully  
                  selected. It can be redefined, default does nothing
        """
        return _XSControl.XSControl_WorkSession_AdaptNorm(self)

    def SelectedNorm(self, *args):
        """
        Args:
        	rsc(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns the name of the last Selected Norm. If none is  
                  defined, returns an empty string  
                  By default, returns the complete name of the norm  
                  If <rsc> is True, returns the short name used for resource
        Args:
        	rsc(Standard_Boolean)=Standard_False

        Returns:
        	char *

        Returns the name of the last Selected Norm. If none is  
                  defined, returns an empty string  
                  By default, returns the complete name of the norm  
                  If <rsc> is True, returns the short name used for resource
        """
        return _XSControl.XSControl_WorkSession_SelectedNorm(self, *args)

    def NormAdaptor(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_Controller

        Returns the norm controller itself
        """
        return _XSControl.XSControl_WorkSession_NormAdaptor(self)

    def Context(self):
        """
        Args:
        	None
        Returns:
        	Handle_Dico_DictionaryOfTransient

        Returns the current Context List, Null if not defined  
                  The Context is given to the TransientProcess for TransferRead
        """
        return _XSControl.XSControl_WorkSession_Context(self)

    def SetAllContext(self, *args):
        """
        Args:
        	context(Handle_Dico_DictionaryOfTransient)

        Returns:
        	None

        Sets the current Context List, as a whole  
                  Sets it to the TransferReader
        """
        return _XSControl.XSControl_WorkSession_SetAllContext(self, *args)

    def ClearContext(self):
        """
        Args:
        	None
        Returns:
        	None

        Clears the whole current Context (nullifies it)
        """
        return _XSControl.XSControl_WorkSession_ClearContext(self)

    def PrintTransferStatus(self, *args):
        """
        Args:
        	num(Standard_Integer)
        	wri(Standard_Boolean)
        	S(Handle_Message_Messenger)

        Returns:
        	Standard_Boolean

        Prints the transfer status of a transferred item, as beeing  
                  the Mapped n0 <num>, from MapWriter if <wri> is True, or  
                  from MapReader if <wri> is False  
                  Returns True when done, False else (i.e. num out of range)
        """
        return _XSControl.XSControl_WorkSession_PrintTransferStatus(self, *args)

    def InitTransferReader(self, *args):
        """
        Args:
        	mode(Standard_Integer)

        Returns:
        	None

        Sets a Transfer Reader, by internal ways, according mode :  
                  0 recreates it clear,  1 clears it (does not recreate)  
                  2 aligns Roots of TransientProcess from final Results  
                  3 aligns final Results from Roots of TransientProcess  
                  4 begins a new transfer (by BeginTransfer)  
                  5 recreates TransferReader then begins a new transfer
        """
        return _XSControl.XSControl_WorkSession_InitTransferReader(self, *args)

    def SetTransferReader(self, *args):
        """
        Args:
        	TR(Handle_XSControl_TransferReader)

        Returns:
        	None

        Sets a Transfer Reader, which manages transfers on reading
        """
        return _XSControl.XSControl_WorkSession_SetTransferReader(self, *args)

    def TransferReader(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_TransferReader

        Returns the Transfer Reader, Null if not set
        """
        return _XSControl.XSControl_WorkSession_TransferReader(self)

    def MapReader(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_TransientProcess

        Returns the TransientProcess(internal data for TransferReader)
        """
        return _XSControl.XSControl_WorkSession_MapReader(self)

    def SetMapReader(self, *args):
        """
        Args:
        	TP(Handle_Transfer_TransientProcess)

        Returns:
        	Standard_Boolean

        Changes the Map Reader, i.e. considers that the new one  
                  defines the relevant read results (forgets the former ones)  
                  Returns True when done, False in case of bad definition, i.e.  
                  if Model from TP differs from that of Session
        """
        return _XSControl.XSControl_WorkSession_SetMapReader(self, *args)

    def Result(self, *args):
        """
        Args:
        	ent(Handle_Standard_Transient)
        	mode(Standard_Integer)

        Returns:
        	Handle_Standard_Transient

        Returns the result attached to a starting entity  
                  If <mode> = 0, returns Final Result  
                  If <mode> = 1, considers Last Result  
                  If <mode> = 2, considers Final, else if absent, Last  
                    returns it as Transient, if result is not transient returns  
                    the Binder  
                  <mode> = 10,11,12 idem but returns the Binder itself  
                    (if it is not, e.g. Shape, returns the Binder)  
                  <mode> = 20, returns the ResultFromModel
        """
        return _XSControl.XSControl_WorkSession_Result(self, *args)

    def TransferReadOne(self, *args):
        """
        Args:
        	ents(Handle_Standard_Transient)

        Returns:
        	Standard_Integer

        Commands the transfer of, either one entity, or a list  
                  I.E. calls the TransferReader after having analysed <ents>  
                  It is cumulated from the last BeginTransfer  
                  <ents> is processed by GiveList, hence :  
                  - <ents> a Selection : its SelectionResult  
                  - <ents> a HSequenceOfTransient : this list  
                  - <ents> the Model : in this specific case, all the roots,  
                    with no cumulation of former transfers (TransferReadRoots)
        """
        return _XSControl.XSControl_WorkSession_TransferReadOne(self, *args)

    def TransferReadRoots(self):
        """
        Args:
        	None
        Returns:
        	Standard_Integer

        Commands the transfer of all the root entities of the model  
                  i.e. calls TransferRoot from the TransferReader with the Graph  
                  No cumulation with former calls to TransferReadOne
        """
        return _XSControl.XSControl_WorkSession_TransferReadRoots(self)

    def NewModel(self):
        """
        Args:
        	None
        Returns:
        	Handle_Interface_InterfaceModel

        produces and returns a new Model well conditionned  
                  It is produced by the Norm Controller  
                  It can be Null (if this function is not implemented)
        """
        return _XSControl.XSControl_WorkSession_NewModel(self)

    def TransferWriter(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_TransferWriter

        Returns the Transfer Reader, Null if not set
        """
        return _XSControl.XSControl_WorkSession_TransferWriter(self)

    def MapWriter(self):
        """
        Args:
        	None
        Returns:
        	Handle_Transfer_FinderProcess

        Returns the FinderProcess (internal data for TransferWriter)
        """
        return _XSControl.XSControl_WorkSession_MapWriter(self)

    def SetMapWriter(self, *args):
        """
        Args:
        	FP(Handle_Transfer_FinderProcess)

        Returns:
        	Standard_Boolean

        Changes the Map Reader, i.e. considers that the new one  
                  defines the relevant read results (forgets the former ones)  
                  Returns True when done, False if <FP> is Null
        """
        return _XSControl.XSControl_WorkSession_SetMapWriter(self, *args)

    def SetModeWriteShape(self, *args):
        """
        Args:
        	mode(Standard_Integer)

        Returns:
        	None

        Sets a mode to transfer Shapes from CasCade to entities of the  
                  current norm, which interprets it (see various Controllers)  
                  This call form could be later replaced by a more general one
        """
        return _XSControl.XSControl_WorkSession_SetModeWriteShape(self, *args)

    def ModeWriteShape(self):
        """
        Args:
        	None
        Returns:
        	Standard_Integer

        Records the current Mode to Write Shapes
        """
        return _XSControl.XSControl_WorkSession_ModeWriteShape(self)

    def TransferWriteShape(self, *args):
        """
        Args:
        	shape(TopoDS_Shape)
        	compgraph(Standard_Boolean)=Standard_True

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Shape from CasCade to a model of current norm,  
                  according to the last call to SetModeWriteShape  
                  Returns status :Done if OK, Fail if error during transfer,  
                    Error if transfer badly initialised
        Args:
        	shape(TopoDS_Shape)
        	compgraph(Standard_Boolean)=Standard_True

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Shape from CasCade to a model of current norm,  
                  according to the last call to SetModeWriteShape  
                  Returns status :Done if OK, Fail if error during transfer,  
                    Error if transfer badly initialised
        """
        return _XSControl.XSControl_WorkSession_TransferWriteShape(self, *args)

    def TransferWriteCheckList(self):
        """
        Args:
        	None
        Returns:
        	Interface_CheckIterator

        Returns the check-list of last transfer (write)  
                  It is recorded in the FinderProcess, but it must be bound with  
                  resulting entities (in the resulting file model) rather than  
                  with original objects (in fact, their mappers)
        """
        return _XSControl.XSControl_WorkSession_TransferWriteCheckList(self)

    def Vars(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_Vars

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_WorkSession_Vars(self)

    def SetVars(self, *args):
        """
        Args:
        	newvars(Handle_XSControl_Vars)

        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_WorkSession_SetVars(self, *args)

    def ClearBinders(self):
        """
        Args:
        	None
        Returns:
        	None

        Clears binders
        """
        return _XSControl.XSControl_WorkSession_ClearBinders(self)

    def Destroy(self):
        """
        Args:
        	None
        Returns:
        	None

        No detailed docstring for this function.
        """
        return _XSControl.XSControl_WorkSession_Destroy(self)

    def _kill_pointed(self):
        """_kill_pointed(XSControl_WorkSession self)"""
        return _XSControl.XSControl_WorkSession__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XSControl_WorkSession self) -> Handle_XSControl_WorkSession"""
        return _XSControl.XSControl_WorkSession_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_WorkSession.SelectNorm = new_instancemethod(_XSControl.XSControl_WorkSession_SelectNorm,None,XSControl_WorkSession)
XSControl_WorkSession.SelectProfile = new_instancemethod(_XSControl.XSControl_WorkSession_SelectProfile,None,XSControl_WorkSession)
XSControl_WorkSession.SetController = new_instancemethod(_XSControl.XSControl_WorkSession_SetController,None,XSControl_WorkSession)
XSControl_WorkSession.AdaptNorm = new_instancemethod(_XSControl.XSControl_WorkSession_AdaptNorm,None,XSControl_WorkSession)
XSControl_WorkSession.SelectedNorm = new_instancemethod(_XSControl.XSControl_WorkSession_SelectedNorm,None,XSControl_WorkSession)
XSControl_WorkSession.NormAdaptor = new_instancemethod(_XSControl.XSControl_WorkSession_NormAdaptor,None,XSControl_WorkSession)
XSControl_WorkSession.Context = new_instancemethod(_XSControl.XSControl_WorkSession_Context,None,XSControl_WorkSession)
XSControl_WorkSession.SetAllContext = new_instancemethod(_XSControl.XSControl_WorkSession_SetAllContext,None,XSControl_WorkSession)
XSControl_WorkSession.ClearContext = new_instancemethod(_XSControl.XSControl_WorkSession_ClearContext,None,XSControl_WorkSession)
XSControl_WorkSession.PrintTransferStatus = new_instancemethod(_XSControl.XSControl_WorkSession_PrintTransferStatus,None,XSControl_WorkSession)
XSControl_WorkSession.InitTransferReader = new_instancemethod(_XSControl.XSControl_WorkSession_InitTransferReader,None,XSControl_WorkSession)
XSControl_WorkSession.SetTransferReader = new_instancemethod(_XSControl.XSControl_WorkSession_SetTransferReader,None,XSControl_WorkSession)
XSControl_WorkSession.TransferReader = new_instancemethod(_XSControl.XSControl_WorkSession_TransferReader,None,XSControl_WorkSession)
XSControl_WorkSession.MapReader = new_instancemethod(_XSControl.XSControl_WorkSession_MapReader,None,XSControl_WorkSession)
XSControl_WorkSession.SetMapReader = new_instancemethod(_XSControl.XSControl_WorkSession_SetMapReader,None,XSControl_WorkSession)
XSControl_WorkSession.Result = new_instancemethod(_XSControl.XSControl_WorkSession_Result,None,XSControl_WorkSession)
XSControl_WorkSession.TransferReadOne = new_instancemethod(_XSControl.XSControl_WorkSession_TransferReadOne,None,XSControl_WorkSession)
XSControl_WorkSession.TransferReadRoots = new_instancemethod(_XSControl.XSControl_WorkSession_TransferReadRoots,None,XSControl_WorkSession)
XSControl_WorkSession.NewModel = new_instancemethod(_XSControl.XSControl_WorkSession_NewModel,None,XSControl_WorkSession)
XSControl_WorkSession.TransferWriter = new_instancemethod(_XSControl.XSControl_WorkSession_TransferWriter,None,XSControl_WorkSession)
XSControl_WorkSession.MapWriter = new_instancemethod(_XSControl.XSControl_WorkSession_MapWriter,None,XSControl_WorkSession)
XSControl_WorkSession.SetMapWriter = new_instancemethod(_XSControl.XSControl_WorkSession_SetMapWriter,None,XSControl_WorkSession)
XSControl_WorkSession.SetModeWriteShape = new_instancemethod(_XSControl.XSControl_WorkSession_SetModeWriteShape,None,XSControl_WorkSession)
XSControl_WorkSession.ModeWriteShape = new_instancemethod(_XSControl.XSControl_WorkSession_ModeWriteShape,None,XSControl_WorkSession)
XSControl_WorkSession.TransferWriteShape = new_instancemethod(_XSControl.XSControl_WorkSession_TransferWriteShape,None,XSControl_WorkSession)
XSControl_WorkSession.TransferWriteCheckList = new_instancemethod(_XSControl.XSControl_WorkSession_TransferWriteCheckList,None,XSControl_WorkSession)
XSControl_WorkSession.Vars = new_instancemethod(_XSControl.XSControl_WorkSession_Vars,None,XSControl_WorkSession)
XSControl_WorkSession.SetVars = new_instancemethod(_XSControl.XSControl_WorkSession_SetVars,None,XSControl_WorkSession)
XSControl_WorkSession.ClearBinders = new_instancemethod(_XSControl.XSControl_WorkSession_ClearBinders,None,XSControl_WorkSession)
XSControl_WorkSession.Destroy = new_instancemethod(_XSControl.XSControl_WorkSession_Destroy,None,XSControl_WorkSession)
XSControl_WorkSession._kill_pointed = new_instancemethod(_XSControl.XSControl_WorkSession__kill_pointed,None,XSControl_WorkSession)
XSControl_WorkSession.GetHandle = new_instancemethod(_XSControl.XSControl_WorkSession_GetHandle,None,XSControl_WorkSession)
XSControl_WorkSession_swigregister = _XSControl.XSControl_WorkSession_swigregister
XSControl_WorkSession_swigregister(XSControl_WorkSession)

class Handle_XSControl_WorkSession(OCC.IFSelect.Handle_IFSelect_WorkSession):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XSControl.Handle_XSControl_WorkSession_swiginit(self,_XSControl.new_Handle_XSControl_WorkSession(*args))
    DownCast = staticmethod(_XSControl.Handle_XSControl_WorkSession_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XSControl_WorkSession.Nullify = new_instancemethod(_XSControl.Handle_XSControl_WorkSession_Nullify,None,Handle_XSControl_WorkSession)
Handle_XSControl_WorkSession.IsNull = new_instancemethod(_XSControl.Handle_XSControl_WorkSession_IsNull,None,Handle_XSControl_WorkSession)
Handle_XSControl_WorkSession.GetObject = new_instancemethod(_XSControl.Handle_XSControl_WorkSession_GetObject,None,Handle_XSControl_WorkSession)
Handle_XSControl_WorkSession._kill_pointed = new_instancemethod(_XSControl.Handle_XSControl_WorkSession__kill_pointed,None,Handle_XSControl_WorkSession)
Handle_XSControl_WorkSession_swigregister = _XSControl.Handle_XSControl_WorkSession_swigregister
Handle_XSControl_WorkSession_swigregister(Handle_XSControl_WorkSession)

def Handle_XSControl_WorkSession_DownCast(*args):
  return _XSControl.Handle_XSControl_WorkSession_DownCast(*args)
Handle_XSControl_WorkSession_DownCast = _XSControl.Handle_XSControl_WorkSession_DownCast

class XSControl_Writer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Args:
        	None
        Returns:
        	None

        Creates a Writer from scratch
        Args:
        	norm(char *)

        Returns:
        	None

        Creates a Writer from scratch, with a norm name which  
                  identifie a Controller
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Creates a Writer from an already existing Session  
                  If <scratch> is True (D), clears already recorded data
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Creates a Writer from an already existing Session  
                  If <scratch> is True (D), clears already recorded data
        """
        _XSControl.XSControl_Writer_swiginit(self,_XSControl.new_XSControl_Writer(*args))
    def SetNorm(self, *args):
        """
        Args:
        	norm(char *)

        Returns:
        	Standard_Boolean

        Sets a specific norm to <self>  
                  Returns True if done, False if <norm> is not available
        """
        return _XSControl.XSControl_Writer_SetNorm(self, *args)

    def SetWS(self, *args):
        """
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets a specific session to <self>
        Args:
        	WS(Handle_XSControl_WorkSession)
        	scratch(Standard_Boolean)=Standard_True

        Returns:
        	None

        Sets a specific session to <self>
        """
        return _XSControl.XSControl_Writer_SetWS(self, *args)

    def WS(self):
        """
        Args:
        	None
        Returns:
        	Handle_XSControl_WorkSession

        Returns the session used in <self>
        """
        return _XSControl.XSControl_Writer_WS(self)

    def Model(self, *args):
        """
        Args:
        	newone(Standard_Boolean)=Standard_False

        Returns:
        	Handle_Interface_InterfaceModel

        Returns the produced model. Produces a new one if not yet done  
                  or if <newone> is True  
                  This method allows for instance to edit product or header  
                  data before writing
        Args:
        	newone(Standard_Boolean)=Standard_False

        Returns:
        	Handle_Interface_InterfaceModel

        Returns the produced model. Produces a new one if not yet done  
                  or if <newone> is True  
                  This method allows for instance to edit product or header  
                  data before writing
        """
        return _XSControl.XSControl_Writer_Model(self, *args)

    def TransferShape(self, *args):
        """
        Args:
        	sh(TopoDS_Shape)
        	mode(Standard_Integer)=0

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Shape according to the mode
        Args:
        	sh(TopoDS_Shape)
        	mode(Standard_Integer)=0

        Returns:
        	IFSelect_ReturnStatus

        Transfers a Shape according to the mode
        """
        return _XSControl.XSControl_Writer_TransferShape(self, *args)

    def WriteFile(self, *args):
        """
        Args:
        	filename(char *)

        Returns:
        	IFSelect_ReturnStatus

        Writes the produced model
        """
        return _XSControl.XSControl_Writer_WriteFile(self, *args)

    def PrintStatsTransfer(self, *args):
        """
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints Statistics about Transfer
        Args:
        	what(Standard_Integer)
        	mode(Standard_Integer)=0

        Returns:
        	None

        Prints Statistics about Transfer
        """
        return _XSControl.XSControl_Writer_PrintStatsTransfer(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XSControl_Writer.SetNorm = new_instancemethod(_XSControl.XSControl_Writer_SetNorm,None,XSControl_Writer)
XSControl_Writer.SetWS = new_instancemethod(_XSControl.XSControl_Writer_SetWS,None,XSControl_Writer)
XSControl_Writer.WS = new_instancemethod(_XSControl.XSControl_Writer_WS,None,XSControl_Writer)
XSControl_Writer.Model = new_instancemethod(_XSControl.XSControl_Writer_Model,None,XSControl_Writer)
XSControl_Writer.TransferShape = new_instancemethod(_XSControl.XSControl_Writer_TransferShape,None,XSControl_Writer)
XSControl_Writer.WriteFile = new_instancemethod(_XSControl.XSControl_Writer_WriteFile,None,XSControl_Writer)
XSControl_Writer.PrintStatsTransfer = new_instancemethod(_XSControl.XSControl_Writer_PrintStatsTransfer,None,XSControl_Writer)
XSControl_Writer._kill_pointed = new_instancemethod(_XSControl.XSControl_Writer__kill_pointed,None,XSControl_Writer)
XSControl_Writer_swigregister = _XSControl.XSControl_Writer_swigregister
XSControl_Writer_swigregister(XSControl_Writer)



