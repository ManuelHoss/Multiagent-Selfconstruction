# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Select3D.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Select3D', [dirname(__file__)])
        except ImportError:
            import _Select3D
            return _Select3D
        if fp is not None:
            try:
                _mod = imp.load_module('_Select3D', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Select3D = swig_import_helper()
    del swig_import_helper
else:
    import _Select3D
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Select3D.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Select3D.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Select3D.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Select3D.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Select3D.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Select3D.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Select3D.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Select3D.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Select3D.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Select3D.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Select3D.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Select3D.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Select3D.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Select3D.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Select3D.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Select3D.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Select3D.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Select3D.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Bnd
import OCC.Standard
import OCC.gp
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.V3d
import OCC.Graphic3d
import OCC.Aspect
import OCC.Quantity
import OCC.TShort
import OCC.TColQuantity
import OCC.Image
import OCC.OSD
import OCC.Visual3d
import OCC.SelectBasics
import OCC.TColgp
import OCC.TopLoc
import OCC.Geom
import OCC.GeomAbs

_Select3D.Select3D_TOS_INTERIOR_swigconstant(_Select3D)
Select3D_TOS_INTERIOR = _Select3D.Select3D_TOS_INTERIOR

_Select3D.Select3D_TOS_BOUNDARY_swigconstant(_Select3D)
Select3D_TOS_BOUNDARY = _Select3D.Select3D_TOS_BOUNDARY
class Select3D_Box2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theBox:
        :type theBox: Bnd_Box2d &
        :rtype: None

        """
        _Select3D.Select3D_Box2d_swiginit(self, _Select3D.new_Select3D_Box2d(*args))

    def Set(self, *args):
        """
        :param theBox:
        :type theBox: Bnd_Box2d &
        :rtype: inline Select3D_Box2d

        """
        return _Select3D.Select3D_Box2d_Set(self, *args)


    def Update(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: inline void

        """
        return _Select3D.Select3D_Box2d_Update(self, *args)


    def SetVoid(self, *args):
        """
        :rtype: inline void

        """
        return _Select3D.Select3D_Box2d_SetVoid(self, *args)


    def IsVoid(self, *args):
        """
        :rtype: inline bool

        """
        return _Select3D.Select3D_Box2d_IsVoid(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_Box2d.Set = new_instancemethod(_Select3D.Select3D_Box2d_Set, None, Select3D_Box2d)
Select3D_Box2d.Update = new_instancemethod(_Select3D.Select3D_Box2d_Update, None, Select3D_Box2d)
Select3D_Box2d.SetVoid = new_instancemethod(_Select3D.Select3D_Box2d_SetVoid, None, Select3D_Box2d)
Select3D_Box2d.IsVoid = new_instancemethod(_Select3D.Select3D_Box2d_IsVoid, None, Select3D_Box2d)
Select3D_Box2d._kill_pointed = new_instancemethod(_Select3D.Select3D_Box2d__kill_pointed, None, Select3D_Box2d)
Select3D_Box2d_swigregister = _Select3D.Select3D_Box2d_swigregister
Select3D_Box2d_swigregister(Select3D_Box2d)

class Select3D_ListIteratorOfListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Select3D_ListOfSensitive &
        :rtype: None

        """
        _Select3D.Select3D_ListIteratorOfListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListIteratorOfListOfSensitive(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListIteratorOfListOfSensitive.Initialize = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Initialize, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.More = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_More, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.Next = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Next, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.Value = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Value, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive._kill_pointed = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive__kill_pointed, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive_swigregister = _Select3D.Select3D_ListIteratorOfListOfSensitive_swigregister
Select3D_ListIteratorOfListOfSensitive_swigregister(Select3D_ListIteratorOfListOfSensitive)

class Select3D_ListIteratorOfListOfSensitiveTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListIteratorOfListOfSensitiveTriangle(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListIteratorOfListOfSensitiveTriangle.Initialize = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Initialize, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.More = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_More, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.Next = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Next, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.Value = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Value, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle__kill_pointed, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister
Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister(Select3D_ListIteratorOfListOfSensitiveTriangle)

class Select3D_ListNodeOfListOfSensitive(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_ListNodeOfListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListNodeOfListOfSensitive(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListNodeOfListOfSensitive_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_ListNodeOfListOfSensitive self)"""
        return _Select3D.Select3D_ListNodeOfListOfSensitive__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_ListNodeOfListOfSensitive self) -> Handle_Select3D_ListNodeOfListOfSensitive"""
        return _Select3D.Select3D_ListNodeOfListOfSensitive_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListNodeOfListOfSensitive.Value = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitive_Value, None, Select3D_ListNodeOfListOfSensitive)
Select3D_ListNodeOfListOfSensitive._kill_pointed = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitive__kill_pointed, None, Select3D_ListNodeOfListOfSensitive)
Select3D_ListNodeOfListOfSensitive.GetHandle = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitive_GetHandle, None, Select3D_ListNodeOfListOfSensitive)
Select3D_ListNodeOfListOfSensitive_swigregister = _Select3D.Select3D_ListNodeOfListOfSensitive_swigregister
Select3D_ListNodeOfListOfSensitive_swigregister(Select3D_ListNodeOfListOfSensitive)

class Handle_Select3D_ListNodeOfListOfSensitive(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_swiginit(self, _Select3D.new_Handle_Select3D_ListNodeOfListOfSensitive(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_ListNodeOfListOfSensitive.Nullify = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_Nullify, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive.IsNull = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_IsNull, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive.GetObject = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_GetObject, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive__kill_pointed, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive_swigregister = _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_swigregister
Handle_Select3D_ListNodeOfListOfSensitive_swigregister(Handle_Select3D_ListNodeOfListOfSensitive)

def Handle_Select3D_ListNodeOfListOfSensitive_DownCast(AnObject):
    return _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast(AnObject)
Handle_Select3D_ListNodeOfListOfSensitive_DownCast = _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast

class Select3D_ListNodeOfListOfSensitiveTriangle(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListNodeOfListOfSensitiveTriangle(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_ListNodeOfListOfSensitiveTriangle self)"""
        return _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_ListNodeOfListOfSensitiveTriangle self) -> Handle_Select3D_ListNodeOfListOfSensitiveTriangle"""
        return _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListNodeOfListOfSensitiveTriangle.Value = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_Value, None, Select3D_ListNodeOfListOfSensitiveTriangle)
Select3D_ListNodeOfListOfSensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitiveTriangle__kill_pointed, None, Select3D_ListNodeOfListOfSensitiveTriangle)
Select3D_ListNodeOfListOfSensitiveTriangle.GetHandle = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_GetHandle, None, Select3D_ListNodeOfListOfSensitiveTriangle)
Select3D_ListNodeOfListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_swigregister
Select3D_ListNodeOfListOfSensitiveTriangle_swigregister(Select3D_ListNodeOfListOfSensitiveTriangle)

class Handle_Select3D_ListNodeOfListOfSensitiveTriangle(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Handle_Select3D_ListNodeOfListOfSensitiveTriangle(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_ListNodeOfListOfSensitiveTriangle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_Nullify, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_IsNull, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle.GetObject = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_GetObject, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle__kill_pointed, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister = _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister(Handle_Select3D_ListNodeOfListOfSensitiveTriangle)

def Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast(AnObject):
    return _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast(AnObject)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast = _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast

class Select3D_ListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Select3D.Select3D_ListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListOfSensitive(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Select3D.Select3D_ListOfSensitive_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListOfSensitive_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListOfSensitive_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListOfSensitive_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListOfSensitive.Assign = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Assign, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Set = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Set, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Extent = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Extent, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Clear = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Clear, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.IsEmpty = new_instancemethod(_Select3D.Select3D_ListOfSensitive_IsEmpty, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Prepend = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Prepend, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Append = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Append, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.First = new_instancemethod(_Select3D.Select3D_ListOfSensitive_First, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Last = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Last, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.RemoveFirst = new_instancemethod(_Select3D.Select3D_ListOfSensitive_RemoveFirst, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Remove = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Remove, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.InsertBefore = new_instancemethod(_Select3D.Select3D_ListOfSensitive_InsertBefore, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.InsertAfter = new_instancemethod(_Select3D.Select3D_ListOfSensitive_InsertAfter, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive._kill_pointed = new_instancemethod(_Select3D.Select3D_ListOfSensitive__kill_pointed, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive_swigregister = _Select3D.Select3D_ListOfSensitive_swigregister
Select3D_ListOfSensitive_swigregister(Select3D_ListOfSensitive)

class Select3D_ListOfSensitiveTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Select3D.Select3D_ListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListOfSensitiveTriangle(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_ListOfSensitiveTriangle.Assign = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Assign, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Set = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Set, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Extent = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Extent, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Clear = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Clear, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.IsEmpty = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_IsEmpty, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Prepend = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Prepend, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Append = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Append, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.First = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_First, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Last = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Last, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.RemoveFirst = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_RemoveFirst, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Remove = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Remove, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.InsertBefore = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_InsertBefore, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.InsertAfter = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_InsertAfter, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle__kill_pointed, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListOfSensitiveTriangle_swigregister
Select3D_ListOfSensitiveTriangle_swigregister(Select3D_ListOfSensitiveTriangle)

class Select3D_Pnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: inline gp_Pnt

        """
        return _Select3D.Select3D_Pnt_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_Pnt.Set = new_instancemethod(_Select3D.Select3D_Pnt_Set, None, Select3D_Pnt)
Select3D_Pnt._kill_pointed = new_instancemethod(_Select3D.Select3D_Pnt__kill_pointed, None, Select3D_Pnt)
Select3D_Pnt_swigregister = _Select3D.Select3D_Pnt_swigregister
Select3D_Pnt_swigregister(Select3D_Pnt)

class Select3D_Pnt2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: inline gp_Pnt2d

        """
        return _Select3D.Select3D_Pnt2d_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_Pnt2d.Set = new_instancemethod(_Select3D.Select3D_Pnt2d_Set, None, Select3D_Pnt2d)
Select3D_Pnt2d._kill_pointed = new_instancemethod(_Select3D.Select3D_Pnt2d__kill_pointed, None, Select3D_Pnt2d)
Select3D_Pnt2d_swigregister = _Select3D.Select3D_Pnt2d_swigregister
Select3D_Pnt2d_swigregister(Select3D_Pnt2d)

class Select3D_PointData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theNbPoints:
        :type theNbPoints: int
        :rtype: None

        """
        _Select3D.Select3D_PointData_swiginit(self, _Select3D.new_Select3D_PointData(*args))

    def SetPnt(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: Select3D_Pnt &
        :rtype: None

        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: gp_Pnt
        :rtype: None

        """
        return _Select3D.Select3D_PointData_SetPnt(self, *args)


    def SetPnt2d(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: Select3D_Pnt2d &
        :rtype: None

        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: gp_Pnt2d
        :rtype: None

        """
        return _Select3D.Select3D_PointData_SetPnt2d(self, *args)


    def Pnt(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :rtype: Select3D_Pnt

        """
        return _Select3D.Select3D_PointData_Pnt(self, *args)


    def Pnt2d(self, *args):
        """
        :param theIndex:
        :type theIndex: int
        :rtype: Select3D_Pnt2d

        """
        return _Select3D.Select3D_PointData_Pnt2d(self, *args)


    def Size(self, *args):
        """
        :rtype: int

        """
        return _Select3D.Select3D_PointData_Size(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_PointData.SetPnt = new_instancemethod(_Select3D.Select3D_PointData_SetPnt, None, Select3D_PointData)
Select3D_PointData.SetPnt2d = new_instancemethod(_Select3D.Select3D_PointData_SetPnt2d, None, Select3D_PointData)
Select3D_PointData.Pnt = new_instancemethod(_Select3D.Select3D_PointData_Pnt, None, Select3D_PointData)
Select3D_PointData.Pnt2d = new_instancemethod(_Select3D.Select3D_PointData_Pnt2d, None, Select3D_PointData)
Select3D_PointData.Size = new_instancemethod(_Select3D.Select3D_PointData_Size, None, Select3D_PointData)
Select3D_PointData._kill_pointed = new_instancemethod(_Select3D.Select3D_PointData__kill_pointed, None, Select3D_PointData)
Select3D_PointData_swigregister = _Select3D.Select3D_PointData_swigregister
Select3D_PointData_swigregister(Select3D_PointData)

class Select3D_Projector(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the 3D projector object defined by the 3D view aView.

        :param aView:
        :type aView: Handle_V3d_View &
        :rtype: None

        :rtype: None

        * Creates an axonometric projector. <CS> represents viewing coordinate system and could be constructed from x direction, view plane normal direction, and view point location in world-coordinate space.

        :param CS:
        :type CS: gp_Ax2
        :rtype: None

        * Creates a perspective projector. <CS> represents viewing coordinate system and could be constructed from x direction, view plane normal direction, and focal point location in world-coordinate space. <Focus> should represent distance of an eye from view plane in world-coordinate space (focal distance).

        :param CS:
        :type CS: gp_Ax2
        :param Focus:
        :type Focus: float
        :rtype: None

        * build a Projector from the given transformation. In case, when <T> transformation should represent custom view projection, it could be constructed from two separate components: transposed view orientation matrix and translation of focal point in view-coordiante system. <T> could be built up from x direction, up direction, view plane normal direction vectors and translation with SetValues(...) method, where first row arguments (a11, a12, a13, a14) are x, y, z component of x direction vector, and x value of reversed translation vector. Second row arguments, are x y z for up direction and y value of reversed translation, and the third row defined in the same manner. This also suits for simple perspective view, where <Focus> is the focale distance of an eye from view plane in world-space coordiantes. Note, that in that case amount of perspective distortion (perspective angle) should be defined through focal distance.

        :param T:
        :type T: gp_Trsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :rtype: None

        * build a Projector from the given transformation. In case, when <GT> transformation should represent custom view projection, it could be constructed from two separate components: transposed view orientation matrix and translation of a focal point in view-coordinate system. This also suits for perspective view, with <Focus> that could be equal to distance from an eye to a view plane in world-coordinates (focal distance). The 3x3 transformation matrix is built up from three vectors: x direction, up direction and view plane normal vectors, where each vector is a matrix row. Then <GT> is constructed from matrix and reversed translation with methods SetTranslationPart(..) and SetVectorialPart(..). Note, that in that case amount of perspective distortion (perspective angle) should be defined through focal distance.

        :param GT:
        :type GT: gp_GTrsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :rtype: None

        """
        _Select3D.Select3D_Projector_swiginit(self, _Select3D.new_Select3D_Projector(*args))

    def Set(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :rtype: None

        """
        return _Select3D.Select3D_Projector_Set(self, *args)


    def SetView(self, *args):
        """
        * Sets the 3D view V used at the time of construction.

        :param V:
        :type V: Handle_V3d_View &
        :rtype: None

        """
        return _Select3D.Select3D_Projector_SetView(self, *args)


    def View(self, *args):
        """
        * Returns the 3D view used at the time of construction.

        :rtype: Handle_V3d_View

        """
        return _Select3D.Select3D_Projector_View(self, *args)


    def Scaled(self, *args):
        """
        * to compute with the given scale and translation.

        :param On: default value is Standard_False
        :type On: bool
        :rtype: void

        """
        return _Select3D.Select3D_Projector_Scaled(self, *args)


    def Perspective(self, *args):
        """
        * Returns True if there is a perspective transformation.

        :rtype: bool

        """
        return _Select3D.Select3D_Projector_Perspective(self, *args)


    def Transformation(self, *args):
        """
        * Returns the active transformation.

        :rtype: gp_GTrsf

        """
        return _Select3D.Select3D_Projector_Transformation(self, *args)


    def InvertedTransformation(self, *args):
        """
        * Returns the active inverted transformation.

        :rtype: gp_GTrsf

        """
        return _Select3D.Select3D_Projector_InvertedTransformation(self, *args)


    def FullTransformation(self, *args):
        """
        * Returns the original transformation.

        :rtype: gp_Trsf

        """
        return _Select3D.Select3D_Projector_FullTransformation(self, *args)


    def Focus(self, *args):
        """
        * Returns the focal length.

        :rtype: float

        """
        return _Select3D.Select3D_Projector_Focus(self, *args)


    def Project(self, *args):
        """
        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param Pout:
        :type Pout: gp_Pnt2d
        :rtype: void

        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: None

        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param D1:
        :type D1: gp_Vec
        :param Pout:
        :type Pout: gp_Pnt2d
        :param D1out:
        :type D1out: gp_Vec2d
        :rtype: void

        """
        return _Select3D.Select3D_Projector_Project(self, *args)


    def Shoot(self, *args):
        """
        * return a line going through the eye towards the 2d point <X,Y>.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: gp_Lin

        """
        return _Select3D.Select3D_Projector_Shoot(self, *args)


    def Transform(self, *args):
        """
        :param D:
        :type D: gp_Vec
        :rtype: None

        :param Pnt:
        :type Pnt: gp_Pnt
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param T:
        :type T: gp_GTrsf
        :rtype: None

        :param D:
        :type D: gp_Lin
        :param T:
        :type T: gp_GTrsf
        :rtype: None

        """
        return _Select3D.Select3D_Projector_Transform(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_Projector self)"""
        return _Select3D.Select3D_Projector__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_Projector self) -> Handle_Select3D_Projector"""
        return _Select3D.Select3D_Projector_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_Projector.Set = new_instancemethod(_Select3D.Select3D_Projector_Set, None, Select3D_Projector)
Select3D_Projector.SetView = new_instancemethod(_Select3D.Select3D_Projector_SetView, None, Select3D_Projector)
Select3D_Projector.View = new_instancemethod(_Select3D.Select3D_Projector_View, None, Select3D_Projector)
Select3D_Projector.Scaled = new_instancemethod(_Select3D.Select3D_Projector_Scaled, None, Select3D_Projector)
Select3D_Projector.Perspective = new_instancemethod(_Select3D.Select3D_Projector_Perspective, None, Select3D_Projector)
Select3D_Projector.Transformation = new_instancemethod(_Select3D.Select3D_Projector_Transformation, None, Select3D_Projector)
Select3D_Projector.InvertedTransformation = new_instancemethod(_Select3D.Select3D_Projector_InvertedTransformation, None, Select3D_Projector)
Select3D_Projector.FullTransformation = new_instancemethod(_Select3D.Select3D_Projector_FullTransformation, None, Select3D_Projector)
Select3D_Projector.Focus = new_instancemethod(_Select3D.Select3D_Projector_Focus, None, Select3D_Projector)
Select3D_Projector.Project = new_instancemethod(_Select3D.Select3D_Projector_Project, None, Select3D_Projector)
Select3D_Projector.Shoot = new_instancemethod(_Select3D.Select3D_Projector_Shoot, None, Select3D_Projector)
Select3D_Projector.Transform = new_instancemethod(_Select3D.Select3D_Projector_Transform, None, Select3D_Projector)
Select3D_Projector._kill_pointed = new_instancemethod(_Select3D.Select3D_Projector__kill_pointed, None, Select3D_Projector)
Select3D_Projector.GetHandle = new_instancemethod(_Select3D.Select3D_Projector_GetHandle, None, Select3D_Projector)
Select3D_Projector_swigregister = _Select3D.Select3D_Projector_swigregister
Select3D_Projector_swigregister(Select3D_Projector)

class Handle_Select3D_Projector(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_Projector_swiginit(self, _Select3D.new_Handle_Select3D_Projector(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_Projector_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_Projector.Nullify = new_instancemethod(_Select3D.Handle_Select3D_Projector_Nullify, None, Handle_Select3D_Projector)
Handle_Select3D_Projector.IsNull = new_instancemethod(_Select3D.Handle_Select3D_Projector_IsNull, None, Handle_Select3D_Projector)
Handle_Select3D_Projector.GetObject = new_instancemethod(_Select3D.Handle_Select3D_Projector_GetObject, None, Handle_Select3D_Projector)
Handle_Select3D_Projector._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_Projector__kill_pointed, None, Handle_Select3D_Projector)
Handle_Select3D_Projector_swigregister = _Select3D.Handle_Select3D_Projector_swigregister
Handle_Select3D_Projector_swigregister(Handle_Select3D_Projector)

def Handle_Select3D_Projector_DownCast(AnObject):
    return _Select3D.Handle_Select3D_Projector_DownCast(AnObject)
Handle_Select3D_Projector_DownCast = _Select3D.Handle_Select3D_Projector_DownCast

class Select3D_SensitiveEntity(OCC.SelectBasics.SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Project(self, *args):
        """
        * In classes inheriting this framework, you must redefine this function in order to get a sensitive 2D rectangle from a 3D entity. This rectangle is the sensitive zone which makes the 3D entity selectable.

        :param aProjector:
        :type aProjector: Handle_Select3D_Projector &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_Project(self, *args)


    def GetConnected(self, *args):
        """
        * Originally this method intended to return sensitive entity with new location aLocation, but currently sensitive entities do not hold a location, instead HasLocation() and Location() methods call corresponding entity owner's methods. Thus all entities returned by GetConnected() share the same location propagated from corresponding selectable object. You must redefine this function for any type of sensitive entity which can accept another connected sensitive entity.//can be connected to another sensitive entity.

        :param aLocation:
        :type aLocation: TopLoc_Location &
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntity_GetConnected(self, *args)


    def Matches(self, *args):
        """
        * Matches the box defined by the coordinates Xmin, Ymin, Xmax, Ymax with the entity found at that point within the tolerance aTol. Xmin, YMin define the minimum point in the lower left hand corner of the box, and XMax, YMax define the maximum point in the upper right hand corner of the box. You must redefine this function for every inheriting entity. You will have to call this framework inside the redefined function.

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        * prevents from hiding virtual methods...

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveEntity_Matches(self, *args)


    def HasLocation(self, *args):
        """
        * Returns true if this framework has a location defined.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveEntity_HasLocation(self, *args)


    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _Select3D.Select3D_SensitiveEntity_Location(self, *args)


    def ResetLocation(self, *args):
        """
        * sets the location to Identity

        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_ResetLocation(self, *args)


    def SetLocation(self, *args):
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_SetLocation(self, *args)


    def Dump(self, *args):
        """
        * 2 options : <FullDump> = False -> general information //!	 <FullDump> = True -> whole informtion 3D +2d ...

        :param S:
        :type S: Standard_OStream &
        :param FullDump: default value is Standard_True
        :type FullDump: bool
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_Dump(self, *args)


    def DumpBox(*args):
        """
        :param S:
        :type S: Standard_OStream &
        :param abox:
        :type abox: Bnd_Box2d &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_DumpBox(*args)

    DumpBox = staticmethod(DumpBox)

    def UpdateLocation(self, *args):
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntity_UpdateLocation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveEntity self)"""
        return _Select3D.Select3D_SensitiveEntity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveEntity self) -> Handle_Select3D_SensitiveEntity"""
        return _Select3D.Select3D_SensitiveEntity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveEntity.Project = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Project, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.GetConnected = new_instancemethod(_Select3D.Select3D_SensitiveEntity_GetConnected, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Matches = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Matches, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.HasLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_HasLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Location = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Location, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.ResetLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_ResetLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.SetLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_SetLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Dump = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Dump, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.UpdateLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_UpdateLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveEntity__kill_pointed, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveEntity_GetHandle, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity_swigregister = _Select3D.Select3D_SensitiveEntity_swigregister
Select3D_SensitiveEntity_swigregister(Select3D_SensitiveEntity)

def Select3D_SensitiveEntity_DumpBox(*args):
    """
    :param S:
    :type S: Standard_OStream &
    :param abox:
    :type abox: Bnd_Box2d &
    :rtype: void

    """
    return _Select3D.Select3D_SensitiveEntity_DumpBox(*args)

class Handle_Select3D_SensitiveEntity(OCC.SelectBasics.Handle_SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveEntity_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveEntity(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveEntity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveEntity.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity_Nullify, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity_IsNull, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity_GetObject, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity__kill_pointed, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity_swigregister = _Select3D.Handle_Select3D_SensitiveEntity_swigregister
Handle_Select3D_SensitiveEntity_swigregister(Handle_Select3D_SensitiveEntity)

def Handle_Select3D_SensitiveEntity_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveEntity_DownCast(AnObject)
Handle_Select3D_SensitiveEntity_DownCast = _Select3D.Handle_Select3D_SensitiveEntity_DownCast

class Select3D_SensitiveEntitySequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Select3D.Select3D_SensitiveEntitySequence_swiginit(self, _Select3D.new_Select3D_SensitiveEntitySequence(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Select3D_SensitiveEntitySequence &
        :rtype: Select3D_SensitiveEntitySequence

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Select3D_SensitiveEntitySequence &
        :rtype: Select3D_SensitiveEntitySequence

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveEntitySequence.Clear = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Clear, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Assign = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Assign, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Set = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Set, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Append = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Append, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Prepend = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Prepend, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.InsertBefore = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_InsertBefore, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.InsertAfter = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_InsertAfter, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.First = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_First, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Last = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Last, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Split = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Split, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Value = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Value, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.SetValue = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_SetValue, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.ChangeValue = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_ChangeValue, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Remove = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Remove, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence__kill_pointed, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence_swigregister = _Select3D.Select3D_SensitiveEntitySequence_swigregister
Select3D_SensitiveEntitySequence_swigregister(Select3D_SensitiveEntitySequence)

class Select3D_SequenceNodeOfSensitiveEntitySequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_swiginit(self, _Select3D.new_Select3D_SequenceNodeOfSensitiveEntitySequence(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SequenceNodeOfSensitiveEntitySequence self)"""
        return _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SequenceNodeOfSensitiveEntitySequence self) -> Handle_Select3D_SequenceNodeOfSensitiveEntitySequence"""
        return _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SequenceNodeOfSensitiveEntitySequence.Value = new_instancemethod(_Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_Value, None, Select3D_SequenceNodeOfSensitiveEntitySequence)
Select3D_SequenceNodeOfSensitiveEntitySequence._kill_pointed = new_instancemethod(_Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence__kill_pointed, None, Select3D_SequenceNodeOfSensitiveEntitySequence)
Select3D_SequenceNodeOfSensitiveEntitySequence.GetHandle = new_instancemethod(_Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_GetHandle, None, Select3D_SequenceNodeOfSensitiveEntitySequence)
Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister = _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister
Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister(Select3D_SequenceNodeOfSensitiveEntitySequence)

class Handle_Select3D_SequenceNodeOfSensitiveEntitySequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swiginit(self, _Select3D.new_Handle_Select3D_SequenceNodeOfSensitiveEntitySequence(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SequenceNodeOfSensitiveEntitySequence.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_Nullify, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_IsNull, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_GetObject, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence__kill_pointed, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister = _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister(Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)

def Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast(AnObject)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast = _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast

class Select3D_SensitiveBox(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive box object defined by the owner OwnerId, and the bounding box BoundingBox.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param BoundingBox:
        :type BoundingBox: Bnd_Box &
        :rtype: None

        * Constructs a sensitive box object defined by the owner OwnerId, and the coordinates Xmin, YMin, ZMin, XMax, YMax, ZMax. Xmin, YMin and ZMin define the minimum point in the front lower left hand corner of the box, and XMax, YMax and ZMax define the maximum point in the back upper right hand corner of the box.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param ZMin:
        :type ZMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param ZMax:
        :type ZMax: float
        :rtype: None

        """
        _Select3D.Select3D_SensitiveBox_swiginit(self, _Select3D.new_Select3D_SensitiveBox(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveBox_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveBox_ComputeDepth(self, *args)


    def Box(self, *args):
        """
        * Returns the sensitive 3D box used at the time of construction.

        :rtype: Bnd_Box

        """
        return _Select3D.Select3D_SensitiveBox_Box(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveBox self)"""
        return _Select3D.Select3D_SensitiveBox__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveBox self) -> Handle_Select3D_SensitiveBox"""
        return _Select3D.Select3D_SensitiveBox_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveBox.Matches = new_instancemethod(_Select3D.Select3D_SensitiveBox_Matches, None, Select3D_SensitiveBox)
Select3D_SensitiveBox.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveBox_ComputeDepth, None, Select3D_SensitiveBox)
Select3D_SensitiveBox.Box = new_instancemethod(_Select3D.Select3D_SensitiveBox_Box, None, Select3D_SensitiveBox)
Select3D_SensitiveBox._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveBox__kill_pointed, None, Select3D_SensitiveBox)
Select3D_SensitiveBox.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveBox_GetHandle, None, Select3D_SensitiveBox)
Select3D_SensitiveBox_swigregister = _Select3D.Select3D_SensitiveBox_swigregister
Select3D_SensitiveBox_swigregister(Select3D_SensitiveBox)

class Handle_Select3D_SensitiveBox(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveBox_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveBox(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveBox_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveBox.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox_Nullify, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox_IsNull, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox_GetObject, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox__kill_pointed, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox_swigregister = _Select3D.Handle_Select3D_SensitiveBox_swigregister
Handle_Select3D_SensitiveBox_swigregister(Handle_Select3D_SensitiveBox)

def Handle_Select3D_SensitiveBox_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveBox_DownCast(AnObject)
Handle_Select3D_SensitiveBox_DownCast = _Select3D.Handle_Select3D_SensitiveBox_DownCast

class Select3D_SensitiveGroup(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty sensitive group object. This is a set of sensitive 3D entities. The sensitive entities will be defined using the function Add to fill the entity owner OwnerId. If MatchAll is false, nothing can be added.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param MatchAll: default value is Standard_True
        :type MatchAll: bool
        :rtype: None

        * Constructs a sensitive group object defined by the list TheList and the entity owner OwnerId. If MatchAll is false, nothing is done.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheList:
        :type TheList: Select3D_ListOfSensitive &
        :param MatchAll: default value is Standard_True
        :type MatchAll: bool
        :rtype: None

        """
        _Select3D.Select3D_SensitiveGroup_swiginit(self, _Select3D.new_Select3D_SensitiveGroup(*args))

    def Add(self, *args):
        """
        * Adds the list of sensitive entities LL to the empty sensitive group object created at construction time.

        :param LL:
        :type LL: Select3D_ListOfSensitive &
        :rtype: None

        * Adds the sensitive entity aSensitive to the non-empty sensitive group object created at construction time.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Add(self, *args)


    def Remove(self, *args):
        """
        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Remove(self, *args)


    def Clear(self, *args):
        """
        * Removes all sensitive entities from the list used at the time of construction, or added using the function Add.

        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Clear(self, *args)


    def IsIn(self, *args):
        """
        * Returns true if the sensitive entity aSensitive is in the list used at the time of construction, or added using the function Add.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_IsIn(self, *args)


    def MustMatchAll(self, *args):
        """
        * Returns true if all sensitive entities in the list used at the time of construction, or added using the function Add must be matched.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_MustMatchAll(self, *args)


    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_Matches(self, *args)


    def Set(self, *args):
        """
        * Sets the requirement that all sensitive entities in the list used at the time of construction, or added using the function Add must be matched.

        :param MustMatchAllEntities:
        :type MustMatchAllEntities: bool
        :rtype: None

        * Sets the owner for all entities in group

        :param TheOwnerId:
        :type TheOwnerId: Handle_SelectBasics_EntityOwner &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Set(self, *args)


    def GetEntities(self, *args):
        """
        * Gets group content

        :rtype: Select3D_ListOfSensitive

        """
        return _Select3D.Select3D_SensitiveGroup_GetEntities(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveGroup self)"""
        return _Select3D.Select3D_SensitiveGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveGroup self) -> Handle_Select3D_SensitiveGroup"""
        return _Select3D.Select3D_SensitiveGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveGroup.Add = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Add, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Remove = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Remove, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Clear = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Clear, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.IsIn = new_instancemethod(_Select3D.Select3D_SensitiveGroup_IsIn, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.MustMatchAll = new_instancemethod(_Select3D.Select3D_SensitiveGroup_MustMatchAll, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Matches = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Matches, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Set = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Set, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.GetEntities = new_instancemethod(_Select3D.Select3D_SensitiveGroup_GetEntities, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveGroup__kill_pointed, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveGroup_GetHandle, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup_swigregister = _Select3D.Select3D_SensitiveGroup_swigregister
Select3D_SensitiveGroup_swigregister(Select3D_SensitiveGroup)

class Handle_Select3D_SensitiveGroup(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveGroup_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveGroup(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveGroup.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup_Nullify, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup_IsNull, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup_GetObject, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup__kill_pointed, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup_swigregister = _Select3D.Handle_Select3D_SensitiveGroup_swigregister
Handle_Select3D_SensitiveGroup_swigregister(Handle_Select3D_SensitiveGroup)

def Handle_Select3D_SensitiveGroup_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveGroup_DownCast(AnObject)
Handle_Select3D_SensitiveGroup_DownCast = _Select3D.Handle_Select3D_SensitiveGroup_DownCast

class Select3D_SensitivePoint(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive point object defined by the owner OwnerId and the point Point.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        """
        _Select3D.Select3D_SensitivePoint_swiginit(self, _Select3D.new_Select3D_SensitivePoint(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePoint_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitivePoint_ComputeDepth(self, *args)


    def Point(self, *args):
        """
        * Returns the point used at the time of construction.

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitivePoint_Point(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitivePoint self)"""
        return _Select3D.Select3D_SensitivePoint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitivePoint self) -> Handle_Select3D_SensitivePoint"""
        return _Select3D.Select3D_SensitivePoint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitivePoint.Matches = new_instancemethod(_Select3D.Select3D_SensitivePoint_Matches, None, Select3D_SensitivePoint)
Select3D_SensitivePoint.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitivePoint_ComputeDepth, None, Select3D_SensitivePoint)
Select3D_SensitivePoint.Point = new_instancemethod(_Select3D.Select3D_SensitivePoint_Point, None, Select3D_SensitivePoint)
Select3D_SensitivePoint._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitivePoint__kill_pointed, None, Select3D_SensitivePoint)
Select3D_SensitivePoint.GetHandle = new_instancemethod(_Select3D.Select3D_SensitivePoint_GetHandle, None, Select3D_SensitivePoint)
Select3D_SensitivePoint_swigregister = _Select3D.Select3D_SensitivePoint_swigregister
Select3D_SensitivePoint_swigregister(Select3D_SensitivePoint)

class Handle_Select3D_SensitivePoint(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitivePoint_swiginit(self, _Select3D.new_Handle_Select3D_SensitivePoint(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitivePoint.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint_Nullify, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint_IsNull, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint_GetObject, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint__kill_pointed, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint_swigregister = _Select3D.Handle_Select3D_SensitivePoint_swigregister
Handle_Select3D_SensitivePoint_swigregister(Handle_Select3D_SensitivePoint)

def Handle_Select3D_SensitivePoint_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitivePoint_DownCast(AnObject)
Handle_Select3D_SensitivePoint_DownCast = _Select3D.Handle_Select3D_SensitivePoint_DownCast

class Select3D_SensitivePoly(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Points3D(self, *args):
        """
        * Returns the 3D points of the array used at construction time.

        :param theHArrayOfPnt:
        :type theHArrayOfPnt: Handle_TColgp_HArray1OfPnt
        :rtype: None

        """
        return _Select3D.Select3D_SensitivePoly_Points3D(self, *args)


    def Points2D(self, *args):
        """
        * Returns the 2D points of the array used at construction time.

        :param theArrayOfPnt2d:
        :type theArrayOfPnt2d: TColgp_Array1OfPnt2d
        :rtype: None

        """
        return _Select3D.Select3D_SensitivePoly_Points2D(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitivePoly self)"""
        return _Select3D.Select3D_SensitivePoly__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitivePoly self) -> Handle_Select3D_SensitivePoly"""
        return _Select3D.Select3D_SensitivePoly_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitivePoly.Points3D = new_instancemethod(_Select3D.Select3D_SensitivePoly_Points3D, None, Select3D_SensitivePoly)
Select3D_SensitivePoly.Points2D = new_instancemethod(_Select3D.Select3D_SensitivePoly_Points2D, None, Select3D_SensitivePoly)
Select3D_SensitivePoly._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitivePoly__kill_pointed, None, Select3D_SensitivePoly)
Select3D_SensitivePoly.GetHandle = new_instancemethod(_Select3D.Select3D_SensitivePoly_GetHandle, None, Select3D_SensitivePoly)
Select3D_SensitivePoly_swigregister = _Select3D.Select3D_SensitivePoly_swigregister
Select3D_SensitivePoly_swigregister(Select3D_SensitivePoly)

class Handle_Select3D_SensitivePoly(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitivePoly_swiginit(self, _Select3D.new_Handle_Select3D_SensitivePoly(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoly_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitivePoly.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly_Nullify, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly_IsNull, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly_GetObject, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly__kill_pointed, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly_swigregister = _Select3D.Handle_Select3D_SensitivePoly_swigregister
Handle_Select3D_SensitivePoly_swigregister(Handle_Select3D_SensitivePoly)

def Handle_Select3D_SensitivePoly_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitivePoly_DownCast(AnObject)
Handle_Select3D_SensitivePoly_DownCast = _Select3D.Handle_Select3D_SensitivePoly_DownCast

class Select3D_SensitiveSegment(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the sensitive segment object defined by the owner OwnerId, the points FirstP, LastP and the maximum number of sensitive bounding boxes MaxRect.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param FirstP:
        :type FirstP: gp_Pnt
        :param LastP:
        :type LastP: gp_Pnt
        :param MaxRect: default value is 1
        :type MaxRect: int
        :rtype: None

        """
        _Select3D.Select3D_SensitiveSegment_swiginit(self, _Select3D.new_Select3D_SensitiveSegment(*args))

    def Set(self, *args):
        """
        * Sets the maximum number of sensitive rectangles MaxRect.

        :param MaxRect:
        :type MaxRect: int
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveSegment_Set(self, *args)


    def StartPoint(self, *args):
        """
        * changes the start Point of the Segment;

        :param aPt:
        :type aPt: gp_Pnt
        :rtype: None

        * gives the 3D start Point of the Segment

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_StartPoint(self, *args)


    def EndPoint(self, *args):
        """
        * changes the end point of the segment

        :param aPt:
        :type aPt: gp_Pnt
        :rtype: None

        * gives the 3D End Point of the Segment

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_EndPoint(self, *args)


    def StartPoint2d(self, *args):
        """
        * gives the 3D start Point of the Segment

        :rtype: gp_Pnt2d

        """
        return _Select3D.Select3D_SensitiveSegment_StartPoint2d(self, *args)


    def EndPoint2d(self, *args):
        """
        * gives the 3D End Point of the Segment

        :rtype: gp_Pnt2d

        """
        return _Select3D.Select3D_SensitiveSegment_EndPoint2d(self, *args)


    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveSegment_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveSegment_ComputeDepth(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveSegment self)"""
        return _Select3D.Select3D_SensitiveSegment__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveSegment self) -> Handle_Select3D_SensitiveSegment"""
        return _Select3D.Select3D_SensitiveSegment_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveSegment.Set = new_instancemethod(_Select3D.Select3D_SensitiveSegment_Set, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.StartPoint = new_instancemethod(_Select3D.Select3D_SensitiveSegment_StartPoint, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.EndPoint = new_instancemethod(_Select3D.Select3D_SensitiveSegment_EndPoint, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.StartPoint2d = new_instancemethod(_Select3D.Select3D_SensitiveSegment_StartPoint2d, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.EndPoint2d = new_instancemethod(_Select3D.Select3D_SensitiveSegment_EndPoint2d, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.Matches = new_instancemethod(_Select3D.Select3D_SensitiveSegment_Matches, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveSegment_ComputeDepth, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveSegment__kill_pointed, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveSegment_GetHandle, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment_swigregister = _Select3D.Select3D_SensitiveSegment_swigregister
Select3D_SensitiveSegment_swigregister(Select3D_SensitiveSegment)

class Handle_Select3D_SensitiveSegment(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveSegment_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveSegment(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveSegment_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveSegment.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment_Nullify, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment_IsNull, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment_GetObject, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment__kill_pointed, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment_swigregister = _Select3D.Handle_Select3D_SensitiveSegment_swigregister
Handle_Select3D_SensitiveSegment_swigregister(Handle_Select3D_SensitiveSegment)

def Handle_Select3D_SensitiveSegment_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveSegment_DownCast(AnObject)
Handle_Select3D_SensitiveSegment_DownCast = _Select3D.Handle_Select3D_SensitiveSegment_DownCast

class Select3D_SensitiveWire(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive wire object defined by the owner OwnerId, and the maximum number of sensitive rectangles MaxRect.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param MaxRect: default value is 1
        :type MaxRect: int
        :rtype: None

        """
        _Select3D.Select3D_SensitiveWire_swiginit(self, _Select3D.new_Select3D_SensitiveWire(*args))

    def Add(self, *args):
        """
        * Adds the sensitive entity aSensitive to this framework.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveWire_Add(self, *args)


    def GetEdges(self, *args):
        """
        * returns the sensitive edges stored in this wire

        :param theEdges:
        :type theEdges: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveWire_GetEdges(self, *args)


    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveWire_Matches(self, *args)


    def GetLastDetected(self, *args):
        """
        * //!returns <mymaxrect>

        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveWire_GetLastDetected(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveWire self)"""
        return _Select3D.Select3D_SensitiveWire__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveWire self) -> Handle_Select3D_SensitiveWire"""
        return _Select3D.Select3D_SensitiveWire_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveWire.Add = new_instancemethod(_Select3D.Select3D_SensitiveWire_Add, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.GetEdges = new_instancemethod(_Select3D.Select3D_SensitiveWire_GetEdges, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.Matches = new_instancemethod(_Select3D.Select3D_SensitiveWire_Matches, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.GetLastDetected = new_instancemethod(_Select3D.Select3D_SensitiveWire_GetLastDetected, None, Select3D_SensitiveWire)
Select3D_SensitiveWire._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveWire__kill_pointed, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveWire_GetHandle, None, Select3D_SensitiveWire)
Select3D_SensitiveWire_swigregister = _Select3D.Select3D_SensitiveWire_swigregister
Select3D_SensitiveWire_swigregister(Select3D_SensitiveWire)

class Handle_Select3D_SensitiveWire(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveWire_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveWire(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveWire_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveWire.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire_Nullify, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire_IsNull, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire_GetObject, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire__kill_pointed, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire_swigregister = _Select3D.Handle_Select3D_SensitiveWire_swigregister
Handle_Select3D_SensitiveWire_swigregister(Handle_Select3D_SensitiveWire)

def Handle_Select3D_SensitiveWire_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveWire_DownCast(AnObject)
Handle_Select3D_SensitiveWire_DownCast = _Select3D.Handle_Select3D_SensitiveWire_DownCast

class Select3D_SensitiveCircle(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the sensitive circle object defined by the owner OwnerId, the circle Circle, the Boolean FilledCircle and the number of points NbOfPoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCircle:
        :type TheCircle: Handle_Geom_Circle &
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :param NbOfPoints: default value is 6
        :type NbOfPoints: int
        :rtype: None

        * Constructs the sensitive arc object defined by the owner OwnerId, the circle Circle, the parameters u1 and u2, the Boolean FilledCircle and the number of points NbOfPoints. u1 and u2 define the first and last points of the arc on Circle.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCircle:
        :type TheCircle: Handle_Geom_Circle &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :param NbOfPoints: default value is 6
        :type NbOfPoints: int
        :rtype: None

        * Constructs the sensitive circle object defined by the owner OwnerId, the array of triangles apolyg3d, and the Boolean FilledCircle. apolyg3d is an array of consecutive triangles on the circle. The triangle i+1 lies on the intersection of the tangents to the circle of i and i+2. Note, that the first point of apolyg3d must be equal to the last point of apolyg3d.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param apolyg3d:
        :type apolyg3d: Handle_TColgp_HArray1OfPnt
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :rtype: None

        * Constructs the sensitive circle object defined by the owner OwnerId, the array of points apolyg3d, and the Boolean FilledCircle. If the length of apolyg3d is more then 1, the first point of apolyg3d must be equal to the last point of apolyg3d.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param apolyg3d:
        :type apolyg3d: TColgp_Array1OfPnt
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :rtype: None

        """
        _Select3D.Select3D_SensitiveCircle_swiginit(self, _Select3D.new_Select3D_SensitiveCircle(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveCircle_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        * Compute depth of sensitive circle for the detected sub-part. @param thePickLine [in] the picking line. @param theDetectedIndex [in] index of the detected sub-part. returns depth on the picking line.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDetectedIndex:
        :type theDetectedIndex: int
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveCircle_ComputeDepth(self, *args)


    def ArrayBounds(self, *args):
        """
        :param Low:
        :type Low: int &
        :param Up:
        :type Up: int &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveCircle_ArrayBounds(self, *args)


    def GetPoint3d(self, *args):
        """
        :param rank:
        :type rank: int
        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveCircle_GetPoint3d(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveCircle self)"""
        return _Select3D.Select3D_SensitiveCircle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveCircle self) -> Handle_Select3D_SensitiveCircle"""
        return _Select3D.Select3D_SensitiveCircle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveCircle.Matches = new_instancemethod(_Select3D.Select3D_SensitiveCircle_Matches, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveCircle_ComputeDepth, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.ArrayBounds = new_instancemethod(_Select3D.Select3D_SensitiveCircle_ArrayBounds, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.GetPoint3d = new_instancemethod(_Select3D.Select3D_SensitiveCircle_GetPoint3d, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveCircle__kill_pointed, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveCircle_GetHandle, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle_swigregister = _Select3D.Select3D_SensitiveCircle_swigregister
Select3D_SensitiveCircle_swigregister(Select3D_SensitiveCircle)

class Handle_Select3D_SensitiveCircle(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveCircle_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveCircle(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCircle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveCircle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle_Nullify, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle_IsNull, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle_GetObject, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle__kill_pointed, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle_swigregister = _Select3D.Handle_Select3D_SensitiveCircle_swigregister
Handle_Select3D_SensitiveCircle_swigregister(Handle_Select3D_SensitiveCircle)

def Handle_Select3D_SensitiveCircle_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveCircle_DownCast(AnObject)
Handle_Select3D_SensitiveCircle_DownCast = _Select3D.Handle_Select3D_SensitiveCircle_DownCast

class Select3D_SensitiveCurve(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive curve object defined by the owner OwnerId, the curve TheCurve, and the maximum number of points on the curve: MaxPoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCurve:
        :type TheCurve: Handle_Geom_Curve &
        :param MaxPoints: default value is 17
        :type MaxPoints: int
        :rtype: None

        * Constructs a sensitive curve object defined by the owner OwnerId and the set of points ThePoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: Handle_TColgp_HArray1OfPnt
        :rtype: None

        * Creation of Sensitive Curve from Points. Warning : This Method should disappear in the next version...

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: TColgp_Array1OfPnt
        :rtype: None

        """
        _Select3D.Select3D_SensitiveCurve_swiginit(self, _Select3D.new_Select3D_SensitiveCurve(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveCurve_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        * Compute depth of sensitive circle for the detected sub-part. @param thePickLine [in] the picking line. @param theDetectedIndex [in] index of the detected sub-part. returns depth on the picking line.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDetectedIndex:
        :type theDetectedIndex: int
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveCurve_ComputeDepth(self, *args)


    def GetLastDetected(self, *args):
        """
        * Gets index of last detected segment

        :rtype: int

        """
        return _Select3D.Select3D_SensitiveCurve_GetLastDetected(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveCurve self)"""
        return _Select3D.Select3D_SensitiveCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveCurve self) -> Handle_Select3D_SensitiveCurve"""
        return _Select3D.Select3D_SensitiveCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveCurve.Matches = new_instancemethod(_Select3D.Select3D_SensitiveCurve_Matches, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveCurve_ComputeDepth, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve.GetLastDetected = new_instancemethod(_Select3D.Select3D_SensitiveCurve_GetLastDetected, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveCurve__kill_pointed, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveCurve_GetHandle, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve_swigregister = _Select3D.Select3D_SensitiveCurve_swigregister
Select3D_SensitiveCurve_swigregister(Select3D_SensitiveCurve)

class Handle_Select3D_SensitiveCurve(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveCurve_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveCurve(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveCurve.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve_Nullify, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve_IsNull, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve_GetObject, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve__kill_pointed, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve_swigregister = _Select3D.Handle_Select3D_SensitiveCurve_swigregister
Handle_Select3D_SensitiveCurve_swigregister(Handle_Select3D_SensitiveCurve)

def Handle_Select3D_SensitiveCurve_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveCurve_DownCast(AnObject)
Handle_Select3D_SensitiveCurve_DownCast = _Select3D.Handle_Select3D_SensitiveCurve_DownCast

class Select3D_SensitiveFace(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive face object defined by the owner OwnerId, the array of points ThePoints, and the sensitivity type Sensitivity. The array of points is the outer polygon of the geometric face.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: TColgp_Array1OfPnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        * Constructs a sensitive face object defined by the owner OwnerId, the array of points ThePoints, and the sensitivity type Sensitivity. The array of points is the outer polygon of the geometric face.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: Handle_TColgp_HArray1OfPnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        """
        _Select3D.Select3D_SensitiveFace_swiginit(self, _Select3D.new_Select3D_SensitiveFace(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveFace_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        * Computes the depth values for all 3D points defining this face and returns the minimal value among them. If the 'minimal depth' approach is not suitable and gives wrong detection results in some particular case, a custom sensitive face class can redefine this method.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDepthMin:
        :type theDepthMin: float
        :param theDepthMax:
        :type theDepthMax: float
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveFace_ComputeDepth(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveFace self)"""
        return _Select3D.Select3D_SensitiveFace__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveFace self) -> Handle_Select3D_SensitiveFace"""
        return _Select3D.Select3D_SensitiveFace_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveFace.Matches = new_instancemethod(_Select3D.Select3D_SensitiveFace_Matches, None, Select3D_SensitiveFace)
Select3D_SensitiveFace.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveFace_ComputeDepth, None, Select3D_SensitiveFace)
Select3D_SensitiveFace._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveFace__kill_pointed, None, Select3D_SensitiveFace)
Select3D_SensitiveFace.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveFace_GetHandle, None, Select3D_SensitiveFace)
Select3D_SensitiveFace_swigregister = _Select3D.Select3D_SensitiveFace_swigregister
Select3D_SensitiveFace_swigregister(Select3D_SensitiveFace)

class Handle_Select3D_SensitiveFace(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveFace_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveFace(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveFace_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveFace.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace_Nullify, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace_IsNull, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace_GetObject, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace__kill_pointed, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace_swigregister = _Select3D.Handle_Select3D_SensitiveFace_swigregister
Handle_Select3D_SensitiveFace_swigregister(Handle_Select3D_SensitiveFace)

def Handle_Select3D_SensitiveFace_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveFace_DownCast(AnObject)
Handle_Select3D_SensitiveFace_DownCast = _Select3D.Handle_Select3D_SensitiveFace_DownCast

class Select3D_SensitiveTriangle(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive triangle object defined by the owner OwnerId, the points P1, P2, P3, and the type of sensitivity Sensitivity.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        """
        _Select3D.Select3D_SensitiveTriangle_swiginit(self, _Select3D.new_Select3D_SensitiveTriangle(*args))

    def Matches(self, *args):
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveTriangle_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveTriangle_ComputeDepth(self, *args)


    def Points3D(self, *args):
        """
        * Returns the 3D points P1, P2, P3 used at the time of construction.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveTriangle_Points3D(self, *args)


    def Center3D(self, *args):
        """
        * Returns the center point of the sensitive triangle created at construction time.

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangle_Center3D(self, *args)


    def Center2D(self, *args):
        """
        * WARNING : the returned Values are the original values without the stored location (if there's one). To get the genuine value, One must apply this location (Method Location() )

        :rtype: gp_XY

        """
        return _Select3D.Select3D_SensitiveTriangle_Center2D(self, *args)


    def Status(*args):
        """
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param aTol:
        :type aTol: float
        :param Dmin:
        :type Dmin: float &
        :rtype: int

        * Dmin gives the distance between the cdg and aPoint return

        :param p0:
        :type p0: gp_XY
        :param p1:
        :type p1: gp_XY
        :param p2:
        :type p2: gp_XY
        :param aPoint:
        :type aPoint: gp_XY
        :param aTol:
        :type aTol: float
        :param Dmin:
        :type Dmin: float &
        :rtype: int

        """
        return _Select3D.Select3D_SensitiveTriangle_Status(*args)

    Status = staticmethod(Status)

    def _kill_pointed(self):
        """_kill_pointed(Select3D_SensitiveTriangle self)"""
        return _Select3D.Select3D_SensitiveTriangle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Select3D_SensitiveTriangle self) -> Handle_Select3D_SensitiveTriangle"""
        return _Select3D.Select3D_SensitiveTriangle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Select3D_SensitiveTriangle.Matches = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Matches, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_ComputeDepth, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Points3D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Points3D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Center3D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Center3D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Center2D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Center2D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Select3D_SensitiveTriangle__kill_pointed, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.GetHandle = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_GetHandle, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle_swigregister = _Select3D.Select3D_SensitiveTriangle_swigregister
Select3D_SensitiveTriangle_swigregister(Select3D_SensitiveTriangle)

def Select3D_SensitiveTriangle_Status(*args):
    """
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param aTol:
    :type aTol: float
    :param Dmin:
    :type Dmin: float &
    :rtype: int

    * Dmin gives the distance between the cdg and aPoint return

    :param p0:
    :type p0: gp_XY
    :param p1:
    :type p1: gp_XY
    :param p2:
    :type p2: gp_XY
    :param aPoint:
    :type aPoint: gp_XY
    :param aTol:
    :type aTol: float
    :param Dmin:
    :type Dmin: float &
    :rtype: int

    """
    return _Select3D.Select3D_SensitiveTriangle_Status(*args)

class Handle_Select3D_SensitiveTriangle(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveTriangle_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveTriangle(*args))
    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveTriangle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Select3D_SensitiveTriangle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle_Nullify, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle_IsNull, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle.GetObject = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle_GetObject, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle._kill_pointed = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle__kill_pointed, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle_swigregister = _Select3D.Handle_Select3D_SensitiveTriangle_swigregister
Handle_Select3D_SensitiveTriangle_swigregister(Handle_Select3D_SensitiveTriangle)

def Handle_Select3D_SensitiveTriangle_DownCast(AnObject):
    return _Select3D.Handle_Select3D_SensitiveTriangle_DownCast(AnObject)
Handle_Select3D_SensitiveTriangle_DownCast = _Select3D.Handle_Select3D_SensitiveTriangle_DownCast



