# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _LProp3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LProp3d', [dirname(__file__)])
        except ImportError:
            import _LProp3d
            return _LProp3d
        if fp is not None:
            try:
                _mod = imp.load_module('_LProp3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _LProp3d = swig_import_helper()
    del swig_import_helper
else:
    import _LProp3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_LProp3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_LProp3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_LProp3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_LProp3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_LProp3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_LProp3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_LProp3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_LProp3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_LProp3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_LProp3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_LProp3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_LProp3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_LProp3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_LProp3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_LProp3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_LProp3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _LProp3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Adaptor3d
import OCC.Standard
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
class LProp3d_CLProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        """
        _LProp3d.LProp3d_CLProps_swiginit(self, _LProp3d.new_LProp3d_CLProps(*args))

    def SetParameter(self, *args):
        """
        :param U:
        :type U: float
        :rtype: None

        """
        return _LProp3d.LProp3d_CLProps_SetParameter(self, *args)


    def SetCurve(self, *args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        return _LProp3d.LProp3d_CLProps_SetCurve(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _LProp3d.LProp3d_CLProps_Value(self, *args)


    def D1(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_CLProps_D1(self, *args)


    def D2(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_CLProps_D2(self, *args)


    def D3(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_CLProps_D3(self, *args)


    def IsTangentDefined(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_CLProps_IsTangentDefined(self, *args)


    def Tangent(self, *args):
        """
        :param D:
        :type D: gp_Dir
        :rtype: None

        """
        return _LProp3d.LProp3d_CLProps_Tangent(self, *args)


    def Curvature(self, *args):
        """
        :rtype: float

        """
        return _LProp3d.LProp3d_CLProps_Curvature(self, *args)


    def Normal(self, *args):
        """
        :param N:
        :type N: gp_Dir
        :rtype: None

        """
        return _LProp3d.LProp3d_CLProps_Normal(self, *args)


    def CentreOfCurvature(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _LProp3d.LProp3d_CLProps_CentreOfCurvature(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp3d_CLProps.SetParameter = new_instancemethod(_LProp3d.LProp3d_CLProps_SetParameter, None, LProp3d_CLProps)
LProp3d_CLProps.SetCurve = new_instancemethod(_LProp3d.LProp3d_CLProps_SetCurve, None, LProp3d_CLProps)
LProp3d_CLProps.Value = new_instancemethod(_LProp3d.LProp3d_CLProps_Value, None, LProp3d_CLProps)
LProp3d_CLProps.D1 = new_instancemethod(_LProp3d.LProp3d_CLProps_D1, None, LProp3d_CLProps)
LProp3d_CLProps.D2 = new_instancemethod(_LProp3d.LProp3d_CLProps_D2, None, LProp3d_CLProps)
LProp3d_CLProps.D3 = new_instancemethod(_LProp3d.LProp3d_CLProps_D3, None, LProp3d_CLProps)
LProp3d_CLProps.IsTangentDefined = new_instancemethod(_LProp3d.LProp3d_CLProps_IsTangentDefined, None, LProp3d_CLProps)
LProp3d_CLProps.Tangent = new_instancemethod(_LProp3d.LProp3d_CLProps_Tangent, None, LProp3d_CLProps)
LProp3d_CLProps.Curvature = new_instancemethod(_LProp3d.LProp3d_CLProps_Curvature, None, LProp3d_CLProps)
LProp3d_CLProps.Normal = new_instancemethod(_LProp3d.LProp3d_CLProps_Normal, None, LProp3d_CLProps)
LProp3d_CLProps.CentreOfCurvature = new_instancemethod(_LProp3d.LProp3d_CLProps_CentreOfCurvature, None, LProp3d_CLProps)
LProp3d_CLProps._kill_pointed = new_instancemethod(_LProp3d.LProp3d_CLProps__kill_pointed, None, LProp3d_CLProps)
LProp3d_CLProps_swigregister = _LProp3d.LProp3d_CLProps_swigregister
LProp3d_CLProps_swigregister(LProp3d_CLProps)

class LProp3d_CurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value(*args):
        """
        * Computes the point <P> of parameter <U> on the HCurve <C>.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _LProp3d.LProp3d_CurveTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        * Computes the point <P> and first derivative <V1> of parameter <U> on the HCurve <C>.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :rtype: void

        """
        return _LProp3d.LProp3d_CurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the HCurve <C>.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: void

        """
        return _LProp3d.LProp3d_CurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the HCurve <C>.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: void

        """
        return _LProp3d.LProp3d_CurveTool_D3(*args)

    D3 = staticmethod(D3)

    def Continuity(*args):
        """
        * returns the order of continuity of the HCurve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: int

        """
        return _LProp3d.LProp3d_CurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def FirstParameter(*args):
        """
        * returns the first parameter bound of the HCurve.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _LProp3d.LProp3d_CurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        * returns the last parameter bound of the HCurve. FirstParameter must be less than LastParamenter.

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _LProp3d.LProp3d_CurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def __init__(self):
        _LProp3d.LProp3d_CurveTool_swiginit(self, _LProp3d.new_LProp3d_CurveTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp3d_CurveTool._kill_pointed = new_instancemethod(_LProp3d.LProp3d_CurveTool__kill_pointed, None, LProp3d_CurveTool)
LProp3d_CurveTool_swigregister = _LProp3d.LProp3d_CurveTool_swigregister
LProp3d_CurveTool_swigregister(LProp3d_CurveTool)

def LProp3d_CurveTool_Value(*args):
    """
    * Computes the point <P> of parameter <U> on the HCurve <C>.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _LProp3d.LProp3d_CurveTool_Value(*args)

def LProp3d_CurveTool_D1(*args):
    """
    * Computes the point <P> and first derivative <V1> of parameter <U> on the HCurve <C>.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :rtype: void

    """
    return _LProp3d.LProp3d_CurveTool_D1(*args)

def LProp3d_CurveTool_D2(*args):
    """
    * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the HCurve <C>.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :rtype: void

    """
    return _LProp3d.LProp3d_CurveTool_D2(*args)

def LProp3d_CurveTool_D3(*args):
    """
    * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the HCurve <C>.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :param V3:
    :type V3: gp_Vec
    :rtype: void

    """
    return _LProp3d.LProp3d_CurveTool_D3(*args)

def LProp3d_CurveTool_Continuity(*args):
    """
    * returns the order of continuity of the HCurve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: int

    """
    return _LProp3d.LProp3d_CurveTool_Continuity(*args)

def LProp3d_CurveTool_FirstParameter(*args):
    """
    * returns the first parameter bound of the HCurve.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _LProp3d.LProp3d_CurveTool_FirstParameter(*args)

def LProp3d_CurveTool_LastParameter(*args):
    """
    * returns the last parameter bound of the HCurve. FirstParameter must be less than LastParamenter.

    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _LProp3d.LProp3d_CurveTool_LastParameter(*args)

class LProp3d_SLProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        """
        _LProp3d.LProp3d_SLProps_swiginit(self, _LProp3d.new_LProp3d_SLProps(*args))

    def SetSurface(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        return _LProp3d.LProp3d_SLProps_SetSurface(self, *args)


    def SetParameters(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _LProp3d.LProp3d_SLProps_SetParameters(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _LProp3d.LProp3d_SLProps_Value(self, *args)


    def D1U(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SLProps_D1U(self, *args)


    def D1V(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SLProps_D1V(self, *args)


    def D2U(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SLProps_D2U(self, *args)


    def D2V(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SLProps_D2V(self, *args)


    def DUV(self, *args):
        """
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SLProps_DUV(self, *args)


    def IsTangentUDefined(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_SLProps_IsTangentUDefined(self, *args)


    def TangentU(self, *args):
        """
        :param D:
        :type D: gp_Dir
        :rtype: None

        """
        return _LProp3d.LProp3d_SLProps_TangentU(self, *args)


    def IsTangentVDefined(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_SLProps_IsTangentVDefined(self, *args)


    def TangentV(self, *args):
        """
        :param D:
        :type D: gp_Dir
        :rtype: None

        """
        return _LProp3d.LProp3d_SLProps_TangentV(self, *args)


    def IsNormalDefined(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_SLProps_IsNormalDefined(self, *args)


    def Normal(self, *args):
        """
        :rtype: gp_Dir

        """
        return _LProp3d.LProp3d_SLProps_Normal(self, *args)


    def IsCurvatureDefined(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_SLProps_IsCurvatureDefined(self, *args)


    def IsUmbilic(self, *args):
        """
        :rtype: bool

        """
        return _LProp3d.LProp3d_SLProps_IsUmbilic(self, *args)


    def MaxCurvature(self, *args):
        """
        :rtype: float

        """
        return _LProp3d.LProp3d_SLProps_MaxCurvature(self, *args)


    def MinCurvature(self, *args):
        """
        :rtype: float

        """
        return _LProp3d.LProp3d_SLProps_MinCurvature(self, *args)


    def CurvatureDirections(self, *args):
        """
        :param MaxD:
        :type MaxD: gp_Dir
        :param MinD:
        :type MinD: gp_Dir
        :rtype: None

        """
        return _LProp3d.LProp3d_SLProps_CurvatureDirections(self, *args)


    def MeanCurvature(self, *args):
        """
        :rtype: float

        """
        return _LProp3d.LProp3d_SLProps_MeanCurvature(self, *args)


    def GaussianCurvature(self, *args):
        """
        :rtype: float

        """
        return _LProp3d.LProp3d_SLProps_GaussianCurvature(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp3d_SLProps.SetSurface = new_instancemethod(_LProp3d.LProp3d_SLProps_SetSurface, None, LProp3d_SLProps)
LProp3d_SLProps.SetParameters = new_instancemethod(_LProp3d.LProp3d_SLProps_SetParameters, None, LProp3d_SLProps)
LProp3d_SLProps.Value = new_instancemethod(_LProp3d.LProp3d_SLProps_Value, None, LProp3d_SLProps)
LProp3d_SLProps.D1U = new_instancemethod(_LProp3d.LProp3d_SLProps_D1U, None, LProp3d_SLProps)
LProp3d_SLProps.D1V = new_instancemethod(_LProp3d.LProp3d_SLProps_D1V, None, LProp3d_SLProps)
LProp3d_SLProps.D2U = new_instancemethod(_LProp3d.LProp3d_SLProps_D2U, None, LProp3d_SLProps)
LProp3d_SLProps.D2V = new_instancemethod(_LProp3d.LProp3d_SLProps_D2V, None, LProp3d_SLProps)
LProp3d_SLProps.DUV = new_instancemethod(_LProp3d.LProp3d_SLProps_DUV, None, LProp3d_SLProps)
LProp3d_SLProps.IsTangentUDefined = new_instancemethod(_LProp3d.LProp3d_SLProps_IsTangentUDefined, None, LProp3d_SLProps)
LProp3d_SLProps.TangentU = new_instancemethod(_LProp3d.LProp3d_SLProps_TangentU, None, LProp3d_SLProps)
LProp3d_SLProps.IsTangentVDefined = new_instancemethod(_LProp3d.LProp3d_SLProps_IsTangentVDefined, None, LProp3d_SLProps)
LProp3d_SLProps.TangentV = new_instancemethod(_LProp3d.LProp3d_SLProps_TangentV, None, LProp3d_SLProps)
LProp3d_SLProps.IsNormalDefined = new_instancemethod(_LProp3d.LProp3d_SLProps_IsNormalDefined, None, LProp3d_SLProps)
LProp3d_SLProps.Normal = new_instancemethod(_LProp3d.LProp3d_SLProps_Normal, None, LProp3d_SLProps)
LProp3d_SLProps.IsCurvatureDefined = new_instancemethod(_LProp3d.LProp3d_SLProps_IsCurvatureDefined, None, LProp3d_SLProps)
LProp3d_SLProps.IsUmbilic = new_instancemethod(_LProp3d.LProp3d_SLProps_IsUmbilic, None, LProp3d_SLProps)
LProp3d_SLProps.MaxCurvature = new_instancemethod(_LProp3d.LProp3d_SLProps_MaxCurvature, None, LProp3d_SLProps)
LProp3d_SLProps.MinCurvature = new_instancemethod(_LProp3d.LProp3d_SLProps_MinCurvature, None, LProp3d_SLProps)
LProp3d_SLProps.CurvatureDirections = new_instancemethod(_LProp3d.LProp3d_SLProps_CurvatureDirections, None, LProp3d_SLProps)
LProp3d_SLProps.MeanCurvature = new_instancemethod(_LProp3d.LProp3d_SLProps_MeanCurvature, None, LProp3d_SLProps)
LProp3d_SLProps.GaussianCurvature = new_instancemethod(_LProp3d.LProp3d_SLProps_GaussianCurvature, None, LProp3d_SLProps)
LProp3d_SLProps._kill_pointed = new_instancemethod(_LProp3d.LProp3d_SLProps__kill_pointed, None, LProp3d_SLProps)
LProp3d_SLProps_swigregister = _LProp3d.LProp3d_SLProps_swigregister
LProp3d_SLProps_swigregister(LProp3d_SLProps)

class LProp3d_SurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value(*args):
        """
        * Computes the point <P> of parameter <U> and <V> on the HSurface <S>.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _LProp3d.LProp3d_SurfaceTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        * Computes the point <P> and first derivative <D1*> of parameter <U> and <V> on the HSurface <S>.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: void

        """
        return _LProp3d.LProp3d_SurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        * Computes the point <P>, the first derivative <D1*> and second derivative <D2*> of parameter <U> and <V> on the HSurface <S>.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param DUV:
        :type DUV: gp_Vec
        :rtype: void

        """
        return _LProp3d.LProp3d_SurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def DN(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param IU:
        :type IU: int
        :param IV:
        :type IV: int
        :rtype: gp_Vec

        """
        return _LProp3d.LProp3d_SurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def Continuity(*args):
        """
        * returns the order of continuity of the HSurface <S>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: int

        """
        return _LProp3d.LProp3d_SurfaceTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def Bounds(*args):
        """
        * returns the bounds of the HSurface.

        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U1:
        :type U1: float &
        :param V1:
        :type V1: float &
        :param U2:
        :type U2: float &
        :param V2:
        :type V2: float &
        :rtype: void

        """
        return _LProp3d.LProp3d_SurfaceTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def __init__(self):
        _LProp3d.LProp3d_SurfaceTool_swiginit(self, _LProp3d.new_LProp3d_SurfaceTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp3d_SurfaceTool._kill_pointed = new_instancemethod(_LProp3d.LProp3d_SurfaceTool__kill_pointed, None, LProp3d_SurfaceTool)
LProp3d_SurfaceTool_swigregister = _LProp3d.LProp3d_SurfaceTool_swigregister
LProp3d_SurfaceTool_swigregister(LProp3d_SurfaceTool)

def LProp3d_SurfaceTool_Value(*args):
    """
    * Computes the point <P> of parameter <U> and <V> on the HSurface <S>.

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _LProp3d.LProp3d_SurfaceTool_Value(*args)

def LProp3d_SurfaceTool_D1(*args):
    """
    * Computes the point <P> and first derivative <D1*> of parameter <U> and <V> on the HSurface <S>.

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :rtype: void

    """
    return _LProp3d.LProp3d_SurfaceTool_D1(*args)

def LProp3d_SurfaceTool_D2(*args):
    """
    * Computes the point <P>, the first derivative <D1*> and second derivative <D2*> of parameter <U> and <V> on the HSurface <S>.

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param D1U:
    :type D1U: gp_Vec
    :param D1V:
    :type D1V: gp_Vec
    :param D2U:
    :type D2U: gp_Vec
    :param D2V:
    :type D2V: gp_Vec
    :param DUV:
    :type DUV: gp_Vec
    :rtype: void

    """
    return _LProp3d.LProp3d_SurfaceTool_D2(*args)

def LProp3d_SurfaceTool_DN(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param IU:
    :type IU: int
    :param IV:
    :type IV: int
    :rtype: gp_Vec

    """
    return _LProp3d.LProp3d_SurfaceTool_DN(*args)

def LProp3d_SurfaceTool_Continuity(*args):
    """
    * returns the order of continuity of the HSurface <S>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: int

    """
    return _LProp3d.LProp3d_SurfaceTool_Continuity(*args)

def LProp3d_SurfaceTool_Bounds(*args):
    """
    * returns the bounds of the HSurface.

    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U1:
    :type U1: float &
    :param V1:
    :type V1: float &
    :param U2:
    :type U2: float &
    :param V2:
    :type V2: float &
    :rtype: void

    """
    return _LProp3d.LProp3d_SurfaceTool_Bounds(*args)



