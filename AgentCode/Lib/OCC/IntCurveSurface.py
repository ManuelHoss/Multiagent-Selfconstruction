# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntCurveSurface.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _IntCurveSurface
            return _IntCurveSurface
        if fp is not None:
            try:
                _mod = imp.load_module('_IntCurveSurface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _IntCurveSurface
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurveSurface.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntCurveSurface.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntCurveSurface.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntCurveSurface.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntCurveSurface.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntCurveSurface.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntCurveSurface.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntCurveSurface.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntCurveSurface.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntCurveSurface.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntCurveSurface.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.MMgt
import OCC.math
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.Intf
import OCC.Bnd
import OCC.IntSurf

_IntCurveSurface.IntCurveSurface_Tangent_swigconstant(_IntCurveSurface)
IntCurveSurface_Tangent = _IntCurveSurface.IntCurveSurface_Tangent

_IntCurveSurface.IntCurveSurface_In_swigconstant(_IntCurveSurface)
IntCurveSurface_In = _IntCurveSurface.IntCurveSurface_In

_IntCurveSurface.IntCurveSurface_Out_swigconstant(_IntCurveSurface)
IntCurveSurface_Out = _IntCurveSurface.IntCurveSurface_Out
class IntCurveSurface_Intersection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        * returns the <done> field.

        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_IsDone(self, *args)


    def NbPoints(self, *args):
        """
        * returns the number of IntersectionPoint if IsDone returns True. else NotDone is raised.

        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_NbPoints(self, *args)


    def Point(self, *args):
        """
        * returns the IntersectionPoint of range <Index> raises NotDone if the computation has failed or if the computation has not been done raises OutOfRange if Index is not in the range <1..NbPoints>

        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Point(self, *args)


    def NbSegments(self, *args):
        """
        * returns the number of IntersectionSegment if IsDone returns True. else NotDone is raised.

        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_NbSegments(self, *args)


    def Segment(self, *args):
        """
        * returns the IntersectionSegment of range <Index> raises NotDone if the computation has failed or if the computation has not been done raises OutOfRange if Index is not in the range <1..NbSegment>

        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Segment(self, *args)


    def Dump(self, *args):
        """
        * Dump all the fields.

        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_Intersection.IsDone = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_IsDone, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection.NbPoints = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_NbPoints, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection.Point = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_Point, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection.NbSegments = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_NbSegments, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection.Segment = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_Segment, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection.Dump = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection_Dump, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_Intersection__kill_pointed, None, IntCurveSurface_Intersection)
IntCurveSurface_Intersection_swigregister = _IntCurveSurface.IntCurveSurface_Intersection_swigregister
IntCurveSurface_Intersection_swigregister(IntCurveSurface_Intersection)

class IntCurveSurface_IntersectionPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty Constructor.

        :rtype: None

        * Create an IntersectionPoint.

        :param P:
        :type P: gp_Pnt
        :param USurf:
        :type USurf: float
        :param VSurf:
        :type VSurf: float
        :param UCurv:
        :type UCurv: float
        :param TrCurv:
        :type TrCurv: IntCurveSurface_TransitionOnCurve
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_IntersectionPoint_swiginit(self, _IntCurveSurface.new_IntCurveSurface_IntersectionPoint(*args))

    def SetValues(self, *args):
        """
        * Set the fields of the current IntersectionPoint.

        :param P:
        :type P: gp_Pnt
        :param USurf:
        :type USurf: float
        :param VSurf:
        :type VSurf: float
        :param UCurv:
        :type UCurv: float
        :param TrCurv:
        :type TrCurv: IntCurveSurface_TransitionOnCurve
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_SetValues(self, *args)


    def Values(self, *args):
        """
        * Get the fields of the current IntersectionPoint.

        :param P:
        :type P: gp_Pnt
        :param USurf:
        :type USurf: float &
        :param VSurf:
        :type VSurf: float &
        :param UCurv:
        :type UCurv: float &
        :param TrCurv:
        :type TrCurv: IntCurveSurface_TransitionOnCurve &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Values(self, *args)


    def Pnt(self, *args):
        """
        * returns the geometric point.

        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Pnt(self, *args)


    def U(self, *args):
        """
        * returns the U parameter on the surface.

        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_U(self, *args)


    def V(self, *args):
        """
        * returns the V parameter on the surface.

        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_V(self, *args)


    def W(self, *args):
        """
        * returns the parameter on the curve.

        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_W(self, *args)


    def Transition(self, *args):
        """
        * returns the Transition of the point.

        :rtype: IntCurveSurface_TransitionOnCurve

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Transition(self, *args)


    def Dump(self, *args):
        """
        * Dump all the fields.

        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_IntersectionPoint.SetValues = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_SetValues, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.Values = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_Values, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.Pnt = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_Pnt, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.U = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_U, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.V = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_V, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.W = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_W, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.Transition = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_Transition, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint.Dump = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint_Dump, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionPoint__kill_pointed, None, IntCurveSurface_IntersectionPoint)
IntCurveSurface_IntersectionPoint_swigregister = _IntCurveSurface.IntCurveSurface_IntersectionPoint_swigregister
IntCurveSurface_IntersectionPoint_swigregister(IntCurveSurface_IntersectionPoint)

class IntCurveSurface_IntersectionSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P1:
        :type P1: IntCurveSurface_IntersectionPoint &
        :param P2:
        :type P2: IntCurveSurface_IntersectionPoint &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_IntersectionSegment_swiginit(self, _IntCurveSurface.new_IntCurveSurface_IntersectionSegment(*args))

    def SetValues(self, *args):
        """
        :param P1:
        :type P1: IntCurveSurface_IntersectionPoint &
        :param P2:
        :type P2: IntCurveSurface_IntersectionPoint &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_SetValues(self, *args)


    def Values(self, *args):
        """
        :param P1:
        :type P1: IntCurveSurface_IntersectionPoint &
        :param P2:
        :type P2: IntCurveSurface_IntersectionPoint &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_Values(self, *args)


    def FirstPoint(self, *args):
        """
        :param P1:
        :type P1: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_FirstPoint(self, *args)


    def SecondPoint(self, *args):
        """
        :param P2:
        :type P2: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_SecondPoint(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_IntersectionSegment.SetValues = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment_SetValues, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment.Values = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment_Values, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment.FirstPoint = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment_FirstPoint, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment.SecondPoint = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment_SecondPoint, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment.Dump = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment_Dump, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_IntersectionSegment__kill_pointed, None, IntCurveSurface_IntersectionSegment)
IntCurveSurface_IntersectionSegment_swigregister = _IntCurveSurface.IntCurveSurface_IntersectionSegment_swigregister
IntCurveSurface_IntersectionSegment_swigregister(IntCurveSurface_IntersectionSegment)

class IntCurveSurface_SequenceNodeOfSequenceOfPnt(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntCurveSurface_IntersectionPoint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_swiginit(self, _IntCurveSurface.new_IntCurveSurface_SequenceNodeOfSequenceOfPnt(*args))

    def Value(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntCurveSurface_SequenceNodeOfSequenceOfPnt self)"""
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntCurveSurface_SequenceNodeOfSequenceOfPnt self) -> Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt"""
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_SequenceNodeOfSequenceOfPnt.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_Value, None, IntCurveSurface_SequenceNodeOfSequenceOfPnt)
IntCurveSurface_SequenceNodeOfSequenceOfPnt._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt__kill_pointed, None, IntCurveSurface_SequenceNodeOfSequenceOfPnt)
IntCurveSurface_SequenceNodeOfSequenceOfPnt.GetHandle = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_GetHandle, None, IntCurveSurface_SequenceNodeOfSequenceOfPnt)
IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister = _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister
IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister(IntCurveSurface_SequenceNodeOfSequenceOfPnt)

class Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_swiginit(self, _IntCurveSurface.new_Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt(*args))
    DownCast = staticmethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt.Nullify = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_Nullify, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt.IsNull = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_IsNull, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt.GetObject = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_GetObject, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt._kill_pointed = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt__kill_pointed, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister = _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_swigregister(Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt)

def Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_DownCast(AnObject):
    return _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_DownCast(AnObject)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_DownCast = _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfPnt_DownCast

class IntCurveSurface_SequenceNodeOfSequenceOfSeg(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntCurveSurface_IntersectionSegment &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_swiginit(self, _IntCurveSurface.new_IntCurveSurface_SequenceNodeOfSequenceOfSeg(*args))

    def Value(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntCurveSurface_SequenceNodeOfSequenceOfSeg self)"""
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntCurveSurface_SequenceNodeOfSequenceOfSeg self) -> Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg"""
        return _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_SequenceNodeOfSequenceOfSeg.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_Value, None, IntCurveSurface_SequenceNodeOfSequenceOfSeg)
IntCurveSurface_SequenceNodeOfSequenceOfSeg._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg__kill_pointed, None, IntCurveSurface_SequenceNodeOfSequenceOfSeg)
IntCurveSurface_SequenceNodeOfSequenceOfSeg.GetHandle = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_GetHandle, None, IntCurveSurface_SequenceNodeOfSequenceOfSeg)
IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister = _IntCurveSurface.IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister
IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister(IntCurveSurface_SequenceNodeOfSequenceOfSeg)

class Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_swiginit(self, _IntCurveSurface.new_Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg(*args))
    DownCast = staticmethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg.Nullify = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_Nullify, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg.IsNull = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_IsNull, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg.GetObject = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_GetObject, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg._kill_pointed = new_instancemethod(_IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg__kill_pointed, None, Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister = _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_swigregister(Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg)

def Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_DownCast(AnObject):
    return _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_DownCast(AnObject)
Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_DownCast = _IntCurveSurface.Handle_IntCurveSurface_SequenceNodeOfSequenceOfSeg_DownCast

class IntCurveSurface_SequenceOfPnt(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_SequenceOfPnt_swiginit(self, _IntCurveSurface.new_IntCurveSurface_SequenceOfPnt(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntCurveSurface_SequenceOfPnt &
        :rtype: IntCurveSurface_SequenceOfPnt

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntCurveSurface_SequenceOfPnt &
        :rtype: IntCurveSurface_SequenceOfPnt

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :param S:
        :type S: IntCurveSurface_SequenceOfPnt &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :param S:
        :type S: IntCurveSurface_SequenceOfPnt &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntCurveSurface_SequenceOfPnt &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntCurveSurface_IntersectionPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntCurveSurface_SequenceOfPnt &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntCurveSurface_SequenceOfPnt &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntCurveSurface_IntersectionPoint &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_SequenceOfPnt.Clear = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Clear, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Assign = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Assign, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Set = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Set, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Append = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Append, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Prepend = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Prepend, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.InsertBefore = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertBefore, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.InsertAfter = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertAfter, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.First = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_First, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Last = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Last, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Split = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Split, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Value, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.SetValue = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_SetValue, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.ChangeValue = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_ChangeValue, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt.Remove = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_Remove, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt__kill_pointed, None, IntCurveSurface_SequenceOfPnt)
IntCurveSurface_SequenceOfPnt_swigregister = _IntCurveSurface.IntCurveSurface_SequenceOfPnt_swigregister
IntCurveSurface_SequenceOfPnt_swigregister(IntCurveSurface_SequenceOfPnt)

class IntCurveSurface_SequenceOfSeg(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_SequenceOfSeg_swiginit(self, _IntCurveSurface.new_IntCurveSurface_SequenceOfSeg(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntCurveSurface_SequenceOfSeg &
        :rtype: IntCurveSurface_SequenceOfSeg

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntCurveSurface_SequenceOfSeg &
        :rtype: IntCurveSurface_SequenceOfSeg

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntCurveSurface_IntersectionSegment &
        :rtype: None

        :param S:
        :type S: IntCurveSurface_SequenceOfSeg &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntCurveSurface_IntersectionSegment &
        :rtype: None

        :param S:
        :type S: IntCurveSurface_SequenceOfSeg &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntCurveSurface_IntersectionSegment &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntCurveSurface_SequenceOfSeg &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntCurveSurface_IntersectionSegment &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntCurveSurface_SequenceOfSeg &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntCurveSurface_SequenceOfSeg &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntCurveSurface_IntersectionSegment &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_SequenceOfSeg.Clear = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Clear, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Assign = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Assign, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Set = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Set, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Append = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Append, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Prepend = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Prepend, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.InsertBefore = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertBefore, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.InsertAfter = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertAfter, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.First = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_First, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Last = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Last, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Split = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Split, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Value, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.SetValue = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_SetValue, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.ChangeValue = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_ChangeValue, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg.Remove = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_Remove, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg__kill_pointed, None, IntCurveSurface_SequenceOfSeg)
IntCurveSurface_SequenceOfSeg_swigregister = _IntCurveSurface.IntCurveSurface_SequenceOfSeg_swigregister
IntCurveSurface_SequenceOfSeg_swigregister(IntCurveSurface_SequenceOfSeg)

class IntCurveSurface_TheCSFunctionOfHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheCSFunctionOfHInter(*args))

    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Values(self, *args)


    def Point(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Point(self, *args)


    def Root(self, *args):
        """
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Root(self, *args)


    def AuxillarSurface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarSurface(self, *args)


    def AuxillarCurve(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarCurve(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheCSFunctionOfHInter.NbVariables = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_NbVariables, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.NbEquations = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_NbEquations, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Value, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.Derivatives = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Derivatives, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.Values = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Values, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.Point = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Point, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.Root = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Root, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.AuxillarSurface = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarSurface, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter.AuxillarCurve = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarCurve, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter__kill_pointed, None, IntCurveSurface_TheCSFunctionOfHInter)
IntCurveSurface_TheCSFunctionOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_swigregister
IntCurveSurface_TheCSFunctionOfHInter_swigregister(IntCurveSurface_TheCSFunctionOfHInter)

class IntCurveSurface_TheExactHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param W:
        :type W: float
        :param F:
        :type F: IntCurveSurface_TheCSFunctionOfHInter &
        :param TolTangency:
        :type TolTangency: float
        :param MarginCoef: default value is 0.0
        :type MarginCoef: float
        :rtype: None

        :param F:
        :type F: IntCurveSurface_TheCSFunctionOfHInter &
        :param TolTangency:
        :type TolTangency: float
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_TheExactHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheExactHInter(*args))

    def Perform(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param W:
        :type W: float
        :param Rsnld:
        :type Rsnld: math_FunctionSetRoot &
        :param u0:
        :type u0: float
        :param v0:
        :type v0: float
        :param u1:
        :type u1: float
        :param v1:
        :type v1: float
        :param w0:
        :type w0: float
        :param w1:
        :type w1: float
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_IsDone(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_IsEmpty(self, *args)


    def Point(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Point(self, *args)


    def ParameterOnCurve(self, *args):
        """
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnCurve(self, *args)


    def ParameterOnSurface(self, *args):
        """
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnSurface(self, *args)


    def Function(self, *args):
        """
        :rtype: IntCurveSurface_TheCSFunctionOfHInter

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Function(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheExactHInter.Perform = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_Perform, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.IsDone = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_IsDone, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.IsEmpty = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_IsEmpty, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.Point = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_Point, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.ParameterOnCurve = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnCurve, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.ParameterOnSurface = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnSurface, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter.Function = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter_Function, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheExactHInter__kill_pointed, None, IntCurveSurface_TheExactHInter)
IntCurveSurface_TheExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheExactHInter_swigregister
IntCurveSurface_TheExactHInter_swigregister(IntCurveSurface_TheExactHInter)

class IntCurveSurface_TheHCurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Continuity(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: GeomAbs_Shape

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def NbIntervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def Intervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def Period(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Period(*args)

    Period = staticmethod(Period)

    def Value(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_DN(*args)

    DN = staticmethod(DN)

    def Resolution(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def GetType(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: GeomAbs_CurveType

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Line(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Lin

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Circ

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Elips

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Hyperbola(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Hypr

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Parabola(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Parab

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Bezier(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: Handle_Geom_BezierCurve

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: Handle_Geom_BSplineCurve

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def NbSamples(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def SamplePars(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param Defl:
        :type Defl: float
        :param NbMin:
        :type NbMin: int
        :param Pars:
        :type Pars: Handle_TColStd_HArray1OfReal &
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_SamplePars(*args)

    SamplePars = staticmethod(SamplePars)

    def __init__(self):
        _IntCurveSurface.IntCurveSurface_TheHCurveTool_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheHCurveTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheHCurveTool._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheHCurveTool__kill_pointed, None, IntCurveSurface_TheHCurveTool)
IntCurveSurface_TheHCurveTool_swigregister = _IntCurveSurface.IntCurveSurface_TheHCurveTool_swigregister
IntCurveSurface_TheHCurveTool_swigregister(IntCurveSurface_TheHCurveTool)

def IntCurveSurface_TheHCurveTool_FirstParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_FirstParameter(*args)

def IntCurveSurface_TheHCurveTool_LastParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_LastParameter(*args)

def IntCurveSurface_TheHCurveTool_Continuity(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: GeomAbs_Shape

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Continuity(*args)

def IntCurveSurface_TheHCurveTool_NbIntervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: int

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbIntervals(*args)

def IntCurveSurface_TheHCurveTool_Intervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Intervals(*args)

def IntCurveSurface_TheHCurveTool_IsClosed(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: bool

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsClosed(*args)

def IntCurveSurface_TheHCurveTool_IsPeriodic(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: bool

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsPeriodic(*args)

def IntCurveSurface_TheHCurveTool_Period(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Period(*args)

def IntCurveSurface_TheHCurveTool_Value(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :rtype: gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Value(*args)

def IntCurveSurface_TheHCurveTool_D0(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D0(*args)

def IntCurveSurface_TheHCurveTool_D1(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V:
    :type V: gp_Vec
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D1(*args)

def IntCurveSurface_TheHCurveTool_D2(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D2(*args)

def IntCurveSurface_TheHCurveTool_D3(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :param V3:
    :type V3: gp_Vec
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D3(*args)

def IntCurveSurface_TheHCurveTool_DN(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param N:
    :type N: int
    :rtype: gp_Vec

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_DN(*args)

def IntCurveSurface_TheHCurveTool_Resolution(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Resolution(*args)

def IntCurveSurface_TheHCurveTool_GetType(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: GeomAbs_CurveType

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_GetType(*args)

def IntCurveSurface_TheHCurveTool_Line(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Lin

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Line(*args)

def IntCurveSurface_TheHCurveTool_Circle(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Circ

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Circle(*args)

def IntCurveSurface_TheHCurveTool_Ellipse(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Elips

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Ellipse(*args)

def IntCurveSurface_TheHCurveTool_Hyperbola(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Hypr

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Hyperbola(*args)

def IntCurveSurface_TheHCurveTool_Parabola(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Parab

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Parabola(*args)

def IntCurveSurface_TheHCurveTool_Bezier(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: Handle_Geom_BezierCurve

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Bezier(*args)

def IntCurveSurface_TheHCurveTool_BSpline(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: Handle_Geom_BSplineCurve

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_BSpline(*args)

def IntCurveSurface_TheHCurveTool_NbSamples(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U0:
    :type U0: float
    :param U1:
    :type U1: float
    :rtype: int

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbSamples(*args)

def IntCurveSurface_TheHCurveTool_SamplePars(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U0:
    :type U0: float
    :param U1:
    :type U1: float
    :param Defl:
    :type Defl: float
    :param NbMin:
    :type NbMin: int
    :param Pars:
    :type Pars: Handle_TColStd_HArray1OfReal &
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_SamplePars(*args)

class IntCurveSurface_TheInterferenceOfHInter(OCC.Intf.Intf_Interference):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param theLin:
        :type theLin: gp_Lin
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param theLins:
        :type theLins: Intf_Array1OfLin &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        :param theLin:
        :type theLin: gp_Lin
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        :param theLins:
        :type theLins: Intf_Array1OfLin &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheInterferenceOfHInter(*args))

    def Perform(self, *args):
        """
        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param theLin:
        :type theLin: gp_Lin
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param theLins:
        :type theLins: Intf_Array1OfLin &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        :param theLin:
        :type theLin: gp_Lin
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        :param theLins:
        :type theLins: Intf_Array1OfLin &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Perform(self, *args)


    def Interference(self, *args):
        """
        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param theBoundSB:
        :type theBoundSB: Bnd_BoundSortBox &
        :rtype: None

        :param thePolyg:
        :type thePolyg: IntCurveSurface_ThePolygonOfHInter &
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Interference(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheInterferenceOfHInter.Perform = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Perform, None, IntCurveSurface_TheInterferenceOfHInter)
IntCurveSurface_TheInterferenceOfHInter.Interference = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Interference, None, IntCurveSurface_TheInterferenceOfHInter)
IntCurveSurface_TheInterferenceOfHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter__kill_pointed, None, IntCurveSurface_TheInterferenceOfHInter)
IntCurveSurface_TheInterferenceOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_swigregister
IntCurveSurface_TheInterferenceOfHInter_swigregister(IntCurveSurface_TheInterferenceOfHInter)

class IntCurveSurface_ThePolygonOfHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param NbPnt:
        :type NbPnt: int
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param NbPnt:
        :type NbPnt: int
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param Upars:
        :type Upars: TColStd_Array1OfReal &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_ThePolygonOfHInter(*args))

    def Bounding(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Bounding(self, *args)


    def DeflectionOverEstimation(self, *args):
        """
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_DeflectionOverEstimation(self, *args)


    def SetDeflectionOverEstimation(self, *args):
        """
        :param x:
        :type x: float
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SetDeflectionOverEstimation(self, *args)


    def Closed(self, *args):
        """
        :param clos:
        :type clos: bool
        :rtype: None

        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Closed(self, *args)


    def NbSegments(self, *args):
        """
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_NbSegments(self, *args)


    def BeginOfSeg(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_BeginOfSeg(self, *args)


    def EndOfSeg(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_EndOfSeg(self, *args)


    def InfParameter(self, *args):
        """
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_InfParameter(self, *args)


    def SupParameter(self, *args):
        """
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SupParameter(self, *args)


    def ApproxParamOnCurve(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParamOnLine:
        :type ParamOnLine: float
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_ApproxParamOnCurve(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_ThePolygonOfHInter.Bounding = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Bounding, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.DeflectionOverEstimation = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_DeflectionOverEstimation, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.SetDeflectionOverEstimation = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SetDeflectionOverEstimation, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.Closed = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Closed, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.NbSegments = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_NbSegments, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.BeginOfSeg = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_BeginOfSeg, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.EndOfSeg = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_EndOfSeg, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.InfParameter = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_InfParameter, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.SupParameter = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SupParameter, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.ApproxParamOnCurve = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_ApproxParamOnCurve, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter.Dump = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Dump, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonOfHInter__kill_pointed, None, IntCurveSurface_ThePolygonOfHInter)
IntCurveSurface_ThePolygonOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_swigregister
IntCurveSurface_ThePolygonOfHInter_swigregister(IntCurveSurface_ThePolygonOfHInter)

class IntCurveSurface_ThePolygonToolOfHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bounding(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :rtype: Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args)

    Bounding = staticmethod(Bounding)

    def DeflectionOverEstimation(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args)

    DeflectionOverEstimation = staticmethod(DeflectionOverEstimation)

    def Closed(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Closed(*args)

    Closed = staticmethod(Closed)

    def NbSegments(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args)

    NbSegments = staticmethod(NbSegments)

    def BeginOfSeg(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args)

    BeginOfSeg = staticmethod(BeginOfSeg)

    def EndOfSeg(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args)

    EndOfSeg = staticmethod(EndOfSeg)

    def Dump(*args):
        """
        :param thePolygon:
        :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Dump(*args)

    Dump = staticmethod(Dump)

    def __init__(self):
        _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_ThePolygonToolOfHInter())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_ThePolygonToolOfHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter__kill_pointed, None, IntCurveSurface_ThePolygonToolOfHInter)
IntCurveSurface_ThePolygonToolOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_swigregister
IntCurveSurface_ThePolygonToolOfHInter_swigregister(IntCurveSurface_ThePolygonToolOfHInter)

def IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :rtype: Bnd_Box

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args)

def IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args)

def IntCurveSurface_ThePolygonToolOfHInter_Closed(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :rtype: bool

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Closed(*args)

def IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :rtype: int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args)

def IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :param Index:
    :type Index: int
    :rtype: gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args)

def IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :param Index:
    :type Index: int
    :rtype: gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args)

def IntCurveSurface_ThePolygonToolOfHInter_Dump(*args):
    """
    :param thePolygon:
    :type thePolygon: IntCurveSurface_ThePolygonOfHInter &
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Dump(*args)

class IntCurveSurface_ThePolyhedronToolOfHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bounding(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args)

    Bounding = staticmethod(Bounding)

    def ComponentsBounding(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: Handle_Bnd_HArray1OfBox

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args)

    ComponentsBounding = staticmethod(ComponentsBounding)

    def DeflectionOverEstimation(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args)

    DeflectionOverEstimation = staticmethod(DeflectionOverEstimation)

    def NbTriangles(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args)

    NbTriangles = staticmethod(NbTriangles)

    def Triangle(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param Index:
        :type Index: int
        :param P1:
        :type P1: int &
        :param P2:
        :type P2: int &
        :param P3:
        :type P3: int &
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args)

    Triangle = staticmethod(Triangle)

    def Point(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args)

    Point = staticmethod(Point)

    def TriConnex(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param Triang:
        :type Triang: int
        :param Pivot:
        :type Pivot: int
        :param Pedge:
        :type Pedge: int
        :param TriCon:
        :type TriCon: int &
        :param OtherP:
        :type OtherP: int &
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args)

    TriConnex = staticmethod(TriConnex)

    def IsOnBound(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :param Index1:
        :type Index1: int
        :param Index2:
        :type Index2: int
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args)

    IsOnBound = staticmethod(IsOnBound)

    def GetBorderDeflection(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args)

    GetBorderDeflection = staticmethod(GetBorderDeflection)

    def Dump(*args):
        """
        :param thePolyh:
        :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: void

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args)

    Dump = staticmethod(Dump)

    def __init__(self):
        _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_ThePolyhedronToolOfHInter())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_ThePolyhedronToolOfHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter__kill_pointed, None, IntCurveSurface_ThePolyhedronToolOfHInter)
IntCurveSurface_ThePolyhedronToolOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_swigregister
IntCurveSurface_ThePolyhedronToolOfHInter_swigregister(IntCurveSurface_ThePolyhedronToolOfHInter)

def IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: Bnd_Box

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: Handle_Bnd_HArray1OfBox

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :param Index:
    :type Index: int
    :param P1:
    :type P1: int &
    :param P2:
    :type P2: int &
    :param P3:
    :type P3: int &
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :param Index:
    :type Index: int
    :rtype: gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :param Triang:
    :type Triang: int
    :param Pivot:
    :type Pivot: int
    :param Pedge:
    :type Pedge: int
    :param TriCon:
    :type TriCon: int &
    :param OtherP:
    :type OtherP: int &
    :rtype: int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :param Index1:
    :type Index1: int
    :param Index2:
    :type Index2: int
    :rtype: bool

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args):
    """
    :param thePolyh:
    :type thePolyh: IntCurveSurface_ThePolyhedronOfHInter &
    :rtype: void

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args)

class IntCurveSurface_TheQuadCurvExactHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheQuadCurvExactHInter(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_IsDone(self, *args)


    def NbRoots(self, *args):
        """
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbRoots(self, *args)


    def Root(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Root(self, *args)


    def NbIntervals(self, *args):
        """
        :rtype: int

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        :param Index:
        :type Index: int
        :param U1:
        :type U1: float &
        :param U2:
        :type U2: float &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Intervals(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheQuadCurvExactHInter.IsDone = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_IsDone, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter.NbRoots = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbRoots, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter.Root = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Root, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter.NbIntervals = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbIntervals, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter.Intervals = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Intervals, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter__kill_pointed, None, IntCurveSurface_TheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_swigregister
IntCurveSurface_TheQuadCurvExactHInter_swigregister(IntCurveSurface_TheQuadCurvExactHInter)

class IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Q:
        :type Q: IntSurf_Quadric &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter(*args))

    def Value(self, *args):
        """
        :param Param:
        :type Param: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Value(self, *args)


    def Derivative(self, *args):
        """
        :param Param:
        :type Param: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Derivative(self, *args)


    def Values(self, *args):
        """
        :param Param:
        :type Param: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter.Value = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Value, None, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter.Derivative = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Derivative, None, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter.Values = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_Values, None, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter__kill_pointed, None, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister(IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)

class IntCurveSurface_HInter(IntCurveSurface_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntCurveSurface.IntCurveSurface_HInter_swiginit(self, _IntCurveSurface.new_IntCurveSurface_HInter(*args))

    def Perform(self, *args):
        """
        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param Polygon:
        :type Polygon: IntCurveSurface_ThePolygonOfHInter &
        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param ThePolygon:
        :type ThePolygon: IntCurveSurface_ThePolygonOfHInter &
        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :param Polyhedron:
        :type Polyhedron: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param ThePolygon:
        :type ThePolygon: IntCurveSurface_ThePolygonOfHInter &
        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :param Polyhedron:
        :type Polyhedron: IntCurveSurface_ThePolyhedronOfHInter &
        :param BndBSB:
        :type BndBSB: Bnd_BoundSortBox &
        :rtype: None

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param Surface:
        :type Surface: Handle_Adaptor3d_HSurface &
        :param Polyhedron:
        :type Polyhedron: IntCurveSurface_ThePolyhedronOfHInter &
        :rtype: None

        """
        return _IntCurveSurface.IntCurveSurface_HInter_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntCurveSurface_HInter.Perform = new_instancemethod(_IntCurveSurface.IntCurveSurface_HInter_Perform, None, IntCurveSurface_HInter)
IntCurveSurface_HInter._kill_pointed = new_instancemethod(_IntCurveSurface.IntCurveSurface_HInter__kill_pointed, None, IntCurveSurface_HInter)
IntCurveSurface_HInter_swigregister = _IntCurveSurface.IntCurveSurface_HInter_swigregister
IntCurveSurface_HInter_swigregister(IntCurveSurface_HInter)



