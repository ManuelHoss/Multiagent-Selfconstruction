# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Storage.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Storage', [dirname(__file__)])
        except ImportError:
            import _Storage
            return _Storage
        if fp is not None:
            try:
                _mod = imp.load_module('_Storage', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Storage = swig_import_helper()
    del swig_import_helper
else:
    import _Storage
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Storage.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Storage.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Storage.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Storage.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Storage.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Storage.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Storage.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Storage.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Storage.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Storage.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Storage.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Storage.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Storage.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Storage.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Storage.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Storage.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Storage.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Storage.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TCollection
import OCC.Standard
import OCC.MMgt
import OCC.TColStd

_Storage.Storage_VSOk_swigconstant(_Storage)
Storage_VSOk = _Storage.Storage_VSOk

_Storage.Storage_VSOpenError_swigconstant(_Storage)
Storage_VSOpenError = _Storage.Storage_VSOpenError

_Storage.Storage_VSModeError_swigconstant(_Storage)
Storage_VSModeError = _Storage.Storage_VSModeError

_Storage.Storage_VSCloseError_swigconstant(_Storage)
Storage_VSCloseError = _Storage.Storage_VSCloseError

_Storage.Storage_VSAlreadyOpen_swigconstant(_Storage)
Storage_VSAlreadyOpen = _Storage.Storage_VSAlreadyOpen

_Storage.Storage_VSNotOpen_swigconstant(_Storage)
Storage_VSNotOpen = _Storage.Storage_VSNotOpen

_Storage.Storage_VSSectionNotFound_swigconstant(_Storage)
Storage_VSSectionNotFound = _Storage.Storage_VSSectionNotFound

_Storage.Storage_VSWriteError_swigconstant(_Storage)
Storage_VSWriteError = _Storage.Storage_VSWriteError

_Storage.Storage_VSFormatError_swigconstant(_Storage)
Storage_VSFormatError = _Storage.Storage_VSFormatError

_Storage.Storage_VSUnknownType_swigconstant(_Storage)
Storage_VSUnknownType = _Storage.Storage_VSUnknownType

_Storage.Storage_VSTypeMismatch_swigconstant(_Storage)
Storage_VSTypeMismatch = _Storage.Storage_VSTypeMismatch

_Storage.Storage_VSInternalError_swigconstant(_Storage)
Storage_VSInternalError = _Storage.Storage_VSInternalError

_Storage.Storage_VSExtCharParityError_swigconstant(_Storage)
Storage_VSExtCharParityError = _Storage.Storage_VSExtCharParityError

_Storage.Storage_VSWrongFileDriver_swigconstant(_Storage)
Storage_VSWrongFileDriver = _Storage.Storage_VSWrongFileDriver

_Storage.Storage_VSNone_swigconstant(_Storage)
Storage_VSNone = _Storage.Storage_VSNone

_Storage.Storage_VSRead_swigconstant(_Storage)
Storage_VSRead = _Storage.Storage_VSRead

_Storage.Storage_VSWrite_swigconstant(_Storage)
Storage_VSWrite = _Storage.Storage_VSWrite

_Storage.Storage_VSReadWrite_swigconstant(_Storage)
Storage_VSReadWrite = _Storage.Storage_VSReadWrite

_Storage.Storage_AddSolve_swigconstant(_Storage)
Storage_AddSolve = _Storage.Storage_AddSolve

_Storage.Storage_WriteSolve_swigconstant(_Storage)
Storage_WriteSolve = _Storage.Storage_WriteSolve

_Storage.Storage_ReadSolve_swigconstant(_Storage)
Storage_ReadSolve = _Storage.Storage_ReadSolve
class storage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Version(*args):
        """
        * returns the version of Storage's read/write routines

        :rtype: TCollection_AsciiString

        """
        return _Storage.storage_Version(*args)

    Version = staticmethod(Version)

    def __init__(self):
        _Storage.storage_swiginit(self, _Storage.new_storage())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


storage._kill_pointed = new_instancemethod(_Storage.storage__kill_pointed, None, storage)
storage_swigregister = _Storage.storage_swigregister
storage_swigregister(storage)

def storage_Version(*args):
    """
    * returns the version of Storage's read/write routines

    :rtype: TCollection_AsciiString

    """
    return _Storage.storage_Version(*args)

class Storage_ArrayOfCallBack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Storage_CallBack &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Storage.Storage_ArrayOfCallBack_swiginit(self, _Storage.new_Storage_ArrayOfCallBack(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_ArrayOfCallBack_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_ArrayOfCallBack_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_ArrayOfCallBack_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_ArrayOfCallBack &
        :rtype: Storage_ArrayOfCallBack

        """
        return _Storage.Storage_ArrayOfCallBack_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_ArrayOfCallBack &
        :rtype: Storage_ArrayOfCallBack

        """
        return _Storage.Storage_ArrayOfCallBack_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfCallBack_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfCallBack_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfCallBack_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_ArrayOfCallBack_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_ArrayOfCallBack_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_ArrayOfCallBack_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_ArrayOfCallBack.Init = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Init, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Destroy = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Destroy, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.IsAllocated = new_instancemethod(_Storage.Storage_ArrayOfCallBack_IsAllocated, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Assign = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Assign, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Set = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Set, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Length = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Length, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Lower = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Lower, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Upper = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Upper, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.SetValue = new_instancemethod(_Storage.Storage_ArrayOfCallBack_SetValue, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Value = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Value, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.ChangeValue = new_instancemethod(_Storage.Storage_ArrayOfCallBack_ChangeValue, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_ArrayOfCallBack__kill_pointed, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack_swigregister = _Storage.Storage_ArrayOfCallBack_swigregister
Storage_ArrayOfCallBack_swigregister(Storage_ArrayOfCallBack)

class Storage_ArrayOfSchema(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Storage_Schema &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Storage.Storage_ArrayOfSchema_swiginit(self, _Storage.new_Storage_ArrayOfSchema(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Storage_Schema &
        :rtype: None

        """
        return _Storage.Storage_ArrayOfSchema_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_ArrayOfSchema_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_ArrayOfSchema_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_ArrayOfSchema &
        :rtype: Storage_ArrayOfSchema

        """
        return _Storage.Storage_ArrayOfSchema_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_ArrayOfSchema &
        :rtype: Storage_ArrayOfSchema

        """
        return _Storage.Storage_ArrayOfSchema_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfSchema_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfSchema_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_ArrayOfSchema_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Storage_Schema &
        :rtype: None

        """
        return _Storage.Storage_ArrayOfSchema_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Schema

        """
        return _Storage.Storage_ArrayOfSchema_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Schema

        """
        return _Storage.Storage_ArrayOfSchema_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_ArrayOfSchema.Init = new_instancemethod(_Storage.Storage_ArrayOfSchema_Init, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Destroy = new_instancemethod(_Storage.Storage_ArrayOfSchema_Destroy, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.IsAllocated = new_instancemethod(_Storage.Storage_ArrayOfSchema_IsAllocated, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Assign = new_instancemethod(_Storage.Storage_ArrayOfSchema_Assign, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Set = new_instancemethod(_Storage.Storage_ArrayOfSchema_Set, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Length = new_instancemethod(_Storage.Storage_ArrayOfSchema_Length, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Lower = new_instancemethod(_Storage.Storage_ArrayOfSchema_Lower, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Upper = new_instancemethod(_Storage.Storage_ArrayOfSchema_Upper, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.SetValue = new_instancemethod(_Storage.Storage_ArrayOfSchema_SetValue, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Value = new_instancemethod(_Storage.Storage_ArrayOfSchema_Value, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.ChangeValue = new_instancemethod(_Storage.Storage_ArrayOfSchema_ChangeValue, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema._kill_pointed = new_instancemethod(_Storage.Storage_ArrayOfSchema__kill_pointed, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema_swigregister = _Storage.Storage_ArrayOfSchema_swigregister
Storage_ArrayOfSchema_swigregister(Storage_ArrayOfSchema)

class Storage_BaseDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Delete(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_BaseDriver_Delete(self, *args)


    def Open(self, *args):
        """
        :param aName:
        :type aName: TCollection_AsciiString &
        :param aMode:
        :type aMode: Storage_OpenMode
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_Open(self, *args)


    def Name(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_BaseDriver_Name(self, *args)


    def OpenMode(self, *args):
        """
        :rtype: Storage_OpenMode

        """
        return _Storage.Storage_BaseDriver_OpenMode(self, *args)


    def IsEnd(self, *args):
        """
        * returns True if we are at end of the stream

        :rtype: bool

        """
        return _Storage.Storage_BaseDriver_IsEnd(self, *args)


    def Tell(self, *args):
        """
        * return position in the file. Return -1 upon error.

        :rtype: Storage_Position

        """
        return _Storage.Storage_BaseDriver_Tell(self, *args)


    def BeginWriteInfoSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteInfoSection(self, *args)


    def WriteInfo(self, *args):
        """
        :param nbObj:
        :type nbObj: int
        :param dbVersion:
        :type dbVersion: TCollection_AsciiString &
        :param date:
        :type date: TCollection_AsciiString &
        :param schemaName:
        :type schemaName: TCollection_AsciiString &
        :param schemaVersion:
        :type schemaVersion: TCollection_AsciiString &
        :param appName:
        :type appName: TCollection_ExtendedString &
        :param appVersion:
        :type appVersion: TCollection_AsciiString &
        :param objectType:
        :type objectType: TCollection_ExtendedString &
        :param userInfo:
        :type userInfo: TColStd_SequenceOfAsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WriteInfo(self, *args)


    def EndWriteInfoSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteInfoSection(self, *args)


    def BeginReadInfoSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadInfoSection(self, *args)


    def ReadInfo(self, *args):
        """
        :param nbObj:
        :type nbObj: int &
        :param dbVersion:
        :type dbVersion: TCollection_AsciiString &
        :param date:
        :type date: TCollection_AsciiString &
        :param schemaName:
        :type schemaName: TCollection_AsciiString &
        :param schemaVersion:
        :type schemaVersion: TCollection_AsciiString &
        :param appName:
        :type appName: TCollection_ExtendedString &
        :param appVersion:
        :type appVersion: TCollection_AsciiString &
        :param objectType:
        :type objectType: TCollection_ExtendedString &
        :param userInfo:
        :type userInfo: TColStd_SequenceOfAsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadInfo(self, *args)


    def EndReadInfoSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadInfoSection(self, *args)


    def BeginWriteCommentSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteCommentSection(self, *args)


    def WriteComment(self, *args):
        """
        :param userComments:
        :type userComments: TColStd_SequenceOfExtendedString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WriteComment(self, *args)


    def EndWriteCommentSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteCommentSection(self, *args)


    def BeginReadCommentSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadCommentSection(self, *args)


    def ReadComment(self, *args):
        """
        :param userComments:
        :type userComments: TColStd_SequenceOfExtendedString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadComment(self, *args)


    def EndReadCommentSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadCommentSection(self, *args)


    def BeginWriteTypeSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteTypeSection(self, *args)


    def SetTypeSectionSize(self, *args):
        """
        :param aSize:
        :type aSize: int
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_SetTypeSectionSize(self, *args)


    def WriteTypeInformations(self, *args):
        """
        :param typeNum:
        :type typeNum: int
        :param typeName:
        :type typeName: TCollection_AsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WriteTypeInformations(self, *args)


    def EndWriteTypeSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteTypeSection(self, *args)


    def BeginReadTypeSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadTypeSection(self, *args)


    def TypeSectionSize(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_BaseDriver_TypeSectionSize(self, *args)


    def ReadTypeInformations(self, *args):
        """
        :param typeNum:
        :type typeNum: int &
        :param typeName:
        :type typeName: TCollection_AsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadTypeInformations(self, *args)


    def EndReadTypeSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadTypeSection(self, *args)


    def BeginWriteRootSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteRootSection(self, *args)


    def SetRootSectionSize(self, *args):
        """
        :param aSize:
        :type aSize: int
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_SetRootSectionSize(self, *args)


    def WriteRoot(self, *args):
        """
        :param rootName:
        :type rootName: TCollection_AsciiString &
        :param aRef:
        :type aRef: int
        :param aType:
        :type aType: TCollection_AsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WriteRoot(self, *args)


    def EndWriteRootSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteRootSection(self, *args)


    def BeginReadRootSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadRootSection(self, *args)


    def RootSectionSize(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_BaseDriver_RootSectionSize(self, *args)


    def ReadRoot(self, *args):
        """
        :param rootName:
        :type rootName: TCollection_AsciiString &
        :param aRef:
        :type aRef: int &
        :param aType:
        :type aType: TCollection_AsciiString &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadRoot(self, *args)


    def EndReadRootSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadRootSection(self, *args)


    def BeginWriteRefSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteRefSection(self, *args)


    def SetRefSectionSize(self, *args):
        """
        :param aSize:
        :type aSize: int
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_SetRefSectionSize(self, *args)


    def WriteReferenceType(self, *args):
        """
        :param reference:
        :type reference: int
        :param typeNum:
        :type typeNum: int
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WriteReferenceType(self, *args)


    def EndWriteRefSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteRefSection(self, *args)


    def BeginReadRefSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadRefSection(self, *args)


    def RefSectionSize(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_BaseDriver_RefSectionSize(self, *args)


    def ReadReferenceType(self, *args):
        """
        :param reference:
        :type reference: int &
        :param typeNum:
        :type typeNum: int &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadReferenceType(self, *args)


    def EndReadRefSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadRefSection(self, *args)


    def BeginWriteDataSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginWriteDataSection(self, *args)


    def WritePersistentObjectHeader(self, *args):
        """
        :param aRef:
        :type aRef: int
        :param aType:
        :type aType: int
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_WritePersistentObjectHeader(self, *args)


    def BeginWritePersistentObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_BeginWritePersistentObjectData(self, *args)


    def BeginWriteObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_BeginWriteObjectData(self, *args)


    def EndWriteObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_EndWriteObjectData(self, *args)


    def EndWritePersistentObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_EndWritePersistentObjectData(self, *args)


    def EndWriteDataSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndWriteDataSection(self, *args)


    def BeginReadDataSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_BeginReadDataSection(self, *args)


    def ReadPersistentObjectHeader(self, *args):
        """
        :param aRef:
        :type aRef: int &
        :param aType:
        :type aType: int &
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_ReadPersistentObjectHeader(self, *args)


    def BeginReadPersistentObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_BeginReadPersistentObjectData(self, *args)


    def BeginReadObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_BeginReadObjectData(self, *args)


    def EndReadObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_EndReadObjectData(self, *args)


    def EndReadPersistentObjectData(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_EndReadPersistentObjectData(self, *args)


    def EndReadDataSection(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_EndReadDataSection(self, *args)


    def SkipObject(self, *args):
        """
        :rtype: void

        """
        return _Storage.Storage_BaseDriver_SkipObject(self, *args)


    def PutReference(self, *args):
        """
        :param aValue:
        :type aValue: int
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutReference(self, *args)


    def PutCharacter(self, *args):
        """
        :param aValue:
        :type aValue: Standard_Character
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutCharacter(self, *args)


    def PutExtCharacter(self, *args):
        """
        :param aValue:
        :type aValue: Standard_ExtCharacter
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutExtCharacter(self, *args)


    def PutInteger(self, *args):
        """
        :param aValue:
        :type aValue: int
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutInteger(self, *args)


    def PutBoolean(self, *args):
        """
        :param aValue:
        :type aValue: bool
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutBoolean(self, *args)


    def PutReal(self, *args):
        """
        :param aValue:
        :type aValue: float
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutReal(self, *args)


    def PutShortReal(self, *args):
        """
        :param aValue:
        :type aValue: Standard_ShortReal
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_PutShortReal(self, *args)


    def GetReference(self, *args):
        """
        :param aValue:
        :type aValue: int &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetReference(self, *args)


    def GetCharacter(self, *args):
        """
        :param aValue:
        :type aValue: Standard_Character &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetCharacter(self, *args)


    def GetExtCharacter(self, *args):
        """
        :param aValue:
        :type aValue: Standard_ExtCharacter &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetExtCharacter(self, *args)


    def GetInteger(self, *args):
        """
        :param aValue:
        :type aValue: int &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        :param aValue:
        :type aValue: bool
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetBoolean(self, *args)


    def GetReal(self, *args):
        """
        :param aValue:
        :type aValue: float &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetReal(self, *args)


    def GetShortReal(self, *args):
        """
        :param aValue:
        :type aValue: Standard_ShortReal &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver_GetShortReal(self, *args)


    def __rshift__(self, *args):
        """
        :param aValue:
        :type aValue: Standard_Character &
        :rtype: Storage_BaseDriver

        :param aValue:
        :type aValue: Standard_ExtCharacter &
        :rtype: Storage_BaseDriver

        :param aValue:
        :type aValue: int &
        :rtype: Storage_BaseDriver

        :param aValue:
        :type aValue: bool
        :rtype: Storage_BaseDriver

        :param aValue:
        :type aValue: float &
        :rtype: Storage_BaseDriver

        :param aValue:
        :type aValue: Standard_ShortReal &
        :rtype: Storage_BaseDriver

        """
        return _Storage.Storage_BaseDriver___rshift__(self, *args)


    def Close(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_BaseDriver_Close(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_BaseDriver.Delete = new_instancemethod(_Storage.Storage_BaseDriver_Delete, None, Storage_BaseDriver)
Storage_BaseDriver.Open = new_instancemethod(_Storage.Storage_BaseDriver_Open, None, Storage_BaseDriver)
Storage_BaseDriver.Name = new_instancemethod(_Storage.Storage_BaseDriver_Name, None, Storage_BaseDriver)
Storage_BaseDriver.OpenMode = new_instancemethod(_Storage.Storage_BaseDriver_OpenMode, None, Storage_BaseDriver)
Storage_BaseDriver.IsEnd = new_instancemethod(_Storage.Storage_BaseDriver_IsEnd, None, Storage_BaseDriver)
Storage_BaseDriver.Tell = new_instancemethod(_Storage.Storage_BaseDriver_Tell, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteInfoSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteInfoSection, None, Storage_BaseDriver)
Storage_BaseDriver.WriteInfo = new_instancemethod(_Storage.Storage_BaseDriver_WriteInfo, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteInfoSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteInfoSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadInfoSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadInfoSection, None, Storage_BaseDriver)
Storage_BaseDriver.ReadInfo = new_instancemethod(_Storage.Storage_BaseDriver_ReadInfo, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadInfoSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadInfoSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteCommentSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteCommentSection, None, Storage_BaseDriver)
Storage_BaseDriver.WriteComment = new_instancemethod(_Storage.Storage_BaseDriver_WriteComment, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteCommentSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteCommentSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadCommentSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadCommentSection, None, Storage_BaseDriver)
Storage_BaseDriver.ReadComment = new_instancemethod(_Storage.Storage_BaseDriver_ReadComment, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadCommentSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadCommentSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteTypeSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteTypeSection, None, Storage_BaseDriver)
Storage_BaseDriver.SetTypeSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_SetTypeSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.WriteTypeInformations = new_instancemethod(_Storage.Storage_BaseDriver_WriteTypeInformations, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteTypeSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteTypeSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadTypeSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadTypeSection, None, Storage_BaseDriver)
Storage_BaseDriver.TypeSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_TypeSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.ReadTypeInformations = new_instancemethod(_Storage.Storage_BaseDriver_ReadTypeInformations, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadTypeSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadTypeSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteRootSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteRootSection, None, Storage_BaseDriver)
Storage_BaseDriver.SetRootSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_SetRootSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.WriteRoot = new_instancemethod(_Storage.Storage_BaseDriver_WriteRoot, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteRootSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteRootSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadRootSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadRootSection, None, Storage_BaseDriver)
Storage_BaseDriver.RootSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_RootSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.ReadRoot = new_instancemethod(_Storage.Storage_BaseDriver_ReadRoot, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadRootSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadRootSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteRefSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteRefSection, None, Storage_BaseDriver)
Storage_BaseDriver.SetRefSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_SetRefSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.WriteReferenceType = new_instancemethod(_Storage.Storage_BaseDriver_WriteReferenceType, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteRefSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteRefSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadRefSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadRefSection, None, Storage_BaseDriver)
Storage_BaseDriver.RefSectionSize = new_instancemethod(_Storage.Storage_BaseDriver_RefSectionSize, None, Storage_BaseDriver)
Storage_BaseDriver.ReadReferenceType = new_instancemethod(_Storage.Storage_BaseDriver_ReadReferenceType, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadRefSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadRefSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteDataSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteDataSection, None, Storage_BaseDriver)
Storage_BaseDriver.WritePersistentObjectHeader = new_instancemethod(_Storage.Storage_BaseDriver_WritePersistentObjectHeader, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWritePersistentObjectData = new_instancemethod(_Storage.Storage_BaseDriver_BeginWritePersistentObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.BeginWriteObjectData = new_instancemethod(_Storage.Storage_BaseDriver_BeginWriteObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteObjectData = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndWritePersistentObjectData = new_instancemethod(_Storage.Storage_BaseDriver_EndWritePersistentObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndWriteDataSection = new_instancemethod(_Storage.Storage_BaseDriver_EndWriteDataSection, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadDataSection = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadDataSection, None, Storage_BaseDriver)
Storage_BaseDriver.ReadPersistentObjectHeader = new_instancemethod(_Storage.Storage_BaseDriver_ReadPersistentObjectHeader, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadPersistentObjectData = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadPersistentObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.BeginReadObjectData = new_instancemethod(_Storage.Storage_BaseDriver_BeginReadObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadObjectData = new_instancemethod(_Storage.Storage_BaseDriver_EndReadObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadPersistentObjectData = new_instancemethod(_Storage.Storage_BaseDriver_EndReadPersistentObjectData, None, Storage_BaseDriver)
Storage_BaseDriver.EndReadDataSection = new_instancemethod(_Storage.Storage_BaseDriver_EndReadDataSection, None, Storage_BaseDriver)
Storage_BaseDriver.SkipObject = new_instancemethod(_Storage.Storage_BaseDriver_SkipObject, None, Storage_BaseDriver)
Storage_BaseDriver.PutReference = new_instancemethod(_Storage.Storage_BaseDriver_PutReference, None, Storage_BaseDriver)
Storage_BaseDriver.PutCharacter = new_instancemethod(_Storage.Storage_BaseDriver_PutCharacter, None, Storage_BaseDriver)
Storage_BaseDriver.PutExtCharacter = new_instancemethod(_Storage.Storage_BaseDriver_PutExtCharacter, None, Storage_BaseDriver)
Storage_BaseDriver.PutInteger = new_instancemethod(_Storage.Storage_BaseDriver_PutInteger, None, Storage_BaseDriver)
Storage_BaseDriver.PutBoolean = new_instancemethod(_Storage.Storage_BaseDriver_PutBoolean, None, Storage_BaseDriver)
Storage_BaseDriver.PutReal = new_instancemethod(_Storage.Storage_BaseDriver_PutReal, None, Storage_BaseDriver)
Storage_BaseDriver.PutShortReal = new_instancemethod(_Storage.Storage_BaseDriver_PutShortReal, None, Storage_BaseDriver)
Storage_BaseDriver.GetReference = new_instancemethod(_Storage.Storage_BaseDriver_GetReference, None, Storage_BaseDriver)
Storage_BaseDriver.GetCharacter = new_instancemethod(_Storage.Storage_BaseDriver_GetCharacter, None, Storage_BaseDriver)
Storage_BaseDriver.GetExtCharacter = new_instancemethod(_Storage.Storage_BaseDriver_GetExtCharacter, None, Storage_BaseDriver)
Storage_BaseDriver.GetInteger = new_instancemethod(_Storage.Storage_BaseDriver_GetInteger, None, Storage_BaseDriver)
Storage_BaseDriver.GetBoolean = new_instancemethod(_Storage.Storage_BaseDriver_GetBoolean, None, Storage_BaseDriver)
Storage_BaseDriver.GetReal = new_instancemethod(_Storage.Storage_BaseDriver_GetReal, None, Storage_BaseDriver)
Storage_BaseDriver.GetShortReal = new_instancemethod(_Storage.Storage_BaseDriver_GetShortReal, None, Storage_BaseDriver)
Storage_BaseDriver.__rshift__ = new_instancemethod(_Storage.Storage_BaseDriver___rshift__, None, Storage_BaseDriver)
Storage_BaseDriver.Close = new_instancemethod(_Storage.Storage_BaseDriver_Close, None, Storage_BaseDriver)
Storage_BaseDriver._kill_pointed = new_instancemethod(_Storage.Storage_BaseDriver__kill_pointed, None, Storage_BaseDriver)
Storage_BaseDriver_swigregister = _Storage.Storage_BaseDriver_swigregister
Storage_BaseDriver_swigregister(Storage_BaseDriver)

class Storage_CallBack(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New(self, *args):
        """
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_CallBack_New(self, *args)


    def Add(self, *args):
        """
        :param aPers:
        :type aPers: Handle_Standard_Persistent &
        :param aSchema:
        :type aSchema: Handle_Storage_Schema &
        :rtype: void

        """
        return _Storage.Storage_CallBack_Add(self, *args)


    def Write(self, *args):
        """
        :param aPers:
        :type aPers: Handle_Standard_Persistent &
        :param aDriver:
        :type aDriver: Storage_BaseDriver &
        :param aSchema:
        :type aSchema: Handle_Storage_Schema &
        :rtype: void

        """
        return _Storage.Storage_CallBack_Write(self, *args)


    def Read(self, *args):
        """
        :param aPers:
        :type aPers: Handle_Standard_Persistent &
        :param aDriver:
        :type aDriver: Storage_BaseDriver &
        :param aSchema:
        :type aSchema: Handle_Storage_Schema &
        :rtype: void

        """
        return _Storage.Storage_CallBack_Read(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_CallBack self)"""
        return _Storage.Storage_CallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_CallBack self) -> Handle_Storage_CallBack"""
        return _Storage.Storage_CallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_CallBack.New = new_instancemethod(_Storage.Storage_CallBack_New, None, Storage_CallBack)
Storage_CallBack.Add = new_instancemethod(_Storage.Storage_CallBack_Add, None, Storage_CallBack)
Storage_CallBack.Write = new_instancemethod(_Storage.Storage_CallBack_Write, None, Storage_CallBack)
Storage_CallBack.Read = new_instancemethod(_Storage.Storage_CallBack_Read, None, Storage_CallBack)
Storage_CallBack._kill_pointed = new_instancemethod(_Storage.Storage_CallBack__kill_pointed, None, Storage_CallBack)
Storage_CallBack.GetHandle = new_instancemethod(_Storage.Storage_CallBack_GetHandle, None, Storage_CallBack)
Storage_CallBack_swigregister = _Storage.Storage_CallBack_swigregister
Storage_CallBack_swigregister(Storage_CallBack)

class Handle_Storage_CallBack(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_CallBack_swiginit(self, _Storage.new_Handle_Storage_CallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_CallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_CallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_CallBack_Nullify, None, Handle_Storage_CallBack)
Handle_Storage_CallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_CallBack_IsNull, None, Handle_Storage_CallBack)
Handle_Storage_CallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_CallBack_GetObject, None, Handle_Storage_CallBack)
Handle_Storage_CallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_CallBack__kill_pointed, None, Handle_Storage_CallBack)
Handle_Storage_CallBack_swigregister = _Storage.Handle_Storage_CallBack_swigregister
Handle_Storage_CallBack_swigregister(Handle_Storage_CallBack)

def Handle_Storage_CallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_CallBack_DownCast(AnObject)
Handle_Storage_CallBack_DownCast = _Storage.Handle_Storage_CallBack_DownCast

class Storage_Data(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty set of data. You explicitly create a Storage_Data object when preparing the set of objects to be stored together in a container (for example, in a file). Then use the function AddRoot to add persistent objects to the set of data. A Storage_Data object is also returned by the Read function of a Storage_Schema storage/retrieval algorithm. Use the functions NumberOfRoots and Roots to find the roots which were stored in the read container.

        :rtype: None

        """
        _Storage.Storage_Data_swiginit(self, _Storage.new_Storage_Data(*args))

    def ErrorStatus(self, *args):
        """
        * Returns Storage_VSOk if - the last storage operation performed with the function Read, or - the last retrieval operation performed with the function Write by a Storage_Schema algorithm, on this set of data was successful. If the storage or retrieval operation was not performed, the returned error status indicates the reason why the operation failed. The algorithm stops its analysis at the first detected error

        :rtype: Storage_Error

        """
        return _Storage.Storage_Data_ErrorStatus(self, *args)


    def ClearErrorStatus(self, *args):
        """
        * Clears the error status positioned either by: - the last storage operation performed with the Read function, or - the last retrieval operation performed with the Write function by a Storage_Schema algorithm, on this set of data. This error status may be read by the function ErrorStatus.

        :rtype: None

        """
        return _Storage.Storage_Data_ClearErrorStatus(self, *args)


    def ErrorStatusExtension(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_ErrorStatusExtension(self, *args)


    def CreationDate(self, *args):
        """
        * return the creation date

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_CreationDate(self, *args)


    def StorageVersion(self, *args):
        """
        * return the Storage package version

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_StorageVersion(self, *args)


    def SchemaVersion(self, *args):
        """
        * get the version of the schema

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_SchemaVersion(self, *args)


    def SchemaName(self, *args):
        """
        * get the schema's name

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_SchemaName(self, *args)


    def SetApplicationVersion(self, *args):
        """
        * set the version of the application

        :param aVersion:
        :type aVersion: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Data_SetApplicationVersion(self, *args)


    def ApplicationVersion(self, *args):
        """
        * get the version of the application

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Data_ApplicationVersion(self, *args)


    def SetApplicationName(self, *args):
        """
        * set the name of the application

        :param aName:
        :type aName: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_Data_SetApplicationName(self, *args)


    def ApplicationName(self, *args):
        """
        * get the name of the application

        :rtype: TCollection_ExtendedString

        """
        return _Storage.Storage_Data_ApplicationName(self, *args)


    def SetDataType(self, *args):
        """
        * set the data type

        :param aType:
        :type aType: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_Data_SetDataType(self, *args)


    def DataType(self, *args):
        """
        * returns data type

        :rtype: TCollection_ExtendedString

        """
        return _Storage.Storage_Data_DataType(self, *args)


    def AddToUserInfo(self, *args):
        """
        * add <theUserInfo> to the user informations

        :param anInfo:
        :type anInfo: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Data_AddToUserInfo(self, *args)


    def UserInfo(self, *args):
        """
        * return the user informations

        :rtype: TColStd_SequenceOfAsciiString

        """
        return _Storage.Storage_Data_UserInfo(self, *args)


    def AddToComments(self, *args):
        """
        * add <theUserInfo> to the user informations

        :param aComment:
        :type aComment: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_Data_AddToComments(self, *args)


    def Comments(self, *args):
        """
        * return the user informations

        :rtype: TColStd_SequenceOfExtendedString

        """
        return _Storage.Storage_Data_Comments(self, *args)


    def NumberOfObjects(self, *args):
        """
        * the the number of persistent objects Return: the number of persistent objects readed

        :rtype: int

        """
        return _Storage.Storage_Data_NumberOfObjects(self, *args)


    def NumberOfRoots(self, *args):
        """
        * Returns the number of root objects in this set of data. - When preparing a storage operation, the result is the number of roots inserted into this set of data with the function AddRoot. - When retrieving an object, the result is the number of roots stored in the read container. Use the Roots function to get these roots in a sequence.

        :rtype: int

        """
        return _Storage.Storage_Data_NumberOfRoots(self, *args)


    def AddRoot(self, *args):
        """
        * add a persistent root to write. the name of the root is a driver reference number.

        :param anObject:
        :type anObject: Handle_Standard_Persistent &
        :rtype: None

        * Adds the root anObject to this set of data. The name of the root is aName if given; if not, it will be a reference number assigned by the driver when writing the set of data into the container. When naming the roots, it is easier to retrieve objects by significant references rather than by references without any semantic values.

        :param aName:
        :type aName: TCollection_AsciiString &
        :param anObject:
        :type anObject: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_Data_AddRoot(self, *args)


    def RemoveRoot(self, *args):
        """
        * Removes from this set of data the root object named aName. Warning Nothing is done if there is no root object whose name is aName in this set of data.

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Data_RemoveRoot(self, *args)


    def Roots(self, *args):
        """
        * Returns the roots of this set of data in a sequence. - When preparing a storage operation, the sequence contains the roots inserted into this set of data with the function AddRoot. - When retrieving an object, the sequence contains the roots stored in the container read. - An empty sequence is returned if there is no root in this set of data.

        :rtype: Handle_Storage_HSeqOfRoot

        """
        return _Storage.Storage_Data_Roots(self, *args)


    def Find(self, *args):
        """
        * Gives the root object whose name is aName in this set of data. The returned object is a Storage_Root object, from which the object it encapsulates may be extracted. Warning A null handle is returned if there is no root object whose name is aName in this set of data.

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_Data_Find(self, *args)


    def IsRoot(self, *args):
        """
        * returns Standard_True if <self> contains a root named <aName>

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_Data_IsRoot(self, *args)


    def NumberOfTypes(self, *args):
        """
        * Returns the number of types of objects used in this set of data.

        :rtype: int

        """
        return _Storage.Storage_Data_NumberOfTypes(self, *args)


    def IsType(self, *args):
        """
        * Returns true if this set of data contains an object of type aName. Persistent objects from this set of data must have types which are recognized by the Storage_Schema algorithm used to store or retrieve them.

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_Data_IsType(self, *args)


    def Types(self, *args):
        """
        * Gives the list of types of objects used in this set of data in a sequence.

        :rtype: Handle_TColStd_HSequenceOfAsciiString

        """
        return _Storage.Storage_Data_Types(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_Data self)"""
        return _Storage.Storage_Data__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_Data self) -> Handle_Storage_Data"""
        return _Storage.Storage_Data_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_Data.ErrorStatus = new_instancemethod(_Storage.Storage_Data_ErrorStatus, None, Storage_Data)
Storage_Data.ClearErrorStatus = new_instancemethod(_Storage.Storage_Data_ClearErrorStatus, None, Storage_Data)
Storage_Data.ErrorStatusExtension = new_instancemethod(_Storage.Storage_Data_ErrorStatusExtension, None, Storage_Data)
Storage_Data.CreationDate = new_instancemethod(_Storage.Storage_Data_CreationDate, None, Storage_Data)
Storage_Data.StorageVersion = new_instancemethod(_Storage.Storage_Data_StorageVersion, None, Storage_Data)
Storage_Data.SchemaVersion = new_instancemethod(_Storage.Storage_Data_SchemaVersion, None, Storage_Data)
Storage_Data.SchemaName = new_instancemethod(_Storage.Storage_Data_SchemaName, None, Storage_Data)
Storage_Data.SetApplicationVersion = new_instancemethod(_Storage.Storage_Data_SetApplicationVersion, None, Storage_Data)
Storage_Data.ApplicationVersion = new_instancemethod(_Storage.Storage_Data_ApplicationVersion, None, Storage_Data)
Storage_Data.SetApplicationName = new_instancemethod(_Storage.Storage_Data_SetApplicationName, None, Storage_Data)
Storage_Data.ApplicationName = new_instancemethod(_Storage.Storage_Data_ApplicationName, None, Storage_Data)
Storage_Data.SetDataType = new_instancemethod(_Storage.Storage_Data_SetDataType, None, Storage_Data)
Storage_Data.DataType = new_instancemethod(_Storage.Storage_Data_DataType, None, Storage_Data)
Storage_Data.AddToUserInfo = new_instancemethod(_Storage.Storage_Data_AddToUserInfo, None, Storage_Data)
Storage_Data.UserInfo = new_instancemethod(_Storage.Storage_Data_UserInfo, None, Storage_Data)
Storage_Data.AddToComments = new_instancemethod(_Storage.Storage_Data_AddToComments, None, Storage_Data)
Storage_Data.Comments = new_instancemethod(_Storage.Storage_Data_Comments, None, Storage_Data)
Storage_Data.NumberOfObjects = new_instancemethod(_Storage.Storage_Data_NumberOfObjects, None, Storage_Data)
Storage_Data.NumberOfRoots = new_instancemethod(_Storage.Storage_Data_NumberOfRoots, None, Storage_Data)
Storage_Data.AddRoot = new_instancemethod(_Storage.Storage_Data_AddRoot, None, Storage_Data)
Storage_Data.RemoveRoot = new_instancemethod(_Storage.Storage_Data_RemoveRoot, None, Storage_Data)
Storage_Data.Roots = new_instancemethod(_Storage.Storage_Data_Roots, None, Storage_Data)
Storage_Data.Find = new_instancemethod(_Storage.Storage_Data_Find, None, Storage_Data)
Storage_Data.IsRoot = new_instancemethod(_Storage.Storage_Data_IsRoot, None, Storage_Data)
Storage_Data.NumberOfTypes = new_instancemethod(_Storage.Storage_Data_NumberOfTypes, None, Storage_Data)
Storage_Data.IsType = new_instancemethod(_Storage.Storage_Data_IsType, None, Storage_Data)
Storage_Data.Types = new_instancemethod(_Storage.Storage_Data_Types, None, Storage_Data)
Storage_Data._kill_pointed = new_instancemethod(_Storage.Storage_Data__kill_pointed, None, Storage_Data)
Storage_Data.GetHandle = new_instancemethod(_Storage.Storage_Data_GetHandle, None, Storage_Data)
Storage_Data_swigregister = _Storage.Storage_Data_swigregister
Storage_Data_swigregister(Storage_Data)

class Handle_Storage_Data(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_Data_swiginit(self, _Storage.new_Handle_Storage_Data(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_Data_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_Data.Nullify = new_instancemethod(_Storage.Handle_Storage_Data_Nullify, None, Handle_Storage_Data)
Handle_Storage_Data.IsNull = new_instancemethod(_Storage.Handle_Storage_Data_IsNull, None, Handle_Storage_Data)
Handle_Storage_Data.GetObject = new_instancemethod(_Storage.Handle_Storage_Data_GetObject, None, Handle_Storage_Data)
Handle_Storage_Data._kill_pointed = new_instancemethod(_Storage.Handle_Storage_Data__kill_pointed, None, Handle_Storage_Data)
Handle_Storage_Data_swigregister = _Storage.Handle_Storage_Data_swigregister
Handle_Storage_Data_swigregister(Handle_Storage_Data)

def Handle_Storage_Data_DownCast(AnObject):
    return _Storage.Handle_Storage_Data_DownCast(AnObject)
Handle_Storage_Data_DownCast = _Storage.Handle_Storage_Data_DownCast

class Storage_DataMapIteratorOfMapOfCallBack(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Storage_MapOfCallBack &
        :rtype: None

        """
        _Storage.Storage_DataMapIteratorOfMapOfCallBack_swiginit(self, _Storage.new_Storage_DataMapIteratorOfMapOfCallBack(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: Storage_MapOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_DataMapIteratorOfMapOfCallBack_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_DataMapIteratorOfMapOfCallBack_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Storage_TypedCallBack

        """
        return _Storage.Storage_DataMapIteratorOfMapOfCallBack_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_DataMapIteratorOfMapOfCallBack.Initialize = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfCallBack_Initialize, None, Storage_DataMapIteratorOfMapOfCallBack)
Storage_DataMapIteratorOfMapOfCallBack.Key = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfCallBack_Key, None, Storage_DataMapIteratorOfMapOfCallBack)
Storage_DataMapIteratorOfMapOfCallBack.Value = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfCallBack_Value, None, Storage_DataMapIteratorOfMapOfCallBack)
Storage_DataMapIteratorOfMapOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfCallBack__kill_pointed, None, Storage_DataMapIteratorOfMapOfCallBack)
Storage_DataMapIteratorOfMapOfCallBack_swigregister = _Storage.Storage_DataMapIteratorOfMapOfCallBack_swigregister
Storage_DataMapIteratorOfMapOfCallBack_swigregister(Storage_DataMapIteratorOfMapOfCallBack)

class Storage_DataMapIteratorOfMapOfPers(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Storage_MapOfPers &
        :rtype: None

        """
        _Storage.Storage_DataMapIteratorOfMapOfPers_swiginit(self, _Storage.new_Storage_DataMapIteratorOfMapOfPers(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: Storage_MapOfPers &
        :rtype: None

        """
        return _Storage.Storage_DataMapIteratorOfMapOfPers_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_DataMapIteratorOfMapOfPers_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_DataMapIteratorOfMapOfPers_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_DataMapIteratorOfMapOfPers.Initialize = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfPers_Initialize, None, Storage_DataMapIteratorOfMapOfPers)
Storage_DataMapIteratorOfMapOfPers.Key = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfPers_Key, None, Storage_DataMapIteratorOfMapOfPers)
Storage_DataMapIteratorOfMapOfPers.Value = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfPers_Value, None, Storage_DataMapIteratorOfMapOfPers)
Storage_DataMapIteratorOfMapOfPers._kill_pointed = new_instancemethod(_Storage.Storage_DataMapIteratorOfMapOfPers__kill_pointed, None, Storage_DataMapIteratorOfMapOfPers)
Storage_DataMapIteratorOfMapOfPers_swigregister = _Storage.Storage_DataMapIteratorOfMapOfPers_swigregister
Storage_DataMapIteratorOfMapOfPers_swigregister(Storage_DataMapIteratorOfMapOfPers)

class Storage_DataMapNodeOfMapOfCallBack(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: Handle_Storage_TypedCallBack &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Storage.Storage_DataMapNodeOfMapOfCallBack_swiginit(self, _Storage.new_Storage_DataMapNodeOfMapOfCallBack(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_DataMapNodeOfMapOfCallBack_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Storage_TypedCallBack

        """
        return _Storage.Storage_DataMapNodeOfMapOfCallBack_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_DataMapNodeOfMapOfCallBack self)"""
        return _Storage.Storage_DataMapNodeOfMapOfCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_DataMapNodeOfMapOfCallBack self) -> Handle_Storage_DataMapNodeOfMapOfCallBack"""
        return _Storage.Storage_DataMapNodeOfMapOfCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_DataMapNodeOfMapOfCallBack.Key = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfCallBack_Key, None, Storage_DataMapNodeOfMapOfCallBack)
Storage_DataMapNodeOfMapOfCallBack.Value = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfCallBack_Value, None, Storage_DataMapNodeOfMapOfCallBack)
Storage_DataMapNodeOfMapOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfCallBack__kill_pointed, None, Storage_DataMapNodeOfMapOfCallBack)
Storage_DataMapNodeOfMapOfCallBack.GetHandle = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfCallBack_GetHandle, None, Storage_DataMapNodeOfMapOfCallBack)
Storage_DataMapNodeOfMapOfCallBack_swigregister = _Storage.Storage_DataMapNodeOfMapOfCallBack_swigregister
Storage_DataMapNodeOfMapOfCallBack_swigregister(Storage_DataMapNodeOfMapOfCallBack)

class Handle_Storage_DataMapNodeOfMapOfCallBack(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_swiginit(self, _Storage.new_Handle_Storage_DataMapNodeOfMapOfCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_DataMapNodeOfMapOfCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_Nullify, None, Handle_Storage_DataMapNodeOfMapOfCallBack)
Handle_Storage_DataMapNodeOfMapOfCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_IsNull, None, Handle_Storage_DataMapNodeOfMapOfCallBack)
Handle_Storage_DataMapNodeOfMapOfCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_GetObject, None, Handle_Storage_DataMapNodeOfMapOfCallBack)
Handle_Storage_DataMapNodeOfMapOfCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfCallBack__kill_pointed, None, Handle_Storage_DataMapNodeOfMapOfCallBack)
Handle_Storage_DataMapNodeOfMapOfCallBack_swigregister = _Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_swigregister
Handle_Storage_DataMapNodeOfMapOfCallBack_swigregister(Handle_Storage_DataMapNodeOfMapOfCallBack)

def Handle_Storage_DataMapNodeOfMapOfCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_DownCast(AnObject)
Handle_Storage_DataMapNodeOfMapOfCallBack_DownCast = _Storage.Handle_Storage_DataMapNodeOfMapOfCallBack_DownCast

class Storage_DataMapNodeOfMapOfPers(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: Handle_Storage_Root &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Storage.Storage_DataMapNodeOfMapOfPers_swiginit(self, _Storage.new_Storage_DataMapNodeOfMapOfPers(*args))

    def Key(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_DataMapNodeOfMapOfPers_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_DataMapNodeOfMapOfPers_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_DataMapNodeOfMapOfPers self)"""
        return _Storage.Storage_DataMapNodeOfMapOfPers__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_DataMapNodeOfMapOfPers self) -> Handle_Storage_DataMapNodeOfMapOfPers"""
        return _Storage.Storage_DataMapNodeOfMapOfPers_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_DataMapNodeOfMapOfPers.Key = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfPers_Key, None, Storage_DataMapNodeOfMapOfPers)
Storage_DataMapNodeOfMapOfPers.Value = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfPers_Value, None, Storage_DataMapNodeOfMapOfPers)
Storage_DataMapNodeOfMapOfPers._kill_pointed = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfPers__kill_pointed, None, Storage_DataMapNodeOfMapOfPers)
Storage_DataMapNodeOfMapOfPers.GetHandle = new_instancemethod(_Storage.Storage_DataMapNodeOfMapOfPers_GetHandle, None, Storage_DataMapNodeOfMapOfPers)
Storage_DataMapNodeOfMapOfPers_swigregister = _Storage.Storage_DataMapNodeOfMapOfPers_swigregister
Storage_DataMapNodeOfMapOfPers_swigregister(Storage_DataMapNodeOfMapOfPers)

class Handle_Storage_DataMapNodeOfMapOfPers(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_DataMapNodeOfMapOfPers_swiginit(self, _Storage.new_Handle_Storage_DataMapNodeOfMapOfPers(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_DataMapNodeOfMapOfPers_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_DataMapNodeOfMapOfPers.Nullify = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfPers_Nullify, None, Handle_Storage_DataMapNodeOfMapOfPers)
Handle_Storage_DataMapNodeOfMapOfPers.IsNull = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfPers_IsNull, None, Handle_Storage_DataMapNodeOfMapOfPers)
Handle_Storage_DataMapNodeOfMapOfPers.GetObject = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfPers_GetObject, None, Handle_Storage_DataMapNodeOfMapOfPers)
Handle_Storage_DataMapNodeOfMapOfPers._kill_pointed = new_instancemethod(_Storage.Handle_Storage_DataMapNodeOfMapOfPers__kill_pointed, None, Handle_Storage_DataMapNodeOfMapOfPers)
Handle_Storage_DataMapNodeOfMapOfPers_swigregister = _Storage.Handle_Storage_DataMapNodeOfMapOfPers_swigregister
Handle_Storage_DataMapNodeOfMapOfPers_swigregister(Handle_Storage_DataMapNodeOfMapOfPers)

def Handle_Storage_DataMapNodeOfMapOfPers_DownCast(AnObject):
    return _Storage.Handle_Storage_DataMapNodeOfMapOfPers_DownCast(AnObject)
Handle_Storage_DataMapNodeOfMapOfPers_DownCast = _Storage.Handle_Storage_DataMapNodeOfMapOfPers_DownCast

class Storage_HArrayOfCallBack(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Storage_CallBack &
        :rtype: None

        """
        _Storage.Storage_HArrayOfCallBack_swiginit(self, _Storage.new_Storage_HArrayOfCallBack(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_HArrayOfCallBack_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfCallBack_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfCallBack_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfCallBack_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_HArrayOfCallBack_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_HArrayOfCallBack_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_HArrayOfCallBack_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: Storage_ArrayOfCallBack

        """
        return _Storage.Storage_HArrayOfCallBack_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: Storage_ArrayOfCallBack

        """
        return _Storage.Storage_HArrayOfCallBack_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HArrayOfCallBack self)"""
        return _Storage.Storage_HArrayOfCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HArrayOfCallBack self) -> Handle_Storage_HArrayOfCallBack"""
        return _Storage.Storage_HArrayOfCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HArrayOfCallBack.Init = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Init, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.Length = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Length, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.Lower = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Lower, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.Upper = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Upper, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.SetValue = new_instancemethod(_Storage.Storage_HArrayOfCallBack_SetValue, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.Value = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Value, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.ChangeValue = new_instancemethod(_Storage.Storage_HArrayOfCallBack_ChangeValue, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.Array1 = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Array1, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.ChangeArray1 = new_instancemethod(_Storage.Storage_HArrayOfCallBack_ChangeArray1, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_HArrayOfCallBack__kill_pointed, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.GetHandle = new_instancemethod(_Storage.Storage_HArrayOfCallBack_GetHandle, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack_swigregister = _Storage.Storage_HArrayOfCallBack_swigregister
Storage_HArrayOfCallBack_swigregister(Storage_HArrayOfCallBack)

class Handle_Storage_HArrayOfCallBack(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HArrayOfCallBack_swiginit(self, _Storage.new_Handle_Storage_HArrayOfCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HArrayOfCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HArrayOfCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_HArrayOfCallBack_Nullify, None, Handle_Storage_HArrayOfCallBack)
Handle_Storage_HArrayOfCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_HArrayOfCallBack_IsNull, None, Handle_Storage_HArrayOfCallBack)
Handle_Storage_HArrayOfCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_HArrayOfCallBack_GetObject, None, Handle_Storage_HArrayOfCallBack)
Handle_Storage_HArrayOfCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HArrayOfCallBack__kill_pointed, None, Handle_Storage_HArrayOfCallBack)
Handle_Storage_HArrayOfCallBack_swigregister = _Storage.Handle_Storage_HArrayOfCallBack_swigregister
Handle_Storage_HArrayOfCallBack_swigregister(Handle_Storage_HArrayOfCallBack)

def Handle_Storage_HArrayOfCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_HArrayOfCallBack_DownCast(AnObject)
Handle_Storage_HArrayOfCallBack_DownCast = _Storage.Handle_Storage_HArrayOfCallBack_DownCast

class Storage_HArrayOfSchema(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Storage_Schema &
        :rtype: None

        """
        _Storage.Storage_HArrayOfSchema_swiginit(self, _Storage.new_Storage_HArrayOfSchema(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Storage_Schema &
        :rtype: None

        """
        return _Storage.Storage_HArrayOfSchema_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfSchema_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfSchema_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HArrayOfSchema_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Storage_Schema &
        :rtype: None

        """
        return _Storage.Storage_HArrayOfSchema_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Schema

        """
        return _Storage.Storage_HArrayOfSchema_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Schema

        """
        return _Storage.Storage_HArrayOfSchema_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: Storage_ArrayOfSchema

        """
        return _Storage.Storage_HArrayOfSchema_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: Storage_ArrayOfSchema

        """
        return _Storage.Storage_HArrayOfSchema_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HArrayOfSchema self)"""
        return _Storage.Storage_HArrayOfSchema__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HArrayOfSchema self) -> Handle_Storage_HArrayOfSchema"""
        return _Storage.Storage_HArrayOfSchema_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HArrayOfSchema.Init = new_instancemethod(_Storage.Storage_HArrayOfSchema_Init, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.Length = new_instancemethod(_Storage.Storage_HArrayOfSchema_Length, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.Lower = new_instancemethod(_Storage.Storage_HArrayOfSchema_Lower, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.Upper = new_instancemethod(_Storage.Storage_HArrayOfSchema_Upper, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.SetValue = new_instancemethod(_Storage.Storage_HArrayOfSchema_SetValue, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.Value = new_instancemethod(_Storage.Storage_HArrayOfSchema_Value, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.ChangeValue = new_instancemethod(_Storage.Storage_HArrayOfSchema_ChangeValue, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.Array1 = new_instancemethod(_Storage.Storage_HArrayOfSchema_Array1, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.ChangeArray1 = new_instancemethod(_Storage.Storage_HArrayOfSchema_ChangeArray1, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema._kill_pointed = new_instancemethod(_Storage.Storage_HArrayOfSchema__kill_pointed, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.GetHandle = new_instancemethod(_Storage.Storage_HArrayOfSchema_GetHandle, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema_swigregister = _Storage.Storage_HArrayOfSchema_swigregister
Storage_HArrayOfSchema_swigregister(Storage_HArrayOfSchema)

class Handle_Storage_HArrayOfSchema(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HArrayOfSchema_swiginit(self, _Storage.new_Handle_Storage_HArrayOfSchema(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HArrayOfSchema_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HArrayOfSchema.Nullify = new_instancemethod(_Storage.Handle_Storage_HArrayOfSchema_Nullify, None, Handle_Storage_HArrayOfSchema)
Handle_Storage_HArrayOfSchema.IsNull = new_instancemethod(_Storage.Handle_Storage_HArrayOfSchema_IsNull, None, Handle_Storage_HArrayOfSchema)
Handle_Storage_HArrayOfSchema.GetObject = new_instancemethod(_Storage.Handle_Storage_HArrayOfSchema_GetObject, None, Handle_Storage_HArrayOfSchema)
Handle_Storage_HArrayOfSchema._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HArrayOfSchema__kill_pointed, None, Handle_Storage_HArrayOfSchema)
Handle_Storage_HArrayOfSchema_swigregister = _Storage.Handle_Storage_HArrayOfSchema_swigregister
Handle_Storage_HArrayOfSchema_swigregister(Handle_Storage_HArrayOfSchema)

def Handle_Storage_HArrayOfSchema_DownCast(AnObject):
    return _Storage.Handle_Storage_HArrayOfSchema_DownCast(AnObject)
Handle_Storage_HArrayOfSchema_DownCast = _Storage.Handle_Storage_HArrayOfSchema_DownCast

class Storage_HPArray(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Standard_Persistent &
        :rtype: None

        """
        _Storage.Storage_HPArray_swiginit(self, _Storage.new_Storage_HPArray(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_HPArray_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HPArray_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HPArray_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HPArray_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_HPArray_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_HPArray_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_HPArray_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: Storage_PArray

        """
        return _Storage.Storage_HPArray_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: Storage_PArray

        """
        return _Storage.Storage_HPArray_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HPArray self)"""
        return _Storage.Storage_HPArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HPArray self) -> Handle_Storage_HPArray"""
        return _Storage.Storage_HPArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HPArray.Init = new_instancemethod(_Storage.Storage_HPArray_Init, None, Storage_HPArray)
Storage_HPArray.Length = new_instancemethod(_Storage.Storage_HPArray_Length, None, Storage_HPArray)
Storage_HPArray.Lower = new_instancemethod(_Storage.Storage_HPArray_Lower, None, Storage_HPArray)
Storage_HPArray.Upper = new_instancemethod(_Storage.Storage_HPArray_Upper, None, Storage_HPArray)
Storage_HPArray.SetValue = new_instancemethod(_Storage.Storage_HPArray_SetValue, None, Storage_HPArray)
Storage_HPArray.Value = new_instancemethod(_Storage.Storage_HPArray_Value, None, Storage_HPArray)
Storage_HPArray.ChangeValue = new_instancemethod(_Storage.Storage_HPArray_ChangeValue, None, Storage_HPArray)
Storage_HPArray.Array1 = new_instancemethod(_Storage.Storage_HPArray_Array1, None, Storage_HPArray)
Storage_HPArray.ChangeArray1 = new_instancemethod(_Storage.Storage_HPArray_ChangeArray1, None, Storage_HPArray)
Storage_HPArray._kill_pointed = new_instancemethod(_Storage.Storage_HPArray__kill_pointed, None, Storage_HPArray)
Storage_HPArray.GetHandle = new_instancemethod(_Storage.Storage_HPArray_GetHandle, None, Storage_HPArray)
Storage_HPArray_swigregister = _Storage.Storage_HPArray_swigregister
Storage_HPArray_swigregister(Storage_HPArray)

class Handle_Storage_HPArray(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HPArray_swiginit(self, _Storage.new_Handle_Storage_HPArray(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HPArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HPArray.Nullify = new_instancemethod(_Storage.Handle_Storage_HPArray_Nullify, None, Handle_Storage_HPArray)
Handle_Storage_HPArray.IsNull = new_instancemethod(_Storage.Handle_Storage_HPArray_IsNull, None, Handle_Storage_HPArray)
Handle_Storage_HPArray.GetObject = new_instancemethod(_Storage.Handle_Storage_HPArray_GetObject, None, Handle_Storage_HPArray)
Handle_Storage_HPArray._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HPArray__kill_pointed, None, Handle_Storage_HPArray)
Handle_Storage_HPArray_swigregister = _Storage.Handle_Storage_HPArray_swigregister
Handle_Storage_HPArray_swigregister(Handle_Storage_HPArray)

def Handle_Storage_HPArray_DownCast(AnObject):
    return _Storage.Handle_Storage_HPArray_DownCast(AnObject)
Handle_Storage_HPArray_DownCast = _Storage.Handle_Storage_HPArray_DownCast

class Storage_HSeqOfCallBack(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_HSeqOfCallBack_swiginit(self, _Storage.new_Storage_HSeqOfCallBack(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_HSeqOfCallBack_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HSeqOfCallBack_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Storage_CallBack &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Storage_CallBack &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_CallBack &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_CallBack &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_HSeqOfCallBack

        """
        return _Storage.Storage_HSeqOfCallBack_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_HSeqOfCallBack_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_HSeqOfCallBack_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfCallBack_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Storage_SeqOfCallBack

        """
        return _Storage.Storage_HSeqOfCallBack_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Storage_SeqOfCallBack

        """
        return _Storage.Storage_HSeqOfCallBack_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Storage_HSeqOfCallBack

        """
        return _Storage.Storage_HSeqOfCallBack_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HSeqOfCallBack self)"""
        return _Storage.Storage_HSeqOfCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HSeqOfCallBack self) -> Handle_Storage_HSeqOfCallBack"""
        return _Storage.Storage_HSeqOfCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HSeqOfCallBack.IsEmpty = new_instancemethod(_Storage.Storage_HSeqOfCallBack_IsEmpty, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Length = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Length, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Clear = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Clear, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Append = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Append, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Prepend = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Prepend, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Reverse = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Reverse, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.InsertBefore = new_instancemethod(_Storage.Storage_HSeqOfCallBack_InsertBefore, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.InsertAfter = new_instancemethod(_Storage.Storage_HSeqOfCallBack_InsertAfter, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Exchange = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Exchange, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Split = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Split, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.SetValue = new_instancemethod(_Storage.Storage_HSeqOfCallBack_SetValue, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Value = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Value, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.ChangeValue = new_instancemethod(_Storage.Storage_HSeqOfCallBack_ChangeValue, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Remove = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Remove, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.Sequence = new_instancemethod(_Storage.Storage_HSeqOfCallBack_Sequence, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.ChangeSequence = new_instancemethod(_Storage.Storage_HSeqOfCallBack_ChangeSequence, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.ShallowCopy = new_instancemethod(_Storage.Storage_HSeqOfCallBack_ShallowCopy, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_HSeqOfCallBack__kill_pointed, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack.GetHandle = new_instancemethod(_Storage.Storage_HSeqOfCallBack_GetHandle, None, Storage_HSeqOfCallBack)
Storage_HSeqOfCallBack_swigregister = _Storage.Storage_HSeqOfCallBack_swigregister
Storage_HSeqOfCallBack_swigregister(Storage_HSeqOfCallBack)

class Handle_Storage_HSeqOfCallBack(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HSeqOfCallBack_swiginit(self, _Storage.new_Handle_Storage_HSeqOfCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HSeqOfCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HSeqOfCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_HSeqOfCallBack_Nullify, None, Handle_Storage_HSeqOfCallBack)
Handle_Storage_HSeqOfCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_HSeqOfCallBack_IsNull, None, Handle_Storage_HSeqOfCallBack)
Handle_Storage_HSeqOfCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_HSeqOfCallBack_GetObject, None, Handle_Storage_HSeqOfCallBack)
Handle_Storage_HSeqOfCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HSeqOfCallBack__kill_pointed, None, Handle_Storage_HSeqOfCallBack)
Handle_Storage_HSeqOfCallBack_swigregister = _Storage.Handle_Storage_HSeqOfCallBack_swigregister
Handle_Storage_HSeqOfCallBack_swigregister(Handle_Storage_HSeqOfCallBack)

def Handle_Storage_HSeqOfCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_HSeqOfCallBack_DownCast(AnObject)
Handle_Storage_HSeqOfCallBack_DownCast = _Storage.Handle_Storage_HSeqOfCallBack_DownCast

class Storage_HSeqOfPersistent(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_HSeqOfPersistent_swiginit(self, _Storage.new_Storage_HSeqOfPersistent(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_HSeqOfPersistent_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HSeqOfPersistent_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Standard_Persistent &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Standard_Persistent &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Persistent &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Persistent &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_HSeqOfPersistent

        """
        return _Storage.Storage_HSeqOfPersistent_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_HSeqOfPersistent_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_HSeqOfPersistent_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfPersistent_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Storage_SeqOfPersistent

        """
        return _Storage.Storage_HSeqOfPersistent_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Storage_SeqOfPersistent

        """
        return _Storage.Storage_HSeqOfPersistent_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Storage_HSeqOfPersistent

        """
        return _Storage.Storage_HSeqOfPersistent_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HSeqOfPersistent self)"""
        return _Storage.Storage_HSeqOfPersistent__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HSeqOfPersistent self) -> Handle_Storage_HSeqOfPersistent"""
        return _Storage.Storage_HSeqOfPersistent_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HSeqOfPersistent.IsEmpty = new_instancemethod(_Storage.Storage_HSeqOfPersistent_IsEmpty, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Length = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Length, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Clear = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Clear, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Append = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Append, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Prepend = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Prepend, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Reverse = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Reverse, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.InsertBefore = new_instancemethod(_Storage.Storage_HSeqOfPersistent_InsertBefore, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.InsertAfter = new_instancemethod(_Storage.Storage_HSeqOfPersistent_InsertAfter, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Exchange = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Exchange, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Split = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Split, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.SetValue = new_instancemethod(_Storage.Storage_HSeqOfPersistent_SetValue, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Value = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Value, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.ChangeValue = new_instancemethod(_Storage.Storage_HSeqOfPersistent_ChangeValue, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Remove = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Remove, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.Sequence = new_instancemethod(_Storage.Storage_HSeqOfPersistent_Sequence, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.ChangeSequence = new_instancemethod(_Storage.Storage_HSeqOfPersistent_ChangeSequence, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.ShallowCopy = new_instancemethod(_Storage.Storage_HSeqOfPersistent_ShallowCopy, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent._kill_pointed = new_instancemethod(_Storage.Storage_HSeqOfPersistent__kill_pointed, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent.GetHandle = new_instancemethod(_Storage.Storage_HSeqOfPersistent_GetHandle, None, Storage_HSeqOfPersistent)
Storage_HSeqOfPersistent_swigregister = _Storage.Storage_HSeqOfPersistent_swigregister
Storage_HSeqOfPersistent_swigregister(Storage_HSeqOfPersistent)

class Handle_Storage_HSeqOfPersistent(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HSeqOfPersistent_swiginit(self, _Storage.new_Handle_Storage_HSeqOfPersistent(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HSeqOfPersistent_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HSeqOfPersistent.Nullify = new_instancemethod(_Storage.Handle_Storage_HSeqOfPersistent_Nullify, None, Handle_Storage_HSeqOfPersistent)
Handle_Storage_HSeqOfPersistent.IsNull = new_instancemethod(_Storage.Handle_Storage_HSeqOfPersistent_IsNull, None, Handle_Storage_HSeqOfPersistent)
Handle_Storage_HSeqOfPersistent.GetObject = new_instancemethod(_Storage.Handle_Storage_HSeqOfPersistent_GetObject, None, Handle_Storage_HSeqOfPersistent)
Handle_Storage_HSeqOfPersistent._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HSeqOfPersistent__kill_pointed, None, Handle_Storage_HSeqOfPersistent)
Handle_Storage_HSeqOfPersistent_swigregister = _Storage.Handle_Storage_HSeqOfPersistent_swigregister
Handle_Storage_HSeqOfPersistent_swigregister(Handle_Storage_HSeqOfPersistent)

def Handle_Storage_HSeqOfPersistent_DownCast(AnObject):
    return _Storage.Handle_Storage_HSeqOfPersistent_DownCast(AnObject)
Handle_Storage_HSeqOfPersistent_DownCast = _Storage.Handle_Storage_HSeqOfPersistent_DownCast

class Storage_HSeqOfRoot(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_HSeqOfRoot_swiginit(self, _Storage.new_Storage_HSeqOfRoot(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_HSeqOfRoot_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_HSeqOfRoot_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Storage_Root &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Storage_Root &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_Root &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_Root &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Storage_HSeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_HSeqOfRoot

        """
        return _Storage.Storage_HSeqOfRoot_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Storage_Root &
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_HSeqOfRoot_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_HSeqOfRoot_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Storage.Storage_HSeqOfRoot_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Storage_SeqOfRoot

        """
        return _Storage.Storage_HSeqOfRoot_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Storage_SeqOfRoot

        """
        return _Storage.Storage_HSeqOfRoot_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Storage_HSeqOfRoot

        """
        return _Storage.Storage_HSeqOfRoot_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HSeqOfRoot self)"""
        return _Storage.Storage_HSeqOfRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HSeqOfRoot self) -> Handle_Storage_HSeqOfRoot"""
        return _Storage.Storage_HSeqOfRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HSeqOfRoot.IsEmpty = new_instancemethod(_Storage.Storage_HSeqOfRoot_IsEmpty, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Length = new_instancemethod(_Storage.Storage_HSeqOfRoot_Length, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Clear = new_instancemethod(_Storage.Storage_HSeqOfRoot_Clear, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Append = new_instancemethod(_Storage.Storage_HSeqOfRoot_Append, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Prepend = new_instancemethod(_Storage.Storage_HSeqOfRoot_Prepend, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Reverse = new_instancemethod(_Storage.Storage_HSeqOfRoot_Reverse, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.InsertBefore = new_instancemethod(_Storage.Storage_HSeqOfRoot_InsertBefore, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.InsertAfter = new_instancemethod(_Storage.Storage_HSeqOfRoot_InsertAfter, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Exchange = new_instancemethod(_Storage.Storage_HSeqOfRoot_Exchange, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Split = new_instancemethod(_Storage.Storage_HSeqOfRoot_Split, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.SetValue = new_instancemethod(_Storage.Storage_HSeqOfRoot_SetValue, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Value = new_instancemethod(_Storage.Storage_HSeqOfRoot_Value, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.ChangeValue = new_instancemethod(_Storage.Storage_HSeqOfRoot_ChangeValue, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Remove = new_instancemethod(_Storage.Storage_HSeqOfRoot_Remove, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Sequence = new_instancemethod(_Storage.Storage_HSeqOfRoot_Sequence, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.ChangeSequence = new_instancemethod(_Storage.Storage_HSeqOfRoot_ChangeSequence, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.ShallowCopy = new_instancemethod(_Storage.Storage_HSeqOfRoot_ShallowCopy, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot._kill_pointed = new_instancemethod(_Storage.Storage_HSeqOfRoot__kill_pointed, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.GetHandle = new_instancemethod(_Storage.Storage_HSeqOfRoot_GetHandle, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot_swigregister = _Storage.Storage_HSeqOfRoot_swigregister
Storage_HSeqOfRoot_swigregister(Storage_HSeqOfRoot)

class Handle_Storage_HSeqOfRoot(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HSeqOfRoot_swiginit(self, _Storage.new_Handle_Storage_HSeqOfRoot(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HSeqOfRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HSeqOfRoot.Nullify = new_instancemethod(_Storage.Handle_Storage_HSeqOfRoot_Nullify, None, Handle_Storage_HSeqOfRoot)
Handle_Storage_HSeqOfRoot.IsNull = new_instancemethod(_Storage.Handle_Storage_HSeqOfRoot_IsNull, None, Handle_Storage_HSeqOfRoot)
Handle_Storage_HSeqOfRoot.GetObject = new_instancemethod(_Storage.Handle_Storage_HSeqOfRoot_GetObject, None, Handle_Storage_HSeqOfRoot)
Handle_Storage_HSeqOfRoot._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HSeqOfRoot__kill_pointed, None, Handle_Storage_HSeqOfRoot)
Handle_Storage_HSeqOfRoot_swigregister = _Storage.Handle_Storage_HSeqOfRoot_swigregister
Handle_Storage_HSeqOfRoot_swigregister(Handle_Storage_HSeqOfRoot)

def Handle_Storage_HSeqOfRoot_DownCast(AnObject):
    return _Storage.Handle_Storage_HSeqOfRoot_DownCast(AnObject)
Handle_Storage_HSeqOfRoot_DownCast = _Storage.Handle_Storage_HSeqOfRoot_DownCast

class Storage_HeaderData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_HeaderData_swiginit(self, _Storage.new_Storage_HeaderData(*args))

    def CreationDate(self, *args):
        """
        * return the creation date

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_CreationDate(self, *args)


    def StorageVersion(self, *args):
        """
        * return the Storage package version

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_StorageVersion(self, *args)


    def SchemaVersion(self, *args):
        """
        * get the version of the schema

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_SchemaVersion(self, *args)


    def SchemaName(self, *args):
        """
        * get the schema's name

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_SchemaName(self, *args)


    def SetApplicationVersion(self, *args):
        """
        * set the version of the application

        :param aVersion:
        :type aVersion: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_HeaderData_SetApplicationVersion(self, *args)


    def ApplicationVersion(self, *args):
        """
        * get the version of the application

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_ApplicationVersion(self, *args)


    def SetApplicationName(self, *args):
        """
        * set the name of the application

        :param aName:
        :type aName: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_HeaderData_SetApplicationName(self, *args)


    def ApplicationName(self, *args):
        """
        * get the name of the application

        :rtype: TCollection_ExtendedString

        """
        return _Storage.Storage_HeaderData_ApplicationName(self, *args)


    def SetDataType(self, *args):
        """
        * set the data type

        :param aType:
        :type aType: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_HeaderData_SetDataType(self, *args)


    def DataType(self, *args):
        """
        * returns data type

        :rtype: TCollection_ExtendedString

        """
        return _Storage.Storage_HeaderData_DataType(self, *args)


    def AddToUserInfo(self, *args):
        """
        * add <theUserInfo> to the user informations

        :param theUserInfo:
        :type theUserInfo: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_HeaderData_AddToUserInfo(self, *args)


    def UserInfo(self, *args):
        """
        * return the user informations

        :rtype: TColStd_SequenceOfAsciiString

        """
        return _Storage.Storage_HeaderData_UserInfo(self, *args)


    def AddToComments(self, *args):
        """
        * add <theUserInfo> to the user informations

        :param aComment:
        :type aComment: TCollection_ExtendedString &
        :rtype: None

        """
        return _Storage.Storage_HeaderData_AddToComments(self, *args)


    def Comments(self, *args):
        """
        * return the user informations

        :rtype: TColStd_SequenceOfExtendedString

        """
        return _Storage.Storage_HeaderData_Comments(self, *args)


    def NumberOfObjects(self, *args):
        """
        * the the number of persistent objects Return: the number of persistent objects readed

        :rtype: int

        """
        return _Storage.Storage_HeaderData_NumberOfObjects(self, *args)


    def ErrorStatus(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_HeaderData_ErrorStatus(self, *args)


    def ErrorStatusExtension(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_HeaderData_ErrorStatusExtension(self, *args)


    def ClearErrorStatus(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_HeaderData_ClearErrorStatus(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_HeaderData self)"""
        return _Storage.Storage_HeaderData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_HeaderData self) -> Handle_Storage_HeaderData"""
        return _Storage.Storage_HeaderData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_HeaderData.CreationDate = new_instancemethod(_Storage.Storage_HeaderData_CreationDate, None, Storage_HeaderData)
Storage_HeaderData.StorageVersion = new_instancemethod(_Storage.Storage_HeaderData_StorageVersion, None, Storage_HeaderData)
Storage_HeaderData.SchemaVersion = new_instancemethod(_Storage.Storage_HeaderData_SchemaVersion, None, Storage_HeaderData)
Storage_HeaderData.SchemaName = new_instancemethod(_Storage.Storage_HeaderData_SchemaName, None, Storage_HeaderData)
Storage_HeaderData.SetApplicationVersion = new_instancemethod(_Storage.Storage_HeaderData_SetApplicationVersion, None, Storage_HeaderData)
Storage_HeaderData.ApplicationVersion = new_instancemethod(_Storage.Storage_HeaderData_ApplicationVersion, None, Storage_HeaderData)
Storage_HeaderData.SetApplicationName = new_instancemethod(_Storage.Storage_HeaderData_SetApplicationName, None, Storage_HeaderData)
Storage_HeaderData.ApplicationName = new_instancemethod(_Storage.Storage_HeaderData_ApplicationName, None, Storage_HeaderData)
Storage_HeaderData.SetDataType = new_instancemethod(_Storage.Storage_HeaderData_SetDataType, None, Storage_HeaderData)
Storage_HeaderData.DataType = new_instancemethod(_Storage.Storage_HeaderData_DataType, None, Storage_HeaderData)
Storage_HeaderData.AddToUserInfo = new_instancemethod(_Storage.Storage_HeaderData_AddToUserInfo, None, Storage_HeaderData)
Storage_HeaderData.UserInfo = new_instancemethod(_Storage.Storage_HeaderData_UserInfo, None, Storage_HeaderData)
Storage_HeaderData.AddToComments = new_instancemethod(_Storage.Storage_HeaderData_AddToComments, None, Storage_HeaderData)
Storage_HeaderData.Comments = new_instancemethod(_Storage.Storage_HeaderData_Comments, None, Storage_HeaderData)
Storage_HeaderData.NumberOfObjects = new_instancemethod(_Storage.Storage_HeaderData_NumberOfObjects, None, Storage_HeaderData)
Storage_HeaderData.ErrorStatus = new_instancemethod(_Storage.Storage_HeaderData_ErrorStatus, None, Storage_HeaderData)
Storage_HeaderData.ErrorStatusExtension = new_instancemethod(_Storage.Storage_HeaderData_ErrorStatusExtension, None, Storage_HeaderData)
Storage_HeaderData.ClearErrorStatus = new_instancemethod(_Storage.Storage_HeaderData_ClearErrorStatus, None, Storage_HeaderData)
Storage_HeaderData._kill_pointed = new_instancemethod(_Storage.Storage_HeaderData__kill_pointed, None, Storage_HeaderData)
Storage_HeaderData.GetHandle = new_instancemethod(_Storage.Storage_HeaderData_GetHandle, None, Storage_HeaderData)
Storage_HeaderData_swigregister = _Storage.Storage_HeaderData_swigregister
Storage_HeaderData_swigregister(Storage_HeaderData)

class Handle_Storage_HeaderData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_HeaderData_swiginit(self, _Storage.new_Handle_Storage_HeaderData(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_HeaderData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_HeaderData.Nullify = new_instancemethod(_Storage.Handle_Storage_HeaderData_Nullify, None, Handle_Storage_HeaderData)
Handle_Storage_HeaderData.IsNull = new_instancemethod(_Storage.Handle_Storage_HeaderData_IsNull, None, Handle_Storage_HeaderData)
Handle_Storage_HeaderData.GetObject = new_instancemethod(_Storage.Handle_Storage_HeaderData_GetObject, None, Handle_Storage_HeaderData)
Handle_Storage_HeaderData._kill_pointed = new_instancemethod(_Storage.Handle_Storage_HeaderData__kill_pointed, None, Handle_Storage_HeaderData)
Handle_Storage_HeaderData_swigregister = _Storage.Handle_Storage_HeaderData_swigregister
Handle_Storage_HeaderData_swigregister(Handle_Storage_HeaderData)

def Handle_Storage_HeaderData_DownCast(AnObject):
    return _Storage.Handle_Storage_HeaderData_DownCast(AnObject)
Handle_Storage_HeaderData_DownCast = _Storage.Handle_Storage_HeaderData_DownCast

class Storage_IndexedDataMapNodeOfPType(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: TCollection_AsciiString &
        :param K2:
        :type K2: int
        :param I:
        :type I: int &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _Storage.Storage_IndexedDataMapNodeOfPType_swiginit(self, _Storage.new_Storage_IndexedDataMapNodeOfPType(*args))

    def Key1(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_IndexedDataMapNodeOfPType_Key1(self, *args)


    def GetKey2(self):
        """GetKey2(Storage_IndexedDataMapNodeOfPType self) -> Standard_Integer"""
        return _Storage.Storage_IndexedDataMapNodeOfPType_GetKey2(self)


    def SetKey2(self, value):
        """SetKey2(Storage_IndexedDataMapNodeOfPType self, Standard_Integer value)"""
        return _Storage.Storage_IndexedDataMapNodeOfPType_SetKey2(self, value)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _Storage.Storage_IndexedDataMapNodeOfPType_Next2(self, *args)


    def GetValue(self):
        """GetValue(Storage_IndexedDataMapNodeOfPType self) -> Standard_Integer"""
        return _Storage.Storage_IndexedDataMapNodeOfPType_GetValue(self)


    def SetValue(self, value):
        """SetValue(Storage_IndexedDataMapNodeOfPType self, Standard_Integer value)"""
        return _Storage.Storage_IndexedDataMapNodeOfPType_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(Storage_IndexedDataMapNodeOfPType self)"""
        return _Storage.Storage_IndexedDataMapNodeOfPType__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_IndexedDataMapNodeOfPType self) -> Handle_Storage_IndexedDataMapNodeOfPType"""
        return _Storage.Storage_IndexedDataMapNodeOfPType_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_IndexedDataMapNodeOfPType.Key1 = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_Key1, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.GetKey2 = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_GetKey2, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.SetKey2 = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_SetKey2, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.Next2 = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_Next2, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.GetValue = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_GetValue, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.SetValue = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_SetValue, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType._kill_pointed = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType__kill_pointed, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType.GetHandle = new_instancemethod(_Storage.Storage_IndexedDataMapNodeOfPType_GetHandle, None, Storage_IndexedDataMapNodeOfPType)
Storage_IndexedDataMapNodeOfPType_swigregister = _Storage.Storage_IndexedDataMapNodeOfPType_swigregister
Storage_IndexedDataMapNodeOfPType_swigregister(Storage_IndexedDataMapNodeOfPType)

class Handle_Storage_IndexedDataMapNodeOfPType(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_IndexedDataMapNodeOfPType_swiginit(self, _Storage.new_Handle_Storage_IndexedDataMapNodeOfPType(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_IndexedDataMapNodeOfPType_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_IndexedDataMapNodeOfPType.Nullify = new_instancemethod(_Storage.Handle_Storage_IndexedDataMapNodeOfPType_Nullify, None, Handle_Storage_IndexedDataMapNodeOfPType)
Handle_Storage_IndexedDataMapNodeOfPType.IsNull = new_instancemethod(_Storage.Handle_Storage_IndexedDataMapNodeOfPType_IsNull, None, Handle_Storage_IndexedDataMapNodeOfPType)
Handle_Storage_IndexedDataMapNodeOfPType.GetObject = new_instancemethod(_Storage.Handle_Storage_IndexedDataMapNodeOfPType_GetObject, None, Handle_Storage_IndexedDataMapNodeOfPType)
Handle_Storage_IndexedDataMapNodeOfPType._kill_pointed = new_instancemethod(_Storage.Handle_Storage_IndexedDataMapNodeOfPType__kill_pointed, None, Handle_Storage_IndexedDataMapNodeOfPType)
Handle_Storage_IndexedDataMapNodeOfPType_swigregister = _Storage.Handle_Storage_IndexedDataMapNodeOfPType_swigregister
Handle_Storage_IndexedDataMapNodeOfPType_swigregister(Handle_Storage_IndexedDataMapNodeOfPType)

def Handle_Storage_IndexedDataMapNodeOfPType_DownCast(AnObject):
    return _Storage.Handle_Storage_IndexedDataMapNodeOfPType_DownCast(AnObject)
Handle_Storage_IndexedDataMapNodeOfPType_DownCast = _Storage.Handle_Storage_IndexedDataMapNodeOfPType_DownCast

class Storage_InternalData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_InternalData_swiginit(self, _Storage.new_Storage_InternalData(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_InternalData_Clear(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_InternalData self)"""
        return _Storage.Storage_InternalData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_InternalData self) -> Handle_Storage_InternalData"""
        return _Storage.Storage_InternalData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_InternalData.Clear = new_instancemethod(_Storage.Storage_InternalData_Clear, None, Storage_InternalData)
Storage_InternalData._kill_pointed = new_instancemethod(_Storage.Storage_InternalData__kill_pointed, None, Storage_InternalData)
Storage_InternalData.GetHandle = new_instancemethod(_Storage.Storage_InternalData_GetHandle, None, Storage_InternalData)
Storage_InternalData_swigregister = _Storage.Storage_InternalData_swigregister
Storage_InternalData_swigregister(Storage_InternalData)

class Handle_Storage_InternalData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_InternalData_swiginit(self, _Storage.new_Handle_Storage_InternalData(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_InternalData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_InternalData.Nullify = new_instancemethod(_Storage.Handle_Storage_InternalData_Nullify, None, Handle_Storage_InternalData)
Handle_Storage_InternalData.IsNull = new_instancemethod(_Storage.Handle_Storage_InternalData_IsNull, None, Handle_Storage_InternalData)
Handle_Storage_InternalData.GetObject = new_instancemethod(_Storage.Handle_Storage_InternalData_GetObject, None, Handle_Storage_InternalData)
Handle_Storage_InternalData._kill_pointed = new_instancemethod(_Storage.Handle_Storage_InternalData__kill_pointed, None, Handle_Storage_InternalData)
Handle_Storage_InternalData_swigregister = _Storage.Handle_Storage_InternalData_swigregister
Handle_Storage_InternalData_swigregister(Handle_Storage_InternalData)

def Handle_Storage_InternalData_DownCast(AnObject):
    return _Storage.Handle_Storage_InternalData_DownCast(AnObject)
Handle_Storage_InternalData_DownCast = _Storage.Handle_Storage_InternalData_DownCast

class Storage_MapOfCallBack(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Storage.Storage_MapOfCallBack_swiginit(self, _Storage.new_Storage_MapOfCallBack(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_MapOfCallBack &
        :rtype: Storage_MapOfCallBack

        """
        return _Storage.Storage_MapOfCallBack_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_MapOfCallBack &
        :rtype: Storage_MapOfCallBack

        """
        return _Storage.Storage_MapOfCallBack_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Storage.Storage_MapOfCallBack_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_MapOfCallBack_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: Handle_Storage_TypedCallBack &
        :rtype: bool

        """
        return _Storage.Storage_MapOfCallBack_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_MapOfCallBack_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_MapOfCallBack_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Handle_Storage_TypedCallBack

        """
        return _Storage.Storage_MapOfCallBack_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Handle_Storage_TypedCallBack

        """
        return _Storage.Storage_MapOfCallBack_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_MapOfCallBack_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_MapOfCallBack_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_MapOfCallBack self)"""
        return _Storage.Storage_MapOfCallBack__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_MapOfCallBack.Assign = new_instancemethod(_Storage.Storage_MapOfCallBack_Assign, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Set = new_instancemethod(_Storage.Storage_MapOfCallBack_Set, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ReSize = new_instancemethod(_Storage.Storage_MapOfCallBack_ReSize, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Clear = new_instancemethod(_Storage.Storage_MapOfCallBack_Clear, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Bind = new_instancemethod(_Storage.Storage_MapOfCallBack_Bind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.IsBound = new_instancemethod(_Storage.Storage_MapOfCallBack_IsBound, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.UnBind = new_instancemethod(_Storage.Storage_MapOfCallBack_UnBind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Find = new_instancemethod(_Storage.Storage_MapOfCallBack_Find, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ChangeFind = new_instancemethod(_Storage.Storage_MapOfCallBack_ChangeFind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Find1 = new_instancemethod(_Storage.Storage_MapOfCallBack_Find1, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ChangeFind1 = new_instancemethod(_Storage.Storage_MapOfCallBack_ChangeFind1, None, Storage_MapOfCallBack)
Storage_MapOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_MapOfCallBack__kill_pointed, None, Storage_MapOfCallBack)
Storage_MapOfCallBack_swigregister = _Storage.Storage_MapOfCallBack_swigregister
Storage_MapOfCallBack_swigregister(Storage_MapOfCallBack)

class Storage_MapOfPers(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Storage.Storage_MapOfPers_swiginit(self, _Storage.new_Storage_MapOfPers(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_MapOfPers &
        :rtype: Storage_MapOfPers

        """
        return _Storage.Storage_MapOfPers_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_MapOfPers &
        :rtype: Storage_MapOfPers

        """
        return _Storage.Storage_MapOfPers_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Storage.Storage_MapOfPers_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_MapOfPers_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: Handle_Storage_Root &
        :rtype: bool

        """
        return _Storage.Storage_MapOfPers_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_MapOfPers_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_MapOfPers_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_MapOfPers_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_MapOfPers_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_MapOfPers_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_MapOfPers_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_MapOfPers self)"""
        return _Storage.Storage_MapOfPers__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_MapOfPers.Assign = new_instancemethod(_Storage.Storage_MapOfPers_Assign, None, Storage_MapOfPers)
Storage_MapOfPers.Set = new_instancemethod(_Storage.Storage_MapOfPers_Set, None, Storage_MapOfPers)
Storage_MapOfPers.ReSize = new_instancemethod(_Storage.Storage_MapOfPers_ReSize, None, Storage_MapOfPers)
Storage_MapOfPers.Clear = new_instancemethod(_Storage.Storage_MapOfPers_Clear, None, Storage_MapOfPers)
Storage_MapOfPers.Bind = new_instancemethod(_Storage.Storage_MapOfPers_Bind, None, Storage_MapOfPers)
Storage_MapOfPers.IsBound = new_instancemethod(_Storage.Storage_MapOfPers_IsBound, None, Storage_MapOfPers)
Storage_MapOfPers.UnBind = new_instancemethod(_Storage.Storage_MapOfPers_UnBind, None, Storage_MapOfPers)
Storage_MapOfPers.Find = new_instancemethod(_Storage.Storage_MapOfPers_Find, None, Storage_MapOfPers)
Storage_MapOfPers.ChangeFind = new_instancemethod(_Storage.Storage_MapOfPers_ChangeFind, None, Storage_MapOfPers)
Storage_MapOfPers.Find1 = new_instancemethod(_Storage.Storage_MapOfPers_Find1, None, Storage_MapOfPers)
Storage_MapOfPers.ChangeFind1 = new_instancemethod(_Storage.Storage_MapOfPers_ChangeFind1, None, Storage_MapOfPers)
Storage_MapOfPers._kill_pointed = new_instancemethod(_Storage.Storage_MapOfPers__kill_pointed, None, Storage_MapOfPers)
Storage_MapOfPers_swigregister = _Storage.Storage_MapOfPers_swigregister
Storage_MapOfPers_swigregister(Storage_MapOfPers)

class Storage_MapPSDHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: Handle_Standard_Persistent &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Storage.Storage_MapPSDHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: Handle_Standard_Persistent &
        :param K2:
        :type K2: Handle_Standard_Persistent &
        :rtype: bool

        """
        return _Storage.Storage_MapPSDHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _Storage.Storage_MapPSDHasher_swiginit(self, _Storage.new_Storage_MapPSDHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_MapPSDHasher._kill_pointed = new_instancemethod(_Storage.Storage_MapPSDHasher__kill_pointed, None, Storage_MapPSDHasher)
Storage_MapPSDHasher_swigregister = _Storage.Storage_MapPSDHasher_swigregister
Storage_MapPSDHasher_swigregister(Storage_MapPSDHasher)

def Storage_MapPSDHasher_HashCode(*args):
    """
    :param K:
    :type K: Handle_Standard_Persistent &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _Storage.Storage_MapPSDHasher_HashCode(*args)

def Storage_MapPSDHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: Handle_Standard_Persistent &
    :param K2:
    :type K2: Handle_Standard_Persistent &
    :rtype: bool

    """
    return _Storage.Storage_MapPSDHasher_IsEqual(*args)

class Storage_PArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Standard_Persistent &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Storage.Storage_PArray_swiginit(self, _Storage.new_Storage_PArray(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_PArray_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_PArray_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Storage.Storage_PArray_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_PArray &
        :rtype: Storage_PArray

        """
        return _Storage.Storage_PArray_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_PArray &
        :rtype: Storage_PArray

        """
        return _Storage.Storage_PArray_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_PArray_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_PArray_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_PArray_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_PArray_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_PArray_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_PArray_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_PArray.Init = new_instancemethod(_Storage.Storage_PArray_Init, None, Storage_PArray)
Storage_PArray.Destroy = new_instancemethod(_Storage.Storage_PArray_Destroy, None, Storage_PArray)
Storage_PArray.IsAllocated = new_instancemethod(_Storage.Storage_PArray_IsAllocated, None, Storage_PArray)
Storage_PArray.Assign = new_instancemethod(_Storage.Storage_PArray_Assign, None, Storage_PArray)
Storage_PArray.Set = new_instancemethod(_Storage.Storage_PArray_Set, None, Storage_PArray)
Storage_PArray.Length = new_instancemethod(_Storage.Storage_PArray_Length, None, Storage_PArray)
Storage_PArray.Lower = new_instancemethod(_Storage.Storage_PArray_Lower, None, Storage_PArray)
Storage_PArray.Upper = new_instancemethod(_Storage.Storage_PArray_Upper, None, Storage_PArray)
Storage_PArray.SetValue = new_instancemethod(_Storage.Storage_PArray_SetValue, None, Storage_PArray)
Storage_PArray.Value = new_instancemethod(_Storage.Storage_PArray_Value, None, Storage_PArray)
Storage_PArray.ChangeValue = new_instancemethod(_Storage.Storage_PArray_ChangeValue, None, Storage_PArray)
Storage_PArray._kill_pointed = new_instancemethod(_Storage.Storage_PArray__kill_pointed, None, Storage_PArray)
Storage_PArray_swigregister = _Storage.Storage_PArray_swigregister
Storage_PArray_swigregister(Storage_PArray)

class Storage_PType(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Storage.Storage_PType_swiginit(self, _Storage.new_Storage_PType(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_PType &
        :rtype: Storage_PType

        """
        return _Storage.Storage_PType_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_PType &
        :rtype: Storage_PType

        """
        return _Storage.Storage_PType_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Storage.Storage_PType_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_PType_Clear(self, *args)


    def Add(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: int &
        :rtype: int

        """
        return _Storage.Storage_PType_Add(self, *args)


    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: TCollection_AsciiString &
        :param T:
        :type T: int &
        :rtype: None

        """
        return _Storage.Storage_PType_Substitute(self, *args)


    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_PType_RemoveLast(self, *args)


    def Contains(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_PType_Contains(self, *args)


    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_PType_FindKey(self, *args)


    def FindFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: int

        """
        return _Storage.Storage_PType_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: int

        """
        return _Storage.Storage_PType_ChangeFromIndex(self, *args)


    def FindIndex(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: int

        """
        return _Storage.Storage_PType_FindIndex(self, *args)


    def FindFromKey(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: int

        """
        return _Storage.Storage_PType_FindFromKey(self, *args)


    def ChangeFromKey(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: int

        """
        return _Storage.Storage_PType_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_PType_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Storage.Storage_PType_ChangeFromKey1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_PType self)"""
        return _Storage.Storage_PType__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_PType.Assign = new_instancemethod(_Storage.Storage_PType_Assign, None, Storage_PType)
Storage_PType.Set = new_instancemethod(_Storage.Storage_PType_Set, None, Storage_PType)
Storage_PType.ReSize = new_instancemethod(_Storage.Storage_PType_ReSize, None, Storage_PType)
Storage_PType.Clear = new_instancemethod(_Storage.Storage_PType_Clear, None, Storage_PType)
Storage_PType.Add = new_instancemethod(_Storage.Storage_PType_Add, None, Storage_PType)
Storage_PType.Substitute = new_instancemethod(_Storage.Storage_PType_Substitute, None, Storage_PType)
Storage_PType.RemoveLast = new_instancemethod(_Storage.Storage_PType_RemoveLast, None, Storage_PType)
Storage_PType.Contains = new_instancemethod(_Storage.Storage_PType_Contains, None, Storage_PType)
Storage_PType.FindKey = new_instancemethod(_Storage.Storage_PType_FindKey, None, Storage_PType)
Storage_PType.FindFromIndex = new_instancemethod(_Storage.Storage_PType_FindFromIndex, None, Storage_PType)
Storage_PType.ChangeFromIndex = new_instancemethod(_Storage.Storage_PType_ChangeFromIndex, None, Storage_PType)
Storage_PType.FindIndex = new_instancemethod(_Storage.Storage_PType_FindIndex, None, Storage_PType)
Storage_PType.FindFromKey = new_instancemethod(_Storage.Storage_PType_FindFromKey, None, Storage_PType)
Storage_PType.ChangeFromKey = new_instancemethod(_Storage.Storage_PType_ChangeFromKey, None, Storage_PType)
Storage_PType.FindFromKey1 = new_instancemethod(_Storage.Storage_PType_FindFromKey1, None, Storage_PType)
Storage_PType.ChangeFromKey1 = new_instancemethod(_Storage.Storage_PType_ChangeFromKey1, None, Storage_PType)
Storage_PType._kill_pointed = new_instancemethod(_Storage.Storage_PType__kill_pointed, None, Storage_PType)
Storage_PType_swigregister = _Storage.Storage_PType_swigregister
Storage_PType_swigregister(Storage_PType)

class Storage_Root(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aName:
        :type aName: TCollection_AsciiString &
        :param anObject:
        :type anObject: Handle_Standard_Persistent &
        :rtype: None

        """
        _Storage.Storage_Root_swiginit(self, _Storage.new_Storage_Root(*args))

    def SetName(self, *args):
        """
        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Root_SetName(self, *args)


    def Name(self, *args):
        """
        * Returns the name of this root object. The name may have been given explicitly when the root was inserted into the Storage_Data object. If not, the name is a reference number which was assigned automatically by the driver when writing the set of data into the container. When naming the roots, it is easier to retrieve objects by significant references rather than by references without any semantic values. Warning The returned string will be empty if you call this function before having named this root object, either explicitly, or when writing the set of data into the container.

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Root_Name(self, *args)


    def SetObject(self, *args):
        """
        :param anObject:
        :type anObject: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_Root_SetObject(self, *args)


    def Object(self, *args):
        """
        * Returns the persistent object encapsulated by this root.

        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_Root_Object(self, *args)


    def Type(self, *args):
        """
        * Returns the name of this root type.

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Root_Type(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_Root self)"""
        return _Storage.Storage_Root__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_Root self) -> Handle_Storage_Root"""
        return _Storage.Storage_Root_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_Root.SetName = new_instancemethod(_Storage.Storage_Root_SetName, None, Storage_Root)
Storage_Root.Name = new_instancemethod(_Storage.Storage_Root_Name, None, Storage_Root)
Storage_Root.SetObject = new_instancemethod(_Storage.Storage_Root_SetObject, None, Storage_Root)
Storage_Root.Object = new_instancemethod(_Storage.Storage_Root_Object, None, Storage_Root)
Storage_Root.Type = new_instancemethod(_Storage.Storage_Root_Type, None, Storage_Root)
Storage_Root._kill_pointed = new_instancemethod(_Storage.Storage_Root__kill_pointed, None, Storage_Root)
Storage_Root.GetHandle = new_instancemethod(_Storage.Storage_Root_GetHandle, None, Storage_Root)
Storage_Root_swigregister = _Storage.Storage_Root_swigregister
Storage_Root_swigregister(Storage_Root)

class Handle_Storage_Root(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_Root_swiginit(self, _Storage.new_Handle_Storage_Root(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_Root_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_Root.Nullify = new_instancemethod(_Storage.Handle_Storage_Root_Nullify, None, Handle_Storage_Root)
Handle_Storage_Root.IsNull = new_instancemethod(_Storage.Handle_Storage_Root_IsNull, None, Handle_Storage_Root)
Handle_Storage_Root.GetObject = new_instancemethod(_Storage.Handle_Storage_Root_GetObject, None, Handle_Storage_Root)
Handle_Storage_Root._kill_pointed = new_instancemethod(_Storage.Handle_Storage_Root__kill_pointed, None, Handle_Storage_Root)
Handle_Storage_Root_swigregister = _Storage.Handle_Storage_Root_swigregister
Handle_Storage_Root_swigregister(Handle_Storage_Root)

def Handle_Storage_Root_DownCast(AnObject):
    return _Storage.Handle_Storage_Root_DownCast(AnObject)
Handle_Storage_Root_DownCast = _Storage.Handle_Storage_Root_DownCast

class Storage_RootData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_RootData_swiginit(self, _Storage.new_Storage_RootData(*args))

    def NumberOfRoots(self, *args):
        """
        * returns the number of roots.

        :rtype: int

        """
        return _Storage.Storage_RootData_NumberOfRoots(self, *args)


    def AddRoot(self, *args):
        """
        * add a root to <self>. If a root with same name is present, it will be replaced by <aRoot>.

        :param aRoot:
        :type aRoot: Handle_Storage_Root &
        :rtype: None

        """
        return _Storage.Storage_RootData_AddRoot(self, *args)


    def Roots(self, *args):
        """
        :rtype: Handle_Storage_HSeqOfRoot

        """
        return _Storage.Storage_RootData_Roots(self, *args)


    def Find(self, *args):
        """
        * find a root with name <aName>.

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_RootData_Find(self, *args)


    def IsRoot(self, *args):
        """
        * returns Standard_True if <self> contains a root named <aName>

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_RootData_IsRoot(self, *args)


    def RemoveRoot(self, *args):
        """
        * remove the root named <aName>.

        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_RootData_RemoveRoot(self, *args)


    def ErrorStatus(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_RootData_ErrorStatus(self, *args)


    def ErrorStatusExtension(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_RootData_ErrorStatusExtension(self, *args)


    def ClearErrorStatus(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_RootData_ClearErrorStatus(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_RootData self)"""
        return _Storage.Storage_RootData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_RootData self) -> Handle_Storage_RootData"""
        return _Storage.Storage_RootData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_RootData.NumberOfRoots = new_instancemethod(_Storage.Storage_RootData_NumberOfRoots, None, Storage_RootData)
Storage_RootData.AddRoot = new_instancemethod(_Storage.Storage_RootData_AddRoot, None, Storage_RootData)
Storage_RootData.Roots = new_instancemethod(_Storage.Storage_RootData_Roots, None, Storage_RootData)
Storage_RootData.Find = new_instancemethod(_Storage.Storage_RootData_Find, None, Storage_RootData)
Storage_RootData.IsRoot = new_instancemethod(_Storage.Storage_RootData_IsRoot, None, Storage_RootData)
Storage_RootData.RemoveRoot = new_instancemethod(_Storage.Storage_RootData_RemoveRoot, None, Storage_RootData)
Storage_RootData.ErrorStatus = new_instancemethod(_Storage.Storage_RootData_ErrorStatus, None, Storage_RootData)
Storage_RootData.ErrorStatusExtension = new_instancemethod(_Storage.Storage_RootData_ErrorStatusExtension, None, Storage_RootData)
Storage_RootData.ClearErrorStatus = new_instancemethod(_Storage.Storage_RootData_ClearErrorStatus, None, Storage_RootData)
Storage_RootData._kill_pointed = new_instancemethod(_Storage.Storage_RootData__kill_pointed, None, Storage_RootData)
Storage_RootData.GetHandle = new_instancemethod(_Storage.Storage_RootData_GetHandle, None, Storage_RootData)
Storage_RootData_swigregister = _Storage.Storage_RootData_swigregister
Storage_RootData_swigregister(Storage_RootData)

class Handle_Storage_RootData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_RootData_swiginit(self, _Storage.new_Handle_Storage_RootData(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_RootData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_RootData.Nullify = new_instancemethod(_Storage.Handle_Storage_RootData_Nullify, None, Handle_Storage_RootData)
Handle_Storage_RootData.IsNull = new_instancemethod(_Storage.Handle_Storage_RootData_IsNull, None, Handle_Storage_RootData)
Handle_Storage_RootData.GetObject = new_instancemethod(_Storage.Handle_Storage_RootData_GetObject, None, Handle_Storage_RootData)
Handle_Storage_RootData._kill_pointed = new_instancemethod(_Storage.Handle_Storage_RootData__kill_pointed, None, Handle_Storage_RootData)
Handle_Storage_RootData_swigregister = _Storage.Handle_Storage_RootData_swigregister
Handle_Storage_RootData_swigregister(Handle_Storage_RootData)

def Handle_Storage_RootData_DownCast(AnObject):
    return _Storage.Handle_Storage_RootData_DownCast(AnObject)
Handle_Storage_RootData_DownCast = _Storage.Handle_Storage_RootData_DownCast

class Storage_Schema(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Builds a storage/retrieval algorithm based on a given data schema. Example For example, if ShapeSchema is the class inheriting from Storage_Schema and containing the description of your application data schema, you create a storage/retrieval algorithm as follows: Handle_ShapeSchema s = new ShapeSchema; -------- -- USER API -- -------------------------------------------------------------- -------- --

        :rtype: None

        """
        _Storage.Storage_Schema_swiginit(self, _Storage.new_Storage_Schema(*args))

    def SetVersion(self, *args):
        """
        * returns version of the schema

        :param aVersion:
        :type aVersion: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Schema_SetVersion(self, *args)


    def Version(self, *args):
        """
        * returns the version of the schema

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Schema_Version(self, *args)


    def SetName(self, *args):
        """
        * set the schema's name

        :param aSchemaName:
        :type aSchemaName: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Schema_SetName(self, *args)


    def Name(self, *args):
        """
        * returns the schema's name

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Schema_Name(self, *args)


    def Write(self, *args):
        """
        * Writes the data aggregated in aData into the container defined by the driver s. The storage operation is performed according to the data schema with which this algorithm is working. Note: aData may aggregate several root objects to be stored together.

        :param s:
        :type s: Storage_BaseDriver &
        :param aData:
        :type aData: Handle_Storage_Data &
        :rtype: None

        """
        return _Storage.Storage_Schema_Write(self, *args)


    def Read(self, *args):
        """
        * Returns the data read from the container defined by the driver s. The retrieval operation is performed according to the data schema with which this algorithm is working. These data are aggregated in a Storage_Data object which may be browsed in order to extract the root objects from the container.

        :param s:
        :type s: Storage_BaseDriver &
        :rtype: Handle_Storage_Data

        """
        return _Storage.Storage_Schema_Read(self, *args)


    def ReadHeaderSection(self, *args):
        """
        * read the header part of the stream Arguments: s: driver to read

        :param s:
        :type s: Storage_BaseDriver &
        :rtype: Handle_Storage_HeaderData

        """
        return _Storage.Storage_Schema_ReadHeaderSection(self, *args)


    def ReadTypeSection(self, *args):
        """
        * fill the TypeData with the names of the type used in a stream Arguments: s: driver to read

        :param s:
        :type s: Storage_BaseDriver &
        :rtype: Handle_Storage_TypeData

        """
        return _Storage.Storage_Schema_ReadTypeSection(self, *args)


    def ReadRootSection(self, *args):
        """
        * read root part of the file Arguments: s: driver to read

        :param s:
        :type s: Storage_BaseDriver &
        :rtype: Handle_Storage_RootData

        """
        return _Storage.Storage_Schema_ReadRootSection(self, *args)


    def SchemaKnownTypes(self, *args):
        """
        * returns the known types of a schema

        :rtype: TColStd_SequenceOfAsciiString

        """
        return _Storage.Storage_Schema_SchemaKnownTypes(self, *args)


    def HasUnknownType(self, *args):
        """
        * indicates whether the are types in the driver which are not known from the schema and for which no callbacks have been set. The unknown types can be read in <theUnknownTypes>.

        :param aDriver:
        :type aDriver: Storage_BaseDriver &
        :param theUnknownTypes:
        :type theUnknownTypes: TColStd_SequenceOfAsciiString &
        :rtype: bool

        """
        return _Storage.Storage_Schema_HasUnknownType(self, *args)


    def GetAllSchemaKnownTypes(self, *args):
        """
        * returns the all known types of a schema and their nested schemes.

        :rtype: Handle_TColStd_HSequenceOfAsciiString

        """
        return _Storage.Storage_Schema_GetAllSchemaKnownTypes(self, *args)


    def SetNestedSchemas(self, *args):
        """
        :param theSchemas:
        :type theSchemas: Handle_Storage_HArrayOfSchema &
        :rtype: None

        """
        return _Storage.Storage_Schema_SetNestedSchemas(self, *args)


    def ClearNestedSchemas(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_Schema_ClearNestedSchemas(self, *args)


    def NestedSchemas(self, *args):
        """
        :rtype: Handle_Storage_HArrayOfSchema

        """
        return _Storage.Storage_Schema_NestedSchemas(self, *args)


    def ICreationDate(*args):
        """
        * return a current date string

        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_Schema_ICreationDate(*args)

    ICreationDate = staticmethod(ICreationDate)

    def CheckTypeMigration(*args):
        """
        * returns True if theType migration is identified the callback support provides a way to read a file with a incomplete schema. ex. : A file contains 3 types a,b and c. The application's schema contains only 2 type a and b. If you try to read the file in the application, you will have an error.To bypass this problem you can give to your application's schema a callback used when the schema dosent know how to handle this type.

        :param theTypeName:
        :type theTypeName: TCollection_AsciiString &
        :param theNewName:
        :type theNewName: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_Schema_CheckTypeMigration(*args)

    CheckTypeMigration = staticmethod(CheckTypeMigration)

    def AddReadUnknownTypeCallBack(self, *args):
        """
        * add two functions to the callback list

        :param aTypeName:
        :type aTypeName: TCollection_AsciiString &
        :param aCallBack:
        :type aCallBack: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_Schema_AddReadUnknownTypeCallBack(self, *args)


    def RemoveReadUnknownTypeCallBack(self, *args):
        """
        * remove a callback for a type

        :param aTypeName:
        :type aTypeName: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_Schema_RemoveReadUnknownTypeCallBack(self, *args)


    def InstalledCallBackList(self, *args):
        """
        * returns a list of type name with installed callback.

        :rtype: Handle_TColStd_HSequenceOfAsciiString

        """
        return _Storage.Storage_Schema_InstalledCallBackList(self, *args)


    def ClearCallBackList(self, *args):
        """
        * clear all callback from schema instance.

        :rtype: None

        """
        return _Storage.Storage_Schema_ClearCallBackList(self, *args)


    def UseDefaultCallBack(self, *args):
        """
        * install a callback for all unknown type. the objects with unknown types will be skipped. (look SkipObject method in BaseDriver)

        :rtype: None

        """
        return _Storage.Storage_Schema_UseDefaultCallBack(self, *args)


    def DontUseDefaultCallBack(self, *args):
        """
        * tells schema to uninstall the default callback.

        :rtype: None

        """
        return _Storage.Storage_Schema_DontUseDefaultCallBack(self, *args)


    def IsUsingDefaultCallBack(self, *args):
        """
        * ask if the schema is using the default callback.

        :rtype: bool

        """
        return _Storage.Storage_Schema_IsUsingDefaultCallBack(self, *args)


    def SetDefaultCallBack(self, *args):
        """
        * overload the default function for build.(use to set an error message or skip an object while reading an unknown type).

        :param f:
        :type f: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_Schema_SetDefaultCallBack(self, *args)


    def ResetDefaultCallBack(self, *args):
        """
        * reset the default function defined by Storage package.

        :rtype: None

        """
        return _Storage.Storage_Schema_ResetDefaultCallBack(self, *args)


    def DefaultCallBack(self, *args):
        """
        * returns the read function used when the UseDefaultCallBack() is set.

        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_Schema_DefaultCallBack(self, *args)


    def CallBackSelection(self, *args):
        """
        :param tName:
        :type tName: TCollection_AsciiString &
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_Schema_CallBackSelection(self, *args)


    def AddTypeSelection(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_Schema_AddTypeSelection(self, *args)


    def WritePersistentObjectHeader(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :param s:
        :type s: Storage_BaseDriver &
        :rtype: None

        """
        return _Storage.Storage_Schema_WritePersistentObjectHeader(self, *args)


    def ReadPersistentObjectHeader(self, *args):
        """
        :param s:
        :type s: Storage_BaseDriver &
        :rtype: None

        """
        return _Storage.Storage_Schema_ReadPersistentObjectHeader(self, *args)


    def WritePersistentReference(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :param s:
        :type s: Storage_BaseDriver &
        :rtype: None

        """
        return _Storage.Storage_Schema_WritePersistentReference(self, *args)


    def ReadPersistentReference(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :param s:
        :type s: Storage_BaseDriver &
        :rtype: None

        """
        return _Storage.Storage_Schema_ReadPersistentReference(self, *args)


    def AddPersistent(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :param tName:
        :type tName: char *
        :rtype: bool

        """
        return _Storage.Storage_Schema_AddPersistent(self, *args)


    def PersistentToAdd(self, *args):
        """
        :param sp:
        :type sp: Handle_Standard_Persistent &
        :rtype: bool

        """
        return _Storage.Storage_Schema_PersistentToAdd(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_Schema self)"""
        return _Storage.Storage_Schema__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_Schema self) -> Handle_Storage_Schema"""
        return _Storage.Storage_Schema_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_Schema.SetVersion = new_instancemethod(_Storage.Storage_Schema_SetVersion, None, Storage_Schema)
Storage_Schema.Version = new_instancemethod(_Storage.Storage_Schema_Version, None, Storage_Schema)
Storage_Schema.SetName = new_instancemethod(_Storage.Storage_Schema_SetName, None, Storage_Schema)
Storage_Schema.Name = new_instancemethod(_Storage.Storage_Schema_Name, None, Storage_Schema)
Storage_Schema.Write = new_instancemethod(_Storage.Storage_Schema_Write, None, Storage_Schema)
Storage_Schema.Read = new_instancemethod(_Storage.Storage_Schema_Read, None, Storage_Schema)
Storage_Schema.ReadHeaderSection = new_instancemethod(_Storage.Storage_Schema_ReadHeaderSection, None, Storage_Schema)
Storage_Schema.ReadTypeSection = new_instancemethod(_Storage.Storage_Schema_ReadTypeSection, None, Storage_Schema)
Storage_Schema.ReadRootSection = new_instancemethod(_Storage.Storage_Schema_ReadRootSection, None, Storage_Schema)
Storage_Schema.SchemaKnownTypes = new_instancemethod(_Storage.Storage_Schema_SchemaKnownTypes, None, Storage_Schema)
Storage_Schema.HasUnknownType = new_instancemethod(_Storage.Storage_Schema_HasUnknownType, None, Storage_Schema)
Storage_Schema.GetAllSchemaKnownTypes = new_instancemethod(_Storage.Storage_Schema_GetAllSchemaKnownTypes, None, Storage_Schema)
Storage_Schema.SetNestedSchemas = new_instancemethod(_Storage.Storage_Schema_SetNestedSchemas, None, Storage_Schema)
Storage_Schema.ClearNestedSchemas = new_instancemethod(_Storage.Storage_Schema_ClearNestedSchemas, None, Storage_Schema)
Storage_Schema.NestedSchemas = new_instancemethod(_Storage.Storage_Schema_NestedSchemas, None, Storage_Schema)
Storage_Schema.AddReadUnknownTypeCallBack = new_instancemethod(_Storage.Storage_Schema_AddReadUnknownTypeCallBack, None, Storage_Schema)
Storage_Schema.RemoveReadUnknownTypeCallBack = new_instancemethod(_Storage.Storage_Schema_RemoveReadUnknownTypeCallBack, None, Storage_Schema)
Storage_Schema.InstalledCallBackList = new_instancemethod(_Storage.Storage_Schema_InstalledCallBackList, None, Storage_Schema)
Storage_Schema.ClearCallBackList = new_instancemethod(_Storage.Storage_Schema_ClearCallBackList, None, Storage_Schema)
Storage_Schema.UseDefaultCallBack = new_instancemethod(_Storage.Storage_Schema_UseDefaultCallBack, None, Storage_Schema)
Storage_Schema.DontUseDefaultCallBack = new_instancemethod(_Storage.Storage_Schema_DontUseDefaultCallBack, None, Storage_Schema)
Storage_Schema.IsUsingDefaultCallBack = new_instancemethod(_Storage.Storage_Schema_IsUsingDefaultCallBack, None, Storage_Schema)
Storage_Schema.SetDefaultCallBack = new_instancemethod(_Storage.Storage_Schema_SetDefaultCallBack, None, Storage_Schema)
Storage_Schema.ResetDefaultCallBack = new_instancemethod(_Storage.Storage_Schema_ResetDefaultCallBack, None, Storage_Schema)
Storage_Schema.DefaultCallBack = new_instancemethod(_Storage.Storage_Schema_DefaultCallBack, None, Storage_Schema)
Storage_Schema.CallBackSelection = new_instancemethod(_Storage.Storage_Schema_CallBackSelection, None, Storage_Schema)
Storage_Schema.AddTypeSelection = new_instancemethod(_Storage.Storage_Schema_AddTypeSelection, None, Storage_Schema)
Storage_Schema.WritePersistentObjectHeader = new_instancemethod(_Storage.Storage_Schema_WritePersistentObjectHeader, None, Storage_Schema)
Storage_Schema.ReadPersistentObjectHeader = new_instancemethod(_Storage.Storage_Schema_ReadPersistentObjectHeader, None, Storage_Schema)
Storage_Schema.WritePersistentReference = new_instancemethod(_Storage.Storage_Schema_WritePersistentReference, None, Storage_Schema)
Storage_Schema.ReadPersistentReference = new_instancemethod(_Storage.Storage_Schema_ReadPersistentReference, None, Storage_Schema)
Storage_Schema.AddPersistent = new_instancemethod(_Storage.Storage_Schema_AddPersistent, None, Storage_Schema)
Storage_Schema.PersistentToAdd = new_instancemethod(_Storage.Storage_Schema_PersistentToAdd, None, Storage_Schema)
Storage_Schema._kill_pointed = new_instancemethod(_Storage.Storage_Schema__kill_pointed, None, Storage_Schema)
Storage_Schema.GetHandle = new_instancemethod(_Storage.Storage_Schema_GetHandle, None, Storage_Schema)
Storage_Schema_swigregister = _Storage.Storage_Schema_swigregister
Storage_Schema_swigregister(Storage_Schema)

def Storage_Schema_ICreationDate(*args):
    """
    * return a current date string

    :rtype: TCollection_AsciiString

    """
    return _Storage.Storage_Schema_ICreationDate(*args)

def Storage_Schema_CheckTypeMigration(*args):
    """
    * returns True if theType migration is identified the callback support provides a way to read a file with a incomplete schema. ex. : A file contains 3 types a,b and c. The application's schema contains only 2 type a and b. If you try to read the file in the application, you will have an error.To bypass this problem you can give to your application's schema a callback used when the schema dosent know how to handle this type.

    :param theTypeName:
    :type theTypeName: TCollection_AsciiString &
    :param theNewName:
    :type theNewName: TCollection_AsciiString &
    :rtype: bool

    """
    return _Storage.Storage_Schema_CheckTypeMigration(*args)

class Handle_Storage_Schema(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_Schema_swiginit(self, _Storage.new_Handle_Storage_Schema(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_Schema_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_Schema.Nullify = new_instancemethod(_Storage.Handle_Storage_Schema_Nullify, None, Handle_Storage_Schema)
Handle_Storage_Schema.IsNull = new_instancemethod(_Storage.Handle_Storage_Schema_IsNull, None, Handle_Storage_Schema)
Handle_Storage_Schema.GetObject = new_instancemethod(_Storage.Handle_Storage_Schema_GetObject, None, Handle_Storage_Schema)
Handle_Storage_Schema._kill_pointed = new_instancemethod(_Storage.Handle_Storage_Schema__kill_pointed, None, Handle_Storage_Schema)
Handle_Storage_Schema_swigregister = _Storage.Handle_Storage_Schema_swigregister
Handle_Storage_Schema_swigregister(Handle_Storage_Schema)

def Handle_Storage_Schema_DownCast(AnObject):
    return _Storage.Handle_Storage_Schema_DownCast(AnObject)
Handle_Storage_Schema_DownCast = _Storage.Handle_Storage_Schema_DownCast

class Storage_SeqOfCallBack(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_SeqOfCallBack_swiginit(self, _Storage.new_Storage_SeqOfCallBack(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfCallBack &
        :rtype: Storage_SeqOfCallBack

        """
        return _Storage.Storage_SeqOfCallBack_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfCallBack &
        :rtype: Storage_SeqOfCallBack

        """
        return _Storage.Storage_SeqOfCallBack_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Storage_CallBack &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Storage_CallBack &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Storage_CallBack &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Storage_CallBack &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_SeqOfCallBack_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_SeqOfCallBack_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Storage_SeqOfCallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_SeqOfCallBack_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_SeqOfCallBack_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Storage.Storage_SeqOfCallBack_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SeqOfCallBack.Clear = new_instancemethod(_Storage.Storage_SeqOfCallBack_Clear, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Assign = new_instancemethod(_Storage.Storage_SeqOfCallBack_Assign, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Set = new_instancemethod(_Storage.Storage_SeqOfCallBack_Set, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Append = new_instancemethod(_Storage.Storage_SeqOfCallBack_Append, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Prepend = new_instancemethod(_Storage.Storage_SeqOfCallBack_Prepend, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.InsertBefore = new_instancemethod(_Storage.Storage_SeqOfCallBack_InsertBefore, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.InsertAfter = new_instancemethod(_Storage.Storage_SeqOfCallBack_InsertAfter, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.First = new_instancemethod(_Storage.Storage_SeqOfCallBack_First, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Last = new_instancemethod(_Storage.Storage_SeqOfCallBack_Last, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Split = new_instancemethod(_Storage.Storage_SeqOfCallBack_Split, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Value = new_instancemethod(_Storage.Storage_SeqOfCallBack_Value, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.SetValue = new_instancemethod(_Storage.Storage_SeqOfCallBack_SetValue, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.ChangeValue = new_instancemethod(_Storage.Storage_SeqOfCallBack_ChangeValue, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack.Remove = new_instancemethod(_Storage.Storage_SeqOfCallBack_Remove, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_SeqOfCallBack__kill_pointed, None, Storage_SeqOfCallBack)
Storage_SeqOfCallBack_swigregister = _Storage.Storage_SeqOfCallBack_swigregister
Storage_SeqOfCallBack_swigregister(Storage_SeqOfCallBack)

class Storage_SeqOfPersistent(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_SeqOfPersistent_swiginit(self, _Storage.new_Storage_SeqOfPersistent(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfPersistent &
        :rtype: Storage_SeqOfPersistent

        """
        return _Storage.Storage_SeqOfPersistent_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfPersistent &
        :rtype: Storage_SeqOfPersistent

        """
        return _Storage.Storage_SeqOfPersistent_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Standard_Persistent &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Standard_Persistent &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Standard_Persistent &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Standard_Persistent &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_SeqOfPersistent_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_SeqOfPersistent_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Storage_SeqOfPersistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_SeqOfPersistent_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Standard_Persistent &
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_SeqOfPersistent_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Storage.Storage_SeqOfPersistent_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SeqOfPersistent.Clear = new_instancemethod(_Storage.Storage_SeqOfPersistent_Clear, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Assign = new_instancemethod(_Storage.Storage_SeqOfPersistent_Assign, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Set = new_instancemethod(_Storage.Storage_SeqOfPersistent_Set, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Append = new_instancemethod(_Storage.Storage_SeqOfPersistent_Append, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Prepend = new_instancemethod(_Storage.Storage_SeqOfPersistent_Prepend, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.InsertBefore = new_instancemethod(_Storage.Storage_SeqOfPersistent_InsertBefore, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.InsertAfter = new_instancemethod(_Storage.Storage_SeqOfPersistent_InsertAfter, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.First = new_instancemethod(_Storage.Storage_SeqOfPersistent_First, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Last = new_instancemethod(_Storage.Storage_SeqOfPersistent_Last, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Split = new_instancemethod(_Storage.Storage_SeqOfPersistent_Split, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Value = new_instancemethod(_Storage.Storage_SeqOfPersistent_Value, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.SetValue = new_instancemethod(_Storage.Storage_SeqOfPersistent_SetValue, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.ChangeValue = new_instancemethod(_Storage.Storage_SeqOfPersistent_ChangeValue, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent.Remove = new_instancemethod(_Storage.Storage_SeqOfPersistent_Remove, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent._kill_pointed = new_instancemethod(_Storage.Storage_SeqOfPersistent__kill_pointed, None, Storage_SeqOfPersistent)
Storage_SeqOfPersistent_swigregister = _Storage.Storage_SeqOfPersistent_swigregister
Storage_SeqOfPersistent_swigregister(Storage_SeqOfPersistent)

class Storage_SeqOfRoot(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_SeqOfRoot_swiginit(self, _Storage.new_Storage_SeqOfRoot(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfRoot &
        :rtype: Storage_SeqOfRoot

        """
        return _Storage.Storage_SeqOfRoot_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Storage_SeqOfRoot &
        :rtype: Storage_SeqOfRoot

        """
        return _Storage.Storage_SeqOfRoot_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Storage_Root &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Storage_Root &
        :rtype: None

        :param S:
        :type S: Storage_SeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Storage_Root &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Storage_Root &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Storage_SeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_SeqOfRoot_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_SeqOfRoot_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Storage_SeqOfRoot &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_SeqOfRoot_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Storage_Root &
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_SeqOfRoot_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Storage.Storage_SeqOfRoot_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SeqOfRoot.Clear = new_instancemethod(_Storage.Storage_SeqOfRoot_Clear, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Assign = new_instancemethod(_Storage.Storage_SeqOfRoot_Assign, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Set = new_instancemethod(_Storage.Storage_SeqOfRoot_Set, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Append = new_instancemethod(_Storage.Storage_SeqOfRoot_Append, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Prepend = new_instancemethod(_Storage.Storage_SeqOfRoot_Prepend, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.InsertBefore = new_instancemethod(_Storage.Storage_SeqOfRoot_InsertBefore, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.InsertAfter = new_instancemethod(_Storage.Storage_SeqOfRoot_InsertAfter, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.First = new_instancemethod(_Storage.Storage_SeqOfRoot_First, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Last = new_instancemethod(_Storage.Storage_SeqOfRoot_Last, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Split = new_instancemethod(_Storage.Storage_SeqOfRoot_Split, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Value = new_instancemethod(_Storage.Storage_SeqOfRoot_Value, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.SetValue = new_instancemethod(_Storage.Storage_SeqOfRoot_SetValue, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.ChangeValue = new_instancemethod(_Storage.Storage_SeqOfRoot_ChangeValue, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Remove = new_instancemethod(_Storage.Storage_SeqOfRoot_Remove, None, Storage_SeqOfRoot)
Storage_SeqOfRoot._kill_pointed = new_instancemethod(_Storage.Storage_SeqOfRoot__kill_pointed, None, Storage_SeqOfRoot)
Storage_SeqOfRoot_swigregister = _Storage.Storage_SeqOfRoot_swigregister
Storage_SeqOfRoot_swigregister(Storage_SeqOfRoot)

class Storage_SequenceNodeOfSeqOfCallBack(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Storage_CallBack &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Storage.Storage_SequenceNodeOfSeqOfCallBack_swiginit(self, _Storage.new_Storage_SequenceNodeOfSeqOfCallBack(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_SequenceNodeOfSeqOfCallBack_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_SequenceNodeOfSeqOfCallBack self)"""
        return _Storage.Storage_SequenceNodeOfSeqOfCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_SequenceNodeOfSeqOfCallBack self) -> Handle_Storage_SequenceNodeOfSeqOfCallBack"""
        return _Storage.Storage_SequenceNodeOfSeqOfCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SequenceNodeOfSeqOfCallBack.Value = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfCallBack_Value, None, Storage_SequenceNodeOfSeqOfCallBack)
Storage_SequenceNodeOfSeqOfCallBack._kill_pointed = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfCallBack__kill_pointed, None, Storage_SequenceNodeOfSeqOfCallBack)
Storage_SequenceNodeOfSeqOfCallBack.GetHandle = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfCallBack_GetHandle, None, Storage_SequenceNodeOfSeqOfCallBack)
Storage_SequenceNodeOfSeqOfCallBack_swigregister = _Storage.Storage_SequenceNodeOfSeqOfCallBack_swigregister
Storage_SequenceNodeOfSeqOfCallBack_swigregister(Storage_SequenceNodeOfSeqOfCallBack)

class Handle_Storage_SequenceNodeOfSeqOfCallBack(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_swiginit(self, _Storage.new_Handle_Storage_SequenceNodeOfSeqOfCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_SequenceNodeOfSeqOfCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_Nullify, None, Handle_Storage_SequenceNodeOfSeqOfCallBack)
Handle_Storage_SequenceNodeOfSeqOfCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_IsNull, None, Handle_Storage_SequenceNodeOfSeqOfCallBack)
Handle_Storage_SequenceNodeOfSeqOfCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_GetObject, None, Handle_Storage_SequenceNodeOfSeqOfCallBack)
Handle_Storage_SequenceNodeOfSeqOfCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack__kill_pointed, None, Handle_Storage_SequenceNodeOfSeqOfCallBack)
Handle_Storage_SequenceNodeOfSeqOfCallBack_swigregister = _Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_swigregister
Handle_Storage_SequenceNodeOfSeqOfCallBack_swigregister(Handle_Storage_SequenceNodeOfSeqOfCallBack)

def Handle_Storage_SequenceNodeOfSeqOfCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_DownCast(AnObject)
Handle_Storage_SequenceNodeOfSeqOfCallBack_DownCast = _Storage.Handle_Storage_SequenceNodeOfSeqOfCallBack_DownCast

class Storage_SequenceNodeOfSeqOfPersistent(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Standard_Persistent &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Storage.Storage_SequenceNodeOfSeqOfPersistent_swiginit(self, _Storage.new_Storage_SequenceNodeOfSeqOfPersistent(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Standard_Persistent

        """
        return _Storage.Storage_SequenceNodeOfSeqOfPersistent_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_SequenceNodeOfSeqOfPersistent self)"""
        return _Storage.Storage_SequenceNodeOfSeqOfPersistent__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_SequenceNodeOfSeqOfPersistent self) -> Handle_Storage_SequenceNodeOfSeqOfPersistent"""
        return _Storage.Storage_SequenceNodeOfSeqOfPersistent_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SequenceNodeOfSeqOfPersistent.Value = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfPersistent_Value, None, Storage_SequenceNodeOfSeqOfPersistent)
Storage_SequenceNodeOfSeqOfPersistent._kill_pointed = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfPersistent__kill_pointed, None, Storage_SequenceNodeOfSeqOfPersistent)
Storage_SequenceNodeOfSeqOfPersistent.GetHandle = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfPersistent_GetHandle, None, Storage_SequenceNodeOfSeqOfPersistent)
Storage_SequenceNodeOfSeqOfPersistent_swigregister = _Storage.Storage_SequenceNodeOfSeqOfPersistent_swigregister
Storage_SequenceNodeOfSeqOfPersistent_swigregister(Storage_SequenceNodeOfSeqOfPersistent)

class Handle_Storage_SequenceNodeOfSeqOfPersistent(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_swiginit(self, _Storage.new_Handle_Storage_SequenceNodeOfSeqOfPersistent(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_SequenceNodeOfSeqOfPersistent.Nullify = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_Nullify, None, Handle_Storage_SequenceNodeOfSeqOfPersistent)
Handle_Storage_SequenceNodeOfSeqOfPersistent.IsNull = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_IsNull, None, Handle_Storage_SequenceNodeOfSeqOfPersistent)
Handle_Storage_SequenceNodeOfSeqOfPersistent.GetObject = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_GetObject, None, Handle_Storage_SequenceNodeOfSeqOfPersistent)
Handle_Storage_SequenceNodeOfSeqOfPersistent._kill_pointed = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent__kill_pointed, None, Handle_Storage_SequenceNodeOfSeqOfPersistent)
Handle_Storage_SequenceNodeOfSeqOfPersistent_swigregister = _Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_swigregister
Handle_Storage_SequenceNodeOfSeqOfPersistent_swigregister(Handle_Storage_SequenceNodeOfSeqOfPersistent)

def Handle_Storage_SequenceNodeOfSeqOfPersistent_DownCast(AnObject):
    return _Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_DownCast(AnObject)
Handle_Storage_SequenceNodeOfSeqOfPersistent_DownCast = _Storage.Handle_Storage_SequenceNodeOfSeqOfPersistent_DownCast

class Storage_SequenceNodeOfSeqOfRoot(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Storage_Root &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Storage.Storage_SequenceNodeOfSeqOfRoot_swiginit(self, _Storage.new_Storage_SequenceNodeOfSeqOfRoot(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Storage_Root

        """
        return _Storage.Storage_SequenceNodeOfSeqOfRoot_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_SequenceNodeOfSeqOfRoot self)"""
        return _Storage.Storage_SequenceNodeOfSeqOfRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_SequenceNodeOfSeqOfRoot self) -> Handle_Storage_SequenceNodeOfSeqOfRoot"""
        return _Storage.Storage_SequenceNodeOfSeqOfRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_SequenceNodeOfSeqOfRoot.Value = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfRoot_Value, None, Storage_SequenceNodeOfSeqOfRoot)
Storage_SequenceNodeOfSeqOfRoot._kill_pointed = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfRoot__kill_pointed, None, Storage_SequenceNodeOfSeqOfRoot)
Storage_SequenceNodeOfSeqOfRoot.GetHandle = new_instancemethod(_Storage.Storage_SequenceNodeOfSeqOfRoot_GetHandle, None, Storage_SequenceNodeOfSeqOfRoot)
Storage_SequenceNodeOfSeqOfRoot_swigregister = _Storage.Storage_SequenceNodeOfSeqOfRoot_swigregister
Storage_SequenceNodeOfSeqOfRoot_swigregister(Storage_SequenceNodeOfSeqOfRoot)

class Handle_Storage_SequenceNodeOfSeqOfRoot(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_swiginit(self, _Storage.new_Handle_Storage_SequenceNodeOfSeqOfRoot(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_SequenceNodeOfSeqOfRoot.Nullify = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_Nullify, None, Handle_Storage_SequenceNodeOfSeqOfRoot)
Handle_Storage_SequenceNodeOfSeqOfRoot.IsNull = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_IsNull, None, Handle_Storage_SequenceNodeOfSeqOfRoot)
Handle_Storage_SequenceNodeOfSeqOfRoot.GetObject = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_GetObject, None, Handle_Storage_SequenceNodeOfSeqOfRoot)
Handle_Storage_SequenceNodeOfSeqOfRoot._kill_pointed = new_instancemethod(_Storage.Handle_Storage_SequenceNodeOfSeqOfRoot__kill_pointed, None, Handle_Storage_SequenceNodeOfSeqOfRoot)
Handle_Storage_SequenceNodeOfSeqOfRoot_swigregister = _Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_swigregister
Handle_Storage_SequenceNodeOfSeqOfRoot_swigregister(Handle_Storage_SequenceNodeOfSeqOfRoot)

def Handle_Storage_SequenceNodeOfSeqOfRoot_DownCast(AnObject):
    return _Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_DownCast(AnObject)
Handle_Storage_SequenceNodeOfSeqOfRoot_DownCast = _Storage.Handle_Storage_SequenceNodeOfSeqOfRoot_DownCast

class Storage_TypeData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_TypeData_swiginit(self, _Storage.new_Storage_TypeData(*args))

    def NumberOfTypes(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_TypeData_NumberOfTypes(self, *args)


    def IsType(self, *args):
        """
        :param aName:
        :type aName: TCollection_AsciiString &
        :rtype: bool

        """
        return _Storage.Storage_TypeData_IsType(self, *args)


    def Types(self, *args):
        """
        :rtype: Handle_TColStd_HSequenceOfAsciiString

        """
        return _Storage.Storage_TypeData_Types(self, *args)


    def ErrorStatus(self, *args):
        """
        :rtype: Storage_Error

        """
        return _Storage.Storage_TypeData_ErrorStatus(self, *args)


    def ErrorStatusExtension(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_TypeData_ErrorStatusExtension(self, *args)


    def ClearErrorStatus(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_TypeData_ClearErrorStatus(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Storage.Storage_TypeData_Clear(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_TypeData self)"""
        return _Storage.Storage_TypeData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_TypeData self) -> Handle_Storage_TypeData"""
        return _Storage.Storage_TypeData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_TypeData.NumberOfTypes = new_instancemethod(_Storage.Storage_TypeData_NumberOfTypes, None, Storage_TypeData)
Storage_TypeData.IsType = new_instancemethod(_Storage.Storage_TypeData_IsType, None, Storage_TypeData)
Storage_TypeData.Types = new_instancemethod(_Storage.Storage_TypeData_Types, None, Storage_TypeData)
Storage_TypeData.ErrorStatus = new_instancemethod(_Storage.Storage_TypeData_ErrorStatus, None, Storage_TypeData)
Storage_TypeData.ErrorStatusExtension = new_instancemethod(_Storage.Storage_TypeData_ErrorStatusExtension, None, Storage_TypeData)
Storage_TypeData.ClearErrorStatus = new_instancemethod(_Storage.Storage_TypeData_ClearErrorStatus, None, Storage_TypeData)
Storage_TypeData.Clear = new_instancemethod(_Storage.Storage_TypeData_Clear, None, Storage_TypeData)
Storage_TypeData._kill_pointed = new_instancemethod(_Storage.Storage_TypeData__kill_pointed, None, Storage_TypeData)
Storage_TypeData.GetHandle = new_instancemethod(_Storage.Storage_TypeData_GetHandle, None, Storage_TypeData)
Storage_TypeData_swigregister = _Storage.Storage_TypeData_swigregister
Storage_TypeData_swigregister(Storage_TypeData)

class Handle_Storage_TypeData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_TypeData_swiginit(self, _Storage.new_Handle_Storage_TypeData(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_TypeData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_TypeData.Nullify = new_instancemethod(_Storage.Handle_Storage_TypeData_Nullify, None, Handle_Storage_TypeData)
Handle_Storage_TypeData.IsNull = new_instancemethod(_Storage.Handle_Storage_TypeData_IsNull, None, Handle_Storage_TypeData)
Handle_Storage_TypeData.GetObject = new_instancemethod(_Storage.Handle_Storage_TypeData_GetObject, None, Handle_Storage_TypeData)
Handle_Storage_TypeData._kill_pointed = new_instancemethod(_Storage.Handle_Storage_TypeData__kill_pointed, None, Handle_Storage_TypeData)
Handle_Storage_TypeData_swigregister = _Storage.Handle_Storage_TypeData_swigregister
Handle_Storage_TypeData_swigregister(Handle_Storage_TypeData)

def Handle_Storage_TypeData_DownCast(AnObject):
    return _Storage.Handle_Storage_TypeData_DownCast(AnObject)
Handle_Storage_TypeData_DownCast = _Storage.Handle_Storage_TypeData_DownCast

class Storage_TypedCallBack(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aTypeName:
        :type aTypeName: TCollection_AsciiString &
        :param aCallBack:
        :type aCallBack: Handle_Storage_CallBack &
        :rtype: None

        """
        _Storage.Storage_TypedCallBack_swiginit(self, _Storage.new_Storage_TypedCallBack(*args))

    def SetType(self, *args):
        """
        :param aType:
        :type aType: TCollection_AsciiString &
        :rtype: None

        """
        return _Storage.Storage_TypedCallBack_SetType(self, *args)


    def Type(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _Storage.Storage_TypedCallBack_Type(self, *args)


    def SetCallBack(self, *args):
        """
        :param aCallBack:
        :type aCallBack: Handle_Storage_CallBack &
        :rtype: None

        """
        return _Storage.Storage_TypedCallBack_SetCallBack(self, *args)


    def CallBack(self, *args):
        """
        :rtype: Handle_Storage_CallBack

        """
        return _Storage.Storage_TypedCallBack_CallBack(self, *args)


    def SetIndex(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _Storage.Storage_TypedCallBack_SetIndex(self, *args)


    def Index(self, *args):
        """
        :rtype: int

        """
        return _Storage.Storage_TypedCallBack_Index(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Storage_TypedCallBack self)"""
        return _Storage.Storage_TypedCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_TypedCallBack self) -> Handle_Storage_TypedCallBack"""
        return _Storage.Storage_TypedCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_TypedCallBack.SetType = new_instancemethod(_Storage.Storage_TypedCallBack_SetType, None, Storage_TypedCallBack)
Storage_TypedCallBack.Type = new_instancemethod(_Storage.Storage_TypedCallBack_Type, None, Storage_TypedCallBack)
Storage_TypedCallBack.SetCallBack = new_instancemethod(_Storage.Storage_TypedCallBack_SetCallBack, None, Storage_TypedCallBack)
Storage_TypedCallBack.CallBack = new_instancemethod(_Storage.Storage_TypedCallBack_CallBack, None, Storage_TypedCallBack)
Storage_TypedCallBack.SetIndex = new_instancemethod(_Storage.Storage_TypedCallBack_SetIndex, None, Storage_TypedCallBack)
Storage_TypedCallBack.Index = new_instancemethod(_Storage.Storage_TypedCallBack_Index, None, Storage_TypedCallBack)
Storage_TypedCallBack._kill_pointed = new_instancemethod(_Storage.Storage_TypedCallBack__kill_pointed, None, Storage_TypedCallBack)
Storage_TypedCallBack.GetHandle = new_instancemethod(_Storage.Storage_TypedCallBack_GetHandle, None, Storage_TypedCallBack)
Storage_TypedCallBack_swigregister = _Storage.Storage_TypedCallBack_swigregister
Storage_TypedCallBack_swigregister(Storage_TypedCallBack)

class Handle_Storage_TypedCallBack(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_TypedCallBack_swiginit(self, _Storage.new_Handle_Storage_TypedCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_TypedCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_TypedCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_TypedCallBack_Nullify, None, Handle_Storage_TypedCallBack)
Handle_Storage_TypedCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_TypedCallBack_IsNull, None, Handle_Storage_TypedCallBack)
Handle_Storage_TypedCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_TypedCallBack_GetObject, None, Handle_Storage_TypedCallBack)
Handle_Storage_TypedCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_TypedCallBack__kill_pointed, None, Handle_Storage_TypedCallBack)
Handle_Storage_TypedCallBack_swigregister = _Storage.Handle_Storage_TypedCallBack_swigregister
Handle_Storage_TypedCallBack_swigregister(Handle_Storage_TypedCallBack)

def Handle_Storage_TypedCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_TypedCallBack_DownCast(AnObject)
Handle_Storage_TypedCallBack_DownCast = _Storage.Handle_Storage_TypedCallBack_DownCast

class Storage_stCONSTclCOM(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_stCONSTclCOM._kill_pointed = new_instancemethod(_Storage.Storage_stCONSTclCOM__kill_pointed, None, Storage_stCONSTclCOM)
Storage_stCONSTclCOM_swigregister = _Storage.Storage_stCONSTclCOM_swigregister
Storage_stCONSTclCOM_swigregister(Storage_stCONSTclCOM)

class Storage_DefaultCallBack(Storage_CallBack):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Storage.Storage_DefaultCallBack_swiginit(self, _Storage.new_Storage_DefaultCallBack(*args))

    def _kill_pointed(self):
        """_kill_pointed(Storage_DefaultCallBack self)"""
        return _Storage.Storage_DefaultCallBack__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Storage_DefaultCallBack self) -> Handle_Storage_DefaultCallBack"""
        return _Storage.Storage_DefaultCallBack_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Storage_DefaultCallBack._kill_pointed = new_instancemethod(_Storage.Storage_DefaultCallBack__kill_pointed, None, Storage_DefaultCallBack)
Storage_DefaultCallBack.GetHandle = new_instancemethod(_Storage.Storage_DefaultCallBack_GetHandle, None, Storage_DefaultCallBack)
Storage_DefaultCallBack_swigregister = _Storage.Storage_DefaultCallBack_swigregister
Storage_DefaultCallBack_swigregister(Storage_DefaultCallBack)

class Handle_Storage_DefaultCallBack(Handle_Storage_CallBack):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Handle_Storage_DefaultCallBack_swiginit(self, _Storage.new_Handle_Storage_DefaultCallBack(*args))
    DownCast = staticmethod(_Storage.Handle_Storage_DefaultCallBack_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Storage_DefaultCallBack.Nullify = new_instancemethod(_Storage.Handle_Storage_DefaultCallBack_Nullify, None, Handle_Storage_DefaultCallBack)
Handle_Storage_DefaultCallBack.IsNull = new_instancemethod(_Storage.Handle_Storage_DefaultCallBack_IsNull, None, Handle_Storage_DefaultCallBack)
Handle_Storage_DefaultCallBack.GetObject = new_instancemethod(_Storage.Handle_Storage_DefaultCallBack_GetObject, None, Handle_Storage_DefaultCallBack)
Handle_Storage_DefaultCallBack._kill_pointed = new_instancemethod(_Storage.Handle_Storage_DefaultCallBack__kill_pointed, None, Handle_Storage_DefaultCallBack)
Handle_Storage_DefaultCallBack_swigregister = _Storage.Handle_Storage_DefaultCallBack_swigregister
Handle_Storage_DefaultCallBack_swigregister(Handle_Storage_DefaultCallBack)

def Handle_Storage_DefaultCallBack_DownCast(AnObject):
    return _Storage.Handle_Storage_DefaultCallBack_DownCast(AnObject)
Handle_Storage_DefaultCallBack_DownCast = _Storage.Handle_Storage_DefaultCallBack_DownCast



