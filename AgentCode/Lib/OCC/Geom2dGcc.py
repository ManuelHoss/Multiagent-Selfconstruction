# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dGcc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dGcc', [dirname(__file__)])
        except ImportError:
            import _Geom2dGcc
            return _Geom2dGcc
        if fp is not None:
            try:
                _mod = imp.load_module('_Geom2dGcc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Geom2dGcc = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dGcc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dGcc.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dGcc.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dGcc.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dGcc.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dGcc.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dGcc.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dGcc.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dGcc.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dGcc.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dGcc.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dGcc.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dGcc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Geom2dAdaptor
import OCC.Adaptor2d
import OCC.Standard
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom2d
import OCC.TColgp
import OCC.GccAna
import OCC.GccEnt
import OCC.GccInt
import OCC.math
import OCC.Adaptor3d
import OCC.Geom
import OCC.TopAbs
class geom2dgcc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Unqualified(*args):
        """
        * Constructs such a qualified curve that the relative position of the solution computed by a construction algorithm using the qualified curve to the circle or line is not qualified, i.e. all solutions apply. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Unqualified(Obj);

        :param Obj:
        :type Obj: Geom2dAdaptor_Curve &
        :rtype: Geom2dGcc_QualifiedCurve

        """
        return _Geom2dGcc.geom2dgcc_Unqualified(*args)

    Unqualified = staticmethod(Unqualified)

    def Enclosing(*args):
        """
        * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve encloses the curve. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Enclosing(Obj);

        :param Obj:
        :type Obj: Geom2dAdaptor_Curve &
        :rtype: Geom2dGcc_QualifiedCurve

        """
        return _Geom2dGcc.geom2dgcc_Enclosing(*args)

    Enclosing = staticmethod(Enclosing)

    def Enclosed(*args):
        """
        * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve is enclosed by the curve. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Enclosed(Obj);

        :param Obj:
        :type Obj: Geom2dAdaptor_Curve &
        :rtype: Geom2dGcc_QualifiedCurve

        """
        return _Geom2dGcc.geom2dgcc_Enclosed(*args)

    Enclosed = staticmethod(Enclosed)

    def Outside(*args):
        """
        * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve and the curve are external to one another. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Outside(Obj);

        :param Obj:
        :type Obj: Geom2dAdaptor_Curve &
        :rtype: Geom2dGcc_QualifiedCurve

        """
        return _Geom2dGcc.geom2dgcc_Outside(*args)

    Outside = staticmethod(Outside)

    def __init__(self):
        _Geom2dGcc.geom2dgcc_swiginit(self, _Geom2dGcc.new_geom2dgcc())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


geom2dgcc._kill_pointed = new_instancemethod(_Geom2dGcc.geom2dgcc__kill_pointed, None, geom2dgcc)
geom2dgcc_swigregister = _Geom2dGcc.geom2dgcc_swigregister
geom2dgcc_swigregister(geom2dgcc)

def geom2dgcc_Unqualified(*args):
    """
    * Constructs such a qualified curve that the relative position of the solution computed by a construction algorithm using the qualified curve to the circle or line is not qualified, i.e. all solutions apply. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Unqualified(Obj);

    :param Obj:
    :type Obj: Geom2dAdaptor_Curve &
    :rtype: Geom2dGcc_QualifiedCurve

    """
    return _Geom2dGcc.geom2dgcc_Unqualified(*args)

def geom2dgcc_Enclosing(*args):
    """
    * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve encloses the curve. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Enclosing(Obj);

    :param Obj:
    :type Obj: Geom2dAdaptor_Curve &
    :rtype: Geom2dGcc_QualifiedCurve

    """
    return _Geom2dGcc.geom2dgcc_Enclosing(*args)

def geom2dgcc_Enclosed(*args):
    """
    * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve is enclosed by the curve. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Enclosed(Obj);

    :param Obj:
    :type Obj: Geom2dAdaptor_Curve &
    :rtype: Geom2dGcc_QualifiedCurve

    """
    return _Geom2dGcc.geom2dgcc_Enclosed(*args)

def geom2dgcc_Outside(*args):
    """
    * Constructs such a qualified curve that the solution computed by a construction algorithm using the qualified curve and the curve are external to one another. Warning Obj is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Obj ( mycurve ) ; The qualified curve is then constructed with this object: Geom2dGcc_QualifiedCurve myQCurve = Geom2dGcc::Outside(Obj);

    :param Obj:
    :type Obj: Geom2dAdaptor_Curve &
    :rtype: Geom2dGcc_QualifiedCurve

    """
    return _Geom2dGcc.geom2dgcc_Outside(*args)

class Geom2dGcc_Circ2d2TanOn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d circles TANgent to two curves and having the center ON a 2d curve. Param1 is the initial guess on the first curve QualifiedCurv. Param1 is the initial guess on the second curve QualifiedCurv. ParamOn is the initial guess on the center curve OnCurv. Tolerance is used for the limit cases.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param ParamOn:
        :type ParamOn: float
        :rtype: None

        * This method implements the algorithms used to create 2d circles TANgent to one curve and one point and having the center ON a 2d curve. Param1 is the initial guess on the first curve QualifiedCurv. ParamOn is the initial guess on the center curve OnCurv. Tolerance is used for the limit cases.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Point:
        :type Point: Handle_Geom2d_Point &
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :param Param1:
        :type Param1: float
        :param ParamOn:
        :type ParamOn: float
        :rtype: None

        * This method implements the algorithms used to create 2d circles TANgent to two points and having the center ON a 2d curve. Tolerance is used for the limit cases.

        :param Point1:
        :type Point1: Handle_Geom2d_Point &
        :param Point2:
        :type Point2: Handle_Geom2d_Point &
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Circ2d2TanOn(*args))

    def Results(self, *args):
        """
        :param Circ:
        :type Circ: GccAna_Circ2d2TanOn &
        :rtype: None

        :param Circ:
        :type Circ: Geom2dGcc_MyCirc2d2TanOn &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Results(self, *args)


    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * This method returns the number of solutions. NotDone is raised if the algorithm failed.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Exceptions Standard_OutOfRange if Index is less than or equal to zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * It returns the informations about the qualifiers of the tangency arguments concerning the solution number Index. It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computedin case of unqualified). Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        * Returns informations about the tangency point between the result and the second argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Tangency2(self, *args)


    def CenterOn3(self, *args):
        """
        * Returns the center PntSol of the solution of index Index computed by this algorithm. ParArg is the parameter of the point PntSol on the third argument. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_CenterOn3(self, *args)


    def IsTheSame1(self, *args):
        """
        * Returns true if the solution of index Index and, respectively, the first or second argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first or second argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        * Returns true if the solution of index Index and, respectively, the first or second argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first or second argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsTheSame2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Circ2d2TanOn.Results = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Results, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsDone, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_NbSolutions, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_ThisSolution, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_WhichQualifier, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Tangency1, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_Tangency2, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.CenterOn3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_CenterOn3, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsTheSame1, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn_IsTheSame2, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanOn__kill_pointed, None, Geom2dGcc_Circ2d2TanOn)
Geom2dGcc_Circ2d2TanOn_swigregister = _Geom2dGcc.Geom2dGcc_Circ2d2TanOn_swigregister
Geom2dGcc_Circ2d2TanOn_swigregister(Geom2dGcc_Circ2d2TanOn)

class Geom2dGcc_Circ2d2TanRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Point:
        :type Point: Handle_Geom2d_Point &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        * These constructors create one or more 2D circles of radius Radius either - tangential to the 2 curves Qualified1 and Qualified2, or - tangential to the curve Qualified1 and passing through the point Point, or - passing through two points Point1 and Point2. Tolerance is a tolerance criterion used by the algorithm to find a solution when, mathematically, the problem posed does not have a solution, but where there is numeric uncertainty attached to the arguments. For example, take two circles C1 and C2, such that C2 is inside C1, and almost tangential to C1. There is, in fact, no point of intersection between C1 and C2. You now want to find a circle of radius R (smaller than the radius of C2), which is tangential to C1 and C2, and inside these two circles: a pure mathematical resolution will not find a solution. This is where the tolerance criterion is used: the algorithm considers that C1 and C2 are tangential if the shortest distance between these two circles is less than or equal to Tolerance. Thus, a solution is found by the algorithm. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosing for a line). Standard_NegativeValue if Radius is negative.

        :param Point1:
        :type Point1: Handle_Geom2d_Point &
        :param Point2:
        :type Point2: Handle_Geom2d_Point &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Circ2d2TanRad(*args))

    def Results(self, *args):
        """
        :param Circ:
        :type Circ: GccAna_Circ2d2TanRad &
        :rtype: None

        :param Circ:
        :type Circ: Geom2dGcc_MyCirc2d2TanRad &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Results(self, *args)


    def IsDone(self, *args):
        """
        * This method returns True if the algorithm succeeded. Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * This method returns the number of solutions. NotDone is raised if the algorithm failed. Exceptions StdFail_NotDone if the construction fails.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Warning This indexing simply provides a means of consulting the solutions. The index values are not associated with these solutions outside the context of the algorithm object. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * Returns the qualifiers Qualif1 and Qualif2 of the tangency arguments for the solution of index Index computed by this algorithm. The returned qualifiers are: - those specified at the start of construction when the solutions are defined as enclosed, enclosing or outside with respect to the arguments, or - those computed during construction (i.e. enclosed, enclosing or outside) when the solutions are defined as unqualified with respect to the arguments, or - GccEnt_noqualifier if the tangency argument is a point, or - GccEnt_unqualified in certain limit cases where it is impossible to qualify the solution as enclosed, enclosing or outside. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. OutOfRange is raised if Index is greater than the number of solutions. notDone is raised if the construction algorithm did not succeed.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        * Returns informations about the tangency point between the result number Index and the second argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. OutOfRange is raised if Index is greater than the number of solutions. notDone is raised if the construction algorithm did not succeed.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Tangency2(self, *args)


    def IsTheSame1(self, *args):
        """
        * Returns true if the solution of index Index and, respectively, the first or second argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first or second argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. OutOfRange is raised if Index is greater than the number of solutions. notDone is raised if the construction algorithm did not succeed.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        * Returns true if the solution of index Index and, respectively, the first or second argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first or second argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. OutOfRange is raised if Index is greater than the number of solutions. notDone is raised if the construction algorithm did not succeed.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsTheSame2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Circ2d2TanRad.Results = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Results, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsDone, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_NbSolutions, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_ThisSolution, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_WhichQualifier, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Tangency1, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_Tangency2, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsTheSame1, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad_IsTheSame2, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d2TanRad__kill_pointed, None, Geom2dGcc_Circ2d2TanRad)
Geom2dGcc_Circ2d2TanRad_swigregister = _Geom2dGcc.Geom2dGcc_Circ2d2TanRad_swigregister
Geom2dGcc_Circ2d2TanRad_swigregister(Geom2dGcc_Circ2d2TanRad)

class Geom2dGcc_Circ2d3Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs one or more 2D circles tangential to three curves Qualified1, Qualified2 and Qualified3, where Param1, Param2 and Param3 are used, respectively, as the initial values of the parameters on Qualified1, Qualified2 and Qualified3 of the tangency point between these arguments and the solution sought, if the algorithm chooses an iterative method to find the solution (i.e. if either Qualified1, Qualified2 or Qualified3 is more complex than a line or a circle).

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_QualifiedCurve &
        :param Tolerance:
        :type Tolerance: float
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :rtype: None

        * Constructs one or more 2D circles tangential to two curves Qualified1 and Qualified2 and passing through the point Point, where Param1 and Param2 are used, respectively, as the initial values of the parameters on Qualified1 and Qualified2 of the tangency point between this argument and the solution sought, if the algorithm chooses an iterative method to find the solution (i.e. if either Qualified1 or Qualified2 is more complex than a line or a circle).

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param Point:
        :type Point: Handle_Geom2d_Point &
        :param Tolerance:
        :type Tolerance: float
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :rtype: None

        * Constructs one or more 2D circles tangential to the curve Qualified1 and passing through two points Point1 and Point2, where Param1 is used as the initial value of the parameter on Qualified1 of the tangency point between this argument and the solution sought, if the algorithm chooses an iterative method to find the solution (i.e. if Qualified1 is more complex than a line or a circle)

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Point1:
        :type Point1: Handle_Geom2d_Point &
        :param Point2:
        :type Point2: Handle_Geom2d_Point &
        :param Tolerance:
        :type Tolerance: float
        :param Param1:
        :type Param1: float
        :rtype: None

        * Constructs one or more 2D circles passing through three points Point1, Point2 and Point3. Tolerance is a tolerance criterion used by the algorithm to find a solution when, mathematically, the problem posed does not have a solution, but where there is numeric uncertainty attached to the arguments. For example, take: - two circles C1 and C2, such that C2 is inside C1, and almost tangential to C1; there is in fact no point of intersection between C1 and C2; and - a circle C3 outside C1. You now want to find a circle which is tangential to C1, C2 and C3: a pure mathematical resolution will not find a solution. This is where the tolerance criterion is used: the algorithm considers that C1 and C2 are tangential if the shortest distance between these two circles is less than or equal to Tolerance. Thus, the algorithm finds a solution. Warning An iterative algorithm is used if Qualified1, Qualified2 or Qualified3 is more complex than a line or a circle. In such cases, the algorithm constructs only one solution. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosing for a line).

        :param Point1:
        :type Point1: Handle_Geom2d_Point &
        :param Point2:
        :type Point2: Handle_Geom2d_Point &
        :param Point3:
        :type Point3: Handle_Geom2d_Point &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Circ2d3Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Circ2d3Tan(*args))

    def Results(self, *args):
        """
        :param Circ:
        :type Circ: GccAna_Circ2d3Tan &
        :param Rank1:
        :type Rank1: int
        :param Rank2:
        :type Rank2: int
        :param Rank3:
        :type Rank3: int
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_Results(self, *args)


    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * This method returns the number of solutions. NotDone is raised if the algorithm failed.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object.

        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * It returns the informations about the qualifiers of the tangency arguments concerning the solution number Index. It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computedin case of unqualified).

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :param Qualif3:
        :type Qualif3: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        * Returns informations about the tangency point between the result and the second argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency2(self, *args)


    def Tangency3(self, *args):
        """
        * Returns informations about the tangency point between the result and the third argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency3(self, *args)


    def IsTheSame1(self, *args):
        """
        * Returns True if the solution is equal to the first argument.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        * Returns True if the solution is equal to the second argument.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame2(self, *args)


    def IsTheSame3(self, *args):
        """
        * Returns True if the solution is equal to the third argument. If Rarg is the radius of the first, second or third argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame3(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Circ2d3Tan.Results = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_Results, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsDone, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_NbSolutions, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_ThisSolution, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_WhichQualifier, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency1, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency2, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.Tangency3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_Tangency3, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame1, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame2, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan.IsTheSame3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan_IsTheSame3, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2d3Tan__kill_pointed, None, Geom2dGcc_Circ2d3Tan)
Geom2dGcc_Circ2d3Tan_swigregister = _Geom2dGcc.Geom2dGcc_Circ2d3Tan_swigregister
Geom2dGcc_Circ2d3Tan_swigregister(Geom2dGcc_Circ2d3Tan)

class Geom2dGcc_Circ2dTanCen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs one or more 2D circles tangential to the curve Qualified1 and centered on the point Pcenter. Tolerance is a tolerance criterion used by the algorithm to find a solution when, mathematically, the problem posed does not have a solution, but where there is numeric uncertainty attached to the arguments. Tolerance is only used in these algorithms in very specific cases where the center of the solution is very close to the circle to which it is tangential, and where the solution is thus a very small circle. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosing for a line).

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Pcenter:
        :type Pcenter: Handle_Geom2d_Point &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Circ2dTanCen_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Circ2dTanCen(*args))

    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * Returns the number of circles, representing solutions computed by this algorithm. Exceptions StdFail_NotDone if the construction fails.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns a circle, representing the solution of index Index computed by this algorithm. Warning This indexing simply provides a means of consulting the solutions. The index values are not associated with these solutions outside the context of the algorithm object. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails

        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosed, enclosing or outside with respect to the argument, or - that computed during construction (i.e. enclosed, enclosing or outside) when the solutions are defined as unqualified with respect to the argument. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_Tangency1(self, *args)


    def IsTheSame1(self, *args):
        """
        * Returns true if the solution of index Index and the first argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. NotDone is raised if the construction algorithm didn't succeed. OutOfRange is raised if Index is greater than the number of solutions.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanCen_IsTheSame1(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Circ2dTanCen.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_IsDone, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_NbSolutions, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_ThisSolution, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_WhichQualifier, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_Tangency1, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen_IsTheSame1, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanCen__kill_pointed, None, Geom2dGcc_Circ2dTanCen)
Geom2dGcc_Circ2dTanCen_swigregister = _Geom2dGcc.Geom2dGcc_Circ2dTanCen_swigregister
Geom2dGcc_Circ2dTanCen_swigregister(Geom2dGcc_Circ2dTanCen)

class Geom2dGcc_Circ2dTanOnRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs one or more 2D circles of radius Radius, centered on the 2D curve OnCurv and: - tangential to the curve Qualified1

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        * Constructs one or more 2D circles of radius Radius, centered on the 2D curve OnCurv and: passing through the point Point1. OnCurv is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by the construction algorithm. Similarly, the qualified curve Qualified1 is created from an adapted curve. Adapted curves are created in the following way: Handle_Geom2d_Curve myCurveOn = ... ; Geom2dAdaptor_Curve OnCurv ( myCurveOn ) ; The algorithm is then constructed with this object: Handle_Geom2d_Curve myCurve1 = ... ; Geom2dAdaptor_Curve Adapted1 ( myCurve1 ) ; Geom2dGcc_QualifiedCurve Qualified1 = Geom2dGcc::Outside(Adapted1); Standard_Real Radius = ... , Tolerance = ... ; Geom2dGcc_Circ2dTanOnRad myAlgo ( Qualified1 , OnCurv , Radius , Tolerance ) ; if ( myAlgo.IsDone() ) { Standard_Integer Nbr = myAlgo.NbSolutions() ; gp_Circ2d Circ ; for ( Standard_Integer i = 1 ; i <= nbr ; i++ ) { Circ = myAlgo.ThisSolution (i) ; ... } }

        :param Point1:
        :type Point1: Handle_Geom2d_Point &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Circ2dTanOnRad(*args))

    def Results(self, *args):
        """
        :param Circ:
        :type Circ: GccAna_Circ2dTanOnRad &
        :rtype: None

        :param Circ:
        :type Circ: Geom2dGcc_MyCirc2dTanOnRad &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_Results(self, *args)


    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * Returns the number of circles, representing solutions computed by this algorithm. Exceptions: StdFail_NotDone if the construction fails.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosed, enclosing or outside with respect to the arguments, or - that computed during construction (i.e. enclosed, enclosing or outside) when the solutions are defined as unqualified with respect to the arguments, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point on the solution curv. ParArg is the intrinsic parameter of the point on the argument curv. PntSol is the tangency point on the solution curv. PntArg is the tangency point on the argument curv. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_Tangency1(self, *args)


    def CenterOn3(self, *args):
        """
        * Returns the center PntSol on the second argument (i.e. line or circle) of the solution of index Index computed by this algorithm. ParArg is the intrinsic parameter of the point on the argument curv. PntSol is the center point of the solution curv. PntArg is the projection of PntSol on the argument curv. Exceptions: Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_CenterOn3(self, *args)


    def IsTheSame1(self, *args):
        """
        * Returns true if the solution of index Index and the first argument of this algorithm are the same (i.e. there are 2 identical circles). If Rarg is the radius of the first argument, Rsol is the radius of the solution and dist is the distance between the two centers, we consider the two circles to be identical if |Rarg - Rsol| and dist are less than or equal to the tolerance criterion given at the time of construction of this algorithm. OutOfRange is raised if Index is greater than the number of solutions. notDone is raised if the construction algorithm did not succeed.

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_IsTheSame1(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Circ2dTanOnRad.Results = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_Results, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_IsDone, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_NbSolutions, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_ThisSolution, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_WhichQualifier, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_Tangency1, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.CenterOn3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_CenterOn3, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_IsTheSame1, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Circ2dTanOnRad__kill_pointed, None, Geom2dGcc_Circ2dTanOnRad)
Geom2dGcc_Circ2dTanOnRad_swigregister = _Geom2dGcc.Geom2dGcc_Circ2dTanOnRad_swigregister
Geom2dGcc_Circ2dTanOnRad_swigregister(Geom2dGcc_Circ2dTanOnRad)

class Geom2dGcc_CurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def EpsX(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param Tol:
        :type Tol: float
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_EpsX(*args)

    EpsX = staticmethod(EpsX)

    def NbSamples(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Value(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param X:
        :type X: float
        :rtype: gp_Pnt2d

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param T:
        :type T: gp_Vec2d
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param T:
        :type T: gp_Vec2d
        :param N:
        :type N: gp_Vec2d
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param T:
        :type T: gp_Vec2d
        :param N:
        :type N: gp_Vec2d
        :param dN:
        :type dN: gp_Vec2d
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_CurveTool_D3(*args)

    D3 = staticmethod(D3)

    def __init__(self):
        _Geom2dGcc.Geom2dGcc_CurveTool_swiginit(self, _Geom2dGcc.new_Geom2dGcc_CurveTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_CurveTool._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_CurveTool__kill_pointed, None, Geom2dGcc_CurveTool)
Geom2dGcc_CurveTool_swigregister = _Geom2dGcc.Geom2dGcc_CurveTool_swigregister
Geom2dGcc_CurveTool_swigregister(Geom2dGcc_CurveTool)

def Geom2dGcc_CurveTool_FirstParameter(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_FirstParameter(*args)

def Geom2dGcc_CurveTool_LastParameter(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_LastParameter(*args)

def Geom2dGcc_CurveTool_EpsX(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :param Tol:
    :type Tol: float
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_EpsX(*args)

def Geom2dGcc_CurveTool_NbSamples(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :rtype: int

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_NbSamples(*args)

def Geom2dGcc_CurveTool_Value(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :param X:
    :type X: float
    :rtype: gp_Pnt2d

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_Value(*args)

def Geom2dGcc_CurveTool_D1(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param T:
    :type T: gp_Vec2d
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_D1(*args)

def Geom2dGcc_CurveTool_D2(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param T:
    :type T: gp_Vec2d
    :param N:
    :type N: gp_Vec2d
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_D2(*args)

def Geom2dGcc_CurveTool_D3(*args):
    """
    :param C:
    :type C: Geom2dAdaptor_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param T:
    :type T: gp_Vec2d
    :param N:
    :type N: gp_Vec2d
    :param dN:
    :type dN: gp_Vec2d
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_CurveTool_D3(*args)

class Geom2dGcc_FuncTCirCuOfMyL2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Circ:
        :type Circ: gp_Circ2d
        :param Curv:
        :type Curv: Geom2dAdaptor_Curve &
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_FuncTCirCuOfMyL2d2Tan(*args))

    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_FuncTCirCuOfMyL2d2Tan.Value = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Value, None, Geom2dGcc_FuncTCirCuOfMyL2d2Tan)
Geom2dGcc_FuncTCirCuOfMyL2d2Tan.Derivative = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Derivative, None, Geom2dGcc_FuncTCirCuOfMyL2d2Tan)
Geom2dGcc_FuncTCirCuOfMyL2d2Tan.Values = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_Values, None, Geom2dGcc_FuncTCirCuOfMyL2d2Tan)
Geom2dGcc_FuncTCirCuOfMyL2d2Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan__kill_pointed, None, Geom2dGcc_FuncTCirCuOfMyL2d2Tan)
Geom2dGcc_FuncTCirCuOfMyL2d2Tan_swigregister = _Geom2dGcc.Geom2dGcc_FuncTCirCuOfMyL2d2Tan_swigregister
Geom2dGcc_FuncTCirCuOfMyL2d2Tan_swigregister(Geom2dGcc_FuncTCirCuOfMyL2d2Tan)

class Geom2dGcc_FuncTCuCuOfMyL2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curv1:
        :type Curv1: Geom2dAdaptor_Curve &
        :param Curv2:
        :type Curv2: Geom2dAdaptor_Curve &
        :rtype: None

        :param Circ1:
        :type Circ1: gp_Circ2d
        :param Curv2:
        :type Curv2: Geom2dAdaptor_Curve &
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_FuncTCuCuOfMyL2d2Tan(*args))

    def InitDerivative(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param Point1:
        :type Point1: gp_Pnt2d
        :param Point2:
        :type Point2: gp_Pnt2d
        :param Tan1:
        :type Tan1: gp_Vec2d
        :param Tan2:
        :type Tan2: gp_Vec2d
        :param D21:
        :type D21: gp_Vec2d
        :param D22:
        :type D22: gp_Vec2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_InitDerivative(self, *args)


    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param Deriv:
        :type Deriv: math_Matrix &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param Deriv:
        :type Deriv: math_Matrix &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_FuncTCuCuOfMyL2d2Tan.InitDerivative = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_InitDerivative, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan.NbVariables = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_NbVariables, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan.NbEquations = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_NbEquations, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan.Value = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Value, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan.Derivatives = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Derivatives, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan.Values = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_Values, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan__kill_pointed, None, Geom2dGcc_FuncTCuCuOfMyL2d2Tan)
Geom2dGcc_FuncTCuCuOfMyL2d2Tan_swigregister = _Geom2dGcc.Geom2dGcc_FuncTCuCuOfMyL2d2Tan_swigregister
Geom2dGcc_FuncTCuCuOfMyL2d2Tan_swigregister(Geom2dGcc_FuncTCuCuOfMyL2d2Tan)

class Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCi:
        :type OnCi: gp_Circ2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: gp_Circ2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCi:
        :type OnCi: gp_Circ2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param L1:
        :type L1: gp_Lin2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCi:
        :type OnCi: gp_Circ2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param P2:
        :type P2: gp_Pnt2d
        :param OnCi:
        :type OnCi: gp_Circ2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnLi:
        :type OnLi: gp_Lin2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: gp_Circ2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnLi:
        :type OnLi: gp_Lin2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param L1:
        :type L1: gp_Lin2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnLi:
        :type OnLi: gp_Lin2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param P2:
        :type P2: gp_Pnt2d
        :param OnLi:
        :type OnLi: gp_Lin2d
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCu:
        :type OnCu: Geom2dAdaptor_Curve &
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: gp_Circ2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCu:
        :type OnCu: Geom2dAdaptor_Curve &
        :param Rad:
        :type Rad: float
        :rtype: None

        :param L1:
        :type L1: gp_Lin2d
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :param OnCu:
        :type OnCu: Geom2dAdaptor_Curve &
        :param Rad:
        :type Rad: float
        :rtype: None

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param P1:
        :type P1: gp_Pnt2d
        :param OnCu:
        :type OnCu: Geom2dAdaptor_Curve &
        :param Rad:
        :type Rad: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_swiginit(self, _Geom2dGcc.new_Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn(*args))

    def InitDerivative(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param Point1:
        :type Point1: gp_Pnt2d
        :param Point2:
        :type Point2: gp_Pnt2d
        :param Point3:
        :type Point3: gp_Pnt2d
        :param Tan1:
        :type Tan1: gp_Vec2d
        :param Tan2:
        :type Tan2: gp_Vec2d
        :param Tan3:
        :type Tan3: gp_Vec2d
        :param D21:
        :type D21: gp_Vec2d
        :param D22:
        :type D22: gp_Vec2d
        :param D23:
        :type D23: gp_Vec2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_InitDerivative(self, *args)


    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.InitDerivative = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_InitDerivative, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.NbVariables = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_NbVariables, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.NbEquations = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_NbEquations, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.Value = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Value, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.Derivatives = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Derivatives, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn.Values = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_Values, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn__kill_pointed, None, Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_swigregister = _Geom2dGcc.Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_swigregister
Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn_swigregister(Geom2dGcc_FuncTCuCuOnCuOfMyC2d2TanOn)

class Geom2dGcc_FuncTCuPtOfMyL2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: Geom2dAdaptor_Curve &
        :param Point:
        :type Point: gp_Pnt2d
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_FuncTCuPtOfMyL2d2Tan(*args))

    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_FuncTCuPtOfMyL2d2Tan.Value = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Value, None, Geom2dGcc_FuncTCuPtOfMyL2d2Tan)
Geom2dGcc_FuncTCuPtOfMyL2d2Tan.Derivative = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Derivative, None, Geom2dGcc_FuncTCuPtOfMyL2d2Tan)
Geom2dGcc_FuncTCuPtOfMyL2d2Tan.Values = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_Values, None, Geom2dGcc_FuncTCuPtOfMyL2d2Tan)
Geom2dGcc_FuncTCuPtOfMyL2d2Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan__kill_pointed, None, Geom2dGcc_FuncTCuPtOfMyL2d2Tan)
Geom2dGcc_FuncTCuPtOfMyL2d2Tan_swigregister = _Geom2dGcc.Geom2dGcc_FuncTCuPtOfMyL2d2Tan_swigregister
Geom2dGcc_FuncTCuPtOfMyL2d2Tan_swigregister(Geom2dGcc_FuncTCuPtOfMyL2d2Tan)

class Geom2dGcc_FuncTOblOfMyL2dTanObl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :param Dir:
        :type Dir: gp_Dir2d
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_swiginit(self, _Geom2dGcc.new_Geom2dGcc_FuncTOblOfMyL2dTanObl(*args))

    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param Deriv:
        :type Deriv: float &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_FuncTOblOfMyL2dTanObl.Value = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Value, None, Geom2dGcc_FuncTOblOfMyL2dTanObl)
Geom2dGcc_FuncTOblOfMyL2dTanObl.Derivative = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Derivative, None, Geom2dGcc_FuncTOblOfMyL2dTanObl)
Geom2dGcc_FuncTOblOfMyL2dTanObl.Values = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_Values, None, Geom2dGcc_FuncTOblOfMyL2dTanObl)
Geom2dGcc_FuncTOblOfMyL2dTanObl._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl__kill_pointed, None, Geom2dGcc_FuncTOblOfMyL2dTanObl)
Geom2dGcc_FuncTOblOfMyL2dTanObl_swigregister = _Geom2dGcc.Geom2dGcc_FuncTOblOfMyL2dTanObl_swigregister
Geom2dGcc_FuncTOblOfMyL2dTanObl_swigregister(Geom2dGcc_FuncTOblOfMyL2dTanObl)

class Geom2dGcc_Lin2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This class implements the algorithms used to create 2d line tangent to two curves. Tolang is used to determine the tolerance for the tangency points.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param Tolang:
        :type Tolang: float
        :rtype: None

        * This class implements the algorithms used to create 2d lines passing thrue a point and tangent to a curve. Tolang is used to determine the tolerance for the tangency points.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param ThePoint:
        :type ThePoint: gp_Pnt2d
        :param Tolang:
        :type Tolang: float
        :rtype: None

        * This class implements the algorithms used to create 2d line tangent to two curves. Tolang is used to determine the tolerance for the tangency points. Param1 is used for the initial guess on the first curve. Param2 is used for the initial guess on the second curve.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_QualifiedCurve &
        :param Tolang:
        :type Tolang: float
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :rtype: None

        * This class implements the algorithms used to create 2d lines passing thrue a point and tangent to a curve. Tolang is used to determine the tolerance for the tangency points. Param2 is used for the initial guess on the curve.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param ThePoint:
        :type ThePoint: gp_Pnt2d
        :param Tolang:
        :type Tolang: float
        :param Param1:
        :type Param1: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Lin2d2Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Lin2d2Tan(*args))

    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * Returns the number of lines, representing solutions computed by this algorithm. Exceptions StdFail_NotDone if the construction fails.R

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns a line, representing the solution of index Index computed by this algorithm. Warning This indexing simply provides a means of consulting the solutions. The index values are not associated with these solutions outside the context of the algorithm object. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: gp_Lin2d

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * Returns the qualifiers Qualif1 and Qualif2 of the tangency arguments for the solution of index Index computed by this algorithm. The returned qualifiers are: - those specified at the start of construction when the solutions are defined as enclosing or outside with respect to the arguments, or - those computed during construction (i.e. enclosing or outside) when the solutions are defined as unqualified with respect to the arguments, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        * Returns informations about the tangency point between the result and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2d2Tan_Tangency2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Lin2d2Tan.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_IsDone, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_NbSolutions, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_ThisSolution, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_WhichQualifier, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_Tangency1, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan_Tangency2, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2d2Tan__kill_pointed, None, Geom2dGcc_Lin2d2Tan)
Geom2dGcc_Lin2d2Tan_swigregister = _Geom2dGcc.Geom2dGcc_Lin2d2Tan_swigregister
Geom2dGcc_Lin2d2Tan_swigregister(Geom2dGcc_Lin2d2Tan)

class Geom2dGcc_Lin2dTanObl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This class implements the algorithm used to create 2d line tangent to a curve and doing an angle Angle with the line TheLin. Angle must be in Radian. Tolang is the angular tolerance.

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param TheLin:
        :type TheLin: gp_Lin2d
        :param TolAng:
        :type TolAng: float
        :param Angle:
        :type Angle: float
        :rtype: None

        * This class implements the algorithm used to create 2d line tangent to a curve and doing an angle Angle with the line TheLin. Angle must be in Radian. Param2 is the initial guess on the curve QualifiedCurv. Tolang is the angular tolerance. Warning An iterative algorithm is used if Qualified1 is more complex than a line or a circle. In such cases, the algorithm constructs only one solution. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosed for a circle).

        :param Qualified1:
        :type Qualified1: Geom2dGcc_QualifiedCurve &
        :param TheLin:
        :type TheLin: gp_Lin2d
        :param TolAng:
        :type TolAng: float
        :param Param1:
        :type Param1: float
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_Lin2dTanObl_swiginit(self, _Geom2dGcc.new_Geom2dGcc_Lin2dTanObl(*args))

    def IsDone(self, *args):
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        * Returns the number of lines, representing solutions computed by this algorithm. Exceptions StdFail_NotDone if the construction fails.

        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        * Returns a line, representing the solution of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :rtype: gp_Lin2d

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosing or outside with respect to the argument, or - that computed during construction (i.e. enclosing or outside) when the solutions are defined as unqualified with respect to the argument, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.

        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        * Returns informations about the tangency point between the result and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_Tangency1(self, *args)


    def Intersection2(self, *args):
        """
        * Returns the point of intersection PntSol between the solution of index Index and the second argument (the line) of this algorithm. ParSol is the parameter of the point PntSol on the solution. ParArg is the parameter of the point PntSol on the second argument (the line). Exceptions StdFail_NotDone if the construction fails. GccIter_IsParallel if the solution and the second argument (the line) are parallel. Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm.

        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_Lin2dTanObl_Intersection2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_Lin2dTanObl.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_IsDone, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_NbSolutions, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_ThisSolution, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_WhichQualifier, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_Tangency1, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl.Intersection2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl_Intersection2, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_Lin2dTanObl__kill_pointed, None, Geom2dGcc_Lin2dTanObl)
Geom2dGcc_Lin2dTanObl_swigregister = _Geom2dGcc.Geom2dGcc_Lin2dTanObl_swigregister
Geom2dGcc_Lin2dTanObl_swigregister(Geom2dGcc_Lin2dTanObl)

class Geom2dGcc_MyC2d2TanOn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnLine:
        :type OnLine: gp_Lin2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnLine:
        :type OnLine: gp_Lin2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnLine:
        :type OnLine: gp_Lin2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param OnLine:
        :type OnLine: gp_Lin2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCirc:
        :type OnCirc: gp_Circ2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCirc:
        :type OnCirc: gp_Circ2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCirc:
        :type OnCirc: gp_Circ2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param OnCirc:
        :type OnCirc: gp_Circ2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param ParamOn:
        :type ParamOn: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param ParamOn:
        :type ParamOn: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Param1:
        :type Param1: float
        :param ParamOn:
        :type ParamOn: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param OnCurve:
        :type OnCurve: Geom2dAdaptor_Curve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param ParamOn:
        :type ParamOn: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyC2d2TanOn(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsDone(self, *args)


    def ThisSolution(self, *args):
        """
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_Tangency2(self, *args)


    def CenterOn3(self, *args):
        """
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_CenterOn3(self, *args)


    def IsTheSame1(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsTheSame2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyC2d2TanOn.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsDone, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_ThisSolution, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_WhichQualifier, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_Tangency1, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_Tangency2, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.CenterOn3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_CenterOn3, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsTheSame1, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn_IsTheSame2, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d2TanOn__kill_pointed, None, Geom2dGcc_MyC2d2TanOn)
Geom2dGcc_MyC2d2TanOn_swigregister = _Geom2dGcc.Geom2dGcc_MyC2d2TanOn_swigregister
Geom2dGcc_MyC2d2TanOn_swigregister(Geom2dGcc_MyC2d2TanOn)

class Geom2dGcc_MyC2d3Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedCirc &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedLin &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Point3:
        :type Point3: gp_Pnt2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedLin &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Point3:
        :type Point3: gp_Pnt2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Point1:
        :type Point1: gp_Pnt2d
        :param Point2:
        :type Point2: gp_Pnt2d
        :param Param1:
        :type Param1: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Qualified3:
        :type Qualified3: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Param3:
        :type Param3: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyC2d3Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyC2d3Tan(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsDone(self, *args)


    def ThisSolution(self, *args):
        """
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :param Qualif3:
        :type Qualif3: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency2(self, *args)


    def Tangency3(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency3(self, *args)


    def IsTheSame1(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame2(self, *args)


    def IsTheSame3(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame3(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyC2d3Tan.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsDone, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_ThisSolution, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_WhichQualifier, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency1, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency2, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.Tangency3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_Tangency3, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame1, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame2, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan.IsTheSame3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan_IsTheSame3, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyC2d3Tan__kill_pointed, None, Geom2dGcc_MyC2d3Tan)
Geom2dGcc_MyC2d3Tan_swigregister = _Geom2dGcc.Geom2dGcc_MyC2d3Tan_swigregister
Geom2dGcc_MyC2d3Tan_swigregister(Geom2dGcc_MyC2d3Tan)

class Geom2dGcc_MyCirc2d2TanOn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedCirc &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedLin &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: GccEnt_QualifiedLin &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: gp_Pnt2d
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Point1:
        :type Point1: gp_Pnt2d
        :param Point2:
        :type Point2: gp_Pnt2d
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyCirc2d2TanOn(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_Tangency2(self, *args)


    def CenterOn3(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_CenterOn3(self, *args)


    def IsTheSame1(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsTheSame2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyCirc2d2TanOn.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsDone, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_NbSolutions, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_ThisSolution, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_WhichQualifier, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_Tangency1, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_Tangency2, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.CenterOn3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_CenterOn3, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsTheSame1, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_IsTheSame2, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn__kill_pointed, None, Geom2dGcc_MyCirc2d2TanOn)
Geom2dGcc_MyCirc2d2TanOn_swigregister = _Geom2dGcc.Geom2dGcc_MyCirc2d2TanOn_swigregister
Geom2dGcc_MyCirc2d2TanOn_swigregister(Geom2dGcc_MyCirc2d2TanOn)

class Geom2dGcc_MyCirc2d2TanRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Point2:
        :type Point2: gp_Pnt2d
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyCirc2d2TanRad(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_Tangency2(self, *args)


    def IsTheSame1(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsTheSame1(self, *args)


    def IsTheSame2(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsTheSame2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyCirc2d2TanRad.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsDone, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_NbSolutions, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_ThisSolution, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_WhichQualifier, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_Tangency1, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_Tangency2, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsTheSame1, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad.IsTheSame2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_IsTheSame2, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad__kill_pointed, None, Geom2dGcc_MyCirc2d2TanRad)
Geom2dGcc_MyCirc2d2TanRad_swigregister = _Geom2dGcc.Geom2dGcc_MyCirc2d2TanRad_swigregister
Geom2dGcc_MyCirc2d2TanRad_swigregister(Geom2dGcc_MyCirc2d2TanRad)

class Geom2dGcc_MyCirc2dTanCen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Pcenter:
        :type Pcenter: gp_Pnt2d
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyCirc2dTanCen(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_Tangency1(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyCirc2dTanCen.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_IsDone, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_NbSolutions, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_ThisSolution, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_WhichQualifier, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_Tangency1, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanCen__kill_pointed, None, Geom2dGcc_MyCirc2dTanCen)
Geom2dGcc_MyCirc2dTanCen_swigregister = _Geom2dGcc.Geom2dGcc_MyCirc2dTanCen_swigregister
Geom2dGcc_MyCirc2dTanCen_swigregister(Geom2dGcc_MyCirc2dTanCen)

class Geom2dGcc_MyCirc2dTanOnRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param OnLine:
        :type OnLine: gp_Lin2d
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param OnCirc:
        :type OnCirc: gp_Circ2d
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedLin &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        :param Point1:
        :type Point1: gp_Pnt2d
        :param OnCurv:
        :type OnCurv: Geom2dAdaptor_Curve &
        :param Radius:
        :type Radius: float
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyCirc2dTanOnRad(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_IsDone(self, *args)


    def NbSolutions(self, *args):
        """
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_NbSolutions(self, *args)


    def ThisSolution(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Index:
        :type Index: int
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_Tangency1(self, *args)


    def CenterOn3(self, *args):
        """
        :param Index:
        :type Index: int
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_CenterOn3(self, *args)


    def IsTheSame1(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_IsTheSame1(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyCirc2dTanOnRad.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_IsDone, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.NbSolutions = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_NbSolutions, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_ThisSolution, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_WhichQualifier, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_Tangency1, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.CenterOn3 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_CenterOn3, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad.IsTheSame1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_IsTheSame1, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad__kill_pointed, None, Geom2dGcc_MyCirc2dTanOnRad)
Geom2dGcc_MyCirc2dTanOnRad_swigregister = _Geom2dGcc.Geom2dGcc_MyCirc2dTanOnRad_swigregister
Geom2dGcc_MyCirc2dTanOnRad_swigregister(Geom2dGcc_MyCirc2dTanOnRad)

class Geom2dGcc_MyCurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def TheType(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: GeomAbs_CurveType

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_TheType(*args)

    TheType = staticmethod(TheType)

    def Line(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: gp_Lin2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: gp_Circ2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: gp_Elips2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Parabola(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: gp_Parab2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Hyperbola(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: gp_Hypr2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def FirstParameter(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def EpsX(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param Tol:
        :type Tol: float
        :rtype: float

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_EpsX(*args)

    EpsX = staticmethod(EpsX)

    def NbSamples(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Value(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param X:
        :type X: float
        :rtype: gp_Pnt2d

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param T:
        :type T: gp_Vec2d
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param T:
        :type T: gp_Vec2d
        :param N:
        :type N: gp_Vec2d
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_D2(*args)

    D2 = staticmethod(D2)

    def IsComposite(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_IsComposite(*args)

    IsComposite = staticmethod(IsComposite)

    def GetIntervals(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :rtype: int

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_GetIntervals(*args)

    GetIntervals = staticmethod(GetIntervals)

    def GetInterval(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param Index:
        :type Index: int
        :param U1:
        :type U1: float &
        :param U2:
        :type U2: float &
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_GetInterval(*args)

    GetInterval = staticmethod(GetInterval)

    def SetCurrentInterval(*args):
        """
        :param C:
        :type C: Adaptor3d_OffsetCurve &
        :param Index:
        :type Index: int
        :rtype: void

        """
        return _Geom2dGcc.Geom2dGcc_MyCurveTool_SetCurrentInterval(*args)

    SetCurrentInterval = staticmethod(SetCurrentInterval)

    def __init__(self):
        _Geom2dGcc.Geom2dGcc_MyCurveTool_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyCurveTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyCurveTool._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyCurveTool__kill_pointed, None, Geom2dGcc_MyCurveTool)
Geom2dGcc_MyCurveTool_swigregister = _Geom2dGcc.Geom2dGcc_MyCurveTool_swigregister
Geom2dGcc_MyCurveTool_swigregister(Geom2dGcc_MyCurveTool)

def Geom2dGcc_MyCurveTool_TheType(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: GeomAbs_CurveType

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_TheType(*args)

def Geom2dGcc_MyCurveTool_Line(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: gp_Lin2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Line(*args)

def Geom2dGcc_MyCurveTool_Circle(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: gp_Circ2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Circle(*args)

def Geom2dGcc_MyCurveTool_Ellipse(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: gp_Elips2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Ellipse(*args)

def Geom2dGcc_MyCurveTool_Parabola(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: gp_Parab2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Parabola(*args)

def Geom2dGcc_MyCurveTool_Hyperbola(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: gp_Hypr2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Hyperbola(*args)

def Geom2dGcc_MyCurveTool_FirstParameter(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_FirstParameter(*args)

def Geom2dGcc_MyCurveTool_LastParameter(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_LastParameter(*args)

def Geom2dGcc_MyCurveTool_EpsX(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param Tol:
    :type Tol: float
    :rtype: float

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_EpsX(*args)

def Geom2dGcc_MyCurveTool_NbSamples(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: int

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_NbSamples(*args)

def Geom2dGcc_MyCurveTool_Value(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param X:
    :type X: float
    :rtype: gp_Pnt2d

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_Value(*args)

def Geom2dGcc_MyCurveTool_D1(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param T:
    :type T: gp_Vec2d
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_D1(*args)

def Geom2dGcc_MyCurveTool_D2(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param T:
    :type T: gp_Vec2d
    :param N:
    :type N: gp_Vec2d
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_D2(*args)

def Geom2dGcc_MyCurveTool_IsComposite(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: bool

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_IsComposite(*args)

def Geom2dGcc_MyCurveTool_GetIntervals(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :rtype: int

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_GetIntervals(*args)

def Geom2dGcc_MyCurveTool_GetInterval(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param Index:
    :type Index: int
    :param U1:
    :type U1: float &
    :param U2:
    :type U2: float &
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_GetInterval(*args)

def Geom2dGcc_MyCurveTool_SetCurrentInterval(*args):
    """
    :param C:
    :type C: Adaptor3d_OffsetCurve &
    :param Index:
    :type Index: int
    :rtype: void

    """
    return _Geom2dGcc.Geom2dGcc_MyCurveTool_SetCurrentInterval(*args)

class Geom2dGcc_MyL2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param ThePoint:
        :type ThePoint: gp_Pnt2d
        :param Param1:
        :type Param1: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: GccEnt_QualifiedCirc &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Param2:
        :type Param2: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param Qualified2:
        :type Qualified2: Geom2dGcc_MyQCurve &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyL2d2Tan_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyL2d2Tan(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyL2d2Tan_IsDone(self, *args)


    def ThisSolution(self, *args):
        """
        :rtype: gp_Lin2d

        """
        return _Geom2dGcc.Geom2dGcc_MyL2d2Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :param Qualif2:
        :type Qualif2: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2d2Tan_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2d2Tan_Tangency1(self, *args)


    def Tangency2(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2d2Tan_Tangency2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyL2d2Tan.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan_IsDone, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan_ThisSolution, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan_WhichQualifier, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan_Tangency1, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan.Tangency2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan_Tangency2, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2d2Tan__kill_pointed, None, Geom2dGcc_MyL2d2Tan)
Geom2dGcc_MyL2d2Tan_swigregister = _Geom2dGcc.Geom2dGcc_MyL2d2Tan_swigregister
Geom2dGcc_MyL2d2Tan_swigregister(Geom2dGcc_MyL2d2Tan)

class Geom2dGcc_MyL2dTanObl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Qualified1:
        :type Qualified1: Geom2dGcc_MyQCurve &
        :param TheLin:
        :type TheLin: gp_Lin2d
        :param Param1:
        :type Param1: float
        :param TolAng:
        :type TolAng: float
        :param Angle: default value is 0
        :type Angle: float
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyL2dTanObl_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyL2dTanObl(*args))

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_IsDone(self, *args)


    def ThisSolution(self, *args):
        """
        :rtype: gp_Lin2d

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_ThisSolution(self, *args)


    def WhichQualifier(self, *args):
        """
        :param Qualif1:
        :type Qualif1: GccEnt_Position &
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_WhichQualifier(self, *args)


    def Tangency1(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_Tangency1(self, *args)


    def Intersection2(self, *args):
        """
        :param ParSol:
        :type ParSol: float &
        :param ParArg:
        :type ParArg: float &
        :param PntSol:
        :type PntSol: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_Intersection2(self, *args)


    def IsParallel2(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyL2dTanObl_IsParallel2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyL2dTanObl.IsDone = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_IsDone, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl.ThisSolution = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_ThisSolution, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl.WhichQualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_WhichQualifier, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl.Tangency1 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_Tangency1, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl.Intersection2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_Intersection2, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl.IsParallel2 = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl_IsParallel2, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyL2dTanObl__kill_pointed, None, Geom2dGcc_MyL2dTanObl)
Geom2dGcc_MyL2dTanObl_swigregister = _Geom2dGcc.Geom2dGcc_MyL2dTanObl_swigregister
Geom2dGcc_MyL2dTanObl_swigregister(Geom2dGcc_MyL2dTanObl)

class Geom2dGcc_MyQCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :param Qualifier:
        :type Qualifier: GccEnt_Position
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_MyQCurve_swiginit(self, _Geom2dGcc.new_Geom2dGcc_MyQCurve(*args))

    def Qualified(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_Qualified(self, *args)


    def Qualifier(self, *args):
        """
        :rtype: GccEnt_Position

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_Qualifier(self, *args)


    def IsUnqualified(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_IsUnqualified(self, *args)


    def IsEnclosing(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_IsEnclosing(self, *args)


    def IsEnclosed(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_IsEnclosed(self, *args)


    def IsOutside(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_MyQCurve_IsOutside(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_MyQCurve.Qualified = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_Qualified, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve.Qualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_Qualifier, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve.IsUnqualified = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_IsUnqualified, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve.IsEnclosing = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_IsEnclosing, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve.IsEnclosed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_IsEnclosed, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve.IsOutside = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve_IsOutside, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_MyQCurve__kill_pointed, None, Geom2dGcc_MyQCurve)
Geom2dGcc_MyQCurve_swigregister = _Geom2dGcc.Geom2dGcc_MyQCurve_swigregister
Geom2dGcc_MyQCurve_swigregister(Geom2dGcc_MyQCurve)

class Geom2dGcc_QualifiedCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a qualified curve by assigning the qualifier Qualifier to the curve Curve. Qualifier may be: - GccEnt_enclosing if the solution of a construction algorithm using the qualified curve encloses the curve, or - GccEnt_enclosed if the solution is enclosed by the curve, or - GccEnt_outside if both the solution and the curve are external to one another, or - GccEnt_unqualified if all solutions apply. Note: The interior of a curve is defined as the left-hand side of the curve in relation to its orientation. Warning Curve is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The adapted curve is created in the following way: Handle_Geom2d_Curve mycurve = ... ; Geom2dAdaptor_Curve Curve ( mycurve ) ; The qualified curve is then constructed with this object: GccEnt_Position myQualif = GccEnt_outside ; Geom2dGcc_QualifiedCurve myQCurve ( Curve, myQualif ); is private;

        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :param Qualifier:
        :type Qualifier: GccEnt_Position
        :rtype: None

        """
        _Geom2dGcc.Geom2dGcc_QualifiedCurve_swiginit(self, _Geom2dGcc.new_Geom2dGcc_QualifiedCurve(*args))

    def Qualified(self, *args):
        """
        * Returns a 2D curve to which the qualifier is assigned. Warning The returned curve is an adapted curve, i.e. an object which is an interface between: - the services provided by a 2D curve from the package Geom2d, - and those required on the curve by a computation algorithm. The Geom2d curve on which the adapted curve is based can be obtained in the following way: myQualifiedCurve = ... ; Geom2dAdaptor_Curve myAdaptedCurve = myQualifiedCurve.Qualified(); Handle_Geom2d_Curve = myAdaptedCurve.Curve();

        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_Qualified(self, *args)


    def Qualifier(self, *args):
        """
        * Returns - the qualifier of this qualified curve if it is enclosing, enclosed or outside, or - GccEnt_noqualifier if it is unqualified.

        :rtype: GccEnt_Position

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_Qualifier(self, *args)


    def IsUnqualified(self, *args):
        """
        * Returns true if the solution is unqualified and false in the other cases.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_IsUnqualified(self, *args)


    def IsEnclosing(self, *args):
        """
        * It returns true if the solution is Enclosing the Curv and false in the other cases.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_IsEnclosing(self, *args)


    def IsEnclosed(self, *args):
        """
        * It returns true if the solution is Enclosed in the Curv and false in the other cases.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_IsEnclosed(self, *args)


    def IsOutside(self, *args):
        """
        * It returns true if the solution is Outside the Curv and false in the other cases.

        :rtype: bool

        """
        return _Geom2dGcc.Geom2dGcc_QualifiedCurve_IsOutside(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dGcc_QualifiedCurve.Qualified = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_Qualified, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve.Qualifier = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_Qualifier, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve.IsUnqualified = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_IsUnqualified, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve.IsEnclosing = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_IsEnclosing, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve.IsEnclosed = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_IsEnclosed, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve.IsOutside = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve_IsOutside, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve._kill_pointed = new_instancemethod(_Geom2dGcc.Geom2dGcc_QualifiedCurve__kill_pointed, None, Geom2dGcc_QualifiedCurve)
Geom2dGcc_QualifiedCurve_swigregister = _Geom2dGcc.Geom2dGcc_QualifiedCurve_swigregister
Geom2dGcc_QualifiedCurve_swigregister(Geom2dGcc_QualifiedCurve)



