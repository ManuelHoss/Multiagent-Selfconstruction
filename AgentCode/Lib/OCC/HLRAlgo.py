# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HLRAlgo.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRAlgo', [dirname(__file__)])
        except ImportError:
            import _HLRAlgo
            return _HLRAlgo
        if fp is not None:
            try:
                _mod = imp.load_module('_HLRAlgo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _HLRAlgo
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAlgo.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HLRAlgo.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HLRAlgo.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HLRAlgo.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HLRAlgo.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HLRAlgo.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HLRAlgo.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HLRAlgo.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HLRAlgo.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HLRAlgo.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HLRAlgo.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HLRAlgo.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HLRAlgo.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HLRAlgo.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HLRAlgo.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HLRAlgo.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HLRAlgo.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HLRAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TopAbs
import OCC.MMgt
import OCC.TCollection
import OCC.TColStd
import OCC.TColgp
import OCC.gp
class hlralgo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def UpdateMinMax(*args):
        """
        * Iterator on the visible or hidden parts of an EdgeStatus.

        :param x:
        :type x: float
        :param y:
        :type y: float
        :param z:
        :type z: float
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_UpdateMinMax(*args)

    UpdateMinMax = staticmethod(UpdateMinMax)

    def EnlargeMinMax(*args):
        """
        :param tol:
        :type tol: float
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

    EnlargeMinMax = staticmethod(EnlargeMinMax)

    def InitMinMax(*args):
        """
        :param Big:
        :type Big: float
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_InitMinMax(*args)

    InitMinMax = staticmethod(InitMinMax)

    def EncodeMinMax(*args):
        """
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :param MinMax:
        :type MinMax: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_EncodeMinMax(*args)

    EncodeMinMax = staticmethod(EncodeMinMax)

    def SizeBox(*args):
        """
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :rtype: float

        """
        return _HLRAlgo.hlralgo_SizeBox(*args)

    SizeBox = staticmethod(SizeBox)

    def DecodeMinMax(*args):
        """
        :param MinMax:
        :type MinMax: Standard_Address
        :param Min:
        :type Min: Standard_Address
        :param Max:
        :type Max: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_DecodeMinMax(*args)

    DecodeMinMax = staticmethod(DecodeMinMax)

    def CopyMinMax(*args):
        """
        :param IMin:
        :type IMin: Standard_Address
        :param IMax:
        :type IMax: Standard_Address
        :param OMin:
        :type OMin: Standard_Address
        :param OMax:
        :type OMax: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_CopyMinMax(*args)

    CopyMinMax = staticmethod(CopyMinMax)

    def AddMinMax(*args):
        """
        :param IMin:
        :type IMin: Standard_Address
        :param IMax:
        :type IMax: Standard_Address
        :param OMin:
        :type OMin: Standard_Address
        :param OMax:
        :type OMax: Standard_Address
        :rtype: void

        """
        return _HLRAlgo.hlralgo_AddMinMax(*args)

    AddMinMax = staticmethod(AddMinMax)

    def __init__(self):
        _HLRAlgo.hlralgo_swiginit(self, _HLRAlgo.new_hlralgo())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


hlralgo._kill_pointed = new_instancemethod(_HLRAlgo.hlralgo__kill_pointed, None, hlralgo)
hlralgo_swigregister = _HLRAlgo.hlralgo_swigregister
hlralgo_swigregister(hlralgo)

def hlralgo_UpdateMinMax(*args):
    """
    * Iterator on the visible or hidden parts of an EdgeStatus.

    :param x:
    :type x: float
    :param y:
    :type y: float
    :param z:
    :type z: float
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_UpdateMinMax(*args)

def hlralgo_EnlargeMinMax(*args):
    """
    :param tol:
    :type tol: float
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

def hlralgo_InitMinMax(*args):
    """
    :param Big:
    :type Big: float
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_InitMinMax(*args)

def hlralgo_EncodeMinMax(*args):
    """
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :param MinMax:
    :type MinMax: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_EncodeMinMax(*args)

def hlralgo_SizeBox(*args):
    """
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :rtype: float

    """
    return _HLRAlgo.hlralgo_SizeBox(*args)

def hlralgo_DecodeMinMax(*args):
    """
    :param MinMax:
    :type MinMax: Standard_Address
    :param Min:
    :type Min: Standard_Address
    :param Max:
    :type Max: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_DecodeMinMax(*args)

def hlralgo_CopyMinMax(*args):
    """
    :param IMin:
    :type IMin: Standard_Address
    :param IMax:
    :type IMax: Standard_Address
    :param OMin:
    :type OMin: Standard_Address
    :param OMax:
    :type OMax: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_CopyMinMax(*args)

def hlralgo_AddMinMax(*args):
    """
    :param IMin:
    :type IMin: Standard_Address
    :param IMax:
    :type IMax: Standard_Address
    :param OMin:
    :type OMin: Standard_Address
    :param OMax:
    :type OMax: Standard_Address
    :rtype: void

    """
    return _HLRAlgo.hlralgo_AddMinMax(*args)

class HLRAlgo_Array1OfPHDat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: HLRAlgo_PolyHidingData &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Array1OfPHDat_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPHDat(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_PolyHidingData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPHDat &
        :rtype: HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPHDat &
        :rtype: HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_PolyHidingData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyHidingData

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyHidingData

        """
        return _HLRAlgo.HLRAlgo_Array1OfPHDat_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Array1OfPHDat.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Init, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Destroy = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Destroy, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_IsAllocated, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Assign, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Set, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Length, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Lower, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Upper, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_SetValue, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_Value, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat_ChangeValue, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPHDat__kill_pointed, None, HLRAlgo_Array1OfPHDat)
HLRAlgo_Array1OfPHDat_swigregister = _HLRAlgo.HLRAlgo_Array1OfPHDat_swigregister
HLRAlgo_Array1OfPHDat_swigregister(HLRAlgo_Array1OfPHDat)

class HLRAlgo_Array1OfPINod(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_HLRAlgo_PolyInternalNode &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Array1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPINod(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_HLRAlgo_PolyInternalNode &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPINod &
        :rtype: HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPINod &
        :rtype: HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_HLRAlgo_PolyInternalNode &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_HLRAlgo_PolyInternalNode

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_HLRAlgo_PolyInternalNode

        """
        return _HLRAlgo.HLRAlgo_Array1OfPINod_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Array1OfPINod.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Init, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Destroy = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Destroy, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_IsAllocated, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Assign, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Set, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Length, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Lower, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Upper, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_SetValue, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Value, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeValue, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod__kill_pointed, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod_swigregister = _HLRAlgo.HLRAlgo_Array1OfPINod_swigregister
HLRAlgo_Array1OfPINod_swigregister(HLRAlgo_Array1OfPINod)

class HLRAlgo_Array1OfPISeg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: HLRAlgo_PolyInternalSegment &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Array1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPISeg(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_PolyInternalSegment &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPISeg &
        :rtype: HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfPISeg &
        :rtype: HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_PolyInternalSegment &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyInternalSegment

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyInternalSegment

        """
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Array1OfPISeg.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Init, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Destroy = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Destroy, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsAllocated, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Assign, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Set, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Length, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Lower, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Upper, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_SetValue, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Value, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeValue, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg__kill_pointed, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_Array1OfPISeg_swigregister
HLRAlgo_Array1OfPISeg_swigregister(HLRAlgo_Array1OfPISeg)

class HLRAlgo_Array1OfTData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: HLRAlgo_TriangleData &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Array1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfTData(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_TriangleData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfTData &
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_Array1OfTData &
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_TriangleData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_TriangleData

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_TriangleData

        """
        return _HLRAlgo.HLRAlgo_Array1OfTData_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Array1OfTData.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Init, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Destroy = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Destroy, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_IsAllocated, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Assign, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Set, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Length, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Lower, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Upper, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_SetValue, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Value, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeValue, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData__kill_pointed, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData_swigregister = _HLRAlgo.HLRAlgo_Array1OfTData_swigregister
HLRAlgo_Array1OfTData_swigregister(HLRAlgo_Array1OfTData)

class HLRAlgo_BiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param reg1:
        :type reg1: bool
        :param regn:
        :type regn: bool
        :param outl:
        :type outl: bool
        :param intl:
        :type intl: bool
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param flag:
        :type flag: int
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param i1:
        :type i1: int
        :param i1p1:
        :type i1p1: int
        :param i1p2:
        :type i1p2: int
        :param reg1:
        :type reg1: bool
        :param regn:
        :type regn: bool
        :param outl:
        :type outl: bool
        :param intl:
        :type intl: bool
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param i1:
        :type i1: int
        :param i1p1:
        :type i1p1: int
        :param i1p2:
        :type i1p2: int
        :param flag:
        :type flag: int
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param i1:
        :type i1: int
        :param i1p1:
        :type i1p1: int
        :param i1p2:
        :type i1p2: int
        :param i2:
        :type i2: int
        :param i2p1:
        :type i2p1: int
        :param i2p2:
        :type i2p2: int
        :param reg1:
        :type reg1: bool
        :param regn:
        :type regn: bool
        :param outl:
        :type outl: bool
        :param intl:
        :type intl: bool
        :rtype: None

        :param X1:
        :type X1: float
        :param Y1:
        :type Y1: float
        :param Z1:
        :type Z1: float
        :param X2:
        :type X2: float
        :param Y2:
        :type Y2: float
        :param Z2:
        :type Z2: float
        :param XT1:
        :type XT1: float
        :param YT1:
        :type YT1: float
        :param ZT1:
        :type ZT1: float
        :param XT2:
        :type XT2: float
        :param YT2:
        :type YT2: float
        :param ZT2:
        :type ZT2: float
        :param Index:
        :type Index: int
        :param i1:
        :type i1: int
        :param i1p1:
        :type i1p1: int
        :param i1p2:
        :type i1p2: int
        :param i2:
        :type i2: int
        :param i2p1:
        :type i2p1: int
        :param i2p2:
        :type i2p2: int
        :param flag:
        :type flag: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_BiPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_BiPoint(*args))

    def Rg1Line(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Rg1Line(self, *args)


    def RgNLine(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_RgNLine(self, *args)


    def OutLine(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_OutLine(self, *args)


    def IntLine(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_IntLine(self, *args)


    def Hidden(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Hidden(self, *args)


    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Indices(self, *args)


    def Coordinates(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Coordinates(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_BiPoint.Rg1Line = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Rg1Line, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.RgNLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_RgNLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.OutLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_OutLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.IntLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_IntLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.Hidden = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Hidden, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Indices, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.Coordinates = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Coordinates, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint__kill_pointed, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint_swigregister = _HLRAlgo.HLRAlgo_BiPoint_swigregister
HLRAlgo_BiPoint_swigregister(HLRAlgo_BiPoint)

class HLRAlgo_Coincidence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Coincidence_swiginit(self, _HLRAlgo.new_HLRAlgo_Coincidence(*args))

    def Set2D(self, *args):
        """
        :param FE:
        :type FE: int
        :param Param:
        :type Param: float
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Set2D(self, *args)


    def SetState3D(self, *args):
        """
        :param stbef:
        :type stbef: TopAbs_State
        :param staft:
        :type staft: TopAbs_State
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_SetState3D(self, *args)


    def Value2D(self, *args):
        """
        :param FE:
        :type FE: int &
        :param Param:
        :type Param: float &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Value2D(self, *args)


    def State3D(self, *args):
        """
        :param stbef:
        :type stbef: TopAbs_State &
        :param staft:
        :type staft: TopAbs_State &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_State3D(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Coincidence.Set2D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_Set2D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.SetState3D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_SetState3D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.Value2D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_Value2D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.State3D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_State3D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence__kill_pointed, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence_swigregister = _HLRAlgo.HLRAlgo_Coincidence_swigregister
HLRAlgo_Coincidence_swigregister(HLRAlgo_Coincidence)

class HLRAlgo_EdgeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Iterator on the visible or hidden parts of an edge.

        :rtype: None

        """
        _HLRAlgo.HLRAlgo_EdgeIterator_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeIterator(*args))

    def InitHidden(self, *args):
        """
        :param status:
        :type status: HLRAlgo_EdgeStatus &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitHidden(self, *args)


    def MoreHidden(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden(self, *args)


    def NextHidden(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextHidden(self, *args)


    def Hidden(self, *args):
        """
        * Returns the bounds and the tolerances of the current Hidden Interval

        :param Start:
        :type Start: float &
        :param TolStart:
        :type TolStart: Standard_ShortReal &
        :param End:
        :type End: float &
        :param TolEnd:
        :type TolEnd: Standard_ShortReal &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Hidden(self, *args)


    def InitVisible(self, *args):
        """
        :param status:
        :type status: HLRAlgo_EdgeStatus &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitVisible(self, *args)


    def MoreVisible(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible(self, *args)


    def NextVisible(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextVisible(self, *args)


    def Visible(self, *args):
        """
        * Returns the bounds and the tolerances of the current Visible Interval

        :param Start:
        :type Start: float &
        :param TolStart:
        :type TolStart: Standard_ShortReal &
        :param End:
        :type End: float &
        :param TolEnd:
        :type TolEnd: Standard_ShortReal &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Visible(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_EdgeIterator.InitHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_InitHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.MoreHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.NextHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_NextHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.Hidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_Hidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.InitVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_InitVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.MoreVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.NextVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_NextVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.Visible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_Visible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator__kill_pointed, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator_swigregister = _HLRAlgo.HLRAlgo_EdgeIterator_swigregister
HLRAlgo_EdgeIterator_swigregister(HLRAlgo_EdgeIterator)

class HLRAlgo_EdgeStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Creates a new EdgeStatus. Default visible. The Edge is bounded by the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>.

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_EdgeStatus_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeStatus(*args))

    def Initialize(self, *args):
        """
        * Initialize an EdgeStatus. Default visible. The Edge is bounded by the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>.

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Initialize(self, *args)


    def Bounds(self, *args):
        """
        :param Start:
        :type Start: float &
        :param TolStart:
        :type TolStart: Standard_ShortReal &
        :param End:
        :type End: float &
        :param TolEnd:
        :type TolEnd: Standard_ShortReal &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Bounds(self, *args)


    def NbVisiblePart(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart(self, *args)


    def VisiblePart(self, *args):
        """
        :param Index:
        :type Index: int
        :param Start:
        :type Start: float &
        :param TolStart:
        :type TolStart: Standard_ShortReal &
        :param End:
        :type End: float &
        :param TolEnd:
        :type TolEnd: Standard_ShortReal &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart(self, *args)


    def Hide(self, *args):
        """
        * Hides the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>. This interval is subtracted from the visible parts. If the hidden part is on ( or under ) the face the flag <OnFace> is True ( or False ). If the hidden part is on ( or inside ) the boundary of the face the flag <OnBoundary> is True ( or False ).

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :param OnFace:
        :type OnFace: bool
        :param OnBoundary:
        :type OnBoundary: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Hide(self, *args)


    def HideAll(self, *args):
        """
        * Hide the whole Edge.

        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_HideAll(self, *args)


    def ShowAll(self, *args):
        """
        * Show the whole Edge.

        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_ShowAll(self, *args)


    def AllHidden(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllHidden(self, *args)


    def AllVisible(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllVisible(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_EdgeStatus.Initialize = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Initialize, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.Bounds = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Bounds, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.NbVisiblePart = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.VisiblePart = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.Hide = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Hide, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.HideAll = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_HideAll, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.ShowAll = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_ShowAll, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.AllHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_AllHidden, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.AllVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_AllVisible, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus__kill_pointed, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus_swigregister = _HLRAlgo.HLRAlgo_EdgeStatus_swigregister
HLRAlgo_EdgeStatus_swigregister(HLRAlgo_EdgeStatus)

class HLRAlgo_EdgesBlock(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Block of Edges for a wire.

        :param NbEdges:
        :type NbEdges: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_EdgesBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgesBlock(*args))

    def NbEdges(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_NbEdges(self, *args)


    def Edge(self, *args):
        """
        :param I:
        :type I: int
        :param EI:
        :type EI: int
        :rtype: None

        :param I:
        :type I: int
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Edge(self, *args)


    def Orientation(self, *args):
        """
        :param I:
        :type I: int
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        :param I:
        :type I: int
        :rtype: TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Orientation(self, *args)


    def OutLine(self, *args):
        """
        :param I:
        :type I: int
        :rtype: bool

        :param I:
        :type I: int
        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_OutLine(self, *args)


    def Internal(self, *args):
        """
        :param I:
        :type I: int
        :rtype: bool

        :param I:
        :type I: int
        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Internal(self, *args)


    def Double(self, *args):
        """
        :param I:
        :type I: int
        :rtype: bool

        :param I:
        :type I: int
        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Double(self, *args)


    def IsoLine(self, *args):
        """
        :param I:
        :type I: int
        :rtype: bool

        :param I:
        :type I: int
        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_IsoLine(self, *args)


    def UpdateMinMax(self, *args):
        """
        :param TotMinMax:
        :type TotMinMax: Standard_Address
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_MinMax(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_EdgesBlock self)"""
        return _HLRAlgo.HLRAlgo_EdgesBlock__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_EdgesBlock self) -> Handle_HLRAlgo_EdgesBlock"""
        return _HLRAlgo.HLRAlgo_EdgesBlock_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_EdgesBlock.NbEdges = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_NbEdges, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Edge = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Edge, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Orientation, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.OutLine = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_OutLine, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Internal = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Internal, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Double = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Double, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.IsoLine = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_IsoLine, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.UpdateMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_UpdateMinMax, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.MinMax = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_MinMax, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock__kill_pointed, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_GetHandle, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.HLRAlgo_EdgesBlock_swigregister
HLRAlgo_EdgesBlock_swigregister(HLRAlgo_EdgesBlock)

class Handle_HLRAlgo_EdgesBlock(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_EdgesBlock_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_EdgesBlock(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_EdgesBlock.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock_Nullify, None, Handle_HLRAlgo_EdgesBlock)
Handle_HLRAlgo_EdgesBlock.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull, None, Handle_HLRAlgo_EdgesBlock)
Handle_HLRAlgo_EdgesBlock.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock_GetObject, None, Handle_HLRAlgo_EdgesBlock)
Handle_HLRAlgo_EdgesBlock._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_EdgesBlock__kill_pointed, None, Handle_HLRAlgo_EdgesBlock)
Handle_HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_swigregister
Handle_HLRAlgo_EdgesBlock_swigregister(Handle_HLRAlgo_EdgesBlock)

def Handle_HLRAlgo_EdgesBlock_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast(AnObject)
Handle_HLRAlgo_EdgesBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast

class HLRAlgo_HArray1OfPHDat(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: HLRAlgo_PolyHidingData &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_HArray1OfPHDat_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPHDat(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_PolyHidingData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_PolyHidingData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyHidingData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyHidingData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_HArray1OfPHDat self)"""
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_HArray1OfPHDat self) -> Handle_HLRAlgo_HArray1OfPHDat"""
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_HArray1OfPHDat.Init = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Init, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.Length = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Length, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Lower, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Upper, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_SetValue, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.Value = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Value, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeValue, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat__kill_pointed, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_GetHandle, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPHDat_swigregister
HLRAlgo_HArray1OfPHDat_swigregister(HLRAlgo_HArray1OfPHDat)

class Handle_HLRAlgo_HArray1OfPHDat(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPHDat(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_HArray1OfPHDat.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Nullify, None, Handle_HLRAlgo_HArray1OfPHDat)
Handle_HLRAlgo_HArray1OfPHDat.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull, None, Handle_HLRAlgo_HArray1OfPHDat)
Handle_HLRAlgo_HArray1OfPHDat.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_GetObject, None, Handle_HLRAlgo_HArray1OfPHDat)
Handle_HLRAlgo_HArray1OfPHDat._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat__kill_pointed, None, Handle_HLRAlgo_HArray1OfPHDat)
Handle_HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_swigregister
Handle_HLRAlgo_HArray1OfPHDat_swigregister(Handle_HLRAlgo_HArray1OfPHDat)

def Handle_HLRAlgo_HArray1OfPHDat_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast(AnObject)
Handle_HLRAlgo_HArray1OfPHDat_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast

class HLRAlgo_HArray1OfPINod(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_HLRAlgo_PolyInternalNode &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_HArray1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPINod(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_HLRAlgo_PolyInternalNode &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_HLRAlgo_PolyInternalNode &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_HLRAlgo_PolyInternalNode

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_HLRAlgo_PolyInternalNode

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_HArray1OfPINod self)"""
        return _HLRAlgo.HLRAlgo_HArray1OfPINod__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_HArray1OfPINod self) -> Handle_HLRAlgo_HArray1OfPINod"""
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_HArray1OfPINod.Init = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Init, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.Length = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Length, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Lower, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Upper, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_SetValue, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.Value = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Value, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeValue, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Array1, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod__kill_pointed, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_GetHandle, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPINod_swigregister
HLRAlgo_HArray1OfPINod_swigregister(HLRAlgo_HArray1OfPINod)

class Handle_HLRAlgo_HArray1OfPINod(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPINod(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_HArray1OfPINod.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Nullify, None, Handle_HLRAlgo_HArray1OfPINod)
Handle_HLRAlgo_HArray1OfPINod.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull, None, Handle_HLRAlgo_HArray1OfPINod)
Handle_HLRAlgo_HArray1OfPINod.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_GetObject, None, Handle_HLRAlgo_HArray1OfPINod)
Handle_HLRAlgo_HArray1OfPINod._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPINod__kill_pointed, None, Handle_HLRAlgo_HArray1OfPINod)
Handle_HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_swigregister
Handle_HLRAlgo_HArray1OfPINod_swigregister(Handle_HLRAlgo_HArray1OfPINod)

def Handle_HLRAlgo_HArray1OfPINod_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast(AnObject)
Handle_HLRAlgo_HArray1OfPINod_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast

class HLRAlgo_HArray1OfPISeg(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: HLRAlgo_PolyInternalSegment &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_HArray1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPISeg(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_PolyInternalSegment &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_PolyInternalSegment &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyInternalSegment

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_PolyInternalSegment

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_HArray1OfPISeg self)"""
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_HArray1OfPISeg self) -> Handle_HLRAlgo_HArray1OfPISeg"""
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_HArray1OfPISeg.Init = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Init, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.Length = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Length, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Lower, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Upper, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_SetValue, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.Value = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Value, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeValue, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg__kill_pointed, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_GetHandle, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPISeg_swigregister
HLRAlgo_HArray1OfPISeg_swigregister(HLRAlgo_HArray1OfPISeg)

class Handle_HLRAlgo_HArray1OfPISeg(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_HArray1OfPISeg(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_HArray1OfPISeg.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Nullify, None, Handle_HLRAlgo_HArray1OfPISeg)
Handle_HLRAlgo_HArray1OfPISeg.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull, None, Handle_HLRAlgo_HArray1OfPISeg)
Handle_HLRAlgo_HArray1OfPISeg.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_GetObject, None, Handle_HLRAlgo_HArray1OfPISeg)
Handle_HLRAlgo_HArray1OfPISeg._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg__kill_pointed, None, Handle_HLRAlgo_HArray1OfPISeg)
Handle_HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_swigregister
Handle_HLRAlgo_HArray1OfPISeg_swigregister(Handle_HLRAlgo_HArray1OfPISeg)

def Handle_HLRAlgo_HArray1OfPISeg_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast(AnObject)
Handle_HLRAlgo_HArray1OfPISeg_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast

class HLRAlgo_HArray1OfTData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: HLRAlgo_TriangleData &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_HArray1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfTData(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: HLRAlgo_TriangleData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: HLRAlgo_TriangleData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_TriangleData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HLRAlgo_TriangleData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_HArray1OfTData self)"""
        return _HLRAlgo.HLRAlgo_HArray1OfTData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_HArray1OfTData self) -> Handle_HLRAlgo_HArray1OfTData"""
        return _HLRAlgo.HLRAlgo_HArray1OfTData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_HArray1OfTData.Init = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Init, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.Length = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Length, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Lower, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Upper, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_SetValue, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.Value = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Value, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_ChangeValue, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Array1, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData__kill_pointed, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_GetHandle, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.HLRAlgo_HArray1OfTData_swigregister
HLRAlgo_HArray1OfTData_swigregister(HLRAlgo_HArray1OfTData)

class Handle_HLRAlgo_HArray1OfTData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_HArray1OfTData(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_HArray1OfTData.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Nullify, None, Handle_HLRAlgo_HArray1OfTData)
Handle_HLRAlgo_HArray1OfTData.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull, None, Handle_HLRAlgo_HArray1OfTData)
Handle_HLRAlgo_HArray1OfTData.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData_GetObject, None, Handle_HLRAlgo_HArray1OfTData)
Handle_HLRAlgo_HArray1OfTData._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_HArray1OfTData__kill_pointed, None, Handle_HLRAlgo_HArray1OfTData)
Handle_HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_swigregister
Handle_HLRAlgo_HArray1OfTData_swigregister(Handle_HLRAlgo_HArray1OfTData)

def Handle_HLRAlgo_HArray1OfTData_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast(AnObject)
Handle_HLRAlgo_HArray1OfTData_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast

class HLRAlgo_Interference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Inters:
        :type Inters: HLRAlgo_Intersection &
        :param Bound:
        :type Bound: HLRAlgo_Coincidence &
        :param Orient:
        :type Orient: TopAbs_Orientation
        :param Trans:
        :type Trans: TopAbs_Orientation
        :param BTrans:
        :type BTrans: TopAbs_Orientation
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Interference_swiginit(self, _HLRAlgo.new_HLRAlgo_Interference(*args))

    def Intersection(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Intersection &
        :rtype: None

        :rtype: HLRAlgo_Intersection

        """
        return _HLRAlgo.HLRAlgo_Interference_Intersection(self, *args)


    def ChangeIntersection(self, *args):
        """
        :rtype: HLRAlgo_Intersection

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeIntersection(self, *args)


    def Boundary(self, *args):
        """
        :param B:
        :type B: HLRAlgo_Coincidence &
        :rtype: None

        :rtype: HLRAlgo_Coincidence

        """
        return _HLRAlgo.HLRAlgo_Interference_Boundary(self, *args)


    def ChangeBoundary(self, *args):
        """
        :rtype: HLRAlgo_Coincidence

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeBoundary(self, *args)


    def Orientation(self, *args):
        """
        :param O:
        :type O: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Orientation(self, *args)


    def Transition(self, *args):
        """
        :param Tr:
        :type Tr: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Transition(self, *args)


    def BoundaryTransition(self, *args):
        """
        :param BTr:
        :type BTr: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_BoundaryTransition(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Interference.Intersection = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Intersection, None, HLRAlgo_Interference)
HLRAlgo_Interference.ChangeIntersection = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_ChangeIntersection, None, HLRAlgo_Interference)
HLRAlgo_Interference.Boundary = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Boundary, None, HLRAlgo_Interference)
HLRAlgo_Interference.ChangeBoundary = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_ChangeBoundary, None, HLRAlgo_Interference)
HLRAlgo_Interference.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Orientation, None, HLRAlgo_Interference)
HLRAlgo_Interference.Transition = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Transition, None, HLRAlgo_Interference)
HLRAlgo_Interference.BoundaryTransition = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_BoundaryTransition, None, HLRAlgo_Interference)
HLRAlgo_Interference._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Interference__kill_pointed, None, HLRAlgo_Interference)
HLRAlgo_Interference_swigregister = _HLRAlgo.HLRAlgo_Interference_swigregister
HLRAlgo_Interference_swigregister(HLRAlgo_Interference)

class HLRAlgo_InterferenceList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_InterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_InterferenceList(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Interference &
        :rtype: None

        :param I:
        :type I: HLRAlgo_Interference &
        :param theIt:
        :type theIt: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Interference &
        :rtype: None

        :param I:
        :type I: HLRAlgo_Interference &
        :param theIt:
        :type theIt: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Append(self, *args)


    def First(self, *args):
        """
        :rtype: HLRAlgo_Interference

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HLRAlgo_Interference

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Interference &
        :param It:
        :type It: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :param It:
        :type It: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Interference &
        :param It:
        :type It: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_InterferenceList &
        :param It:
        :type It: HLRAlgo_ListIteratorOfInterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_InterferenceList_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_InterferenceList.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Assign, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Set = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Set, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Extent = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Extent, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Clear, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.IsEmpty = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_IsEmpty, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Prepend = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Prepend, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Append = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Append, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.First = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_First, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Last = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Last, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.RemoveFirst = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_RemoveFirst, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Remove = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Remove, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.InsertBefore = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_InsertBefore, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.InsertAfter = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_InsertAfter, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList__kill_pointed, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList_swigregister = _HLRAlgo.HLRAlgo_InterferenceList_swigregister
HLRAlgo_InterferenceList_swigregister(HLRAlgo_InterferenceList)

class HLRAlgo_Intersection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Ori:
        :type Ori: TopAbs_Orientation
        :param Lev:
        :type Lev: int
        :param SegInd:
        :type SegInd: int
        :param Ind:
        :type Ind: int
        :param P:
        :type P: float
        :param Tol:
        :type Tol: Standard_ShortReal
        :param S:
        :type S: TopAbs_State
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Intersection_swiginit(self, _HLRAlgo.new_HLRAlgo_Intersection(*args))

    def Orientation(self, *args):
        """
        :param Ori:
        :type Ori: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Intersection_Orientation(self, *args)


    def Level(self, *args):
        """
        :param Lev:
        :type Lev: int
        :rtype: None

        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Intersection_Level(self, *args)


    def SegIndex(self, *args):
        """
        :param SegInd:
        :type SegInd: int
        :rtype: None

        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Intersection_SegIndex(self, *args)


    def Index(self, *args):
        """
        :param Ind:
        :type Ind: int
        :rtype: None

        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_Intersection_Index(self, *args)


    def Parameter(self, *args):
        """
        :param P:
        :type P: float
        :rtype: None

        :rtype: float

        """
        return _HLRAlgo.HLRAlgo_Intersection_Parameter(self, *args)


    def Tolerance(self, *args):
        """
        :param T:
        :type T: Standard_ShortReal
        :rtype: None

        :rtype: Standard_ShortReal

        """
        return _HLRAlgo.HLRAlgo_Intersection_Tolerance(self, *args)


    def State(self, *args):
        """
        :param S:
        :type S: TopAbs_State
        :rtype: None

        :rtype: TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Intersection_State(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Intersection.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Orientation, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Level = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Level, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.SegIndex = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_SegIndex, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Index = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Index, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Parameter = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Parameter, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Tolerance = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Tolerance, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.State = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_State, None, HLRAlgo_Intersection)
HLRAlgo_Intersection._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection__kill_pointed, None, HLRAlgo_Intersection)
HLRAlgo_Intersection_swigregister = _HLRAlgo.HLRAlgo_Intersection_swigregister
HLRAlgo_Intersection_swigregister(HLRAlgo_Intersection)

class HLRAlgo_ListIteratorOfInterferenceList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: HLRAlgo_InterferenceList &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfInterferenceList(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: HLRAlgo_InterferenceList &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRAlgo_Interference

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_ListIteratorOfInterferenceList.Initialize = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Initialize, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.More = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_More, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.Next = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Next, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Value, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList__kill_pointed, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swigregister
HLRAlgo_ListIteratorOfInterferenceList_swigregister(HLRAlgo_ListIteratorOfInterferenceList)

class HLRAlgo_ListIteratorOfListOfBPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfListOfBPoint(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRAlgo_BiPoint

        """
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_ListIteratorOfListOfBPoint.Initialize = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Initialize, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.More = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_More, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.Next = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Next, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Value, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint__kill_pointed, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swigregister
HLRAlgo_ListIteratorOfListOfBPoint_swigregister(HLRAlgo_ListIteratorOfListOfBPoint)

class HLRAlgo_ListNodeOfInterferenceList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HLRAlgo_Interference &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_ListNodeOfInterferenceList(*args))

    def Value(self, *args):
        """
        :rtype: HLRAlgo_Interference

        """
        return _HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_ListNodeOfInterferenceList self)"""
        return _HLRAlgo.HLRAlgo_ListNodeOfInterferenceList__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_ListNodeOfInterferenceList self) -> Handle_HLRAlgo_ListNodeOfInterferenceList"""
        return _HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_ListNodeOfInterferenceList.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_Value, None, HLRAlgo_ListNodeOfInterferenceList)
HLRAlgo_ListNodeOfInterferenceList._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfInterferenceList__kill_pointed, None, HLRAlgo_ListNodeOfInterferenceList)
HLRAlgo_ListNodeOfInterferenceList.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_GetHandle, None, HLRAlgo_ListNodeOfInterferenceList)
HLRAlgo_ListNodeOfInterferenceList_swigregister = _HLRAlgo.HLRAlgo_ListNodeOfInterferenceList_swigregister
HLRAlgo_ListNodeOfInterferenceList_swigregister(HLRAlgo_ListNodeOfInterferenceList)

class Handle_HLRAlgo_ListNodeOfInterferenceList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_ListNodeOfInterferenceList(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_ListNodeOfInterferenceList.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_Nullify, None, Handle_HLRAlgo_ListNodeOfInterferenceList)
Handle_HLRAlgo_ListNodeOfInterferenceList.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_IsNull, None, Handle_HLRAlgo_ListNodeOfInterferenceList)
Handle_HLRAlgo_ListNodeOfInterferenceList.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_GetObject, None, Handle_HLRAlgo_ListNodeOfInterferenceList)
Handle_HLRAlgo_ListNodeOfInterferenceList._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList__kill_pointed, None, Handle_HLRAlgo_ListNodeOfInterferenceList)
Handle_HLRAlgo_ListNodeOfInterferenceList_swigregister = _HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_swigregister
Handle_HLRAlgo_ListNodeOfInterferenceList_swigregister(Handle_HLRAlgo_ListNodeOfInterferenceList)

def Handle_HLRAlgo_ListNodeOfInterferenceList_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_DownCast(AnObject)
Handle_HLRAlgo_ListNodeOfInterferenceList_DownCast = _HLRAlgo.Handle_HLRAlgo_ListNodeOfInterferenceList_DownCast

class HLRAlgo_ListNodeOfListOfBPoint(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HLRAlgo_BiPoint &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListNodeOfListOfBPoint(*args))

    def Value(self, *args):
        """
        :rtype: HLRAlgo_BiPoint

        """
        return _HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_ListNodeOfListOfBPoint self)"""
        return _HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_ListNodeOfListOfBPoint self) -> Handle_HLRAlgo_ListNodeOfListOfBPoint"""
        return _HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_ListNodeOfListOfBPoint.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_Value, None, HLRAlgo_ListNodeOfListOfBPoint)
HLRAlgo_ListNodeOfListOfBPoint._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint__kill_pointed, None, HLRAlgo_ListNodeOfListOfBPoint)
HLRAlgo_ListNodeOfListOfBPoint.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_GetHandle, None, HLRAlgo_ListNodeOfListOfBPoint)
HLRAlgo_ListNodeOfListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListNodeOfListOfBPoint_swigregister
HLRAlgo_ListNodeOfListOfBPoint_swigregister(HLRAlgo_ListNodeOfListOfBPoint)

class Handle_HLRAlgo_ListNodeOfListOfBPoint(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_ListNodeOfListOfBPoint(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_ListNodeOfListOfBPoint.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_Nullify, None, Handle_HLRAlgo_ListNodeOfListOfBPoint)
Handle_HLRAlgo_ListNodeOfListOfBPoint.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_IsNull, None, Handle_HLRAlgo_ListNodeOfListOfBPoint)
Handle_HLRAlgo_ListNodeOfListOfBPoint.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_GetObject, None, Handle_HLRAlgo_ListNodeOfListOfBPoint)
Handle_HLRAlgo_ListNodeOfListOfBPoint._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint__kill_pointed, None, Handle_HLRAlgo_ListNodeOfListOfBPoint)
Handle_HLRAlgo_ListNodeOfListOfBPoint_swigregister = _HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_swigregister
Handle_HLRAlgo_ListNodeOfListOfBPoint_swigregister(Handle_HLRAlgo_ListNodeOfListOfBPoint)

def Handle_HLRAlgo_ListNodeOfListOfBPoint_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_DownCast(AnObject)
Handle_HLRAlgo_ListNodeOfListOfBPoint_DownCast = _HLRAlgo.Handle_HLRAlgo_ListNodeOfListOfBPoint_DownCast

class HLRAlgo_ListOfBPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_ListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListOfBPoint(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: HLRAlgo_BiPoint &
        :rtype: None

        :param I:
        :type I: HLRAlgo_BiPoint &
        :param theIt:
        :type theIt: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: HLRAlgo_BiPoint &
        :rtype: None

        :param I:
        :type I: HLRAlgo_BiPoint &
        :param theIt:
        :type theIt: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Append(self, *args)


    def First(self, *args):
        """
        :rtype: HLRAlgo_BiPoint

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HLRAlgo_BiPoint

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: HLRAlgo_BiPoint &
        :param It:
        :type It: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :param It:
        :type It: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: HLRAlgo_BiPoint &
        :param It:
        :type It: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        :param Other:
        :type Other: HLRAlgo_ListOfBPoint &
        :param It:
        :type It: HLRAlgo_ListIteratorOfListOfBPoint &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_ListOfBPoint_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_ListOfBPoint.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Assign, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Set = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Set, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Extent = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Extent, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Clear, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.IsEmpty = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_IsEmpty, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Prepend = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Prepend, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Append = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Append, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.First = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_First, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Last = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Last, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.RemoveFirst = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_RemoveFirst, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Remove = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Remove, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.InsertBefore = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertBefore, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.InsertAfter = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertAfter, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint__kill_pointed, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListOfBPoint_swigregister
HLRAlgo_ListOfBPoint_swigregister(HLRAlgo_ListOfBPoint)

class HLRAlgo_PolyAlgo(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyAlgo_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyAlgo(*args))

    def Init(self, *args):
        """
        :param HShell:
        :type HShell: Handle_TColStd_HArray1OfTransient &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Init(self, *args)


    def PolyShell(self, *args):
        """
        :rtype: TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_PolyShell(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Clear(self, *args)


    def Update(self, *args):
        """
        * Prepare all the data to process the algo.

        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Update(self, *args)


    def InitHide(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitHide(self, *args)


    def MoreHide(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreHide(self, *args)


    def NextHide(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextHide(self, *args)


    def Hide(self, *args):
        """
        * process hiding between <Pt1> and <Pt2>.

        :param Coordinates:
        :type Coordinates: Standard_Address &
        :param status:
        :type status: HLRAlgo_EdgeStatus &
        :param Index:
        :type Index: int &
        :param reg1:
        :type reg1: bool
        :param regn:
        :type regn: bool
        :param outl:
        :type outl: bool
        :param intl:
        :type intl: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Hide(self, *args)


    def InitShow(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitShow(self, *args)


    def MoreShow(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreShow(self, *args)


    def NextShow(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextShow(self, *args)


    def Show(self, *args):
        """
        * process hiding between <Pt1> and <Pt2>.

        :param Coordinates:
        :type Coordinates: Standard_Address &
        :param Index:
        :type Index: int &
        :param reg1:
        :type reg1: bool
        :param regn:
        :type regn: bool
        :param outl:
        :type outl: bool
        :param intl:
        :type intl: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Show(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_PolyAlgo self)"""
        return _HLRAlgo.HLRAlgo_PolyAlgo__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_PolyAlgo self) -> Handle_HLRAlgo_PolyAlgo"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyAlgo.Init = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Init, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.PolyShell = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_PolyShell, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Clear, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Update = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Update, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.InitHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_InitHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.MoreHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_MoreHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.NextHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_NextHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Hide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Hide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.InitShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_InitShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.MoreShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_MoreShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.NextShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_NextShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Show = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Show, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo__kill_pointed, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_GetHandle, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.HLRAlgo_PolyAlgo_swigregister
HLRAlgo_PolyAlgo_swigregister(HLRAlgo_PolyAlgo)

class Handle_HLRAlgo_PolyAlgo(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_PolyAlgo_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_PolyAlgo(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_PolyAlgo.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo_Nullify, None, Handle_HLRAlgo_PolyAlgo)
Handle_HLRAlgo_PolyAlgo.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull, None, Handle_HLRAlgo_PolyAlgo)
Handle_HLRAlgo_PolyAlgo.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo_GetObject, None, Handle_HLRAlgo_PolyAlgo)
Handle_HLRAlgo_PolyAlgo._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyAlgo__kill_pointed, None, Handle_HLRAlgo_PolyAlgo)
Handle_HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_swigregister
Handle_HLRAlgo_PolyAlgo_swigregister(Handle_HLRAlgo_PolyAlgo)

def Handle_HLRAlgo_PolyAlgo_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast(AnObject)
Handle_HLRAlgo_PolyAlgo_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast

class HLRAlgo_PolyData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyData(*args))

    def HNodes(self, *args):
        """
        :param HNodes:
        :type HNodes: Handle_TColgp_HArray1OfXYZ
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HNodes(self, *args)


    def HTData(self, *args):
        """
        :param HTData:
        :type HTData: Handle_HLRAlgo_HArray1OfTData &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HTData(self, *args)


    def HPHDat(self, *args):
        """
        :param HPHDat:
        :type HPHDat: Handle_HLRAlgo_HArray1OfPHDat &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HPHDat(self, *args)


    def FaceIndex(self, *args):
        """
        :param I:
        :type I: int
        :rtype: None

        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_PolyData_FaceIndex(self, *args)


    def Nodes(self, *args):
        """
        :rtype: TColgp_Array1OfXYZ

        """
        return _HLRAlgo.HLRAlgo_PolyData_Nodes(self, *args)


    def TData(self, *args):
        """
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyData_TData(self, *args)


    def PHDat(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_PolyData_PHDat(self, *args)


    def UpdateGlobalMinMax(self, *args):
        """
        :param ToTMinMax:
        :type ToTMinMax: Standard_Address
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyData_UpdateGlobalMinMax(self, *args)


    def Hiding(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_PolyData_Hiding(self, *args)


    def HideByPolyData(self, *args):
        """
        * process hiding between <Pt1> and <Pt2>.

        :param Coordinates:
        :type Coordinates: Standard_Address
        :param RealPtr:
        :type RealPtr: Standard_Address
        :param Indices:
        :type Indices: Standard_Address
        :param HidingShell:
        :type HidingShell: bool
        :param status:
        :type status: HLRAlgo_EdgeStatus &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HideByPolyData(self, *args)


    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyData_Indices(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_PolyData self)"""
        return _HLRAlgo.HLRAlgo_PolyData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_PolyData self) -> Handle_HLRAlgo_PolyData"""
        return _HLRAlgo.HLRAlgo_PolyData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyData.HNodes = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HNodes, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HTData, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HPHDat = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HPHDat, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.FaceIndex = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_FaceIndex, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.Nodes = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_Nodes, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.TData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_TData, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.PHDat = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_PHDat, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.UpdateGlobalMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_UpdateGlobalMinMax, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.Hiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_Hiding, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HideByPolyData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HideByPolyData, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_Indices, None, HLRAlgo_PolyData)
HLRAlgo_PolyData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData__kill_pointed, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_GetHandle, None, HLRAlgo_PolyData)
HLRAlgo_PolyData_swigregister = _HLRAlgo.HLRAlgo_PolyData_swigregister
HLRAlgo_PolyData_swigregister(HLRAlgo_PolyData)

class Handle_HLRAlgo_PolyData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_PolyData_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_PolyData(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_PolyData.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyData_Nullify, None, Handle_HLRAlgo_PolyData)
Handle_HLRAlgo_PolyData.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyData_IsNull, None, Handle_HLRAlgo_PolyData)
Handle_HLRAlgo_PolyData.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyData_GetObject, None, Handle_HLRAlgo_PolyData)
Handle_HLRAlgo_PolyData._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyData__kill_pointed, None, Handle_HLRAlgo_PolyData)
Handle_HLRAlgo_PolyData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyData_swigregister
Handle_HLRAlgo_PolyData_swigregister(Handle_HLRAlgo_PolyData)

def Handle_HLRAlgo_PolyData_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast(AnObject)
Handle_HLRAlgo_PolyData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast

class HLRAlgo_PolyHidingData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyHidingData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyHidingData(*args))

    def Set(self, *args):
        """
        :param Index:
        :type Index: int
        :param Minim:
        :type Minim: int
        :param Maxim:
        :type Maxim: int
        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_Set(self, *args)


    def IndexAndMinMax(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_IndexAndMinMax(self, *args)


    def Plan(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyHidingData_Plan(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyHidingData.Set = new_instancemethod(_HLRAlgo.HLRAlgo_PolyHidingData_Set, None, HLRAlgo_PolyHidingData)
HLRAlgo_PolyHidingData.IndexAndMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_PolyHidingData_IndexAndMinMax, None, HLRAlgo_PolyHidingData)
HLRAlgo_PolyHidingData.Plan = new_instancemethod(_HLRAlgo.HLRAlgo_PolyHidingData_Plan, None, HLRAlgo_PolyHidingData)
HLRAlgo_PolyHidingData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyHidingData__kill_pointed, None, HLRAlgo_PolyHidingData)
HLRAlgo_PolyHidingData_swigregister = _HLRAlgo.HLRAlgo_PolyHidingData_swigregister
HLRAlgo_PolyHidingData_swigregister(HLRAlgo_PolyHidingData)

class HLRAlgo_PolyInternalData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param nbNod:
        :type nbNod: int
        :param nbTri:
        :type nbTri: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyInternalData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalData(*args))

    def AddNode(self, *args):
        """
        :param Nod1RValues:
        :type Nod1RValues: Standard_Address
        :param Nod2RValues:
        :type Nod2RValues: Standard_Address
        :param PINod1:
        :type PINod1: Standard_Address &
        :param PINod2:
        :type PINod2: Standard_Address &
        :param coef1:
        :type coef1: float
        :param X3:
        :type X3: float
        :param Y3:
        :type Y3: float
        :param Z3:
        :type Z3: float
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_AddNode(self, *args)


    def UpdateLinks(self, *args):
        """
        :param TData:
        :type TData: Standard_Address &
        :param PISeg:
        :type PISeg: Standard_Address &
        :param PINod:
        :type PINod: Standard_Address &
        :rtype: None

        :param ip1:
        :type ip1: int
        :param ip2:
        :type ip2: int
        :param ip3:
        :type ip3: int
        :param TData1:
        :type TData1: Standard_Address &
        :param TData2:
        :type TData2: Standard_Address &
        :param PISeg1:
        :type PISeg1: Standard_Address &
        :param PISeg2:
        :type PISeg2: Standard_Address &
        :param PINod1:
        :type PINod1: Standard_Address &
        :param PINod2:
        :type PINod2: Standard_Address &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Dump(self, *args)


    def IncTData(self, *args):
        """
        :param TData1:
        :type TData1: Standard_Address &
        :param TData2:
        :type TData2: Standard_Address &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncTData(self, *args)


    def IncPISeg(self, *args):
        """
        :param PISeg1:
        :type PISeg1: Standard_Address &
        :param PISeg2:
        :type PISeg2: Standard_Address &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg(self, *args)


    def IncPINod(self, *args):
        """
        :param PINod1:
        :type PINod1: Standard_Address &
        :param PINod2:
        :type PINod2: Standard_Address &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPINod(self, *args)


    def DecTData(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecTData(self, *args)


    def DecPISeg(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg(self, *args)


    def DecPINod(self, *args):
        """
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPINod(self, *args)


    def NbTData(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbTData(self, *args)


    def NbPISeg(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg(self, *args)


    def NbPINod(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPINod(self, *args)


    def Planar(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Planar(self, *args)


    def IntOutL(self, *args):
        """
        :rtype: bool

        :param B:
        :type B: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IntOutL(self, *args)


    def TData(self, *args):
        """
        :rtype: HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_TData(self, *args)


    def PISeg(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PISeg(self, *args)


    def PINod(self, *args):
        """
        :rtype: HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PINod(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_PolyInternalData self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_PolyInternalData self) -> Handle_HLRAlgo_PolyInternalData"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyInternalData.AddNode = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_AddNode, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.UpdateLinks = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.Dump = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_Dump, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.Planar = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_Planar, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IntOutL = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IntOutL, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.TData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_TData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.PISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_PISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.PINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_PINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData__kill_pointed, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_GetHandle, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.HLRAlgo_PolyInternalData_swigregister
HLRAlgo_PolyInternalData_swigregister(HLRAlgo_PolyInternalData)

class Handle_HLRAlgo_PolyInternalData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_PolyInternalData_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_PolyInternalData(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_PolyInternalData.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData_Nullify, None, Handle_HLRAlgo_PolyInternalData)
Handle_HLRAlgo_PolyInternalData.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull, None, Handle_HLRAlgo_PolyInternalData)
Handle_HLRAlgo_PolyInternalData.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData_GetObject, None, Handle_HLRAlgo_PolyInternalData)
Handle_HLRAlgo_PolyInternalData._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalData__kill_pointed, None, Handle_HLRAlgo_PolyInternalData)
Handle_HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_swigregister
Handle_HLRAlgo_PolyInternalData_swigregister(Handle_HLRAlgo_PolyInternalData)

def Handle_HLRAlgo_PolyInternalData_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast(AnObject)
Handle_HLRAlgo_PolyInternalData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast

class HLRAlgo_PolyInternalNode(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyInternalNode_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalNode(*args))

    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_Indices(self, *args)


    def RValues(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyInternalNode_RValues(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_PolyInternalNode self)"""
        return _HLRAlgo.HLRAlgo_PolyInternalNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_PolyInternalNode self) -> Handle_HLRAlgo_PolyInternalNode"""
        return _HLRAlgo.HLRAlgo_PolyInternalNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyInternalNode.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalNode_Indices, None, HLRAlgo_PolyInternalNode)
HLRAlgo_PolyInternalNode.RValues = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalNode_RValues, None, HLRAlgo_PolyInternalNode)
HLRAlgo_PolyInternalNode._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalNode__kill_pointed, None, HLRAlgo_PolyInternalNode)
HLRAlgo_PolyInternalNode.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalNode_GetHandle, None, HLRAlgo_PolyInternalNode)
HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.HLRAlgo_PolyInternalNode_swigregister
HLRAlgo_PolyInternalNode_swigregister(HLRAlgo_PolyInternalNode)

class Handle_HLRAlgo_PolyInternalNode(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_PolyInternalNode(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_PolyInternalNode.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Nullify, None, Handle_HLRAlgo_PolyInternalNode)
Handle_HLRAlgo_PolyInternalNode.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull, None, Handle_HLRAlgo_PolyInternalNode)
Handle_HLRAlgo_PolyInternalNode.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode_GetObject, None, Handle_HLRAlgo_PolyInternalNode)
Handle_HLRAlgo_PolyInternalNode._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyInternalNode__kill_pointed, None, Handle_HLRAlgo_PolyInternalNode)
Handle_HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_swigregister
Handle_HLRAlgo_PolyInternalNode_swigregister(Handle_HLRAlgo_PolyInternalNode)

def Handle_HLRAlgo_PolyInternalNode_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast(AnObject)
Handle_HLRAlgo_PolyInternalNode_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast

class HLRAlgo_PolyInternalSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyInternalSegment_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalSegment(*args))

    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyInternalSegment_Indices(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyInternalSegment.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalSegment_Indices, None, HLRAlgo_PolyInternalSegment)
HLRAlgo_PolyInternalSegment._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalSegment__kill_pointed, None, HLRAlgo_PolyInternalSegment)
HLRAlgo_PolyInternalSegment_swigregister = _HLRAlgo.HLRAlgo_PolyInternalSegment_swigregister
HLRAlgo_PolyInternalSegment_swigregister(HLRAlgo_PolyInternalSegment)

class HLRAlgo_PolyShellData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param nbFace:
        :type nbFace: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_PolyShellData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyShellData(*args))

    def UpdateGlobalMinMax(self, *args):
        """
        :param TotMinMax:
        :type TotMinMax: Standard_Address
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax(self, *args)


    def UpdateHiding(self, *args):
        """
        :param nbHiding:
        :type nbHiding: int
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding(self, *args)


    def Hiding(self, *args):
        """
        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Hiding(self, *args)


    def PolyData(self, *args):
        """
        :rtype: TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_PolyData(self, *args)


    def HidingPolyData(self, *args):
        """
        :rtype: TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData(self, *args)


    def Edges(self, *args):
        """
        :rtype: HLRAlgo_ListOfBPoint

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Edges(self, *args)


    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Indices(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_PolyShellData self)"""
        return _HLRAlgo.HLRAlgo_PolyShellData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_PolyShellData self) -> Handle_HLRAlgo_PolyShellData"""
        return _HLRAlgo.HLRAlgo_PolyShellData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_PolyShellData.UpdateGlobalMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.UpdateHiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.Hiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_Hiding, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.PolyData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_PolyData, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.HidingPolyData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.Edges = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_Edges, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_Indices, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData__kill_pointed, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_GetHandle, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData_swigregister = _HLRAlgo.HLRAlgo_PolyShellData_swigregister
HLRAlgo_PolyShellData_swigregister(HLRAlgo_PolyShellData)

class Handle_HLRAlgo_PolyShellData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_PolyShellData_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_PolyShellData(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_PolyShellData.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData_Nullify, None, Handle_HLRAlgo_PolyShellData)
Handle_HLRAlgo_PolyShellData.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull, None, Handle_HLRAlgo_PolyShellData)
Handle_HLRAlgo_PolyShellData.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData_GetObject, None, Handle_HLRAlgo_PolyShellData)
Handle_HLRAlgo_PolyShellData._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_PolyShellData__kill_pointed, None, Handle_HLRAlgo_PolyShellData)
Handle_HLRAlgo_PolyShellData_swigregister = _HLRAlgo.Handle_HLRAlgo_PolyShellData_swigregister
Handle_HLRAlgo_PolyShellData_swigregister(Handle_HLRAlgo_PolyShellData)

def Handle_HLRAlgo_PolyShellData_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast(AnObject)
Handle_HLRAlgo_PolyShellData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast

class HLRAlgo_Projector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Creates an axonometric projector. <CS> is the viewing coordinate system.

        :param CS:
        :type CS: gp_Ax2
        :rtype: None

        * Creates a perspective projector. <CS> is the viewing coordinate system.

        :param CS:
        :type CS: gp_Ax2
        :param Focus:
        :type Focus: float
        :rtype: None

        * build a Projector with automatic minmax directions.

        :param T:
        :type T: gp_Trsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :rtype: None

        * build a Projector with given minmax directions.

        :param T:
        :type T: gp_Trsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :param v1:
        :type v1: gp_Vec2d
        :param v2:
        :type v2: gp_Vec2d
        :param v3:
        :type v3: gp_Vec2d
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_Projector_swiginit(self, _HLRAlgo.new_HLRAlgo_Projector(*args))

    def Set(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :param Persp:
        :type Persp: bool
        :param Focus:
        :type Focus: float
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Projector_Set(self, *args)


    def Directions(self, *args):
        """
        :param D1:
        :type D1: gp_Vec2d
        :param D2:
        :type D2: gp_Vec2d
        :param D3:
        :type D3: gp_Vec2d
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Projector_Directions(self, *args)


    def Scaled(self, *args):
        """
        * to compute with the given scale and translation.

        :param On: default value is Standard_False
        :type On: bool
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Projector_Scaled(self, *args)


    def Perspective(self, *args):
        """
        * Returns True if there is a perspective transformation.

        :rtype: bool

        """
        return _HLRAlgo.HLRAlgo_Projector_Perspective(self, *args)


    def Transformation(self, *args):
        """
        * Returns the active transformation.

        :rtype: gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_Transformation(self, *args)


    def InvertedTransformation(self, *args):
        """
        * Returns the active inverted transformation.

        :rtype: gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_InvertedTransformation(self, *args)


    def FullTransformation(self, *args):
        """
        * Returns the original transformation.

        :rtype: gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_FullTransformation(self, *args)


    def Focus(self, *args):
        """
        * Returns the focal length.

        :rtype: float

        """
        return _HLRAlgo.HLRAlgo_Projector_Focus(self, *args)


    def Transform(self, *args):
        """
        :param D:
        :type D: gp_Vec
        :rtype: None

        :param Pnt:
        :type Pnt: gp_Pnt
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Projector_Transform(self, *args)


    def Project(self, *args):
        """
        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param Pout:
        :type Pout: gp_Pnt2d
        :rtype: None

        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: None

        * Transform and apply perspective if needed.

        :param P:
        :type P: gp_Pnt
        :param D1:
        :type D1: gp_Vec
        :param Pout:
        :type Pout: gp_Pnt2d
        :param D1out:
        :type D1out: gp_Vec2d
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_Projector_Project(self, *args)


    def Shoot(self, *args):
        """
        * return a line going through the eye towards the 2d point <X,Y>.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: gp_Lin

        """
        return _HLRAlgo.HLRAlgo_Projector_Shoot(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_Projector.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Set, None, HLRAlgo_Projector)
HLRAlgo_Projector.Directions = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Directions, None, HLRAlgo_Projector)
HLRAlgo_Projector.Scaled = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Scaled, None, HLRAlgo_Projector)
HLRAlgo_Projector.Perspective = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Perspective, None, HLRAlgo_Projector)
HLRAlgo_Projector.Transformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Transformation, None, HLRAlgo_Projector)
HLRAlgo_Projector.InvertedTransformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_InvertedTransformation, None, HLRAlgo_Projector)
HLRAlgo_Projector.FullTransformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_FullTransformation, None, HLRAlgo_Projector)
HLRAlgo_Projector.Focus = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Focus, None, HLRAlgo_Projector)
HLRAlgo_Projector.Transform = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Transform, None, HLRAlgo_Projector)
HLRAlgo_Projector.Project = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Project, None, HLRAlgo_Projector)
HLRAlgo_Projector.Shoot = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Shoot, None, HLRAlgo_Projector)
HLRAlgo_Projector._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_Projector__kill_pointed, None, HLRAlgo_Projector)
HLRAlgo_Projector_swigregister = _HLRAlgo.HLRAlgo_Projector_swigregister
HLRAlgo_Projector_swigregister(HLRAlgo_Projector)

class HLRAlgo_TriangleData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_TriangleData_swiginit(self, _HLRAlgo.new_HLRAlgo_TriangleData(*args))

    def Indices(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_TriangleData_Indices(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_TriangleData.Indices = new_instancemethod(_HLRAlgo.HLRAlgo_TriangleData_Indices, None, HLRAlgo_TriangleData)
HLRAlgo_TriangleData._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_TriangleData__kill_pointed, None, HLRAlgo_TriangleData)
HLRAlgo_TriangleData_swigregister = _HLRAlgo.HLRAlgo_TriangleData_swigregister
HLRAlgo_TriangleData_swigregister(HLRAlgo_TriangleData)

class HLRAlgo_WiresBlock(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Block of Blocks.

        :param NbWires:
        :type NbWires: int
        :rtype: None

        """
        _HLRAlgo.HLRAlgo_WiresBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_WiresBlock(*args))

    def NbWires(self, *args):
        """
        :rtype: int

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_NbWires(self, *args)


    def Set(self, *args):
        """
        :param I:
        :type I: int
        :param W:
        :type W: Handle_HLRAlgo_EdgesBlock &
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Set(self, *args)


    def Wire(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Handle_HLRAlgo_EdgesBlock

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Wire(self, *args)


    def UpdateMinMax(self, *args):
        """
        :param TotMinMax:
        :type TotMinMax: Standard_Address
        :rtype: None

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax(self, *args)


    def MinMax(self, *args):
        """
        :rtype: Standard_Address

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_MinMax(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRAlgo_WiresBlock self)"""
        return _HLRAlgo.HLRAlgo_WiresBlock__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRAlgo_WiresBlock self) -> Handle_HLRAlgo_WiresBlock"""
        return _HLRAlgo.HLRAlgo_WiresBlock_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRAlgo_WiresBlock.NbWires = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_NbWires, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.Set = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_Set, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.Wire = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_Wire, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.UpdateMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.MinMax = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_MinMax, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock._kill_pointed = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock__kill_pointed, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.GetHandle = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_GetHandle, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock_swigregister = _HLRAlgo.HLRAlgo_WiresBlock_swigregister
HLRAlgo_WiresBlock_swigregister(HLRAlgo_WiresBlock)

class Handle_HLRAlgo_WiresBlock(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.Handle_HLRAlgo_WiresBlock_swiginit(self, _HLRAlgo.new_Handle_HLRAlgo_WiresBlock(*args))
    DownCast = staticmethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRAlgo_WiresBlock.Nullify = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock_Nullify, None, Handle_HLRAlgo_WiresBlock)
Handle_HLRAlgo_WiresBlock.IsNull = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull, None, Handle_HLRAlgo_WiresBlock)
Handle_HLRAlgo_WiresBlock.GetObject = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock_GetObject, None, Handle_HLRAlgo_WiresBlock)
Handle_HLRAlgo_WiresBlock._kill_pointed = new_instancemethod(_HLRAlgo.Handle_HLRAlgo_WiresBlock__kill_pointed, None, Handle_HLRAlgo_WiresBlock)
Handle_HLRAlgo_WiresBlock_swigregister = _HLRAlgo.Handle_HLRAlgo_WiresBlock_swigregister
Handle_HLRAlgo_WiresBlock_swigregister(Handle_HLRAlgo_WiresBlock)

def Handle_HLRAlgo_WiresBlock_DownCast(AnObject):
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast(AnObject)
Handle_HLRAlgo_WiresBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast



