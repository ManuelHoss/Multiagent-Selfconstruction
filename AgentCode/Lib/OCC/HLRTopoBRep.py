# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HLRTopoBRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRTopoBRep', [dirname(__file__)])
        except ImportError:
            import _HLRTopoBRep
            return _HLRTopoBRep
        if fp is not None:
            try:
                _mod = imp.load_module('_HLRTopoBRep', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HLRTopoBRep = swig_import_helper()
    del swig_import_helper
else:
    import _HLRTopoBRep
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRTopoBRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HLRTopoBRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HLRTopoBRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HLRTopoBRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HLRTopoBRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HLRTopoBRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HLRTopoBRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HLRTopoBRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HLRTopoBRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HLRTopoBRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HLRTopoBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Contap
import OCC.GeomAbs
import OCC.Adaptor3d
import OCC.TColStd
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.IntSurf
import OCC.BRepTopAdaptor
import OCC.BRepAdaptor
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.TopTools
import OCC.Message
import OCC.HLRAlgo
class HLRTopoBRep_DSFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Insert(*args):
        """
        * Stores in <DS> the outlines of <S> using the current outliner and stores the isolines in <DS> using a Hatcher.

        :param S:
        :type S: TopoDS_Shape &
        :param FO:
        :type FO: Contap_Contour &
        :param DS:
        :type DS: HLRTopoBRep_Data &
        :param MST:
        :type MST: BRepTopAdaptor_MapOfShapeTool &
        :param nbIso:
        :type nbIso: int
        :rtype: void

        """
        return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

    Insert = staticmethod(Insert)

    def __init__(self):
        _HLRTopoBRep.HLRTopoBRep_DSFiller_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DSFiller())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DSFiller._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DSFiller__kill_pointed, None, HLRTopoBRep_DSFiller)
HLRTopoBRep_DSFiller_swigregister = _HLRTopoBRep.HLRTopoBRep_DSFiller_swigregister
HLRTopoBRep_DSFiller_swigregister(HLRTopoBRep_DSFiller)

def HLRTopoBRep_DSFiller_Insert(*args):
    """
    * Stores in <DS> the outlines of <S> using the current outliner and stores the isolines in <DS> using a Hatcher.

    :param S:
    :type S: TopoDS_Shape &
    :param FO:
    :type FO: Contap_Contour &
    :param DS:
    :type DS: HLRTopoBRep_Data &
    :param MST:
    :type MST: BRepTopAdaptor_MapOfShapeTool &
    :param nbIso:
    :type nbIso: int
    :rtype: void

    """
    return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

class HLRTopoBRep_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_Data_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_Data(*args))

    def Clear(self, *args):
        """
        * Clear of all the maps.

        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clear(self, *args)


    def Clean(self, *args):
        """
        * Clear of all the data not needed during and after the hiding process.

        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clean(self, *args)


    def EdgeHasSplE(self, *args):
        """
        * Returns True if the Edge is split.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_EdgeHasSplE(self, *args)


    def FaceHasIntL(self, *args):
        """
        * Returns True if the Face has internal outline.

        :param F:
        :type F: TopoDS_Face &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIntL(self, *args)


    def FaceHasOutL(self, *args):
        """
        * Returns True if the Face has outlines on restriction.

        :param F:
        :type F: TopoDS_Face &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasOutL(self, *args)


    def FaceHasIsoL(self, *args):
        """
        * Returns True if the Face has isolines.

        :param F:
        :type F: TopoDS_Face &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIsoL(self, *args)


    def IsSplEEdgeEdge(self, *args):
        """
        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsSplEEdgeEdge(self, *args)


    def IsIntLFaceEdge(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntLFaceEdge(self, *args)


    def IsOutLFaceEdge(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutLFaceEdge(self, *args)


    def IsIsoLFaceEdge(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIsoLFaceEdge(self, *args)


    def NewSOldS(self, *args):
        """
        :param New:
        :type New: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_NewSOldS(self, *args)


    def EdgeSplE(self, *args):
        """
        * Returns the list of the edges.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_EdgeSplE(self, *args)


    def FaceIntL(self, *args):
        """
        * Returns the list of the internal OutLines.

        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceIntL(self, *args)


    def FaceOutL(self, *args):
        """
        * Returns the list of the OutLines on restriction.

        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceOutL(self, *args)


    def FaceIsoL(self, *args):
        """
        * Returns the list of the IsoLines.

        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceIsoL(self, *args)


    def IsOutV(self, *args):
        """
        * Returns True if V is an outline vertex on a restriction.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutV(self, *args)


    def IsIntV(self, *args):
        """
        * Returns True if V is an internal outline vertex.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntV(self, *args)


    def AddOldS(self, *args):
        """
        :param NewS:
        :type NewS: TopoDS_Shape &
        :param OldS:
        :type OldS: TopoDS_Shape &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOldS(self, *args)


    def AddSplE(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddSplE(self, *args)


    def AddIntL(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntL(self, *args)


    def AddOutL(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutL(self, *args)


    def AddIsoL(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIsoL(self, *args)


    def AddOutV(self, *args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutV(self, *args)


    def AddIntV(self, *args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntV(self, *args)


    def InitEdge(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InitEdge(self, *args)


    def MoreEdge(self, *args):
        """
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreEdge(self, *args)


    def NextEdge(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_NextEdge(self, *args)


    def Edge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Edge(self, *args)


    def InitVertex(self, *args):
        """
        * Start an iteration on the vertices of E.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InitVertex(self, *args)


    def MoreVertex(self, *args):
        """
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreVertex(self, *args)


    def NextVertex(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_NextVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Vertex(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Parameter(self, *args)


    def InsertBefore(self, *args):
        """
        * Insert before the current position.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InsertBefore(self, *args)


    def Append(self, *args):
        """
        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Append(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_Data.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Clear, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Clean = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Clean, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.EdgeHasSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_EdgeHasSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsSplEEdgeEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsSplEEdgeEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIntLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIntLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsOutLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsOutLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIsoLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIsoLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NewSOldS = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NewSOldS, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.EdgeSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_EdgeSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsOutV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsOutV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIntV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIntV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOldS = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOldS, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOutV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOutV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddIntV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIntV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InitEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InitEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.MoreEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_MoreEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NextEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NextEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Edge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Edge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InitVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InitVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.MoreVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_MoreVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NextVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NextVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Vertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Vertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Parameter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Parameter, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InsertBefore = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InsertBefore, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Append = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Append, None, HLRTopoBRep_Data)
HLRTopoBRep_Data._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data__kill_pointed, None, HLRTopoBRep_Data)
HLRTopoBRep_Data_swigregister = _HLRTopoBRep.HLRTopoBRep_Data_swigregister
HLRTopoBRep_Data_swigregister(HLRTopoBRep_Data)

class HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: HLRTopoBRep_DataMapOfShapeFaceData &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: HLRTopoBRep_DataMapOfShapeFaceData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_FaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData.Initialize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Initialize, None, HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData.Key = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Key, None, HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_Value, None, HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData__kill_pointed, None, HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_swigregister
HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData_swigregister(HLRTopoBRep_DataMapIteratorOfDataMapOfShapeFaceData)

class HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: HLRTopoBRep_MapOfShapeListOfVData &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: HLRTopoBRep_MapOfShapeListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_ListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData.Initialize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Initialize, None, HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData.Key = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Key, None, HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_Value, None, HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData__kill_pointed, None, HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_swigregister
HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData_swigregister(HLRTopoBRep_DataMapIteratorOfMapOfShapeListOfVData)

class HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: HLRTopoBRep_FaceData &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_FaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData self)"""
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData self) -> Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData"""
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.Key = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_Key, None, HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_Value, None, HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData__kill_pointed, None, HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.GetHandle = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_GetHandle, None, HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister
HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister(HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)

class Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swiginit(self, _HLRTopoBRep.new_Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData(*args))
    DownCast = staticmethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.Nullify = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_Nullify, None, Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.IsNull = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_IsNull, None, Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData.GetObject = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_GetObject, None, Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData._kill_pointed = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData__kill_pointed, None, Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister = _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_swigregister(Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData)

def Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_DownCast(AnObject):
    return _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_DownCast(AnObject)
Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfDataMapOfShapeFaceData_DownCast

class HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: HLRTopoBRep_ListOfVData &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_ListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData self)"""
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData self) -> Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData"""
        return _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.Key = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_Key, None, HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_Value, None, HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData__kill_pointed, None, HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.GetHandle = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_GetHandle, None, HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister
HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister(HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)

class Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swiginit(self, _HLRTopoBRep.new_Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData(*args))
    DownCast = staticmethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.Nullify = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_Nullify, None, Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.IsNull = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_IsNull, None, Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData.GetObject = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_GetObject, None, Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData__kill_pointed, None, Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister = _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_swigregister(Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData)

def Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_DownCast(AnObject):
    return _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_DownCast(AnObject)
Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_DataMapNodeOfMapOfShapeListOfVData_DownCast

class HLRTopoBRep_DataMapOfShapeFaceData(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapOfShapeFaceData(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_DataMapOfShapeFaceData &
        :rtype: HLRTopoBRep_DataMapOfShapeFaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_DataMapOfShapeFaceData &
        :rtype: HLRTopoBRep_DataMapOfShapeFaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: HLRTopoBRep_FaceData &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: HLRTopoBRep_FaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: HLRTopoBRep_FaceData

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_DataMapOfShapeFaceData self)"""
        return _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_DataMapOfShapeFaceData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Assign, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Set, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ReSize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ReSize, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Clear, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Bind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Bind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.IsBound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_IsBound, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.UnBind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_UnBind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Find = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Find, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ChangeFind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeFind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Find1 = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Find1, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ChangeFind1 = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeFind1, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData__kill_pointed, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_swigregister
HLRTopoBRep_DataMapOfShapeFaceData_swigregister(HLRTopoBRep_DataMapOfShapeFaceData)

class HLRTopoBRep_FaceData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_FaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_FaceData(*args))

    def FaceIntL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIntL(self, *args)


    def FaceOutL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceOutL(self, *args)


    def FaceIsoL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIsoL(self, *args)


    def AddIntL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIntL(self, *args)


    def AddOutL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddOutL(self, *args)


    def AddIsoL(self, *args):
        """
        :rtype: TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIsoL(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_FaceData.FaceIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceIntL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.FaceOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceOutL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.FaceIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceIsoL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.AddIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddIntL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.AddOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddOutL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.AddIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddIsoL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData__kill_pointed, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceData_swigregister
HLRTopoBRep_FaceData_swigregister(HLRTopoBRep_FaceData)

class HLRTopoBRep_FaceIsoLiner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Perform(*args):
        """
        :param FI:
        :type FI: int
        :param F:
        :type F: TopoDS_Face &
        :param DS:
        :type DS: HLRTopoBRep_Data &
        :param nbIsos:
        :type nbIsos: int
        :rtype: void

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

    Perform = staticmethod(Perform)

    def MakeVertex(*args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: gp_Pnt
        :param Par:
        :type Par: float
        :param Tol:
        :type Tol: float
        :param DS:
        :type DS: HLRTopoBRep_Data &
        :rtype: TopoDS_Vertex

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

    MakeVertex = staticmethod(MakeVertex)

    def MakeIsoLine(*args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param Iso:
        :type Iso: Handle_Geom2d_Line &
        :param V1:
        :type V1: TopoDS_Vertex &
        :param V2:
        :type V2: TopoDS_Vertex &
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param Tol:
        :type Tol: float
        :param DS:
        :type DS: HLRTopoBRep_Data &
        :rtype: void

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

    MakeIsoLine = staticmethod(MakeIsoLine)

    def __init__(self):
        _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_FaceIsoLiner())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_FaceIsoLiner._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceIsoLiner__kill_pointed, None, HLRTopoBRep_FaceIsoLiner)
HLRTopoBRep_FaceIsoLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_swigregister
HLRTopoBRep_FaceIsoLiner_swigregister(HLRTopoBRep_FaceIsoLiner)

def HLRTopoBRep_FaceIsoLiner_Perform(*args):
    """
    :param FI:
    :type FI: int
    :param F:
    :type F: TopoDS_Face &
    :param DS:
    :type DS: HLRTopoBRep_Data &
    :param nbIsos:
    :type nbIsos: int
    :rtype: void

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

def HLRTopoBRep_FaceIsoLiner_MakeVertex(*args):
    """
    :param E:
    :type E: TopoDS_Edge &
    :param P:
    :type P: gp_Pnt
    :param Par:
    :type Par: float
    :param Tol:
    :type Tol: float
    :param DS:
    :type DS: HLRTopoBRep_Data &
    :rtype: TopoDS_Vertex

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

def HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args):
    """
    :param F:
    :type F: TopoDS_Face &
    :param Iso:
    :type Iso: Handle_Geom2d_Line &
    :param V1:
    :type V1: TopoDS_Vertex &
    :param V2:
    :type V2: TopoDS_Vertex &
    :param U1:
    :type U1: float
    :param U2:
    :type U2: float
    :param Tol:
    :type Tol: float
    :param DS:
    :type DS: HLRTopoBRep_Data &
    :rtype: void

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

class HLRTopoBRep_ListIteratorOfListOfVData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_ListIteratorOfListOfVData(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_VData

        """
        return _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_ListIteratorOfListOfVData.Initialize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Initialize, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.More = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_More, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.Next = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Next, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Value, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData__kill_pointed, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_swigregister
HLRTopoBRep_ListIteratorOfListOfVData_swigregister(HLRTopoBRep_ListIteratorOfListOfVData)

class HLRTopoBRep_ListNodeOfListOfVData(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: HLRTopoBRep_VData &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_ListNodeOfListOfVData(*args))

    def Value(self, *args):
        """
        :rtype: HLRTopoBRep_VData

        """
        return _HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_ListNodeOfListOfVData self)"""
        return _HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRTopoBRep_ListNodeOfListOfVData self) -> Handle_HLRTopoBRep_ListNodeOfListOfVData"""
        return _HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_ListNodeOfListOfVData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_Value, None, HLRTopoBRep_ListNodeOfListOfVData)
HLRTopoBRep_ListNodeOfListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData__kill_pointed, None, HLRTopoBRep_ListNodeOfListOfVData)
HLRTopoBRep_ListNodeOfListOfVData.GetHandle = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_GetHandle, None, HLRTopoBRep_ListNodeOfListOfVData)
HLRTopoBRep_ListNodeOfListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_ListNodeOfListOfVData_swigregister
HLRTopoBRep_ListNodeOfListOfVData_swigregister(HLRTopoBRep_ListNodeOfListOfVData)

class Handle_HLRTopoBRep_ListNodeOfListOfVData(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_swiginit(self, _HLRTopoBRep.new_Handle_HLRTopoBRep_ListNodeOfListOfVData(*args))
    DownCast = staticmethod(_HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRTopoBRep_ListNodeOfListOfVData.Nullify = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_Nullify, None, Handle_HLRTopoBRep_ListNodeOfListOfVData)
Handle_HLRTopoBRep_ListNodeOfListOfVData.IsNull = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_IsNull, None, Handle_HLRTopoBRep_ListNodeOfListOfVData)
Handle_HLRTopoBRep_ListNodeOfListOfVData.GetObject = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_GetObject, None, Handle_HLRTopoBRep_ListNodeOfListOfVData)
Handle_HLRTopoBRep_ListNodeOfListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData__kill_pointed, None, Handle_HLRTopoBRep_ListNodeOfListOfVData)
Handle_HLRTopoBRep_ListNodeOfListOfVData_swigregister = _HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_swigregister
Handle_HLRTopoBRep_ListNodeOfListOfVData_swigregister(Handle_HLRTopoBRep_ListNodeOfListOfVData)

def Handle_HLRTopoBRep_ListNodeOfListOfVData_DownCast(AnObject):
    return _HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_DownCast(AnObject)
Handle_HLRTopoBRep_ListNodeOfListOfVData_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_ListNodeOfListOfVData_DownCast

class HLRTopoBRep_ListOfVData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_ListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_ListOfVData(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: HLRTopoBRep_VData &
        :rtype: None

        :param I:
        :type I: HLRTopoBRep_VData &
        :param theIt:
        :type theIt: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: HLRTopoBRep_VData &
        :rtype: None

        :param I:
        :type I: HLRTopoBRep_VData &
        :param theIt:
        :type theIt: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Append(self, *args)


    def First(self, *args):
        """
        :rtype: HLRTopoBRep_VData

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_First(self, *args)


    def Last(self, *args):
        """
        :rtype: HLRTopoBRep_VData

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: HLRTopoBRep_VData &
        :param It:
        :type It: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :param It:
        :type It: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: HLRTopoBRep_VData &
        :param It:
        :type It: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        :param Other:
        :type Other: HLRTopoBRep_ListOfVData &
        :param It:
        :type It: HLRTopoBRep_ListIteratorOfListOfVData &
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_ListOfVData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Assign, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Set, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Extent = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Extent, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Clear, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.IsEmpty = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_IsEmpty, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Prepend = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Prepend, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Append = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Append, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.First = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_First, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Last = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Last, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.RemoveFirst = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_RemoveFirst, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Remove = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Remove, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.InsertBefore = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertBefore, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.InsertAfter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertAfter, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData__kill_pointed, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_ListOfVData_swigregister
HLRTopoBRep_ListOfVData_swigregister(HLRTopoBRep_ListOfVData)

class HLRTopoBRep_MapOfShapeListOfVData(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_MapOfShapeListOfVData(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_MapOfShapeListOfVData &
        :rtype: HLRTopoBRep_MapOfShapeListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: HLRTopoBRep_MapOfShapeListOfVData &
        :rtype: HLRTopoBRep_MapOfShapeListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: HLRTopoBRep_ListOfVData &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: HLRTopoBRep_ListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: HLRTopoBRep_ListOfVData

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_MapOfShapeListOfVData self)"""
        return _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_MapOfShapeListOfVData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Assign, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Set, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ReSize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ReSize, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Clear, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Bind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Bind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.IsBound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_IsBound, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.UnBind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_UnBind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Find = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Find, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ChangeFind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeFind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Find1 = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Find1, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ChangeFind1 = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeFind1, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData__kill_pointed, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_swigregister
HLRTopoBRep_MapOfShapeListOfVData_swigregister(HLRTopoBRep_MapOfShapeListOfVData)

class HLRTopoBRep_OutLiner(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param OriSh:
        :type OriSh: TopoDS_Shape &
        :rtype: None

        :param OriS:
        :type OriS: TopoDS_Shape &
        :param OutS:
        :type OutS: TopoDS_Shape &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_OutLiner_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_OutLiner(*args))

    def OriginalShape(self, *args):
        """
        :param OriS:
        :type OriS: TopoDS_Shape &
        :rtype: None

        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OriginalShape(self, *args)


    def OutLinedShape(self, *args):
        """
        :param OutS:
        :type OutS: TopoDS_Shape &
        :rtype: None

        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OutLinedShape(self, *args)


    def DataStructure(self, *args):
        """
        :rtype: HLRTopoBRep_Data

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_DataStructure(self, *args)


    def Fill(self, *args):
        """
        :param P:
        :type P: HLRAlgo_Projector &
        :param MST:
        :type MST: BRepTopAdaptor_MapOfShapeTool &
        :param nbIso:
        :type nbIso: int
        :rtype: None

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_Fill(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(HLRTopoBRep_OutLiner self)"""
        return _HLRTopoBRep.HLRTopoBRep_OutLiner__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(HLRTopoBRep_OutLiner self) -> Handle_HLRTopoBRep_OutLiner"""
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_OutLiner.OriginalShape = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_OriginalShape, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.OutLinedShape = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_OutLinedShape, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.DataStructure = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_DataStructure, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.Fill = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_Fill, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner__kill_pointed, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.GetHandle = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_GetHandle, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_OutLiner_swigregister
HLRTopoBRep_OutLiner_swigregister(HLRTopoBRep_OutLiner)

class Handle_HLRTopoBRep_OutLiner(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_swiginit(self, _HLRTopoBRep.new_Handle_HLRTopoBRep_OutLiner(*args))
    DownCast = staticmethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_HLRTopoBRep_OutLiner.Nullify = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Nullify, None, Handle_HLRTopoBRep_OutLiner)
Handle_HLRTopoBRep_OutLiner.IsNull = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsNull, None, Handle_HLRTopoBRep_OutLiner)
Handle_HLRTopoBRep_OutLiner.GetObject = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_GetObject, None, Handle_HLRTopoBRep_OutLiner)
Handle_HLRTopoBRep_OutLiner._kill_pointed = new_instancemethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner__kill_pointed, None, Handle_HLRTopoBRep_OutLiner)
Handle_HLRTopoBRep_OutLiner_swigregister = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_swigregister
Handle_HLRTopoBRep_OutLiner_swigregister(Handle_HLRTopoBRep_OutLiner)

def Handle_HLRTopoBRep_OutLiner_DownCast(AnObject):
    return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast(AnObject)
Handle_HLRTopoBRep_OutLiner_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast

class HLRTopoBRep_VData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: float
        :param V:
        :type V: TopoDS_Shape &
        :rtype: None

        """
        _HLRTopoBRep.HLRTopoBRep_VData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_VData(*args))

    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _HLRTopoBRep.HLRTopoBRep_VData_Parameter(self, *args)


    def Vertex(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_VData_Vertex(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


HLRTopoBRep_VData.Parameter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_VData_Parameter, None, HLRTopoBRep_VData)
HLRTopoBRep_VData.Vertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_VData_Vertex, None, HLRTopoBRep_VData)
HLRTopoBRep_VData._kill_pointed = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_VData__kill_pointed, None, HLRTopoBRep_VData)
HLRTopoBRep_VData_swigregister = _HLRTopoBRep.HLRTopoBRep_VData_swigregister
HLRTopoBRep_VData_swigregister(HLRTopoBRep_VData)



