# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepMAT2d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepMAT2d', [dirname(__file__)])
        except ImportError:
            import _BRepMAT2d
            return _BRepMAT2d
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepMAT2d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepMAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _BRepMAT2d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMAT2d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepMAT2d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepMAT2d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepMAT2d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepMAT2d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepMAT2d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepMAT2d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepMAT2d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepMAT2d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepMAT2d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepMAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MAT
import OCC.MMgt
import OCC.TCollection
import OCC.Geom2d
import OCC.gp
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Bisector
import OCC.math
import OCC.IntRes2d
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.TColGeom2d
class BRepMAT2d_BisectingLocus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_BisectingLocus_swiginit(self, _BRepMAT2d.new_BRepMAT2d_BisectingLocus(*args))

    def Compute(self, *args):
        """
        :param anExplo:
        :type anExplo: BRepMAT2d_Explorer &
        :param LineIndex: default value is 1
        :type LineIndex: int
        :param aSide: default value is MAT_Left
        :type aSide: MAT_Side
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Compute(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone(self, *args)


    def Graph(self, *args):
        """
        :rtype: Handle_MAT_Graph

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Graph(self, *args)


    def NumberOfContours(self, *args):
        """
        :rtype: int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours(self, *args)


    def NumberOfElts(self, *args):
        """
        :param IndLine:
        :type IndLine: int
        :rtype: int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts(self, *args)


    def NumberOfSections(self, *args):
        """
        :param IndLine:
        :type IndLine: int
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections(self, *args)


    def BasicElt(self, *args):
        """
        :param IndLine:
        :type IndLine: int
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt(self, *args)


    def GeomElt(self, *args):
        """
        :param aBasicElt:
        :type aBasicElt: Handle_MAT_BasicElt &
        :rtype: Handle_Geom2d_Geometry

        :param aNode:
        :type aNode: Handle_MAT_Node &
        :rtype: gp_Pnt2d

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt(self, *args)


    def GeomBis(self, *args):
        """
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :param Reverse:
        :type Reverse: bool
        :rtype: Bisector_Bisec

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_BisectingLocus.Compute = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_Compute, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.IsDone = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.Graph = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_Graph, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfContours = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfElts = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfSections = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.BasicElt = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.GeomElt = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.GeomBis = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus__kill_pointed, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus_swigregister = _BRepMAT2d.BRepMAT2d_BisectingLocus_swigregister
BRepMAT2d_BisectingLocus_swigregister(BRepMAT2d_BisectingLocus)

class BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMAT2d_DataMapOfBasicEltShape &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMAT2d_DataMapOfBasicEltShape &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape.Initialize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Initialize, None, BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape.Key = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Key, None, BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_Value, None, BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape__kill_pointed, None, BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_swigregister = _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_swigregister
BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapIteratorOfDataMapOfBasicEltShape)

class BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt.Initialize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Initialize, None, BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt.Key = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Key, None, BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_Value, None, BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt__kill_pointed, None, BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_swigregister
BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapIteratorOfDataMapOfShapeSequenceOfBasicElt)

class BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape(*args))

    def Key(self, *args):
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape self)"""
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape self) -> Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape"""
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.Key = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_Key, None, BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_Value, None, BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape__kill_pointed, None, BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.GetHandle = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_GetHandle, None, BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister = _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister
BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)

class Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape(*args))
    DownCast = staticmethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.Nullify = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_Nullify, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.IsNull = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_IsNull, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape.GetObject = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_GetObject, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape._kill_pointed = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape__kill_pointed, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister = _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_swigregister(Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape)

def Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_DownCast(AnObject):
    return _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_DownCast(AnObject)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_DownCast = _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfBasicEltShape_DownCast

class BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepMAT2d_SequenceOfBasicElt &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt self)"""
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt self) -> Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt"""
        return _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.Key = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_Key, None, BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_Value, None, BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt__kill_pointed, None, BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.GetHandle = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_GetHandle, None, BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister
BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)

class Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt(*args))
    DownCast = staticmethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.Nullify = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_Nullify, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.IsNull = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_IsNull, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt.GetObject = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_GetObject, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt__kill_pointed, None, Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_swigregister(Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt)

def Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_DownCast(AnObject):
    return _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_DownCast(AnObject)
Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_DownCast = _BRepMAT2d.Handle_BRepMAT2d_DataMapNodeOfDataMapOfShapeSequenceOfBasicElt_DownCast

class BRepMAT2d_DataMapOfBasicEltShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfBasicEltShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_DataMapOfBasicEltShape &
        :rtype: BRepMAT2d_DataMapOfBasicEltShape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_DataMapOfBasicEltShape &
        :rtype: BRepMAT2d_DataMapOfBasicEltShape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :param I:
        :type I: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: Standard_Address

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Handle_MAT_BasicElt &
        :rtype: Standard_Address

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMAT2d_DataMapOfBasicEltShape self)"""
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapOfBasicEltShape.Assign = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Assign, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Set = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Set, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ReSize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ReSize, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Clear, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Bind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.IsBound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_IsBound, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.UnBind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_UnBind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Find = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ChangeFind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Find1 = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find1, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ChangeFind1 = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind1, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape__kill_pointed, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swigregister
BRepMAT2d_DataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapOfBasicEltShape)

class BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt &
        :rtype: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt &
        :rtype: BRepMAT2d_DataMapOfShapeSequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepMAT2d_SequenceOfBasicElt &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMAT2d_DataMapOfShapeSequenceOfBasicElt self)"""
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Assign = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Assign, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Set = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Set, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ReSize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ReSize, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Clear, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Bind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.IsBound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_IsBound, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.UnBind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_UnBind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Find = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ChangeFind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Find1 = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find1, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ChangeFind1 = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind1, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt__kill_pointed, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)

class BRepMAT2d_Explorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aFace:
        :type aFace: TopoDS_Face &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_Explorer_swiginit(self, _BRepMAT2d.new_BRepMAT2d_Explorer(*args))

    def Clear(self, *args):
        """
        * Clear the contents of <self>.

        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Clear(self, *args)


    def Perform(self, *args):
        """
        :param aFace:
        :type aFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Perform(self, *args)


    def NumberOfContours(self, *args):
        """
        * Returns the Number of contours.

        :rtype: int

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours(self, *args)


    def NumberOfCurves(self, *args):
        """
        * Returns the Number of Curves in the Contour number  <IndexContour>.

        :param IndexContour:
        :type IndexContour: int
        :rtype: int

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves(self, *args)


    def Init(self, *args):
        """
        * Initialisation of an Iterator on the curves of  the Contour number <IndexContour>.

        :param IndexContour:
        :type IndexContour: int
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Init(self, *args)


    def More(self, *args):
        """
        * Return False if there is no more curves on the Contour  initialised by the method Init.

        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_More(self, *args)


    def Next(self, *args):
        """
        * Move to the next curve of the current Contour.

        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Next(self, *args)


    def Value(self, *args):
        """
        * Returns the current curve on the current Contour.

        :rtype: Handle_Geom2d_Curve

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Value(self, *args)


    def Shape(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Shape(self, *args)


    def Contour(self, *args):
        """
        :param IndexContour:
        :type IndexContour: int
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Contour(self, *args)


    def IsModified(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_IsModified(self, *args)


    def ModifiedShape(self, *args):
        """
        * If the shape is not modified, returns the shape itself.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape(self, *args)


    def GetIsClosed(self, *args):
        """
        :rtype: TColStd_SequenceOfBoolean

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_Explorer.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Clear, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Perform = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Perform, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.NumberOfContours = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.NumberOfCurves = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Init = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Init, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.More = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_More, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Next = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Next, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Value, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Shape = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Shape, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Contour = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Contour, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.IsModified = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_IsModified, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.ModifiedShape = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.GetIsClosed = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer__kill_pointed, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer_swigregister = _BRepMAT2d.BRepMAT2d_Explorer_swigregister
BRepMAT2d_Explorer_swigregister(BRepMAT2d_Explorer)

class BRepMAT2d_LinkTopoBilo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Constructs the links Between S and BiLo. raises if <S> is not a face.

        :param Explo:
        :type Explo: BRepMAT2d_Explorer &
        :param BiLo:
        :type BiLo: BRepMAT2d_BisectingLocus &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swiginit(self, _BRepMAT2d.new_BRepMAT2d_LinkTopoBilo(*args))

    def Perform(self, *args):
        """
        * Constructs the links Between S and BiLo. raises if <S> is not a face or a wire.

        :param Explo:
        :type Explo: BRepMAT2d_Explorer &
        :param BiLo:
        :type BiLo: BRepMAT2d_BisectingLocus &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform(self, *args)


    def Init(self, *args):
        """
        * Initialise the Iterator on <S> <S> is an edge or a vertex of the initial wire or face. raises if <S> is not an edge or a vertex.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init(self, *args)


    def More(self, *args):
        """
        * Returns True if there is a current BasicElt.

        :rtype: bool

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_More(self, *args)


    def Next(self, *args):
        """
        * Proceed to the next BasicElt.

        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next(self, *args)


    def Value(self, *args):
        """
        * Returns the current BasicElt.

        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value(self, *args)


    def GeneratingShape(self, *args):
        """
        * Returns the Shape linked to <aBE>.

        :param aBE:
        :type aBE: Handle_MAT_BasicElt &
        :rtype: TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_LinkTopoBilo.Perform = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Init = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.More = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_More, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Next = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.GeneratingShape = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo__kill_pointed, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo_swigregister = _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swigregister
BRepMAT2d_LinkTopoBilo_swigregister(BRepMAT2d_LinkTopoBilo)

class BRepMAT2d_SequenceNodeOfSequenceOfBasicElt(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_MAT_BasicElt &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt(*args))

    def Value(self, *args):
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepMAT2d_SequenceNodeOfSequenceOfBasicElt self)"""
        return _BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepMAT2d_SequenceNodeOfSequenceOfBasicElt self) -> Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt"""
        return _BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_SequenceNodeOfSequenceOfBasicElt.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_Value, None, BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
BRepMAT2d_SequenceNodeOfSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt__kill_pointed, None, BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
BRepMAT2d_SequenceNodeOfSequenceOfBasicElt.GetHandle = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_GetHandle, None, BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister
BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister(BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)

class Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt(*args))
    DownCast = staticmethod(_BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt.Nullify = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_Nullify, None, Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt.IsNull = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_IsNull, None, Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt.GetObject = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_GetObject, None, Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt__kill_pointed, None, Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister = _BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_swigregister(Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt)

def Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_DownCast(AnObject):
    return _BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_DownCast(AnObject)
Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_DownCast = _BRepMAT2d.Handle_BRepMAT2d_SequenceNodeOfSequenceOfBasicElt_DownCast

class BRepMAT2d_SequenceOfBasicElt(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_SequenceOfBasicElt(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_SequenceOfBasicElt &
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepMAT2d_SequenceOfBasicElt &
        :rtype: BRepMAT2d_SequenceOfBasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param S:
        :type S: BRepMAT2d_SequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param S:
        :type S: BRepMAT2d_SequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepMAT2d_SequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepMAT2d_SequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepMAT2d_SequenceOfBasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_MAT_BasicElt &
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepMAT2d_SequenceOfBasicElt.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Clear, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Assign = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Assign, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Set = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Set, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Append = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Append, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Prepend = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Prepend, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.InsertBefore = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_InsertBefore, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.InsertAfter = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_InsertAfter, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.First = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_First, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Last = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Last, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Split = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Split, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Value, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.SetValue = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_SetValue, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.ChangeValue = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_ChangeValue, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt.Remove = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_Remove, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt._kill_pointed = new_instancemethod(_BRepMAT2d.BRepMAT2d_SequenceOfBasicElt__kill_pointed, None, BRepMAT2d_SequenceOfBasicElt)
BRepMAT2d_SequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_SequenceOfBasicElt_swigregister
BRepMAT2d_SequenceOfBasicElt_swigregister(BRepMAT2d_SequenceOfBasicElt)



