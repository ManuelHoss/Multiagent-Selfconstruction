# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeExtend.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeExtend', [dirname(__file__)])
        except ImportError:
            import _ShapeExtend
            return _ShapeExtend
        if fp is not None:
            try:
                _mod = imp.load_module('_ShapeExtend', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ShapeExtend = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeExtend
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeExtend.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeExtend.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeExtend.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeExtend.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeExtend.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeExtend.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeExtend.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeExtend.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeExtend.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeExtend.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeExtend.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeExtend.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeExtend.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeExtend.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeExtend.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeExtend.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeExtend.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeExtend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.Message
import OCC.TCollection
import OCC.TColStd
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColGeom
import OCC.TopTools

_ShapeExtend.ShapeExtend_Natural_swigconstant(_ShapeExtend)
ShapeExtend_Natural = _ShapeExtend.ShapeExtend_Natural

_ShapeExtend.ShapeExtend_Uniform_swigconstant(_ShapeExtend)
ShapeExtend_Uniform = _ShapeExtend.ShapeExtend_Uniform

_ShapeExtend.ShapeExtend_Unitary_swigconstant(_ShapeExtend)
ShapeExtend_Unitary = _ShapeExtend.ShapeExtend_Unitary

_ShapeExtend.ShapeExtend_OK_swigconstant(_ShapeExtend)
ShapeExtend_OK = _ShapeExtend.ShapeExtend_OK

_ShapeExtend.ShapeExtend_DONE1_swigconstant(_ShapeExtend)
ShapeExtend_DONE1 = _ShapeExtend.ShapeExtend_DONE1

_ShapeExtend.ShapeExtend_DONE2_swigconstant(_ShapeExtend)
ShapeExtend_DONE2 = _ShapeExtend.ShapeExtend_DONE2

_ShapeExtend.ShapeExtend_DONE3_swigconstant(_ShapeExtend)
ShapeExtend_DONE3 = _ShapeExtend.ShapeExtend_DONE3

_ShapeExtend.ShapeExtend_DONE4_swigconstant(_ShapeExtend)
ShapeExtend_DONE4 = _ShapeExtend.ShapeExtend_DONE4

_ShapeExtend.ShapeExtend_DONE5_swigconstant(_ShapeExtend)
ShapeExtend_DONE5 = _ShapeExtend.ShapeExtend_DONE5

_ShapeExtend.ShapeExtend_DONE6_swigconstant(_ShapeExtend)
ShapeExtend_DONE6 = _ShapeExtend.ShapeExtend_DONE6

_ShapeExtend.ShapeExtend_DONE7_swigconstant(_ShapeExtend)
ShapeExtend_DONE7 = _ShapeExtend.ShapeExtend_DONE7

_ShapeExtend.ShapeExtend_DONE8_swigconstant(_ShapeExtend)
ShapeExtend_DONE8 = _ShapeExtend.ShapeExtend_DONE8

_ShapeExtend.ShapeExtend_DONE_swigconstant(_ShapeExtend)
ShapeExtend_DONE = _ShapeExtend.ShapeExtend_DONE

_ShapeExtend.ShapeExtend_FAIL1_swigconstant(_ShapeExtend)
ShapeExtend_FAIL1 = _ShapeExtend.ShapeExtend_FAIL1

_ShapeExtend.ShapeExtend_FAIL2_swigconstant(_ShapeExtend)
ShapeExtend_FAIL2 = _ShapeExtend.ShapeExtend_FAIL2

_ShapeExtend.ShapeExtend_FAIL3_swigconstant(_ShapeExtend)
ShapeExtend_FAIL3 = _ShapeExtend.ShapeExtend_FAIL3

_ShapeExtend.ShapeExtend_FAIL4_swigconstant(_ShapeExtend)
ShapeExtend_FAIL4 = _ShapeExtend.ShapeExtend_FAIL4

_ShapeExtend.ShapeExtend_FAIL5_swigconstant(_ShapeExtend)
ShapeExtend_FAIL5 = _ShapeExtend.ShapeExtend_FAIL5

_ShapeExtend.ShapeExtend_FAIL6_swigconstant(_ShapeExtend)
ShapeExtend_FAIL6 = _ShapeExtend.ShapeExtend_FAIL6

_ShapeExtend.ShapeExtend_FAIL7_swigconstant(_ShapeExtend)
ShapeExtend_FAIL7 = _ShapeExtend.ShapeExtend_FAIL7

_ShapeExtend.ShapeExtend_FAIL8_swigconstant(_ShapeExtend)
ShapeExtend_FAIL8 = _ShapeExtend.ShapeExtend_FAIL8

_ShapeExtend.ShapeExtend_FAIL_swigconstant(_ShapeExtend)
ShapeExtend_FAIL = _ShapeExtend.ShapeExtend_FAIL
class shapeextend(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        * Inits using of ShapeExtend. Currently, loads messages output by ShapeHealing algorithms.

        :rtype: void

        """
        return _ShapeExtend.shapeextend_Init(*args)

    Init = staticmethod(Init)

    def EncodeStatus(*args):
        """
        * Encodes status (enumeration) to a bit flag

        :param status:
        :type status: ShapeExtend_Status
        :rtype: int

        """
        return _ShapeExtend.shapeextend_EncodeStatus(*args)

    EncodeStatus = staticmethod(EncodeStatus)

    def DecodeStatus(*args):
        """
        * Tells if a bit flag contains bit corresponding to enumerated status

        :param flag:
        :type flag: int
        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeExtend.shapeextend_DecodeStatus(*args)

    DecodeStatus = staticmethod(DecodeStatus)

    def __init__(self):
        _ShapeExtend.shapeextend_swiginit(self, _ShapeExtend.new_shapeextend())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


shapeextend._kill_pointed = new_instancemethod(_ShapeExtend.shapeextend__kill_pointed, None, shapeextend)
shapeextend_swigregister = _ShapeExtend.shapeextend_swigregister
shapeextend_swigregister(shapeextend)

def shapeextend_Init(*args):
    """
    * Inits using of ShapeExtend. Currently, loads messages output by ShapeHealing algorithms.

    :rtype: void

    """
    return _ShapeExtend.shapeextend_Init(*args)

def shapeextend_EncodeStatus(*args):
    """
    * Encodes status (enumeration) to a bit flag

    :param status:
    :type status: ShapeExtend_Status
    :rtype: int

    """
    return _ShapeExtend.shapeextend_EncodeStatus(*args)

def shapeextend_DecodeStatus(*args):
    """
    * Tells if a bit flag contains bit corresponding to enumerated status

    :param flag:
    :type flag: int
    :param status:
    :type status: ShapeExtend_Status
    :rtype: bool

    """
    return _ShapeExtend.shapeextend_DecodeStatus(*args)

class ShapeExtend_BasicMsgRegistrator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeExtend.ShapeExtend_BasicMsgRegistrator_swiginit(self, _ShapeExtend.new_ShapeExtend_BasicMsgRegistrator(*args))

    def Send(self, *args):
        """
        * Sends a message to be attached to the object. Object can be of any type interpreted by redefined MsgRegistrator.

        :param object:
        :type object: Handle_Standard_Transient &
        :param message:
        :type message: Message_Msg &
        :param gravity:
        :type gravity: Message_Gravity
        :rtype: void

        * Sends a message to be attached to the shape.

        :param shape:
        :type shape: TopoDS_Shape &
        :param message:
        :type message: Message_Msg &
        :param gravity:
        :type gravity: Message_Gravity
        :rtype: void

        * Calls Send method with Null Transient.

        :param message:
        :type message: Message_Msg &
        :param gravity:
        :type gravity: Message_Gravity
        :rtype: void

        """
        return _ShapeExtend.ShapeExtend_BasicMsgRegistrator_Send(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_BasicMsgRegistrator self)"""
        return _ShapeExtend.ShapeExtend_BasicMsgRegistrator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_BasicMsgRegistrator self) -> Handle_ShapeExtend_BasicMsgRegistrator"""
        return _ShapeExtend.ShapeExtend_BasicMsgRegistrator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_BasicMsgRegistrator.Send = new_instancemethod(_ShapeExtend.ShapeExtend_BasicMsgRegistrator_Send, None, ShapeExtend_BasicMsgRegistrator)
ShapeExtend_BasicMsgRegistrator._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_BasicMsgRegistrator__kill_pointed, None, ShapeExtend_BasicMsgRegistrator)
ShapeExtend_BasicMsgRegistrator.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_BasicMsgRegistrator_GetHandle, None, ShapeExtend_BasicMsgRegistrator)
ShapeExtend_BasicMsgRegistrator_swigregister = _ShapeExtend.ShapeExtend_BasicMsgRegistrator_swigregister
ShapeExtend_BasicMsgRegistrator_swigregister(ShapeExtend_BasicMsgRegistrator)

class Handle_ShapeExtend_BasicMsgRegistrator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_BasicMsgRegistrator(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_BasicMsgRegistrator.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_Nullify, None, Handle_ShapeExtend_BasicMsgRegistrator)
Handle_ShapeExtend_BasicMsgRegistrator.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_IsNull, None, Handle_ShapeExtend_BasicMsgRegistrator)
Handle_ShapeExtend_BasicMsgRegistrator.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_GetObject, None, Handle_ShapeExtend_BasicMsgRegistrator)
Handle_ShapeExtend_BasicMsgRegistrator._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator__kill_pointed, None, Handle_ShapeExtend_BasicMsgRegistrator)
Handle_ShapeExtend_BasicMsgRegistrator_swigregister = _ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_swigregister
Handle_ShapeExtend_BasicMsgRegistrator_swigregister(Handle_ShapeExtend_BasicMsgRegistrator)

def Handle_ShapeExtend_BasicMsgRegistrator_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_DownCast(AnObject)
Handle_ShapeExtend_BasicMsgRegistrator_DownCast = _ShapeExtend.Handle_ShapeExtend_BasicMsgRegistrator_DownCast

class ShapeExtend_ComplexCurve(OCC.Geom.Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbCurves(self, *args):
        """
        * Returns number of curves

        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_NbCurves(self, *args)


    def Curve(self, *args):
        """
        * Returns curve given by its index

        :param index:
        :type index: int
        :rtype: Handle_Geom_Curve

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_Curve(self, *args)


    def LocateParameter(self, *args):
        """
        * Returns number of the curve for the given parameter U and local paramete r UOut for the found curve

        :param U:
        :type U: float
        :param UOut:
        :type UOut: float &
        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_LocateParameter(self, *args)


    def LocalToGlobal(self, *args):
        """
        * Returns global parameter for the whole curve according to the segment and local parameter on it

        :param index:
        :type index: int
        :param Ulocal:
        :type Ulocal: float
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_LocalToGlobal(self, *args)


    def GetScaleFactor(self, *args):
        """
        * Returns scale factor for recomputing of deviatives.

        :param ind:
        :type ind: int
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_GetScaleFactor(self, *args)


    def CheckConnectivity(self, *args):
        """
        * Checks geometrical connectivity of the curves, including closure (sets fields myClosed)

        :param Preci:
        :type Preci: float
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_ComplexCurve_CheckConnectivity(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_ComplexCurve self)"""
        return _ShapeExtend.ShapeExtend_ComplexCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_ComplexCurve self) -> Handle_ShapeExtend_ComplexCurve"""
        return _ShapeExtend.ShapeExtend_ComplexCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_ComplexCurve.NbCurves = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_NbCurves, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.Curve = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_Curve, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.LocateParameter = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_LocateParameter, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.LocalToGlobal = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_LocalToGlobal, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.GetScaleFactor = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_GetScaleFactor, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.CheckConnectivity = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_CheckConnectivity, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve__kill_pointed, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_ComplexCurve_GetHandle, None, ShapeExtend_ComplexCurve)
ShapeExtend_ComplexCurve_swigregister = _ShapeExtend.ShapeExtend_ComplexCurve_swigregister
ShapeExtend_ComplexCurve_swigregister(ShapeExtend_ComplexCurve)

class Handle_ShapeExtend_ComplexCurve(OCC.Geom.Handle_Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_ComplexCurve_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_ComplexCurve(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_ComplexCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_ComplexCurve.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_ComplexCurve_Nullify, None, Handle_ShapeExtend_ComplexCurve)
Handle_ShapeExtend_ComplexCurve.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_ComplexCurve_IsNull, None, Handle_ShapeExtend_ComplexCurve)
Handle_ShapeExtend_ComplexCurve.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_ComplexCurve_GetObject, None, Handle_ShapeExtend_ComplexCurve)
Handle_ShapeExtend_ComplexCurve._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_ComplexCurve__kill_pointed, None, Handle_ShapeExtend_ComplexCurve)
Handle_ShapeExtend_ComplexCurve_swigregister = _ShapeExtend.Handle_ShapeExtend_ComplexCurve_swigregister
Handle_ShapeExtend_ComplexCurve_swigregister(Handle_ShapeExtend_ComplexCurve)

def Handle_ShapeExtend_ComplexCurve_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_ComplexCurve_DownCast(AnObject)
Handle_ShapeExtend_ComplexCurve_DownCast = _ShapeExtend.Handle_ShapeExtend_ComplexCurve_DownCast

class ShapeExtend_CompositeSurface(OCC.Geom.Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Initializes by a grid of surfaces (calls Init()).

        :param GridSurf:
        :type GridSurf: Handle_TColGeom_HArray2OfSurface &
        :param param: default value is ShapeExtend_Natural
        :type param: ShapeExtend_Parametrisation
        :rtype: None

        * Initializes by a grid of surfaces (calls Init()).

        :param GridSurf:
        :type GridSurf: Handle_TColGeom_HArray2OfSurface &
        :param UJoints:
        :type UJoints: TColStd_Array1OfReal &
        :param VJoints:
        :type VJoints: TColStd_Array1OfReal &
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_CompositeSurface_swiginit(self, _ShapeExtend.new_ShapeExtend_CompositeSurface(*args))

    def Init(self, *args):
        """
        * Initializes by a grid of surfaces. All the Surfaces of the grid must have geometrical connectivity as stated above. If geometrical connectivity is not satisfied, method returns False. However, class is initialized even in that case.  Last parameter defines how global parametrisation (joint values) will be computed: ShapeExtend_Natural: U1 = u11min, Ui+1 = Ui + (ui1max-ui1min), etc. ShapeExtend_Uniform: Ui = i-1, Vj = j-1 ShapeExtend_Unitary: Ui = (i-1)/Nu, Vi = (j-1)/Nv

        :param GridSurf:
        :type GridSurf: Handle_TColGeom_HArray2OfSurface &
        :param param: default value is ShapeExtend_Natural
        :type param: ShapeExtend_Parametrisation
        :rtype: bool

        * Initializes by a grid of surfaces with given global parametrisation defined by UJoints and VJoints arrays, each having langth equal to number of patches in corresponding direction + 1. Global joint values should be sorted in increasing order. All the Surfaces of the grid must have geometrical connectivity as stated above. If geometrical connectivity is not satisfied, method returns False. However, class is initialized even in that case.

        :param GridSurf:
        :type GridSurf: Handle_TColGeom_HArray2OfSurface &
        :param UJoints:
        :type UJoints: TColStd_Array1OfReal &
        :param VJoints:
        :type VJoints: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_Init(self, *args)


    def NbUPatches(self, *args):
        """
        * Returns number of patches in U direction.

        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_NbUPatches(self, *args)


    def NbVPatches(self, *args):
        """
        * Returns number of patches in V direction.

        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_NbVPatches(self, *args)


    def Patches(self, *args):
        """
        * Returns grid of surfaces

        :rtype: Handle_TColGeom_HArray2OfSurface

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_Patches(self, *args)


    def UJointValues(self, *args):
        """
        * Returns the array of U values corresponding to joint points between patches as well as to start and end points, which define global parametrisation of the surface

        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_UJointValues(self, *args)


    def VJointValues(self, *args):
        """
        * Returns the array of V values corresponding to joint points between patches as well as to start and end points, which define global parametrisation of the surface

        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_VJointValues(self, *args)


    def UJointValue(self, *args):
        """
        * Returns i-th joint value in U direction (1-st is global Umin, (NbUPatches()+1)-th is global Umax on the composite surface)

        :param i:
        :type i: int
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_UJointValue(self, *args)


    def VJointValue(self, *args):
        """
        * Returns j-th joint value in V direction (1-st is global Vmin, (NbVPatches()+1)-th is global Vmax on the composite surface)

        :param j:
        :type j: int
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_VJointValue(self, *args)


    def SetUJointValues(self, *args):
        """
        * Sets the array of U values corresponding to joint points, which define global parametrisation of the surface. Number of values in array should be equal to NbUPatches()+1. All the values should be sorted in increasing order. If this is not satisfied, does nothing and returns False.

        :param UJoints:
        :type UJoints: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_SetUJointValues(self, *args)


    def SetVJointValues(self, *args):
        """
        * Sets the array of V values corresponding to joint points, which define global parametrisation of the surface Number of values in array should be equal to NbVPatches()+1. All the values should be sorted in increasing order. If this is not satisfied, does nothing and returns False.

        :param VJoints:
        :type VJoints: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_SetVJointValues(self, *args)


    def SetUFirstValue(self, *args):
        """
        * Changes starting value for global U parametrisation (all other joint values are shifted accordingly)

        :param UFirst:
        :type UFirst: float
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_SetUFirstValue(self, *args)


    def SetVFirstValue(self, *args):
        """
        * Changes starting value for global V parametrisation (all other joint values are shifted accordingly)

        :param VFirst:
        :type VFirst: float
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_SetVFirstValue(self, *args)


    def LocateUParameter(self, *args):
        """
        * Returns number of col that contains given (global) parameter

        :param U:
        :type U: float
        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_LocateUParameter(self, *args)


    def LocateVParameter(self, *args):
        """
        * Returns number of row that contains given (global) parameter

        :param V:
        :type V: float
        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_LocateVParameter(self, *args)


    def LocateUVPoint(self, *args):
        """
        * Returns number of row and col of surface that contains given point

        :param pnt:
        :type pnt: gp_Pnt2d
        :param i:
        :type i: int &
        :param j:
        :type j: int &
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_LocateUVPoint(self, *args)


    def Patch(self, *args):
        """
        * Returns one surface patch

        :param i:
        :type i: int
        :param j:
        :type j: int
        :rtype: Handle_Geom_Surface

        * Returns one surface patch that contains given (global) parameters

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: Handle_Geom_Surface

        * Returns one surface patch that contains given point

        :param pnt:
        :type pnt: gp_Pnt2d
        :rtype: Handle_Geom_Surface

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_Patch(self, *args)


    def ULocalToGlobal(self, *args):
        """
        * Converts local parameter u on patch i,j to global parameter U

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param u:
        :type u: float
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_ULocalToGlobal(self, *args)


    def VLocalToGlobal(self, *args):
        """
        * Converts local parameter v on patch i,j to global parameter V

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param v:
        :type v: float
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_VLocalToGlobal(self, *args)


    def LocalToGlobal(self, *args):
        """
        * Converts local parameters uv on patch i,j to global parameters UV

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param uv:
        :type uv: gp_Pnt2d
        :rtype: gp_Pnt2d

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_LocalToGlobal(self, *args)


    def UGlobalToLocal(self, *args):
        """
        * Converts global parameter U to local parameter u on patch i,j

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param U:
        :type U: float
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_UGlobalToLocal(self, *args)


    def VGlobalToLocal(self, *args):
        """
        * Converts global parameter V to local parameter v on patch i,j

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param V:
        :type V: float
        :rtype: float

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_VGlobalToLocal(self, *args)


    def GlobalToLocal(self, *args):
        """
        * Converts global parameters UV to local parameters uv on patch i,j

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param UV:
        :type UV: gp_Pnt2d
        :rtype: gp_Pnt2d

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_GlobalToLocal(self, *args)


    def GlobalToLocalTransformation(self, *args):
        """
        * Computes transformation operator and uFactor descrinbing affine transformation required to convert global parameters on composite surface to local parameters on patch (i,j): uv = ( uFactor, 1. ) X Trsf * UV; NOTE: Thus Trsf contains shift and scale by V, scale by U is stored in uFact. Returns True if transformation is not an identity

        :param i:
        :type i: int
        :param j:
        :type j: int
        :param uFact:
        :type uFact: float &
        :param Trsf:
        :type Trsf: gp_Trsf2d
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_GlobalToLocalTransformation(self, *args)


    def Value(self, *args):
        """
        * Computes the point of parameter pnt on the grid.

        :param pnt:
        :type pnt: gp_Pnt2d
        :rtype: gp_Pnt

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_Value(self, *args)


    def ComputeJointValues(self, *args):
        """
        * Computes Joint values according to parameter

        :param param: default value is ShapeExtend_Natural
        :type param: ShapeExtend_Parametrisation
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_ComputeJointValues(self, *args)


    def CheckConnectivity(self, *args):
        """
        * Checks geometrical connectivity of the patches, including closedness (sets fields muUClosed and myVClosed)

        :param prec:
        :type prec: float
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_CompositeSurface_CheckConnectivity(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_CompositeSurface self)"""
        return _ShapeExtend.ShapeExtend_CompositeSurface__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_CompositeSurface self) -> Handle_ShapeExtend_CompositeSurface"""
        return _ShapeExtend.ShapeExtend_CompositeSurface_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_CompositeSurface.Init = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_Init, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.NbUPatches = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_NbUPatches, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.NbVPatches = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_NbVPatches, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.Patches = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_Patches, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.UJointValues = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_UJointValues, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.VJointValues = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_VJointValues, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.UJointValue = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_UJointValue, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.VJointValue = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_VJointValue, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.SetUJointValues = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_SetUJointValues, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.SetVJointValues = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_SetVJointValues, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.SetUFirstValue = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_SetUFirstValue, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.SetVFirstValue = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_SetVFirstValue, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.LocateUParameter = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_LocateUParameter, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.LocateVParameter = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_LocateVParameter, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.LocateUVPoint = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_LocateUVPoint, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.Patch = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_Patch, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.ULocalToGlobal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_ULocalToGlobal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.VLocalToGlobal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_VLocalToGlobal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.LocalToGlobal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_LocalToGlobal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.UGlobalToLocal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_UGlobalToLocal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.VGlobalToLocal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_VGlobalToLocal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.GlobalToLocal = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_GlobalToLocal, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.GlobalToLocalTransformation = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_GlobalToLocalTransformation, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.Value = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_Value, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.ComputeJointValues = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_ComputeJointValues, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.CheckConnectivity = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_CheckConnectivity, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface__kill_pointed, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_CompositeSurface_GetHandle, None, ShapeExtend_CompositeSurface)
ShapeExtend_CompositeSurface_swigregister = _ShapeExtend.ShapeExtend_CompositeSurface_swigregister
ShapeExtend_CompositeSurface_swigregister(ShapeExtend_CompositeSurface)

class Handle_ShapeExtend_CompositeSurface(OCC.Geom.Handle_Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_CompositeSurface_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_CompositeSurface(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_CompositeSurface_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_CompositeSurface.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_CompositeSurface_Nullify, None, Handle_ShapeExtend_CompositeSurface)
Handle_ShapeExtend_CompositeSurface.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_CompositeSurface_IsNull, None, Handle_ShapeExtend_CompositeSurface)
Handle_ShapeExtend_CompositeSurface.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_CompositeSurface_GetObject, None, Handle_ShapeExtend_CompositeSurface)
Handle_ShapeExtend_CompositeSurface._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_CompositeSurface__kill_pointed, None, Handle_ShapeExtend_CompositeSurface)
Handle_ShapeExtend_CompositeSurface_swigregister = _ShapeExtend.Handle_ShapeExtend_CompositeSurface_swigregister
Handle_ShapeExtend_CompositeSurface_swigregister(Handle_ShapeExtend_CompositeSurface)

def Handle_ShapeExtend_CompositeSurface_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_CompositeSurface_DownCast(AnObject)
Handle_ShapeExtend_CompositeSurface_DownCast = _ShapeExtend.Handle_ShapeExtend_CompositeSurface_DownCast

class ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: ShapeExtend_DataMapOfShapeListOfMsg &
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: ShapeExtend_DataMapOfShapeListOfMsg &
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg.Initialize = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Initialize, None, ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg.Key = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Key, None, ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg.Value = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_Value, None, ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg__kill_pointed, None, ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_swigregister
ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg_swigregister(ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg)

class ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: ShapeExtend_DataMapOfTransientListOfMsg &
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: ShapeExtend_DataMapOfTransientListOfMsg &
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg.Initialize = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Initialize, None, ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg.Key = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Key, None, ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg.Value = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_Value, None, ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg__kill_pointed, None, ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_swigregister
ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg_swigregister(ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg)

class ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Message_ListOfMsg &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg self)"""
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg self) -> Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg"""
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.Key = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_Key, None, ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.Value = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_Value, None, ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg__kill_pointed, None, ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_GetHandle, None, ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister
ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister(ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)

class Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_Nullify, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_IsNull, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_GetObject, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg__kill_pointed, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister = _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_swigregister(Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg)

def Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_DownCast(AnObject)
Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_DownCast = _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg_DownCast

class ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Message_ListOfMsg &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg(*args))

    def Key(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg self)"""
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg self) -> Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg"""
        return _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.Key = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_Key, None, ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.Value = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_Value, None, ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg__kill_pointed, None, ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_GetHandle, None, ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister
ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister(ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)

class Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_Nullify, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_IsNull, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_GetObject, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg__kill_pointed, None, Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister = _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_swigregister(Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg)

def Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_DownCast(AnObject)
Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_DownCast = _ShapeExtend.Handle_ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg_DownCast

class ShapeExtend_DataMapOfShapeListOfMsg(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapOfShapeListOfMsg(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ShapeExtend_DataMapOfShapeListOfMsg &
        :rtype: ShapeExtend_DataMapOfShapeListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ShapeExtend_DataMapOfShapeListOfMsg &
        :rtype: ShapeExtend_DataMapOfShapeListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Message_ListOfMsg &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_DataMapOfShapeListOfMsg self)"""
        return _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapOfShapeListOfMsg.Assign = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Assign, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.Set = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Set, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.ReSize = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ReSize, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.Clear = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Clear, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.Bind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Bind, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.IsBound = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_IsBound, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.UnBind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_UnBind, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.Find = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Find, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.ChangeFind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ChangeFind, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.Find1 = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_Find1, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg.ChangeFind1 = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_ChangeFind1, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg__kill_pointed, None, ShapeExtend_DataMapOfShapeListOfMsg)
ShapeExtend_DataMapOfShapeListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapOfShapeListOfMsg_swigregister
ShapeExtend_DataMapOfShapeListOfMsg_swigregister(ShapeExtend_DataMapOfShapeListOfMsg)

class ShapeExtend_DataMapOfTransientListOfMsg(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_swiginit(self, _ShapeExtend.new_ShapeExtend_DataMapOfTransientListOfMsg(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: ShapeExtend_DataMapOfTransientListOfMsg &
        :rtype: ShapeExtend_DataMapOfTransientListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: ShapeExtend_DataMapOfTransientListOfMsg &
        :rtype: ShapeExtend_DataMapOfTransientListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Message_ListOfMsg &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Message_ListOfMsg

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_DataMapOfTransientListOfMsg self)"""
        return _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_DataMapOfTransientListOfMsg.Assign = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Assign, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.Set = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Set, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.ReSize = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ReSize, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.Clear = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Clear, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.Bind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Bind, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.IsBound = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_IsBound, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.UnBind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_UnBind, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.Find = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Find, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.ChangeFind = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ChangeFind, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.Find1 = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_Find1, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg.ChangeFind1 = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_ChangeFind1, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg__kill_pointed, None, ShapeExtend_DataMapOfTransientListOfMsg)
ShapeExtend_DataMapOfTransientListOfMsg_swigregister = _ShapeExtend.ShapeExtend_DataMapOfTransientListOfMsg_swigregister
ShapeExtend_DataMapOfTransientListOfMsg_swigregister(ShapeExtend_DataMapOfTransientListOfMsg)

class ShapeExtend_Explorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object Explorer

        :rtype: None

        """
        _ShapeExtend.ShapeExtend_Explorer_swiginit(self, _ShapeExtend.new_ShapeExtend_Explorer(*args))

    def CompoundFromSeq(self, *args):
        """
        * Converts a sequence of Shapes to a Compound

        :param seqval:
        :type seqval: Handle_TopTools_HSequenceOfShape &
        :rtype: TopoDS_Shape

        """
        return _ShapeExtend.ShapeExtend_Explorer_CompoundFromSeq(self, *args)


    def SeqFromCompound(self, *args):
        """
        * Converts a Compound to a list of Shapes if <comp> is not a compound, the list contains only <comp> if <comp> is Null, the list is empty if <comp> is a Compound, its sub-shapes are put into the list then if <expcomp> is True, if a sub-shape is a Compound, it is not put to the list but its sub-shapes are (recursive)

        :param comp:
        :type comp: TopoDS_Shape &
        :param expcomp:
        :type expcomp: bool
        :rtype: Handle_TopTools_HSequenceOfShape

        """
        return _ShapeExtend.ShapeExtend_Explorer_SeqFromCompound(self, *args)


    def ListFromSeq(self, *args):
        """
        * Converts a Sequence of Shapes to a List of Shapes <clear> if True (D), commands the list to start from scratch else, the list is cumulated

        :param seqval:
        :type seqval: Handle_TopTools_HSequenceOfShape &
        :param lisval:
        :type lisval: TopTools_ListOfShape &
        :param clear: default value is Standard_True
        :type clear: bool
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_Explorer_ListFromSeq(self, *args)


    def SeqFromList(self, *args):
        """
        * Converts a List of Shapes to a Sequence of Shapes

        :param lisval:
        :type lisval: TopTools_ListOfShape &
        :rtype: Handle_TopTools_HSequenceOfShape

        """
        return _ShapeExtend.ShapeExtend_Explorer_SeqFromList(self, *args)


    def ShapeType(self, *args):
        """
        * Returns the type of a Shape: true type if <compound> is False If <compound> is True and <shape> is a Compound, iterates on its items. If all are of the same type, returns this type. Else, returns COMPOUND. If it is empty, returns SHAPE For a Null Shape, returns SHAPE

        :param shape:
        :type shape: TopoDS_Shape &
        :param compound:
        :type compound: bool
        :rtype: TopAbs_ShapeEnum

        """
        return _ShapeExtend.ShapeExtend_Explorer_ShapeType(self, *args)


    def SortedCompound(self, *args):
        """
        * Builds a COMPOUND from the given shape. It explores the shape level by level, according to the <explore> argument. If <explore> is False, only COMPOUND items are explored, else all items are. The following shapes are added to resulting compound: - shapes which comply to <type> - if <type> is WIRE, considers also free edges (and makes wires) - if <type> is SHELL, considers also free faces (and makes shells) If <compound> is True, gathers items in compounds which correspond to starting COMPOUND,SOLID or SHELL containers, or items directly contained in a Compound

        :param shape:
        :type shape: TopoDS_Shape &
        :param type:
        :type type: TopAbs_ShapeEnum
        :param explore:
        :type explore: bool
        :param compound:
        :type compound: bool
        :rtype: TopoDS_Shape

        """
        return _ShapeExtend.ShapeExtend_Explorer_SortedCompound(self, *args)


    def DispatchList(self, *args):
        """
        * Dispatches starting list of shapes according to their type, to the appropriate resulting lists For each of these lists, if it is null, it is firstly created else, new items are appended to the already existing ones

        :param list:
        :type list: Handle_TopTools_HSequenceOfShape &
        :param vertices:
        :type vertices: Handle_TopTools_HSequenceOfShape &
        :param edges:
        :type edges: Handle_TopTools_HSequenceOfShape &
        :param wires:
        :type wires: Handle_TopTools_HSequenceOfShape &
        :param faces:
        :type faces: Handle_TopTools_HSequenceOfShape &
        :param shells:
        :type shells: Handle_TopTools_HSequenceOfShape &
        :param solids:
        :type solids: Handle_TopTools_HSequenceOfShape &
        :param compsols:
        :type compsols: Handle_TopTools_HSequenceOfShape &
        :param compounds:
        :type compounds: Handle_TopTools_HSequenceOfShape &
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_Explorer_DispatchList(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_Explorer.CompoundFromSeq = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_CompoundFromSeq, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.SeqFromCompound = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_SeqFromCompound, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.ListFromSeq = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_ListFromSeq, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.SeqFromList = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_SeqFromList, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.ShapeType = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_ShapeType, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.SortedCompound = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_SortedCompound, None, ShapeExtend_Explorer)
ShapeExtend_Explorer.DispatchList = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer_DispatchList, None, ShapeExtend_Explorer)
ShapeExtend_Explorer._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_Explorer__kill_pointed, None, ShapeExtend_Explorer)
ShapeExtend_Explorer_swigregister = _ShapeExtend.ShapeExtend_Explorer_swigregister
ShapeExtend_Explorer_swigregister(ShapeExtend_Explorer)

class ShapeExtend_WireData(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor, creates empty wire with no edges

        :rtype: None

        * Constructor initializing the data from TopoDS_Wire. Calls Init(wire,chained).

        :param wire:
        :type wire: TopoDS_Wire &
        :param chained: default value is Standard_True
        :type chained: bool
        :param theManifoldMode: default value is Standard_True
        :type theManifoldMode: bool
        :rtype: None

        """
        _ShapeExtend.ShapeExtend_WireData_swiginit(self, _ShapeExtend.new_ShapeExtend_WireData(*args))

    def Init(self, *args):
        """
        * Copies data from another WireData

        :param other:
        :type other: Handle_ShapeExtend_WireData &
        :rtype: None

        * Loads an already existing wire If <chained> is True (default), edges are added in the sequence as they are explored by TopoDS_Iterator Else, if <chained> is False, wire is explored by BRepTools_WireExplorer and it is guaranteed that edges will be sequencially connected. Remark : In the latter case it can happen that not all edges will be found (because of limitations of BRepTools_WireExplorer for disconnected wires and wires with seam edges).

        :param wire:
        :type wire: TopoDS_Wire &
        :param chained: default value is Standard_True
        :type chained: bool
        :param theManifoldMode: default value is Standard_True
        :type theManifoldMode: bool
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_WireData_Init(self, *args)


    def Clear(self, *args):
        """
        * Clears data about Wire.

        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_Clear(self, *args)


    def ComputeSeams(self, *args):
        """
        * Computes the list of seam edges By default (direct call), computing is enforced For indirect call (from IsSeam) it is redone only if not yet already done or if the list of edges has changed Remark : A Seam Edge is an Edge present twice in the list, once as FORWARD and once as REVERSED Each sense has its own PCurve, the one for FORWARD must be set in first

        :param enforce: default value is Standard_True
        :type enforce: bool
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_ComputeSeams(self, *args)


    def SetLast(self, *args):
        """
        * Does a circular permutation in order to set <num>th edge last

        :param num:
        :type num: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_SetLast(self, *args)


    def SetDegeneratedLast(self, *args):
        """
        * When the wire contains at least one degenerated edge, sets it as last one Note : It is useful to process pcurves, for instance, while the pcurve of a DGNR may not be computed from its 3D part (there is none) it is computed after the other edges have been computed and chained.

        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_SetDegeneratedLast(self, *args)


    def Add(self, *args):
        """
        * Adds an edge to a wire, being defined (not yet ended) This is the plain, basic, function to add an edge <num> = 0 (D): Appends at end <num> = 1: Preprends at start else, Insert before <num> Remark : Null Edge is simply ignored

        :param edge:
        :type edge: TopoDS_Edge &
        :param atnum: default value is 0
        :type atnum: int
        :rtype: None

        * Adds an entire wire, considered as a list of edges Remark : The wire is assumed to be ordered (TopoDS_Iterator is used)

        :param wire:
        :type wire: TopoDS_Wire &
        :param atnum: default value is 0
        :type atnum: int
        :rtype: None

        * Adds a wire in the form of WireData

        :param wire:
        :type wire: Handle_ShapeExtend_WireData &
        :param atnum: default value is 0
        :type atnum: int
        :rtype: None

        * Adds an edge or a wire invoking corresponding method Add

        :param shape:
        :type shape: TopoDS_Shape &
        :param atnum: default value is 0
        :type atnum: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_Add(self, *args)


    def AddOriented(self, *args):
        """
        * Adds an edge to start or end of <self>, according to <mode> 0: at end, as direct 1: at end, as reversed 2: at start, as direct 3: at start, as reversed < 0: no adding

        :param edge:
        :type edge: TopoDS_Edge &
        :param mode:
        :type mode: int
        :rtype: None

        * Adds a wire to start or end of <self>, according to <mode> 0: at end, as direct 1: at end, as reversed 2: at start, as direct 3: at start, as reversed < 0: no adding

        :param wire:
        :type wire: TopoDS_Wire &
        :param mode:
        :type mode: int
        :rtype: None

        * Adds an edge or a wire invoking corresponding method AddOriented

        :param shape:
        :type shape: TopoDS_Shape &
        :param mode:
        :type mode: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_AddOriented(self, *args)


    def Remove(self, *args):
        """
        * Removes an Edge, given its rank. By default removes the last edge.

        :param num: default value is 0
        :type num: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_Remove(self, *args)


    def Set(self, *args):
        """
        * Replaces an edge at the given rank number <num> with new one. Default is last edge (<num> = 0).

        :param edge:
        :type edge: TopoDS_Edge &
        :param num: default value is 0
        :type num: int
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_Set(self, *args)


    def Reverse(self, *args):
        """
        * Reverses the sense of the list and the orientation of each Edge This method should be called when either wire has no seam edges or face is not available

        :rtype: None

        * Reverses the sense of the list and the orientation of each Edge The face is necessary for swapping pcurves for seam edges (first pcurve corresponds to orientation FORWARD, and second to REVERSED; when edge is reversed, pcurves must be swapped) If face is NULL, no swapping is performed

        :param face:
        :type face: TopoDS_Face &
        :rtype: None

        """
        return _ShapeExtend.ShapeExtend_WireData_Reverse(self, *args)


    def NbEdges(self, *args):
        """
        * Returns the count of currently recorded edges

        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_WireData_NbEdges(self, *args)


    def NbNonManifoldEdges(self, *args):
        """
        * Returns the count of currently recorded non-manifold edges

        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_WireData_NbNonManifoldEdges(self, *args)


    def NonmanifoldEdge(self, *args):
        """
        * Returns <num>th nonmanifold Edge

        :param num:
        :type num: int
        :rtype: TopoDS_Edge

        """
        return _ShapeExtend.ShapeExtend_WireData_NonmanifoldEdge(self, *args)


    def NonmanifoldEdges(self, *args):
        """
        * Returns sequence of non-manifold edges This sequence can be not empty if wire data set in manifold mode but initial wire has INTERNAL orientation or contains INTERNAL edges

        :rtype: Handle_TopTools_HSequenceOfShape

        """
        return _ShapeExtend.ShapeExtend_WireData_NonmanifoldEdges(self, *args)


    def GetManifoldMode(self):
        """GetManifoldMode(ShapeExtend_WireData self) -> Standard_Boolean"""
        return _ShapeExtend.ShapeExtend_WireData_GetManifoldMode(self)


    def SetManifoldMode(self, value):
        """SetManifoldMode(ShapeExtend_WireData self, Standard_Boolean value)"""
        return _ShapeExtend.ShapeExtend_WireData_SetManifoldMode(self, value)


    def Edge(self, *args):
        """
        * Returns <num>th Edge

        :param num:
        :type num: int
        :rtype: TopoDS_Edge

        """
        return _ShapeExtend.ShapeExtend_WireData_Edge(self, *args)


    def Index(self, *args):
        """
        * Returns the index of the edge If the edge is a seam the orientation is also checked Returns 0 if the edge is not found in the list

        :param edge:
        :type edge: TopoDS_Edge &
        :rtype: int

        """
        return _ShapeExtend.ShapeExtend_WireData_Index(self, *args)


    def IsSeam(self, *args):
        """
        * Tells if an Edge is seam (see ComputeSeams) An edge is considered as seam if it presents twice in the edge list, once as FORWARD and once as REVERSED.

        :param num:
        :type num: int
        :rtype: bool

        """
        return _ShapeExtend.ShapeExtend_WireData_IsSeam(self, *args)


    def Wire(self, *args):
        """
        * Makes TopoDS_Wire using BRep_Builder (just creates the TopoDS_Wire object and adds all edges into it). This method should be called when the wire is correct (for example, after successful fixes by ShapeFix_Wire) and adjacent edges share common vertices. In case if adjacent edges do not share the same vertices the resulting TopoDS_Wire will be invalid.

        :rtype: TopoDS_Wire

        """
        return _ShapeExtend.ShapeExtend_WireData_Wire(self, *args)


    def WireAPIMake(self, *args):
        """
        * Makes TopoDS_Wire using BRepAPI_MakeWire. Class BRepAPI_MakeWire merges geometrically coincided vertices and can disturb correct order of edges in the wire. If this class fails, null shape is returned.

        :rtype: TopoDS_Wire

        """
        return _ShapeExtend.ShapeExtend_WireData_WireAPIMake(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_WireData self)"""
        return _ShapeExtend.ShapeExtend_WireData__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_WireData self) -> Handle_ShapeExtend_WireData"""
        return _ShapeExtend.ShapeExtend_WireData_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_WireData.Init = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Init, None, ShapeExtend_WireData)
ShapeExtend_WireData.Clear = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Clear, None, ShapeExtend_WireData)
ShapeExtend_WireData.ComputeSeams = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_ComputeSeams, None, ShapeExtend_WireData)
ShapeExtend_WireData.SetLast = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_SetLast, None, ShapeExtend_WireData)
ShapeExtend_WireData.SetDegeneratedLast = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_SetDegeneratedLast, None, ShapeExtend_WireData)
ShapeExtend_WireData.Add = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Add, None, ShapeExtend_WireData)
ShapeExtend_WireData.AddOriented = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_AddOriented, None, ShapeExtend_WireData)
ShapeExtend_WireData.Remove = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Remove, None, ShapeExtend_WireData)
ShapeExtend_WireData.Set = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Set, None, ShapeExtend_WireData)
ShapeExtend_WireData.Reverse = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Reverse, None, ShapeExtend_WireData)
ShapeExtend_WireData.NbEdges = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_NbEdges, None, ShapeExtend_WireData)
ShapeExtend_WireData.NbNonManifoldEdges = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_NbNonManifoldEdges, None, ShapeExtend_WireData)
ShapeExtend_WireData.NonmanifoldEdge = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_NonmanifoldEdge, None, ShapeExtend_WireData)
ShapeExtend_WireData.NonmanifoldEdges = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_NonmanifoldEdges, None, ShapeExtend_WireData)
ShapeExtend_WireData.GetManifoldMode = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_GetManifoldMode, None, ShapeExtend_WireData)
ShapeExtend_WireData.SetManifoldMode = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_SetManifoldMode, None, ShapeExtend_WireData)
ShapeExtend_WireData.Edge = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Edge, None, ShapeExtend_WireData)
ShapeExtend_WireData.Index = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Index, None, ShapeExtend_WireData)
ShapeExtend_WireData.IsSeam = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_IsSeam, None, ShapeExtend_WireData)
ShapeExtend_WireData.Wire = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_Wire, None, ShapeExtend_WireData)
ShapeExtend_WireData.WireAPIMake = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_WireAPIMake, None, ShapeExtend_WireData)
ShapeExtend_WireData._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_WireData__kill_pointed, None, ShapeExtend_WireData)
ShapeExtend_WireData.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_WireData_GetHandle, None, ShapeExtend_WireData)
ShapeExtend_WireData_swigregister = _ShapeExtend.ShapeExtend_WireData_swigregister
ShapeExtend_WireData_swigregister(ShapeExtend_WireData)

class Handle_ShapeExtend_WireData(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_WireData_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_WireData(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_WireData_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_WireData.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_WireData_Nullify, None, Handle_ShapeExtend_WireData)
Handle_ShapeExtend_WireData.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_WireData_IsNull, None, Handle_ShapeExtend_WireData)
Handle_ShapeExtend_WireData.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_WireData_GetObject, None, Handle_ShapeExtend_WireData)
Handle_ShapeExtend_WireData._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_WireData__kill_pointed, None, Handle_ShapeExtend_WireData)
Handle_ShapeExtend_WireData_swigregister = _ShapeExtend.Handle_ShapeExtend_WireData_swigregister
Handle_ShapeExtend_WireData_swigregister(Handle_ShapeExtend_WireData)

def Handle_ShapeExtend_WireData_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_WireData_DownCast(AnObject)
Handle_ShapeExtend_WireData_DownCast = _ShapeExtend.Handle_ShapeExtend_WireData_DownCast

class ShapeExtend_MsgRegistrator(ShapeExtend_BasicMsgRegistrator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object.

        :rtype: None

        """
        _ShapeExtend.ShapeExtend_MsgRegistrator_swiginit(self, _ShapeExtend.new_ShapeExtend_MsgRegistrator(*args))

    def Send(self, *args):
        """
        * Sends a message to be attached to the object. If the object is in the map then the message is added to the list, otherwise the object is firstly added to the map.

        :param object:
        :type object: Handle_Standard_Transient &
        :param message:
        :type message: Message_Msg &
        :param gravity:
        :type gravity: Message_Gravity
        :rtype: void

        * Sends a message to be attached to the shape. If the shape is in the map then the message is added to the list, otherwise the shape is firstly added to the map.

        :param shape:
        :type shape: TopoDS_Shape &
        :param message:
        :type message: Message_Msg &
        :param gravity:
        :type gravity: Message_Gravity
        :rtype: void

        """
        return _ShapeExtend.ShapeExtend_MsgRegistrator_Send(self, *args)


    def MapTransient(self, *args):
        """
        * Returns a Map of objects and message list

        :rtype: ShapeExtend_DataMapOfTransientListOfMsg

        """
        return _ShapeExtend.ShapeExtend_MsgRegistrator_MapTransient(self, *args)


    def MapShape(self, *args):
        """
        * Returns a Map of shapes and message list

        :rtype: ShapeExtend_DataMapOfShapeListOfMsg

        """
        return _ShapeExtend.ShapeExtend_MsgRegistrator_MapShape(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeExtend_MsgRegistrator self)"""
        return _ShapeExtend.ShapeExtend_MsgRegistrator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeExtend_MsgRegistrator self) -> Handle_ShapeExtend_MsgRegistrator"""
        return _ShapeExtend.ShapeExtend_MsgRegistrator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeExtend_MsgRegistrator.Send = new_instancemethod(_ShapeExtend.ShapeExtend_MsgRegistrator_Send, None, ShapeExtend_MsgRegistrator)
ShapeExtend_MsgRegistrator.MapTransient = new_instancemethod(_ShapeExtend.ShapeExtend_MsgRegistrator_MapTransient, None, ShapeExtend_MsgRegistrator)
ShapeExtend_MsgRegistrator.MapShape = new_instancemethod(_ShapeExtend.ShapeExtend_MsgRegistrator_MapShape, None, ShapeExtend_MsgRegistrator)
ShapeExtend_MsgRegistrator._kill_pointed = new_instancemethod(_ShapeExtend.ShapeExtend_MsgRegistrator__kill_pointed, None, ShapeExtend_MsgRegistrator)
ShapeExtend_MsgRegistrator.GetHandle = new_instancemethod(_ShapeExtend.ShapeExtend_MsgRegistrator_GetHandle, None, ShapeExtend_MsgRegistrator)
ShapeExtend_MsgRegistrator_swigregister = _ShapeExtend.ShapeExtend_MsgRegistrator_swigregister
ShapeExtend_MsgRegistrator_swigregister(ShapeExtend_MsgRegistrator)

class Handle_ShapeExtend_MsgRegistrator(Handle_ShapeExtend_BasicMsgRegistrator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeExtend.Handle_ShapeExtend_MsgRegistrator_swiginit(self, _ShapeExtend.new_Handle_ShapeExtend_MsgRegistrator(*args))
    DownCast = staticmethod(_ShapeExtend.Handle_ShapeExtend_MsgRegistrator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeExtend_MsgRegistrator.Nullify = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_MsgRegistrator_Nullify, None, Handle_ShapeExtend_MsgRegistrator)
Handle_ShapeExtend_MsgRegistrator.IsNull = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_MsgRegistrator_IsNull, None, Handle_ShapeExtend_MsgRegistrator)
Handle_ShapeExtend_MsgRegistrator.GetObject = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_MsgRegistrator_GetObject, None, Handle_ShapeExtend_MsgRegistrator)
Handle_ShapeExtend_MsgRegistrator._kill_pointed = new_instancemethod(_ShapeExtend.Handle_ShapeExtend_MsgRegistrator__kill_pointed, None, Handle_ShapeExtend_MsgRegistrator)
Handle_ShapeExtend_MsgRegistrator_swigregister = _ShapeExtend.Handle_ShapeExtend_MsgRegistrator_swigregister
Handle_ShapeExtend_MsgRegistrator_swigregister(Handle_ShapeExtend_MsgRegistrator)

def Handle_ShapeExtend_MsgRegistrator_DownCast(AnObject):
    return _ShapeExtend.Handle_ShapeExtend_MsgRegistrator_DownCast(AnObject)
Handle_ShapeExtend_MsgRegistrator_DownCast = _ShapeExtend.Handle_ShapeExtend_MsgRegistrator_DownCast



