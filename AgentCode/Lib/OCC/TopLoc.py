# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _TopLoc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopLoc', [dirname(__file__)])
        except ImportError:
            import _TopLoc
            return _TopLoc
        if fp is not None:
            try:
                _mod = imp.load_module('_TopLoc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TopLoc = swig_import_helper()
    del swig_import_helper
else:
    import _TopLoc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopLoc.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_TopLoc.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopLoc.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopLoc.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopLoc.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopLoc.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopLoc.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopLoc.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopLoc.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopLoc.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopLoc.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopLoc.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopLoc.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopLoc.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopLoc.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopLoc.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopLoc.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _TopLoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
class TopLoc_Datum3D(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a default Datum3D.

        :rtype: None

        * Constructs a Datum3D form a Trsf from gp. An error is raised if the Trsf is not a rigid transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        _TopLoc.TopLoc_Datum3D_swiginit(self,_TopLoc.new_TopLoc_Datum3D(*args))
    def Transformation(self, *args):
        """
        * Returns a gp_Trsf which, when applied to this datum, produces the default datum.

        :rtype: gp_Trsf

        """
        return _TopLoc.TopLoc_Datum3D_Transformation(self, *args)

    def ShallowDumpToString(self):
        """ShallowDumpToString(TopLoc_Datum3D self) -> std::string"""
        return _TopLoc.TopLoc_Datum3D_ShallowDumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_Datum3D self)"""
        return _TopLoc.TopLoc_Datum3D__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopLoc_Datum3D self) -> Handle_TopLoc_Datum3D"""
        return _TopLoc.TopLoc_Datum3D_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_Datum3D.Transformation = new_instancemethod(_TopLoc.TopLoc_Datum3D_Transformation,None,TopLoc_Datum3D)
TopLoc_Datum3D.ShallowDumpToString = new_instancemethod(_TopLoc.TopLoc_Datum3D_ShallowDumpToString,None,TopLoc_Datum3D)
TopLoc_Datum3D._kill_pointed = new_instancemethod(_TopLoc.TopLoc_Datum3D__kill_pointed,None,TopLoc_Datum3D)
TopLoc_Datum3D.GetHandle = new_instancemethod(_TopLoc.TopLoc_Datum3D_GetHandle,None,TopLoc_Datum3D)
TopLoc_Datum3D_swigregister = _TopLoc.TopLoc_Datum3D_swigregister
TopLoc_Datum3D_swigregister(TopLoc_Datum3D)

class Handle_TopLoc_Datum3D(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopLoc.Handle_TopLoc_Datum3D_swiginit(self,_TopLoc.new_Handle_TopLoc_Datum3D(*args))
    DownCast = staticmethod(_TopLoc.Handle_TopLoc_Datum3D_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopLoc_Datum3D.Nullify = new_instancemethod(_TopLoc.Handle_TopLoc_Datum3D_Nullify,None,Handle_TopLoc_Datum3D)
Handle_TopLoc_Datum3D.IsNull = new_instancemethod(_TopLoc.Handle_TopLoc_Datum3D_IsNull,None,Handle_TopLoc_Datum3D)
Handle_TopLoc_Datum3D.GetObject = new_instancemethod(_TopLoc.Handle_TopLoc_Datum3D_GetObject,None,Handle_TopLoc_Datum3D)
Handle_TopLoc_Datum3D._kill_pointed = new_instancemethod(_TopLoc.Handle_TopLoc_Datum3D__kill_pointed,None,Handle_TopLoc_Datum3D)
Handle_TopLoc_Datum3D_swigregister = _TopLoc.Handle_TopLoc_Datum3D_swigregister
Handle_TopLoc_Datum3D_swigregister(Handle_TopLoc_Datum3D)

def Handle_TopLoc_Datum3D_DownCast(*args):
  return _TopLoc.Handle_TopLoc_Datum3D_DownCast(*args)
Handle_TopLoc_Datum3D_DownCast = _TopLoc.Handle_TopLoc_Datum3D_DownCast

class TopLoc_IndexedMapNodeOfIndexedMapOfLocation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: TopLoc_Location &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swiginit(self,_TopLoc.new_TopLoc_IndexedMapNodeOfIndexedMapOfLocation(*args))
    def Key1(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_Key1(self, *args)

    def GetKey2(self):
        """GetKey2(TopLoc_IndexedMapNodeOfIndexedMapOfLocation self) -> Standard_Integer"""
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_GetKey2(self)

    def SetKey2(self, *args):
        """SetKey2(TopLoc_IndexedMapNodeOfIndexedMapOfLocation self, Standard_Integer value)"""
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_SetKey2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_IndexedMapNodeOfIndexedMapOfLocation self)"""
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopLoc_IndexedMapNodeOfIndexedMapOfLocation self) -> Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation"""
        return _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_IndexedMapNodeOfIndexedMapOfLocation.Key1 = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_Key1,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation.GetKey2 = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_GetKey2,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation.SetKey2 = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_SetKey2,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation.Next2 = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_Next2,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation__kill_pointed,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation.GetHandle = new_instancemethod(_TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_GetHandle,None,TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister = _TopLoc.TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister
TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister(TopLoc_IndexedMapNodeOfIndexedMapOfLocation)

class Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swiginit(self,_TopLoc.new_Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation(*args))
    DownCast = staticmethod(_TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation.Nullify = new_instancemethod(_TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_Nullify,None,Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation.IsNull = new_instancemethod(_TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_IsNull,None,Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation.GetObject = new_instancemethod(_TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_GetObject,None,Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation__kill_pointed,None,Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation)
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister = _TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_swigregister(Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation)

def Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_DownCast(*args):
  return _TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_DownCast(*args)
Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_DownCast = _TopLoc.Handle_TopLoc_IndexedMapNodeOfIndexedMapOfLocation_DownCast

class TopLoc_IndexedMapOfLocation(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TopLoc.TopLoc_IndexedMapOfLocation_swiginit(self,_TopLoc.new_TopLoc_IndexedMapOfLocation(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TopLoc_IndexedMapOfLocation &
        :rtype: TopLoc_IndexedMapOfLocation

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TopLoc_IndexedMapOfLocation &
        :rtype: TopLoc_IndexedMapOfLocation

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Clear(self, *args)

    def Add(self, *args):
        """
        :param K:
        :type K: TopLoc_Location &
        :rtype: int

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Add(self, *args)

    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: TopLoc_Location &
        :rtype: None

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Substitute(self, *args)

    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_RemoveLast(self, *args)

    def Contains(self, *args):
        """
        :param K:
        :type K: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_Contains(self, *args)

    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_FindKey(self, *args)

    def FindIndex(self, *args):
        """
        :param K:
        :type K: TopLoc_Location &
        :rtype: int

        """
        return _TopLoc.TopLoc_IndexedMapOfLocation_FindIndex(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_IndexedMapOfLocation self)"""
        return _TopLoc.TopLoc_IndexedMapOfLocation__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_IndexedMapOfLocation.Assign = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Assign,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Set = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Set,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.ReSize = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_ReSize,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Clear = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Clear,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Add = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Add,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Substitute = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Substitute,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.RemoveLast = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_RemoveLast,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Contains = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Contains,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.FindKey = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_FindKey,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.FindIndex = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_FindIndex,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation__kill_pointed,None,TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation_swigregister = _TopLoc.TopLoc_IndexedMapOfLocation_swigregister
TopLoc_IndexedMapOfLocation_swigregister(TopLoc_IndexedMapOfLocation)

class TopLoc_ItemLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Sets the elementary Datum to <D> Sets the exponent to <P>

        :param D:
        :type D: Handle_TopLoc_Datum3D &
        :param P:
        :type P: int
        :param fromTrsf: default value is Standard_False
        :type fromTrsf: bool
        :rtype: None

        :param anOther:
        :type anOther: TopLoc_ItemLocation &
        :rtype: None

        """
        _TopLoc.TopLoc_ItemLocation_swiginit(self,_TopLoc.new_TopLoc_ItemLocation(*args))
    def Assign(self, *args):
        """
        :param anOther:
        :type anOther: TopLoc_ItemLocation &
        :rtype: TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_ItemLocation_Assign(self, *args)

    def Set(self, *args):
        """
        :param anOther:
        :type anOther: TopLoc_ItemLocation &
        :rtype: TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_ItemLocation_Set(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_ItemLocation_Destroy(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_ItemLocation.Assign = new_instancemethod(_TopLoc.TopLoc_ItemLocation_Assign,None,TopLoc_ItemLocation)
TopLoc_ItemLocation.Set = new_instancemethod(_TopLoc.TopLoc_ItemLocation_Set,None,TopLoc_ItemLocation)
TopLoc_ItemLocation.Destroy = new_instancemethod(_TopLoc.TopLoc_ItemLocation_Destroy,None,TopLoc_ItemLocation)
TopLoc_ItemLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_ItemLocation__kill_pointed,None,TopLoc_ItemLocation)
TopLoc_ItemLocation_swigregister = _TopLoc.TopLoc_ItemLocation_swigregister
TopLoc_ItemLocation_swigregister(TopLoc_ItemLocation)

class TopLoc_Location(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an empty local coordinate system object. Note: A Location constructed from a default datum is said to be 'empty'.

        :rtype: None

        * Constructs the local coordinate system object defined by the transformation T. T invokes in turn, a TopLoc_Datum3D object.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        * Constructs the local coordinate system object defined by the 3D datum D. Exceptions Standard_ConstructionError if the transformation T does not represent a 3D coordinate system.

        :param D:
        :type D: Handle_TopLoc_Datum3D &
        :rtype: None

        """
        _TopLoc.TopLoc_Location_swiginit(self,_TopLoc.new_TopLoc_Location(*args))
    def IsIdentity(self, *args):
        """
        * Returns true if this location is equal to the Identity transformation.

        :rtype: bool

        """
        return _TopLoc.TopLoc_Location_IsIdentity(self, *args)

    def Identity(self, *args):
        """
        * Resets this location to the Identity transformation.

        :rtype: None

        """
        return _TopLoc.TopLoc_Location_Identity(self, *args)

    def FirstDatum(self, *args):
        """
        * Returns the first elementary datum of the Location. Use the NextLocation function recursively to access the other data comprising this location. Exceptions Standard_NoSuchObject if this location is empty.

        :rtype: Handle_TopLoc_Datum3D

        """
        return _TopLoc.TopLoc_Location_FirstDatum(self, *args)

    def FirstPower(self, *args):
        """
        * Returns the power elevation of the first elementary datum. Exceptions Standard_NoSuchObject if this location is empty.

        :rtype: int

        """
        return _TopLoc.TopLoc_Location_FirstPower(self, *args)

    def NextLocation(self, *args):
        """
        * Returns a Location representing <self> without the first datum. We have the relation : <self> = NextLocation() * FirstDatum() ^ FirstPower() Exceptions Standard_NoSuchObject if this location is empty.

        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_NextLocation(self, *args)

    def Transformation(self, *args):
        """
        * Returns the transformation associated to the coordinate system.

        :rtype: gp_Trsf

        """
        return _TopLoc.TopLoc_Location_Transformation(self, *args)

    def Inverted(self, *args):
        """
        * Returns the inverse of <self>.  <self> * Inverted() is an Identity.

        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Inverted(self, *args)

    def Multiplied(self, *args):
        """
        * Returns <self> * <Other>, the elementary datums are concatenated.

        :param Other:
        :type Other: TopLoc_Location &
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: TopLoc_Location &
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location___mul__(self, *args)

    def Divided(self, *args):
        """
        * Returns <self> / <Other>.

        :param Other:
        :type Other: TopLoc_Location &
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Other:
        :type Other: TopLoc_Location &
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location___div__(self, *args)

    def Predivided(self, *args):
        """
        * Returns <Other>.Inverted() * <self>.

        :param Other:
        :type Other: TopLoc_Location &
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Predivided(self, *args)

    def Powered(self, *args):
        """
        * Returns me at the power <pwr>. If <pwr> is zero returns Identity. <pwr> can be lower than zero (usual meaning for powers).

        :param pwr:
        :type pwr: int
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_Location_Powered(self, *args)

    def HashCode(self, *args):
        """
        * Returns a hashed value for this local coordinate system. This value is used, with map tables, to store and retrieve the object easily, and is in the range [ 1..Upper ].

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TopLoc.TopLoc_Location_HashCode(self, *args)

    def IsEqual(self, *args):
        """
        * Returns true if this location and the location Other have the same elementary data, i.e. contain the same series of TopLoc_Datum3D and respective powers. This method is an alias for operator ==.

        :param Other:
        :type Other: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_Location_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsDifferent(self, *args):
        """
        * Returns true if this location and the location Other do not have the same elementary data, i.e. do not contain the same series of TopLoc_Datum3D and respective powers. This method is an alias for operator !=.

        :param Other:
        :type Other: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_Location_IsDifferent(self, *args)

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def ShallowDumpToString(self):
        """ShallowDumpToString(TopLoc_Location self) -> std::string"""
        return _TopLoc.TopLoc_Location_ShallowDumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_Location self)"""
        return _TopLoc.TopLoc_Location__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_Location.IsIdentity = new_instancemethod(_TopLoc.TopLoc_Location_IsIdentity,None,TopLoc_Location)
TopLoc_Location.Identity = new_instancemethod(_TopLoc.TopLoc_Location_Identity,None,TopLoc_Location)
TopLoc_Location.FirstDatum = new_instancemethod(_TopLoc.TopLoc_Location_FirstDatum,None,TopLoc_Location)
TopLoc_Location.FirstPower = new_instancemethod(_TopLoc.TopLoc_Location_FirstPower,None,TopLoc_Location)
TopLoc_Location.NextLocation = new_instancemethod(_TopLoc.TopLoc_Location_NextLocation,None,TopLoc_Location)
TopLoc_Location.Transformation = new_instancemethod(_TopLoc.TopLoc_Location_Transformation,None,TopLoc_Location)
TopLoc_Location.Inverted = new_instancemethod(_TopLoc.TopLoc_Location_Inverted,None,TopLoc_Location)
TopLoc_Location.Multiplied = new_instancemethod(_TopLoc.TopLoc_Location_Multiplied,None,TopLoc_Location)
TopLoc_Location.__mul__ = new_instancemethod(_TopLoc.TopLoc_Location___mul__,None,TopLoc_Location)
TopLoc_Location.Divided = new_instancemethod(_TopLoc.TopLoc_Location_Divided,None,TopLoc_Location)
TopLoc_Location.__div__ = new_instancemethod(_TopLoc.TopLoc_Location___div__,None,TopLoc_Location)
TopLoc_Location.Predivided = new_instancemethod(_TopLoc.TopLoc_Location_Predivided,None,TopLoc_Location)
TopLoc_Location.Powered = new_instancemethod(_TopLoc.TopLoc_Location_Powered,None,TopLoc_Location)
TopLoc_Location.HashCode = new_instancemethod(_TopLoc.TopLoc_Location_HashCode,None,TopLoc_Location)
TopLoc_Location.__hash__ = new_instancemethod(_TopLoc.TopLoc_Location___hash__,None,TopLoc_Location)
TopLoc_Location.IsEqual = new_instancemethod(_TopLoc.TopLoc_Location_IsEqual,None,TopLoc_Location)
TopLoc_Location.__eq_wrapper__ = new_instancemethod(_TopLoc.TopLoc_Location___eq_wrapper__,None,TopLoc_Location)
TopLoc_Location.IsDifferent = new_instancemethod(_TopLoc.TopLoc_Location_IsDifferent,None,TopLoc_Location)
TopLoc_Location.__ne_wrapper__ = new_instancemethod(_TopLoc.TopLoc_Location___ne_wrapper__,None,TopLoc_Location)
TopLoc_Location.ShallowDumpToString = new_instancemethod(_TopLoc.TopLoc_Location_ShallowDumpToString,None,TopLoc_Location)
TopLoc_Location._kill_pointed = new_instancemethod(_TopLoc.TopLoc_Location__kill_pointed,None,TopLoc_Location)
TopLoc_Location_swigregister = _TopLoc.TopLoc_Location_swigregister
TopLoc_Location_swigregister(TopLoc_Location)

class TopLoc_MapIteratorOfMapOfLocation(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TopLoc_MapOfLocation &
        :rtype: None

        """
        _TopLoc.TopLoc_MapIteratorOfMapOfLocation_swiginit(self,_TopLoc.new_TopLoc_MapIteratorOfMapOfLocation(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TopLoc_MapOfLocation &
        :rtype: None

        """
        return _TopLoc.TopLoc_MapIteratorOfMapOfLocation_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_MapIteratorOfMapOfLocation_Key(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_MapIteratorOfMapOfLocation.Initialize = new_instancemethod(_TopLoc.TopLoc_MapIteratorOfMapOfLocation_Initialize,None,TopLoc_MapIteratorOfMapOfLocation)
TopLoc_MapIteratorOfMapOfLocation.Key = new_instancemethod(_TopLoc.TopLoc_MapIteratorOfMapOfLocation_Key,None,TopLoc_MapIteratorOfMapOfLocation)
TopLoc_MapIteratorOfMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_MapIteratorOfMapOfLocation__kill_pointed,None,TopLoc_MapIteratorOfMapOfLocation)
TopLoc_MapIteratorOfMapOfLocation_swigregister = _TopLoc.TopLoc_MapIteratorOfMapOfLocation_swigregister
TopLoc_MapIteratorOfMapOfLocation_swigregister(TopLoc_MapIteratorOfMapOfLocation)

class TopLoc_MapLocationHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def HashCode(*args):
        """
        :param K:
        :type K: TopLoc_Location &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TopLoc.TopLoc_MapLocationHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)
    def IsEqual(*args):
        """
        :param K1:
        :type K1: TopLoc_Location &
        :param K2:
        :type K2: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_MapLocationHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)
    def __init__(self): 
        _TopLoc.TopLoc_MapLocationHasher_swiginit(self,_TopLoc.new_TopLoc_MapLocationHasher())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_MapLocationHasher._kill_pointed = new_instancemethod(_TopLoc.TopLoc_MapLocationHasher__kill_pointed,None,TopLoc_MapLocationHasher)
TopLoc_MapLocationHasher_swigregister = _TopLoc.TopLoc_MapLocationHasher_swigregister
TopLoc_MapLocationHasher_swigregister(TopLoc_MapLocationHasher)

def TopLoc_MapLocationHasher_HashCode(*args):
  """
    :param K:
    :type K: TopLoc_Location &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
  return _TopLoc.TopLoc_MapLocationHasher_HashCode(*args)

def TopLoc_MapLocationHasher_IsEqual(*args):
  """
    :param K1:
    :type K1: TopLoc_Location &
    :param K2:
    :type K2: TopLoc_Location &
    :rtype: bool

    """
  return _TopLoc.TopLoc_MapLocationHasher_IsEqual(*args)

class TopLoc_MapOfLocation(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TopLoc.TopLoc_MapOfLocation_swiginit(self,_TopLoc.new_TopLoc_MapOfLocation(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TopLoc_MapOfLocation &
        :rtype: TopLoc_MapOfLocation

        """
        return _TopLoc.TopLoc_MapOfLocation_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TopLoc_MapOfLocation &
        :rtype: TopLoc_MapOfLocation

        """
        return _TopLoc.TopLoc_MapOfLocation_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TopLoc.TopLoc_MapOfLocation_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_MapOfLocation_Clear(self, *args)

    def Add(self, *args):
        """
        :param aKey:
        :type aKey: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_MapOfLocation_Add(self, *args)

    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_MapOfLocation_Contains(self, *args)

    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: TopLoc_Location &
        :rtype: bool

        """
        return _TopLoc.TopLoc_MapOfLocation_Remove(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_MapOfLocation self)"""
        return _TopLoc.TopLoc_MapOfLocation__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_MapOfLocation.Assign = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Assign,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Set = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Set,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.ReSize = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_ReSize,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Clear = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Clear,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Add = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Add,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Contains = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Contains,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Remove = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Remove,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_MapOfLocation__kill_pointed,None,TopLoc_MapOfLocation)
TopLoc_MapOfLocation_swigregister = _TopLoc.TopLoc_MapOfLocation_swigregister
TopLoc_MapOfLocation_swigregister(TopLoc_MapOfLocation)

class TopLoc_SListNodeOfSListOfItemLocation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: TopLoc_ItemLocation &
        :param aTail:
        :type aTail: TopLoc_SListOfItemLocation &
        :rtype: None

        """
        _TopLoc.TopLoc_SListNodeOfSListOfItemLocation_swiginit(self,_TopLoc.new_TopLoc_SListNodeOfSListOfItemLocation(*args))
    def Tail(self, *args):
        """
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListNodeOfSListOfItemLocation_Tail(self, *args)

    def Value(self, *args):
        """
        :rtype: TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_SListNodeOfSListOfItemLocation_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_SListNodeOfSListOfItemLocation self)"""
        return _TopLoc.TopLoc_SListNodeOfSListOfItemLocation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopLoc_SListNodeOfSListOfItemLocation self) -> Handle_TopLoc_SListNodeOfSListOfItemLocation"""
        return _TopLoc.TopLoc_SListNodeOfSListOfItemLocation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_SListNodeOfSListOfItemLocation.Tail = new_instancemethod(_TopLoc.TopLoc_SListNodeOfSListOfItemLocation_Tail,None,TopLoc_SListNodeOfSListOfItemLocation)
TopLoc_SListNodeOfSListOfItemLocation.Value = new_instancemethod(_TopLoc.TopLoc_SListNodeOfSListOfItemLocation_Value,None,TopLoc_SListNodeOfSListOfItemLocation)
TopLoc_SListNodeOfSListOfItemLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_SListNodeOfSListOfItemLocation__kill_pointed,None,TopLoc_SListNodeOfSListOfItemLocation)
TopLoc_SListNodeOfSListOfItemLocation.GetHandle = new_instancemethod(_TopLoc.TopLoc_SListNodeOfSListOfItemLocation_GetHandle,None,TopLoc_SListNodeOfSListOfItemLocation)
TopLoc_SListNodeOfSListOfItemLocation_swigregister = _TopLoc.TopLoc_SListNodeOfSListOfItemLocation_swigregister
TopLoc_SListNodeOfSListOfItemLocation_swigregister(TopLoc_SListNodeOfSListOfItemLocation)

class Handle_TopLoc_SListNodeOfSListOfItemLocation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_swiginit(self,_TopLoc.new_Handle_TopLoc_SListNodeOfSListOfItemLocation(*args))
    DownCast = staticmethod(_TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopLoc_SListNodeOfSListOfItemLocation.Nullify = new_instancemethod(_TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_Nullify,None,Handle_TopLoc_SListNodeOfSListOfItemLocation)
Handle_TopLoc_SListNodeOfSListOfItemLocation.IsNull = new_instancemethod(_TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_IsNull,None,Handle_TopLoc_SListNodeOfSListOfItemLocation)
Handle_TopLoc_SListNodeOfSListOfItemLocation.GetObject = new_instancemethod(_TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_GetObject,None,Handle_TopLoc_SListNodeOfSListOfItemLocation)
Handle_TopLoc_SListNodeOfSListOfItemLocation._kill_pointed = new_instancemethod(_TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation__kill_pointed,None,Handle_TopLoc_SListNodeOfSListOfItemLocation)
Handle_TopLoc_SListNodeOfSListOfItemLocation_swigregister = _TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_swigregister
Handle_TopLoc_SListNodeOfSListOfItemLocation_swigregister(Handle_TopLoc_SListNodeOfSListOfItemLocation)

def Handle_TopLoc_SListNodeOfSListOfItemLocation_DownCast(*args):
  return _TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_DownCast(*args)
Handle_TopLoc_SListNodeOfSListOfItemLocation_DownCast = _TopLoc.Handle_TopLoc_SListNodeOfSListOfItemLocation_DownCast

class TopLoc_SListOfItemLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param anItem:
        :type anItem: TopLoc_ItemLocation &
        :param aTail:
        :type aTail: TopLoc_SListOfItemLocation &
        :rtype: None

        :param Other:
        :type Other: TopLoc_SListOfItemLocation &
        :rtype: None

        """
        _TopLoc.TopLoc_SListOfItemLocation_swiginit(self,_TopLoc.new_TopLoc_SListOfItemLocation(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TopLoc_SListOfItemLocation &
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TopLoc_SListOfItemLocation &
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Set(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TopLoc.TopLoc_SListOfItemLocation_IsEmpty(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Clear(self, *args)

    def Value(self, *args):
        """
        :rtype: TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :rtype: TopLoc_ItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_ChangeValue(self, *args)

    def SetValue(self, *args):
        """
        :param anItem:
        :type anItem: TopLoc_ItemLocation &
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_SetValue(self, *args)

    def Tail(self, *args):
        """
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Tail(self, *args)

    def ChangeTail(self, *args):
        """
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_ChangeTail(self, *args)

    def SetTail(self, *args):
        """
        :param aList:
        :type aList: TopLoc_SListOfItemLocation &
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_SetTail(self, *args)

    def Construct(self, *args):
        """
        :param anItem:
        :type anItem: TopLoc_ItemLocation &
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Construct(self, *args)

    def Constructed(self, *args):
        """
        :param anItem:
        :type anItem: TopLoc_ItemLocation &
        :rtype: TopLoc_SListOfItemLocation

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Constructed(self, *args)

    def ToTail(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_ToTail(self, *args)

    def Initialize(self, *args):
        """
        :param aList:
        :type aList: TopLoc_SListOfItemLocation &
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TopLoc.TopLoc_SListOfItemLocation_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TopLoc.TopLoc_SListOfItemLocation_Next(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_SListOfItemLocation.Assign = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Assign,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Set = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Set,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.IsEmpty = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_IsEmpty,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Clear = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Clear,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Value = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Value,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.ChangeValue = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_ChangeValue,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.SetValue = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_SetValue,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Tail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Tail,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.ChangeTail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_ChangeTail,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.SetTail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_SetTail,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Construct = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Construct,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Constructed = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Constructed,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.ToTail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_ToTail,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Initialize = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Initialize,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.More = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_More,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Next = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Next,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation__kill_pointed,None,TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation_swigregister = _TopLoc.TopLoc_SListOfItemLocation_swigregister
TopLoc_SListOfItemLocation_swigregister(TopLoc_SListOfItemLocation)

class TopLoc_StdMapNodeOfMapOfLocation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TopLoc_Location &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TopLoc.TopLoc_StdMapNodeOfMapOfLocation_swiginit(self,_TopLoc.new_TopLoc_StdMapNodeOfMapOfLocation(*args))
    def Key(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _TopLoc.TopLoc_StdMapNodeOfMapOfLocation_Key(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopLoc_StdMapNodeOfMapOfLocation self)"""
        return _TopLoc.TopLoc_StdMapNodeOfMapOfLocation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopLoc_StdMapNodeOfMapOfLocation self) -> Handle_TopLoc_StdMapNodeOfMapOfLocation"""
        return _TopLoc.TopLoc_StdMapNodeOfMapOfLocation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopLoc_StdMapNodeOfMapOfLocation.Key = new_instancemethod(_TopLoc.TopLoc_StdMapNodeOfMapOfLocation_Key,None,TopLoc_StdMapNodeOfMapOfLocation)
TopLoc_StdMapNodeOfMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.TopLoc_StdMapNodeOfMapOfLocation__kill_pointed,None,TopLoc_StdMapNodeOfMapOfLocation)
TopLoc_StdMapNodeOfMapOfLocation.GetHandle = new_instancemethod(_TopLoc.TopLoc_StdMapNodeOfMapOfLocation_GetHandle,None,TopLoc_StdMapNodeOfMapOfLocation)
TopLoc_StdMapNodeOfMapOfLocation_swigregister = _TopLoc.TopLoc_StdMapNodeOfMapOfLocation_swigregister
TopLoc_StdMapNodeOfMapOfLocation_swigregister(TopLoc_StdMapNodeOfMapOfLocation)

class Handle_TopLoc_StdMapNodeOfMapOfLocation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_swiginit(self,_TopLoc.new_Handle_TopLoc_StdMapNodeOfMapOfLocation(*args))
    DownCast = staticmethod(_TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopLoc_StdMapNodeOfMapOfLocation.Nullify = new_instancemethod(_TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_Nullify,None,Handle_TopLoc_StdMapNodeOfMapOfLocation)
Handle_TopLoc_StdMapNodeOfMapOfLocation.IsNull = new_instancemethod(_TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_IsNull,None,Handle_TopLoc_StdMapNodeOfMapOfLocation)
Handle_TopLoc_StdMapNodeOfMapOfLocation.GetObject = new_instancemethod(_TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_GetObject,None,Handle_TopLoc_StdMapNodeOfMapOfLocation)
Handle_TopLoc_StdMapNodeOfMapOfLocation._kill_pointed = new_instancemethod(_TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation__kill_pointed,None,Handle_TopLoc_StdMapNodeOfMapOfLocation)
Handle_TopLoc_StdMapNodeOfMapOfLocation_swigregister = _TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_swigregister
Handle_TopLoc_StdMapNodeOfMapOfLocation_swigregister(Handle_TopLoc_StdMapNodeOfMapOfLocation)

def Handle_TopLoc_StdMapNodeOfMapOfLocation_DownCast(*args):
  return _TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_DownCast(*args)
Handle_TopLoc_StdMapNodeOfMapOfLocation_DownCast = _TopLoc.Handle_TopLoc_StdMapNodeOfMapOfLocation_DownCast



