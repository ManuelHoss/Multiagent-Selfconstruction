# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TFunction.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TFunction', [dirname(__file__)])
        except ImportError:
            import _TFunction
            return _TFunction
        if fp is not None:
            try:
                _mod = imp.load_module('_TFunction', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TFunction = swig_import_helper()
    del swig_import_helper
else:
    import _TFunction
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TFunction.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TFunction.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TFunction.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TFunction.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TFunction.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TFunction.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TFunction.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TFunction.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TFunction.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TFunction.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TFunction.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TFunction.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TFunction.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TFunction.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TFunction.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TFunction.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TFunction.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TFunction.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TDF
import OCC.TColStd

_TFunction.TFunction_ES_WrongDefinition_swigconstant(_TFunction)
TFunction_ES_WrongDefinition = _TFunction.TFunction_ES_WrongDefinition

_TFunction.TFunction_ES_NotExecuted_swigconstant(_TFunction)
TFunction_ES_NotExecuted = _TFunction.TFunction_ES_NotExecuted

_TFunction.TFunction_ES_Executing_swigconstant(_TFunction)
TFunction_ES_Executing = _TFunction.TFunction_ES_Executing

_TFunction.TFunction_ES_Succeeded_swigconstant(_TFunction)
TFunction_ES_Succeeded = _TFunction.TFunction_ES_Succeeded

_TFunction.TFunction_ES_Failed_swigconstant(_TFunction)
TFunction_ES_Failed = _TFunction.TFunction_ES_Failed
class TFunction_Array1OfDataMapOfGUIDDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TFunction_DataMapOfGUIDDriver &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_Array1OfDataMapOfGUIDDriver(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: TFunction_Array1OfDataMapOfGUIDDriver &
        :rtype: TFunction_Array1OfDataMapOfGUIDDriver

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TFunction_Array1OfDataMapOfGUIDDriver &
        :rtype: TFunction_Array1OfDataMapOfGUIDDriver

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Array1OfDataMapOfGUIDDriver.Init = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Init, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Destroy = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Destroy, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.IsAllocated = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_IsAllocated, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Assign = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Assign, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Set = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Set, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Length = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Length, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Lower = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Lower, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Upper = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Upper, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.SetValue = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_SetValue, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Value = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Value, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.ChangeValue = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_ChangeValue, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver__kill_pointed, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_swigregister
TFunction_Array1OfDataMapOfGUIDDriver_swigregister(TFunction_Array1OfDataMapOfGUIDDriver)

class TFunction_DataMapIteratorOfDataMapOfGUIDDriver(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        _TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_DataMapIteratorOfDataMapOfGUIDDriver(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TFunction_Driver

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapIteratorOfDataMapOfGUIDDriver.Initialize = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Initialize, None, TFunction_DataMapIteratorOfDataMapOfGUIDDriver)
TFunction_DataMapIteratorOfDataMapOfGUIDDriver.Key = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Key, None, TFunction_DataMapIteratorOfDataMapOfGUIDDriver)
TFunction_DataMapIteratorOfDataMapOfGUIDDriver.Value = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_Value, None, TFunction_DataMapIteratorOfDataMapOfGUIDDriver)
TFunction_DataMapIteratorOfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver__kill_pointed, None, TFunction_DataMapIteratorOfDataMapOfGUIDDriver)
TFunction_DataMapIteratorOfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_DataMapIteratorOfDataMapOfGUIDDriver_swigregister
TFunction_DataMapIteratorOfDataMapOfGUIDDriver_swigregister(TFunction_DataMapIteratorOfDataMapOfGUIDDriver)

class TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TFunction_DataMapOfLabelListOfLabel &
        :rtype: None

        """
        _TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_swiginit(self, _TFunction.new_TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TFunction_DataMapOfLabelListOfLabel &
        :rtype: None

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TDF_LabelList

        """
        return _TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel.Initialize = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Initialize, None, TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel)
TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel.Key = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Key, None, TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel)
TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel.Value = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_Value, None, TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel)
TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel__kill_pointed, None, TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel)
TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_swigregister = _TFunction.TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_swigregister
TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel_swigregister(TFunction_DataMapIteratorOfDataMapOfLabelListOfLabel)

class TFunction_DataMapNodeOfDataMapOfGUIDDriver(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :param I:
        :type I: Handle_TFunction_Driver &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_DataMapNodeOfDataMapOfGUIDDriver(*args))

    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_TFunction_Driver

        """
        return _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DataMapNodeOfDataMapOfGUIDDriver self)"""
        return _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_DataMapNodeOfDataMapOfGUIDDriver self) -> Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver"""
        return _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapNodeOfDataMapOfGUIDDriver.Key = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_Key, None, TFunction_DataMapNodeOfDataMapOfGUIDDriver)
TFunction_DataMapNodeOfDataMapOfGUIDDriver.Value = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_Value, None, TFunction_DataMapNodeOfDataMapOfGUIDDriver)
TFunction_DataMapNodeOfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver__kill_pointed, None, TFunction_DataMapNodeOfDataMapOfGUIDDriver)
TFunction_DataMapNodeOfDataMapOfGUIDDriver.GetHandle = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_GetHandle, None, TFunction_DataMapNodeOfDataMapOfGUIDDriver)
TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister
TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister(TFunction_DataMapNodeOfDataMapOfGUIDDriver)

class Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver.Nullify = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_Nullify, None, Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver.IsNull = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_IsNull, None, Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver.GetObject = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_GetObject, None, Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver__kill_pointed, None, Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver)
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister = _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_swigregister(Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver)

def Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_DownCast(AnObject):
    return _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_DownCast(AnObject)
Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_DownCast = _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfGUIDDriver_DownCast

class TFunction_DataMapNodeOfDataMapOfLabelListOfLabel(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_LabelList &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swiginit(self, _TFunction.new_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel(*args))

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TDF_LabelList

        """
        return _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DataMapNodeOfDataMapOfLabelListOfLabel self)"""
        return _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_DataMapNodeOfDataMapOfLabelListOfLabel self) -> Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel"""
        return _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.Key = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_Key, None, TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.Value = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_Value, None, TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
TFunction_DataMapNodeOfDataMapOfLabelListOfLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel__kill_pointed, None, TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.GetHandle = new_instancemethod(_TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_GetHandle, None, TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister = _TFunction.TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister
TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister(TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)

class Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swiginit(self, _TFunction.new_Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.Nullify = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_Nullify, None, Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.IsNull = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_IsNull, None, Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel.GetObject = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_GetObject, None, Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel__kill_pointed, None, Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister = _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_swigregister(Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel)

def Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_DownCast(AnObject):
    return _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_DownCast(AnObject)
Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_DownCast = _TFunction.Handle_TFunction_DataMapNodeOfDataMapOfLabelListOfLabel_DownCast

class TFunction_DataMapOfGUIDDriver(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TFunction.TFunction_DataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_DataMapOfGUIDDriver(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TFunction_DataMapOfGUIDDriver &
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TFunction_DataMapOfGUIDDriver &
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :param I:
        :type I: Handle_TFunction_Driver &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Handle_TFunction_Driver

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Handle_TFunction_Driver

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Standard_Address

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: Standard_Address

        """
        return _TFunction.TFunction_DataMapOfGUIDDriver_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DataMapOfGUIDDriver self)"""
        return _TFunction.TFunction_DataMapOfGUIDDriver__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapOfGUIDDriver.Assign = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Assign, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Set = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Set, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ReSize = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ReSize, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Clear = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Clear, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Bind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Bind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.IsBound = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_IsBound, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.UnBind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_UnBind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Find = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Find, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ChangeFind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ChangeFind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Find1 = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Find1, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ChangeFind1 = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ChangeFind1, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver__kill_pointed, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver_swigregister = _TFunction.TFunction_DataMapOfGUIDDriver_swigregister
TFunction_DataMapOfGUIDDriver_swigregister(TFunction_DataMapOfGUIDDriver)

class TFunction_DataMapOfLabelListOfLabel(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TFunction.TFunction_DataMapOfLabelListOfLabel_swiginit(self, _TFunction.new_TFunction_DataMapOfLabelListOfLabel(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TFunction_DataMapOfLabelListOfLabel &
        :rtype: TFunction_DataMapOfLabelListOfLabel

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TFunction_DataMapOfLabelListOfLabel &
        :rtype: TFunction_DataMapOfLabelListOfLabel

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_LabelList &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_LabelList

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_LabelList

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DataMapOfLabelListOfLabel self)"""
        return _TFunction.TFunction_DataMapOfLabelListOfLabel__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DataMapOfLabelListOfLabel.Assign = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Assign, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Set = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Set, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ReSize = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ReSize, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Clear = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Clear, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Bind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Bind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.IsBound = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_IsBound, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.UnBind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_UnBind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Find = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Find, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ChangeFind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeFind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Find1 = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Find1, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ChangeFind1 = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeFind1, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel__kill_pointed, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel_swigregister = _TFunction.TFunction_DataMapOfLabelListOfLabel_swigregister
TFunction_DataMapOfLabelListOfLabel_swigregister(TFunction_DataMapOfLabelListOfLabel)

class TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TFunction_DoubleMapOfIntegerLabel &
        :rtype: None

        """
        _TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_swiginit(self, _TFunction.new_TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TFunction_DoubleMapOfIntegerLabel &
        :rtype: None

        """
        return _TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Initialize(self, *args)


    def Key1(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Key1(self, *args)


    def Key2(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Key2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel.Initialize = new_instancemethod(_TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Initialize, None, TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel.Key1 = new_instancemethod(_TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Key1, None, TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel.Key2 = new_instancemethod(_TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_Key2, None, TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel__kill_pointed, None, TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_swigregister = _TFunction.TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_swigregister
TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel_swigregister(TFunction_DoubleMapIteratorOfDoubleMapOfIntegerLabel)

class TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: int &
        :param K2:
        :type K2: TDF_Label &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swiginit(self, _TFunction.new_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel(*args))

    def GetKey1(self):
        """GetKey1(TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel self) -> Standard_Integer"""
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_GetKey1(self)


    def SetKey1(self, value):
        """SetKey1(TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel self, Standard_Integer value)"""
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_SetKey1(self, value)


    def Key2(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_Key2(self, *args)


    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_Next2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel self)"""
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel self) -> Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel"""
        return _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.GetKey1 = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_GetKey1, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.SetKey1 = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_SetKey1, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.Key2 = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_Key2, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.Next2 = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_Next2, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel__kill_pointed, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.GetHandle = new_instancemethod(_TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_GetHandle, None, TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister = _TFunction.TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister
TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister(TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)

class Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swiginit(self, _TFunction.new_Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.Nullify = new_instancemethod(_TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_Nullify, None, Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.IsNull = new_instancemethod(_TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_IsNull, None, Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel.GetObject = new_instancemethod(_TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_GetObject, None, Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel__kill_pointed, None, Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister = _TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_swigregister(Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel)

def Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_DownCast(AnObject):
    return _TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_DownCast(AnObject)
Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_DownCast = _TFunction.Handle_TFunction_DoubleMapNodeOfDoubleMapOfIntegerLabel_DownCast

class TFunction_DoubleMapOfIntegerLabel(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TFunction.TFunction_DoubleMapOfIntegerLabel_swiginit(self, _TFunction.new_TFunction_DoubleMapOfIntegerLabel(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TFunction_DoubleMapOfIntegerLabel &
        :rtype: TFunction_DoubleMapOfIntegerLabel

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: TFunction_DoubleMapOfIntegerLabel &
        :rtype: TFunction_DoubleMapOfIntegerLabel

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K1:
        :type K1: int &
        :param K2:
        :type K2: TDF_Label &
        :rtype: None

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Bind(self, *args)


    def AreBound(self, *args):
        """
        :param K1:
        :type K1: int &
        :param K2:
        :type K2: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_AreBound(self, *args)


    def IsBound1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound1(self, *args)


    def IsBound2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound2(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Find1(self, *args)


    def Find2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: int

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_Find2(self, *args)


    def UnBind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind1(self, *args)


    def UnBind2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DoubleMapOfIntegerLabel self)"""
        return _TFunction.TFunction_DoubleMapOfIntegerLabel__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DoubleMapOfIntegerLabel.Assign = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Assign, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Set = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Set, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.ReSize = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_ReSize, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Clear = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Clear, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Bind = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Bind, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.AreBound = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_AreBound, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.IsBound1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.IsBound2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Find1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Find1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Find2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Find2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.UnBind1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.UnBind2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel._kill_pointed = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel__kill_pointed, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel_swigregister = _TFunction.TFunction_DoubleMapOfIntegerLabel_swigregister
TFunction_DoubleMapOfIntegerLabel_swigregister(TFunction_DoubleMapOfIntegerLabel)

class TFunction_Driver(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        * Initializes the label L for this function prior to its execution.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TFunction.TFunction_Driver_Init(self, *args)


    def Label(self, *args):
        """
        * Returns the label of the driver for this function.

        :rtype: TDF_Label

        """
        return _TFunction.TFunction_Driver_Label(self, *args)


    def Validate(self, *args):
        """
        * Validates labels of a function in <log>. This function is the one initialized in this function driver. Warning In regeneration mode, the solver must call this method even if the function is not executed. execution of function =====================

        :param log:
        :type log: TFunction_Logbook &
        :rtype: void

        """
        return _TFunction.TFunction_Driver_Validate(self, *args)


    def MustExecute(self, *args):
        """
        * Analyzes the labels in the logbook log. Returns true if attributes have been modified. If the function label itself has been modified, the function must be executed.

        :param log:
        :type log: TFunction_Logbook &
        :rtype: bool

        """
        return _TFunction.TFunction_Driver_MustExecute(self, *args)


    def Execute(self, *args):
        """
        * Executes the function in this function driver and puts the impacted labels in the logbook log. arguments & results of functions ================================

        :param log:
        :type log: TFunction_Logbook &
        :rtype: int

        """
        return _TFunction.TFunction_Driver_Execute(self, *args)


    def Arguments(self, *args):
        """
        * The method fills-in the list by labels, where the arguments of the function are located.

        :param args:
        :type args: TDF_LabelList &
        :rtype: void

        """
        return _TFunction.TFunction_Driver_Arguments(self, *args)


    def Results(self, *args):
        """
        * The method fills-in the list by labels, where the results of the function are located.

        :param res:
        :type res: TDF_LabelList &
        :rtype: void

        """
        return _TFunction.TFunction_Driver_Results(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_Driver self)"""
        return _TFunction.TFunction_Driver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_Driver self) -> Handle_TFunction_Driver"""
        return _TFunction.TFunction_Driver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Driver.Init = new_instancemethod(_TFunction.TFunction_Driver_Init, None, TFunction_Driver)
TFunction_Driver.Label = new_instancemethod(_TFunction.TFunction_Driver_Label, None, TFunction_Driver)
TFunction_Driver.Validate = new_instancemethod(_TFunction.TFunction_Driver_Validate, None, TFunction_Driver)
TFunction_Driver.MustExecute = new_instancemethod(_TFunction.TFunction_Driver_MustExecute, None, TFunction_Driver)
TFunction_Driver.Execute = new_instancemethod(_TFunction.TFunction_Driver_Execute, None, TFunction_Driver)
TFunction_Driver.Arguments = new_instancemethod(_TFunction.TFunction_Driver_Arguments, None, TFunction_Driver)
TFunction_Driver.Results = new_instancemethod(_TFunction.TFunction_Driver_Results, None, TFunction_Driver)
TFunction_Driver._kill_pointed = new_instancemethod(_TFunction.TFunction_Driver__kill_pointed, None, TFunction_Driver)
TFunction_Driver.GetHandle = new_instancemethod(_TFunction.TFunction_Driver_GetHandle, None, TFunction_Driver)
TFunction_Driver_swigregister = _TFunction.TFunction_Driver_swigregister
TFunction_Driver_swigregister(TFunction_Driver)

class Handle_TFunction_Driver(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_Driver_swiginit(self, _TFunction.new_Handle_TFunction_Driver(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_Driver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_Driver.Nullify = new_instancemethod(_TFunction.Handle_TFunction_Driver_Nullify, None, Handle_TFunction_Driver)
Handle_TFunction_Driver.IsNull = new_instancemethod(_TFunction.Handle_TFunction_Driver_IsNull, None, Handle_TFunction_Driver)
Handle_TFunction_Driver.GetObject = new_instancemethod(_TFunction.Handle_TFunction_Driver_GetObject, None, Handle_TFunction_Driver)
Handle_TFunction_Driver._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_Driver__kill_pointed, None, Handle_TFunction_Driver)
Handle_TFunction_Driver_swigregister = _TFunction.Handle_TFunction_Driver_swigregister
Handle_TFunction_Driver_swigregister(Handle_TFunction_Driver)

def Handle_TFunction_Driver_DownCast(AnObject):
    return _TFunction.Handle_TFunction_Driver_DownCast(AnObject)
Handle_TFunction_Driver_DownCast = _TFunction.Handle_TFunction_Driver_DownCast

class TFunction_DriverTable(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(*args):
        """
        * Returns the driver table. If a driver does not exist, creates it.

        :rtype: Handle_TFunction_DriverTable

        """
        return _TFunction.TFunction_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        * Default constructor

        :rtype: None

        """
        _TFunction.TFunction_DriverTable_swiginit(self, _TFunction.new_TFunction_DriverTable(*args))

    def AddDriver(self, *args):
        """
        * Returns true if the driver has been added successfully to the driver table.

        :param guid:
        :type guid: Standard_GUID &
        :param driver:
        :type driver: Handle_TFunction_Driver &
        :param thread: default value is 0
        :type thread: int
        :rtype: bool

        """
        return _TFunction.TFunction_DriverTable_AddDriver(self, *args)


    def HasDriver(self, *args):
        """
        * Returns true if the driver exists in the driver table.

        :param guid:
        :type guid: Standard_GUID &
        :param thread: default value is 0
        :type thread: int
        :rtype: bool

        """
        return _TFunction.TFunction_DriverTable_HasDriver(self, *args)


    def FindDriver(self, *args):
        """
        * Returns true if the driver was found.

        :param guid:
        :type guid: Standard_GUID &
        :param driver:
        :type driver: Handle_TFunction_Driver &
        :param thread: default value is 0
        :type thread: int
        :rtype: bool

        """
        return _TFunction.TFunction_DriverTable_FindDriver(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_DriverTable self) -> std::string"""
        return _TFunction.TFunction_DriverTable_DumpToString(self)


    def RemoveDriver(self, *args):
        """
        * Removes a driver with the given GUID. Returns true if the driver has been removed successfully.

        :param guid:
        :type guid: Standard_GUID &
        :param thread: default value is 0
        :type thread: int
        :rtype: bool

        """
        return _TFunction.TFunction_DriverTable_RemoveDriver(self, *args)


    def Clear(self, *args):
        """
        * Removes all drivers. Returns true if the driver has been removed successfully.

        :rtype: None

        """
        return _TFunction.TFunction_DriverTable_Clear(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_DriverTable self)"""
        return _TFunction.TFunction_DriverTable__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_DriverTable self) -> Handle_TFunction_DriverTable"""
        return _TFunction.TFunction_DriverTable_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_DriverTable.AddDriver = new_instancemethod(_TFunction.TFunction_DriverTable_AddDriver, None, TFunction_DriverTable)
TFunction_DriverTable.HasDriver = new_instancemethod(_TFunction.TFunction_DriverTable_HasDriver, None, TFunction_DriverTable)
TFunction_DriverTable.FindDriver = new_instancemethod(_TFunction.TFunction_DriverTable_FindDriver, None, TFunction_DriverTable)
TFunction_DriverTable.DumpToString = new_instancemethod(_TFunction.TFunction_DriverTable_DumpToString, None, TFunction_DriverTable)
TFunction_DriverTable.RemoveDriver = new_instancemethod(_TFunction.TFunction_DriverTable_RemoveDriver, None, TFunction_DriverTable)
TFunction_DriverTable.Clear = new_instancemethod(_TFunction.TFunction_DriverTable_Clear, None, TFunction_DriverTable)
TFunction_DriverTable._kill_pointed = new_instancemethod(_TFunction.TFunction_DriverTable__kill_pointed, None, TFunction_DriverTable)
TFunction_DriverTable.GetHandle = new_instancemethod(_TFunction.TFunction_DriverTable_GetHandle, None, TFunction_DriverTable)
TFunction_DriverTable_swigregister = _TFunction.TFunction_DriverTable_swigregister
TFunction_DriverTable_swigregister(TFunction_DriverTable)

def TFunction_DriverTable_Get(*args):
    """
    * Returns the driver table. If a driver does not exist, creates it.

    :rtype: Handle_TFunction_DriverTable

    """
    return _TFunction.TFunction_DriverTable_Get(*args)

class Handle_TFunction_DriverTable(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_DriverTable_swiginit(self, _TFunction.new_Handle_TFunction_DriverTable(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_DriverTable_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_DriverTable.Nullify = new_instancemethod(_TFunction.Handle_TFunction_DriverTable_Nullify, None, Handle_TFunction_DriverTable)
Handle_TFunction_DriverTable.IsNull = new_instancemethod(_TFunction.Handle_TFunction_DriverTable_IsNull, None, Handle_TFunction_DriverTable)
Handle_TFunction_DriverTable.GetObject = new_instancemethod(_TFunction.Handle_TFunction_DriverTable_GetObject, None, Handle_TFunction_DriverTable)
Handle_TFunction_DriverTable._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_DriverTable__kill_pointed, None, Handle_TFunction_DriverTable)
Handle_TFunction_DriverTable_swigregister = _TFunction.Handle_TFunction_DriverTable_swigregister
Handle_TFunction_DriverTable_swigregister(Handle_TFunction_DriverTable)

def Handle_TFunction_DriverTable_DownCast(AnObject):
    return _TFunction.Handle_TFunction_DriverTable_DownCast(AnObject)
Handle_TFunction_DriverTable_DownCast = _TFunction.Handle_TFunction_DriverTable_DownCast

class TFunction_Function(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * Static methods: ============== Finds or Creates a function attribute on the label <L>. Returns the function attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_TFunction_Function

        * Finds or Creates a function attribute on the label <L>. Sets a driver ID to the function. Returns the function attribute.

        :param L:
        :type L: TDF_Label &
        :param DriverID:
        :type DriverID: Standard_GUID &
        :rtype: Handle_TFunction_Function

        """
        return _TFunction.TFunction_Function_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        * Returns the GUID for functions. Returns a function found on the label. Instance methods: ================

        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_Function_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TFunction.TFunction_Function_swiginit(self, _TFunction.new_TFunction_Function(*args))

    def GetDriverGUID(self, *args):
        """
        * Returns the GUID for this function's driver.

        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_Function_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        * Sets the driver for this function as that indentified by the GUID guid.

        :param guid:
        :type guid: Standard_GUID &
        :rtype: None

        """
        return _TFunction.TFunction_Function_SetDriverGUID(self, *args)


    def Failed(self, *args):
        """
        * Returns true if the execution failed

        :rtype: bool

        """
        return _TFunction.TFunction_Function_Failed(self, *args)


    def SetFailure(self, *args):
        """
        * Sets the failed index.

        :param mode: default value is 0
        :type mode: int
        :rtype: None

        """
        return _TFunction.TFunction_Function_SetFailure(self, *args)


    def GetFailure(self, *args):
        """
        * Returns an index of failure if the execution of this function failed. If this integer value is 0, no failure has occurred. Implementation of Attribute methods: ===================================

        :rtype: int

        """
        return _TFunction.TFunction_Function_GetFailure(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_Function self) -> std::string"""
        return _TFunction.TFunction_Function_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_Function self)"""
        return _TFunction.TFunction_Function__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_Function self) -> Handle_TFunction_Function"""
        return _TFunction.TFunction_Function_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Function.GetDriverGUID = new_instancemethod(_TFunction.TFunction_Function_GetDriverGUID, None, TFunction_Function)
TFunction_Function.SetDriverGUID = new_instancemethod(_TFunction.TFunction_Function_SetDriverGUID, None, TFunction_Function)
TFunction_Function.Failed = new_instancemethod(_TFunction.TFunction_Function_Failed, None, TFunction_Function)
TFunction_Function.SetFailure = new_instancemethod(_TFunction.TFunction_Function_SetFailure, None, TFunction_Function)
TFunction_Function.GetFailure = new_instancemethod(_TFunction.TFunction_Function_GetFailure, None, TFunction_Function)
TFunction_Function.DumpToString = new_instancemethod(_TFunction.TFunction_Function_DumpToString, None, TFunction_Function)
TFunction_Function._kill_pointed = new_instancemethod(_TFunction.TFunction_Function__kill_pointed, None, TFunction_Function)
TFunction_Function.GetHandle = new_instancemethod(_TFunction.TFunction_Function_GetHandle, None, TFunction_Function)
TFunction_Function_swigregister = _TFunction.TFunction_Function_swigregister
TFunction_Function_swigregister(TFunction_Function)

def TFunction_Function_Set(*args):
    """
    * Static methods: ============== Finds or Creates a function attribute on the label <L>. Returns the function attribute.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_TFunction_Function

    * Finds or Creates a function attribute on the label <L>. Sets a driver ID to the function. Returns the function attribute.

    :param L:
    :type L: TDF_Label &
    :param DriverID:
    :type DriverID: Standard_GUID &
    :rtype: Handle_TFunction_Function

    """
    return _TFunction.TFunction_Function_Set(*args)

def TFunction_Function_GetID(*args):
    """
    * Returns the GUID for functions. Returns a function found on the label. Instance methods: ================

    :rtype: Standard_GUID

    """
    return _TFunction.TFunction_Function_GetID(*args)

class Handle_TFunction_Function(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_Function_swiginit(self, _TFunction.new_Handle_TFunction_Function(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_Function_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_Function.Nullify = new_instancemethod(_TFunction.Handle_TFunction_Function_Nullify, None, Handle_TFunction_Function)
Handle_TFunction_Function.IsNull = new_instancemethod(_TFunction.Handle_TFunction_Function_IsNull, None, Handle_TFunction_Function)
Handle_TFunction_Function.GetObject = new_instancemethod(_TFunction.Handle_TFunction_Function_GetObject, None, Handle_TFunction_Function)
Handle_TFunction_Function._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_Function__kill_pointed, None, Handle_TFunction_Function)
Handle_TFunction_Function_swigregister = _TFunction.Handle_TFunction_Function_swigregister
Handle_TFunction_Function_swigregister(Handle_TFunction_Function)

def Handle_TFunction_Function_DownCast(AnObject):
    return _TFunction.Handle_TFunction_Function_DownCast(AnObject)
Handle_TFunction_Function_DownCast = _TFunction.Handle_TFunction_Function_DownCast

class TFunction_GraphNode(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * Static methods ============== Finds or Creates a graph node attribute at the label <L>. Returns the attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_TFunction_GraphNode

        """
        return _TFunction.TFunction_GraphNode_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        * Returns the GUID for GraphNode attribute. Instant methods =============== Constructor (empty).

        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_GraphNode_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TFunction.TFunction_GraphNode_swiginit(self, _TFunction.new_TFunction_GraphNode(*args))

    def AddPrevious(self, *args):
        """
        * Defines a reference to the function as a previous one.

        :param funcID:
        :type funcID: int
        :rtype: bool

        * Defines a reference to the function as a previous one.

        :param func:
        :type func: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_GraphNode_AddPrevious(self, *args)


    def RemovePrevious(self, *args):
        """
        * Removes a reference to the function as a previous one.

        :param funcID:
        :type funcID: int
        :rtype: bool

        * Removes a reference to the function as a previous one.

        :param func:
        :type func: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_GraphNode_RemovePrevious(self, *args)


    def GetPrevious(self, *args):
        """
        * Returns a map of previous functions.

        :rtype: TColStd_MapOfInteger

        """
        return _TFunction.TFunction_GraphNode_GetPrevious(self, *args)


    def RemoveAllPrevious(self, *args):
        """
        * Clears a map of previous functions.

        :rtype: None

        """
        return _TFunction.TFunction_GraphNode_RemoveAllPrevious(self, *args)


    def AddNext(self, *args):
        """
        * Defines a reference to the function as a next one.

        :param funcID:
        :type funcID: int
        :rtype: bool

        * Defines a reference to the function as a next one.

        :param func:
        :type func: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_GraphNode_AddNext(self, *args)


    def RemoveNext(self, *args):
        """
        * Removes a reference to the function as a next one.

        :param funcID:
        :type funcID: int
        :rtype: bool

        * Removes a reference to the function as a next one.

        :param func:
        :type func: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_GraphNode_RemoveNext(self, *args)


    def GetNext(self, *args):
        """
        * Returns a map of next functions.

        :rtype: TColStd_MapOfInteger

        """
        return _TFunction.TFunction_GraphNode_GetNext(self, *args)


    def RemoveAllNext(self, *args):
        """
        * Clears a map of next functions.

        :rtype: None

        """
        return _TFunction.TFunction_GraphNode_RemoveAllNext(self, *args)


    def GetStatus(self, *args):
        """
        * Returns the execution status of the function.

        :rtype: TFunction_ExecutionStatus

        """
        return _TFunction.TFunction_GraphNode_GetStatus(self, *args)


    def SetStatus(self, *args):
        """
        * Defines an execution status for a function. Implementation of Attribute methods ===================================

        :param status:
        :type status: TFunction_ExecutionStatus
        :rtype: None

        """
        return _TFunction.TFunction_GraphNode_SetStatus(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_GraphNode self) -> std::string"""
        return _TFunction.TFunction_GraphNode_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_GraphNode self)"""
        return _TFunction.TFunction_GraphNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_GraphNode self) -> Handle_TFunction_GraphNode"""
        return _TFunction.TFunction_GraphNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_GraphNode.AddPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_AddPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.RemovePrevious = new_instancemethod(_TFunction.TFunction_GraphNode_RemovePrevious, None, TFunction_GraphNode)
TFunction_GraphNode.GetPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_GetPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveAllPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveAllPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.AddNext = new_instancemethod(_TFunction.TFunction_GraphNode_AddNext, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveNext = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveNext, None, TFunction_GraphNode)
TFunction_GraphNode.GetNext = new_instancemethod(_TFunction.TFunction_GraphNode_GetNext, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveAllNext = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveAllNext, None, TFunction_GraphNode)
TFunction_GraphNode.GetStatus = new_instancemethod(_TFunction.TFunction_GraphNode_GetStatus, None, TFunction_GraphNode)
TFunction_GraphNode.SetStatus = new_instancemethod(_TFunction.TFunction_GraphNode_SetStatus, None, TFunction_GraphNode)
TFunction_GraphNode.DumpToString = new_instancemethod(_TFunction.TFunction_GraphNode_DumpToString, None, TFunction_GraphNode)
TFunction_GraphNode._kill_pointed = new_instancemethod(_TFunction.TFunction_GraphNode__kill_pointed, None, TFunction_GraphNode)
TFunction_GraphNode.GetHandle = new_instancemethod(_TFunction.TFunction_GraphNode_GetHandle, None, TFunction_GraphNode)
TFunction_GraphNode_swigregister = _TFunction.TFunction_GraphNode_swigregister
TFunction_GraphNode_swigregister(TFunction_GraphNode)

def TFunction_GraphNode_Set(*args):
    """
    * Static methods ============== Finds or Creates a graph node attribute at the label <L>. Returns the attribute.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_TFunction_GraphNode

    """
    return _TFunction.TFunction_GraphNode_Set(*args)

def TFunction_GraphNode_GetID(*args):
    """
    * Returns the GUID for GraphNode attribute. Instant methods =============== Constructor (empty).

    :rtype: Standard_GUID

    """
    return _TFunction.TFunction_GraphNode_GetID(*args)

class Handle_TFunction_GraphNode(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_GraphNode_swiginit(self, _TFunction.new_Handle_TFunction_GraphNode(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_GraphNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_GraphNode.Nullify = new_instancemethod(_TFunction.Handle_TFunction_GraphNode_Nullify, None, Handle_TFunction_GraphNode)
Handle_TFunction_GraphNode.IsNull = new_instancemethod(_TFunction.Handle_TFunction_GraphNode_IsNull, None, Handle_TFunction_GraphNode)
Handle_TFunction_GraphNode.GetObject = new_instancemethod(_TFunction.Handle_TFunction_GraphNode_GetObject, None, Handle_TFunction_GraphNode)
Handle_TFunction_GraphNode._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_GraphNode__kill_pointed, None, Handle_TFunction_GraphNode)
Handle_TFunction_GraphNode_swigregister = _TFunction.Handle_TFunction_GraphNode_swigregister
Handle_TFunction_GraphNode_swigregister(Handle_TFunction_GraphNode)

def Handle_TFunction_GraphNode_DownCast(AnObject):
    return _TFunction.Handle_TFunction_GraphNode_DownCast(AnObject)
Handle_TFunction_GraphNode_DownCast = _TFunction.Handle_TFunction_GraphNode_DownCast

class TFunction_HArray1OfDataMapOfGUIDDriver(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_HArray1OfDataMapOfGUIDDriver(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TFunction_DataMapOfGUIDDriver &
        :rtype: None

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TFunction_DataMapOfGUIDDriver

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: TFunction_Array1OfDataMapOfGUIDDriver

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: TFunction_Array1OfDataMapOfGUIDDriver

        """
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_HArray1OfDataMapOfGUIDDriver self)"""
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_HArray1OfDataMapOfGUIDDriver self) -> Handle_TFunction_HArray1OfDataMapOfGUIDDriver"""
        return _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_HArray1OfDataMapOfGUIDDriver.Init = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Init, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.Length = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Length, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.Lower = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Lower, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.Upper = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Upper, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.SetValue = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_SetValue, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.Value = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Value, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.ChangeValue = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_ChangeValue, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.Array1 = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Array1, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.ChangeArray1 = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_ChangeArray1, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver__kill_pointed, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.GetHandle = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_GetHandle, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_swigregister
TFunction_HArray1OfDataMapOfGUIDDriver_swigregister(TFunction_HArray1OfDataMapOfGUIDDriver)

class Handle_TFunction_HArray1OfDataMapOfGUIDDriver(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_Handle_TFunction_HArray1OfDataMapOfGUIDDriver(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_HArray1OfDataMapOfGUIDDriver.Nullify = new_instancemethod(_TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_Nullify, None, Handle_TFunction_HArray1OfDataMapOfGUIDDriver)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver.IsNull = new_instancemethod(_TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_IsNull, None, Handle_TFunction_HArray1OfDataMapOfGUIDDriver)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver.GetObject = new_instancemethod(_TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_GetObject, None, Handle_TFunction_HArray1OfDataMapOfGUIDDriver)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver__kill_pointed, None, Handle_TFunction_HArray1OfDataMapOfGUIDDriver)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_swigregister = _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_swigregister
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_swigregister(Handle_TFunction_HArray1OfDataMapOfGUIDDriver)

def Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast(AnObject):
    return _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast(AnObject)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast = _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast

class TFunction_IFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NewFunction(*args):
        """
        * Sets a new function attached to a label <L> with <ID>. It creates a new TFunction_Function attribute initialized by the <ID>, a new TFunction_GraphNode with an empty list of dependencies and the status equal to TFunction_ES_WrongDefinition. It registers the function in the scope of functions for this document.

        :param L:
        :type L: TDF_Label &
        :param ID:
        :type ID: Standard_GUID &
        :rtype: bool

        """
        return _TFunction.TFunction_IFunction_NewFunction(*args)

    NewFunction = staticmethod(NewFunction)

    def DeleteFunction(*args):
        """
        * Deletes a function attached to a label <L>. It deletes a TFunction_Function attribute and a TFunction_GraphNode. It deletes the functions from the scope of function of this document.

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_IFunction_DeleteFunction(*args)

    DeleteFunction = staticmethod(DeleteFunction)

    def __init__(self, *args):
        """
        :rtype: None

        * A constructor. Initializes the interface by the label of function.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        _TFunction.TFunction_IFunction_swiginit(self, _TFunction.new_TFunction_IFunction(*args))

    def Init(self, *args):
        """
        * Initializes the interface by the label of function.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_Init(self, *args)


    def Label(self, *args):
        """
        * Returns a label of the function.

        :rtype: TDF_Label

        """
        return _TFunction.TFunction_IFunction_Label(self, *args)


    def UpdateDependencies(self, *args):
        """
        * Updates dependencies for all functions of the scope. It returns false in case of an error. An empty constructor.

        :param Access:
        :type Access: TDF_Label &
        :rtype: bool

        * Updates the dependencies of this function only.

        :rtype: bool

        """
        return _TFunction.TFunction_IFunction_UpdateDependencies(self, *args)


    def Arguments(self, *args):
        """
        * The method fills-in the list by labels, where the arguments of the function are located.

        :param args:
        :type args: TDF_LabelList &
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_Arguments(self, *args)


    def Results(self, *args):
        """
        * The method fills-in the list by labels, where the results of the function are located.

        :param res:
        :type res: TDF_LabelList &
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_Results(self, *args)


    def GetPrevious(self, *args):
        """
        * Returns a list of previous functions.

        :param prev:
        :type prev: TDF_LabelList &
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_GetPrevious(self, *args)


    def GetNext(self, *args):
        """
        * Returns a list of next functions.

        :param prev:
        :type prev: TDF_LabelList &
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_GetNext(self, *args)


    def GetStatus(self, *args):
        """
        * Returns the execution status of the function.

        :rtype: TFunction_ExecutionStatus

        """
        return _TFunction.TFunction_IFunction_GetStatus(self, *args)


    def SetStatus(self, *args):
        """
        * Defines an execution status for a function.

        :param status:
        :type status: TFunction_ExecutionStatus
        :rtype: None

        """
        return _TFunction.TFunction_IFunction_SetStatus(self, *args)


    def GetAllFunctions(self, *args):
        """
        * Returns the scope of all functions.

        :rtype: TFunction_DoubleMapOfIntegerLabel

        """
        return _TFunction.TFunction_IFunction_GetAllFunctions(self, *args)


    def GetLogbook(self, *args):
        """
        * Returns the Logbook - keeper of modifications.

        :rtype: TFunction_Logbook

        """
        return _TFunction.TFunction_IFunction_GetLogbook(self, *args)


    def GetDriver(self, *args):
        """
        * Returns a driver of the function.

        :param thread: default value is 0
        :type thread: int
        :rtype: Handle_TFunction_Driver

        """
        return _TFunction.TFunction_IFunction_GetDriver(self, *args)


    def GetGraphNode(self, *args):
        """
        * Returns a graph node of the function.

        :rtype: Handle_TFunction_GraphNode

        """
        return _TFunction.TFunction_IFunction_GetGraphNode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_IFunction.Init = new_instancemethod(_TFunction.TFunction_IFunction_Init, None, TFunction_IFunction)
TFunction_IFunction.Label = new_instancemethod(_TFunction.TFunction_IFunction_Label, None, TFunction_IFunction)
TFunction_IFunction.UpdateDependencies = new_instancemethod(_TFunction.TFunction_IFunction_UpdateDependencies, None, TFunction_IFunction)
TFunction_IFunction.Arguments = new_instancemethod(_TFunction.TFunction_IFunction_Arguments, None, TFunction_IFunction)
TFunction_IFunction.Results = new_instancemethod(_TFunction.TFunction_IFunction_Results, None, TFunction_IFunction)
TFunction_IFunction.GetPrevious = new_instancemethod(_TFunction.TFunction_IFunction_GetPrevious, None, TFunction_IFunction)
TFunction_IFunction.GetNext = new_instancemethod(_TFunction.TFunction_IFunction_GetNext, None, TFunction_IFunction)
TFunction_IFunction.GetStatus = new_instancemethod(_TFunction.TFunction_IFunction_GetStatus, None, TFunction_IFunction)
TFunction_IFunction.SetStatus = new_instancemethod(_TFunction.TFunction_IFunction_SetStatus, None, TFunction_IFunction)
TFunction_IFunction.GetAllFunctions = new_instancemethod(_TFunction.TFunction_IFunction_GetAllFunctions, None, TFunction_IFunction)
TFunction_IFunction.GetLogbook = new_instancemethod(_TFunction.TFunction_IFunction_GetLogbook, None, TFunction_IFunction)
TFunction_IFunction.GetDriver = new_instancemethod(_TFunction.TFunction_IFunction_GetDriver, None, TFunction_IFunction)
TFunction_IFunction.GetGraphNode = new_instancemethod(_TFunction.TFunction_IFunction_GetGraphNode, None, TFunction_IFunction)
TFunction_IFunction._kill_pointed = new_instancemethod(_TFunction.TFunction_IFunction__kill_pointed, None, TFunction_IFunction)
TFunction_IFunction_swigregister = _TFunction.TFunction_IFunction_swigregister
TFunction_IFunction_swigregister(TFunction_IFunction)

def TFunction_IFunction_NewFunction(*args):
    """
    * Sets a new function attached to a label <L> with <ID>. It creates a new TFunction_Function attribute initialized by the <ID>, a new TFunction_GraphNode with an empty list of dependencies and the status equal to TFunction_ES_WrongDefinition. It registers the function in the scope of functions for this document.

    :param L:
    :type L: TDF_Label &
    :param ID:
    :type ID: Standard_GUID &
    :rtype: bool

    """
    return _TFunction.TFunction_IFunction_NewFunction(*args)

def TFunction_IFunction_DeleteFunction(*args):
    """
    * Deletes a function attached to a label <L>. It deletes a TFunction_Function attribute and a TFunction_GraphNode. It deletes the functions from the scope of function of this document.

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
    return _TFunction.TFunction_IFunction_DeleteFunction(*args)

class TFunction_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * An empty constructor.

        :rtype: None

        * A constructor. Initializes the iterator.

        :param Access:
        :type Access: TDF_Label &
        :rtype: None

        """
        _TFunction.TFunction_Iterator_swiginit(self, _TFunction.new_TFunction_Iterator(*args))

    def Init(self, *args):
        """
        * Initializes the Iterator.

        :param Access:
        :type Access: TDF_Label &
        :rtype: void

        """
        return _TFunction.TFunction_Iterator_Init(self, *args)


    def SetUsageOfExecutionStatus(self, *args):
        """
        * Defines the mode of iteration - usage or not of the execution status. If the iterator takes into account the execution status, the method ::Current() returns only 'not executed' functions while their status is not changed. If the iterator ignores the execution status, the method ::Current() returns the functions following their dependencies and ignoring the execution status.

        :param usage:
        :type usage: bool
        :rtype: None

        """
        return _TFunction.TFunction_Iterator_SetUsageOfExecutionStatus(self, *args)


    def GetUsageOfExecutionStatus(self, *args):
        """
        * Returns usage of execution status by the iterator.

        :rtype: bool

        """
        return _TFunction.TFunction_Iterator_GetUsageOfExecutionStatus(self, *args)


    def GetMaxNbThreads(self, *args):
        """
        * Analyses the graph of dependencies and returns maximum number of threads may be used to calculate the model.

        :rtype: int

        """
        return _TFunction.TFunction_Iterator_GetMaxNbThreads(self, *args)


    def Current(self, *args):
        """
        * Returns the current list of functions. If the iterator uses the execution status, the returned list contains only the functions with 'not executed' status.

        :rtype: TDF_LabelList

        """
        return _TFunction.TFunction_Iterator_Current(self, *args)


    def More(self, *args):
        """
        * Returns false if the graph of functions is fully iterated.

        :rtype: bool

        """
        return _TFunction.TFunction_Iterator_More(self, *args)


    def Next(self, *args):
        """
        * Switches the iterator to the next list of current functions.

        :rtype: void

        """
        return _TFunction.TFunction_Iterator_Next(self, *args)


    def GetStatus(self, *args):
        """
        * A help-function aimed to help the user to check the status of retrurned function. It calls TFunction_GraphNode::GetStatus() inside.

        :param func:
        :type func: TDF_Label &
        :rtype: TFunction_ExecutionStatus

        """
        return _TFunction.TFunction_Iterator_GetStatus(self, *args)


    def SetStatus(self, *args):
        """
        * A help-function aimed to help the user to change the execution status of a function. It calls TFunction_GraphNode::SetStatus() inside.

        :param func:
        :type func: TDF_Label &
        :param status:
        :type status: TFunction_ExecutionStatus
        :rtype: None

        """
        return _TFunction.TFunction_Iterator_SetStatus(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_Iterator self) -> std::string"""
        return _TFunction.TFunction_Iterator_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_Iterator self)"""
        return _TFunction.TFunction_Iterator__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Iterator.Init = new_instancemethod(_TFunction.TFunction_Iterator_Init, None, TFunction_Iterator)
TFunction_Iterator.SetUsageOfExecutionStatus = new_instancemethod(_TFunction.TFunction_Iterator_SetUsageOfExecutionStatus, None, TFunction_Iterator)
TFunction_Iterator.GetUsageOfExecutionStatus = new_instancemethod(_TFunction.TFunction_Iterator_GetUsageOfExecutionStatus, None, TFunction_Iterator)
TFunction_Iterator.GetMaxNbThreads = new_instancemethod(_TFunction.TFunction_Iterator_GetMaxNbThreads, None, TFunction_Iterator)
TFunction_Iterator.Current = new_instancemethod(_TFunction.TFunction_Iterator_Current, None, TFunction_Iterator)
TFunction_Iterator.More = new_instancemethod(_TFunction.TFunction_Iterator_More, None, TFunction_Iterator)
TFunction_Iterator.Next = new_instancemethod(_TFunction.TFunction_Iterator_Next, None, TFunction_Iterator)
TFunction_Iterator.GetStatus = new_instancemethod(_TFunction.TFunction_Iterator_GetStatus, None, TFunction_Iterator)
TFunction_Iterator.SetStatus = new_instancemethod(_TFunction.TFunction_Iterator_SetStatus, None, TFunction_Iterator)
TFunction_Iterator.DumpToString = new_instancemethod(_TFunction.TFunction_Iterator_DumpToString, None, TFunction_Iterator)
TFunction_Iterator._kill_pointed = new_instancemethod(_TFunction.TFunction_Iterator__kill_pointed, None, TFunction_Iterator)
TFunction_Iterator_swigregister = _TFunction.TFunction_Iterator_swigregister
TFunction_Iterator_swigregister(TFunction_Iterator)

class TFunction_Logbook(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * next methods are solving declaration ===================================

        :rtype: None

        """
        _TFunction.TFunction_Logbook_swiginit(self, _TFunction.new_TFunction_Logbook(*args))

    def Clear(self, *args):
        """
        * Clears this logbook to its default, empty state.

        :rtype: None

        """
        return _TFunction.TFunction_Logbook_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TFunction.TFunction_Logbook_IsEmpty(self, *args)


    def SetTouched(self, *args):
        """
        * Sets the label L as a touched label in this logbook. In other words, L is understood to have been modified by the end user.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TFunction.TFunction_Logbook_SetTouched(self, *args)


    def SetImpacted(self, *args):
        """
        * Sets the label L as an impacted label in this logbook. This method is called by execution of the function driver.

        :param L:
        :type L: TDF_Label &
        :param WithChildren: default value is Standard_False
        :type WithChildren: bool
        :rtype: None

        """
        return _TFunction.TFunction_Logbook_SetImpacted(self, *args)


    def SetValid(self, *args):
        """
        * Sets the label L as a valid label in this logbook.

        :param L:
        :type L: TDF_Label &
        :param WithChildren: default value is Standard_False
        :type WithChildren: bool
        :rtype: None

        """
        return _TFunction.TFunction_Logbook_SetValid(self, *args)


    def ChangeValid(self, *args):
        """
        :rtype: TDF_LabelMap

        """
        return _TFunction.TFunction_Logbook_ChangeValid(self, *args)


    def IsModified(self, *args):
        """
        * Returns True if the label L is touched or impacted. This method is called by <TFunction_FunctionDriver::MustExecute>. If <WithChildren> is set to true, the method checks all the sublabels of <L> too. next method to consult solving result =====================================

        :param L:
        :type L: TDF_Label &
        :param WithChildren: default value is Standard_False
        :type WithChildren: bool
        :rtype: bool

        """
        return _TFunction.TFunction_Logbook_IsModified(self, *args)


    def GetTouched(self, *args):
        """
        * Returns the map of touched labels in this logbook. A touched label is the one modified by the end user.

        :rtype: TDF_LabelMap

        """
        return _TFunction.TFunction_Logbook_GetTouched(self, *args)


    def GetImpacted(self, *args):
        """
        * Returns the map of impacted labels contained in this logbook.

        :rtype: TDF_LabelMap

        """
        return _TFunction.TFunction_Logbook_GetImpacted(self, *args)


    def GetValid(self, *args):
        """
        * Returns the map of valid labels in this logbook.

        :rtype: TDF_LabelMap

        """
        return _TFunction.TFunction_Logbook_GetValid(self, *args)


    def Done(self, *args):
        """
        * Sets if the execution failed

        :param status:
        :type status: bool
        :rtype: None

        """
        return _TFunction.TFunction_Logbook_Done(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _TFunction.TFunction_Logbook_IsDone(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_Logbook self) -> std::string"""
        return _TFunction.TFunction_Logbook_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_Logbook self)"""
        return _TFunction.TFunction_Logbook__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Logbook.Clear = new_instancemethod(_TFunction.TFunction_Logbook_Clear, None, TFunction_Logbook)
TFunction_Logbook.IsEmpty = new_instancemethod(_TFunction.TFunction_Logbook_IsEmpty, None, TFunction_Logbook)
TFunction_Logbook.SetTouched = new_instancemethod(_TFunction.TFunction_Logbook_SetTouched, None, TFunction_Logbook)
TFunction_Logbook.SetImpacted = new_instancemethod(_TFunction.TFunction_Logbook_SetImpacted, None, TFunction_Logbook)
TFunction_Logbook.SetValid = new_instancemethod(_TFunction.TFunction_Logbook_SetValid, None, TFunction_Logbook)
TFunction_Logbook.ChangeValid = new_instancemethod(_TFunction.TFunction_Logbook_ChangeValid, None, TFunction_Logbook)
TFunction_Logbook.IsModified = new_instancemethod(_TFunction.TFunction_Logbook_IsModified, None, TFunction_Logbook)
TFunction_Logbook.GetTouched = new_instancemethod(_TFunction.TFunction_Logbook_GetTouched, None, TFunction_Logbook)
TFunction_Logbook.GetImpacted = new_instancemethod(_TFunction.TFunction_Logbook_GetImpacted, None, TFunction_Logbook)
TFunction_Logbook.GetValid = new_instancemethod(_TFunction.TFunction_Logbook_GetValid, None, TFunction_Logbook)
TFunction_Logbook.Done = new_instancemethod(_TFunction.TFunction_Logbook_Done, None, TFunction_Logbook)
TFunction_Logbook.IsDone = new_instancemethod(_TFunction.TFunction_Logbook_IsDone, None, TFunction_Logbook)
TFunction_Logbook.DumpToString = new_instancemethod(_TFunction.TFunction_Logbook_DumpToString, None, TFunction_Logbook)
TFunction_Logbook._kill_pointed = new_instancemethod(_TFunction.TFunction_Logbook__kill_pointed, None, TFunction_Logbook)
TFunction_Logbook_swigregister = _TFunction.TFunction_Logbook_swigregister
TFunction_Logbook_swigregister(TFunction_Logbook)

class TFunction_Scope(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        * Static methods ============== Finds or Creates a TFunction_Scope attribute at the root label accessed by <Access>. Returns the attribute.

        :param Access:
        :type Access: TDF_Label &
        :rtype: Handle_TFunction_Scope

        """
        return _TFunction.TFunction_Scope_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        * Returns the GUID for Scope attribute. Instant methods =============== Constructor (empty).

        :rtype: Standard_GUID

        """
        return _TFunction.TFunction_Scope_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TFunction.TFunction_Scope_swiginit(self, _TFunction.new_TFunction_Scope(*args))

    def AddFunction(self, *args):
        """
        * Adds a function to the scope of functions.

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_Scope_AddFunction(self, *args)


    def RemoveFunction(self, *args):
        """
        * Removes a function from the scope of functions.

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        * Removes a function from the scope of functions.

        :param ID:
        :type ID: int
        :rtype: bool

        """
        return _TFunction.TFunction_Scope_RemoveFunction(self, *args)


    def RemoveAllFunctions(self, *args):
        """
        * Removes all functions from the scope of functions.

        :rtype: None

        """
        return _TFunction.TFunction_Scope_RemoveAllFunctions(self, *args)


    def HasFunction(self, *args):
        """
        * Returns true if the function exists with such an ID.

        :param ID:
        :type ID: int
        :rtype: bool

        * Returns true if the label contains a function of this scope.

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TFunction.TFunction_Scope_HasFunction(self, *args)


    def GetFunction(self, *args):
        """
        * Returns an ID of the function.

        :param L:
        :type L: TDF_Label &
        :rtype: int

        * Returns the label of the function with this ID.

        :param ID:
        :type ID: int
        :rtype: TDF_Label

        """
        return _TFunction.TFunction_Scope_GetFunction(self, *args)


    def GetLogbook(self, *args):
        """
        * Returns the Logbook used in TFunction_Driver methods. Implementation of Attribute methods ===================================

        :rtype: TFunction_Logbook

        """
        return _TFunction.TFunction_Scope_GetLogbook(self, *args)


    def DumpToString(self):
        """DumpToString(TFunction_Scope self) -> std::string"""
        return _TFunction.TFunction_Scope_DumpToString(self)


    def GetFunctions(self, *args):
        """
        * Returns the scope of functions.

        :rtype: TFunction_DoubleMapOfIntegerLabel

        """
        return _TFunction.TFunction_Scope_GetFunctions(self, *args)


    def ChangeFunctions(self, *args):
        """
        * Returns the scope of functions for modification. Warning: Don't use this method if You are not sure what You do!

        :rtype: TFunction_DoubleMapOfIntegerLabel

        """
        return _TFunction.TFunction_Scope_ChangeFunctions(self, *args)


    def SetFreeID(self, *args):
        """
        :param ID:
        :type ID: int
        :rtype: None

        """
        return _TFunction.TFunction_Scope_SetFreeID(self, *args)


    def GetFreeID(self, *args):
        """
        :rtype: int

        """
        return _TFunction.TFunction_Scope_GetFreeID(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(TFunction_Scope self)"""
        return _TFunction.TFunction_Scope__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(TFunction_Scope self) -> Handle_TFunction_Scope"""
        return _TFunction.TFunction_Scope_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TFunction_Scope.AddFunction = new_instancemethod(_TFunction.TFunction_Scope_AddFunction, None, TFunction_Scope)
TFunction_Scope.RemoveFunction = new_instancemethod(_TFunction.TFunction_Scope_RemoveFunction, None, TFunction_Scope)
TFunction_Scope.RemoveAllFunctions = new_instancemethod(_TFunction.TFunction_Scope_RemoveAllFunctions, None, TFunction_Scope)
TFunction_Scope.HasFunction = new_instancemethod(_TFunction.TFunction_Scope_HasFunction, None, TFunction_Scope)
TFunction_Scope.GetFunction = new_instancemethod(_TFunction.TFunction_Scope_GetFunction, None, TFunction_Scope)
TFunction_Scope.GetLogbook = new_instancemethod(_TFunction.TFunction_Scope_GetLogbook, None, TFunction_Scope)
TFunction_Scope.DumpToString = new_instancemethod(_TFunction.TFunction_Scope_DumpToString, None, TFunction_Scope)
TFunction_Scope.GetFunctions = new_instancemethod(_TFunction.TFunction_Scope_GetFunctions, None, TFunction_Scope)
TFunction_Scope.ChangeFunctions = new_instancemethod(_TFunction.TFunction_Scope_ChangeFunctions, None, TFunction_Scope)
TFunction_Scope.SetFreeID = new_instancemethod(_TFunction.TFunction_Scope_SetFreeID, None, TFunction_Scope)
TFunction_Scope.GetFreeID = new_instancemethod(_TFunction.TFunction_Scope_GetFreeID, None, TFunction_Scope)
TFunction_Scope._kill_pointed = new_instancemethod(_TFunction.TFunction_Scope__kill_pointed, None, TFunction_Scope)
TFunction_Scope.GetHandle = new_instancemethod(_TFunction.TFunction_Scope_GetHandle, None, TFunction_Scope)
TFunction_Scope_swigregister = _TFunction.TFunction_Scope_swigregister
TFunction_Scope_swigregister(TFunction_Scope)

def TFunction_Scope_Set(*args):
    """
    * Static methods ============== Finds or Creates a TFunction_Scope attribute at the root label accessed by <Access>. Returns the attribute.

    :param Access:
    :type Access: TDF_Label &
    :rtype: Handle_TFunction_Scope

    """
    return _TFunction.TFunction_Scope_Set(*args)

def TFunction_Scope_GetID(*args):
    """
    * Returns the GUID for Scope attribute. Instant methods =============== Constructor (empty).

    :rtype: Standard_GUID

    """
    return _TFunction.TFunction_Scope_GetID(*args)

class Handle_TFunction_Scope(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.Handle_TFunction_Scope_swiginit(self, _TFunction.new_Handle_TFunction_Scope(*args))
    DownCast = staticmethod(_TFunction.Handle_TFunction_Scope_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TFunction_Scope.Nullify = new_instancemethod(_TFunction.Handle_TFunction_Scope_Nullify, None, Handle_TFunction_Scope)
Handle_TFunction_Scope.IsNull = new_instancemethod(_TFunction.Handle_TFunction_Scope_IsNull, None, Handle_TFunction_Scope)
Handle_TFunction_Scope.GetObject = new_instancemethod(_TFunction.Handle_TFunction_Scope_GetObject, None, Handle_TFunction_Scope)
Handle_TFunction_Scope._kill_pointed = new_instancemethod(_TFunction.Handle_TFunction_Scope__kill_pointed, None, Handle_TFunction_Scope)
Handle_TFunction_Scope_swigregister = _TFunction.Handle_TFunction_Scope_swigregister
Handle_TFunction_Scope_swigregister(Handle_TFunction_Scope)

def Handle_TFunction_Scope_DownCast(AnObject):
    return _TFunction.Handle_TFunction_Scope_DownCast(AnObject)
Handle_TFunction_Scope_DownCast = _TFunction.Handle_TFunction_Scope_DownCast



