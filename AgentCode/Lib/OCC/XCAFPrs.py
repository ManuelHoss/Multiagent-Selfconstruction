# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XCAFPrs.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFPrs', [dirname(__file__)])
        except ImportError:
            import _XCAFPrs
            return _XCAFPrs
        if fp is not None:
            try:
                _mod = imp.load_module('_XCAFPrs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XCAFPrs = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFPrs
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFPrs.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XCAFPrs.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XCAFPrs.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XCAFPrs.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XCAFPrs.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XCAFPrs.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XCAFPrs.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XCAFPrs.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XCAFPrs.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XCAFPrs.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XCAFPrs.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XCAFPrs.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XCAFPrs.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XCAFPrs.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XCAFPrs.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XCAFPrs.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XCAFPrs.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XCAFPrs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.TopLoc
import OCC.gp
import OCC.TopoDS
import OCC.TopAbs
import OCC.AIS
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Bnd
import OCC.Prs3d
import OCC.Quantity
import OCC.Aspect
import OCC.TShort
import OCC.TColQuantity
import OCC.Graphic3d
import OCC.Image
import OCC.OSD
import OCC.HLRAlgo
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.NCollection
import OCC.SelectMgr
import OCC.PrsMgr
import OCC.V3d
import OCC.Visual3d
import OCC.StdSelect
import OCC.Select3D
import OCC.SelectBasics
import OCC.DsgPrs
class xcafprs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CollectStyleSettings(*args):
        """
        * Collect styles defined for shape on label L and its components and subshapes and fills a map of shape - style correspondence The location <loc> is for internal use, it should be Null location for external call

        :param L:
        :type L: TDF_Label &
        :param loc:
        :type loc: TopLoc_Location &
        :param settings:
        :type settings: XCAFPrs_DataMapOfShapeStyle &
        :rtype: void

        """
        return _XCAFPrs.xcafprs_CollectStyleSettings(*args)

    CollectStyleSettings = staticmethod(CollectStyleSettings)

    def DispatchStyles(*args):
        """
        * Iterates on shape (recursively) and splits it on parts each of which has its own style (basing on settings collected by CollectStyleSettings()) The DefStyle is default style applied to a shape if no specific style assignment is applied to it If force is True, the <shape> is added to a map even if no styles are redefined for it or its subshapes The context is for internal use, it indicates the type of the shape to which <shape> belongs

        :param shape:
        :type shape: TopoDS_Shape &
        :param settings:
        :type settings: XCAFPrs_DataMapOfShapeStyle &
        :param items:
        :type items: XCAFPrs_DataMapOfStyleShape &
        :param DefStyle:
        :type DefStyle: XCAFPrs_Style &
        :param force: default value is Standard_True
        :type force: bool
        :param context: default value is TopAbs_SHAPE
        :type context: TopAbs_ShapeEnum
        :rtype: bool

        """
        return _XCAFPrs.xcafprs_DispatchStyles(*args)

    DispatchStyles = staticmethod(DispatchStyles)

    def SetViewNameMode(*args):
        """
        * Set ViewNameMode for indicate display names or not.

        :param viewNameMode:
        :type viewNameMode: bool
        :rtype: void

        """
        return _XCAFPrs.xcafprs_SetViewNameMode(*args)

    SetViewNameMode = staticmethod(SetViewNameMode)

    def GetViewNameMode(*args):
        """
        :rtype: bool

        """
        return _XCAFPrs.xcafprs_GetViewNameMode(*args)

    GetViewNameMode = staticmethod(GetViewNameMode)

    def __init__(self):
        _XCAFPrs.xcafprs_swiginit(self, _XCAFPrs.new_xcafprs())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


xcafprs._kill_pointed = new_instancemethod(_XCAFPrs.xcafprs__kill_pointed, None, xcafprs)
xcafprs_swigregister = _XCAFPrs.xcafprs_swigregister
xcafprs_swigregister(xcafprs)

def xcafprs_CollectStyleSettings(*args):
    """
    * Collect styles defined for shape on label L and its components and subshapes and fills a map of shape - style correspondence The location <loc> is for internal use, it should be Null location for external call

    :param L:
    :type L: TDF_Label &
    :param loc:
    :type loc: TopLoc_Location &
    :param settings:
    :type settings: XCAFPrs_DataMapOfShapeStyle &
    :rtype: void

    """
    return _XCAFPrs.xcafprs_CollectStyleSettings(*args)

def xcafprs_DispatchStyles(*args):
    """
    * Iterates on shape (recursively) and splits it on parts each of which has its own style (basing on settings collected by CollectStyleSettings()) The DefStyle is default style applied to a shape if no specific style assignment is applied to it If force is True, the <shape> is added to a map even if no styles are redefined for it or its subshapes The context is for internal use, it indicates the type of the shape to which <shape> belongs

    :param shape:
    :type shape: TopoDS_Shape &
    :param settings:
    :type settings: XCAFPrs_DataMapOfShapeStyle &
    :param items:
    :type items: XCAFPrs_DataMapOfStyleShape &
    :param DefStyle:
    :type DefStyle: XCAFPrs_Style &
    :param force: default value is Standard_True
    :type force: bool
    :param context: default value is TopAbs_SHAPE
    :type context: TopAbs_ShapeEnum
    :rtype: bool

    """
    return _XCAFPrs.xcafprs_DispatchStyles(*args)

def xcafprs_SetViewNameMode(*args):
    """
    * Set ViewNameMode for indicate display names or not.

    :param viewNameMode:
    :type viewNameMode: bool
    :rtype: void

    """
    return _XCAFPrs.xcafprs_SetViewNameMode(*args)

def xcafprs_GetViewNameMode(*args):
    """
    :rtype: bool

    """
    return _XCAFPrs.xcafprs_GetViewNameMode(*args)

class XCAFPrs_AISObject(OCC.AIS.AIS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object to visualise the shape label

        :param lab:
        :type lab: TDF_Label &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_AISObject_swiginit(self, _XCAFPrs.new_XCAFPrs_AISObject(*args))

    def SetMaterial(self, *args):
        """
        :param aName:
        :type aName: Graphic3d_NameOfMaterial
        :rtype: void

        :param aName:
        :type aName: Graphic3d_MaterialAspect &
        :rtype: void

        """
        return _XCAFPrs.XCAFPrs_AISObject_SetMaterial(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_AISObject.SetMaterial = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject_SetMaterial, None, XCAFPrs_AISObject)
XCAFPrs_AISObject._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject__kill_pointed, None, XCAFPrs_AISObject)
XCAFPrs_AISObject.GetHandle = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject_GetHandle, None, XCAFPrs_AISObject)
XCAFPrs_AISObject_swigregister = _XCAFPrs.XCAFPrs_AISObject_swigregister
XCAFPrs_AISObject_swigregister(XCAFPrs_AISObject)

class Handle_XCAFPrs_AISObject(OCC.AIS.Handle_AIS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.Handle_XCAFPrs_AISObject_swiginit(self, _XCAFPrs.new_Handle_XCAFPrs_AISObject(*args))
    DownCast = staticmethod(_XCAFPrs.Handle_XCAFPrs_AISObject_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFPrs_AISObject.Nullify = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_AISObject_Nullify, None, Handle_XCAFPrs_AISObject)
Handle_XCAFPrs_AISObject.IsNull = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_AISObject_IsNull, None, Handle_XCAFPrs_AISObject)
Handle_XCAFPrs_AISObject.GetObject = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_AISObject_GetObject, None, Handle_XCAFPrs_AISObject)
Handle_XCAFPrs_AISObject._kill_pointed = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_AISObject__kill_pointed, None, Handle_XCAFPrs_AISObject)
Handle_XCAFPrs_AISObject_swigregister = _XCAFPrs.Handle_XCAFPrs_AISObject_swigregister
Handle_XCAFPrs_AISObject_swigregister(Handle_XCAFPrs_AISObject)

def Handle_XCAFPrs_AISObject_DownCast(AnObject):
    return _XCAFPrs.Handle_XCAFPrs_AISObject_DownCast(AnObject)
Handle_XCAFPrs_AISObject_DownCast = _XCAFPrs.Handle_XCAFPrs_AISObject_DownCast

class XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: XCAFPrs_DataMapOfShapeStyle &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: XCAFPrs_DataMapOfShapeStyle &
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle.Initialize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Initialize, None, XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle)
XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Key, None, XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle)
XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_Value, None, XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle)
XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle__kill_pointed, None, XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle)
XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_swigregister = _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_swigregister
XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle_swigregister(XCAFPrs_DataMapIteratorOfDataMapOfShapeStyle)

class XCAFPrs_DataMapIteratorOfDataMapOfStyleShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: XCAFPrs_DataMapOfStyleShape &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapIteratorOfDataMapOfStyleShape(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: XCAFPrs_DataMapOfStyleShape &
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapIteratorOfDataMapOfStyleShape.Initialize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Initialize, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleShape)
XCAFPrs_DataMapIteratorOfDataMapOfStyleShape.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Key, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleShape)
XCAFPrs_DataMapIteratorOfDataMapOfStyleShape.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_Value, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleShape)
XCAFPrs_DataMapIteratorOfDataMapOfStyleShape._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape__kill_pointed, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleShape)
XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_swigregister = _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_swigregister
XCAFPrs_DataMapIteratorOfDataMapOfStyleShape_swigregister(XCAFPrs_DataMapIteratorOfDataMapOfStyleShape)

class XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: XCAFPrs_DataMapOfStyleTransient &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: XCAFPrs_DataMapOfStyleTransient &
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient.Initialize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Initialize, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient)
XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Key, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient)
XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_Value, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient)
XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient__kill_pointed, None, XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient)
XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_swigregister = _XCAFPrs.XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_swigregister
XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient_swigregister(XCAFPrs_DataMapIteratorOfDataMapOfStyleTransient)

class XCAFPrs_DataMapNodeOfDataMapOfShapeStyle(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: XCAFPrs_Style &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapNodeOfDataMapOfShapeStyle self)"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(XCAFPrs_DataMapNodeOfDataMapOfShapeStyle self) -> Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_Key, None, XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_Value, None, XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
XCAFPrs_DataMapNodeOfDataMapOfShapeStyle._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle__kill_pointed, None, XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.GetHandle = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_GetHandle, None, XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister = _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister
XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister(XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)

class Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swiginit(self, _XCAFPrs.new_Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle(*args))
    DownCast = staticmethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.Nullify = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_Nullify, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.IsNull = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_IsNull, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle.GetObject = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_GetObject, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle._kill_pointed = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle__kill_pointed, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_swigregister(Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle)

def Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_DownCast(AnObject):
    return _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_DownCast(AnObject)
Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_DownCast = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfShapeStyle_DownCast

class XCAFPrs_DataMapNodeOfDataMapOfStyleShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapNodeOfDataMapOfStyleShape(*args))

    def Key(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapNodeOfDataMapOfStyleShape self)"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(XCAFPrs_DataMapNodeOfDataMapOfStyleShape self) -> Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapNodeOfDataMapOfStyleShape.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_Key, None, XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
XCAFPrs_DataMapNodeOfDataMapOfStyleShape.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_Value, None, XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
XCAFPrs_DataMapNodeOfDataMapOfStyleShape._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape__kill_pointed, None, XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
XCAFPrs_DataMapNodeOfDataMapOfStyleShape.GetHandle = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_GetHandle, None, XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister = _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister
XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister(XCAFPrs_DataMapNodeOfDataMapOfStyleShape)

class Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swiginit(self, _XCAFPrs.new_Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape(*args))
    DownCast = staticmethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape.Nullify = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_Nullify, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape.IsNull = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_IsNull, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape.GetObject = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_GetObject, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape._kill_pointed = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape__kill_pointed, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_swigregister(Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape)

def Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_DownCast(AnObject):
    return _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_DownCast(AnObject)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_DownCast = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleShape_DownCast

class XCAFPrs_DataMapNodeOfDataMapOfStyleTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :param I:
        :type I: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient(*args))

    def Key(self, *args):
        """
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Standard_Transient

        """
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapNodeOfDataMapOfStyleTransient self)"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(XCAFPrs_DataMapNodeOfDataMapOfStyleTransient self) -> Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient"""
        return _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.Key = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_Key, None, XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_Value, None, XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
XCAFPrs_DataMapNodeOfDataMapOfStyleTransient._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient__kill_pointed, None, XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.GetHandle = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_GetHandle, None, XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister = _XCAFPrs.XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister
XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister(XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)

class Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swiginit(self, _XCAFPrs.new_Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient(*args))
    DownCast = staticmethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.Nullify = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_Nullify, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.IsNull = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_IsNull, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient.GetObject = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_GetObject, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient._kill_pointed = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient__kill_pointed, None, Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_swigregister(Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient)

def Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_DownCast(AnObject):
    return _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_DownCast(AnObject)
Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_DownCast = _XCAFPrs.Handle_XCAFPrs_DataMapNodeOfDataMapOfStyleTransient_DownCast

class XCAFPrs_DataMapOfShapeStyle(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapOfShapeStyle(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfShapeStyle &
        :rtype: XCAFPrs_DataMapOfShapeStyle

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfShapeStyle &
        :rtype: XCAFPrs_DataMapOfShapeStyle

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: XCAFPrs_Style

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapOfShapeStyle self)"""
        return _XCAFPrs.XCAFPrs_DataMapOfShapeStyle__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapOfShapeStyle.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Assign, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.Set = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Set, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ReSize, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Clear, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.Bind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Bind, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.IsBound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_IsBound, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.UnBind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_UnBind, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.Find = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Find, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.ChangeFind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ChangeFind, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.Find1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_Find1, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle.ChangeFind1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle_ChangeFind1, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfShapeStyle__kill_pointed, None, XCAFPrs_DataMapOfShapeStyle)
XCAFPrs_DataMapOfShapeStyle_swigregister = _XCAFPrs.XCAFPrs_DataMapOfShapeStyle_swigregister
XCAFPrs_DataMapOfShapeStyle_swigregister(XCAFPrs_DataMapOfShapeStyle)

class XCAFPrs_DataMapOfStyleShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapOfStyleShape_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapOfStyleShape(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfStyleShape &
        :rtype: XCAFPrs_DataMapOfStyleShape

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfStyleShape &
        :rtype: XCAFPrs_DataMapOfStyleShape

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :param I:
        :type I: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: TopoDS_Shape

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapOfStyleShape self)"""
        return _XCAFPrs.XCAFPrs_DataMapOfStyleShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapOfStyleShape.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Assign, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Set = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Set, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ReSize, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Clear, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Bind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Bind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.IsBound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_IsBound, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.UnBind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_UnBind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Find = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Find, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ChangeFind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeFind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Find1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Find1, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ChangeFind1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeFind1, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape__kill_pointed, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape_swigregister = _XCAFPrs.XCAFPrs_DataMapOfStyleShape_swigregister
XCAFPrs_DataMapOfStyleShape_swigregister(XCAFPrs_DataMapOfStyleShape)

class XCAFPrs_DataMapOfStyleTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapOfStyleTransient(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfStyleTransient &
        :rtype: XCAFPrs_DataMapOfStyleTransient

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: XCAFPrs_DataMapOfStyleTransient &
        :rtype: XCAFPrs_DataMapOfStyleTransient

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Handle_Standard_Transient

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Handle_Standard_Transient

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: XCAFPrs_Style &
        :rtype: Standard_Address

        """
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(XCAFPrs_DataMapOfStyleTransient self)"""
        return _XCAFPrs.XCAFPrs_DataMapOfStyleTransient__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_DataMapOfStyleTransient.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Assign, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Set = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Set, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ReSize, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Clear, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Bind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Bind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.IsBound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_IsBound, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.UnBind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_UnBind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Find = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Find, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ChangeFind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeFind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Find1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Find1, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ChangeFind1 = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeFind1, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient__kill_pointed, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient_swigregister = _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_swigregister
XCAFPrs_DataMapOfStyleTransient_swigregister(XCAFPrs_DataMapOfStyleTransient)

class XCAFPrs_Driver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Update(self, *args):
        """
        :param L:
        :type L: TDF_Label &
        :param ais:
        :type ais: Handle_AIS_InteractiveObject &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_Driver_Update(self, *args)


    def GetID(*args):
        """
        * returns GUID of the driver

        :rtype: Standard_GUID

        """
        return _XCAFPrs.XCAFPrs_Driver_GetID(*args)

    GetID = staticmethod(GetID)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_Driver.Update = new_instancemethod(_XCAFPrs.XCAFPrs_Driver_Update, None, XCAFPrs_Driver)
XCAFPrs_Driver._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_Driver__kill_pointed, None, XCAFPrs_Driver)
XCAFPrs_Driver.GetHandle = new_instancemethod(_XCAFPrs.XCAFPrs_Driver_GetHandle, None, XCAFPrs_Driver)
XCAFPrs_Driver_swigregister = _XCAFPrs.XCAFPrs_Driver_swigregister
XCAFPrs_Driver_swigregister(XCAFPrs_Driver)

def XCAFPrs_Driver_GetID(*args):
    """
    * returns GUID of the driver

    :rtype: Standard_GUID

    """
    return _XCAFPrs.XCAFPrs_Driver_GetID(*args)

class Handle_XCAFPrs_Driver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.Handle_XCAFPrs_Driver_swiginit(self, _XCAFPrs.new_Handle_XCAFPrs_Driver(*args))
    DownCast = staticmethod(_XCAFPrs.Handle_XCAFPrs_Driver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFPrs_Driver.Nullify = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_Driver_Nullify, None, Handle_XCAFPrs_Driver)
Handle_XCAFPrs_Driver.IsNull = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_Driver_IsNull, None, Handle_XCAFPrs_Driver)
Handle_XCAFPrs_Driver.GetObject = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_Driver_GetObject, None, Handle_XCAFPrs_Driver)
Handle_XCAFPrs_Driver._kill_pointed = new_instancemethod(_XCAFPrs.Handle_XCAFPrs_Driver__kill_pointed, None, Handle_XCAFPrs_Driver)
Handle_XCAFPrs_Driver_swigregister = _XCAFPrs.Handle_XCAFPrs_Driver_swigregister
Handle_XCAFPrs_Driver_swigregister(Handle_XCAFPrs_Driver)

def Handle_XCAFPrs_Driver_DownCast(AnObject):
    return _XCAFPrs.Handle_XCAFPrs_Driver_DownCast(AnObject)
Handle_XCAFPrs_Driver_DownCast = _XCAFPrs.Handle_XCAFPrs_Driver_DownCast

class XCAFPrs_Style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _XCAFPrs.XCAFPrs_Style_swiginit(self, _XCAFPrs.new_XCAFPrs_Style(*args))

    def IsSetColorSurf(self, *args):
        """
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_Style_IsSetColorSurf(self, *args)


    def GetColorSurf(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _XCAFPrs.XCAFPrs_Style_GetColorSurf(self, *args)


    def SetColorSurf(self, *args):
        """
        :param col:
        :type col: Quantity_Color &
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_Style_SetColorSurf(self, *args)


    def UnSetColorSurf(self, *args):
        """
        * Manage surface color setting

        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_Style_UnSetColorSurf(self, *args)


    def IsSetColorCurv(self, *args):
        """
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_Style_IsSetColorCurv(self, *args)


    def GetColorCurv(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _XCAFPrs.XCAFPrs_Style_GetColorCurv(self, *args)


    def SetColorCurv(self, *args):
        """
        :param col:
        :type col: Quantity_Color &
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_Style_SetColorCurv(self, *args)


    def UnSetColorCurv(self, *args):
        """
        * Manage curve color setting

        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_Style_UnSetColorCurv(self, *args)


    def SetVisibility(self, *args):
        """
        :param visibility:
        :type visibility: bool
        :rtype: None

        """
        return _XCAFPrs.XCAFPrs_Style_SetVisibility(self, *args)


    def IsVisible(self, *args):
        """
        * Manage visibility Note: Setting visibility to False makes colors undefined This is necessary for HashCode

        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_Style_IsVisible(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def HashCode(*args):
        """
        * Returns a HasCode value for the Key <K> in the range 0..Upper.

        :param S:
        :type S: XCAFPrs_Style &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _XCAFPrs.XCAFPrs_Style_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        * Returs True if styles are the same Methods for using Style as key in maps

        :param other:
        :type other: XCAFPrs_Style &
        :rtype: bool

        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

        :param S1:
        :type S1: XCAFPrs_Style &
        :param S2:
        :type S2: XCAFPrs_Style &
        :rtype: bool

        """
        return _XCAFPrs.XCAFPrs_Style_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFPrs_Style.IsSetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsSetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.GetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_GetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.SetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.UnSetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_UnSetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.IsSetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsSetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.GetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_GetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.SetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.UnSetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_UnSetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.SetVisibility = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetVisibility, None, XCAFPrs_Style)
XCAFPrs_Style.IsVisible = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsVisible, None, XCAFPrs_Style)
XCAFPrs_Style.__eq_wrapper__ = new_instancemethod(_XCAFPrs.XCAFPrs_Style___eq_wrapper__, None, XCAFPrs_Style)
XCAFPrs_Style._kill_pointed = new_instancemethod(_XCAFPrs.XCAFPrs_Style__kill_pointed, None, XCAFPrs_Style)
XCAFPrs_Style_swigregister = _XCAFPrs.XCAFPrs_Style_swigregister
XCAFPrs_Style_swigregister(XCAFPrs_Style)

def XCAFPrs_Style_HashCode(*args):
    """
    * Returns a HasCode value for the Key <K> in the range 0..Upper.

    :param S:
    :type S: XCAFPrs_Style &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _XCAFPrs.XCAFPrs_Style_HashCode(*args)

def XCAFPrs_Style_IsEqual(*args):
    """
    * Returs True if styles are the same Methods for using Style as key in maps

    :param other:
    :type other: XCAFPrs_Style &
    :rtype: bool

    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

    :param S1:
    :type S1: XCAFPrs_Style &
    :param S2:
    :type S2: XCAFPrs_Style &
    :rtype: bool

    """
    return _XCAFPrs.XCAFPrs_Style_IsEqual(*args)



