# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepOffsetAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepOffsetAPI', [dirname(__file__)])
        except ImportError:
            import _BRepOffsetAPI
            return _BRepOffsetAPI
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepOffsetAPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepOffsetAPI = swig_import_helper()
    del swig_import_helper
else:
    import _BRepOffsetAPI
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepOffsetAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepOffsetAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepOffsetAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepOffsetAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.BRepBuilderAPI
import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.TopTools
import OCC.Message
import OCC.BRepTools
import OCC.Bnd
import OCC.BRep
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.Draft
import OCC.BRepFill
import OCC.AppParCurves
import OCC.GeomPlate
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.TColGeom2d
import OCC.Law
import OCC.GeomLProp
import OCC.AdvApp2Var
import OCC.AdvApprox
import OCC.PLib
import OCC.Plate
import OCC.MAT
import OCC.GeomFill
import OCC.Convert
import OCC.AppBlend
import OCC.Approx
import OCC.AppCont
import OCC.TColGeom
import OCC.BRepMAT2d
import OCC.Bisector
import OCC.IntRes2d
import OCC.BRepOffset
import OCC.BRepAlgo
import OCC.TopOpeBRepBuild
import OCC.TopOpeBRepTool
import OCC.GeomAdaptor
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.Geom2dAdaptor
import OCC.IntCurvesFace
import OCC.Extrema
import OCC.TopOpeBRepDS
import OCC.BRepPrimAPI
import OCC.BRepPrim
import OCC.Primitives
import OCC.BRepSweep
import OCC.Sweep
import OCC.Quantity
class BRepOffsetAPI_DraftAngle(OCC.BRepBuilderAPI.BRepBuilderAPI_ModifyShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty algorithm to perform taper-adding transformations on faces of a shape. Use the Init function to define the shape to be tapered.

        :rtype: None

        * Initializes an algorithm to perform taper-adding transformations on faces of the shape S. S will be referred to as the initial shape of the algorithm.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_DraftAngle(*args))

    def Clear(self, *args):
        """
        * Cancels the results of all taper-adding transformations performed by this algorithm on the initial shape. These results will have been defined by successive calls to the function Add.

        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Clear(self, *args)


    def Init(self, *args):
        """
        * Initializes, or reinitializes this taper-adding algorithm with the shape S. S will be referred to as the initial shape of this algorithm.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Init(self, *args)


    def Add(self, *args):
        """
        * Adds the face F, the direction Direction, the angle Angle, the plane NeutralPlane, and the flag Flag to the framework created at construction time, and with this data, defines the taper-adding transformation. F is a face, which belongs to the initial shape of this algorithm or to the shape loaded by the function Init. Only planar, cylindrical or conical faces can be tapered: - If the face F is planar, it is tapered by inclining it through the angle Angle about the line of intersection between the plane NeutralPlane and F. Direction indicates the side of NeutralPlane from which matter is removed if Angle is positive or added if Angle is negative. - If F is cylindrical or conical, it is transformed in the same way on a single face, resulting in a conical face if F is cylindrical, and a conical or cylindrical face if it is already conical. The taper-adding transformation is propagated from the face F along the series of planar, cylindrical or conical faces containing F, which are tangential to one another. Use the function AddDone to check if this taper-adding transformation is successful. Warning Nothing is done if: - the face F does not belong to the initial shape of this algorithm, or - the face F is not planar, cylindrical or conical. Exceptions - Standard_NullObject if the initial shape is not defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the Init function. - Standard_ConstructionError if the previous call to Add has failed. The function AddDone ought to have been used to check for this, and the function Remove to cancel the results of the unsuccessful taper-adding transformation and to retrieve the previous shape.

        :param F:
        :type F: TopoDS_Face &
        :param Direction:
        :type Direction: gp_Dir
        :param Angle:
        :type Angle: float
        :param NeutralPlane:
        :type NeutralPlane: gp_Pln
        :param Flag: default value is Standard_True
        :type Flag: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Add(self, *args)


    def AddDone(self, *args):
        """
        * Returns true if the previous taper-adding transformation performed by this algorithm in the last call to Add, was successful. If AddDone returns false: - the function ProblematicShape returns the face on which the error occurred, - the function Remove has to be used to cancel the results of the unsuccessful taper-adding transformation and to retrieve the previous shape. Exceptions Standard_NullObject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the .Init function.

        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_AddDone(self, *args)


    def Remove(self, *args):
        """
        * Cancels the taper-adding transformation previously performed by this algorithm on the face F and the series of tangential faces which contain F, and retrieves the shape before the last taper-adding transformation. Warning You will have to use this function if the previous call to Add fails. Use the function AddDone to check it. Exceptions - Standard_NullObject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the Init function. - Standard_NoSuchObject if F has not been added or has already been removed.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Remove(self, *args)


    def ProblematicShape(self, *args):
        """
        * Returns the shape on which an error occurred after an unsuccessful call to Add or when IsDone returns false. Exceptions Standard_NullObject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the Init function.

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ProblematicShape(self, *args)


    def Status(self, *args):
        """
        * Returns an error status when an error has occured (Face, Edge or Vertex recomputaion problem). Otherwise returns Draft_NoError. The method may be called if AddDone returns Standard_False, or when IsDone returns Standard_False.

        :rtype: Draft_ErrorStatus

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Status(self, *args)


    def ConnectedFaces(self, *args):
        """
        * Returns all the faces which have been added together with the face <F>.

        :param F:
        :type F: TopoDS_Face &
        :rtype: TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ConnectedFaces(self, *args)


    def ModifiedFaces(self, *args):
        """
        * Returns all the faces on which a modification has been given.

        :rtype: TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ModifiedFaces(self, *args)


    def CorrectWires(self, *args):
        """
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_CorrectWires(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_DraftAngle.Clear = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Clear, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.Init = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Init, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.Add = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Add, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.AddDone = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_AddDone, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.Remove = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Remove, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.ProblematicShape = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ProblematicShape, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.Status = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Status, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.ConnectedFaces = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ConnectedFaces, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.ModifiedFaces = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ModifiedFaces, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle.CorrectWires = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_CorrectWires, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_DraftAngle__kill_pointed, None, BRepOffsetAPI_DraftAngle)
BRepOffsetAPI_DraftAngle_swigregister = _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_swigregister
BRepOffsetAPI_DraftAngle_swigregister(BRepOffsetAPI_DraftAngle)

class BRepOffsetAPI_FindContigousEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes an algorithm for identifying contiguous edges on shapes with tolerance as the tolerance of contiguity (defaulted to 1.0e-6). This tolerance value is used to determine whether two edges or sections of edges are coincident. Use the function Add to define the shapes to be checked. Set option to false. This argument (defaulted to true) will serve in subsequent software releases for performing an analysis of degenerated shapes.

        :param tolerance: default value is 1.0e-06
        :type tolerance: float
        :param option: default value is Standard_True
        :type option: bool
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_FindContigousEdges(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for identifying contiguous edges on shapes using the tolerance of contiguity tolerance. This tolerance value is used to determine whether two edges or sections of edges are coincident. Use the function Add to define the shapes to be checked. Sets <option> to false.

        :param tolerance:
        :type tolerance: float
        :param option:
        :type option: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Init(self, *args)


    def Add(self, *args):
        """
        * Adds the shape shape to the list of shapes to be checked by this algorithm. Once all the shapes to be checked have been added, use the function Perform to find the contiguous edges and the function ContigousEdge to return these edges.

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Add(self, *args)


    def Perform(self, *args):
        """
        * Finds coincident parts of edges of two or more shapes added to this algorithm and breaks down these edges into contiguous and non-contiguous sections on copies of the initial shapes. The function ContigousEdge returns contiguous edges. The function Modified can be used to return modified copies of the initial shapes where one or more edges were broken down into contiguous and non-contiguous sections. Warning This function must be used once all the shapes to be checked have been added. It is not possible to add further shapes subsequently and then to repeat the call to Perform.

        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Perform(self, *args)


    def NbContigousEdges(self, *args):
        """
        * Returns the number of contiguous edges found by the function Perform on the shapes added to this algorithm.

        :rtype: int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbContigousEdges(self, *args)


    def ContigousEdge(self, *args):
        """
        * Returns the contiguous edge of index index found by the function Perform on the shapes added to this algorithm. Exceptions Standard_OutOfRange if: - index is less than 1, or - index is greater than the number of contiguous edges found by the function Perform on the shapes added to this algorithm.

        :param index:
        :type index: int
        :rtype: TopoDS_Edge

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdge(self, *args)


    def ContigousEdgeCouple(self, *args):
        """
        * Returns a list of edges coincident with the contiguous edge of index index found by the function Perform. There are as many edges in the list as there are faces adjacent to this contiguous edge. Exceptions Standard_OutOfRange if: - index is less than 1, or - index is greater than the number of contiguous edges found by the function Perform on the shapes added to this algorithm.

        :param index:
        :type index: int
        :rtype: TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdgeCouple(self, *args)


    def SectionToBoundary(self, *args):
        """
        * Returns the edge on the initial shape, of which the modified copy contains the edge section. section is coincident with a contiguous edge found by the function Perform. Use the function ContigousEdgeCouple to obtain a valid section. This information is useful for verification purposes, since it provides a means of determining the surface to which the contiguous edge belongs. Exceptions Standard_NoSuchObject if section is not coincident with a contiguous edge. Use the function ContigousEdgeCouple to obtain a valid section.

        :param section:
        :type section: TopoDS_Edge &
        :rtype: TopoDS_Edge

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_SectionToBoundary(self, *args)


    def NbDegeneratedShapes(self, *args):
        """
        * Gives the number of degenerated shapes

        :rtype: int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbDegeneratedShapes(self, *args)


    def DegeneratedShape(self, *args):
        """
        * Gives a degenerated shape

        :param index:
        :type index: int
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_DegeneratedShape(self, *args)


    def IsDegenerated(self, *args):
        """
        * Indicates if a input shape is degenerated

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsDegenerated(self, *args)


    def IsModified(self, *args):
        """
        * Returns true if the copy of the initial shape shape was modified by the function Perform (i.e. if one or more of its edges was broken down into contiguous and non-contiguous sections). Warning Returns false if shape is not one of the initial shapes added to this algorithm.

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsModified(self, *args)


    def Modified(self, *args):
        """
        * Gives a modifieded shape Raises NoSuchObject if shape has not been modified

        :param shape:
        :type shape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Modified(self, *args)


    def Dump(self, *args):
        """
        * Dump properties of resulting shape.

        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_FindContigousEdges.Init = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Init, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.Add = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Add, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.Perform = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Perform, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.NbContigousEdges = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbContigousEdges, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.ContigousEdge = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdge, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.ContigousEdgeCouple = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdgeCouple, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.SectionToBoundary = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_SectionToBoundary, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.NbDegeneratedShapes = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbDegeneratedShapes, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.DegeneratedShape = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_DegeneratedShape, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.IsDegenerated = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsDegenerated, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.IsModified = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsModified, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.Modified = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Modified, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges.Dump = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Dump, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges__kill_pointed, None, BRepOffsetAPI_FindContigousEdges)
BRepOffsetAPI_FindContigousEdges_swigregister = _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_swigregister
BRepOffsetAPI_FindContigousEdges_swigregister(BRepOffsetAPI_FindContigousEdges)

class BRepOffsetAPI_MakeDraft(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the draft surface object defined by the shape Shape, the direction Dir, and the angle Angle. Shape must be a TopoDS_Wire, Topo_DS_Face or TopoDS_Shell with free boundaries. Exceptions Standard_NotDone if Shape is not a TopoDS_Wire, Topo_DS_Face or TopoDS_Shell with free boundaries.

        :param Shape:
        :type Shape: TopoDS_Shape &
        :param Dir:
        :type Dir: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeDraft(*args))

    def SetOptions(self, *args):
        """
        * Sets the options of this draft tool. If a transition has to be performed, it can be defined by the mode Style as RightCorner or RoundCorner, RightCorner being a corner defined by a sharp angle, and RoundCorner being a rounded corner. AngleMin is an angular tolerance used to detect whether a transition has to be performed or not. AngleMax sets the maximum value within which a RightCorner transition can be performed. AngleMin and AngleMax are expressed in radians.

        :param Style: default value is BRepBuilderAPI_RightCorner
        :type Style: BRepBuilderAPI_TransitionMode
        :param AngleMin: default value is 0.01
        :type AngleMin: float
        :param AngleMax: default value is 3.0
        :type AngleMax: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetOptions(self, *args)


    def SetDraft(self, *args):
        """
        * Sets the direction of the draft for this object. If IsInternal is true, the draft is internal to the argument Shape used in the constructor.

        :param IsInternal: default value is Standard_False
        :type IsInternal: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetDraft(self, *args)


    def Perform(self, *args):
        """
        * Performs the draft using the length LengthMax as the maximum length for the corner edge between two draft faces.

        :param LengthMax:
        :type LengthMax: float
        :rtype: None

        * Performs the draft up to the surface Surface. If KeepInsideSurface is true, the part of Surface inside the draft is kept in the result.

        :param Surface:
        :type Surface: Handle_Geom_Surface &
        :param KeepInsideSurface: default value is Standard_True
        :type KeepInsideSurface: bool
        :rtype: None

        * Performs the draft up to the shape StopShape. If KeepOutSide is true, the part of StopShape which is outside the Draft is kept in the result.

        :param StopShape:
        :type StopShape: TopoDS_Shape &
        :param KeepOutSide: default value is Standard_True
        :type KeepOutSide: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Perform(self, *args)


    def Shell(self, *args):
        """
        * Returns the shell resulting from performance of the draft along the wire.

        :rtype: TopoDS_Shell

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Shell(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeDraft.SetOptions = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetOptions, None, BRepOffsetAPI_MakeDraft)
BRepOffsetAPI_MakeDraft.SetDraft = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetDraft, None, BRepOffsetAPI_MakeDraft)
BRepOffsetAPI_MakeDraft.Perform = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Perform, None, BRepOffsetAPI_MakeDraft)
BRepOffsetAPI_MakeDraft.Shell = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Shell, None, BRepOffsetAPI_MakeDraft)
BRepOffsetAPI_MakeDraft._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeDraft__kill_pointed, None, BRepOffsetAPI_MakeDraft)
BRepOffsetAPI_MakeDraft_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_swigregister
BRepOffsetAPI_MakeDraft_swigregister(BRepOffsetAPI_MakeDraft)

class BRepOffsetAPI_MakeEvolved(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profil:
        :type Profil: TopoDS_Wire &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param AxeProf: default value is Standard_True
        :type AxeProf: bool
        :param Solid: default value is Standard_False
        :type Solid: bool
        :param ProfOnSpine: default value is Standard_False
        :type ProfOnSpine: bool
        :param Tol: default value is 0.0000001
        :type Tol: float
        :rtype: None

        * These constructors construct an evolved shape by sweeping the profile Profile along the spine Spine. //!	The profile is defined in a coordinate system R. The coordinate system is determined by AxeProf: - if AxeProf is true, R is the global coordinate system, - if AxeProf is false, R is computed so that: - its origin is given by the point on the spine which is closest to the profile, - its 'X Axis' is given by the tangent to the spine at this point, and - its 'Z Axis' is the normal to the plane which contains the spine. The position of the profile at the current point of the spine is given by making R coincident with the local coordinate system given by the current point, the tangent vector and the normal to the spine. Join defines the type of pipe generated by the salient vertices of the spine. The default type is GeomAbs_Arc where the vertices generate revolved pipes about the axis passing along the vertex and the normal to the plane of the spine. At present, this is the only construction type implemented.

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Profil:
        :type Profil: TopoDS_Wire &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param AxeProf: default value is Standard_True
        :type AxeProf: bool
        :param Solid: default value is Standard_False
        :type Solid: bool
        :param ProfOnSpine: default value is Standard_False
        :type ProfOnSpine: bool
        :param Tol: default value is 0.0000001
        :type Tol: float
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeEvolved(*args))

    def Evolved(self, *args):
        """
        :rtype: BRepFill_Evolved

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Evolved(self, *args)


    def GeneratedShapes(self, *args):
        """
        * Returns the shapes created from a subshape <SpineShape> of the spine and a subshape <ProfShape> on the profile.

        :param SpineShape:
        :type SpineShape: TopoDS_Shape &
        :param ProfShape:
        :type ProfShape: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_GeneratedShapes(self, *args)


    def Top(self, *args):
        """
        * Return the face Top if <Solid> is True in the constructor.

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Top(self, *args)


    def Bottom(self, *args):
        """
        * Return the face Bottom if <Solid> is True in the constructor.

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Bottom(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeEvolved.Evolved = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Evolved, None, BRepOffsetAPI_MakeEvolved)
BRepOffsetAPI_MakeEvolved.GeneratedShapes = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_GeneratedShapes, None, BRepOffsetAPI_MakeEvolved)
BRepOffsetAPI_MakeEvolved.Top = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Top, None, BRepOffsetAPI_MakeEvolved)
BRepOffsetAPI_MakeEvolved.Bottom = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Bottom, None, BRepOffsetAPI_MakeEvolved)
BRepOffsetAPI_MakeEvolved._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved__kill_pointed, None, BRepOffsetAPI_MakeEvolved)
BRepOffsetAPI_MakeEvolved_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_swigregister
BRepOffsetAPI_MakeEvolved_swigregister(BRepOffsetAPI_MakeEvolved)

class BRepOffsetAPI_MakeFilling(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a wire filling object defined by - the energy minimizing criterion Degree - the number of points on the curve NbPntsOnCur - the number of iterations NbIter - the Boolean Anisotropie - the 2D tolerance Tol2d - the 3D tolerance Tol3d - the angular tolerance TolAng - the tolerance for curvature TolCur - the highest polynomial degree MaxDeg - the greatest number of segments MaxSeg. If the Boolean Anistropie is true, the algorithm's performance is better in cases where the ratio of the length U and the length V indicate a great difference between the two. In other words, when the surface is, for example, extremely long.

        :param Degree: default value is 3
        :type Degree: int
        :param NbPtsOnCur: default value is 15
        :type NbPtsOnCur: int
        :param NbIter: default value is 2
        :type NbIter: int
        :param Anisotropie: default value is Standard_False
        :type Anisotropie: bool
        :param Tol2d: default value is 0.00001
        :type Tol2d: float
        :param Tol3d: default value is 0.0001
        :type Tol3d: float
        :param TolAng: default value is 0.01
        :type TolAng: float
        :param TolCurv: default value is 0.1
        :type TolCurv: float
        :param MaxDeg: default value is 8
        :type MaxDeg: int
        :param MaxSegments: default value is 9
        :type MaxSegments: int
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeFilling(*args))

    def SetConstrParam(self, *args):
        """
        * Sets the values of Tolerances used to control the constraint. //!	Tol2d: //!	Tol3d: it is the maximum distance allowed between the support surface //!	 and the constraints //!	TolAng: it is the maximum angle allowed between the normal of the surface //!	 and the constraints //!	TolCurv: it is the maximum difference of curvature allowed between //!	 the surface and the constraint

        :param Tol2d: default value is 0.00001
        :type Tol2d: float
        :param Tol3d: default value is 0.0001
        :type Tol3d: float
        :param TolAng: default value is 0.01
        :type TolAng: float
        :param TolCurv: default value is 0.1
        :type TolCurv: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetConstrParam(self, *args)


    def SetResolParam(self, *args):
        """
        * Sets the parameters used for resolution. //!	The default values of these parameters have been chosen for a good //!	ratio quality/performance. //!	Degree: it is the order of energy criterion to minimize for computing //!	 the deformation of the surface. //!	 The default value is 3 //!	 The recommanded value is i+2 where i is the maximum order of the //!	 constraints. //!	NbPtsOnCur: it is the average number of points for discretisation //!	 of the edges. //!	NbIter: it is the maximum number of iterations of the process. //!	 For each iteration the number of discretisation points is //!	 increased. //!	Anisotropie:

        :param Degree: default value is 3
        :type Degree: int
        :param NbPtsOnCur: default value is 15
        :type NbPtsOnCur: int
        :param NbIter: default value is 2
        :type NbIter: int
        :param Anisotropie: default value is Standard_False
        :type Anisotropie: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetResolParam(self, *args)


    def SetApproxParam(self, *args):
        """
        * Sets the parameters used to approximate the filling surface. These include: - MaxDeg - the highest degree which the polynomial defining the filling surface can have - MaxSegments - the greatest number of segments which the filling surface can have.

        :param MaxDeg: default value is 8
        :type MaxDeg: int
        :param MaxSegments: default value is 9
        :type MaxSegments: int
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetApproxParam(self, *args)


    def LoadInitSurface(self, *args):
        """
        * Loads the initial surface Surf to begin the construction of the surface. This optional function is useful if the surface resulting from construction for the algorithm is likely to be complex. The support surface of the face under construction is computed by a deformation of Surf which satisfies the given constraints. The set of bounding edges defines the wire of the face. If no initial surface is given, the algorithm computes it automatically. If the set of edges is not connected (Free constraint), missing edges are automatically computed.

        :param Surf:
        :type Surf: TopoDS_Face &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_LoadInitSurface(self, *args)


    def Add(self, *args):
        """
        * Adds a new constraint which also defines an edge of the wire //!	 of the face //!	Order: Order of the constraint: //!	 GeomAbs_C0 : the surface has to pass by 3D representation //!	  of the edge //!	 GeomAbs_G1 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency with the first //!	  face of the edge //!	 GeomAbs_G2 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency and curvature //!	  with the first face of the edge. Raises ConstructionError if the edge has no representation on a face and Order is GeomAbs_G1 or GeomAbs_G2.

        :param Constr:
        :type Constr: TopoDS_Edge &
        :param Order:
        :type Order: GeomAbs_Shape
        :param IsBound: default value is Standard_True
        :type IsBound: bool
        :rtype: int

        * Adds a new constraint which also defines an edge of the wire //!	 of the face //!	Order: Order of the constraint: //!	 GeomAbs_C0 : the surface has to pass by 3D representation //!	  of the edge //!	 GeomAbs_G1 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency with the //!	  given face //!	 GeomAbs_G2 : the surface has to pass by 3D representation //!	  of the edge and to respect tangency and curvature  with the given face. Raises ConstructionError if the edge has no 2d representation on the given face

        :param Constr:
        :type Constr: TopoDS_Edge &
        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :param IsBound: default value is Standard_True
        :type IsBound: bool
        :rtype: int

        * Adds a free constraint on a face. The corresponding edge has to //!	be automatically recomputed. It is always a bound.

        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :rtype: int

        * Adds a punctual constraint.

        :param Point:
        :type Point: gp_Pnt
        :rtype: int

        * Adds a punctual constraint.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Support:
        :type Support: TopoDS_Face &
        :param Order:
        :type Order: GeomAbs_Shape
        :rtype: int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_Add(self, *args)


    def G0Error(self, *args):
        """
        * Returns the maximum distance between the result and the constraints. This is set at construction time.

        :rtype: float

        * Returns the maximum distance attained between the result and the constraint Index. This is set at construction time.

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G0Error(self, *args)


    def G1Error(self, *args):
        """
        * Returns the maximum angle between the result and the constraints. This is set at construction time.

        :rtype: float

        * Returns the maximum angle between the result and the constraints. This is set at construction time.

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G1Error(self, *args)


    def G2Error(self, *args):
        """
        * Returns the maximum angle between the result and the constraints. This is set at construction time.

        :rtype: float

        * Returns the greatest difference in curvature found between the result and the constraint Index.

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G2Error(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeFilling.SetConstrParam = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetConstrParam, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.SetResolParam = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetResolParam, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.SetApproxParam = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetApproxParam, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.LoadInitSurface = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_LoadInitSurface, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.Add = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_Add, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.G0Error = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G0Error, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.G1Error = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G1Error, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling.G2Error = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G2Error, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeFilling__kill_pointed, None, BRepOffsetAPI_MakeFilling)
BRepOffsetAPI_MakeFilling_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_swigregister
BRepOffsetAPI_MakeFilling_swigregister(BRepOffsetAPI_MakeFilling)

class BRepOffsetAPI_MakeOffset(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an algorithm for creating an empty offset

        :rtype: None

        * Constructs an algorithm for creating an algorithm to build parallels to the spine Spine

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeOffset(*args))

    def Init(self, *args):
        """
        * Initializes the algorithm to construct parallels to the spine Spine. Join defines the type of parallel generated by the salient vertices of the spine. The default type is GeomAbs_Arc where the vertices generate sections of a circle. At present, this is the only construction type implemented.

        :param Spine:
        :type Spine: TopoDS_Face &
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        * Initialize the evaluation of Offseting.

        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Init(self, *args)


    def AddWire(self, *args):
        """
        * Initializes the algorithm to construct parallels to the wire Spine.

        :param Spine:
        :type Spine: TopoDS_Wire &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_AddWire(self, *args)


    def Perform(self, *args):
        """
        * Computes a parallel to the spine at distance Offset and at an altitude Alt from the plane of the spine in relation to the normal to the spine. Exceptions: StdFail_NotDone if the offset is not built.

        :param Offset:
        :type Offset: float
        :param Alt: default value is 0.0
        :type Alt: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeOffset.Init = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Init, None, BRepOffsetAPI_MakeOffset)
BRepOffsetAPI_MakeOffset.AddWire = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffset_AddWire, None, BRepOffsetAPI_MakeOffset)
BRepOffsetAPI_MakeOffset.Perform = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Perform, None, BRepOffsetAPI_MakeOffset)
BRepOffsetAPI_MakeOffset._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffset__kill_pointed, None, BRepOffsetAPI_MakeOffset)
BRepOffsetAPI_MakeOffset_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_swigregister
BRepOffsetAPI_MakeOffset_swigregister(BRepOffsetAPI_MakeOffset)

class BRepOffsetAPI_MakeOffsetShape(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Constructs a shape parallel to the shape S, where - S may be a face, a shell, a solid or a compound of these shape kinds; - Offset is the offset value. The offset shape is constructed: - outside S, if Offset is positive, - inside S, if Offset is negative; - Tol defines the coincidence tolerance criterion for generated shapes; - Mode defines the construction type of parallels applied to the free edges of shape S; currently, only one construction type is implemented, namely the one where the free edges do not generate parallels; this corresponds to the default value BRepOffset_Skin; - Intersection specifies how the algorithm must work in order to limit the parallels to two adjacent shapes: - if Intersection is false (default value), the intersection is calculated with the parallels to the two adjacent shapes, - if Intersection is true, the intersection is calculated by taking all generated parallels into account; this computation method is more general as it avoids some self-intersections generated in the offset shape from features of small dimensions on shape S, however this method has not been completely implemented and therefore is not recommended for use; - SelfInter tells the algorithm whether a computation to eliminate self-intersections must be applied to the resulting shape; however, as this functionality is not yet implemented, it is recommended to use the default value (false); - Join defines how to fill the holes that may appear between parallels to the two adjacent faces. It may take values GeomAbs_Arc or GeomAbs_Intersection: - if Join is equal to GeomAbs_Arc, then pipes are generated between two free edges of two adjacent parallels, and spheres are generated on 'images' of vertices; it is the default value, - if Join is equal to GeomAbs_Intersection, then the parallels to the two adjacent faces are enlarged and intersected, so that there are no free edges on parallels to faces. Warnings 1. All the faces of the shape S should be based on the surfaces with continuity at least C1. 2. The offset value should be sufficiently small to avoid self-intersections in resulting shape. Otherwise these self-intersections may appear inside an offset face if its initial surface is not plane or sphere or cylinder, also some non-adjacent offset faces may intersect each other. Also, some offset surfaces may 'turn inside out'. 3. The algorithm may fail if the shape S contains vertices where more than 3 edges converge. 4. Since 3d-offset algorithm involves intersection of surfaces, it is under limitations of surface intersection algorithm. 5. A result cannot be generated if the underlying geometry of S is BSpline with continuity C0. Exceptions Geom_UndefinedDerivative if the underlying geometry of S is BSpline with continuity C0.

        :param S:
        :type S: TopoDS_Shape &
        :param Offset:
        :type Offset: float
        :param Tol:
        :type Tol: float
        :param Mode: default value is BRepOffset_Skin
        :type Mode: BRepOffset_Mode
        :param Intersection: default value is Standard_False
        :type Intersection: bool
        :param SelfInter: default value is Standard_False
        :type SelfInter: bool
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeOffsetShape(*args))

    def MakeOffset(self, *args):
        """
        :rtype: BRepOffset_MakeOffset

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_MakeOffset(self, *args)


    def GeneratedEdge(self, *args):
        """
        * Returns the list of edges generated from the shape <S>.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_GeneratedEdge(self, *args)


    def GetJoinType(self, *args):
        """
        * Returns offset join type.

        :rtype: GeomAbs_JoinType

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_GetJoinType(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeOffsetShape.MakeOffset = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_MakeOffset, None, BRepOffsetAPI_MakeOffsetShape)
BRepOffsetAPI_MakeOffsetShape.GeneratedEdge = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_GeneratedEdge, None, BRepOffsetAPI_MakeOffsetShape)
BRepOffsetAPI_MakeOffsetShape.GetJoinType = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_GetJoinType, None, BRepOffsetAPI_MakeOffsetShape)
BRepOffsetAPI_MakeOffsetShape._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape__kill_pointed, None, BRepOffsetAPI_MakeOffsetShape)
BRepOffsetAPI_MakeOffsetShape_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_swigregister
BRepOffsetAPI_MakeOffsetShape_swigregister(BRepOffsetAPI_MakeOffsetShape)

class BRepOffsetAPI_MakePipe(OCC.BRepPrimAPI.BRepPrimAPI_MakeSweep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a pipe by sweeping the shape Profile along the wire Spine.The angle made by the spine with the profile is maintained along the length of the pipe. Warning Spine must be G1 continuous; that is, on the connection vertex of two edges of the wire, the tangent vectors on the left and on the right must have the same direction, though not necessarily the same magnitude. Exceptions Standard_DomainError if the profile is a solid or a composite solid.

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Shape &
        :rtype: None

        * the same as previous but with setting of mode of sweep and the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0.

        :param Spine:
        :type Spine: TopoDS_Wire &
        :param Profile:
        :type Profile: TopoDS_Shape &
        :param aMode:
        :type aMode: GeomFill_Trihedron
        :param ForceApproxC1: default value is Standard_False
        :type ForceApproxC1: bool
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakePipe_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakePipe(*args))

    def Pipe(self, *args):
        """
        :rtype: BRepFill_Pipe

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_Pipe(self, *args)


    def Generated(self, *args):
        """
        :param SSpine:
        :type SSpine: TopoDS_Shape &
        :param SProfile:
        :type SProfile: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_Generated(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakePipe.Pipe = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipe_Pipe, None, BRepOffsetAPI_MakePipe)
BRepOffsetAPI_MakePipe.Generated = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipe_Generated, None, BRepOffsetAPI_MakePipe)
BRepOffsetAPI_MakePipe._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipe__kill_pointed, None, BRepOffsetAPI_MakePipe)
BRepOffsetAPI_MakePipe_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakePipe_swigregister
BRepOffsetAPI_MakePipe_swigregister(BRepOffsetAPI_MakePipe)

class BRepOffsetAPI_MakePipeShell(OCC.BRepPrimAPI.BRepPrimAPI_MakeSweep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the shell-generating framework defined by the wire Spine. Sets an sweep's mode  If no mode are setted, the mode use in MakePipe is used

        :param Spine:
        :type Spine: TopoDS_Wire &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakePipeShell(*args))

    def SetDiscreteMode(self, *args):
        """
        * Sets a Discrete trihedron to perform the sweeping

        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetDiscreteMode(self, *args)


    def SetMode(self, *args):
        """
        * Sets a Frenet or a CorrectedFrenet trihedron to perform the sweeping //!	 If IsFrenet is false, a corrected Frenet trihedron is used.

        :param IsFrenet: default value is Standard_False
        :type IsFrenet: bool
        :rtype: None

        * Sets a fixed trihedron to perform the sweeping  all sections will be parallel.

        :param Axe:
        :type Axe: gp_Ax2
        :rtype: None

        * Sets a fixed BiNormal direction to perform the -- sweeping. Angular relations beetween the section(s) and <BiNormal> will be constant

        :param BiNormal:
        :type BiNormal: gp_Dir
        :rtype: None

        * Sets support to the spine to define the BiNormal of the trihedron, like the normal to the surfaces. Warning: To be effective, Each edge of the <spine> must have an representaion on one face of<SpineSupport>

        :param SpineSupport:
        :type SpineSupport: TopoDS_Shape &
        :rtype: bool

        * Sets an auxiliary spine to define the Normal For each Point of the Spine P, an Point Q is evalued on <AuxiliarySpine> If <CurvilinearEquivalence> Q split <AuxiliarySpine> with the same length ratio than P split <Spline>. Else the plan define by P and the tangent to the <Spine> intersect <AuxiliarySpine> in Q. If <KeepContact> equals BRepFill_NoContact: The Normal is defined by the vector PQ. If <KeepContact> equals BRepFill_Contact: The Normal is defined to achieve that the sweeped section is in contact to the auxiliarySpine. The width of section is constant all along the path. In other words, the auxiliary spine lies on the swept surface, but not necessarily is a boundary of this surface. However, the auxiliary spine has to be close enough to the main spine to provide intersection with any section all along the path. If <KeepContact> equals BRepFill_ContactOnBorder: The auxiliary spine becomes a boundary of the swept surface and the width of section varies along the path. Give section to sweep. Possibilities are : //!	- Give one or sevral section - Give one profile and an homotetic law. - Automatic compute of correspondance beetween spine, and section  on the sweeped shape - correspondance beetween spine, and section on the sweeped shape defined by a vertex of the spine

        :param AuxiliarySpine:
        :type AuxiliarySpine: TopoDS_Wire &
        :param CurvilinearEquivalence:
        :type CurvilinearEquivalence: bool
        :param KeepContact: default value is BRepFill_NoContact
        :type KeepContact: BRepFill_TypeOfContact
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetMode(self, *args)


    def Add(self, *args):
        """
        * Adds the section Profile to this framework. First and last sections may be punctual, so the shape Profile may be both wire and vertex. Correspondent point on spine is computed automatically. If WithContact is true, the section is translated to be in contact with the spine. If WithCorrection is true, the section is rotated to be orthogonal to the spine?s tangent in the correspondent point. This option has no sense if the section is punctual (Profile is of type TopoDS_Vertex).

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        * Adds the section Profile to this framework. Correspondent point on the spine is given by Location. Warning: To be effective, it is not recommended to combine methods Add and SetLaw.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param Location:
        :type Location: TopoDS_Vertex &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Add(self, *args)


    def SetLaw(self, *args):
        """
        * Sets the evolution law defined by the wire Profile with its position (Location, WithContact, WithCorrection are the same options as in methods Add) and a homotetic law defined by the function L. Warning: To be effective, it is not recommended to combine methods Add and SetLaw.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param L:
        :type L: Handle_Law_Function &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        * Sets the evolution law defined by the wire Profile with its position (Location, WithContact, WithCorrection are the same options as in methods Add) and a homotetic law defined by the function L. Warning: To be effective, it is not recommended to combine methods Add and SetLaw.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :param L:
        :type L: Handle_Law_Function &
        :param Location:
        :type Location: TopoDS_Vertex &
        :param WithContact: default value is Standard_False
        :type WithContact: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetLaw(self, *args)


    def Delete(self, *args):
        """
        * Removes the section Profile from this framework.

        :param Profile:
        :type Profile: TopoDS_Shape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Delete(self, *args)


    def IsReady(self, *args):
        """
        * Returns true if this tool object is ready to build the shape, i.e. has a definition for the wire section Profile.

        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_IsReady(self, *args)


    def GetStatus(self, *args):
        """
        * Get a status, when Simulate or Build failed. It can be BRepBuilderAPI_PipeDone, BRepBuilderAPI_PipeNotDone, BRepBuilderAPI_PlaneNotIntersectGuide, BRepBuilderAPI_ImpossibleContact.

        :rtype: BRepBuilderAPI_PipeError

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_GetStatus(self, *args)


    def SetTolerance(self, *args):
        """
        * Sets the following tolerance values - 3D tolerance Tol3d - boundary tolerance BoundTol - angular tolerance TolAngular.

        :param Tol3d: default value is 1.0e-4
        :type Tol3d: float
        :param BoundTol: default value is 1.0e-4
        :type BoundTol: float
        :param TolAngular: default value is 1.0e-2
        :type TolAngular: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTolerance(self, *args)


    def SetForceApproxC1(self, *args):
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0.

        :param ForceApproxC1:
        :type ForceApproxC1: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetForceApproxC1(self, *args)


    def SetTransitionMode(self, *args):
        """
        * Sets the transition mode to manage discontinuities on the swept shape caused by fractures on the spine. The transition mode can be BRepBuilderAPI_Transformed (default value), BRepBuilderAPI_RightCorner, BRepBuilderAPI_RoundCorner: -  RepBuilderAPI_Transformed: discontinuities are treated by modification of the sweeping mode. The pipe is 'transformed' at the fractures of the spine. This mode assumes building a self-intersected shell. -  BRepBuilderAPI_RightCorner: discontinuities are treated like right corner. Two pieces of the pipe corresponding to two adjacent segments of the spine are extended and intersected at a fracture of the spine. -  BRepBuilderAPI_RoundCorner: discontinuities are treated like round corner. The corner is treated as rotation of the profile around an axis which passes through the point of the spine?s fracture. This axis is based on cross product of directions tangent to the adjacent segments of the spine at their common point. Warnings The mode BRepBuilderAPI_RightCorner provides a valid result if intersection of two pieces of the pipe (corresponding to two adjacent segments of the spine) in the neighborhood of the spine?s fracture is connected and planar. This condition can be violated if the spine is non-linear in some neighborhood of the fracture or if the profile was set with a scaling law. The last mode, BRepBuilderAPI_RoundCorner, will assuredly provide a good result only if a profile was set with option WithCorrection = True, i.e. it is strictly orthogonal to the spine.

        :param Mode: default value is BRepBuilderAPI_Transformed
        :type Mode: BRepBuilderAPI_TransitionMode
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTransitionMode(self, *args)


    def Simulate(self, *args):
        """
        * Simulates the resulting shape by calculating its cross-sections. The spine is devided by this cross-sections into (NumberOfSection - 1) equal parts, the number of cross-sections is NumberOfSection. The cross-sections are wires and they are returned in the list Result. This gives a rapid preview of the resulting shape, which will be obtained using the settings you have provided. Raises NotDone if <self> it is not Ready

        :param NumberOfSection:
        :type NumberOfSection: int
        :param Result:
        :type Result: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Simulate(self, *args)


    def MakeSolid(self, *args):
        """
        * Transforms the sweeping Shell in Solid. If a propfile is not closed returns False

        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_MakeSolid(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakePipeShell.SetDiscreteMode = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetDiscreteMode, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.SetMode = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetMode, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.Add = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Add, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.SetLaw = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetLaw, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.Delete = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Delete, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.IsReady = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_IsReady, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.GetStatus = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_GetStatus, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.SetTolerance = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTolerance, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.SetForceApproxC1 = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetForceApproxC1, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.SetTransitionMode = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTransitionMode, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.Simulate = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Simulate, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell.MakeSolid = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_MakeSolid, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell__kill_pointed, None, BRepOffsetAPI_MakePipeShell)
BRepOffsetAPI_MakePipeShell_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_swigregister
BRepOffsetAPI_MakePipeShell_swigregister(BRepOffsetAPI_MakePipeShell)

class BRepOffsetAPI_MiddlePath(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * General constructor. StartShape and EndShape may be a wire or a face

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param StartShape:
        :type StartShape: TopoDS_Shape &
        :param EndShape:
        :type EndShape: TopoDS_Shape &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MiddlePath_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MiddlePath(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MiddlePath._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MiddlePath__kill_pointed, None, BRepOffsetAPI_MiddlePath)
BRepOffsetAPI_MiddlePath_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MiddlePath_swigregister
BRepOffsetAPI_MiddlePath_swigregister(BRepOffsetAPI_MiddlePath)

class BRepOffsetAPI_NormalProjection(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework to define projection on a shape according to the normal from each point to be projected to the shape.

        :rtype: None

        * Constructs a framework to define projection onto the basis shape S according to the normal from each point to be projected from the shape added to this framework by Add. Default parameters of the algorithm: Tol3D = 1.e-04, Tol2D =sqr(tol3d) , InternalContinuity = GeomAbs_C2, MaxDegree = 14, MaxSeg = 16.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_NormalProjection(*args))

    def Init(self, *args):
        """
        * Initializes the empty constructor framework with the shape S.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Init(self, *args)


    def Add(self, *args):
        """
        * Adds the shape ToProj to the framework for calculation of the projection by Compute3d. ToProj is an edge or a wire and will be projected onto the basis shape. Exceptions Standard_ConstructionError if ToProj is not added.

        :param ToProj:
        :type ToProj: TopoDS_Shape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Add(self, *args)


    def SetParams(self, *args):
        """
        * Sets the parameters used for computation Tol3 is the requiered tolerance between the 3d projected curve and its 2d representation InternalContinuity is the order of constraints used for approximation MaxDeg and MaxSeg are the maximum degree and the maximum number of segment for BSpline resulting of an approximation.

        :param Tol3D:
        :type Tol3D: float
        :param Tol2D:
        :type Tol2D: float
        :param InternalContinuity:
        :type InternalContinuity: GeomAbs_Shape
        :param MaxDegree:
        :type MaxDegree: int
        :param MaxSeg:
        :type MaxSeg: int
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetParams(self, *args)


    def SetMaxDistance(self, *args):
        """
        * Sets the maximum distance between target shape and shape to project. If this condition is not satisfied then corresponding part of solution is discarded. if MaxDist < 0 then this method does not affect the algorithm

        :param MaxDist:
        :type MaxDist: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetMaxDistance(self, *args)


    def SetLimit(self, *args):
        """
        * Manage limitation of projected edges.

        :param FaceBoundaries: default value is Standard_True
        :type FaceBoundaries: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetLimit(self, *args)


    def Compute3d(self, *args):
        """
        * Returns true if a 3D curve is computed. If not, false is returned and an initial 3D curve is kept to build the resulting edges.

        :param With3d: default value is Standard_True
        :type With3d: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Compute3d(self, *args)


    def Projection(self, *args):
        """
        * Performs the projection. The construction of the result is performed by Build. Exceptions StdFail_NotDone if the projection was not performed.

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Projection(self, *args)


    def Couple(self, *args):
        """
        * Returns the initial face corresponding to the projected edge E. Exceptions StdFail_NotDone if no face was found. Standard_NoSuchObject if if a face corresponding to E has already been found.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Couple(self, *args)


    def Ancestor(self, *args):
        """
        * Returns the initial edge corresponding to the edge E resulting from the computation of the projection. Exceptions StdFail_NotDone if no edge was found. Standard_NoSuchObject if an edge corresponding to E has already been found.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Ancestor(self, *args)


    def BuildWire(self, *args):
        """
        * build the result as a list of wire if possible in -- a first returns a wire only if there is only a wire.

        :param Liste:
        :type Liste: TopTools_ListOfShape &
        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_BuildWire(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_NormalProjection.Init = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Init, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.Add = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Add, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.SetParams = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetParams, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.SetMaxDistance = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetMaxDistance, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.SetLimit = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetLimit, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.Compute3d = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Compute3d, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.Projection = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Projection, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.Couple = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Couple, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.Ancestor = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Ancestor, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection.BuildWire = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_BuildWire, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_NormalProjection__kill_pointed, None, BRepOffsetAPI_NormalProjection)
BRepOffsetAPI_NormalProjection_swigregister = _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_swigregister
BRepOffsetAPI_NormalProjection_swigregister(BRepOffsetAPI_NormalProjection)

class BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TColStd_SequenceOfReal &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal(*args))

    def Value(self, *args):
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal self)"""
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal self) -> Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal"""
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal.Value = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_Value, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal__kill_pointed, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal.GetHandle = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_GetHandle, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister = _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)

class Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swiginit(self, _BRepOffsetAPI.new_Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal(*args))
    DownCast = staticmethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal.Nullify = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_Nullify, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal.IsNull = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_IsNull, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal.GetObject = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_GetObject, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal._kill_pointed = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal__kill_pointed, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister = _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_swigregister(Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal)

def Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_DownCast(AnObject):
    return _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_DownCast(AnObject)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_DownCast = _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfReal_DownCast

class BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TopTools_SequenceOfShape &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape(*args))

    def Value(self, *args):
        """
        :rtype: TopTools_SequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape self)"""
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape self) -> Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape"""
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape.Value = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_Value, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape__kill_pointed, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape.GetHandle = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_GetHandle, None, BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister = _BRepOffsetAPI.BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister
BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister(BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)

class Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swiginit(self, _BRepOffsetAPI.new_Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape(*args))
    DownCast = staticmethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape.Nullify = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_Nullify, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape.IsNull = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_IsNull, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape.GetObject = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_GetObject, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape._kill_pointed = new_instancemethod(_BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape__kill_pointed, None, Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister = _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_swigregister(Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape)

def Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_DownCast(AnObject):
    return _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_DownCast(AnObject)
Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_DownCast = _BRepOffsetAPI.Handle_BRepOffsetAPI_SequenceNodeOfSequenceOfSequenceOfShape_DownCast

class BRepOffsetAPI_SequenceOfSequenceOfReal(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceOfSequenceOfReal(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: BRepOffsetAPI_SequenceOfSequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: BRepOffsetAPI_SequenceOfSequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: TColStd_SequenceOfReal &
        :rtype: None

        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: TColStd_SequenceOfReal &
        :rtype: None

        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColStd_SequenceOfReal &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TColStd_SequenceOfReal &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepOffsetAPI_SequenceOfSequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfReal

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_SequenceOfSequenceOfReal.Clear = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Clear, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Assign = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Assign, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Set = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Set, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Append = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Append, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Prepend = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Prepend, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.InsertBefore = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertBefore, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.InsertAfter = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertAfter, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.First = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_First, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Last = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Last, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Split = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Split, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Value = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Value, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.SetValue = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_SetValue, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.ChangeValue = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_ChangeValue, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal.Remove = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Remove, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal__kill_pointed, None, BRepOffsetAPI_SequenceOfSequenceOfReal)
BRepOffsetAPI_SequenceOfSequenceOfReal_swigregister = _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_swigregister
BRepOffsetAPI_SequenceOfSequenceOfReal_swigregister(BRepOffsetAPI_SequenceOfSequenceOfReal)

class BRepOffsetAPI_SequenceOfSequenceOfShape(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceOfSequenceOfShape(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: BRepOffsetAPI_SequenceOfSequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: BRepOffsetAPI_SequenceOfSequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: TopTools_SequenceOfShape &
        :rtype: None

        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: TopTools_SequenceOfShape &
        :rtype: None

        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TopTools_SequenceOfShape &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TopTools_SequenceOfShape &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: TopTools_SequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_First(self, *args)


    def Last(self, *args):
        """
        :rtype: TopTools_SequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepOffsetAPI_SequenceOfSequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TopTools_SequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TopTools_SequenceOfShape &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TopTools_SequenceOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_SequenceOfSequenceOfShape.Clear = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Clear, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Assign = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Assign, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Set = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Set, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Append = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Append, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Prepend = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Prepend, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.InsertBefore = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertBefore, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.InsertAfter = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertAfter, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.First = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_First, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Last = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Last, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Split = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Split, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Value = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Value, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.SetValue = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_SetValue, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.ChangeValue = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_ChangeValue, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape.Remove = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Remove, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape__kill_pointed, None, BRepOffsetAPI_SequenceOfSequenceOfShape)
BRepOffsetAPI_SequenceOfSequenceOfShape_swigregister = _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_swigregister
BRepOffsetAPI_SequenceOfSequenceOfShape_swigregister(BRepOffsetAPI_SequenceOfSequenceOfShape)

class BRepOffsetAPI_ThruSections(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes an algorithm for building a shell or a solid passing through a set of sections, where: - isSolid is set to true if the construction algorithm is required to build a solid or to false if it is required to build a shell (the default value), - ruled is set to true if the faces generated between the edges of two consecutive wires are ruled surfaces or to false (the default value) if they are smoothed out by approximation, - pres3d defines the precision criterion used by the approximation algorithm; the default value is 1.0e-6. Use AddWire and AddVertex to define the successive sections of the shell or solid to be built.

        :param isSolid: default value is Standard_False
        :type isSolid: bool
        :param ruled: default value is Standard_False
        :type ruled: bool
        :param pres3d: default value is 1.0e-06
        :type pres3d: float
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_ThruSections_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_ThruSections(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for building a shell or a solid passing through a set of sections, where: - isSolid is set to true if this construction algorithm is required to build a solid or to false if it is required to build a shell. false is the default value; - ruled is set to true if the faces generated between the edges of two consecutive wires are ruled surfaces or to false (the default value) if they are smoothed out by approximation, - pres3d defines the precision criterion used by the approximation algorithm; the default value is 1.0e-6. Use AddWire and AddVertex to define the successive sections of the shell or solid to be built.

        :param isSolid: default value is Standard_False
        :type isSolid: bool
        :param ruled: default value is Standard_False
        :type ruled: bool
        :param pres3d: default value is 1.0e-06
        :type pres3d: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Init(self, *args)


    def AddWire(self, *args):
        """
        * Adds the wire wire to the set of sections through which the shell or solid is built. Use the Build function to construct the shape.

        :param wire:
        :type wire: TopoDS_Wire &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddWire(self, *args)


    def AddVertex(self, *args):
        """
        * Adds the vertex Vertex (punctual section) to the set of sections through which the shell or solid is built. A vertex may be added to the set of sections only as first or last section. At least one wire must be added to the set of sections by the method AddWire. Use the Build function to construct the shape.

        :param aVertex:
        :type aVertex: TopoDS_Vertex &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddVertex(self, *args)


    def CheckCompatibility(self, *args):
        """
        :param check: default value is Standard_True
        :type check: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_CheckCompatibility(self, *args)


    def SetSmoothing(self, *args):
        """
        * Define the approximation algorithm

        :param UseSmoothing:
        :type UseSmoothing: bool
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetSmoothing(self, *args)


    def SetParType(self, *args):
        """
        * Define the type of parametrization used in the approximation

        :param ParType:
        :type ParType: Approx_ParametrizationType
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetParType(self, *args)


    def SetContinuity(self, *args):
        """
        * Define the Continuity used in the approximation

        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetContinuity(self, *args)


    def SetCriteriumWeight(self, *args):
        """
        * define the Weights associed to the criterium used in the optimization. if Wi <= 0

        :param W1:
        :type W1: float
        :param W2:
        :type W2: float
        :param W3:
        :type W3: float
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetCriteriumWeight(self, *args)


    def SetMaxDegree(self, *args):
        """
        * Define the maximal U degree of result surface

        :param MaxDeg:
        :type MaxDeg: int
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetMaxDegree(self, *args)


    def ParType(self, *args):
        """
        * returns the type of parametrization used in the approximation

        :rtype: Approx_ParametrizationType

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_ParType(self, *args)


    def Continuity(self, *args):
        """
        * returns the Continuity used in the approximation

        :rtype: GeomAbs_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Continuity(self, *args)


    def MaxDegree(self, *args):
        """
        * returns the maximal U degree of result surface

        :rtype: int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_MaxDegree(self, *args)


    def UseSmoothing(self, *args):
        """
        * Define the approximation algorithm

        :rtype: bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_UseSmoothing(self, *args)


    def CriteriumWeight(self, *args):
        """
        * returns the Weights associed to the criterium used in the optimization.

        :param W1:
        :type W1: float &
        :param W2:
        :type W2: float &
        :param W3:
        :type W3: float &
        :rtype: None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_CriteriumWeight(self, *args)


    def FirstShape(self, *args):
        """
        * Returns the TopoDS Shape of the bottom of the loft if solid

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        * Returns the TopoDS Shape of the top of the loft if solid

        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_LastShape(self, *args)


    def GeneratedFace(self, *args):
        """
        * if Ruled  Returns the Face generated by each edge  except the last wire if smoothed  Returns the Face generated by each edge of the first wire

        :param Edge:
        :type Edge: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_GeneratedFace(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_ThruSections.Init = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_Init, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.AddWire = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddWire, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.AddVertex = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddVertex, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.CheckCompatibility = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_CheckCompatibility, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.SetSmoothing = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetSmoothing, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.SetParType = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetParType, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.SetContinuity = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetContinuity, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.SetCriteriumWeight = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetCriteriumWeight, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.SetMaxDegree = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetMaxDegree, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.ParType = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_ParType, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.Continuity = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_Continuity, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.MaxDegree = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_MaxDegree, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.UseSmoothing = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_UseSmoothing, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.CriteriumWeight = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_CriteriumWeight, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.FirstShape = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_FirstShape, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.LastShape = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_LastShape, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections.GeneratedFace = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections_GeneratedFace, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_ThruSections__kill_pointed, None, BRepOffsetAPI_ThruSections)
BRepOffsetAPI_ThruSections_swigregister = _BRepOffsetAPI.BRepOffsetAPI_ThruSections_swigregister
BRepOffsetAPI_ThruSections_swigregister(BRepOffsetAPI_ThruSections)

class BRepOffsetAPI_MakeThickSolid(BRepOffsetAPI_MakeOffsetShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Constructs a hollowed solid from the solid S by removing the set of faces ClosingFaces from S, where: Offset defines the thickness of the walls. Its sign indicates which side of the surface of the solid the hollowed shape is built on; - Tol defines the tolerance criterion for coincidence in generated shapes; - Mode defines the construction type of parallels applied to free edges of shape S. Currently, only one construction type is implemented, namely the one where the free edges do not generate parallels; this corresponds to the default value BRepOffset_Skin; Intersection specifies how the algorithm must work in order to limit the parallels to two adjacent shapes: - if Intersection is false (default value), the intersection is calculated with the parallels to the two adjacent shapes, - if Intersection is true, the intersection is calculated by taking account of all parallels generated; this computation method is more general as it avoids self-intersections generated in the offset shape from features of small dimensions on shape S, however this method has not been completely implemented and therefore is not recommended for use; - SelfInter tells the algorithm whether a computation to eliminate self-intersections needs to be applied to the resulting shape. However, as this functionality is not yet implemented, you should use the default value (false); - Join defines how to fill the holes that may appear between parallels to the two adjacent faces. It may take values GeomAbs_Arc or GeomAbs_Intersection: - if Join is equal to GeomAbs_Arc, then pipes are generated between two free edges of two adjacent parallels, and spheres are generated on 'images' of vertices; it is the default value, - if Join is equal to GeomAbs_Intersection, then the parallels to the two adjacent faces are enlarged and intersected, so that there are no free edges on parallels to faces. Warnings Since the algorithm of MakeThickSolid is based on MakeOffsetShape algorithm, the warnings are the same as for MakeOffsetShape.

        :param S:
        :type S: TopoDS_Shape &
        :param ClosingFaces:
        :type ClosingFaces: TopTools_ListOfShape &
        :param Offset:
        :type Offset: float
        :param Tol:
        :type Tol: float
        :param Mode: default value is BRepOffset_Skin
        :type Mode: BRepOffset_Mode
        :param Intersection: default value is Standard_False
        :type Intersection: bool
        :param SelfInter: default value is Standard_False
        :type SelfInter: bool
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :rtype: None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeThickSolid(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepOffsetAPI_MakeThickSolid._kill_pointed = new_instancemethod(_BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid__kill_pointed, None, BRepOffsetAPI_MakeThickSolid)
BRepOffsetAPI_MakeThickSolid_swigregister = _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_swigregister
BRepOffsetAPI_MakeThickSolid_swigregister(BRepOffsetAPI_MakeThickSolid)



