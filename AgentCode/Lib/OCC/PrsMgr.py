# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _PrsMgr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PrsMgr', [dirname(__file__)])
        except ImportError:
            import _PrsMgr
            return _PrsMgr
        if fp is not None:
            try:
                _mod = imp.load_module('_PrsMgr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PrsMgr = swig_import_helper()
    del swig_import_helper
else:
    import _PrsMgr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrsMgr.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_PrsMgr.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_PrsMgr.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_PrsMgr.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_PrsMgr.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_PrsMgr.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_PrsMgr.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_PrsMgr.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_PrsMgr.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_PrsMgr.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_PrsMgr.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_PrsMgr.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_PrsMgr.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_PrsMgr.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_PrsMgr.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_PrsMgr.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_PrsMgr.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _PrsMgr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.Graphic3d
import OCC.Aspect
import OCC.Quantity
import OCC.TCollection
import OCC.TColStd
import OCC.TShort
import OCC.TColQuantity
import OCC.gp
import OCC.Image
import OCC.OSD
import OCC.TopLoc
import OCC.Prs3d
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.HLRAlgo
import OCC.TopAbs
import OCC.TopoDS
import OCC.Bnd
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.NCollection
import OCC.V3d
import OCC.Visual3d

_PrsMgr.PrsMgr_KOP_2D_swigconstant(_PrsMgr)
PrsMgr_KOP_2D = _PrsMgr.PrsMgr_KOP_2D

_PrsMgr.PrsMgr_KOP_3D_swigconstant(_PrsMgr)
PrsMgr_KOP_3D = _PrsMgr.PrsMgr_KOP_3D

_PrsMgr.PrsMgr_TOP_AllView_swigconstant(_PrsMgr)
PrsMgr_TOP_AllView = _PrsMgr.PrsMgr_TOP_AllView

_PrsMgr.PrsMgr_TOP_ProjectorDependant_swigconstant(_PrsMgr)
PrsMgr_TOP_ProjectorDependant = _PrsMgr.PrsMgr_TOP_ProjectorDependant
class PrsMgr_ModedPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aPresentation:
        :type aPresentation: Handle_PrsMgr_Presentation &
        :param aMode:
        :type aMode: int
        :rtype: None

        """
        _PrsMgr.PrsMgr_ModedPresentation_swiginit(self, _PrsMgr.new_PrsMgr_ModedPresentation(*args))

    def Presentation(self, *args):
        """
        :rtype: Handle_PrsMgr_Presentation

        """
        return _PrsMgr.PrsMgr_ModedPresentation_Presentation(self, *args)


    def Mode(self, *args):
        """
        :rtype: int

        """
        return _PrsMgr.PrsMgr_ModedPresentation_Mode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_ModedPresentation.Presentation = new_instancemethod(_PrsMgr.PrsMgr_ModedPresentation_Presentation, None, PrsMgr_ModedPresentation)
PrsMgr_ModedPresentation.Mode = new_instancemethod(_PrsMgr.PrsMgr_ModedPresentation_Mode, None, PrsMgr_ModedPresentation)
PrsMgr_ModedPresentation._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_ModedPresentation__kill_pointed, None, PrsMgr_ModedPresentation)
PrsMgr_ModedPresentation_swigregister = _PrsMgr.PrsMgr_ModedPresentation_swigregister
PrsMgr_ModedPresentation_swigregister(PrsMgr_ModedPresentation)

class PrsMgr_PresentableObject(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TypeOfPresentation3d(self, *args):
        """
        * Returns information on whether the object accepts display in HLR mode or not.

        :rtype: PrsMgr_TypeOfPresentation3d

        """
        return _PrsMgr.PrsMgr_PresentableObject_TypeOfPresentation3d(self, *args)


    def SetTransformPersistence(self, *args):
        """
        * Sets up Transform Persistence Mode for this object. This function used to lock in object position, rotation and / or zooming relative to camera position. Object will be drawn in the origin setted by APoint parameter (except Graphic3d_TMF_TriedronPers flag - see description later). aFlag should be: - Graphic3d_TMF_None - no persistence attributes (reset); - Graphic3d_TMF_PanPers - object doesn't move; - Graphic3d_TMF_ZoomPers - object doesn't resize; - Graphic3d_TMF_RotatePers - object doesn't rotate; - Graphic3d_TMF_FullPers - pan, zoom and rotate transform persistence; - Graphic3d_TMF_TriedronPers - object behaves like trihedron; - combination (Graphic3d_TMF_PanPers | Graphic3d_TMF_ZoomPers); - combination (Graphic3d_TMF_PanPers | Graphic3d_TMF_RotatePers); - combination (Graphic3d_TMF_ZoomPers | Graphic3d_TMF_RotatePers). If Graphic3d_TMF_TriedronPers persistence mode selected APoint coordinates X and Y means: - X = 0.0, Y = 0.0 - center of view window; - X > 0.0, Y > 0.0 - right upper corner of view window; - X > 0.0, Y < 0.0 - right lower corner of view window; - X < 0.0, Y > 0.0 - left upper corner of view window; - X < 0.0, Y < 0.0 - left lower corner of view window. And Z coordinate defines the gap from border of view window (except center position).

        :param aFlag:
        :type aFlag: Graphic3d_TransModeFlags &
        :param APoint:
        :type APoint: gp_Pnt
        :rtype: void

        * Calls previous method with point (0,0,0)

        :param aFlag:
        :type aFlag: Graphic3d_TransModeFlags &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetTransformPersistence(self, *args)


    def GetTransformPersistenceMode(self, *args):
        """
        * Gets Transform Persistence Mode for this object

        :rtype: Graphic3d_TransModeFlags

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetTransformPersistenceMode(self, *args)


    def GetTransformPersistencePoint(self, *args):
        """
        * Gets point of transform persistence for this object

        :rtype: gp_Pnt

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetTransformPersistencePoint(self, *args)


    def SetTypeOfPresentation(self, *args):
        """
        :param aType:
        :type aType: PrsMgr_TypeOfPresentation3d
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetTypeOfPresentation(self, *args)


    def SetToUpdate(self, *args):
        """
        * flags the Prs of mode <AMode> to be Updated. the Update will be done when needed.

        :param aMode:
        :type aMode: int
        :rtype: None

        * flags all the Presentations to be Updated.

        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetToUpdate(self, *args)


    def ToBeUpdated(self, *args):
        """
        * gives the list of modes which are flagged 'to be updated'.

        :param ListOfMode:
        :type ListOfMode: TColStd_ListOfInteger &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentableObject_ToBeUpdated(self, *args)


    def SetLocation(self, *args):
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetLocation(self, *args)


    def HasLocation(self, *args):
        """
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentableObject_HasLocation(self, *args)


    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _PrsMgr.PrsMgr_PresentableObject_Location(self, *args)


    def ResetLocation(self, *args):
        """
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_ResetLocation(self, *args)


    def UpdateLocation(self, *args):
        """
        :rtype: void

        :param P:
        :type P: Handle_Prs3d_Presentation &
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_UpdateLocation(self, *args)


    def SetZLayer(self, *args):
        """
        * Set Z layer ID and update all presentations of the presentable object. The layer can be set only for displayed object. If all object presentations are removed, the layer ID will be set to default value when computing presentation. The layers mechanism allows drawing objects in higher layers in overlay of objects in lower layers.

        :param thePrsMgr:
        :type thePrsMgr: Handle_PrsMgr_PresentationManager &
        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        * Get ID of Z layer. If no presentations of object is displayed, and layer ID is unavailable, the -1 value is returned.

        :param thePrsMgr:
        :type thePrsMgr: Handle_PrsMgr_PresentationManager &
        :rtype: int

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetZLayer(self, *args)


    def AddClipPlane(self, *args):
        """
        * Adds clip plane for graphical clipping for all display mode presentations. The composition of clip planes truncates the rendering space to convex volume. Please be aware that number of supported clip plane is limited. The planes which exceed the limit are ignored. Besides of this, some planes can be already set in view where the object is shown: the number of these planes should be substracted from limit to predict the maximum possible number of object clipping planes. @param thePlane [in] the clip plane to be appended to map of clip planes.

        :param thePlane:
        :type thePlane: Graphic3d_ClipPlane_Handle &
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_AddClipPlane(self, *args)


    def RemoveClipPlane(self, *args):
        """
        * Removes previously added clip plane. @param thePlane [in] the clip plane to be removed from map of clip planes.

        :param thePlane:
        :type thePlane: Graphic3d_ClipPlane_Handle &
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_RemoveClipPlane(self, *args)


    def SetClipPlanes(self, *args):
        """
        * Set clip planes for graphical clipping for all display mode presentations. The composition of clip planes truncates the rendering space to convex volume. Please be aware that number of supported clip plane is limited. The planes which exceed the limit are ignored. Besides of this, some planes can be already set in view where the object is shown: the number of these planes should be substracted from limit to predict the maximum possible number of object clipping planes.

        :param thePlanes:
        :type thePlanes: Graphic3d_SequenceOfHClipPlane &
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentableObject_SetClipPlanes(self, *args)


    def GetClipPlanes(self, *args):
        """
        * Get clip planes. returns set of previously added clip planes for all display mode presentations.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _PrsMgr.PrsMgr_PresentableObject_GetClipPlanes(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_PresentableObject self)"""
        return _PrsMgr.PrsMgr_PresentableObject__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_PresentableObject self) -> Handle_PrsMgr_PresentableObject"""
        return _PrsMgr.PrsMgr_PresentableObject_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_PresentableObject.TypeOfPresentation3d = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_TypeOfPresentation3d, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetTransformPersistence = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetTransformPersistence, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.GetTransformPersistenceMode = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_GetTransformPersistenceMode, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.GetTransformPersistencePoint = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_GetTransformPersistencePoint, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetTypeOfPresentation = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetTypeOfPresentation, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetToUpdate = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetToUpdate, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.ToBeUpdated = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_ToBeUpdated, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetLocation = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetLocation, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.HasLocation = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_HasLocation, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.Location = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_Location, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.ResetLocation = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_ResetLocation, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.UpdateLocation = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_UpdateLocation, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetZLayer, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.GetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_GetZLayer, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.AddClipPlane = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_AddClipPlane, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.RemoveClipPlane = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_RemoveClipPlane, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.SetClipPlanes = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_SetClipPlanes, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.GetClipPlanes = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_GetClipPlanes, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject__kill_pointed, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_PresentableObject_GetHandle, None, PrsMgr_PresentableObject)
PrsMgr_PresentableObject_swigregister = _PrsMgr.PrsMgr_PresentableObject_swigregister
PrsMgr_PresentableObject_swigregister(PrsMgr_PresentableObject)

class Handle_PrsMgr_PresentableObject(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_PresentableObject_swiginit(self, _PrsMgr.new_Handle_PrsMgr_PresentableObject(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentableObject_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_PresentableObject.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentableObject_Nullify, None, Handle_PrsMgr_PresentableObject)
Handle_PrsMgr_PresentableObject.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentableObject_IsNull, None, Handle_PrsMgr_PresentableObject)
Handle_PrsMgr_PresentableObject.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentableObject_GetObject, None, Handle_PrsMgr_PresentableObject)
Handle_PrsMgr_PresentableObject._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentableObject__kill_pointed, None, Handle_PrsMgr_PresentableObject)
Handle_PrsMgr_PresentableObject_swigregister = _PrsMgr.Handle_PrsMgr_PresentableObject_swigregister
Handle_PrsMgr_PresentableObject_swigregister(Handle_PrsMgr_PresentableObject)

def Handle_PrsMgr_PresentableObject_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_PresentableObject_DownCast(AnObject)
Handle_PrsMgr_PresentableObject_DownCast = _PrsMgr.Handle_PrsMgr_PresentableObject_DownCast

class PrsMgr_Presentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def KindOfPresentation(self, *args):
        """
        * 2D or 3D

        :rtype: PrsMgr_KindOfPrs

        """
        return _PrsMgr.PrsMgr_Presentation_KindOfPresentation(self, *args)


    def Destroy(self, *args):
        """
        * Destructor

        :rtype: void

        """
        return _PrsMgr.PrsMgr_Presentation_Destroy(self, *args)


    def PresentationManager(self, *args):
        """
        * returns the PresentationManager in which the presentation has been created.

        :rtype: Handle_PrsMgr_PresentationManager

        """
        return _PrsMgr.PrsMgr_Presentation_PresentationManager(self, *args)


    def SetUpdateStatus(self, *args):
        """
        :param aStat:
        :type aStat: bool
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentation_SetUpdateStatus(self, *args)


    def MustBeUpdated(self, *args):
        """
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_Presentation_MustBeUpdated(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_Presentation self)"""
        return _PrsMgr.PrsMgr_Presentation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_Presentation self) -> Handle_PrsMgr_Presentation"""
        return _PrsMgr.PrsMgr_Presentation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_Presentation.KindOfPresentation = new_instancemethod(_PrsMgr.PrsMgr_Presentation_KindOfPresentation, None, PrsMgr_Presentation)
PrsMgr_Presentation.Destroy = new_instancemethod(_PrsMgr.PrsMgr_Presentation_Destroy, None, PrsMgr_Presentation)
PrsMgr_Presentation.PresentationManager = new_instancemethod(_PrsMgr.PrsMgr_Presentation_PresentationManager, None, PrsMgr_Presentation)
PrsMgr_Presentation.SetUpdateStatus = new_instancemethod(_PrsMgr.PrsMgr_Presentation_SetUpdateStatus, None, PrsMgr_Presentation)
PrsMgr_Presentation.MustBeUpdated = new_instancemethod(_PrsMgr.PrsMgr_Presentation_MustBeUpdated, None, PrsMgr_Presentation)
PrsMgr_Presentation._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_Presentation__kill_pointed, None, PrsMgr_Presentation)
PrsMgr_Presentation.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_Presentation_GetHandle, None, PrsMgr_Presentation)
PrsMgr_Presentation_swigregister = _PrsMgr.PrsMgr_Presentation_swigregister
PrsMgr_Presentation_swigregister(PrsMgr_Presentation)

class Handle_PrsMgr_Presentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_Presentation_swiginit(self, _PrsMgr.new_Handle_PrsMgr_Presentation(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Presentation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_Presentation.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation_Nullify, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation_IsNull, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation_GetObject, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation__kill_pointed, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation_swigregister = _PrsMgr.Handle_PrsMgr_Presentation_swigregister
Handle_PrsMgr_Presentation_swigregister(Handle_PrsMgr_Presentation)

def Handle_PrsMgr_Presentation_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_Presentation_DownCast(AnObject)
Handle_PrsMgr_Presentation_DownCast = _PrsMgr.Handle_PrsMgr_Presentation_DownCast

class PrsMgr_PresentationManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Is3D(self, *args):
        """
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_Is3D(self, *args)


    def Display(self, *args):
        """
        * Displays the presentation of the object in the given Presentation manager with the given mode. The mode should be enumerated by the object which inherits PresentableObject.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Display(self, *args)


    def Erase(self, *args):
        """
        * erases the presentation of the object in the given Presentation manager with the given mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Erase(self, *args)


    def Clear(self, *args):
        """
        * Clears the presentation of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentationManager_Clear(self, *args)


    def SetVisibility(self, *args):
        """
        * Sets the visibility of presentable object.

        :param thePresentableObject:
        :type thePresentableObject: Handle_PrsMgr_PresentableObject &
        :param theMode:
        :type theMode: int
        :param theValue:
        :type theValue: bool
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetVisibility(self, *args)


    def Highlight(self, *args):
        """
        * Highlights the presentation of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Highlight(self, *args)


    def Unhighlight(self, *args):
        """
        * Removes highlighting from the presentation of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Unhighlight(self, *args)


    def SetDisplayPriority(self, *args):
        """
        * Sets the display priority aNewPrior of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param amode:
        :type amode: int
        :param aNewPrior:
        :type aNewPrior: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetDisplayPriority(self, *args)


    def DisplayPriority(self, *args):
        """
        * Returns the display priority of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param amode:
        :type amode: int
        :rtype: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_DisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        * Set Z layer ID for all presentations of the object.

        :param thePresentableObject:
        :type thePresentableObject: Handle_PrsMgr_PresentableObject &
        :param theLayerId:
        :type theLayerId: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        * Get Z layer ID assigned to all presentations of the object. Method returns -1 value if object has no presentations and is impossible to get layer index.

        :param thePresentableObject:
        :type thePresentableObject: Handle_PrsMgr_PresentableObject &
        :rtype: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_GetZLayer(self, *args)


    def IsDisplayed(self, *args):
        """
        * Returns true if the presentation of the presentable object aPresentableObject in this framework with the display mode aMode is displayed.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsDisplayed(self, *args)


    def IsHighlighted(self, *args):
        """
        * Returns true if the presentation of the presentable object aPresentableObject in this framework with the display mode aMode is highlighted.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsHighlighted(self, *args)


    def Update(self, *args):
        """
        * Updates the presentation of the presentable object aPresentableObject in this framework with the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Update(self, *args)


    def BeginDraw(self, *args):
        """
        * initializes the list of Prs to be displayed in transient mode

        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentationManager_BeginDraw(self, *args)


    def Add(self, *args):
        """
        * Performs an iteration of the transient objects to look for the presentable objects with the display mode aMode. Appends the presentation of the presentable object aPresentableObject with the mode aMode to the list of objects in immediate mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Add(self, *args)


    def Remove(self, *args):
        """
        * Performs an iteration of the transient objects to look for the presentable objects with the display mode aMode. Removes the presentation of the presentable object aPresentableObject with the mode aMode from the list of objects in immediate mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Remove(self, *args)


    def EndDraw(self, *args):
        """
        * Allows rapid drawing of the view aView by avoiding an update of the whole background. If DoubleBuffer is true, the background is drawn.

        :param aView:
        :type aView: Handle_V3d_View &
        :param DoubleBuffer: default value is Standard_False
        :type DoubleBuffer: bool
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentationManager_EndDraw(self, *args)


    def IsImmediateModeOn(self, *args):
        """
        * Returns true if immediate (transient) mode is on.

        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsImmediateModeOn(self, *args)


    def HasPresentation(self, *args):
        """
        * Returns true if there is a presentation of the presentable object aPresentableObject in this framework, aPresentableObject having the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_HasPresentation(self, *args)


    def Presentation(self, *args):
        """
        * Returns the presentation Presentation of the presentable object aPresentableObject in this framework. aPresentableObject has the display mode aMode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: Handle_PrsMgr_Presentation

        """
        return _PrsMgr.PrsMgr_PresentationManager_Presentation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_PresentationManager self)"""
        return _PrsMgr.PrsMgr_PresentationManager__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_PresentationManager self) -> Handle_PrsMgr_PresentationManager"""
        return _PrsMgr.PrsMgr_PresentationManager_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_PresentationManager.Is3D = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Is3D, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Display = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Display, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Erase = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Erase, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Clear = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Clear, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetVisibility = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetVisibility, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Highlight = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Highlight, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Unhighlight = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Unhighlight, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetDisplayPriority = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetDisplayPriority, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.DisplayPriority = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_DisplayPriority, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetZLayer, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.GetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_GetZLayer, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsDisplayed = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsDisplayed, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsHighlighted = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsHighlighted, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Update = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Update, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.BeginDraw = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_BeginDraw, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Add = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Add, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Remove = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Remove, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.EndDraw = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_EndDraw, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsImmediateModeOn = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsImmediateModeOn, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.HasPresentation = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_HasPresentation, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Presentation = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Presentation, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager__kill_pointed, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_GetHandle, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager_swigregister = _PrsMgr.PrsMgr_PresentationManager_swigregister
PrsMgr_PresentationManager_swigregister(PrsMgr_PresentationManager)

class Handle_PrsMgr_PresentationManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_PresentationManager_swiginit(self, _PrsMgr.new_Handle_PrsMgr_PresentationManager(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentationManager_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_PresentationManager.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager_Nullify, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager_IsNull, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager_GetObject, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager__kill_pointed, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager_swigregister = _PrsMgr.Handle_PrsMgr_PresentationManager_swigregister
Handle_PrsMgr_PresentationManager_swigregister(Handle_PrsMgr_PresentationManager)

def Handle_PrsMgr_PresentationManager_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast(AnObject)
Handle_PrsMgr_PresentationManager_DownCast = _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast

class PrsMgr_Presentations(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _PrsMgr.PrsMgr_Presentations_swiginit(self, _PrsMgr.new_PrsMgr_Presentations(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: PrsMgr_Presentations &
        :rtype: PrsMgr_Presentations

        """
        return _PrsMgr.PrsMgr_Presentations_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: PrsMgr_Presentations &
        :rtype: PrsMgr_Presentations

        """
        return _PrsMgr.PrsMgr_Presentations_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_First(self, *args)


    def Last(self, *args):
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: PrsMgr_ModedPresentation &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_Presentations.Clear = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Clear, None, PrsMgr_Presentations)
PrsMgr_Presentations.Assign = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Assign, None, PrsMgr_Presentations)
PrsMgr_Presentations.Set = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Set, None, PrsMgr_Presentations)
PrsMgr_Presentations.Append = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Append, None, PrsMgr_Presentations)
PrsMgr_Presentations.Prepend = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Prepend, None, PrsMgr_Presentations)
PrsMgr_Presentations.InsertBefore = new_instancemethod(_PrsMgr.PrsMgr_Presentations_InsertBefore, None, PrsMgr_Presentations)
PrsMgr_Presentations.InsertAfter = new_instancemethod(_PrsMgr.PrsMgr_Presentations_InsertAfter, None, PrsMgr_Presentations)
PrsMgr_Presentations.First = new_instancemethod(_PrsMgr.PrsMgr_Presentations_First, None, PrsMgr_Presentations)
PrsMgr_Presentations.Last = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Last, None, PrsMgr_Presentations)
PrsMgr_Presentations.Split = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Split, None, PrsMgr_Presentations)
PrsMgr_Presentations.Value = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Value, None, PrsMgr_Presentations)
PrsMgr_Presentations.SetValue = new_instancemethod(_PrsMgr.PrsMgr_Presentations_SetValue, None, PrsMgr_Presentations)
PrsMgr_Presentations.ChangeValue = new_instancemethod(_PrsMgr.PrsMgr_Presentations_ChangeValue, None, PrsMgr_Presentations)
PrsMgr_Presentations.Remove = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Remove, None, PrsMgr_Presentations)
PrsMgr_Presentations._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_Presentations__kill_pointed, None, PrsMgr_Presentations)
PrsMgr_Presentations_swigregister = _PrsMgr.PrsMgr_Presentations_swigregister
PrsMgr_Presentations_swigregister(PrsMgr_Presentations)

class PrsMgr_Prs(OCC.Prs3d.Prs3d_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aStructureManager:
        :type aStructureManager: Handle_Graphic3d_StructureManager &
        :param aPresentation:
        :type aPresentation: PrsMgr_Presentation3dPointer &
        :param aTypeOfPresentation3d:
        :type aTypeOfPresentation3d: PrsMgr_TypeOfPresentation3d
        :rtype: None

        """
        _PrsMgr.PrsMgr_Prs_swiginit(self, _PrsMgr.new_PrsMgr_Prs(*args))

    def Compute(self, *args):
        """
        :rtype: None

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: Handle_Graphic3d_Structure

        * the 'degenerated' Structure is displayed with a transformation defined by <AMatrix> which is not a Pure Translation. We have to take in account this Transformation in the computation of hidden line removal... returns a filled Graphic Structure.

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: Handle_Graphic3d_Structure

        * No need to return a structure, just to fill <ComputedStruct> ....

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param ComputedStruct:
        :type ComputedStruct: Handle_Graphic3d_Structure &
        :rtype: None

        * No Need to return a Structure, just to Fill <aStructure>. The Trsf has to be taken in account in the computation (Rotation Part....)

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Prs_Compute(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_Prs self)"""
        return _PrsMgr.PrsMgr_Prs__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_Prs self) -> Handle_PrsMgr_Prs"""
        return _PrsMgr.PrsMgr_Prs_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_Prs.Compute = new_instancemethod(_PrsMgr.PrsMgr_Prs_Compute, None, PrsMgr_Prs)
PrsMgr_Prs._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_Prs__kill_pointed, None, PrsMgr_Prs)
PrsMgr_Prs.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_Prs_GetHandle, None, PrsMgr_Prs)
PrsMgr_Prs_swigregister = _PrsMgr.PrsMgr_Prs_swigregister
PrsMgr_Prs_swigregister(PrsMgr_Prs)

class Handle_PrsMgr_Prs(OCC.Prs3d.Handle_Prs3d_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_Prs_swiginit(self, _PrsMgr.new_Handle_PrsMgr_Prs(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Prs_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_Prs.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs_Nullify, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs_IsNull, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs_GetObject, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs__kill_pointed, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs_swigregister = _PrsMgr.Handle_PrsMgr_Prs_swigregister
Handle_PrsMgr_Prs_swigregister(Handle_PrsMgr_Prs)

def Handle_PrsMgr_Prs_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_Prs_DownCast(AnObject)
Handle_PrsMgr_Prs_DownCast = _PrsMgr.Handle_PrsMgr_Prs_DownCast

class PrsMgr_SequenceNodeOfPresentations(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: PrsMgr_ModedPresentation &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _PrsMgr.PrsMgr_SequenceNodeOfPresentations_swiginit(self, _PrsMgr.new_PrsMgr_SequenceNodeOfPresentations(*args))

    def Value(self, *args):
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_SequenceNodeOfPresentations_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_SequenceNodeOfPresentations self)"""
        return _PrsMgr.PrsMgr_SequenceNodeOfPresentations__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_SequenceNodeOfPresentations self) -> Handle_PrsMgr_SequenceNodeOfPresentations"""
        return _PrsMgr.PrsMgr_SequenceNodeOfPresentations_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_SequenceNodeOfPresentations.Value = new_instancemethod(_PrsMgr.PrsMgr_SequenceNodeOfPresentations_Value, None, PrsMgr_SequenceNodeOfPresentations)
PrsMgr_SequenceNodeOfPresentations._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_SequenceNodeOfPresentations__kill_pointed, None, PrsMgr_SequenceNodeOfPresentations)
PrsMgr_SequenceNodeOfPresentations.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_SequenceNodeOfPresentations_GetHandle, None, PrsMgr_SequenceNodeOfPresentations)
PrsMgr_SequenceNodeOfPresentations_swigregister = _PrsMgr.PrsMgr_SequenceNodeOfPresentations_swigregister
PrsMgr_SequenceNodeOfPresentations_swigregister(PrsMgr_SequenceNodeOfPresentations)

class Handle_PrsMgr_SequenceNodeOfPresentations(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_swiginit(self, _PrsMgr.new_Handle_PrsMgr_SequenceNodeOfPresentations(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_SequenceNodeOfPresentations.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_Nullify, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_IsNull, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_GetObject, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations__kill_pointed, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations_swigregister = _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_swigregister
Handle_PrsMgr_SequenceNodeOfPresentations_swigregister(Handle_PrsMgr_SequenceNodeOfPresentations)

def Handle_PrsMgr_SequenceNodeOfPresentations_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast(AnObject)
Handle_PrsMgr_SequenceNodeOfPresentations_DownCast = _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast

class PrsMgr_Presentation3d(PrsMgr_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Presentation(self, *args):
        """
        :rtype: Handle_Prs3d_Presentation

        """
        return _PrsMgr.PrsMgr_Presentation3d_Presentation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_Presentation3d self)"""
        return _PrsMgr.PrsMgr_Presentation3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_Presentation3d self) -> Handle_PrsMgr_Presentation3d"""
        return _PrsMgr.PrsMgr_Presentation3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_Presentation3d.Presentation = new_instancemethod(_PrsMgr.PrsMgr_Presentation3d_Presentation, None, PrsMgr_Presentation3d)
PrsMgr_Presentation3d._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_Presentation3d__kill_pointed, None, PrsMgr_Presentation3d)
PrsMgr_Presentation3d.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_Presentation3d_GetHandle, None, PrsMgr_Presentation3d)
PrsMgr_Presentation3d_swigregister = _PrsMgr.PrsMgr_Presentation3d_swigregister
PrsMgr_Presentation3d_swigregister(PrsMgr_Presentation3d)

class Handle_PrsMgr_Presentation3d(Handle_PrsMgr_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_Presentation3d_swiginit(self, _PrsMgr.new_Handle_PrsMgr_Presentation3d(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Presentation3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_Presentation3d.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation3d_Nullify, None, Handle_PrsMgr_Presentation3d)
Handle_PrsMgr_Presentation3d.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation3d_IsNull, None, Handle_PrsMgr_Presentation3d)
Handle_PrsMgr_Presentation3d.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation3d_GetObject, None, Handle_PrsMgr_Presentation3d)
Handle_PrsMgr_Presentation3d._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation3d__kill_pointed, None, Handle_PrsMgr_Presentation3d)
Handle_PrsMgr_Presentation3d_swigregister = _PrsMgr.Handle_PrsMgr_Presentation3d_swigregister
Handle_PrsMgr_Presentation3d_swigregister(Handle_PrsMgr_Presentation3d)

def Handle_PrsMgr_Presentation3d_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_Presentation3d_DownCast(AnObject)
Handle_PrsMgr_Presentation3d_DownCast = _PrsMgr.Handle_PrsMgr_Presentation3d_DownCast

class PrsMgr_PresentationManager3d(PrsMgr_PresentationManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a framework to manage displays and graphic entities with the 3D view aStructureManager.

        :param aStructureManager:
        :type aStructureManager: Handle_Graphic3d_StructureManager &
        :rtype: None

        """
        _PrsMgr.PrsMgr_PresentationManager3d_swiginit(self, _PrsMgr.new_PrsMgr_PresentationManager3d(*args))

    def Color(self, *args):
        """
        * Highlights the graphic object aPresentableObject in the color aColor. aPresentableObject has the display mode aMode; this has the default value of 0, that is, the wireframe display mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aColor: default value is Quantity_NOC_YELLOW
        :type aColor: Quantity_NameOfColor
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Color(self, *args)


    def BoundBox(self, *args):
        """
        * highlights the boundbox of the presentation

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_BoundBox(self, *args)


    def AddToImmediateList(self, *args):
        """
        * stores <aPrs> in a list of structure to be displayed in immediate mode. will be taken in account in EndDraw Method.

        :param aPrs:
        :type aPrs: Handle_Prs3d_Presentation &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_AddToImmediateList(self, *args)


    def Connect(self, *args):
        """
        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param anOtherObject:
        :type anOtherObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :param anOtherMode: default value is 0
        :type anOtherMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Connect(self, *args)


    def Transform(self, *args):
        """
        * Sets the transformation aTransformation for the presentable object aPresentableObject. aPresentableObject has the display mode aMode; this has the default value of 0, that is, the wireframe display mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aTransformation:
        :type aTransformation: Handle_Geom_Transformation &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Transform(self, *args)


    def Place(self, *args):
        """
        * Sets a position to move the presentable object aPresentableObject to. This position is defined by the lengths along the x, y and z axes: X, Y and Z respectively. aPresentableObject has the display mode aMode; this has the default value of 0, that is, the wireframe display mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Place(self, *args)


    def Multiply(self, *args):
        """
        * Defines the transformation aTransformation for the presentable object aPresentableObject. aPresentableObject has the display mode aMode; this has the default value of 0, that is, the wireframe display mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aTransformation:
        :type aTransformation: Handle_Geom_Transformation &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Multiply(self, *args)


    def Move(self, *args):
        """
        * Sets a position to move the presentable object aPresentableObject to. This position is defined by the lengths along the x, y and z axes: X, Y and Z respectively. aPresentableObject has the display mode aMode; this has the default value of 0, that is, the wireframe display mode.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_Move(self, *args)


    def StructureManager(self, *args):
        """
        * Returns the structure manager.

        :rtype: Handle_Graphic3d_StructureManager

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_StructureManager(self, *args)


    def SetShadingAspect(self, *args):
        """
        * this method will change the color and the aspect of the presentations containg shaded structures.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aColor:
        :type aColor: Quantity_NameOfColor
        :param aMaterial:
        :type aMaterial: Graphic3d_NameOfMaterial
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        * this method will change the color and the aspect of the presentations containg shaded structures.

        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aShadingAspect:
        :type aShadingAspect: Handle_Prs3d_ShadingAspect &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_SetShadingAspect(self, *args)


    def CastPresentation(self, *args):
        """
        :param aPresentableObject:
        :type aPresentableObject: Handle_PrsMgr_PresentableObject &
        :param aMode: default value is 0
        :type aMode: int
        :rtype: Handle_PrsMgr_Presentation3d

        """
        return _PrsMgr.PrsMgr_PresentationManager3d_CastPresentation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(PrsMgr_PresentationManager3d self)"""
        return _PrsMgr.PrsMgr_PresentationManager3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(PrsMgr_PresentationManager3d self) -> Handle_PrsMgr_PresentationManager3d"""
        return _PrsMgr.PrsMgr_PresentationManager3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


PrsMgr_PresentationManager3d.Color = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Color, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.BoundBox = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_BoundBox, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.AddToImmediateList = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_AddToImmediateList, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.Connect = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Connect, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.Transform = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Transform, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.Place = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Place, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.Multiply = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Multiply, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.Move = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_Move, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.StructureManager = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_StructureManager, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.SetShadingAspect = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_SetShadingAspect, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.CastPresentation = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_CastPresentation, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d._kill_pointed = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d__kill_pointed, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d.GetHandle = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager3d_GetHandle, None, PrsMgr_PresentationManager3d)
PrsMgr_PresentationManager3d_swigregister = _PrsMgr.PrsMgr_PresentationManager3d_swigregister
PrsMgr_PresentationManager3d_swigregister(PrsMgr_PresentationManager3d)

class Handle_PrsMgr_PresentationManager3d(Handle_PrsMgr_PresentationManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_PresentationManager3d_swiginit(self, _PrsMgr.new_Handle_PrsMgr_PresentationManager3d(*args))
    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentationManager3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_PrsMgr_PresentationManager3d.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager3d_Nullify, None, Handle_PrsMgr_PresentationManager3d)
Handle_PrsMgr_PresentationManager3d.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager3d_IsNull, None, Handle_PrsMgr_PresentationManager3d)
Handle_PrsMgr_PresentationManager3d.GetObject = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager3d_GetObject, None, Handle_PrsMgr_PresentationManager3d)
Handle_PrsMgr_PresentationManager3d._kill_pointed = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager3d__kill_pointed, None, Handle_PrsMgr_PresentationManager3d)
Handle_PrsMgr_PresentationManager3d_swigregister = _PrsMgr.Handle_PrsMgr_PresentationManager3d_swigregister
Handle_PrsMgr_PresentationManager3d_swigregister(Handle_PrsMgr_PresentationManager3d)

def Handle_PrsMgr_PresentationManager3d_DownCast(AnObject):
    return _PrsMgr.Handle_PrsMgr_PresentationManager3d_DownCast(AnObject)
Handle_PrsMgr_PresentationManager3d_DownCast = _PrsMgr.Handle_PrsMgr_PresentationManager3d_DownCast



