# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Graphic3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Graphic3d', [dirname(__file__)])
        except ImportError:
            import _Graphic3d
            return _Graphic3d
        if fp is not None:
            try:
                _mod = imp.load_module('_Graphic3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Graphic3d = swig_import_helper()
    del swig_import_helper
else:
    import _Graphic3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Graphic3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Graphic3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Graphic3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Graphic3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Graphic3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Graphic3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Graphic3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Graphic3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Graphic3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Graphic3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Graphic3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Graphic3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Graphic3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Graphic3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Graphic3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Graphic3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Graphic3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Graphic3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Aspect
import OCC.Quantity
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.TShort
import OCC.TColQuantity
import OCC.gp
import OCC.Image
import OCC.OSD

_Graphic3d.Graphic3d_BT_RGB_swigconstant(_Graphic3d)
Graphic3d_BT_RGB = _Graphic3d.Graphic3d_BT_RGB

_Graphic3d.Graphic3d_BT_RGBA_swigconstant(_Graphic3d)
Graphic3d_BT_RGBA = _Graphic3d.Graphic3d_BT_RGBA

_Graphic3d.Graphic3d_BT_Depth_swigconstant(_Graphic3d)
Graphic3d_BT_Depth = _Graphic3d.Graphic3d_BT_Depth

_Graphic3d.Graphic3d_EF_PostScript_swigconstant(_Graphic3d)
Graphic3d_EF_PostScript = _Graphic3d.Graphic3d_EF_PostScript

_Graphic3d.Graphic3d_EF_EnhPostScript_swigconstant(_Graphic3d)
Graphic3d_EF_EnhPostScript = _Graphic3d.Graphic3d_EF_EnhPostScript

_Graphic3d.Graphic3d_EF_TEX_swigconstant(_Graphic3d)
Graphic3d_EF_TEX = _Graphic3d.Graphic3d_EF_TEX

_Graphic3d.Graphic3d_EF_PDF_swigconstant(_Graphic3d)
Graphic3d_EF_PDF = _Graphic3d.Graphic3d_EF_PDF

_Graphic3d.Graphic3d_EF_SVG_swigconstant(_Graphic3d)
Graphic3d_EF_SVG = _Graphic3d.Graphic3d_EF_SVG

_Graphic3d.Graphic3d_EF_PGF_swigconstant(_Graphic3d)
Graphic3d_EF_PGF = _Graphic3d.Graphic3d_EF_PGF

_Graphic3d.Graphic3d_EF_EMF_swigconstant(_Graphic3d)
Graphic3d_EF_EMF = _Graphic3d.Graphic3d_EF_EMF

_Graphic3d.Graphic3d_ASPECT_LINE_swigconstant(_Graphic3d)
Graphic3d_ASPECT_LINE = _Graphic3d.Graphic3d_ASPECT_LINE

_Graphic3d.Graphic3d_ASPECT_TEXT_swigconstant(_Graphic3d)
Graphic3d_ASPECT_TEXT = _Graphic3d.Graphic3d_ASPECT_TEXT

_Graphic3d.Graphic3d_ASPECT_MARKER_swigconstant(_Graphic3d)
Graphic3d_ASPECT_MARKER = _Graphic3d.Graphic3d_ASPECT_MARKER

_Graphic3d.Graphic3d_ASPECT_FILL_AREA_swigconstant(_Graphic3d)
Graphic3d_ASPECT_FILL_AREA = _Graphic3d.Graphic3d_ASPECT_FILL_AREA

_Graphic3d.Graphic3d_HTA_LEFT_swigconstant(_Graphic3d)
Graphic3d_HTA_LEFT = _Graphic3d.Graphic3d_HTA_LEFT

_Graphic3d.Graphic3d_HTA_CENTER_swigconstant(_Graphic3d)
Graphic3d_HTA_CENTER = _Graphic3d.Graphic3d_HTA_CENTER

_Graphic3d.Graphic3d_HTA_RIGHT_swigconstant(_Graphic3d)
Graphic3d_HTA_RIGHT = _Graphic3d.Graphic3d_HTA_RIGHT

_Graphic3d.Graphic3d_LOTA_OFF_swigconstant(_Graphic3d)
Graphic3d_LOTA_OFF = _Graphic3d.Graphic3d_LOTA_OFF

_Graphic3d.Graphic3d_LOTA_FAST_swigconstant(_Graphic3d)
Graphic3d_LOTA_FAST = _Graphic3d.Graphic3d_LOTA_FAST

_Graphic3d.Graphic3d_LOTA_MIDDLE_swigconstant(_Graphic3d)
Graphic3d_LOTA_MIDDLE = _Graphic3d.Graphic3d_LOTA_MIDDLE

_Graphic3d.Graphic3d_LOTA_QUALITY_swigconstant(_Graphic3d)
Graphic3d_LOTA_QUALITY = _Graphic3d.Graphic3d_LOTA_QUALITY

_Graphic3d.Graphic3d_NOM_BRASS_swigconstant(_Graphic3d)
Graphic3d_NOM_BRASS = _Graphic3d.Graphic3d_NOM_BRASS

_Graphic3d.Graphic3d_NOM_BRONZE_swigconstant(_Graphic3d)
Graphic3d_NOM_BRONZE = _Graphic3d.Graphic3d_NOM_BRONZE

_Graphic3d.Graphic3d_NOM_COPPER_swigconstant(_Graphic3d)
Graphic3d_NOM_COPPER = _Graphic3d.Graphic3d_NOM_COPPER

_Graphic3d.Graphic3d_NOM_GOLD_swigconstant(_Graphic3d)
Graphic3d_NOM_GOLD = _Graphic3d.Graphic3d_NOM_GOLD

_Graphic3d.Graphic3d_NOM_PEWTER_swigconstant(_Graphic3d)
Graphic3d_NOM_PEWTER = _Graphic3d.Graphic3d_NOM_PEWTER

_Graphic3d.Graphic3d_NOM_PLASTER_swigconstant(_Graphic3d)
Graphic3d_NOM_PLASTER = _Graphic3d.Graphic3d_NOM_PLASTER

_Graphic3d.Graphic3d_NOM_PLASTIC_swigconstant(_Graphic3d)
Graphic3d_NOM_PLASTIC = _Graphic3d.Graphic3d_NOM_PLASTIC

_Graphic3d.Graphic3d_NOM_SILVER_swigconstant(_Graphic3d)
Graphic3d_NOM_SILVER = _Graphic3d.Graphic3d_NOM_SILVER

_Graphic3d.Graphic3d_NOM_STEEL_swigconstant(_Graphic3d)
Graphic3d_NOM_STEEL = _Graphic3d.Graphic3d_NOM_STEEL

_Graphic3d.Graphic3d_NOM_STONE_swigconstant(_Graphic3d)
Graphic3d_NOM_STONE = _Graphic3d.Graphic3d_NOM_STONE

_Graphic3d.Graphic3d_NOM_SHINY_PLASTIC_swigconstant(_Graphic3d)
Graphic3d_NOM_SHINY_PLASTIC = _Graphic3d.Graphic3d_NOM_SHINY_PLASTIC

_Graphic3d.Graphic3d_NOM_SATIN_swigconstant(_Graphic3d)
Graphic3d_NOM_SATIN = _Graphic3d.Graphic3d_NOM_SATIN

_Graphic3d.Graphic3d_NOM_METALIZED_swigconstant(_Graphic3d)
Graphic3d_NOM_METALIZED = _Graphic3d.Graphic3d_NOM_METALIZED

_Graphic3d.Graphic3d_NOM_NEON_GNC_swigconstant(_Graphic3d)
Graphic3d_NOM_NEON_GNC = _Graphic3d.Graphic3d_NOM_NEON_GNC

_Graphic3d.Graphic3d_NOM_CHROME_swigconstant(_Graphic3d)
Graphic3d_NOM_CHROME = _Graphic3d.Graphic3d_NOM_CHROME

_Graphic3d.Graphic3d_NOM_ALUMINIUM_swigconstant(_Graphic3d)
Graphic3d_NOM_ALUMINIUM = _Graphic3d.Graphic3d_NOM_ALUMINIUM

_Graphic3d.Graphic3d_NOM_OBSIDIAN_swigconstant(_Graphic3d)
Graphic3d_NOM_OBSIDIAN = _Graphic3d.Graphic3d_NOM_OBSIDIAN

_Graphic3d.Graphic3d_NOM_NEON_PHC_swigconstant(_Graphic3d)
Graphic3d_NOM_NEON_PHC = _Graphic3d.Graphic3d_NOM_NEON_PHC

_Graphic3d.Graphic3d_NOM_JADE_swigconstant(_Graphic3d)
Graphic3d_NOM_JADE = _Graphic3d.Graphic3d_NOM_JADE

_Graphic3d.Graphic3d_NOM_DEFAULT_swigconstant(_Graphic3d)
Graphic3d_NOM_DEFAULT = _Graphic3d.Graphic3d_NOM_DEFAULT

_Graphic3d.Graphic3d_NOM_UserDefined_swigconstant(_Graphic3d)
Graphic3d_NOM_UserDefined = _Graphic3d.Graphic3d_NOM_UserDefined

_Graphic3d.Graphic3d_NOT_1D_ELEVATION_swigconstant(_Graphic3d)
Graphic3d_NOT_1D_ELEVATION = _Graphic3d.Graphic3d_NOT_1D_ELEVATION

_Graphic3d.Graphic3d_NOT_1D_UNKNOWN_swigconstant(_Graphic3d)
Graphic3d_NOT_1D_UNKNOWN = _Graphic3d.Graphic3d_NOT_1D_UNKNOWN

_Graphic3d.Graphic3d_NOT_2D_MATRA_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_MATRA = _Graphic3d.Graphic3d_NOT_2D_MATRA

_Graphic3d.Graphic3d_NOT_2D_ALIENSKIN_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_ALIENSKIN = _Graphic3d.Graphic3d_NOT_2D_ALIENSKIN

_Graphic3d.Graphic3d_NOT_2D_BLUE_ROCK_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_BLUE_ROCK = _Graphic3d.Graphic3d_NOT_2D_BLUE_ROCK

_Graphic3d.Graphic3d_NOT_2D_BLUEWHITE_PAPER_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_BLUEWHITE_PAPER = _Graphic3d.Graphic3d_NOT_2D_BLUEWHITE_PAPER

_Graphic3d.Graphic3d_NOT_2D_BRUSHED_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_BRUSHED = _Graphic3d.Graphic3d_NOT_2D_BRUSHED

_Graphic3d.Graphic3d_NOT_2D_BUBBLES_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_BUBBLES = _Graphic3d.Graphic3d_NOT_2D_BUBBLES

_Graphic3d.Graphic3d_NOT_2D_BUMP_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_BUMP = _Graphic3d.Graphic3d_NOT_2D_BUMP

_Graphic3d.Graphic3d_NOT_2D_CAST_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_CAST = _Graphic3d.Graphic3d_NOT_2D_CAST

_Graphic3d.Graphic3d_NOT_2D_CHIPBD_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_CHIPBD = _Graphic3d.Graphic3d_NOT_2D_CHIPBD

_Graphic3d.Graphic3d_NOT_2D_CLOUDS_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_CLOUDS = _Graphic3d.Graphic3d_NOT_2D_CLOUDS

_Graphic3d.Graphic3d_NOT_2D_FLESH_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_FLESH = _Graphic3d.Graphic3d_NOT_2D_FLESH

_Graphic3d.Graphic3d_NOT_2D_FLOOR_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_FLOOR = _Graphic3d.Graphic3d_NOT_2D_FLOOR

_Graphic3d.Graphic3d_NOT_2D_GALVNISD_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_GALVNISD = _Graphic3d.Graphic3d_NOT_2D_GALVNISD

_Graphic3d.Graphic3d_NOT_2D_GRASS_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_GRASS = _Graphic3d.Graphic3d_NOT_2D_GRASS

_Graphic3d.Graphic3d_NOT_2D_ALUMINUM_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_ALUMINUM = _Graphic3d.Graphic3d_NOT_2D_ALUMINUM

_Graphic3d.Graphic3d_NOT_2D_ROCK_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_ROCK = _Graphic3d.Graphic3d_NOT_2D_ROCK

_Graphic3d.Graphic3d_NOT_2D_KNURL_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_KNURL = _Graphic3d.Graphic3d_NOT_2D_KNURL

_Graphic3d.Graphic3d_NOT_2D_MAPLE_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_MAPLE = _Graphic3d.Graphic3d_NOT_2D_MAPLE

_Graphic3d.Graphic3d_NOT_2D_MARBLE_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_MARBLE = _Graphic3d.Graphic3d_NOT_2D_MARBLE

_Graphic3d.Graphic3d_NOT_2D_MOTTLED_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_MOTTLED = _Graphic3d.Graphic3d_NOT_2D_MOTTLED

_Graphic3d.Graphic3d_NOT_2D_RAIN_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_RAIN = _Graphic3d.Graphic3d_NOT_2D_RAIN

_Graphic3d.Graphic3d_NOT_2D_UNKNOWN_swigconstant(_Graphic3d)
Graphic3d_NOT_2D_UNKNOWN = _Graphic3d.Graphic3d_NOT_2D_UNKNOWN

_Graphic3d.Graphic3d_NOT_ENV_CLOUDS_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_CLOUDS = _Graphic3d.Graphic3d_NOT_ENV_CLOUDS

_Graphic3d.Graphic3d_NOT_ENV_CV_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_CV = _Graphic3d.Graphic3d_NOT_ENV_CV

_Graphic3d.Graphic3d_NOT_ENV_MEDIT_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_MEDIT = _Graphic3d.Graphic3d_NOT_ENV_MEDIT

_Graphic3d.Graphic3d_NOT_ENV_PEARL_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_PEARL = _Graphic3d.Graphic3d_NOT_ENV_PEARL

_Graphic3d.Graphic3d_NOT_ENV_SKY1_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_SKY1 = _Graphic3d.Graphic3d_NOT_ENV_SKY1

_Graphic3d.Graphic3d_NOT_ENV_SKY2_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_SKY2 = _Graphic3d.Graphic3d_NOT_ENV_SKY2

_Graphic3d.Graphic3d_NOT_ENV_LINES_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_LINES = _Graphic3d.Graphic3d_NOT_ENV_LINES

_Graphic3d.Graphic3d_NOT_ENV_ROAD_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_ROAD = _Graphic3d.Graphic3d_NOT_ENV_ROAD

_Graphic3d.Graphic3d_NOT_ENV_UNKNOWN_swigconstant(_Graphic3d)
Graphic3d_NOT_ENV_UNKNOWN = _Graphic3d.Graphic3d_NOT_ENV_UNKNOWN

_Graphic3d.Graphic3d_NOTP_XY_swigconstant(_Graphic3d)
Graphic3d_NOTP_XY = _Graphic3d.Graphic3d_NOTP_XY

_Graphic3d.Graphic3d_NOTP_YZ_swigconstant(_Graphic3d)
Graphic3d_NOTP_YZ = _Graphic3d.Graphic3d_NOTP_YZ

_Graphic3d.Graphic3d_NOTP_ZX_swigconstant(_Graphic3d)
Graphic3d_NOTP_ZX = _Graphic3d.Graphic3d_NOTP_ZX

_Graphic3d.Graphic3d_NOTP_UNKNOWN_swigconstant(_Graphic3d)
Graphic3d_NOTP_UNKNOWN = _Graphic3d.Graphic3d_NOTP_UNKNOWN

_Graphic3d.Graphic3d_ST_Simple_swigconstant(_Graphic3d)
Graphic3d_ST_Simple = _Graphic3d.Graphic3d_ST_Simple

_Graphic3d.Graphic3d_ST_BSP_Tree_swigconstant(_Graphic3d)
Graphic3d_ST_BSP_Tree = _Graphic3d.Graphic3d_ST_BSP_Tree

_Graphic3d.Graphic3d_TP_UP_swigconstant(_Graphic3d)
Graphic3d_TP_UP = _Graphic3d.Graphic3d_TP_UP

_Graphic3d.Graphic3d_TP_DOWN_swigconstant(_Graphic3d)
Graphic3d_TP_DOWN = _Graphic3d.Graphic3d_TP_DOWN

_Graphic3d.Graphic3d_TP_LEFT_swigconstant(_Graphic3d)
Graphic3d_TP_LEFT = _Graphic3d.Graphic3d_TP_LEFT

_Graphic3d.Graphic3d_TP_RIGHT_swigconstant(_Graphic3d)
Graphic3d_TP_RIGHT = _Graphic3d.Graphic3d_TP_RIGHT

_Graphic3d.Graphic3d_TMF_None_swigconstant(_Graphic3d)
Graphic3d_TMF_None = _Graphic3d.Graphic3d_TMF_None

_Graphic3d.Graphic3d_TMF_PanPers_swigconstant(_Graphic3d)
Graphic3d_TMF_PanPers = _Graphic3d.Graphic3d_TMF_PanPers

_Graphic3d.Graphic3d_TMF_ZoomPers_swigconstant(_Graphic3d)
Graphic3d_TMF_ZoomPers = _Graphic3d.Graphic3d_TMF_ZoomPers

_Graphic3d.Graphic3d_TMF_RotatePers_swigconstant(_Graphic3d)
Graphic3d_TMF_RotatePers = _Graphic3d.Graphic3d_TMF_RotatePers

_Graphic3d.Graphic3d_TMF_TriedronPers_swigconstant(_Graphic3d)
Graphic3d_TMF_TriedronPers = _Graphic3d.Graphic3d_TMF_TriedronPers

_Graphic3d.Graphic3d_TMF_FullPers_swigconstant(_Graphic3d)
Graphic3d_TMF_FullPers = _Graphic3d.Graphic3d_TMF_FullPers

_Graphic3d.Graphic3d_TOC_REPLACE_swigconstant(_Graphic3d)
Graphic3d_TOC_REPLACE = _Graphic3d.Graphic3d_TOC_REPLACE

_Graphic3d.Graphic3d_TOC_POSTCONCATENATE_swigconstant(_Graphic3d)
Graphic3d_TOC_POSTCONCATENATE = _Graphic3d.Graphic3d_TOC_POSTCONCATENATE

_Graphic3d.Graphic3d_TOC_ANCESTOR_swigconstant(_Graphic3d)
Graphic3d_TOC_ANCESTOR = _Graphic3d.Graphic3d_TOC_ANCESTOR

_Graphic3d.Graphic3d_TOC_DESCENDANT_swigconstant(_Graphic3d)
Graphic3d_TOC_DESCENDANT = _Graphic3d.Graphic3d_TOC_DESCENDANT

_Graphic3d.Graphic3d_MATERIAL_ASPECT_swigconstant(_Graphic3d)
Graphic3d_MATERIAL_ASPECT = _Graphic3d.Graphic3d_MATERIAL_ASPECT

_Graphic3d.Graphic3d_MATERIAL_PHYSIC_swigconstant(_Graphic3d)
Graphic3d_MATERIAL_PHYSIC = _Graphic3d.Graphic3d_MATERIAL_PHYSIC

_Graphic3d.Graphic3d_TOP_UNKNOWN_swigconstant(_Graphic3d)
Graphic3d_TOP_UNKNOWN = _Graphic3d.Graphic3d_TOP_UNKNOWN

_Graphic3d.Graphic3d_TOP_COMPLEX_swigconstant(_Graphic3d)
Graphic3d_TOP_COMPLEX = _Graphic3d.Graphic3d_TOP_COMPLEX

_Graphic3d.Graphic3d_TOP_CONCAVE_swigconstant(_Graphic3d)
Graphic3d_TOP_CONCAVE = _Graphic3d.Graphic3d_TOP_CONCAVE

_Graphic3d.Graphic3d_TOP_CONVEX_swigconstant(_Graphic3d)
Graphic3d_TOP_CONVEX = _Graphic3d.Graphic3d_TOP_CONVEX

_Graphic3d.Graphic3d_TOP_UNDEFINED_swigconstant(_Graphic3d)
Graphic3d_TOP_UNDEFINED = _Graphic3d.Graphic3d_TOP_UNDEFINED

_Graphic3d.Graphic3d_TOP_POLYLINE_swigconstant(_Graphic3d)
Graphic3d_TOP_POLYLINE = _Graphic3d.Graphic3d_TOP_POLYLINE

_Graphic3d.Graphic3d_TOP_POLYGON_swigconstant(_Graphic3d)
Graphic3d_TOP_POLYGON = _Graphic3d.Graphic3d_TOP_POLYGON

_Graphic3d.Graphic3d_TOP_TRIANGLEMESH_swigconstant(_Graphic3d)
Graphic3d_TOP_TRIANGLEMESH = _Graphic3d.Graphic3d_TOP_TRIANGLEMESH

_Graphic3d.Graphic3d_TOP_QUADRANGLEMESH_swigconstant(_Graphic3d)
Graphic3d_TOP_QUADRANGLEMESH = _Graphic3d.Graphic3d_TOP_QUADRANGLEMESH

_Graphic3d.Graphic3d_TOP_TEXT_swigconstant(_Graphic3d)
Graphic3d_TOP_TEXT = _Graphic3d.Graphic3d_TOP_TEXT

_Graphic3d.Graphic3d_TOP_MARKER_swigconstant(_Graphic3d)
Graphic3d_TOP_MARKER = _Graphic3d.Graphic3d_TOP_MARKER

_Graphic3d.Graphic3d_TOP_PARRAY_swigconstant(_Graphic3d)
Graphic3d_TOP_PARRAY = _Graphic3d.Graphic3d_TOP_PARRAY

_Graphic3d.Graphic3d_TOPA_UNDEFINED_swigconstant(_Graphic3d)
Graphic3d_TOPA_UNDEFINED = _Graphic3d.Graphic3d_TOPA_UNDEFINED

_Graphic3d.Graphic3d_TOPA_POINTS_swigconstant(_Graphic3d)
Graphic3d_TOPA_POINTS = _Graphic3d.Graphic3d_TOPA_POINTS

_Graphic3d.Graphic3d_TOPA_POLYLINES_swigconstant(_Graphic3d)
Graphic3d_TOPA_POLYLINES = _Graphic3d.Graphic3d_TOPA_POLYLINES

_Graphic3d.Graphic3d_TOPA_SEGMENTS_swigconstant(_Graphic3d)
Graphic3d_TOPA_SEGMENTS = _Graphic3d.Graphic3d_TOPA_SEGMENTS

_Graphic3d.Graphic3d_TOPA_POLYGONS_swigconstant(_Graphic3d)
Graphic3d_TOPA_POLYGONS = _Graphic3d.Graphic3d_TOPA_POLYGONS

_Graphic3d.Graphic3d_TOPA_TRIANGLES_swigconstant(_Graphic3d)
Graphic3d_TOPA_TRIANGLES = _Graphic3d.Graphic3d_TOPA_TRIANGLES

_Graphic3d.Graphic3d_TOPA_QUADRANGLES_swigconstant(_Graphic3d)
Graphic3d_TOPA_QUADRANGLES = _Graphic3d.Graphic3d_TOPA_QUADRANGLES

_Graphic3d.Graphic3d_TOPA_TRIANGLESTRIPS_swigconstant(_Graphic3d)
Graphic3d_TOPA_TRIANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_TRIANGLESTRIPS

_Graphic3d.Graphic3d_TOPA_QUADRANGLESTRIPS_swigconstant(_Graphic3d)
Graphic3d_TOPA_QUADRANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_QUADRANGLESTRIPS

_Graphic3d.Graphic3d_TOPA_TRIANGLEFANS_swigconstant(_Graphic3d)
Graphic3d_TOPA_TRIANGLEFANS = _Graphic3d.Graphic3d_TOPA_TRIANGLEFANS

_Graphic3d.Graphic3d_TOR_AMBIENT_swigconstant(_Graphic3d)
Graphic3d_TOR_AMBIENT = _Graphic3d.Graphic3d_TOR_AMBIENT

_Graphic3d.Graphic3d_TOR_DIFFUSE_swigconstant(_Graphic3d)
Graphic3d_TOR_DIFFUSE = _Graphic3d.Graphic3d_TOR_DIFFUSE

_Graphic3d.Graphic3d_TOR_SPECULAR_swigconstant(_Graphic3d)
Graphic3d_TOR_SPECULAR = _Graphic3d.Graphic3d_TOR_SPECULAR

_Graphic3d.Graphic3d_TOR_EMISSION_swigconstant(_Graphic3d)
Graphic3d_TOR_EMISSION = _Graphic3d.Graphic3d_TOR_EMISSION

_Graphic3d.Graphic3d_TOS_VERTEX_swigconstant(_Graphic3d)
Graphic3d_TOS_VERTEX = _Graphic3d.Graphic3d_TOS_VERTEX

_Graphic3d.Graphic3d_TOS_FRAGMENT_swigconstant(_Graphic3d)
Graphic3d_TOS_FRAGMENT = _Graphic3d.Graphic3d_TOS_FRAGMENT

_Graphic3d.Graphic3d_TOS_WIREFRAME_swigconstant(_Graphic3d)
Graphic3d_TOS_WIREFRAME = _Graphic3d.Graphic3d_TOS_WIREFRAME

_Graphic3d.Graphic3d_TOS_SHADING_swigconstant(_Graphic3d)
Graphic3d_TOS_SHADING = _Graphic3d.Graphic3d_TOS_SHADING

_Graphic3d.Graphic3d_TOS_COMPUTED_swigconstant(_Graphic3d)
Graphic3d_TOS_COMPUTED = _Graphic3d.Graphic3d_TOS_COMPUTED

_Graphic3d.Graphic3d_TOS_ALL_swigconstant(_Graphic3d)
Graphic3d_TOS_ALL = _Graphic3d.Graphic3d_TOS_ALL

_Graphic3d.Graphic3d_TOT_1D_swigconstant(_Graphic3d)
Graphic3d_TOT_1D = _Graphic3d.Graphic3d_TOT_1D

_Graphic3d.Graphic3d_TOT_2D_swigconstant(_Graphic3d)
Graphic3d_TOT_2D = _Graphic3d.Graphic3d_TOT_2D

_Graphic3d.Graphic3d_TOT_2D_MIPMAP_swigconstant(_Graphic3d)
Graphic3d_TOT_2D_MIPMAP = _Graphic3d.Graphic3d_TOT_2D_MIPMAP

_Graphic3d.Graphic3d_TOTF_NEAREST_swigconstant(_Graphic3d)
Graphic3d_TOTF_NEAREST = _Graphic3d.Graphic3d_TOTF_NEAREST

_Graphic3d.Graphic3d_TOTF_BILINEAR_swigconstant(_Graphic3d)
Graphic3d_TOTF_BILINEAR = _Graphic3d.Graphic3d_TOTF_BILINEAR

_Graphic3d.Graphic3d_TOTF_TRILINEAR_swigconstant(_Graphic3d)
Graphic3d_TOTF_TRILINEAR = _Graphic3d.Graphic3d_TOTF_TRILINEAR

_Graphic3d.Graphic3d_TOTM_OBJECT_swigconstant(_Graphic3d)
Graphic3d_TOTM_OBJECT = _Graphic3d.Graphic3d_TOTM_OBJECT

_Graphic3d.Graphic3d_TOTM_SPHERE_swigconstant(_Graphic3d)
Graphic3d_TOTM_SPHERE = _Graphic3d.Graphic3d_TOTM_SPHERE

_Graphic3d.Graphic3d_TOTM_EYE_swigconstant(_Graphic3d)
Graphic3d_TOTM_EYE = _Graphic3d.Graphic3d_TOTM_EYE

_Graphic3d.Graphic3d_TOTM_MANUAL_swigconstant(_Graphic3d)
Graphic3d_TOTM_MANUAL = _Graphic3d.Graphic3d_TOTM_MANUAL

_Graphic3d.Graphic3d_TOTM_SPRITE_swigconstant(_Graphic3d)
Graphic3d_TOTM_SPRITE = _Graphic3d.Graphic3d_TOTM_SPRITE

_Graphic3d.Graphic3d_VTA_BOTTOM_swigconstant(_Graphic3d)
Graphic3d_VTA_BOTTOM = _Graphic3d.Graphic3d_VTA_BOTTOM

_Graphic3d.Graphic3d_VTA_CENTER_swigconstant(_Graphic3d)
Graphic3d_VTA_CENTER = _Graphic3d.Graphic3d_VTA_CENTER

_Graphic3d.Graphic3d_VTA_TOP_swigconstant(_Graphic3d)
Graphic3d_VTA_TOP = _Graphic3d.Graphic3d_VTA_TOP

_Graphic3d.Graphic3d_ZLayerDepthTest_swigconstant(_Graphic3d)
Graphic3d_ZLayerDepthTest = _Graphic3d.Graphic3d_ZLayerDepthTest

_Graphic3d.Graphic3d_ZLayerDepthWrite_swigconstant(_Graphic3d)
Graphic3d_ZLayerDepthWrite = _Graphic3d.Graphic3d_ZLayerDepthWrite

_Graphic3d.Graphic3d_ZLayerDepthClear_swigconstant(_Graphic3d)
Graphic3d_ZLayerDepthClear = _Graphic3d.Graphic3d_ZLayerDepthClear

_Graphic3d.Graphic3d_ZLayerDepthOffset_swigconstant(_Graphic3d)
Graphic3d_ZLayerDepthOffset = _Graphic3d.Graphic3d_ZLayerDepthOffset
class graphic3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitGraphicDriver(*args):
        """
        * Initialize graphic driver and returns Handle to it.

        :param theDisplayConnection:
        :type theDisplayConnection: Aspect_DisplayConnection_Handle &
        :rtype: Handle_Graphic3d_GraphicDriver

        """
        return _Graphic3d.graphic3d_InitGraphicDriver(*args)

    InitGraphicDriver = staticmethod(InitGraphicDriver)

    def __init__(self):
        _Graphic3d.graphic3d_swiginit(self, _Graphic3d.new_graphic3d())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


graphic3d._kill_pointed = new_instancemethod(_Graphic3d.graphic3d__kill_pointed, None, graphic3d)
graphic3d_swigregister = _Graphic3d.graphic3d_swigregister
graphic3d_swigregister(graphic3d)

def graphic3d_InitGraphicDriver(*args):
    """
    * Initialize graphic driver and returns Handle to it.

    :param theDisplayConnection:
    :type theDisplayConnection: Aspect_DisplayConnection_Handle &
    :rtype: Handle_Graphic3d_GraphicDriver

    """
    return _Graphic3d.graphic3d_InitGraphicDriver(*args)

class Graphic3d_Array1OfVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Graphic3d_Vector &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Graphic3d.Graphic3d_Array1OfVector_swiginit(self, _Graphic3d.new_Graphic3d_Array1OfVector(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Graphic3d_Vector &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Array1OfVector_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array1OfVector &
        :rtype: Graphic3d_Array1OfVector

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array1OfVector &
        :rtype: Graphic3d_Array1OfVector

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Graphic3d_Vector &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVector_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Graphic3d_Vector

        """
        return _Graphic3d.Graphic3d_Array1OfVector_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Graphic3d_Vector

        """
        return _Graphic3d.Graphic3d_Array1OfVector_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Array1OfVector.Init = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Init, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Destroy, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.IsAllocated = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_IsAllocated, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Assign = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Assign, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Set = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Set, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Length = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Length, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Lower = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Lower, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Upper = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Upper, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.SetValue = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_SetValue, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.Value = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_Value, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector_ChangeValue, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVector__kill_pointed, None, Graphic3d_Array1OfVector)
Graphic3d_Array1OfVector_swigregister = _Graphic3d.Graphic3d_Array1OfVector_swigregister
Graphic3d_Array1OfVector_swigregister(Graphic3d_Array1OfVector)

class Graphic3d_Array1OfVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Graphic3d_Vertex &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Graphic3d.Graphic3d_Array1OfVertex_swiginit(self, _Graphic3d.new_Graphic3d_Array1OfVertex(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Graphic3d_Vertex &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array1OfVertex &
        :rtype: Graphic3d_Array1OfVertex

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array1OfVertex &
        :rtype: Graphic3d_Array1OfVertex

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Graphic3d_Vertex &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Graphic3d_Vertex

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Graphic3d_Vertex

        """
        return _Graphic3d.Graphic3d_Array1OfVertex_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Array1OfVertex.Init = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Init, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Destroy, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.IsAllocated = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_IsAllocated, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Assign = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Assign, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Set = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Set, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Length = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Length, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Lower = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Lower, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Upper = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Upper, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.SetValue = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_SetValue, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.Value = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_Value, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex_ChangeValue, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Array1OfVertex__kill_pointed, None, Graphic3d_Array1OfVertex)
Graphic3d_Array1OfVertex_swigregister = _Graphic3d.Graphic3d_Array1OfVertex_swigregister
Graphic3d_Array1OfVertex_swigregister(Graphic3d_Array1OfVertex)

class Graphic3d_Array2OfVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Graphic3d_Vertex &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _Graphic3d.Graphic3d_Array2OfVertex_swiginit(self, _Graphic3d.new_Graphic3d_Array2OfVertex(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Graphic3d_Vertex &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_Destroy(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array2OfVertex &
        :rtype: Graphic3d_Array2OfVertex

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_Array2OfVertex &
        :rtype: Graphic3d_Array2OfVertex

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_Set(self, *args)


    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_ColLength(self, *args)


    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_RowLength(self, *args)


    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_LowerCol(self, *args)


    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_LowerRow(self, *args)


    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_UpperCol(self, *args)


    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_UpperRow(self, *args)


    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Graphic3d_Vertex &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Graphic3d_Vertex

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Graphic3d_Vertex

        """
        return _Graphic3d.Graphic3d_Array2OfVertex_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Array2OfVertex.Init = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_Init, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_Destroy, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.Assign = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_Assign, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.Set = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_Set, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.ColLength = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_ColLength, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.RowLength = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_RowLength, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.LowerCol = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_LowerCol, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.LowerRow = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_LowerRow, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.UpperCol = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_UpperCol, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.UpperRow = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_UpperRow, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.SetValue = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_SetValue, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.Value = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_Value, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex_ChangeValue, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Array2OfVertex__kill_pointed, None, Graphic3d_Array2OfVertex)
Graphic3d_Array2OfVertex_swigregister = _Graphic3d.Graphic3d_Array2OfVertex_swigregister
Graphic3d_Array2OfVertex_swigregister(Graphic3d_Array2OfVertex)

class Graphic3d_ArrayOfPrimitives(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Destroy(self, *args)


    def AddVertex(self, *args):
        """
        * Adds a vertice in the array. returns the actual vertex number.

        :param aVertice:
        :type aVertice: gp_Pnt
        :rtype: int

        * Adds a vertice in the array. returns the actual vertex number.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: int

        * Adds a vertice in the array. returns the actual vertex number.

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Z:
        :type Z: Standard_ShortReal
        :rtype: int

        * Adds a vertice and vertex color in the vertex array. returns the actual vertex number. Warning: <aColor> is ignored when the <hasVColors> constructor parameter is False

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: int

        * Adds a vertice and vertex color in the vertex array. returns the actual vertex number. Warning: <aColor> is ignored when the <hasVColors> constructor parameter is False aColor = Alpha << 24 + Blue << 16 + Green << 8 + Red On all architecture proccers type (x86 or SPARC) you can use this byte order.

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aColor:
        :type aColor: int
        :rtype: int

        * Adds a vertice and vertex normal in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False.

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aNormal:
        :type aNormal: gp_Dir
        :rtype: int

        * Adds a vertice and vertex normal in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param NX:
        :type NX: float
        :param NY:
        :type NY: float
        :param NZ:
        :type NZ: float
        :rtype: int

        * Adds a vertice and vertex normal in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False.

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Z:
        :type Z: Standard_ShortReal
        :param NX:
        :type NX: Standard_ShortReal
        :param NY:
        :type NY: Standard_ShortReal
        :param NZ:
        :type NZ: Standard_ShortReal
        :rtype: int

        * Adds a vertice,vertex normal and color in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False. <aColor> is ignored when the <hasVColors> constructor parameter is False

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aNormal:
        :type aNormal: gp_Dir
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: int

        * Adds a vertice,vertex normal and color in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False. <aColor> is ignored when the <hasVColors> constructor parameter is False aColor = Alpha << 24 + Blue << 16 + Green << 8 + Red On all architecture proccers type (x86 or SPARC) you can use this byte order.

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aNormal:
        :type aNormal: gp_Dir
        :param aColor:
        :type aColor: int
        :rtype: int

        * Adds a vertice and vertex texture in the vertex array. returns the actual vertex number. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aTexel:
        :type aTexel: gp_Pnt2d
        :rtype: int

        * Adds a vertice and vertex texture coordinates in the vertex array. returns the actual vertex number. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param TX:
        :type TX: float
        :param TY:
        :type TY: float
        :rtype: int

        * Adds a vertice and vertex texture coordinates in the vertex array. returns the actual vertex number. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Z:
        :type Z: Standard_ShortReal
        :param TX:
        :type TX: Standard_ShortReal
        :param TY:
        :type TY: Standard_ShortReal
        :rtype: int

        * Adds a vertice,vertex normal and texture in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param aVertice:
        :type aVertice: gp_Pnt
        :param aNormal:
        :type aNormal: gp_Dir
        :param aTexel:
        :type aTexel: gp_Pnt2d
        :rtype: int

        * Adds a vertice,vertex normal and texture in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param NX:
        :type NX: float
        :param NY:
        :type NY: float
        :param NZ:
        :type NZ: float
        :param TX:
        :type TX: float
        :param TY:
        :type TY: float
        :rtype: int

        * Adds a vertice,vertex normal and texture in the vertex array. returns the actual vertex number. Warning: <aNormal> is ignored when the <hasVNormals> constructor parameter is False. <aTexel> is ignored when the <hasVTexels> constructor parameter is False.

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Z:
        :type Z: Standard_ShortReal
        :param NX:
        :type NX: Standard_ShortReal
        :param NY:
        :type NY: Standard_ShortReal
        :param NZ:
        :type NZ: Standard_ShortReal
        :param TX:
        :type TX: Standard_ShortReal
        :param TY:
        :type TY: Standard_ShortReal
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddVertex(self, *args)


    def AddBound(self, *args):
        """
        * Adds a bound of length <edgeNumber> in the bound array returns the actual bounds number.

        :param edgeNumber:
        :type edgeNumber: int
        :rtype: int

        * Adds a bound of length <edgeNumber> and bound color <aBColor> in the bound array. returns the actual bounds number. Warning: <aBColor> is ignored when the <hasBColors> constructor parameter is False

        :param edgeNumber:
        :type edgeNumber: int
        :param aBColor:
        :type aBColor: Quantity_Color &
        :rtype: int

        * Adds a bound of length <edgeNumber> and bound color coordinates in the bound array. returns the actual bounds number. Warning: <R,G,B> are ignored when the <hasBColors> constructor parameter is False

        :param edgeNumber:
        :type edgeNumber: int
        :param R:
        :type R: float
        :param G:
        :type G: float
        :param B:
        :type B: float
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddBound(self, *args)


    def AddEdge(self, *args):
        """
        * Adds an edge in the range [1,VertexNumber()] in the array, if <isVisible> is False the edge between <vertexIndex> and the next edge will not be visible even if the SetEdgeOn() method is activated in Graphic3d_AspectFillArea3d class. returns the actual edges number. Warning: <isVisible> is ignored when the <hasEdgeInfos> constructor parameter is False.

        :param vertexIndex:
        :type vertexIndex: int
        :param isVisible: default value is Standard_True
        :type isVisible: bool
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddEdge(self, *args)


    def Orientate(self, *args):
        """
        * Orientate correctly all vertexs & normals of this array according to the <aNormal> parameter and returns True when something has change in the array. Warning: When the array has edges this method is apply on edge sub array instead on vertex sub array.

        :param aNormal:
        :type aNormal: gp_Dir
        :rtype: bool

        * Orientate correctly all vertexs & normal of the bound <aBound> according to the <aNormal> parameter and returns True when something has change in the array. Warning: When the array has edges this method is apply on edge sub array instead on vertex sub array. When this array has no bound, <aBoundIndex> design the item number

        :param aBoundIndex:
        :type aBoundIndex: int
        :param aNormal:
        :type aNormal: gp_Dir
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Orientate(self, *args)


    def SetVertice(self, *args):
        """
        * Change the vertice of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param aVertice:
        :type aVertice: gp_Pnt
        :rtype: None

        * Change the vertice of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Z:
        :type Z: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        * Change the vertex color of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        * Change the vertex color of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param R:
        :type R: float
        :param G:
        :type G: float
        :param B:
        :type B: float
        :rtype: None

        * Change the vertex color of rank <anIndex> in the array. aColor = Alpha << 24 + Blue << 16 + Green << 8 + Red On all architecture proccers type (x86 or SPARC) you can use this byte order.

        :param anIndex:
        :type anIndex: int
        :param aColor:
        :type aColor: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        * Change the vertex normal of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param aNormal:
        :type aNormal: gp_Dir
        :rtype: None

        * Change the vertex normal of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param NX:
        :type NX: float
        :param NY:
        :type NY: float
        :param NZ:
        :type NZ: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        * Change the vertex texel of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param aTexel:
        :type aTexel: gp_Pnt2d
        :rtype: None

        * Change the vertex texel of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param TX:
        :type TX: float
        :param TY:
        :type TY: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexTexel(self, *args)


    def SetBoundColor(self, *args):
        """
        * Change the bound color of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        * Change the bound color of rank <anIndex> in the array.

        :param anIndex:
        :type anIndex: int
        :param R:
        :type R: float
        :param G:
        :type G: float
        :param B:
        :type B: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetBoundColor(self, *args)


    def Array(self, *args):
        """
        * Returns the array address.

        :rtype: Graphic3d_PrimitiveArray

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Array(self, *args)


    def Type(self, *args):
        """
        * Returns the type of this primitive

        :rtype: Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Type(self, *args)


    def StringType(self, *args):
        """
        * Returns the string type of this primitive

        :rtype: char *

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        * Returns True when vertex normals array is defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        * Returns True when vertex colors array is defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        * Returns True when vertex texels array is defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        * Returns the number of defined vertex

        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNumber(self, *args)


    def Vertice(self, *args):
        """
        * Returns the vertice at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :rtype: gp_Pnt

        * Returns the vertice coordinates at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        * Returns the vertex color at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :rtype: Quantity_Color

        * Returns the vertex color values at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :param R:
        :type R: float &
        :param G:
        :type G: float &
        :param B:
        :type B: float &
        :rtype: None

        * Returns the vertex color values at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :param aColor:
        :type aColor: int &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        * Returns the vertex normal at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :rtype: gp_Dir

        * Returns the vertex normal coordinates at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :param NX:
        :type NX: float &
        :param NY:
        :type NY: float &
        :param NZ:
        :type NZ: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        * Returns the vertex texture at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :rtype: gp_Pnt2d

        * Returns the vertex texture coordinates at rank <aRank> from the vertex table if defined.

        :param aRank:
        :type aRank: int
        :param TX:
        :type TX: float &
        :param TY:
        :type TY: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexTexel(self, *args)


    def HasEdgeInfos(self, *args):
        """
        * Returns True when edge visibillity array is defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasEdgeInfos(self, *args)


    def EdgeNumber(self, *args):
        """
        * Returns the number of defined edges

        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        * Returns the vertex index at rank <aRank> in the range [1,VertexNumber()]

        :param aRank:
        :type aRank: int
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Edge(self, *args)


    def EdgeIsVisible(self, *args):
        """
        * Returns True when the edge at rank <aRank> is visible.

        :param aRank:
        :type aRank: int
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeIsVisible(self, *args)


    def HasBoundColors(self, *args):
        """
        * Returns True when bound colors array is defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        * Returns the number of defined bounds

        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        * Returns the edge number at rank <aRank>.

        :param aRank:
        :type aRank: int
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Bound(self, *args)


    def BoundColor(self, *args):
        """
        * Returns the bound color at rank <aRank> from the bound table if defined.

        :param aRank:
        :type aRank: int
        :rtype: Quantity_Color

        * Returns the bound color values at rank <aRank> from the bound table if defined.

        :param aRank:
        :type aRank: int
        :param R:
        :type R: float &
        :param G:
        :type G: float &
        :param B:
        :type B: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_BoundColor(self, *args)


    def ItemNumber(self, *args):
        """
        * Returns the number of total items according to the array type.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        * Returns True only when the contains of this array is available.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_IsValid(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfPrimitives self)"""
        return _Graphic3d.Graphic3d_ArrayOfPrimitives__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfPrimitives self) -> Handle_Graphic3d_ArrayOfPrimitives"""
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfPrimitives.Destroy = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Destroy, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.AddVertex = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddVertex, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.AddBound = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddBound, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.AddEdge = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddEdge, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Orientate = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Orientate, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.SetVertice = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertice, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.SetVertexColor = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexColor, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.SetVertexNormal = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexNormal, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.SetVertexTexel = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexTexel, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.SetBoundColor = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetBoundColor, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Array = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Array, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Type = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Type, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.StringType = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_StringType, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.HasVertexNormals = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexNormals, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.HasVertexColors = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexColors, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.HasVertexTexels = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexTexels, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.VertexNumber = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNumber, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Vertice = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Vertice, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.VertexColor = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexColor, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.VertexNormal = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNormal, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.VertexTexel = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexTexel, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.HasEdgeInfos = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasEdgeInfos, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.EdgeNumber = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeNumber, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Edge = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Edge, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.EdgeIsVisible = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeIsVisible, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.HasBoundColors = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasBoundColors, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.BoundNumber = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_BoundNumber, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.Bound = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_Bound, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.BoundColor = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_BoundColor, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.ItemNumber = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_ItemNumber, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.IsValid = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_IsValid, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives__kill_pointed, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPrimitives_GetHandle, None, Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives_swigregister = _Graphic3d.Graphic3d_ArrayOfPrimitives_swigregister
Graphic3d_ArrayOfPrimitives_swigregister(Graphic3d_ArrayOfPrimitives)

class Handle_Graphic3d_ArrayOfPrimitives(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfPrimitives(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfPrimitives.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Nullify, None, Handle_Graphic3d_ArrayOfPrimitives)
Handle_Graphic3d_ArrayOfPrimitives.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsNull, None, Handle_Graphic3d_ArrayOfPrimitives)
Handle_Graphic3d_ArrayOfPrimitives.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_GetObject, None, Handle_Graphic3d_ArrayOfPrimitives)
Handle_Graphic3d_ArrayOfPrimitives._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives__kill_pointed, None, Handle_Graphic3d_ArrayOfPrimitives)
Handle_Graphic3d_ArrayOfPrimitives_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_swigregister
Handle_Graphic3d_ArrayOfPrimitives_swigregister(Handle_Graphic3d_ArrayOfPrimitives)

def Handle_Graphic3d_ArrayOfPrimitives_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast(AnObject)
Handle_Graphic3d_ArrayOfPrimitives_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast

class Graphic3d_AspectFillArea3d(OCC.Aspect.Aspect_AspectFillArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context table for fill area primitives defined with the following default values:  InteriorStyle : IS_EMPTY InteriorColor : NOC_CYAN1 EdgeColor  : NOC_WHITE EdgeLineType : TOL_SOLID EdgeWidth  : 1.0 FrontMaterial : NOM_BRASS BackMaterial : NOM_BRASS  Display of back-facing filled polygons. No distinction between external and internal faces of FillAreas. The edges are not drawn. Polygon offset parameters: mode = Aspect_POM_None, factor = 1., units = 0.

        :rtype: None

        * Creates a context table for fill area primitives defined with the specified values.  Display of back-facing filled polygons. No distinction between external and internal faces of FillAreas. The edges are not drawn. Polygon offset parameters: mode = Aspect_POM_None, factor = 1., units = 0. Warning EdgeWidth is the 'line width scale factor'. The nominal line width is 1 pixel. The width of the line is determined by applying the line width scale factor to this nominal line width. The supported line widths vary by 1-pixel units.

        :param Interior:
        :type Interior: Aspect_InteriorStyle
        :param InteriorColor:
        :type InteriorColor: Quantity_Color &
        :param EdgeColor:
        :type EdgeColor: Quantity_Color &
        :param EdgeLineType:
        :type EdgeLineType: Aspect_TypeOfLine
        :param EdgeWidth:
        :type EdgeWidth: float
        :param FrontMaterial:
        :type FrontMaterial: Graphic3d_MaterialAspect &
        :param BackMaterial:
        :type BackMaterial: Graphic3d_MaterialAspect &
        :rtype: None

        """
        _Graphic3d.Graphic3d_AspectFillArea3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectFillArea3d(*args))

    def AllowBackFace(self, *args):
        """
        * Allows the display of back-facing filled polygons.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_AllowBackFace(self, *args)


    def SetBackMaterial(self, *args):
        """
        * Modifies the surface material of internal faces

        :param AMaterial:
        :type AMaterial: Graphic3d_MaterialAspect &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetBackMaterial(self, *args)


    def SetDistinguishOn(self, *args):
        """
        * Allows distinction between external and internal faces of FillAreas.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOn(self, *args)


    def SetDistinguishOff(self, *args):
        """
        * Forbids distinction between external and internal faces of FillAreas.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOff(self, *args)


    def SetEdgeOn(self, *args):
        """
        * The edges of FillAreas are drawn.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOn(self, *args)


    def SetEdgeOff(self, *args):
        """
        * The edges of FillAreas are not drawn.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOff(self, *args)


    def SetFrontMaterial(self, *args):
        """
        * Modifies the surface material of external faces

        :param AMaterial:
        :type AMaterial: Graphic3d_MaterialAspect &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetFrontMaterial(self, *args)


    def SuppressBackFace(self, *args):
        """
        * Suppress the display of back-facing filled polygons. A back-facing polygon is defined as a polygon whose vertices are in a clockwise order with respect to screen coordinates.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SuppressBackFace(self, *args)


    def SetTextureMap(self, *args):
        """
        :param ATexture:
        :type ATexture: Handle_Graphic3d_TextureMap &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMap(self, *args)


    def SetTextureMapOn(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOn(self, *args)


    def SetTextureMapOff(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOff(self, *args)


    def SetPolygonOffsets(self, *args):
        """
        * Sets up OpenGL polygon offsets mechanism. <aMode> parameter can contain various combinations of Aspect_PolygonOffsetMode enumeration elements (Aspect_POM_None means that polygon offsets are not changed). If <aMode> is different from Aspect_POM_Off and Aspect_POM_None, then <aFactor> and <aUnits> arguments are used by graphic renderer to calculate a depth offset value:  offset = <aFactor> * m + <aUnits> * r, where m - maximum depth slope for the polygon currently being displayed, r - minimum window coordinates depth resolution (implementation-specific)  Deafult settings for OCC 3D viewer: mode = Aspect_POM_Fill, factor = 1., units = 0.  Negative offset values move polygons closer to the viewport, while positive values shift polygons away. Consult OpenGL reference for details (glPolygonOffset function description).

        :param aMode:
        :type aMode: int
        :param aFactor: default value is 1.0
        :type aFactor: Standard_ShortReal
        :param aUnits: default value is 0.0
        :type aUnits: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetPolygonOffsets(self, *args)


    def SetShaderProgram(self, *args):
        """
        * Sets up OpenGL/GLSL shader program.

        :param theProgram:
        :type theProgram: Graphic3d_ShaderProgram_Handle &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetShaderProgram(self, *args)


    def BackFace(self, *args):
        """
        * Returns the Back Face Removal status. Standard_True if SuppressBackFace is activated.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_BackFace(self, *args)


    def Distinguish(self, *args):
        """
        * Returns the Distinguish Mode status.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_Distinguish(self, *args)


    def Edge(self, *args):
        """
        * Returns Standard_True if the edges are drawn and Standard_False if the edges are not drawn.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_Edge(self, *args)


    def BackMaterial(self, *args):
        """
        * Returns the surface material of internal faces

        :rtype: Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_BackMaterial(self, *args)


    def FrontMaterial(self, *args):
        """
        * Returns the surface material of external faces

        :rtype: Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_FrontMaterial(self, *args)


    def TextureMap(self, *args):
        """
        :rtype: Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_TextureMap(self, *args)


    def TextureMapState(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_TextureMapState(self, *args)


    def PolygonOffsets(self, *args):
        """
        * Returns current polygon offsets settings.

        :param aMode:
        :type aMode: int &
        :param aFactor:
        :type aFactor: Standard_ShortReal &
        :param aUnits:
        :type aUnits: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_PolygonOffsets(self, *args)


    def ShaderProgram(self, *args):
        """
        :rtype: Graphic3d_ShaderProgram_Handle

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ShaderProgram(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_AspectFillArea3d self)"""
        return _Graphic3d.Graphic3d_AspectFillArea3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_AspectFillArea3d self) -> Handle_Graphic3d_AspectFillArea3d"""
        return _Graphic3d.Graphic3d_AspectFillArea3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_AspectFillArea3d.AllowBackFace = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_AllowBackFace, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetBackMaterial = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetBackMaterial, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetDistinguishOn = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOn, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetDistinguishOff = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOff, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetEdgeOn = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOn, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetEdgeOff = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOff, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetFrontMaterial = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetFrontMaterial, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SuppressBackFace = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SuppressBackFace, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetTextureMap = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMap, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetTextureMapOn = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOn, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetTextureMapOff = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOff, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetPolygonOffsets = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetPolygonOffsets, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.SetShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_SetShaderProgram, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.BackFace = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_BackFace, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.Distinguish = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_Distinguish, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.Edge = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_Edge, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.BackMaterial = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_BackMaterial, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.FrontMaterial = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_FrontMaterial, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.TextureMap = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_TextureMap, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.TextureMapState = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_TextureMapState, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.PolygonOffsets = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_PolygonOffsets, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.ShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_ShaderProgram, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d__kill_pointed, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_AspectFillArea3d_GetHandle, None, Graphic3d_AspectFillArea3d)
Graphic3d_AspectFillArea3d_swigregister = _Graphic3d.Graphic3d_AspectFillArea3d_swigregister
Graphic3d_AspectFillArea3d_swigregister(Graphic3d_AspectFillArea3d)

class Handle_Graphic3d_AspectFillArea3d(OCC.Aspect.Handle_Aspect_AspectFillArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_AspectFillArea3d_swiginit(self, _Graphic3d.new_Handle_Graphic3d_AspectFillArea3d(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_AspectFillArea3d.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d_Nullify, None, Handle_Graphic3d_AspectFillArea3d)
Handle_Graphic3d_AspectFillArea3d.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d_IsNull, None, Handle_Graphic3d_AspectFillArea3d)
Handle_Graphic3d_AspectFillArea3d.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d_GetObject, None, Handle_Graphic3d_AspectFillArea3d)
Handle_Graphic3d_AspectFillArea3d._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d__kill_pointed, None, Handle_Graphic3d_AspectFillArea3d)
Handle_Graphic3d_AspectFillArea3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_swigregister
Handle_Graphic3d_AspectFillArea3d_swigregister(Handle_Graphic3d_AspectFillArea3d)

def Handle_Graphic3d_AspectFillArea3d_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast(AnObject)
Handle_Graphic3d_AspectFillArea3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast

class Graphic3d_AspectLine3d(OCC.Aspect.Aspect_AspectLine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context table for line primitives //!	 defined with the following default values: //!	 Colour	: NOC_YELLOW //!	 Line type	: TOL_SOLID //!	 Width	: 1.0

        :rtype: None

        * Creates a context table for line primitives //!	 defined with the specified values. Warning: <AWidth> is the 'linewidth scale factor'. //!	 The nominal line width is 1 pixel. The width of //!	 the line is determined by applying the linewidth scale //!	 factor to this nominal line width. //!	 The supported linewidths vary by 1-pixel units.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine
        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        _Graphic3d.Graphic3d_AspectLine3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectLine3d(*args))

    def SetShaderProgram(self, *args):
        """
        * Sets up OpenGL/GLSL shader program.

        :param theProgram:
        :type theProgram: Graphic3d_ShaderProgram_Handle &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectLine3d_SetShaderProgram(self, *args)


    def ShaderProgram(self, *args):
        """
        :rtype: Graphic3d_ShaderProgram_Handle

        """
        return _Graphic3d.Graphic3d_AspectLine3d_ShaderProgram(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_AspectLine3d self)"""
        return _Graphic3d.Graphic3d_AspectLine3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_AspectLine3d self) -> Handle_Graphic3d_AspectLine3d"""
        return _Graphic3d.Graphic3d_AspectLine3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_AspectLine3d.SetShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectLine3d_SetShaderProgram, None, Graphic3d_AspectLine3d)
Graphic3d_AspectLine3d.ShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectLine3d_ShaderProgram, None, Graphic3d_AspectLine3d)
Graphic3d_AspectLine3d._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_AspectLine3d__kill_pointed, None, Graphic3d_AspectLine3d)
Graphic3d_AspectLine3d.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_AspectLine3d_GetHandle, None, Graphic3d_AspectLine3d)
Graphic3d_AspectLine3d_swigregister = _Graphic3d.Graphic3d_AspectLine3d_swigregister
Graphic3d_AspectLine3d_swigregister(Graphic3d_AspectLine3d)

class Handle_Graphic3d_AspectLine3d(OCC.Aspect.Handle_Aspect_AspectLine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_AspectLine3d_swiginit(self, _Graphic3d.new_Handle_Graphic3d_AspectLine3d(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_AspectLine3d.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectLine3d_Nullify, None, Handle_Graphic3d_AspectLine3d)
Handle_Graphic3d_AspectLine3d.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectLine3d_IsNull, None, Handle_Graphic3d_AspectLine3d)
Handle_Graphic3d_AspectLine3d.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectLine3d_GetObject, None, Handle_Graphic3d_AspectLine3d)
Handle_Graphic3d_AspectLine3d._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectLine3d__kill_pointed, None, Handle_Graphic3d_AspectLine3d)
Handle_Graphic3d_AspectLine3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectLine3d_swigregister
Handle_Graphic3d_AspectLine3d_swigregister(Handle_Graphic3d_AspectLine3d)

def Handle_Graphic3d_AspectLine3d_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast(AnObject)
Handle_Graphic3d_AspectLine3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast

class Graphic3d_AspectMarker3d(OCC.Aspect.Aspect_AspectMarker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context table for marker primitives defined with the following default values:  Marker type : TOM_X Colour : YELLOW Scale factor: 1.0

        :rtype: None

        :param theType:
        :type theType: Aspect_TypeOfMarker
        :param theColor:
        :type theColor: Quantity_Color &
        :param theScale:
        :type theScale: float
        :rtype: None

        * Creates a context table for marker primitives defined with the specified values.

        :param theColor:
        :type theColor: Quantity_Color &
        :param theWidth:
        :type theWidth: int
        :param theHeight:
        :type theHeight: int
        :param theTextureBitmap:
        :type theTextureBitmap: Handle_TColStd_HArray1OfByte &
        :rtype: None

        * Creates a context table for marker primitives defined with the specified values.

        :param theTextureImage:
        :type theTextureImage: Image_PixMap_Handle &
        :rtype: None

        """
        _Graphic3d.Graphic3d_AspectMarker3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectMarker3d(*args))

    def GetTextureSize(self, *args):
        """
        * Returns marker's texture size.

        :param theWidth:
        :type theWidth: int &
        :param theHeight:
        :type theHeight: int &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_GetTextureSize(self, *args)


    def GetMarkerImage(self, *args):
        """
        * Returns marker's image texture. Could be null handle if marker aspect has been initialized as default type of marker.

        :rtype: Graphic3d_MarkerImage_Handle

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_GetMarkerImage(self, *args)


    def SetBitMap(self, *args):
        """
        :param theWidth:
        :type theWidth: int
        :param theHeight:
        :type theHeight: int
        :param theTexture:
        :type theTexture: Handle_TColStd_HArray1OfByte &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetBitMap(self, *args)


    def SetShaderProgram(self, *args):
        """
        * Sets up OpenGL/GLSL shader program.

        :param theProgram:
        :type theProgram: Graphic3d_ShaderProgram_Handle &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetShaderProgram(self, *args)


    def ShaderProgram(self, *args):
        """
        :rtype: Graphic3d_ShaderProgram_Handle

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_ShaderProgram(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_AspectMarker3d self)"""
        return _Graphic3d.Graphic3d_AspectMarker3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_AspectMarker3d self) -> Handle_Graphic3d_AspectMarker3d"""
        return _Graphic3d.Graphic3d_AspectMarker3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_AspectMarker3d.GetTextureSize = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_GetTextureSize, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d.GetMarkerImage = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_GetMarkerImage, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d.SetBitMap = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_SetBitMap, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d.SetShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_SetShaderProgram, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d.ShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_ShaderProgram, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d__kill_pointed, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_AspectMarker3d_GetHandle, None, Graphic3d_AspectMarker3d)
Graphic3d_AspectMarker3d_swigregister = _Graphic3d.Graphic3d_AspectMarker3d_swigregister
Graphic3d_AspectMarker3d_swigregister(Graphic3d_AspectMarker3d)

class Handle_Graphic3d_AspectMarker3d(OCC.Aspect.Handle_Aspect_AspectMarker):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_AspectMarker3d_swiginit(self, _Graphic3d.new_Handle_Graphic3d_AspectMarker3d(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_AspectMarker3d.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d_Nullify, None, Handle_Graphic3d_AspectMarker3d)
Handle_Graphic3d_AspectMarker3d.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d_IsNull, None, Handle_Graphic3d_AspectMarker3d)
Handle_Graphic3d_AspectMarker3d.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d_GetObject, None, Handle_Graphic3d_AspectMarker3d)
Handle_Graphic3d_AspectMarker3d._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d__kill_pointed, None, Handle_Graphic3d_AspectMarker3d)
Handle_Graphic3d_AspectMarker3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectMarker3d_swigregister
Handle_Graphic3d_AspectMarker3d_swigregister(Handle_Graphic3d_AspectMarker3d)

def Handle_Graphic3d_AspectMarker3d_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast(AnObject)
Handle_Graphic3d_AspectMarker3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast

class Graphic3d_AspectText3d(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context table for text primitives defined with the following default values: Colour  : NOC_YELLOW Font  : NOF_ASCII_MONO Expansion factor : 1. Space between characters : 0. The style  : TOST_NORMAL The display type : TODT_NORMAL

        :rtype: None

        * Creates a context table for text primitives defined with the specified values. AFont may be to take means from User(example 'Courier New') or Font name defined in Font_NameOfFont(example Font_NOF_ASCII_MONO) or use default font('Courier')

        :param AColor:
        :type AColor: Quantity_Color &
        :param AFont:
        :type AFont: char *
        :param AExpansionFactor:
        :type AExpansionFactor: float
        :param ASpace:
        :type ASpace: float
        :param AStyle: default value is Aspect_TOST_NORMAL
        :type AStyle: Aspect_TypeOfStyleText
        :param ADisplayType: default value is Aspect_TODT_NORMAL
        :type ADisplayType: Aspect_TypeOfDisplayText
        :rtype: None

        """
        _Graphic3d.Graphic3d_AspectText3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectText3d(*args))

    def SetColor(self, *args):
        """
        * Modifies the colour of <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetColor(self, *args)


    def SetExpansionFactor(self, *args):
        """
        * Modifies the expansion factor (height/width ratio) If the factor is less than 1, the characters will be higher than they are wide.

        :param AFactor:
        :type AFactor: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetExpansionFactor(self, *args)


    def SetFont(self, *args):
        """
        * Modifies the font of <self>.

        :param AFont:
        :type AFont: char *
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetFont(self, *args)


    def SetSpace(self, *args):
        """
        * Modifies the space between the characters.

        :param ASpace:
        :type ASpace: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetSpace(self, *args)


    def SetStyle(self, *args):
        """
        * Modifies the style of the text. TOST_NORMAL Default text. The text is displayed like any other graphic object. This text can be hidden by another object that is nearest from the point of view. TOST_ANNOTATION The text is always visible. The texte is displayed over the other object according to the priority.

        :param AStyle:
        :type AStyle: Aspect_TypeOfStyleText
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetStyle(self, *args)


    def SetDisplayType(self, *args):
        """
        * Define the display type of the text. TODT_NORMAL Default display. Text only. TODT_SUBTITLE There is a subtitle under the text. TODT_DEKALE The text is displayed with a 3D style. TODT_BLEND The text is displayed in XOR. TODT_DIMENSION Dimension line under text will be invisible.

        :param ADisplayType:
        :type ADisplayType: Aspect_TypeOfDisplayText
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetDisplayType(self, *args)


    def SetColorSubTitle(self, *args):
        """
        * Modifies the colour of the subtitle for the TODT_SUBTITLE TextDisplayType  and the colour of backgroubd for the TODT_DEKALE TextDisplayType.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetColorSubTitle(self, *args)


    def SetTextZoomable(self, *args):
        """
        * Turns usage of text zoomable on/off

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextZoomable(self, *args)


    def GetTextZoomable(self, *args):
        """
        * Returns True when the Text Zoomable is on.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextZoomable(self, *args)


    def SetTextAngle(self, *args):
        """
        * Turns usage of text rotated

        :param AAngle:
        :type AAngle: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextAngle(self, *args)


    def GetTextAngle(self, *args):
        """
        * Returns Angle of degree

        :rtype: float

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextAngle(self, *args)


    def SetTextFontAspect(self, *args):
        """
        * Turns usage of Aspect text

        :param AFontAspect:
        :type AFontAspect: Font_FontAspect
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextFontAspect(self, *args)


    def GetTextFontAspect(self, *args):
        """
        * Returns text FontAspect

        :rtype: Font_FontAspect

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextFontAspect(self, *args)


    def SetShaderProgram(self, *args):
        """
        * Sets up OpenGL/GLSL shader program.

        :param theProgram:
        :type theProgram: Graphic3d_ShaderProgram_Handle &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetShaderProgram(self, *args)


    def ShaderProgram(self, *args):
        """
        :rtype: Graphic3d_ShaderProgram_Handle

        """
        return _Graphic3d.Graphic3d_AspectText3d_ShaderProgram(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_AspectText3d self)"""
        return _Graphic3d.Graphic3d_AspectText3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_AspectText3d self) -> Handle_Graphic3d_AspectText3d"""
        return _Graphic3d.Graphic3d_AspectText3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_AspectText3d.SetColor = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetColor, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetExpansionFactor = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetExpansionFactor, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetFont = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetFont, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetSpace = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetSpace, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetStyle = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetStyle, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetDisplayType = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetDisplayType, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetColorSubTitle = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetColorSubTitle, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetTextZoomable = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetTextZoomable, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.GetTextZoomable = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_GetTextZoomable, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetTextAngle = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetTextAngle, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.GetTextAngle = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_GetTextAngle, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetTextFontAspect = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetTextFontAspect, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.GetTextFontAspect = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_GetTextFontAspect, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.SetShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_SetShaderProgram, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.ShaderProgram = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_ShaderProgram, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d__kill_pointed, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_AspectText3d_GetHandle, None, Graphic3d_AspectText3d)
Graphic3d_AspectText3d_swigregister = _Graphic3d.Graphic3d_AspectText3d_swigregister
Graphic3d_AspectText3d_swigregister(Graphic3d_AspectText3d)

class Handle_Graphic3d_AspectText3d(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_AspectText3d_swiginit(self, _Graphic3d.new_Handle_Graphic3d_AspectText3d(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectText3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_AspectText3d.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectText3d_Nullify, None, Handle_Graphic3d_AspectText3d)
Handle_Graphic3d_AspectText3d.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectText3d_IsNull, None, Handle_Graphic3d_AspectText3d)
Handle_Graphic3d_AspectText3d.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectText3d_GetObject, None, Handle_Graphic3d_AspectText3d)
Handle_Graphic3d_AspectText3d._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_AspectText3d__kill_pointed, None, Handle_Graphic3d_AspectText3d)
Handle_Graphic3d_AspectText3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectText3d_swigregister
Handle_Graphic3d_AspectText3d_swigregister(Handle_Graphic3d_AspectText3d)

def Handle_Graphic3d_AspectText3d_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_AspectText3d_DownCast(AnObject)
Handle_Graphic3d_AspectText3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectText3d_DownCast

class Graphic3d_CBitFields16(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CBitFields16._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CBitFields16__kill_pointed, None, Graphic3d_CBitFields16)
Graphic3d_CBitFields16_swigregister = _Graphic3d.Graphic3d_CBitFields16_swigregister
Graphic3d_CBitFields16_swigregister(Graphic3d_CBitFields16)

class Graphic3d_CBitFields20(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CBitFields20._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CBitFields20__kill_pointed, None, Graphic3d_CBitFields20)
Graphic3d_CBitFields20_swigregister = _Graphic3d.Graphic3d_CBitFields20_swigregister
Graphic3d_CBitFields20_swigregister(Graphic3d_CBitFields20)

class Graphic3d_CBitFields4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CBitFields4._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CBitFields4__kill_pointed, None, Graphic3d_CBitFields4)
Graphic3d_CBitFields4_swigregister = _Graphic3d.Graphic3d_CBitFields4_swigregister
Graphic3d_CBitFields4_swigregister(Graphic3d_CBitFields4)

class Graphic3d_CBitFields8(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CBitFields8._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CBitFields8__kill_pointed, None, Graphic3d_CBitFields8)
Graphic3d_CBitFields8_swigregister = _Graphic3d.Graphic3d_CBitFields8_swigregister
Graphic3d_CBitFields8_swigregister(Graphic3d_CBitFields8)

class Graphic3d_CGraduatedTrihedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_CGraduatedTrihedron_swiginit(self, _Graphic3d.new_Graphic3d_CGraduatedTrihedron(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CGraduatedTrihedron._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CGraduatedTrihedron__kill_pointed, None, Graphic3d_CGraduatedTrihedron)
Graphic3d_CGraduatedTrihedron_swigregister = _Graphic3d.Graphic3d_CGraduatedTrihedron_swigregister
Graphic3d_CGraduatedTrihedron_swigregister(Graphic3d_CGraduatedTrihedron)

class Graphic3d_CGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CGroup__kill_pointed, None, Graphic3d_CGroup)
Graphic3d_CGroup_swigregister = _Graphic3d.Graphic3d_CGroup_swigregister
Graphic3d_CGroup_swigregister(Graphic3d_CGroup)

class Graphic3d_CLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConstAttenuation(self, *args):
        """
        * //!< flag to mark head light Const attenuation factor of positional light source

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ConstAttenuation(self, *args)


    def LinearAttenuation(self, *args):
        """
        * Linear attenuation factor of positional light source

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_LinearAttenuation(self, *args)


    def Attenuation(self, *args):
        """
        * Const, Linear attenuation factors of positional light source

        :rtype: Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_CLight_Attenuation(self, *args)


    def Angle(self, *args):
        """
        * Angle in radians of the cone created by the spot

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Angle(self, *args)


    def Concentration(self, *args):
        """
        * Intensity distribution of the spot light, with 0..1 range.

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Concentration(self, *args)


    def ChangeConstAttenuation(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ChangeConstAttenuation(self, *args)


    def ChangeLinearAttenuation(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ChangeLinearAttenuation(self, *args)


    def ChangeAttenuation(self, *args):
        """
        :rtype: Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_CLight_ChangeAttenuation(self, *args)


    def ChangeAngle(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ChangeAngle(self, *args)


    def ChangeConcentration(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ChangeConcentration(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _Graphic3d.Graphic3d_CLight_swiginit(self, _Graphic3d.new_Graphic3d_CLight(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CLight.ConstAttenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_ConstAttenuation, None, Graphic3d_CLight)
Graphic3d_CLight.LinearAttenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_LinearAttenuation, None, Graphic3d_CLight)
Graphic3d_CLight.Attenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_Attenuation, None, Graphic3d_CLight)
Graphic3d_CLight.Angle = new_instancemethod(_Graphic3d.Graphic3d_CLight_Angle, None, Graphic3d_CLight)
Graphic3d_CLight.Concentration = new_instancemethod(_Graphic3d.Graphic3d_CLight_Concentration, None, Graphic3d_CLight)
Graphic3d_CLight.ChangeConstAttenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_ChangeConstAttenuation, None, Graphic3d_CLight)
Graphic3d_CLight.ChangeLinearAttenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_ChangeLinearAttenuation, None, Graphic3d_CLight)
Graphic3d_CLight.ChangeAttenuation = new_instancemethod(_Graphic3d.Graphic3d_CLight_ChangeAttenuation, None, Graphic3d_CLight)
Graphic3d_CLight.ChangeAngle = new_instancemethod(_Graphic3d.Graphic3d_CLight_ChangeAngle, None, Graphic3d_CLight)
Graphic3d_CLight.ChangeConcentration = new_instancemethod(_Graphic3d.Graphic3d_CLight_ChangeConcentration, None, Graphic3d_CLight)
Graphic3d_CLight._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CLight__kill_pointed, None, Graphic3d_CLight)
Graphic3d_CLight_swigregister = _Graphic3d.Graphic3d_CLight_swigregister
Graphic3d_CLight_swigregister(Graphic3d_CLight)

class Graphic3d_CStructure(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CStructure__kill_pointed, None, Graphic3d_CStructure)
Graphic3d_CStructure_swigregister = _Graphic3d.Graphic3d_CStructure_swigregister
Graphic3d_CStructure_swigregister(Graphic3d_CStructure)

class Graphic3d_CTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_CTexture_swiginit(self, _Graphic3d.new_Graphic3d_CTexture(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CTexture._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CTexture__kill_pointed, None, Graphic3d_CTexture)
Graphic3d_CTexture_swigregister = _Graphic3d.Graphic3d_CTexture_swigregister
Graphic3d_CTexture_swigregister(Graphic3d_CTexture)

class Graphic3d_CView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_CView_swiginit(self, _Graphic3d.new_Graphic3d_CView(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_CView._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_CView__kill_pointed, None, Graphic3d_CView)
Graphic3d_CView_swigregister = _Graphic3d.Graphic3d_CView_swigregister
Graphic3d_CView_swigregister(Graphic3d_CView)

class Graphic3d_DataStructureManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        * Deletes the manager <self>.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_DataStructureManager_Destroy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_DataStructureManager self)"""
        return _Graphic3d.Graphic3d_DataStructureManager__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_DataStructureManager self) -> Handle_Graphic3d_DataStructureManager"""
        return _Graphic3d.Graphic3d_DataStructureManager_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_DataStructureManager.Destroy = new_instancemethod(_Graphic3d.Graphic3d_DataStructureManager_Destroy, None, Graphic3d_DataStructureManager)
Graphic3d_DataStructureManager._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_DataStructureManager__kill_pointed, None, Graphic3d_DataStructureManager)
Graphic3d_DataStructureManager.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_DataStructureManager_GetHandle, None, Graphic3d_DataStructureManager)
Graphic3d_DataStructureManager_swigregister = _Graphic3d.Graphic3d_DataStructureManager_swigregister
Graphic3d_DataStructureManager_swigregister(Graphic3d_DataStructureManager)

class Handle_Graphic3d_DataStructureManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_DataStructureManager_swiginit(self, _Graphic3d.new_Handle_Graphic3d_DataStructureManager(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_DataStructureManager.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_DataStructureManager_Nullify, None, Handle_Graphic3d_DataStructureManager)
Handle_Graphic3d_DataStructureManager.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_DataStructureManager_IsNull, None, Handle_Graphic3d_DataStructureManager)
Handle_Graphic3d_DataStructureManager.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_DataStructureManager_GetObject, None, Handle_Graphic3d_DataStructureManager)
Handle_Graphic3d_DataStructureManager._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_DataStructureManager__kill_pointed, None, Handle_Graphic3d_DataStructureManager)
Handle_Graphic3d_DataStructureManager_swigregister = _Graphic3d.Handle_Graphic3d_DataStructureManager_swigregister
Handle_Graphic3d_DataStructureManager_swigregister(Handle_Graphic3d_DataStructureManager)

def Handle_Graphic3d_DataStructureManager_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast(AnObject)
Handle_Graphic3d_DataStructureManager_DownCast = _Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast

class Graphic3d_GraphicDriver(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Begin(self, *args):
        """
        * Starts graphic driver with given connection

        :param theDisplayConnection:
        :type theDisplayConnection: Aspect_DisplayConnection_Handle &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Begin(self, *args)


    def End(self, *args):
        """
        * call_togl_end

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_End(self, *args)


    def InquireLightLimit(self, *args):
        """
        * call_togl_inquirelight

        :rtype: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireLightLimit(self, *args)


    def InquireMat(self, *args):
        """
        * call_togl_inquiremat

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AMatO:
        :type AMatO: TColStd_Array2OfReal &
        :param AMatM:
        :type AMatM: TColStd_Array2OfReal &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireMat(self, *args)


    def InquirePlaneLimit(self, *args):
        """
        * call_togl_inquireplane

        :rtype: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquirePlaneLimit(self, *args)


    def InquireViewLimit(self, *args):
        """
        * call_togl_inquireview

        :rtype: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireViewLimit(self, *args)


    def Blink(self, *args):
        """
        * call_togl_blink

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :param Create:
        :type Create: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Blink(self, *args)


    def BoundaryBox(self, *args):
        """
        * call_togl_boundarybox

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :param Create:
        :type Create: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BoundaryBox(self, *args)


    def HighlightColor(self, *args):
        """
        * call_togl_highlightcolor

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :param R:
        :type R: Standard_ShortReal
        :param G:
        :type G: Standard_ShortReal
        :param B:
        :type B: Standard_ShortReal
        :param Create:
        :type Create: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_HighlightColor(self, *args)


    def NameSetStructure(self, *args):
        """
        * call_togl_namesetstructure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_NameSetStructure(self, *args)


    def ClearGroup(self, *args):
        """
        * call_togl_cleargroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ClearGroup(self, *args)


    def FaceContextGroup(self, *args):
        """
        * call_togl_facecontextgroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param NoInsert:
        :type NoInsert: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_FaceContextGroup(self, *args)


    def Group(self, *args):
        """
        * call_togl_group

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Group(self, *args)


    def LineContextGroup(self, *args):
        """
        * call_togl_linecontextgroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param NoInsert:
        :type NoInsert: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_LineContextGroup(self, *args)


    def MarkerContextGroup(self, *args):
        """
        * call_togl_markercontextgroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param NoInsert:
        :type NoInsert: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_MarkerContextGroup(self, *args)


    def RemoveGroup(self, *args):
        """
        * call_togl_removegroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveGroup(self, *args)


    def TextContextGroup(self, *args):
        """
        * call_togl_textcontextgroup

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param NoInsert:
        :type NoInsert: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TextContextGroup(self, *args)


    def ClearStructure(self, *args):
        """
        * call_togl_clearstructure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ClearStructure(self, *args)


    def Connect(self, *args):
        """
        * call_togl_connect

        :param AFather:
        :type AFather: Graphic3d_CStructure &
        :param ASon:
        :type ASon: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Connect(self, *args)


    def ContextStructure(self, *args):
        """
        * call_togl_contextstructure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ContextStructure(self, *args)


    def Disconnect(self, *args):
        """
        * call_togl_disconnect

        :param AFather:
        :type AFather: Graphic3d_CStructure &
        :param ASon:
        :type ASon: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Disconnect(self, *args)


    def DisplayStructure(self, *args):
        """
        * call_togl_displaystructure

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :param APriority:
        :type APriority: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DisplayStructure(self, *args)


    def EraseStructure(self, *args):
        """
        * call_togl_erasestructure

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EraseStructure(self, *args)


    def RemoveStructure(self, *args):
        """
        * call_togl_removestructure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveStructure(self, *args)


    def Structure(self, *args):
        """
        * call_togl_structure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Structure(self, *args)


    def ActivateView(self, *args):
        """
        * call_togl_activateview

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ActivateView(self, *args)


    def AntiAliasing(self, *args):
        """
        * call_togl_antialiasing

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AFlag:
        :type AFlag: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_AntiAliasing(self, *args)


    def Background(self, *args):
        """
        * call_togl_background

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Background(self, *args)


    def GradientBackground(self, *args):
        """
        * call_togl_gradient_background

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :param FillStyle:
        :type FillStyle: Aspect_GradientFillMethod
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GradientBackground(self, *args)


    def BackgroundImage(self, *args):
        """
        :param FileName:
        :type FileName: char *
        :param ACView:
        :type ACView: Graphic3d_CView &
        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BackgroundImage(self, *args)


    def SetBgImageStyle(self, *args):
        """
        :param ACView:
        :type ACView: Graphic3d_CView &
        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetBgImageStyle(self, *args)


    def SetBgGradientStyle(self, *args):
        """
        :param ACView:
        :type ACView: Graphic3d_CView &
        :param FillStyle:
        :type FillStyle: Aspect_GradientFillMethod
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetBgGradientStyle(self, *args)


    def ClipLimit(self, *args):
        """
        * call_togl_cliplimit

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AWait:
        :type AWait: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ClipLimit(self, *args)


    def DeactivateView(self, *args):
        """
        * call_togl_deactivateview

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DeactivateView(self, *args)


    def DepthCueing(self, *args):
        """
        * call_togl_cliplimit

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AFlag:
        :type AFlag: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DepthCueing(self, *args)


    def ProjectRaster(self, *args):
        """
        * call_togl_unproject_raster

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AX:
        :type AX: Standard_ShortReal
        :param AY:
        :type AY: Standard_ShortReal
        :param AZ:
        :type AZ: Standard_ShortReal
        :param AU:
        :type AU: int &
        :param AV:
        :type AV: int &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ProjectRaster(self, *args)


    def UnProjectRaster(self, *args):
        """
        * call_togl_unproject_raster

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param Axm:
        :type Axm: int
        :param Aym:
        :type Aym: int
        :param AXM:
        :type AXM: int
        :param AYM:
        :type AYM: int
        :param AU:
        :type AU: int
        :param AV:
        :type AV: int
        :param AX:
        :type AX: Standard_ShortReal &
        :param AY:
        :type AY: Standard_ShortReal &
        :param AZ:
        :type AZ: Standard_ShortReal &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_UnProjectRaster(self, *args)


    def UnProjectRasterWithRay(self, *args):
        """
        * call_togl_unproject_raster_with_ray

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param Axm:
        :type Axm: int
        :param Aym:
        :type Aym: int
        :param AXM:
        :type AXM: int
        :param AYM:
        :type AYM: int
        :param AU:
        :type AU: int
        :param AV:
        :type AV: int
        :param AX:
        :type AX: Standard_ShortReal &
        :param AY:
        :type AY: Standard_ShortReal &
        :param AZ:
        :type AZ: Standard_ShortReal &
        :param DX:
        :type DX: Standard_ShortReal &
        :param DY:
        :type DY: Standard_ShortReal &
        :param DZ:
        :type DZ: Standard_ShortReal &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_UnProjectRasterWithRay(self, *args)


    def RatioWindow(self, *args):
        """
        * call_togl_ratio_window

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RatioWindow(self, *args)


    def Redraw(self, *args):
        """
        * call_togl_redraw Warning: when the redraw area has a null size, the full view is redrawn

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param ACUnderLayer:
        :type ACUnderLayer: Aspect_CLayer2d &
        :param ACOverLayer:
        :type ACOverLayer: Aspect_CLayer2d &
        :param x: default value is 0
        :type x: int
        :param y: default value is 0
        :type y: int
        :param width: default value is 0
        :type width: int
        :param height: default value is 0
        :type height: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Redraw(self, *args)


    def RemoveView(self, *args):
        """
        * call_togl_removeview

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveView(self, *args)


    def SetLight(self, *args):
        """
        * call_togl_setlight

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetLight(self, *args)


    def SetClipPlanes(self, *args):
        """
        * Pass clip planes to the associated graphic driver view.

        :param theCView:
        :type theCView: Graphic3d_CView &
        :rtype: void

        * Pass clip planes to the associated graphic driver structure.

        :param theCStructure:
        :type theCStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetClipPlanes(self, *args)


    def SetVisualisation(self, *args):
        """
        * call_togl_setvisualisation

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetVisualisation(self, *args)


    def TransformStructure(self, *args):
        """
        * call_togl_transformstructure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TransformStructure(self, *args)


    def Transparency(self, *args):
        """
        * call_togl_transparency

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AFlag:
        :type AFlag: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Transparency(self, *args)


    def Update(self, *args):
        """
        * call_togl_update

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param ACUnderLayer:
        :type ACUnderLayer: Aspect_CLayer2d &
        :param ACOverLayer:
        :type ACOverLayer: Aspect_CLayer2d &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Update(self, *args)


    def View(self, *args):
        """
        * call_togl_view

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_View(self, *args)


    def ViewMapping(self, *args):
        """
        * call_togl_viewmapping

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AWait:
        :type AWait: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ViewMapping(self, *args)


    def ViewOrientation(self, *args):
        """
        * call_togl_vieworientation

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AWait:
        :type AWait: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ViewOrientation(self, *args)


    def Environment(self, *args):
        """
        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Environment(self, *args)


    def SetStencilTestOptions(self, *args):
        """
        * sets the stencil test to theIsEnabled state;

        :param theCGroup:
        :type theCGroup: Graphic3d_CGroup &
        :param theIsEnabled:
        :type theIsEnabled: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetStencilTestOptions(self, *args)


    def SetFlippingOptions(self, *args):
        """
        * sets the flipping to theIsEnabled state for the given graphic group.

        :param theCGroup:
        :type theCGroup: Graphic3d_CGroup &
        :param theIsEnabled:
        :type theIsEnabled: bool
        :param theRefPlane:
        :type theRefPlane: gp_Ax2
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetFlippingOptions(self, *args)


    def PrimitiveArray(self, *args):
        """
        * call_togl_parray

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param parray:
        :type parray: Graphic3d_PrimitiveArray &
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrimitiveArray(self, *args)


    def UserDraw(self, *args):
        """
        * call_togl_userdraw

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AUserDraw:
        :type AUserDraw: Graphic3d_CUserDraw &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_UserDraw(self, *args)


    def EnableVBO(self, *args):
        """
        * enables/disables usage of OpenGL vertex buffer arrays while drawing primitiev arrays

        :param status:
        :type status: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EnableVBO(self, *args)


    def MemoryInfo(self, *args):
        """
        * Returns information about GPU memory usage.

        :param theFreeBytes:
        :type theFreeBytes: Standard_Size &
        :param theInfo:
        :type theInfo: TCollection_AsciiString &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_MemoryInfo(self, *args)


    def ZBufferTriedronSetup(self, *args):
        """
        * call_togl_ztriedron_setup

        :param XColor: default value is Quantity_NOC_RED
        :type XColor: Quantity_NameOfColor
        :param YColor: default value is Quantity_NOC_GREEN
        :type YColor: Quantity_NameOfColor
        :param ZColor: default value is Quantity_NOC_BLUE1
        :type ZColor: Quantity_NameOfColor
        :param SizeRatio: default value is 0.8
        :type SizeRatio: float
        :param AxisDiametr: default value is 0.05
        :type AxisDiametr: float
        :param NbFacettes: default value is 12
        :type NbFacettes: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ZBufferTriedronSetup(self, *args)


    def TriedronDisplay(self, *args):
        """
        * call_togl_triedron_display

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param APosition: default value is Aspect_TOTP_CENTER
        :type APosition: Aspect_TypeOfTriedronPosition
        :param AColor: default value is Quantity_NOC_WHITE
        :type AColor: Quantity_NameOfColor
        :param AScale: default value is 0.02
        :type AScale: float
        :param AsWireframe: default value is Standard_True
        :type AsWireframe: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TriedronDisplay(self, *args)


    def TriedronErase(self, *args):
        """
        * call_togl_triedron_erase

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TriedronErase(self, *args)


    def TriedronEcho(self, *args):
        """
        * call_togl_triedron_echo

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AType: default value is Aspect_TOTE_NONE
        :type AType: Aspect_TypeOfTriedronEcho
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TriedronEcho(self, *args)


    def GraduatedTrihedronDisplay(self, *args):
        """
        * call_togl_graduatedtrihedron_display

        :param view:
        :type view: Graphic3d_CView &
        :param cubic:
        :type cubic: Graphic3d_CGraduatedTrihedron &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronDisplay(self, *args)


    def GraduatedTrihedronErase(self, *args):
        """
        * call_togl_graduatedtrihedron_erase

        :param view:
        :type view: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronErase(self, *args)


    def GraduatedTrihedronMinMaxValues(self, *args):
        """
        * call_togl_graduatedtrihedron_minmaxvalues

        :param xmin:
        :type xmin: Standard_ShortReal
        :param ymin:
        :type ymin: Standard_ShortReal
        :param zmin:
        :type zmin: Standard_ShortReal
        :param xmax:
        :type xmax: Standard_ShortReal
        :param ymax:
        :type ymax: Standard_ShortReal
        :param zmax:
        :type zmax: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronMinMaxValues(self, *args)


    def BeginAddMode(self, *args):
        """
        * call_togl_begin_ajout_mode

        :param ACView:
        :type ACView: Graphic3d_CView &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BeginAddMode(self, *args)


    def EndAddMode(self, *args):
        """
        * call_togl_end_ajout_mode

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EndAddMode(self, *args)


    def SetImmediateModeDrawToFront(self, *args):
        """
        * @param theDrawToFrontBuffer Advanced option to modify rendering mode: 1. True. Drawing immediate mode structures directly to the front buffer over the scene image. Fast, so preferred for interactive work (used by default). However these extra drawings will be missed in image dump since it is performed from back buffer. Notice that since no pre-buffering used the V-Sync will be ignored and rendering could be seen in run-time (in case of slow hardware) and/or tearing may appear. So this is strongly recommended to draw only simple (fast) structures. 2. False. Drawing immediate mode structures to the back buffer. The complete scene is redrawn first, so this mode is slower if scene contains complex data and/or V-Sync is turned on. But it works in any case and is especially useful for view dump because the dump image is read from the back buffer. returns previous mode.

        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theDrawToFrontBuffer:
        :type theDrawToFrontBuffer: bool
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetImmediateModeDrawToFront(self, *args)


    def BeginImmediatMode(self, *args):
        """
        * call_togl_begin_immediat_mode

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param ACUnderLayer:
        :type ACUnderLayer: Aspect_CLayer2d &
        :param ACOverLayer:
        :type ACOverLayer: Aspect_CLayer2d &
        :param DoubleBuffer:
        :type DoubleBuffer: bool
        :param RetainMode:
        :type RetainMode: bool
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BeginImmediatMode(self, *args)


    def ClearImmediatMode(self, *args):
        """
        * call_togl_clear_immediat_mode

        :param ACView:
        :type ACView: Graphic3d_CView &
        :param aFlush: default value is Standard_True
        :type aFlush: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ClearImmediatMode(self, *args)


    def DrawStructure(self, *args):
        """
        * call_togl_draw_structure

        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DrawStructure(self, *args)


    def EndImmediatMode(self, *args):
        """
        * call_togl_end_immediat_mode

        :param Synchronize:
        :type Synchronize: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EndImmediatMode(self, *args)


    def Layer(self, *args):
        """
        * call_togl_layer2d

        :param ACLayer:
        :type ACLayer: Aspect_CLayer2d &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Layer(self, *args)


    def RemoveLayer(self, *args):
        """
        * call_togl_removelayer2d

        :param ACLayer:
        :type ACLayer: Aspect_CLayer2d &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveLayer(self, *args)


    def BeginLayer(self, *args):
        """
        * call_togl_begin_layer2d

        :param ACLayer:
        :type ACLayer: Aspect_CLayer2d &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BeginLayer(self, *args)


    def BeginPolygon2d(self, *args):
        """
        * call_togl_begin_polygon2d

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BeginPolygon2d(self, *args)


    def BeginPolyline2d(self, *args):
        """
        * call_togl_begin_polyline2d

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BeginPolyline2d(self, *args)


    def ClearLayer(self, *args):
        """
        * call_togl_clear_layer2d

        :param ACLayer:
        :type ACLayer: Aspect_CLayer2d &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ClearLayer(self, *args)


    def Draw(self, *args):
        """
        * call_togl_draw2d

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Draw(self, *args)


    def Edge(self, *args):
        """
        * call_togl_edge2d

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Edge(self, *args)


    def EndLayer(self, *args):
        """
        * call_togl_end_layer2d

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EndLayer(self, *args)


    def EndPolygon2d(self, *args):
        """
        * call_togl_end_polygon2d

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EndPolygon2d(self, *args)


    def EndPolyline2d(self, *args):
        """
        * call_togl_end_polyline2d

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EndPolyline2d(self, *args)


    def Move(self, *args):
        """
        * call_togl_move2d

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Move(self, *args)


    def Rectangle(self, *args):
        """
        * call_togl_rectangle2d

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param Width:
        :type Width: Standard_ShortReal
        :param Height:
        :type Height: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Rectangle(self, *args)


    def SetColor(self, *args):
        """
        * call_togl_set_color

        :param R:
        :type R: Standard_ShortReal
        :param G:
        :type G: Standard_ShortReal
        :param B:
        :type B: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetColor(self, *args)


    def SetTransparency(self, *args):
        """
        * call_togl_set_transparency

        :param ATransparency:
        :type ATransparency: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetTransparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        * call_togl_unset_transparency

        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_UnsetTransparency(self, *args)


    def SetLineAttributes(self, *args):
        """
        * call_togl_set_line_attributes

        :param Type:
        :type Type: int
        :param Width:
        :type Width: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetLineAttributes(self, *args)


    def SetTextAttributes(self, *args):
        """
        * Set text attributes for under-/overlayer. <Font> argument defines the name of the font to be used, <Type> argument defines the display type of the text, <R> <G> <B> values define the color of decal or subtitle background. To set the color of the text you can use the SetColor method.

        :param Font:
        :type Font: char *
        :param Type:
        :type Type: int
        :param R:
        :type R: Standard_ShortReal
        :param G:
        :type G: Standard_ShortReal
        :param B:
        :type B: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetTextAttributes(self, *args)


    def Text(self, *args):
        """
        * call_togl_text

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AText:
        :type AText: char *
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param AAngle:
        :type AAngle: Quantity_PlaneAngle
        :param ATp:
        :type ATp: Graphic3d_TextPath
        :param AHta:
        :type AHta: Graphic3d_HorizontalTextAlignment
        :param AVta:
        :type AVta: Graphic3d_VerticalTextAlignment
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: void

        * call_togl_text

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AText:
        :type AText: char *
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: void

        * call_togl_text

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AText:
        :type AText: TCollection_ExtendedString &
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param AAngle:
        :type AAngle: Quantity_PlaneAngle
        :param ATp:
        :type ATp: Graphic3d_TextPath
        :param AHta:
        :type AHta: Graphic3d_HorizontalTextAlignment
        :param AVta:
        :type AVta: Graphic3d_VerticalTextAlignment
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: void

        * call_togl_text

        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AText:
        :type AText: TCollection_ExtendedString &
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: void

        * call_togl_text2d If AHeight < 0 default text height is used by driver (DefaultTextHeight method)

        :param AText:
        :type AText: char *
        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param AHeight:
        :type AHeight: Standard_ShortReal
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Text(self, *args)


    def DefaultTextHeight(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DefaultTextHeight(self, *args)


    def TextSize(self, *args):
        """
        * call_togl_textsize2d

        :param AText:
        :type AText: char *
        :param AHeight:
        :type AHeight: Standard_ShortReal
        :param AWidth:
        :type AWidth: Standard_ShortReal &
        :param AnAscent:
        :type AnAscent: Standard_ShortReal &
        :param ADescent:
        :type ADescent: Standard_ShortReal &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TextSize(self, *args)


    def SetBackFacingModel(self, *args):
        """
        * call_togl_backfacing

        :param aView:
        :type aView: Graphic3d_CView &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetBackFacingModel(self, *args)


    def SetDepthTestEnabled(self, *args):
        """
        * call_togl_depthtest

        :param view:
        :type view: Graphic3d_CView &
        :param isEnabled:
        :type isEnabled: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetDepthTestEnabled(self, *args)


    def IsDepthTestEnabled(self, *args):
        """
        * call_togl_isdepthtest

        :param view:
        :type view: Graphic3d_CView &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_IsDepthTestEnabled(self, *args)


    def ReadDepths(self, *args):
        """
        * Reads depths of shown pixels of the given rectangle (glReadPixels with GL_DEPTH_COMPONENT)

        :param view:
        :type view: Graphic3d_CView &
        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :param buffer:
        :type buffer: Standard_Address
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ReadDepths(self, *args)


    def FBOCreate(self, *args):
        """
        * Generate offscreen FBO in the graphic library. If not supported on hardware returns NULL.

        :param view:
        :type view: Graphic3d_CView &
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: Graphic3d_PtrFrameBuffer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_FBOCreate(self, *args)


    def FBORelease(self, *args):
        """
        * Remove offscreen FBO from the graphic library

        :param view:
        :type view: Graphic3d_CView &
        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_FBORelease(self, *args)


    def FBOGetDimensions(self, *args):
        """
        * Read offscreen FBO configuration.

        :param view:
        :type view: Graphic3d_CView &
        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer
        :param width:
        :type width: int &
        :param height:
        :type height: int &
        :param widthMax:
        :type widthMax: int &
        :param heightMax:
        :type heightMax: int &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_FBOGetDimensions(self, *args)


    def FBOChangeViewport(self, *args):
        """
        * Change offscreen FBO viewport.

        :param view:
        :type view: Graphic3d_CView &
        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_FBOChangeViewport(self, *args)


    def BufferDump(self, *args):
        """
        * Dump active rendering buffer into specified memory buffer.

        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theImage:
        :type theImage: Image_PixMap &
        :param theBufferType:
        :type theBufferType: Graphic3d_BufferType &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_BufferDump(self, *args)


    def SetGLLightEnabled(self, *args):
        """
        * call_togl_gllight

        :param view:
        :type view: Graphic3d_CView &
        :param isEnabled:
        :type isEnabled: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetGLLightEnabled(self, *args)


    def IsGLLightEnabled(self, *args):
        """
        * call_togl_isgllight

        :param view:
        :type view: Graphic3d_CView &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_IsGLLightEnabled(self, *args)


    def Export(self, *args):
        """
        * Export scene into the one of the Vector graphics formats (SVG, PS, PDF...). In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits on printing to laser printer). Notice however that results may differ a lot and do not contain some elements.

        :param theFileName:
        :type theFileName: char *
        :param theFormat:
        :type theFormat: Graphic3d_ExportFormat
        :param theSortType:
        :type theSortType: Graphic3d_SortType
        :param theWidth:
        :type theWidth: int
        :param theHeight:
        :type theHeight: int
        :param theView:
        :type theView: Graphic3d_CView &
        :param theLayerUnder:
        :type theLayerUnder: Aspect_CLayer2d &
        :param theLayerOver:
        :type theLayerOver: Aspect_CLayer2d &
        :param thePrecision: default value is 0.005
        :type thePrecision: float
        :param theProgressBarFunc: default value is NULL
        :type theProgressBarFunc: Standard_Address
        :param theProgressObject: default value is NULL
        :type theProgressObject: Standard_Address
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Export(self, *args)


    def AddZLayer(self, *args):
        """
        * Add a new top-level z layer with ID <theLayerId> for the view. Z layers allow drawing structures in higher layers in foreground of structures in lower layers. To add a structure to desired layer on display it is necessary to set the layer ID for the structure.

        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_AddZLayer(self, *args)


    def RemoveZLayer(self, *args):
        """
        * Remove Z layer from the specified view. All structures displayed at the moment in layer will be displayed in default layer ( the bottom-level z layer ). To unset layer ID from associated structures use method UnsetZLayer (...).

        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveZLayer(self, *args)


    def UnsetZLayer(self, *args):
        """
        * Unset Z layer ID for all structures. The structure indexes will be set to default layer ( the bottom-level z layer with ID = 0 ).

        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_UnsetZLayer(self, *args)


    def ChangeZLayer(self, *args):
        """
        * Change Z layer of a structure. The new z layer ID will be used to define the associated layer for structure on display.

        :param theCStructure:
        :type theCStructure: Graphic3d_CStructure &
        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        * Change Z layer of a structure already presented in view.

        :param theCStructure:
        :type theCStructure: Graphic3d_CStructure &
        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theNewLayerId:
        :type theNewLayerId: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ChangeZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        * Get Z layer ID of structure. If the structure doesn't exists in graphic driver, the method returns -1.

        :param theCStructure:
        :type theCStructure: Graphic3d_CStructure &
        :rtype: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GetZLayer(self, *args)


    def SetZLayerSettings(self, *args):
        """
        * Sets the settings for a single Z layer of specified view.

        :param theCView:
        :type theCView: Graphic3d_CView &
        :param theLayerId:
        :type theLayerId: int
        :param theSettings:
        :type theSettings: Graphic3d_ZLayerSettings
        :rtype: void

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetZLayerSettings(self, *args)


    def PrintBoolean(self, *args):
        """
        :param AComment:
        :type AComment: char *
        :param AValue:
        :type AValue: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintBoolean(self, *args)


    def PrintCGroup(self, *args):
        """
        :param ACGroup:
        :type ACGroup: Graphic3d_CGroup &
        :param AField:
        :type AField: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintCGroup(self, *args)


    def PrintCLight(self, *args):
        """
        :param ACLight:
        :type ACLight: Graphic3d_CLight &
        :param AField:
        :type AField: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintCLight(self, *args)


    def PrintCPick(self, *args):
        """
        :param ACPick:
        :type ACPick: Graphic3d_CPick &
        :param AField:
        :type AField: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintCPick(self, *args)


    def PrintCStructure(self, *args):
        """
        :param ACStructure:
        :type ACStructure: Graphic3d_CStructure &
        :param AField:
        :type AField: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintCStructure(self, *args)


    def PrintCView(self, *args):
        """
        :param ACView:
        :type ACView: Graphic3d_CView &
        :param AField:
        :type AField: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintCView(self, *args)


    def PrintFunction(self, *args):
        """
        :param AFunc:
        :type AFunc: char *
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintFunction(self, *args)


    def PrintInteger(self, *args):
        """
        :param AComment:
        :type AComment: char *
        :param AValue:
        :type AValue: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintInteger(self, *args)


    def PrintIResult(self, *args):
        """
        :param AFunc:
        :type AFunc: char *
        :param AResult:
        :type AResult: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintIResult(self, *args)


    def PrintShortReal(self, *args):
        """
        :param AComment:
        :type AComment: char *
        :param AValue:
        :type AValue: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintShortReal(self, *args)


    def PrintMatrix(self, *args):
        """
        :param AComment:
        :type AComment: char *
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintMatrix(self, *args)


    def PrintString(self, *args):
        """
        :param AComment:
        :type AComment: char *
        :param AString:
        :type AString: char *
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_PrintString(self, *args)


    def SetTrace(self, *args):
        """
        :param ALevel:
        :type ALevel: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetTrace(self, *args)


    def Trace(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_Trace(self, *args)


    def GetDisplayConnection(self, *args):
        """
        * returns Handle to display connection

        :rtype: Aspect_DisplayConnection_Handle

        """
        return _Graphic3d.Graphic3d_GraphicDriver_GetDisplayConnection(self, *args)


    def IsDeviceLost(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_IsDeviceLost(self, *args)


    def ResetDeviceLostFlag(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ResetDeviceLostFlag(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_GraphicDriver self)"""
        return _Graphic3d.Graphic3d_GraphicDriver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_GraphicDriver self) -> Handle_Graphic3d_GraphicDriver"""
        return _Graphic3d.Graphic3d_GraphicDriver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_GraphicDriver.Begin = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Begin, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.End = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_End, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.InquireLightLimit = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_InquireLightLimit, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.InquireMat = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_InquireMat, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.InquirePlaneLimit = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_InquirePlaneLimit, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.InquireViewLimit = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_InquireViewLimit, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Blink = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Blink, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BoundaryBox = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BoundaryBox, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.HighlightColor = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_HighlightColor, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.NameSetStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_NameSetStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ClearGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ClearGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.FaceContextGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_FaceContextGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Group = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Group, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.LineContextGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_LineContextGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.MarkerContextGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_MarkerContextGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RemoveGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RemoveGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TextContextGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TextContextGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ClearStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ClearStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Connect = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Connect, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ContextStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ContextStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Disconnect = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Disconnect, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.DisplayStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_DisplayStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EraseStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EraseStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RemoveStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RemoveStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Structure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Structure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ActivateView = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ActivateView, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.AntiAliasing = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_AntiAliasing, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Background = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Background, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GradientBackground = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GradientBackground, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BackgroundImage = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BackgroundImage, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetBgImageStyle = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetBgImageStyle, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetBgGradientStyle = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetBgGradientStyle, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ClipLimit = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ClipLimit, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.DeactivateView = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_DeactivateView, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.DepthCueing = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_DepthCueing, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ProjectRaster = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ProjectRaster, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.UnProjectRaster = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_UnProjectRaster, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.UnProjectRasterWithRay = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_UnProjectRasterWithRay, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RatioWindow = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RatioWindow, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Redraw = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Redraw, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RemoveView = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RemoveView, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetLight = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetLight, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetClipPlanes = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetClipPlanes, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetVisualisation = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetVisualisation, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TransformStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TransformStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Transparency = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Transparency, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Update = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Update, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.View = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_View, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ViewMapping = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ViewMapping, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ViewOrientation = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ViewOrientation, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Environment = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Environment, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetStencilTestOptions = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetStencilTestOptions, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetFlippingOptions = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetFlippingOptions, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrimitiveArray = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrimitiveArray, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.UserDraw = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_UserDraw, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EnableVBO = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EnableVBO, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.MemoryInfo = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_MemoryInfo, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ZBufferTriedronSetup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ZBufferTriedronSetup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TriedronDisplay = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TriedronDisplay, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TriedronErase = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TriedronErase, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TriedronEcho = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TriedronEcho, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GraduatedTrihedronDisplay = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronDisplay, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GraduatedTrihedronErase = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronErase, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GraduatedTrihedronMinMaxValues = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GraduatedTrihedronMinMaxValues, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BeginAddMode = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BeginAddMode, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EndAddMode = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EndAddMode, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetImmediateModeDrawToFront = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetImmediateModeDrawToFront, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BeginImmediatMode = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BeginImmediatMode, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ClearImmediatMode = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ClearImmediatMode, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.DrawStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_DrawStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EndImmediatMode = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EndImmediatMode, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Layer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Layer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RemoveLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RemoveLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BeginLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BeginLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BeginPolygon2d = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BeginPolygon2d, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BeginPolyline2d = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BeginPolyline2d, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ClearLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ClearLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Draw = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Draw, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Edge = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Edge, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EndLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EndLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EndPolygon2d = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EndPolygon2d, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.EndPolyline2d = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_EndPolyline2d, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Move = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Move, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Rectangle = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Rectangle, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetColor = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetColor, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetTransparency = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetTransparency, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.UnsetTransparency = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_UnsetTransparency, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetLineAttributes = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetLineAttributes, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetTextAttributes = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetTextAttributes, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Text = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Text, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.DefaultTextHeight = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_DefaultTextHeight, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.TextSize = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_TextSize, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetBackFacingModel = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetBackFacingModel, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetDepthTestEnabled = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetDepthTestEnabled, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.IsDepthTestEnabled = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_IsDepthTestEnabled, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ReadDepths = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ReadDepths, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.FBOCreate = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_FBOCreate, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.FBORelease = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_FBORelease, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.FBOGetDimensions = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_FBOGetDimensions, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.FBOChangeViewport = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_FBOChangeViewport, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.BufferDump = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_BufferDump, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetGLLightEnabled = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetGLLightEnabled, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.IsGLLightEnabled = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_IsGLLightEnabled, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Export = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Export, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.AddZLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_AddZLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.RemoveZLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_RemoveZLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.UnsetZLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_UnsetZLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ChangeZLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ChangeZLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GetZLayer = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GetZLayer, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetZLayerSettings = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetZLayerSettings, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintBoolean = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintBoolean, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintCGroup = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintCGroup, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintCLight = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintCLight, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintCPick = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintCPick, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintCStructure = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintCStructure, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintCView = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintCView, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintFunction = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintFunction, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintInteger = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintInteger, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintIResult = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintIResult, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintShortReal = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintShortReal, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintMatrix = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintMatrix, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.PrintString = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_PrintString, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.SetTrace = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_SetTrace, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.Trace = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_Trace, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GetDisplayConnection = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GetDisplayConnection, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.IsDeviceLost = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_IsDeviceLost, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.ResetDeviceLostFlag = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_ResetDeviceLostFlag, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver__kill_pointed, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_GraphicDriver_GetHandle, None, Graphic3d_GraphicDriver)
Graphic3d_GraphicDriver_swigregister = _Graphic3d.Graphic3d_GraphicDriver_swigregister
Graphic3d_GraphicDriver_swigregister(Graphic3d_GraphicDriver)

class Handle_Graphic3d_GraphicDriver(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_GraphicDriver_swiginit(self, _Graphic3d.new_Handle_Graphic3d_GraphicDriver(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_GraphicDriver.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_GraphicDriver_Nullify, None, Handle_Graphic3d_GraphicDriver)
Handle_Graphic3d_GraphicDriver.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_GraphicDriver_IsNull, None, Handle_Graphic3d_GraphicDriver)
Handle_Graphic3d_GraphicDriver.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_GraphicDriver_GetObject, None, Handle_Graphic3d_GraphicDriver)
Handle_Graphic3d_GraphicDriver._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_GraphicDriver__kill_pointed, None, Handle_Graphic3d_GraphicDriver)
Handle_Graphic3d_GraphicDriver_swigregister = _Graphic3d.Handle_Graphic3d_GraphicDriver_swigregister
Handle_Graphic3d_GraphicDriver_swigregister(Handle_Graphic3d_GraphicDriver)

def Handle_Graphic3d_GraphicDriver_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast(AnObject)
Handle_Graphic3d_GraphicDriver_DownCast = _Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast

class Graphic3d_Group(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a group in the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Group_swiginit(self, _Graphic3d.new_Graphic3d_Group(*args))

    def Clear(self, *args):
        """
        * Supress all primitives and attributes of <self>. To clear group without update in Graphic3d_StructureManager pass Standard_False as <theUpdateStructureMgr>. This used on context and viewer destruction, when the pointer to structure manager in Graphic3d_Structure could be already released (pointers are used here to avoid handle cross-reference);

        :param theUpdateStructureMgr: default value is Standard_True
        :type theUpdateStructureMgr: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_Clear(self, *args)


    def Destroy(self, *args):
        """
        * Supress the group <self> in the structure.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_Destroy(self, *args)


    def Remove(self, *args):
        """
        * Supress the group <self> in the structure. Warning: No more graphic operations in <self> after this call. Modifies the current modelling transform persistence (pan, zoom or rotate) Get the current modelling transform persistence (pan, zoom or rotate)

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_Remove(self, *args)


    def SetPrimitivesAspect(self, *args):
        """
        * Modifies the current context of the group to give another aspect for all the line primitives created after this call in the group.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectLine3d &
        :rtype: None

        * Modifies the current context of the group to give another aspect for all the face primitives created after this call in the group.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        * Modifies the current context of the group to give another aspect for all the text primitives created after this call in the group.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectText3d &
        :rtype: None

        * Modifies the current context of the group to give another aspect for all the marker primitives created after this call in the group.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectMarker3d &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_SetPrimitivesAspect(self, *args)


    def SetMinMaxValues(self, *args):
        """
        * Sets the coordinates of the boundary box of the group <self>.

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param ZMin:
        :type ZMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param ZMax:
        :type ZMax: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_SetMinMaxValues(self, *args)


    def Text(self, *args):
        """
        * Creates the string <AText> at position <APoint>. The 3D point of attachment is projected. The text is written in the plane of projection. The attributes are given with respect to the plane of projection. AHeight : Height of text.  (Relative to the Normalized Projection Coordinates (NPC) Space). AAngle : Orientation of the text  (with respect to the horizontal).

        :param AText:
        :type AText: char *
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param AAngle:
        :type AAngle: Quantity_PlaneAngle
        :param ATp:
        :type ATp: Graphic3d_TextPath
        :param AHta:
        :type AHta: Graphic3d_HorizontalTextAlignment
        :param AVta:
        :type AVta: Graphic3d_VerticalTextAlignment
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: None

        * Creates the string <AText> at position <APoint>. The 3D point of attachment is projected. The text is written in the plane of projection. The attributes are given with respect to the plane of projection. AHeight : Height of text.  (Relative to the Normalized Projection Coordinates (NPC) Space). The other attributes have the following default values: AAngle : PI / 2. ATp : TP_RIGHT AHta : HTA_LEFT AVta : VTA_BOTTOM

        :param AText:
        :type AText: char *
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: None

        * Creates the string <AText> at position <APoint>. The 3D point of attachment is projected. The text is written in the plane of projection. The attributes are given with respect to the plane of projection. AHeight : Height of text.  (Relative to the Normalized Projection Coordinates (NPC) Space). AAngle : Orientation of the text  (with respect to the horizontal).

        :param AText:
        :type AText: TCollection_ExtendedString &
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param AAngle:
        :type AAngle: Quantity_PlaneAngle
        :param ATp:
        :type ATp: Graphic3d_TextPath
        :param AHta:
        :type AHta: Graphic3d_HorizontalTextAlignment
        :param AVta:
        :type AVta: Graphic3d_VerticalTextAlignment
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: None

        * Creates the string <AText> at position <APoint>. The 3D point of attachment is projected. The text is written in the plane of projection. The attributes are given with respect to the plane of projection. AHeight : Height of text.  (Relative to the Normalized Projection Coordinates (NPC) Space). The other attributes have the following default values: AAngle : PI / 2. ATp : TP_RIGHT AHta : HTA_LEFT AVta : VTA_BOTTOM

        :param AText:
        :type AText: TCollection_ExtendedString &
        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :param AHeight:
        :type AHeight: float
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_Text(self, *args)


    def AddPrimitiveArray(self, *args):
        """
        * Adds an array of primitives for display

        :param elem:
        :type elem: Handle_Graphic3d_ArrayOfPrimitives &
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_AddPrimitiveArray(self, *args)


    def Marker(self, *args):
        """
        * Creates a primitive array with single marker using AddPrimitiveArray().

        :param thePoint:
        :type thePoint: Graphic3d_Vertex &
        :param theToEvalMinMax: default value is Standard_True
        :type theToEvalMinMax: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_Marker(self, *args)


    def UserDraw(self, *args):
        """
        * Creates an UserDraw primitive Category: Methods to create UserDraw Warning: Raises GroupDefinitionError if ...

        :param AnObject:
        :type AnObject: Standard_Address
        :param EvalMinMax: default value is Standard_True
        :type EvalMinMax: bool
        :param ContainsFacet: default value is Standard_False
        :type ContainsFacet: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_UserDraw(self, *args)


    def SetStencilTestOptions(self, *args):
        """
        * sets the stencil test to theIsEnabled state;

        :param theIsEnabled:
        :type theIsEnabled: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_SetStencilTestOptions(self, *args)


    def SetFlippingOptions(self, *args):
        """
        * sets the flipping to theIsEnabled state.

        :param theIsEnabled:
        :type theIsEnabled: bool
        :param theRefPlane:
        :type theRefPlane: gp_Ax2
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_SetFlippingOptions(self, *args)


    def IsGroupPrimitivesAspectSet(self, *args):
        """
        * Returns True if aspect is set for the group.

        :param theAspect:
        :type theAspect: Graphic3d_GroupAspect
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_IsGroupPrimitivesAspectSet(self, *args)


    def ContainsFacet(self, *args):
        """
        * Returns Standard_True if the group <self> contains Polygons, Triangles or Quadrangles.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_ContainsFacet(self, *args)


    def IsDeleted(self, *args):
        """
        * Returns Standard_True if the group <self> is deleted. <self> is deleted after the call Remove (me) or the associated structure is deleted.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_IsDeleted(self, *args)


    def IsEmpty(self, *args):
        """
        * Returns Standard_True if the group <self> is empty.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_IsEmpty(self, *args)


    def MinMaxValues(self, *args):
        """
        * Returns the coordinates of the boundary box of the group <self>.

        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param ZMin:
        :type ZMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :param ZMax:
        :type ZMax: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Group_MinMaxValues(self, *args)


    def Structure(self, *args):
        """
        * Returns the structure containing the group <self>.

        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Group_Structure(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Group self)"""
        return _Graphic3d.Graphic3d_Group__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Group self) -> Handle_Graphic3d_Group"""
        return _Graphic3d.Graphic3d_Group_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Group.Clear = new_instancemethod(_Graphic3d.Graphic3d_Group_Clear, None, Graphic3d_Group)
Graphic3d_Group.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Group_Destroy, None, Graphic3d_Group)
Graphic3d_Group.Remove = new_instancemethod(_Graphic3d.Graphic3d_Group_Remove, None, Graphic3d_Group)
Graphic3d_Group.SetPrimitivesAspect = new_instancemethod(_Graphic3d.Graphic3d_Group_SetPrimitivesAspect, None, Graphic3d_Group)
Graphic3d_Group.SetMinMaxValues = new_instancemethod(_Graphic3d.Graphic3d_Group_SetMinMaxValues, None, Graphic3d_Group)
Graphic3d_Group.Text = new_instancemethod(_Graphic3d.Graphic3d_Group_Text, None, Graphic3d_Group)
Graphic3d_Group.AddPrimitiveArray = new_instancemethod(_Graphic3d.Graphic3d_Group_AddPrimitiveArray, None, Graphic3d_Group)
Graphic3d_Group.Marker = new_instancemethod(_Graphic3d.Graphic3d_Group_Marker, None, Graphic3d_Group)
Graphic3d_Group.UserDraw = new_instancemethod(_Graphic3d.Graphic3d_Group_UserDraw, None, Graphic3d_Group)
Graphic3d_Group.SetStencilTestOptions = new_instancemethod(_Graphic3d.Graphic3d_Group_SetStencilTestOptions, None, Graphic3d_Group)
Graphic3d_Group.SetFlippingOptions = new_instancemethod(_Graphic3d.Graphic3d_Group_SetFlippingOptions, None, Graphic3d_Group)
Graphic3d_Group.IsGroupPrimitivesAspectSet = new_instancemethod(_Graphic3d.Graphic3d_Group_IsGroupPrimitivesAspectSet, None, Graphic3d_Group)
Graphic3d_Group.ContainsFacet = new_instancemethod(_Graphic3d.Graphic3d_Group_ContainsFacet, None, Graphic3d_Group)
Graphic3d_Group.IsDeleted = new_instancemethod(_Graphic3d.Graphic3d_Group_IsDeleted, None, Graphic3d_Group)
Graphic3d_Group.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_Group_IsEmpty, None, Graphic3d_Group)
Graphic3d_Group.MinMaxValues = new_instancemethod(_Graphic3d.Graphic3d_Group_MinMaxValues, None, Graphic3d_Group)
Graphic3d_Group.Structure = new_instancemethod(_Graphic3d.Graphic3d_Group_Structure, None, Graphic3d_Group)
Graphic3d_Group._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Group__kill_pointed, None, Graphic3d_Group)
Graphic3d_Group.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Group_GetHandle, None, Graphic3d_Group)
Graphic3d_Group_swigregister = _Graphic3d.Graphic3d_Group_swigregister
Graphic3d_Group_swigregister(Graphic3d_Group)

class Handle_Graphic3d_Group(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Group_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Group(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Group_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Group.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Group_Nullify, None, Handle_Graphic3d_Group)
Handle_Graphic3d_Group.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Group_IsNull, None, Handle_Graphic3d_Group)
Handle_Graphic3d_Group.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Group_GetObject, None, Handle_Graphic3d_Group)
Handle_Graphic3d_Group._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Group__kill_pointed, None, Handle_Graphic3d_Group)
Handle_Graphic3d_Group_swigregister = _Graphic3d.Handle_Graphic3d_Group_swigregister
Handle_Graphic3d_Group_swigregister(Handle_Graphic3d_Group)

def Handle_Graphic3d_Group_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Group_DownCast(AnObject)
Handle_Graphic3d_Group_DownCast = _Graphic3d.Handle_Graphic3d_Group_DownCast

class Graphic3d_HSequenceOfGroup(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_HSequenceOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_HSequenceOfGroup(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Graphic3d_Group &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Graphic3d_Group &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Group &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Group &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_HSequenceOfGroup

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Group &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Graphic3d_SequenceOfGroup

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Graphic3d_SequenceOfGroup

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Graphic3d_HSequenceOfGroup

        """
        return _Graphic3d.Graphic3d_HSequenceOfGroup_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_HSequenceOfGroup self)"""
        return _Graphic3d.Graphic3d_HSequenceOfGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_HSequenceOfGroup self) -> Handle_Graphic3d_HSequenceOfGroup"""
        return _Graphic3d.Graphic3d_HSequenceOfGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_HSequenceOfGroup.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_IsEmpty, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Length = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Length, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Clear = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Clear, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Append = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Append, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Prepend = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Prepend, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Reverse = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Reverse, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_InsertBefore, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_InsertAfter, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Exchange = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Exchange, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Split = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Split, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.SetValue = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_SetValue, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Value, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_ChangeValue, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Remove = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Remove, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.Sequence = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_Sequence, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.ChangeSequence = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_ChangeSequence, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.ShallowCopy = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_ShallowCopy, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup__kill_pointed, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfGroup_GetHandle, None, Graphic3d_HSequenceOfGroup)
Graphic3d_HSequenceOfGroup_swigregister = _Graphic3d.Graphic3d_HSequenceOfGroup_swigregister
Graphic3d_HSequenceOfGroup_swigregister(Graphic3d_HSequenceOfGroup)

class Handle_Graphic3d_HSequenceOfGroup(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_HSequenceOfGroup_swiginit(self, _Graphic3d.new_Handle_Graphic3d_HSequenceOfGroup(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_HSequenceOfGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_HSequenceOfGroup.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfGroup_Nullify, None, Handle_Graphic3d_HSequenceOfGroup)
Handle_Graphic3d_HSequenceOfGroup.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfGroup_IsNull, None, Handle_Graphic3d_HSequenceOfGroup)
Handle_Graphic3d_HSequenceOfGroup.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfGroup_GetObject, None, Handle_Graphic3d_HSequenceOfGroup)
Handle_Graphic3d_HSequenceOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfGroup__kill_pointed, None, Handle_Graphic3d_HSequenceOfGroup)
Handle_Graphic3d_HSequenceOfGroup_swigregister = _Graphic3d.Handle_Graphic3d_HSequenceOfGroup_swigregister
Handle_Graphic3d_HSequenceOfGroup_swigregister(Handle_Graphic3d_HSequenceOfGroup)

def Handle_Graphic3d_HSequenceOfGroup_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_HSequenceOfGroup_DownCast(AnObject)
Handle_Graphic3d_HSequenceOfGroup_DownCast = _Graphic3d.Handle_Graphic3d_HSequenceOfGroup_DownCast

class Graphic3d_HSequenceOfStructure(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_HSequenceOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_HSequenceOfStructure(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Graphic3d_Structure &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Graphic3d_Structure &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Structure &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Structure &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Graphic3d_HSequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_HSequenceOfStructure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Graphic3d_SequenceOfStructure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Graphic3d_SequenceOfStructure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Graphic3d_HSequenceOfStructure

        """
        return _Graphic3d.Graphic3d_HSequenceOfStructure_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_HSequenceOfStructure self)"""
        return _Graphic3d.Graphic3d_HSequenceOfStructure__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_HSequenceOfStructure self) -> Handle_Graphic3d_HSequenceOfStructure"""
        return _Graphic3d.Graphic3d_HSequenceOfStructure_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_HSequenceOfStructure.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_IsEmpty, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Length = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Length, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Clear = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Clear, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Append = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Append, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Prepend = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Prepend, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Reverse = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Reverse, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_InsertBefore, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_InsertAfter, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Exchange = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Exchange, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Split = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Split, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.SetValue = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_SetValue, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Value = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Value, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_ChangeValue, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Remove = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Remove, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.Sequence = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_Sequence, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.ChangeSequence = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_ChangeSequence, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.ShallowCopy = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_ShallowCopy, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure__kill_pointed, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_HSequenceOfStructure_GetHandle, None, Graphic3d_HSequenceOfStructure)
Graphic3d_HSequenceOfStructure_swigregister = _Graphic3d.Graphic3d_HSequenceOfStructure_swigregister
Graphic3d_HSequenceOfStructure_swigregister(Graphic3d_HSequenceOfStructure)

class Handle_Graphic3d_HSequenceOfStructure(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_HSequenceOfStructure_swiginit(self, _Graphic3d.new_Handle_Graphic3d_HSequenceOfStructure(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_HSequenceOfStructure_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_HSequenceOfStructure.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfStructure_Nullify, None, Handle_Graphic3d_HSequenceOfStructure)
Handle_Graphic3d_HSequenceOfStructure.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfStructure_IsNull, None, Handle_Graphic3d_HSequenceOfStructure)
Handle_Graphic3d_HSequenceOfStructure.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfStructure_GetObject, None, Handle_Graphic3d_HSequenceOfStructure)
Handle_Graphic3d_HSequenceOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSequenceOfStructure__kill_pointed, None, Handle_Graphic3d_HSequenceOfStructure)
Handle_Graphic3d_HSequenceOfStructure_swigregister = _Graphic3d.Handle_Graphic3d_HSequenceOfStructure_swigregister
Handle_Graphic3d_HSequenceOfStructure_swigregister(Handle_Graphic3d_HSequenceOfStructure)

def Handle_Graphic3d_HSequenceOfStructure_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_HSequenceOfStructure_DownCast(AnObject)
Handle_Graphic3d_HSequenceOfStructure_DownCast = _Graphic3d.Handle_Graphic3d_HSequenceOfStructure_DownCast

class Graphic3d_HSetOfGroup(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_HSetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_HSetOfGroup(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Handle_Graphic3d_HSetOfGroup &
        :rtype: Handle_Graphic3d_HSetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Handle_Graphic3d_HSetOfGroup &
        :rtype: Handle_Graphic3d_HSetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Handle_Graphic3d_HSetOfGroup &
        :rtype: Handle_Graphic3d_HSetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Handle_Graphic3d_HSetOfGroup &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Handle_Graphic3d_HSetOfGroup &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_IsAProperSubset(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Graphic3d_HSetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_ShallowCopy(self, *args)


    def Set(self, *args):
        """
        :rtype: Graphic3d_SetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_Set(self, *args)


    def ChangeSet(self, *args):
        """
        :rtype: Graphic3d_SetOfGroup

        """
        return _Graphic3d.Graphic3d_HSetOfGroup_ChangeSet(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_HSetOfGroup self)"""
        return _Graphic3d.Graphic3d_HSetOfGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_HSetOfGroup self) -> Handle_Graphic3d_HSetOfGroup"""
        return _Graphic3d.Graphic3d_HSetOfGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_HSetOfGroup.Extent = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Extent, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_IsEmpty, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Clear = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Clear, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Add = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Add, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Remove = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Remove, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Union = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Union, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Intersection = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Intersection, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Difference = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Difference, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Contains = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Contains, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.IsASubset = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_IsASubset, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.IsAProperSubset = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_IsAProperSubset, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.ShallowCopy = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_ShallowCopy, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.Set = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_Set, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.ChangeSet = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_ChangeSet, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup__kill_pointed, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_HSetOfGroup_GetHandle, None, Graphic3d_HSetOfGroup)
Graphic3d_HSetOfGroup_swigregister = _Graphic3d.Graphic3d_HSetOfGroup_swigregister
Graphic3d_HSetOfGroup_swigregister(Graphic3d_HSetOfGroup)

class Handle_Graphic3d_HSetOfGroup(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_HSetOfGroup_swiginit(self, _Graphic3d.new_Handle_Graphic3d_HSetOfGroup(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_HSetOfGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_HSetOfGroup.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSetOfGroup_Nullify, None, Handle_Graphic3d_HSetOfGroup)
Handle_Graphic3d_HSetOfGroup.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSetOfGroup_IsNull, None, Handle_Graphic3d_HSetOfGroup)
Handle_Graphic3d_HSetOfGroup.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSetOfGroup_GetObject, None, Handle_Graphic3d_HSetOfGroup)
Handle_Graphic3d_HSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_HSetOfGroup__kill_pointed, None, Handle_Graphic3d_HSetOfGroup)
Handle_Graphic3d_HSetOfGroup_swigregister = _Graphic3d.Handle_Graphic3d_HSetOfGroup_swigregister
Handle_Graphic3d_HSetOfGroup_swigregister(Handle_Graphic3d_HSetOfGroup)

def Handle_Graphic3d_HSetOfGroup_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_HSetOfGroup_DownCast(AnObject)
Handle_Graphic3d_HSetOfGroup_DownCast = _Graphic3d.Handle_Graphic3d_HSetOfGroup_DownCast

class Graphic3d_ListIteratorOfListOfPArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Graphic3d_ListOfPArray &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_swiginit(self, _Graphic3d.new_Graphic3d_ListIteratorOfListOfPArray(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Graphic3d_ListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_ArrayOfPrimitives

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListIteratorOfListOfPArray.Initialize = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Initialize, None, Graphic3d_ListIteratorOfListOfPArray)
Graphic3d_ListIteratorOfListOfPArray.More = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfPArray_More, None, Graphic3d_ListIteratorOfListOfPArray)
Graphic3d_ListIteratorOfListOfPArray.Next = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Next, None, Graphic3d_ListIteratorOfListOfPArray)
Graphic3d_ListIteratorOfListOfPArray.Value = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfPArray_Value, None, Graphic3d_ListIteratorOfListOfPArray)
Graphic3d_ListIteratorOfListOfPArray._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfPArray__kill_pointed, None, Graphic3d_ListIteratorOfListOfPArray)
Graphic3d_ListIteratorOfListOfPArray_swigregister = _Graphic3d.Graphic3d_ListIteratorOfListOfPArray_swigregister
Graphic3d_ListIteratorOfListOfPArray_swigregister(Graphic3d_ListIteratorOfListOfPArray)

class Graphic3d_ListIteratorOfListOfShortReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_swiginit(self, _Graphic3d.new_Graphic3d_ListIteratorOfListOfShortReal(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListIteratorOfListOfShortReal.Initialize = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Initialize, None, Graphic3d_ListIteratorOfListOfShortReal)
Graphic3d_ListIteratorOfListOfShortReal.More = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_More, None, Graphic3d_ListIteratorOfListOfShortReal)
Graphic3d_ListIteratorOfListOfShortReal.Next = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Next, None, Graphic3d_ListIteratorOfListOfShortReal)
Graphic3d_ListIteratorOfListOfShortReal.Value = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_Value, None, Graphic3d_ListIteratorOfListOfShortReal)
Graphic3d_ListIteratorOfListOfShortReal._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfListOfShortReal__kill_pointed, None, Graphic3d_ListIteratorOfListOfShortReal)
Graphic3d_ListIteratorOfListOfShortReal_swigregister = _Graphic3d.Graphic3d_ListIteratorOfListOfShortReal_swigregister
Graphic3d_ListIteratorOfListOfShortReal_swigregister(Graphic3d_ListIteratorOfListOfShortReal)

class Graphic3d_ListIteratorOfSetListOfSetOfGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_ListIteratorOfSetListOfSetOfGroup(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListIteratorOfSetListOfSetOfGroup.Initialize = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Initialize, None, Graphic3d_ListIteratorOfSetListOfSetOfGroup)
Graphic3d_ListIteratorOfSetListOfSetOfGroup.More = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_More, None, Graphic3d_ListIteratorOfSetListOfSetOfGroup)
Graphic3d_ListIteratorOfSetListOfSetOfGroup.Next = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Next, None, Graphic3d_ListIteratorOfSetListOfSetOfGroup)
Graphic3d_ListIteratorOfSetListOfSetOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_Value, None, Graphic3d_ListIteratorOfSetListOfSetOfGroup)
Graphic3d_ListIteratorOfSetListOfSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup__kill_pointed, None, Graphic3d_ListIteratorOfSetListOfSetOfGroup)
Graphic3d_ListIteratorOfSetListOfSetOfGroup_swigregister = _Graphic3d.Graphic3d_ListIteratorOfSetListOfSetOfGroup_swigregister
Graphic3d_ListIteratorOfSetListOfSetOfGroup_swigregister(Graphic3d_ListIteratorOfSetListOfSetOfGroup)

class Graphic3d_ListNodeOfListOfPArray(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListNodeOfListOfPArray_swiginit(self, _Graphic3d.new_Graphic3d_ListNodeOfListOfPArray(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_ArrayOfPrimitives

        """
        return _Graphic3d.Graphic3d_ListNodeOfListOfPArray_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ListNodeOfListOfPArray self)"""
        return _Graphic3d.Graphic3d_ListNodeOfListOfPArray__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ListNodeOfListOfPArray self) -> Handle_Graphic3d_ListNodeOfListOfPArray"""
        return _Graphic3d.Graphic3d_ListNodeOfListOfPArray_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListNodeOfListOfPArray.Value = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfPArray_Value, None, Graphic3d_ListNodeOfListOfPArray)
Graphic3d_ListNodeOfListOfPArray._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfPArray__kill_pointed, None, Graphic3d_ListNodeOfListOfPArray)
Graphic3d_ListNodeOfListOfPArray.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfPArray_GetHandle, None, Graphic3d_ListNodeOfListOfPArray)
Graphic3d_ListNodeOfListOfPArray_swigregister = _Graphic3d.Graphic3d_ListNodeOfListOfPArray_swigregister
Graphic3d_ListNodeOfListOfPArray_swigregister(Graphic3d_ListNodeOfListOfPArray)

class Handle_Graphic3d_ListNodeOfListOfPArray(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ListNodeOfListOfPArray(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ListNodeOfListOfPArray.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_Nullify, None, Handle_Graphic3d_ListNodeOfListOfPArray)
Handle_Graphic3d_ListNodeOfListOfPArray.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_IsNull, None, Handle_Graphic3d_ListNodeOfListOfPArray)
Handle_Graphic3d_ListNodeOfListOfPArray.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_GetObject, None, Handle_Graphic3d_ListNodeOfListOfPArray)
Handle_Graphic3d_ListNodeOfListOfPArray._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray__kill_pointed, None, Handle_Graphic3d_ListNodeOfListOfPArray)
Handle_Graphic3d_ListNodeOfListOfPArray_swigregister = _Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_swigregister
Handle_Graphic3d_ListNodeOfListOfPArray_swigregister(Handle_Graphic3d_ListNodeOfListOfPArray)

def Handle_Graphic3d_ListNodeOfListOfPArray_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_DownCast(AnObject)
Handle_Graphic3d_ListNodeOfListOfPArray_DownCast = _Graphic3d.Handle_Graphic3d_ListNodeOfListOfPArray_DownCast

class Graphic3d_ListNodeOfListOfShortReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Standard_ShortReal &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListNodeOfListOfShortReal_swiginit(self, _Graphic3d.new_Graphic3d_ListNodeOfListOfShortReal(*args))

    def Value(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_ListNodeOfListOfShortReal_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ListNodeOfListOfShortReal self)"""
        return _Graphic3d.Graphic3d_ListNodeOfListOfShortReal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ListNodeOfListOfShortReal self) -> Handle_Graphic3d_ListNodeOfListOfShortReal"""
        return _Graphic3d.Graphic3d_ListNodeOfListOfShortReal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListNodeOfListOfShortReal.Value = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfShortReal_Value, None, Graphic3d_ListNodeOfListOfShortReal)
Graphic3d_ListNodeOfListOfShortReal._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfShortReal__kill_pointed, None, Graphic3d_ListNodeOfListOfShortReal)
Graphic3d_ListNodeOfListOfShortReal.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfListOfShortReal_GetHandle, None, Graphic3d_ListNodeOfListOfShortReal)
Graphic3d_ListNodeOfListOfShortReal_swigregister = _Graphic3d.Graphic3d_ListNodeOfListOfShortReal_swigregister
Graphic3d_ListNodeOfListOfShortReal_swigregister(Graphic3d_ListNodeOfListOfShortReal)

class Handle_Graphic3d_ListNodeOfListOfShortReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ListNodeOfListOfShortReal(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ListNodeOfListOfShortReal.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_Nullify, None, Handle_Graphic3d_ListNodeOfListOfShortReal)
Handle_Graphic3d_ListNodeOfListOfShortReal.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_IsNull, None, Handle_Graphic3d_ListNodeOfListOfShortReal)
Handle_Graphic3d_ListNodeOfListOfShortReal.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_GetObject, None, Handle_Graphic3d_ListNodeOfListOfShortReal)
Handle_Graphic3d_ListNodeOfListOfShortReal._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal__kill_pointed, None, Handle_Graphic3d_ListNodeOfListOfShortReal)
Handle_Graphic3d_ListNodeOfListOfShortReal_swigregister = _Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_swigregister
Handle_Graphic3d_ListNodeOfListOfShortReal_swigregister(Handle_Graphic3d_ListNodeOfListOfShortReal)

def Handle_Graphic3d_ListNodeOfListOfShortReal_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_DownCast(AnObject)
Handle_Graphic3d_ListNodeOfListOfShortReal_DownCast = _Graphic3d.Handle_Graphic3d_ListNodeOfListOfShortReal_DownCast

class Graphic3d_ListNodeOfSetListOfSetOfGroup(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_ListNodeOfSetListOfSetOfGroup(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ListNodeOfSetListOfSetOfGroup self)"""
        return _Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ListNodeOfSetListOfSetOfGroup self) -> Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup"""
        return _Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListNodeOfSetListOfSetOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_Value, None, Graphic3d_ListNodeOfSetListOfSetOfGroup)
Graphic3d_ListNodeOfSetListOfSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup__kill_pointed, None, Graphic3d_ListNodeOfSetListOfSetOfGroup)
Graphic3d_ListNodeOfSetListOfSetOfGroup.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_GetHandle, None, Graphic3d_ListNodeOfSetListOfSetOfGroup)
Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister = _Graphic3d.Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister
Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister(Graphic3d_ListNodeOfSetListOfSetOfGroup)

class Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_Nullify, None, Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup)
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_IsNull, None, Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup)
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_GetObject, None, Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup)
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup__kill_pointed, None, Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup)
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister = _Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_swigregister(Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup)

def Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_DownCast(AnObject)
Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_DownCast = _Graphic3d.Handle_Graphic3d_ListNodeOfSetListOfSetOfGroup_DownCast

class Graphic3d_ListOfPArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListOfPArray_swiginit(self, _Graphic3d.new_Graphic3d_ListOfPArray(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ListOfPArray_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :rtype: None

        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :rtype: None

        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Graphic3d_ArrayOfPrimitives

        """
        return _Graphic3d.Graphic3d_ListOfPArray_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Graphic3d_ArrayOfPrimitives

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_ArrayOfPrimitives &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfPArray &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfPArray &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfPArray_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListOfPArray.Assign = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Assign, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Set = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Set, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Extent = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Extent, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Clear = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Clear, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_IsEmpty, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Prepend = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Prepend, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Append = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Append, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.First = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_First, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Last = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Last, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.RemoveFirst = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_RemoveFirst, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.Remove = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_Remove, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_InsertBefore, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray_InsertAfter, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListOfPArray__kill_pointed, None, Graphic3d_ListOfPArray)
Graphic3d_ListOfPArray_swigregister = _Graphic3d.Graphic3d_ListOfPArray_swigregister
Graphic3d_ListOfPArray_swigregister(Graphic3d_ListOfPArray)

class Graphic3d_ListOfShortReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_ListOfShortReal_swiginit(self, _Graphic3d.new_Graphic3d_ListOfShortReal(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Standard_ShortReal &
        :rtype: None

        :param I:
        :type I: Standard_ShortReal &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Standard_ShortReal &
        :rtype: None

        :param I:
        :type I: Standard_ShortReal &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Standard_ShortReal &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Standard_ShortReal &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_ListOfShortReal &
        :param It:
        :type It: Graphic3d_ListIteratorOfListOfShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ListOfShortReal_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ListOfShortReal.Assign = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Assign, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Set = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Set, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Extent = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Extent, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Clear = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Clear, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_IsEmpty, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Prepend = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Prepend, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Append = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Append, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.First = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_First, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Last = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Last, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.RemoveFirst = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_RemoveFirst, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.Remove = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_Remove, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_InsertBefore, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal_InsertAfter, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ListOfShortReal__kill_pointed, None, Graphic3d_ListOfShortReal)
Graphic3d_ListOfShortReal_swigregister = _Graphic3d.Graphic3d_ListOfShortReal_swigregister
Graphic3d_ListOfShortReal_swigregister(Graphic3d_ListOfShortReal)

class Graphic3d_MapIteratorOfMapOfStructure(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Graphic3d_MapOfStructure &
        :rtype: None

        """
        _Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_MapIteratorOfMapOfStructure(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_Key(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_MapIteratorOfMapOfStructure.Initialize = new_instancemethod(_Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_Initialize, None, Graphic3d_MapIteratorOfMapOfStructure)
Graphic3d_MapIteratorOfMapOfStructure.Key = new_instancemethod(_Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_Key, None, Graphic3d_MapIteratorOfMapOfStructure)
Graphic3d_MapIteratorOfMapOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_MapIteratorOfMapOfStructure__kill_pointed, None, Graphic3d_MapIteratorOfMapOfStructure)
Graphic3d_MapIteratorOfMapOfStructure_swigregister = _Graphic3d.Graphic3d_MapIteratorOfMapOfStructure_swigregister
Graphic3d_MapIteratorOfMapOfStructure_swigregister(Graphic3d_MapIteratorOfMapOfStructure)

class Graphic3d_MapOfStructure(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Graphic3d.Graphic3d_MapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_MapOfStructure(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_MapOfStructure &
        :rtype: Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_MapOfStructure &
        :rtype: Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MapOfStructure_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Clear(self, *args)


    def Add(self, *args):
        """
        :param aKey:
        :type aKey: Handle_Graphic3d_Structure &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Add(self, *args)


    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: Handle_Graphic3d_Structure &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Contains(self, *args)


    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: Handle_Graphic3d_Structure &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MapOfStructure_Remove(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_MapOfStructure self)"""
        return _Graphic3d.Graphic3d_MapOfStructure__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_MapOfStructure.Assign = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Assign, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.Set = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Set, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.ReSize = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_ReSize, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.Clear = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Clear, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.Add = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Add, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.Contains = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Contains, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure.Remove = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure_Remove, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_MapOfStructure__kill_pointed, None, Graphic3d_MapOfStructure)
Graphic3d_MapOfStructure_swigregister = _Graphic3d.Graphic3d_MapOfStructure_swigregister
Graphic3d_MapOfStructure_swigregister(Graphic3d_MapOfStructure)

class Graphic3d_MarkerImage(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @param theImage - source image

        :param theImage:
        :type theImage: Handle_Image_PixMap &
        :rtype: None

        * Creates marker image from array of bytes (method for compatibility with old markers definition). @param theBitMap - source bitmap stored as array of bytes @param theWidth - number of bits in a row @param theHeight - number of bits in a column

        :param theBitMap:
        :type theBitMap: Handle_TColStd_HArray1OfByte &
        :param theWidth:
        :type theWidth: int &
        :param theHeight:
        :type theHeight: int &
        :rtype: None

        """
        _Graphic3d.Graphic3d_MarkerImage_swiginit(self, _Graphic3d.new_Graphic3d_MarkerImage(*args))

    def GetBitMapArray(self, *args):
        """
        * @param theAlphaValue pixels in the image that have alpha value greater than  or equal to this parameter will be stored in bitmap as '1',  others will be stored as '0' returns marker image as array of bytes. If an instance of the class has been initialized with image, it will be converted to bitmap based on the parameter theAlphaValue.

        :param theAlphaValue: default value is 0.5
        :type theAlphaValue: float &
        :rtype: Handle_TColStd_HArray1OfByte

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetBitMapArray(self, *args)


    def GetImage(self, *args):
        """
        * returns marker image. If an instance of the class has been initialized with a bitmap, it will be converted to image.

        :rtype: Handle_Image_PixMap

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetImage(self, *args)


    def GetImageAlpha(self, *args):
        """
        * returns image alpha as grayscale image. Note that if an instance of the class has been initialized with a bitmap or with grayscale image this method will return exactly the same image as GetImage()

        :rtype: Handle_Image_PixMap

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetImageAlpha(self, *args)


    def GetImageId(self, *args):
        """
        * returns an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetImageId(self, *args)


    def GetImageAlphaId(self, *args):
        """
        * returns an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetImageAlphaId(self, *args)


    def GetTextureSize(self, *args):
        """
        * returns texture size

        :param theWidth:
        :type theWidth: int &
        :param theHeight:
        :type theHeight: int &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetTextureSize(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_MarkerImage self)"""
        return _Graphic3d.Graphic3d_MarkerImage__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_MarkerImage.GetBitMapArray = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetBitMapArray, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage.GetImage = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetImage, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage.GetImageAlpha = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetImageAlpha, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage.GetImageId = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetImageId, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage.GetImageAlphaId = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetImageAlphaId, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage.GetTextureSize = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage_GetTextureSize, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_MarkerImage__kill_pointed, None, Graphic3d_MarkerImage)
Graphic3d_MarkerImage_swigregister = _Graphic3d.Graphic3d_MarkerImage_swigregister
Graphic3d_MarkerImage_swigregister(Graphic3d_MarkerImage)

class Graphic3d_MaterialAspect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a material from default values.

        :rtype: None

        * Creates a generic material calls <AName>

        :param AName:
        :type AName: Graphic3d_NameOfMaterial
        :rtype: None

        """
        _Graphic3d.Graphic3d_MaterialAspect_swiginit(self, _Graphic3d.new_Graphic3d_MaterialAspect(*args))

    def IncreaseShine(self, *args):
        """
        * Increases or decreases the luminosity of <self>. //!	 <ADelta> is a signed percentage.

        :param ADelta:
        :type ADelta: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IncreaseShine(self, *args)


    def SetAmbient(self, *args):
        """
        * Modifies the reflection properties of the surface. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is //!	 a negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetAmbient(self, *args)


    def SetDiffuse(self, *args):
        """
        * Modifies the reflection properties of the surface. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is a //!	 negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetDiffuse(self, *args)


    def SetEmissive(self, *args):
        """
        * Modifies the reflection properties of the surface. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is a //!	 negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetEmissive(self, *args)


    def SetShininess(self, *args):
        """
        * Modifies the luminosity of the surface. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is a //!	 negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetShininess(self, *args)


    def SetSpecular(self, *args):
        """
        * Modifies the reflection properties of the surface. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is a //!	 negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetSpecular(self, *args)


    def SetTransparency(self, *args):
        """
        * Modifies the transparency coefficient of the surface. <AValue> = 0. opaque. (default) <AValue> = 1. transparent. Transparency is applicable to materials that have at least one of reflection modes (ambient, diffuse, specular or emissive) enabled. See also SetReflectionModeOn() and SetReflectionModeOff() methods. NOTE: In order for transparency specified through this method to take effect, it is necessary to enable transparency in the viewer. This can be done either directly - see Visual3d_ViewManager::SetTransparency(Standard_Boolean), or indirectly - by calling AIS_InteractiveObject::SetTransparency() before an object is added to an interactive context, or by calling AIS_InteractiveContext::SetTransparency() for a given interactive object already displayed. Category: Methods to modify the class definition Warning: Raises MaterialDefinitionError if <AValue> is a //!	 negative value or greater than 1.0.

        :param AValue:
        :type AValue: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetTransparency(self, *args)


    def SetColor(self, *args):
        """
        * Modifies the ambient colour of the surface. Category: Methods to modify the class definition

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetColor(self, *args)


    def SetAmbientColor(self, *args):
        """
        * Modifies the ambient colour of the surface.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetAmbientColor(self, *args)


    def SetDiffuseColor(self, *args):
        """
        * Modifies the difuse colour of the surface.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetDiffuseColor(self, *args)


    def SetSpecularColor(self, *args):
        """
        * Modifies the specular colour of the surface.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetSpecularColor(self, *args)


    def SetEmissiveColor(self, *args):
        """
        * Modifies the emissive colour of the surface.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetEmissiveColor(self, *args)


    def SetReflectionModeOn(self, *args):
        """
        * Activates the reflective properties of the surface <AType>. //!	 TypeOfReflection : TOR_AMBIENT //!			 TOR_DIFFUSE //!			 TOR_SPECULAR  TOR_EMISSION 1, 2, 3 or 4 types of reflection can be set for a given surface.

        :param AType:
        :type AType: Graphic3d_TypeOfReflection
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOn(self, *args)


    def SetReflectionModeOff(self, *args):
        """
        * Deactivates the reflective properties of //!	 the surface <AType>. //!	 TypeOfReflection : TOR_AMBIENT //!			 TOR_DIFFUSE //!			 TOR_SPECULAR  TOR_EMISSION 1, 2, 3 or 4 types of reflection can be set off for a given surface. Disabling diffuse and specular reflectance is useful for efficient visualization of large amounts of data as definition of normals for graphic primitives is not needed when only 'all-directional' reflectance is active. NOTE: Disabling all four reflection modes also turns off the following effects: 1. Lighting. Colors of primitives are not affected by the material properties when lighting is off. 2. Transparency.

        :param AType:
        :type AType: Graphic3d_TypeOfReflection
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOff(self, *args)


    def SetMaterialType(self, *args):
        """
        * Set MyMaterialType to the value of parameter <AType> //!	 TypeOfMaterial : MATERIAL_ASPECT //!			 MATERIAL_PHYSIC

        :param AType:
        :type AType: Graphic3d_TypeOfMaterial
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetMaterialType(self, *args)


    def SetMaterialName(self, *args):
        """
        * The current matarial become a 'UserDefined' material. //!	 Set the name of the 'UserDefined' material.

        :param AName:
        :type AName: char *
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetMaterialName(self, *args)


    def SetEnvReflexion(self, *args):
        """
        :param AValue:
        :type AValue: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetEnvReflexion(self, *args)


    def Reset(self, *args):
        """
        * Resets the material with the original values according to the material name but leave the current color values untouched for the material of type ASPECT.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Reset(self, *args)


    def Color(self, *args):
        """
        * Returns the ambient colour of the surface.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Color(self, *args)


    def AmbientColor(self, *args):
        """
        * Returns the ambient colour of the surface.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_AmbientColor(self, *args)


    def DiffuseColor(self, *args):
        """
        * Returns the diffuse colour of the surface.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_DiffuseColor(self, *args)


    def SpecularColor(self, *args):
        """
        * Returns the specular colour of the surface.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SpecularColor(self, *args)


    def EmissiveColor(self, *args):
        """
        * Returns the emissive colour of the surface.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_EmissiveColor(self, *args)


    def Ambient(self, *args):
        """
        * Returns the reflection properties of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Ambient(self, *args)


    def Diffuse(self, *args):
        """
        * Returns the reflection properties of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Diffuse(self, *args)


    def Specular(self, *args):
        """
        * Returns the reflection properties of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Specular(self, *args)


    def Transparency(self, *args):
        """
        * Returns the transparency coefficient of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Transparency(self, *args)


    def Emissive(self, *args):
        """
        * Returns the emissive coefficient of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Emissive(self, *args)


    def Shininess(self, *args):
        """
        * Returns the luminosity of the surface.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Shininess(self, *args)


    def ReflectionMode(self, *args):
        """
        * Returns Standard_True if the reflection mode is active, //!	 Standard_False otherwise.

        :param AType:
        :type AType: Graphic3d_TypeOfReflection
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MaterialAspect_ReflectionMode(self, *args)


    def EnvReflexion(self, *args):
        """
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_EnvReflexion(self, *args)


    def Name(self, *args):
        """
        * Returns the material name.

        :rtype: Graphic3d_NameOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Name(self, *args)


    def IsDifferent(self, *args):
        """
        * Returns Standard_True if the materials <self> and <Other> are different.

        :param Other:
        :type Other: Graphic3d_MaterialAspect &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IsDifferent(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsEqual(self, *args):
        """
        * Returns Standard_True if the materials <self> and <Other> are identical.

        :param Other:
        :type Other: Graphic3d_MaterialAspect &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def NumberOfMaterials(*args):
        """
        * Returns the number of predefined textures.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials(*args)

    NumberOfMaterials = staticmethod(NumberOfMaterials)

    def MaterialName(self, *args):
        """
        * Returns the name of the predefined material of rank <aRank> Trigger: when <aRank> is < 1 or > NumberOfMaterials.

        :param aRank:
        :type aRank: int
        :rtype: char *

        * Returns the name of this material

        :rtype: char *

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialName(self, *args)


    def MaterialType(*args):
        """
        * Returns Standard_True if MyMaterialType equal the parameter AType, //!	 Standard_False otherwise.

        :param AType:
        :type AType: Graphic3d_TypeOfMaterial
        :rtype: bool

        * Returns the type of the predefined material of rank <aRank> Trigger: when <aRank> is < 1 or > NumberOfMaterials.

        :param aRank:
        :type aRank: int
        :rtype: Graphic3d_TypeOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialType(*args)

    MaterialType = staticmethod(MaterialType)

    def MaterialFromName(*args):
        """
        * Returns the material for specified name or Graphic3d_NOM_DEFAULT if name is unknown.

        :param theName:
        :type theName: char *
        :rtype: Graphic3d_NameOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialFromName(*args)

    MaterialFromName = staticmethod(MaterialFromName)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_MaterialAspect.IncreaseShine = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_IncreaseShine, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetAmbient = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetAmbient, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetDiffuse = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetDiffuse, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetEmissive = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetEmissive, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetShininess = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetShininess, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetSpecular = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetSpecular, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetTransparency = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetTransparency, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetAmbientColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetAmbientColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetDiffuseColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetDiffuseColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetSpecularColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetSpecularColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetEmissiveColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetEmissiveColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetReflectionModeOn = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOn, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetReflectionModeOff = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOff, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetMaterialType = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetMaterialType, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetMaterialName = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetMaterialName, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SetEnvReflexion = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SetEnvReflexion, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Reset = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Reset, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Color = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Color, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.AmbientColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_AmbientColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.DiffuseColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_DiffuseColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.SpecularColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_SpecularColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.EmissiveColor = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_EmissiveColor, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Ambient = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Ambient, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Diffuse = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Diffuse, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Specular = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Specular, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Transparency = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Transparency, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Emissive = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Emissive, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Shininess = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Shininess, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.ReflectionMode = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_ReflectionMode, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.EnvReflexion = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_EnvReflexion, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.Name = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_Name, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.IsDifferent = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_IsDifferent, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.__ne_wrapper__ = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect___ne_wrapper__, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.IsEqual = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_IsEqual, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.__eq_wrapper__ = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect___eq_wrapper__, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect.MaterialName = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect_MaterialName, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_MaterialAspect__kill_pointed, None, Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect_swigregister = _Graphic3d.Graphic3d_MaterialAspect_swigregister
Graphic3d_MaterialAspect_swigregister(Graphic3d_MaterialAspect)

def Graphic3d_MaterialAspect_NumberOfMaterials(*args):
    """
    * Returns the number of predefined textures.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials(*args)

def Graphic3d_MaterialAspect_MaterialType(*args):
    """
    * Returns Standard_True if MyMaterialType equal the parameter AType, //!	 Standard_False otherwise.

    :param AType:
    :type AType: Graphic3d_TypeOfMaterial
    :rtype: bool

    * Returns the type of the predefined material of rank <aRank> Trigger: when <aRank> is < 1 or > NumberOfMaterials.

    :param aRank:
    :type aRank: int
    :rtype: Graphic3d_TypeOfMaterial

    """
    return _Graphic3d.Graphic3d_MaterialAspect_MaterialType(*args)

def Graphic3d_MaterialAspect_MaterialFromName(*args):
    """
    * Returns the material for specified name or Graphic3d_NOM_DEFAULT if name is unknown.

    :param theName:
    :type theName: char *
    :rtype: Graphic3d_NameOfMaterial

    """
    return _Graphic3d.Graphic3d_MaterialAspect_MaterialFromName(*args)

class Graphic3d_Plotter(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        * Deletes the plotter <self>.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_Plotter_Destroy(self, *args)


    def BeginPlot(self, *args):
        """
        * Warning: Returns Standard_True if plotting is enabled in the view. //!	 Raises PlotterDefinitionError from Graphic3d //!	 if plotting has already started.

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Plotter_BeginPlot(self, *args)


    def EndPlot(self, *args):
        """
        * Stops the plotting. Warning: Raises PlotterDefinitionError from Graphic3d //!	 if plotting has not started yet.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_Plotter_EndPlot(self, *args)


    def PlottingState(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Plotter_PlottingState(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Plotter self)"""
        return _Graphic3d.Graphic3d_Plotter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Plotter self) -> Handle_Graphic3d_Plotter"""
        return _Graphic3d.Graphic3d_Plotter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Plotter.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Plotter_Destroy, None, Graphic3d_Plotter)
Graphic3d_Plotter.BeginPlot = new_instancemethod(_Graphic3d.Graphic3d_Plotter_BeginPlot, None, Graphic3d_Plotter)
Graphic3d_Plotter.EndPlot = new_instancemethod(_Graphic3d.Graphic3d_Plotter_EndPlot, None, Graphic3d_Plotter)
Graphic3d_Plotter.PlottingState = new_instancemethod(_Graphic3d.Graphic3d_Plotter_PlottingState, None, Graphic3d_Plotter)
Graphic3d_Plotter._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Plotter__kill_pointed, None, Graphic3d_Plotter)
Graphic3d_Plotter.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Plotter_GetHandle, None, Graphic3d_Plotter)
Graphic3d_Plotter_swigregister = _Graphic3d.Graphic3d_Plotter_swigregister
Graphic3d_Plotter_swigregister(Graphic3d_Plotter)

class Handle_Graphic3d_Plotter(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Plotter_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Plotter(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Plotter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Plotter.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Plotter_Nullify, None, Handle_Graphic3d_Plotter)
Handle_Graphic3d_Plotter.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Plotter_IsNull, None, Handle_Graphic3d_Plotter)
Handle_Graphic3d_Plotter.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Plotter_GetObject, None, Handle_Graphic3d_Plotter)
Handle_Graphic3d_Plotter._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Plotter__kill_pointed, None, Handle_Graphic3d_Plotter)
Handle_Graphic3d_Plotter_swigregister = _Graphic3d.Handle_Graphic3d_Plotter_swigregister
Handle_Graphic3d_Plotter_swigregister(Handle_Graphic3d_Plotter)

def Handle_Graphic3d_Plotter_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Plotter_DownCast(AnObject)
Handle_Graphic3d_Plotter_DownCast = _Graphic3d.Handle_Graphic3d_Plotter_DownCast

class Graphic3d_SequenceNodeOfSequenceOfAddress(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Standard_Address &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_swiginit(self, _Graphic3d.new_Graphic3d_SequenceNodeOfSequenceOfAddress(*args))

    def Value(self, *args):
        """
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_SequenceNodeOfSequenceOfAddress self)"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_SequenceNodeOfSequenceOfAddress self) -> Handle_Graphic3d_SequenceNodeOfSequenceOfAddress"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceNodeOfSequenceOfAddress.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_Value, None, Graphic3d_SequenceNodeOfSequenceOfAddress)
Graphic3d_SequenceNodeOfSequenceOfAddress._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress__kill_pointed, None, Graphic3d_SequenceNodeOfSequenceOfAddress)
Graphic3d_SequenceNodeOfSequenceOfAddress.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_GetHandle, None, Graphic3d_SequenceNodeOfSequenceOfAddress)
Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister = _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister
Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister(Graphic3d_SequenceNodeOfSequenceOfAddress)

class Handle_Graphic3d_SequenceNodeOfSequenceOfAddress(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_swiginit(self, _Graphic3d.new_Handle_Graphic3d_SequenceNodeOfSequenceOfAddress(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_SequenceNodeOfSequenceOfAddress.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_Nullify, None, Handle_Graphic3d_SequenceNodeOfSequenceOfAddress)
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_IsNull, None, Handle_Graphic3d_SequenceNodeOfSequenceOfAddress)
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_GetObject, None, Handle_Graphic3d_SequenceNodeOfSequenceOfAddress)
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress__kill_pointed, None, Handle_Graphic3d_SequenceNodeOfSequenceOfAddress)
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_swigregister(Handle_Graphic3d_SequenceNodeOfSequenceOfAddress)

def Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_DownCast(AnObject)
Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_DownCast = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfAddress_DownCast

class Graphic3d_SequenceNodeOfSequenceOfGroup(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SequenceNodeOfSequenceOfGroup(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_SequenceNodeOfSequenceOfGroup self)"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_SequenceNodeOfSequenceOfGroup self) -> Handle_Graphic3d_SequenceNodeOfSequenceOfGroup"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceNodeOfSequenceOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_Value, None, Graphic3d_SequenceNodeOfSequenceOfGroup)
Graphic3d_SequenceNodeOfSequenceOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup__kill_pointed, None, Graphic3d_SequenceNodeOfSequenceOfGroup)
Graphic3d_SequenceNodeOfSequenceOfGroup.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_GetHandle, None, Graphic3d_SequenceNodeOfSequenceOfGroup)
Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister = _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister
Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister(Graphic3d_SequenceNodeOfSequenceOfGroup)

class Handle_Graphic3d_SequenceNodeOfSequenceOfGroup(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_swiginit(self, _Graphic3d.new_Handle_Graphic3d_SequenceNodeOfSequenceOfGroup(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_SequenceNodeOfSequenceOfGroup.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_Nullify, None, Handle_Graphic3d_SequenceNodeOfSequenceOfGroup)
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_IsNull, None, Handle_Graphic3d_SequenceNodeOfSequenceOfGroup)
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_GetObject, None, Handle_Graphic3d_SequenceNodeOfSequenceOfGroup)
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup__kill_pointed, None, Handle_Graphic3d_SequenceNodeOfSequenceOfGroup)
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_swigregister(Handle_Graphic3d_SequenceNodeOfSequenceOfGroup)

def Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_DownCast(AnObject)
Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_DownCast = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfGroup_DownCast

class Graphic3d_SequenceNodeOfSequenceOfStructure(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Structure &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_SequenceNodeOfSequenceOfStructure(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_SequenceNodeOfSequenceOfStructure self)"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_SequenceNodeOfSequenceOfStructure self) -> Handle_Graphic3d_SequenceNodeOfSequenceOfStructure"""
        return _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceNodeOfSequenceOfStructure.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_Value, None, Graphic3d_SequenceNodeOfSequenceOfStructure)
Graphic3d_SequenceNodeOfSequenceOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure__kill_pointed, None, Graphic3d_SequenceNodeOfSequenceOfStructure)
Graphic3d_SequenceNodeOfSequenceOfStructure.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_GetHandle, None, Graphic3d_SequenceNodeOfSequenceOfStructure)
Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister = _Graphic3d.Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister
Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister(Graphic3d_SequenceNodeOfSequenceOfStructure)

class Handle_Graphic3d_SequenceNodeOfSequenceOfStructure(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_swiginit(self, _Graphic3d.new_Handle_Graphic3d_SequenceNodeOfSequenceOfStructure(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_SequenceNodeOfSequenceOfStructure.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_Nullify, None, Handle_Graphic3d_SequenceNodeOfSequenceOfStructure)
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_IsNull, None, Handle_Graphic3d_SequenceNodeOfSequenceOfStructure)
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_GetObject, None, Handle_Graphic3d_SequenceNodeOfSequenceOfStructure)
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure__kill_pointed, None, Handle_Graphic3d_SequenceNodeOfSequenceOfStructure)
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_swigregister(Handle_Graphic3d_SequenceNodeOfSequenceOfStructure)

def Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_DownCast(AnObject)
Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_DownCast = _Graphic3d.Handle_Graphic3d_SequenceNodeOfSequenceOfStructure_DownCast

class Graphic3d_SequenceOfAddress(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceOfAddress_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfAddress(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfAddress &
        :rtype: Graphic3d_SequenceOfAddress

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfAddress &
        :rtype: Graphic3d_SequenceOfAddress

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfAddress &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfAddress &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfAddress &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfAddress &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Graphic3d_SequenceOfAddress &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Standard_Address &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfAddress_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceOfAddress.Clear = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Clear, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Assign = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Assign, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Set = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Set, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Append = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Append, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Prepend = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Prepend, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_InsertBefore, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_InsertAfter, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.First = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_First, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Last = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Last, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Split = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Split, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Value, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.SetValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_SetValue, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_ChangeValue, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress.Remove = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress_Remove, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfAddress__kill_pointed, None, Graphic3d_SequenceOfAddress)
Graphic3d_SequenceOfAddress_swigregister = _Graphic3d.Graphic3d_SequenceOfAddress_swigregister
Graphic3d_SequenceOfAddress_swigregister(Graphic3d_SequenceOfAddress)

class Graphic3d_SequenceOfGroup(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfGroup(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfGroup &
        :rtype: Graphic3d_SequenceOfGroup

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfGroup &
        :rtype: Graphic3d_SequenceOfGroup

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Graphic3d_SequenceOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Graphic3d_Group &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfGroup_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceOfGroup.Clear = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Clear, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Assign = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Assign, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Set = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Set, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Append = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Append, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Prepend = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Prepend, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_InsertBefore, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_InsertAfter, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.First = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_First, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Last = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Last, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Split = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Split, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Value, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.SetValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_SetValue, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_ChangeValue, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup.Remove = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup_Remove, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfGroup__kill_pointed, None, Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup_swigregister = _Graphic3d.Graphic3d_SequenceOfGroup_swigregister
Graphic3d_SequenceOfGroup_swigregister(Graphic3d_SequenceOfGroup)

class Graphic3d_SequenceOfStructure(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_SequenceOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfStructure(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfStructure &
        :rtype: Graphic3d_SequenceOfStructure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SequenceOfStructure &
        :rtype: Graphic3d_SequenceOfStructure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Structure &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Structure &
        :rtype: None

        :param S:
        :type S: Graphic3d_SequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Graphic3d_Structure &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Graphic3d_Structure &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Graphic3d_SequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Graphic3d_SequenceOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SequenceOfStructure_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SequenceOfStructure.Clear = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Clear, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Assign = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Assign, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Set = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Set, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Append = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Append, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Prepend = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Prepend, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_InsertBefore, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_InsertAfter, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.First = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_First, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Last = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Last, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Split = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Split, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Value = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Value, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.SetValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_SetValue, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.ChangeValue = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_ChangeValue, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure.Remove = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure_Remove, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SequenceOfStructure__kill_pointed, None, Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure_swigregister = _Graphic3d.Graphic3d_SequenceOfStructure_swigregister
Graphic3d_SequenceOfStructure_swigregister(Graphic3d_SequenceOfStructure)

class Graphic3d_SetIteratorOfSetOfGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Graphic3d_SetOfGroup &
        :rtype: None

        """
        _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SetIteratorOfSetOfGroup(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: Graphic3d_SetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SetIteratorOfSetOfGroup.Initialize = new_instancemethod(_Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Initialize, None, Graphic3d_SetIteratorOfSetOfGroup)
Graphic3d_SetIteratorOfSetOfGroup.More = new_instancemethod(_Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_More, None, Graphic3d_SetIteratorOfSetOfGroup)
Graphic3d_SetIteratorOfSetOfGroup.Next = new_instancemethod(_Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Next, None, Graphic3d_SetIteratorOfSetOfGroup)
Graphic3d_SetIteratorOfSetOfGroup.Value = new_instancemethod(_Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_Value, None, Graphic3d_SetIteratorOfSetOfGroup)
Graphic3d_SetIteratorOfSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SetIteratorOfSetOfGroup__kill_pointed, None, Graphic3d_SetIteratorOfSetOfGroup)
Graphic3d_SetIteratorOfSetOfGroup_swigregister = _Graphic3d.Graphic3d_SetIteratorOfSetOfGroup_swigregister
Graphic3d_SetIteratorOfSetOfGroup_swigregister(Graphic3d_SetIteratorOfSetOfGroup)

class Graphic3d_SetListOfSetOfGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_SetListOfSetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SetListOfSetOfGroup(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :rtype: None

        :param I:
        :type I: Handle_Graphic3d_Group &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :rtype: None

        :param I:
        :type I: Handle_Graphic3d_Group &
        :param theIt:
        :type theIt: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :param It:
        :type It: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :param It:
        :type It: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Graphic3d_Group &
        :param It:
        :type It: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        :param Other:
        :type Other: Graphic3d_SetListOfSetOfGroup &
        :param It:
        :type It: Graphic3d_ListIteratorOfSetListOfSetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetListOfSetOfGroup_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SetListOfSetOfGroup.Assign = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Assign, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Set = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Set, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Extent = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Extent, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Clear = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Clear, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_IsEmpty, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Prepend = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Prepend, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Append = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Append, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.First = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_First, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Last = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Last, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.RemoveFirst = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_RemoveFirst, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.Remove = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_Remove, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.InsertBefore = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_InsertBefore, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup.InsertAfter = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup_InsertAfter, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SetListOfSetOfGroup__kill_pointed, None, Graphic3d_SetListOfSetOfGroup)
Graphic3d_SetListOfSetOfGroup_swigregister = _Graphic3d.Graphic3d_SetListOfSetOfGroup_swigregister
Graphic3d_SetListOfSetOfGroup_swigregister(Graphic3d_SetListOfSetOfGroup)

class Graphic3d_SetOfGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_SetOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SetOfGroup(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Graphic3d_SetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Graphic3d_SetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Graphic3d_SetOfGroup &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Graphic3d_Group &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Graphic3d_SetOfGroup &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Graphic3d_SetOfGroup &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_SetOfGroup_IsAProperSubset(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_SetOfGroup.Extent = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Extent, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_IsEmpty, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Clear = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Clear, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Add = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Add, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Remove = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Remove, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Union = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Union, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Intersection = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Intersection, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Difference = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Difference, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.Contains = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_Contains, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.IsASubset = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_IsASubset, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup.IsAProperSubset = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup_IsAProperSubset, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_SetOfGroup__kill_pointed, None, Graphic3d_SetOfGroup)
Graphic3d_SetOfGroup_swigregister = _Graphic3d.Graphic3d_SetOfGroup_swigregister
Graphic3d_SetOfGroup_swigregister(Graphic3d_SetOfGroup)

class Graphic3d_ShaderObject(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        * Checks if the shader object is valid or not.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ShaderObject_IsDone(self, *args)


    def Path(self, *args):
        """
        * Returns the full path to the shader source.

        :rtype: OSD_Path

        """
        return _Graphic3d.Graphic3d_ShaderObject_Path(self, *args)


    def Source(self, *args):
        """
        * Returns the source code of the shader object.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderObject_Source(self, *args)


    def Type(self, *args):
        """
        * Returns type of the shader object.

        :rtype: Graphic3d_TypeOfShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_Type(self, *args)


    def GetId(self, *args):
        """
        * Returns unique ID used to manage resource in graphic driver.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderObject_GetId(self, *args)


    def CreateFromFile(*args):
        """
        * Creates new shader object from specified file.

        :param theType:
        :type theType: Graphic3d_TypeOfShaderObject
        :param thePath:
        :type thePath: TCollection_AsciiString &
        :rtype: Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_CreateFromFile(*args)

    CreateFromFile = staticmethod(CreateFromFile)

    def CreateFromSource(*args):
        """
        * Creates new shader object from specified source.

        :param theType:
        :type theType: Graphic3d_TypeOfShaderObject
        :param theSource:
        :type theSource: TCollection_AsciiString &
        :rtype: Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_CreateFromSource(*args)

    CreateFromSource = staticmethod(CreateFromSource)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ShaderObject self)"""
        return _Graphic3d.Graphic3d_ShaderObject__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ShaderObject.IsDone = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject_IsDone, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject.Path = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject_Path, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject.Source = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject_Source, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject.Type = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject_Type, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject.GetId = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject_GetId, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ShaderObject__kill_pointed, None, Graphic3d_ShaderObject)
Graphic3d_ShaderObject_swigregister = _Graphic3d.Graphic3d_ShaderObject_swigregister
Graphic3d_ShaderObject_swigregister(Graphic3d_ShaderObject)

def Graphic3d_ShaderObject_CreateFromFile(*args):
    """
    * Creates new shader object from specified file.

    :param theType:
    :type theType: Graphic3d_TypeOfShaderObject
    :param thePath:
    :type thePath: TCollection_AsciiString &
    :rtype: Handle_Graphic3d_ShaderObject

    """
    return _Graphic3d.Graphic3d_ShaderObject_CreateFromFile(*args)

def Graphic3d_ShaderObject_CreateFromSource(*args):
    """
    * Creates new shader object from specified source.

    :param theType:
    :type theType: Graphic3d_TypeOfShaderObject
    :param theSource:
    :type theSource: TCollection_AsciiString &
    :rtype: Handle_Graphic3d_ShaderObject

    """
    return _Graphic3d.Graphic3d_ShaderObject_CreateFromSource(*args)

class Graphic3d_ShaderProgram(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates new empty program object.

        :rtype: None

        * Creates program object from pre-defined shaders. Raises Standard_Failure exception if shader resources are unavailable.

        :param theName:
        :type theName: Graphic3d_ShaderProgram::ShaderName
        :rtype: None

        """
        _Graphic3d.Graphic3d_ShaderProgram_swiginit(self, _Graphic3d.new_Graphic3d_ShaderProgram(*args))

    def Destroy(self, *args):
        """
        * Releases resources of program object.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_ShaderProgram_Destroy(self, *args)


    def IsDone(self, *args):
        """
        * Checks if the program object is valid or not.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ShaderProgram_IsDone(self, *args)


    def GetId(self, *args):
        """
        * Returns unique ID used to manage resource in graphic driver.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderProgram_GetId(self, *args)


    def AttachShader(self, *args):
        """
        * Attaches shader object to the program object.

        :param theShader:
        :type theShader: Handle_Graphic3d_ShaderObject &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ShaderProgram_AttachShader(self, *args)


    def DetachShader(self, *args):
        """
        * Detaches shader object from the program object.

        :param theShader:
        :type theShader: Handle_Graphic3d_ShaderObject &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ShaderProgram_DetachShader(self, *args)


    def ShaderObjects(self, *args):
        """
        * Returns list of attached shader objects.

        :rtype: Graphic3d_ShaderObjectList

        """
        return _Graphic3d.Graphic3d_ShaderProgram_ShaderObjects(self, *args)


    def Variables(self, *args):
        """
        * Returns list of custom uniform variables.

        :rtype: Graphic3d_ShaderVariableList

        """
        return _Graphic3d.Graphic3d_ShaderProgram_Variables(self, *args)


    def ClearVariables(self, *args):
        """
        * Removes all custom uniform variables from the program.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_ShaderProgram_ClearVariables(self, *args)


    def ShadersFolder(*args):
        """
        * The path to GLSL programs determined from CSF_ShadersDirectory or CASROOT environment variables. returns the root folder with default GLSL programs.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderProgram_ShadersFolder(*args)

    ShadersFolder = staticmethod(ShadersFolder)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ShaderProgram self)"""
        return _Graphic3d.Graphic3d_ShaderProgram__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ShaderProgram.Destroy = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_Destroy, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.IsDone = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_IsDone, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.GetId = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_GetId, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.AttachShader = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_AttachShader, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.DetachShader = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_DetachShader, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.ShaderObjects = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_ShaderObjects, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.Variables = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_Variables, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram.ClearVariables = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram_ClearVariables, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ShaderProgram__kill_pointed, None, Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram_swigregister = _Graphic3d.Graphic3d_ShaderProgram_swigregister
Graphic3d_ShaderProgram_swigregister(Graphic3d_ShaderProgram)

def Graphic3d_ShaderProgram_ShadersFolder(*args):
    """
    * The path to GLSL programs determined from CSF_ShadersDirectory or CASROOT environment variables. returns the root folder with default GLSL programs.

    :rtype: TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_ShaderProgram_ShadersFolder(*args)

class Graphic3d_ShaderVariable(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self, *args):
        """
        * Returns name of shader variable.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderVariable_Name(self, *args)


    def IsDone(self, *args):
        """
        * Checks if the shader variable is valid or not.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ShaderVariable_IsDone(self, *args)


    def Value(self, *args):
        """
        * Returns interface of shader variable value.

        :rtype: Graphic3d_ValueInterface *

        """
        return _Graphic3d.Graphic3d_ShaderVariable_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ShaderVariable self)"""
        return _Graphic3d.Graphic3d_ShaderVariable__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ShaderVariable.Name = new_instancemethod(_Graphic3d.Graphic3d_ShaderVariable_Name, None, Graphic3d_ShaderVariable)
Graphic3d_ShaderVariable.IsDone = new_instancemethod(_Graphic3d.Graphic3d_ShaderVariable_IsDone, None, Graphic3d_ShaderVariable)
Graphic3d_ShaderVariable.Value = new_instancemethod(_Graphic3d.Graphic3d_ShaderVariable_Value, None, Graphic3d_ShaderVariable)
Graphic3d_ShaderVariable._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ShaderVariable__kill_pointed, None, Graphic3d_ShaderVariable)
Graphic3d_ShaderVariable_swigregister = _Graphic3d.Graphic3d_ShaderVariable_swigregister
Graphic3d_ShaderVariable_swigregister(Graphic3d_ShaderVariable)

class Graphic3d_StdMapNodeOfMapOfStructure(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_Graphic3d_Structure &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_StdMapNodeOfMapOfStructure(*args))

    def Key(self, *args):
        """
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_Key(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_StdMapNodeOfMapOfStructure self)"""
        return _Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_StdMapNodeOfMapOfStructure self) -> Handle_Graphic3d_StdMapNodeOfMapOfStructure"""
        return _Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_StdMapNodeOfMapOfStructure.Key = new_instancemethod(_Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_Key, None, Graphic3d_StdMapNodeOfMapOfStructure)
Graphic3d_StdMapNodeOfMapOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure__kill_pointed, None, Graphic3d_StdMapNodeOfMapOfStructure)
Graphic3d_StdMapNodeOfMapOfStructure.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_GetHandle, None, Graphic3d_StdMapNodeOfMapOfStructure)
Graphic3d_StdMapNodeOfMapOfStructure_swigregister = _Graphic3d.Graphic3d_StdMapNodeOfMapOfStructure_swigregister
Graphic3d_StdMapNodeOfMapOfStructure_swigregister(Graphic3d_StdMapNodeOfMapOfStructure)

class Handle_Graphic3d_StdMapNodeOfMapOfStructure(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_swiginit(self, _Graphic3d.new_Handle_Graphic3d_StdMapNodeOfMapOfStructure(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_StdMapNodeOfMapOfStructure.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_Nullify, None, Handle_Graphic3d_StdMapNodeOfMapOfStructure)
Handle_Graphic3d_StdMapNodeOfMapOfStructure.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_IsNull, None, Handle_Graphic3d_StdMapNodeOfMapOfStructure)
Handle_Graphic3d_StdMapNodeOfMapOfStructure.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_GetObject, None, Handle_Graphic3d_StdMapNodeOfMapOfStructure)
Handle_Graphic3d_StdMapNodeOfMapOfStructure._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure__kill_pointed, None, Handle_Graphic3d_StdMapNodeOfMapOfStructure)
Handle_Graphic3d_StdMapNodeOfMapOfStructure_swigregister = _Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_swigregister
Handle_Graphic3d_StdMapNodeOfMapOfStructure_swigregister(Handle_Graphic3d_StdMapNodeOfMapOfStructure)

def Handle_Graphic3d_StdMapNodeOfMapOfStructure_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_DownCast(AnObject)
Handle_Graphic3d_StdMapNodeOfMapOfStructure_DownCast = _Graphic3d.Handle_Graphic3d_StdMapNodeOfMapOfStructure_DownCast

class Graphic3d_Structure(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a graphic object in the manager <AManager>. //!	 It will appear in all the views of the visualiser. Warning: The default values AspectLine, AspectFillArea, //!	 AspectText and AspectMarker are NOT applied to the //!	 structure. //!	 The structure is not displayed when it is created.

        :param AManager:
        :type AManager: Handle_Graphic3d_StructureManager &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Structure_swiginit(self, _Graphic3d.new_Graphic3d_Structure(*args))

    def Clear(self, *args):
        """
        * if WithDestruction == Standard_True then //!		suppress all the groups of primitives in the structure. //!	 and it is mandatory to create a new group in <self>. //!	 if WithDestruction == Standard_False then //!		clears all the groups of primitives in the structure. //!	 and all the groups are conserved and empty. //!	 They will be erased at the next screen update. //!	 The structure itself is conserved. //!	 The transformation and the attributes of <self> are conserved. //!	 The childs of <self> are conserved.

        :param WithDestruction: default value is Standard_True
        :type WithDestruction: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Clear(self, *args)


    def Destroy(self, *args):
        """
        * Suppresses the structure <self>. //!	 It will be erased at the next screen update.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Destroy(self, *args)


    def Display(self, *args):
        """
        * Displays the structure <self> in all the views of //!	 the visualiser.

        :rtype: void

        * Displays the structure <self> in all the views of //!	 the visualiser, while modifying its current priority. Note: Display Priorities Structure display priorities control the order in which structures are redrawn. When you display a structure, you specify its priority. The lower the value, the lower the display priority. When the display is regenerated, the structures with the lowest priority are drawn first. For structures with the same display priority, the order in which they were displayed determines the drawing order. Open CASCADE supports 11 structure display priorities, 0 to 10. Warning: Raises PriorityDefinitionError if <Priority> is //!	 greater than 10 or a negative value.

        :param Priority:
        :type Priority: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        * Returns the current display priority for the //!	 structure <self>.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Structure_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        * Erases the structure <self> in all the views //!	 of the visualiser.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Erase(self, *args)


    def Highlight(self, *args):
        """
        * Highlights the structure <self> in all the //!	 views of the visualiser, using the following methods: TOHM_COLOR		= drawn in the highlight color //!				 (default white) //!	 TOHM_BLINK		= blinking TOHM_BOUNDBOX	= enclosed by the boundary box //!				 (default white)

        :param Method:
        :type Method: Aspect_TypeOfHighlightMethod
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Highlight(self, *args)


    def SetHighlightColor(self, *args):
        """
        * Modifies the highlight color for the Highlight method //!	 with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetHighlightColor(self, *args)


    def SetInfiniteState(self, *args):
        """
        * Modifies the coordinates of the boundary box //!	 of the structure <self>. //!	 if <AFlag> is Standard_True then <self> is infinite and //!	 the MinMaxValues method or the MinMaxCoord method return : //!	 XMin = YMin = ZMin = RealFirst (). //!	 XMax = YMax = ZMax = RealLast (). //!	 By default, <self> is not infinite but empty.

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        * Modifies the order of displaying the structure. //!	 Values are between 0 and 10. Structures are drawn according to their display priorities in ascending order. //!	 A structure of priority 10 is displayed the last and appears over the others. //!	 The default value is 5. Category: Methods to modify the class definition Warning: If <self> is displayed then the SetDisplayPriority //!	 method erase <self> and display <self> with the //!	 new priority. //!	 Raises PriorityDefinitionError if <Priority> is //!	 greater than 10 or a negative value.

        :param Priority:
        :type Priority: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        * Reset the current priority of the structure to the //!	 previous priority. Category: Methods to modify the class definition Warning: If <self> is displayed then the SetDisplayPriority //!	 method erase <self> and display <self> with the //!	 previous priority.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        * Set Z layer ID for the structure. The Z layer mechanism allows to display structures presented in higher layers in overlay of structures in lower layers by switching off z buffer depth test between layers

        :param theLayerId:
        :type theLayerId: int
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        * Get Z layer ID of displayed structure. The method returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Structure_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        * Changes a sequence of clip planes slicing the structure on rendering. @param thePlanes [in] the set of clip planes.

        :param thePlanes:
        :type thePlanes: Graphic3d_SequenceOfHClipPlane &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetClipPlanes(self, *args)


    def GetClipPlanes(self, *args):
        """
        * Get clip planes slicing the structure on rendering. returns set of clip planes.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Graphic3d_Structure_GetClipPlanes(self, *args)


    def SetPick(self, *args):
        """
        * Modifies the detectability indicator to Standard_True //!	 or Standard_False for the structure <self>. //!	 The default value at the definition of <self> is //!	 Standard_True.

        :param AValue:
        :type AValue: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetPick(self, *args)


    def SetPrimitivesAspect(self, *args):
        """
        * Modifies the default attributes for lines //!	 in the structure <self>.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectLine3d &
        :rtype: None

        * Modifies the default attributes for faces //!	 in the structure <self>.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        * Modifies the default attributes for text //!	 in the structure <self>.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectText3d &
        :rtype: None

        * Modifies the default attributes for markers //!	 in the structure <self>.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectMarker3d &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetPrimitivesAspect(self, *args)


    def SetVisible(self, *args):
        """
        * Modifies the visibility indicator to Standard_True or //!	 Standard_False for the structure <self>. //!	 The default value at the definition of <self> is //!	 Standard_True.

        :param AValue:
        :type AValue: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetVisible(self, *args)


    def SetManager(self, *args):
        """
        * Moves the graphic object <self> in the manager <AManager>. //!	 If <WithPropagation> is Standard_True then all the connected //!	 graphic objects to <self> are moved.

        :param AManager:
        :type AManager: Handle_Graphic3d_StructureManager &
        :param WithPropagation: default value is Standard_False
        :type WithPropagation: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetManager(self, *args)


    def SetVisual(self, *args):
        """
        * Modifies the visualisation mode for the structure <self>.

        :param AVisual:
        :type AVisual: Graphic3d_TypeOfStructure
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        * Modifies the minimum and maximum zoom coefficients //!	 for the structure <self>. //!	 The default value at the definition of <self> is unlimited. Category: Methods to modify the class definition Warning: Raises StructureDefinitionError if <LimitInf> is //!	 greater than <LimitSup> or if <LimitInf> or //!	 <LimitSup> is a negative value.

        :param LimitInf:
        :type LimitInf: float
        :param LimitSup:
        :type LimitSup: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetZoomLimit(self, *args)


    def UnHighlight(self, *args):
        """
        * Suppresses the highlight for the structure <self> //!	 in all the views of the visualiser.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_UnHighlight(self, *args)


    def Compute(self, *args):
        """
        :rtype: void

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: Handle_Graphic3d_Structure

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: Handle_Graphic3d_Structure

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: void

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Compute(self, *args)


    def ReCompute(self, *args):
        """
        * Forces a new construction of the structure <self> //!	 if <self> is displayed and TOS_COMPUTED.

        :rtype: None

        * Forces a new construction of the structure <self> //!	 if <self> is displayed in <aProjetor> and TOS_COMPUTED.

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        * Returns Standard_True if the structure <self> contains //!	 Polygons, Triangles or Quadrangles.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_ContainsFacet(self, *args)


    def FillArea3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_Structure_FillArea3dAspect(self, *args)


    def Groups(self, *args):
        """
        * Returns the groups sequence included in the structure <self> (internal storage).

        :rtype: Graphic3d_SequenceOfGroup

        """
        return _Graphic3d.Graphic3d_Structure_Groups(self, *args)


    def NumberOfGroups(self, *args):
        """
        * Returns the current number of groups in the //!	 structure <self>.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Structure_NumberOfGroups(self, *args)


    def HighlightColor(self, *args):
        """
        * Returns the highlight color for the Highlight method //!	 with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: Quantity_Color

        """
        return _Graphic3d.Graphic3d_Structure_HighlightColor(self, *args)


    def IsDeleted(self, *args):
        """
        * Returns Standard_True if the structure <self> is deleted. //!	 <self> is deleted after the call Remove (me).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        * Returns the display indicator for the structure <self>.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        * Returns Standard_True if the structure <self> is empty. Warning: A structure is empty if : //!		it do not have group or all the groups are empties //!		and it do not have descendant or all the descendants //!		are empties.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        * Returns Standard_True if the structure <self> is infinite.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        * Returns the highlight indicator for the structure <self>.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsHighlighted(self, *args)


    def IsSelectable(self, *args):
        """
        * Returns the detectability indicator for the structure <self>.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsSelectable(self, *args)


    def IsRotated(self, *args):
        """
        * Returns Standard_True if the structure <self> is rotated. //!	 <=> The transformation != Identity, != Scale, != Translation.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsRotated(self, *args)


    def IsTransformed(self, *args):
        """
        * Returns Standard_True if the structure <self> is transformed. //!	 <=> The transformation != Identity.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        * Returns the visibility indicator for the structure <self>.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_IsVisible(self, *args)


    def Line3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectLine3d

        """
        return _Graphic3d.Graphic3d_Structure_Line3dAspect(self, *args)


    def Marker3dAspect(self, *args):
        """
        * Returns the current group of graphic attributes used for 3d marker primitives.

        :rtype: Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Graphic3d_Structure_Marker3dAspect(self, *args)


    def MinMaxValues(self, *args):
        """
        * Returns the coordinates of the boundary box //!	 of the structure <self>. Warning: If the structure <self> is empty or infinite then : //!	 XMin = YMin = ZMin = RealFirst (). //!	 XMax = YMax = ZMax = RealLast ().

        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param ZMin:
        :type ZMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :param ZMax:
        :type ZMax: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_MinMaxValues(self, *args)


    def PrimitivesAspect(self, *args):
        """
        * Returns the current values of the default attributes.

        :param CTXL:
        :type CTXL: Handle_Graphic3d_AspectLine3d &
        :param CTXT:
        :type CTXT: Handle_Graphic3d_AspectText3d &
        :param CTXM:
        :type CTXM: Handle_Graphic3d_AspectMarker3d &
        :param CTXF:
        :type CTXF: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_PrimitivesAspect(self, *args)


    def Text3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectText3d

        """
        return _Graphic3d.Graphic3d_Structure_Text3dAspect(self, *args)


    def Visual(self, *args):
        """
        * Returns the visualisation mode for the structure <self>.

        :rtype: Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_Visual(self, *args)


    def AcceptConnection(*args):
        """
        * Returns Standard_True if the connection is possible between //!	 <AStructure1> and <AStructure2> without a creation //!	 of a cycle. //!	 It's not possible to call the method //!	 AStructure1->Connect (AStructure2, TypeOfConnection) //!	 if //!	 - the set of all ancestors of <AStructure1> contains //!	 <AStructure1> and if the //!	 TypeOfConnection == TOC_DESCENDANT //!	 - the set of all descendants of <AStructure1> contains //!	 <AStructure2> and if the //!	 TypeOfConnection == TOC_ANCESTOR

        :param AStructure1:
        :type AStructure1: Handle_Graphic3d_Structure &
        :param AStructure2:
        :type AStructure2: Handle_Graphic3d_Structure &
        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_AcceptConnection(*args)

    AcceptConnection = staticmethod(AcceptConnection)

    def Ancestors(self, *args):
        """
        * Returns the group of structures to which <self> is connected.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Ancestors(self, *args)


    def Connect(self, *args):
        """
        * If Atype is TOC_DESCENDANT then add <AStructure> //!	 as a child structure of <self>. //!	 If Atype is TOC_ANCESTOR then add <AStructure> //!	 as a parent structure of <self>. //!	 The connection propagates Display, Highlight, Erase, //!	 Remove, and stacks the transformations. //!	 No connection if the graph of the structures //!	 contains a cycle and <WithCheck> is Standard_True;

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :param WithCheck: default value is Standard_False
        :type WithCheck: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Connect(self, *args)


    def Descendants(self, *args):
        """
        * Returns the group of structures connected to <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        * Suppress the connection between <AStructure> and <self>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        * If Atype is TOC_DESCENDANT then suppress all //!	 the connections with the child structures of <self>. //!	 If Atype is TOC_ANCESTOR then suppress all //!	 the connections with the parent structures of <self>.

        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_DisconnectAll(self, *args)


    def Network(*args):
        """
        * Returns <ASet> the group of structures : //!	 - directly or indirectly connected to <AStructure> if the //!	 TypeOfConnection == TOC_DESCENDANT //!	 - to which <AStructure> is directly or indirectly connected //!	 if the TypeOfConnection == TOC_ANCESTOR

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :param ASet:
        :type ASet: Graphic3d_MapOfStructure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Network(*args)

    Network = staticmethod(Network)

    def SetOwner(self, *args):
        """
        :param Owner:
        :type Owner: Standard_Address
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetOwner(self, *args)


    def Owner(self, *args):
        """
        :rtype: Standard_Address

        """
        return _Graphic3d.Graphic3d_Structure_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Structure_HLRValidation(self, *args)


    def Composition(self, *args):
        """
        * Returns the type of composition applied to matrices //!	 of transformation of <self>.

        :rtype: Graphic3d_TypeOfComposition

        """
        return _Graphic3d.Graphic3d_Structure_Composition(self, *args)


    def SetTransform(self, *args):
        """
        * Modifies the current local modelling transformation //!	 in the structure <self>. //!	 It is defined as a 4*4 real matrix. //!	 ------------------- //!	 | a11 a12 a13 t1 | //!	 | a21 a22 a23 t2 | //!	 | a31 a32 a33 t3 | //!	 | 0 0 0 1 | //!	 ------------------- //!	 TypeOfComposition : TOC_REPLACE //!				TOC_POSTCONCATENATE Then the modified Local Modelling Transformation is composed with the current Global Modelling Transformation to create a new Composite Modelling Transformation. The compose type specifies the role of the current local modelling transformation (L) in composing the new value for the current local modelling transformation (L'), which is then combined with the current global modelling transforma- tion (G) to calculate the new composite modelling transfor- mation (C). TOC_REPLACE The transformation matrix (T) replaces the value of current local modelling transformation (L). //!	L' <- T //!	C <- G x L' TOC_POSTCONCATENATE The current local modelling transformation (L) is multiplied by the transformation matrix (T): //!	L' <- T x L //!	C <- G x L' Category: Methods to manage the structure transformation Warning: Raises TransformError if the matrix is not a 4x4 matrix.

        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :param AType:
        :type AType: Graphic3d_TypeOfComposition
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetTransform(self, *args)


    def Transform(self, *args):
        """
        * Returns the transformation associated with //!	 the structure <self>.

        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        * Modifies the current modelling transform persistence (pan, zoom or rotate)

        :param AFlag:
        :type AFlag: Graphic3d_TransModeFlags &
        :param APoint:
        :type APoint: gp_Pnt
        :rtype: None

        :param AFlag:
        :type AFlag: Graphic3d_TransModeFlags &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetTransformPersistence(self, *args)


    def TransformPersistenceMode(self, *args):
        """
        * Get the current modelling transform persistence (pan, zoom or rotate)

        :rtype: Graphic3d_TransModeFlags

        """
        return _Graphic3d.Graphic3d_Structure_TransformPersistenceMode(self, *args)


    def TransformPersistencePoint(self, *args):
        """
        * Get the current point of relative modelling transform persistence

        :rtype: gp_Pnt

        """
        return _Graphic3d.Graphic3d_Structure_TransformPersistencePoint(self, *args)


    def ComputeVisual(self, *args):
        """
        :rtype: Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        * Clears the structure <self>.

        :param WithDestruction:
        :type WithDestruction: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        :param ADaughter:
        :type ADaughter: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        :param ADaughter:
        :type ADaughter: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicDisconnect(self, *args)


    def GraphicHighlight(self, *args):
        """
        * Highlights the structure <self>.

        :param Method:
        :type Method: Aspect_TypeOfHighlightMethod
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicHighlight(self, *args)


    def GraphicTransform(self, *args):
        """
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicTransform(self, *args)


    def GraphicUnHighlight(self, *args):
        """
        * Suppress the highlight for the structure <self>.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_GraphicUnHighlight(self, *args)


    def Identification(self, *args):
        """
        * Returns the identification number of the structure <self>.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Structure_Identification(self, *args)


    def Plot(self, *args):
        """
        :param aPlotter:
        :type aPlotter: Handle_Graphic3d_Plotter &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_Plot(self, *args)


    def PrintNetwork(*args):
        """
        * Prints informations about the network associated //!	 with the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :rtype: void

        """
        return _Graphic3d.Graphic3d_Structure_PrintNetwork(*args)

    PrintNetwork = staticmethod(PrintNetwork)

    def Remove(self, *args):
        """
        * Suppress the structure <self>. //!	 It will be erased at the next screen update. Warning: No more graphic operations in <self> after this call. Category: Methods to modify the class definition

        :rtype: None

        * Suppress the adress <APtr> in the list //!	 of descendants or in the list of ancestors.

        :param APtr:
        :type APtr: Standard_Address
        :param AType:
        :type AType: Graphic3d_TypeOfConnection
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_Remove(self, *args)


    def SetComputeVisual(self, *args):
        """
        :param AVisual:
        :type AVisual: Graphic3d_TypeOfStructure
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Structure_SetComputeVisual(self, *args)


    def Transforms(*args):
        """
        * Transforms <X>, <Y>, <Z> with the transformation <ATrsf>.

        :param ATrsf:
        :type ATrsf: TColStd_Array2OfReal &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param NewX:
        :type NewX: float &
        :param NewY:
        :type NewY: float &
        :param NewZ:
        :type NewZ: float &
        :rtype: void

        * Transforms <Coord> with the transformation <ATrsf>.

        :param ATrsf:
        :type ATrsf: TColStd_Array2OfReal &
        :param Coord:
        :type Coord: Graphic3d_Vector &
        :rtype: Graphic3d_Vector

        * Transforms <Coord> with the transformation <ATrsf>.

        :param ATrsf:
        :type ATrsf: TColStd_Array2OfReal &
        :param Coord:
        :type Coord: Graphic3d_Vertex &
        :rtype: Graphic3d_Vertex

        """
        return _Graphic3d.Graphic3d_Structure_Transforms(*args)

    Transforms = staticmethod(Transforms)

    def CStructure(self, *args):
        """
        * Returns the c structure associated to <self>.

        :rtype: Graphic3d_CStructure *

        """
        return _Graphic3d.Graphic3d_Structure_CStructure(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Structure self)"""
        return _Graphic3d.Graphic3d_Structure__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Structure self) -> Handle_Graphic3d_Structure"""
        return _Graphic3d.Graphic3d_Structure_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Structure.Clear = new_instancemethod(_Graphic3d.Graphic3d_Structure_Clear, None, Graphic3d_Structure)
Graphic3d_Structure.Destroy = new_instancemethod(_Graphic3d.Graphic3d_Structure_Destroy, None, Graphic3d_Structure)
Graphic3d_Structure.Display = new_instancemethod(_Graphic3d.Graphic3d_Structure_Display, None, Graphic3d_Structure)
Graphic3d_Structure.DisplayPriority = new_instancemethod(_Graphic3d.Graphic3d_Structure_DisplayPriority, None, Graphic3d_Structure)
Graphic3d_Structure.Erase = new_instancemethod(_Graphic3d.Graphic3d_Structure_Erase, None, Graphic3d_Structure)
Graphic3d_Structure.Highlight = new_instancemethod(_Graphic3d.Graphic3d_Structure_Highlight, None, Graphic3d_Structure)
Graphic3d_Structure.SetHighlightColor = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetHighlightColor, None, Graphic3d_Structure)
Graphic3d_Structure.SetInfiniteState = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetInfiniteState, None, Graphic3d_Structure)
Graphic3d_Structure.SetDisplayPriority = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetDisplayPriority, None, Graphic3d_Structure)
Graphic3d_Structure.ResetDisplayPriority = new_instancemethod(_Graphic3d.Graphic3d_Structure_ResetDisplayPriority, None, Graphic3d_Structure)
Graphic3d_Structure.SetZLayer = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetZLayer, None, Graphic3d_Structure)
Graphic3d_Structure.GetZLayer = new_instancemethod(_Graphic3d.Graphic3d_Structure_GetZLayer, None, Graphic3d_Structure)
Graphic3d_Structure.SetClipPlanes = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetClipPlanes, None, Graphic3d_Structure)
Graphic3d_Structure.GetClipPlanes = new_instancemethod(_Graphic3d.Graphic3d_Structure_GetClipPlanes, None, Graphic3d_Structure)
Graphic3d_Structure.SetPick = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetPick, None, Graphic3d_Structure)
Graphic3d_Structure.SetPrimitivesAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetPrimitivesAspect, None, Graphic3d_Structure)
Graphic3d_Structure.SetVisible = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetVisible, None, Graphic3d_Structure)
Graphic3d_Structure.SetManager = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetManager, None, Graphic3d_Structure)
Graphic3d_Structure.SetVisual = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetVisual, None, Graphic3d_Structure)
Graphic3d_Structure.SetZoomLimit = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetZoomLimit, None, Graphic3d_Structure)
Graphic3d_Structure.UnHighlight = new_instancemethod(_Graphic3d.Graphic3d_Structure_UnHighlight, None, Graphic3d_Structure)
Graphic3d_Structure.Compute = new_instancemethod(_Graphic3d.Graphic3d_Structure_Compute, None, Graphic3d_Structure)
Graphic3d_Structure.ReCompute = new_instancemethod(_Graphic3d.Graphic3d_Structure_ReCompute, None, Graphic3d_Structure)
Graphic3d_Structure.ContainsFacet = new_instancemethod(_Graphic3d.Graphic3d_Structure_ContainsFacet, None, Graphic3d_Structure)
Graphic3d_Structure.FillArea3dAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_FillArea3dAspect, None, Graphic3d_Structure)
Graphic3d_Structure.Groups = new_instancemethod(_Graphic3d.Graphic3d_Structure_Groups, None, Graphic3d_Structure)
Graphic3d_Structure.NumberOfGroups = new_instancemethod(_Graphic3d.Graphic3d_Structure_NumberOfGroups, None, Graphic3d_Structure)
Graphic3d_Structure.HighlightColor = new_instancemethod(_Graphic3d.Graphic3d_Structure_HighlightColor, None, Graphic3d_Structure)
Graphic3d_Structure.IsDeleted = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsDeleted, None, Graphic3d_Structure)
Graphic3d_Structure.IsDisplayed = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsDisplayed, None, Graphic3d_Structure)
Graphic3d_Structure.IsEmpty = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsEmpty, None, Graphic3d_Structure)
Graphic3d_Structure.IsInfinite = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsInfinite, None, Graphic3d_Structure)
Graphic3d_Structure.IsHighlighted = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsHighlighted, None, Graphic3d_Structure)
Graphic3d_Structure.IsSelectable = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsSelectable, None, Graphic3d_Structure)
Graphic3d_Structure.IsRotated = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsRotated, None, Graphic3d_Structure)
Graphic3d_Structure.IsTransformed = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsTransformed, None, Graphic3d_Structure)
Graphic3d_Structure.IsVisible = new_instancemethod(_Graphic3d.Graphic3d_Structure_IsVisible, None, Graphic3d_Structure)
Graphic3d_Structure.Line3dAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_Line3dAspect, None, Graphic3d_Structure)
Graphic3d_Structure.Marker3dAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_Marker3dAspect, None, Graphic3d_Structure)
Graphic3d_Structure.MinMaxValues = new_instancemethod(_Graphic3d.Graphic3d_Structure_MinMaxValues, None, Graphic3d_Structure)
Graphic3d_Structure.PrimitivesAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_PrimitivesAspect, None, Graphic3d_Structure)
Graphic3d_Structure.Text3dAspect = new_instancemethod(_Graphic3d.Graphic3d_Structure_Text3dAspect, None, Graphic3d_Structure)
Graphic3d_Structure.Visual = new_instancemethod(_Graphic3d.Graphic3d_Structure_Visual, None, Graphic3d_Structure)
Graphic3d_Structure.Ancestors = new_instancemethod(_Graphic3d.Graphic3d_Structure_Ancestors, None, Graphic3d_Structure)
Graphic3d_Structure.Connect = new_instancemethod(_Graphic3d.Graphic3d_Structure_Connect, None, Graphic3d_Structure)
Graphic3d_Structure.Descendants = new_instancemethod(_Graphic3d.Graphic3d_Structure_Descendants, None, Graphic3d_Structure)
Graphic3d_Structure.Disconnect = new_instancemethod(_Graphic3d.Graphic3d_Structure_Disconnect, None, Graphic3d_Structure)
Graphic3d_Structure.DisconnectAll = new_instancemethod(_Graphic3d.Graphic3d_Structure_DisconnectAll, None, Graphic3d_Structure)
Graphic3d_Structure.SetOwner = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetOwner, None, Graphic3d_Structure)
Graphic3d_Structure.Owner = new_instancemethod(_Graphic3d.Graphic3d_Structure_Owner, None, Graphic3d_Structure)
Graphic3d_Structure.SetHLRValidation = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetHLRValidation, None, Graphic3d_Structure)
Graphic3d_Structure.HLRValidation = new_instancemethod(_Graphic3d.Graphic3d_Structure_HLRValidation, None, Graphic3d_Structure)
Graphic3d_Structure.Composition = new_instancemethod(_Graphic3d.Graphic3d_Structure_Composition, None, Graphic3d_Structure)
Graphic3d_Structure.SetTransform = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetTransform, None, Graphic3d_Structure)
Graphic3d_Structure.Transform = new_instancemethod(_Graphic3d.Graphic3d_Structure_Transform, None, Graphic3d_Structure)
Graphic3d_Structure.SetTransformPersistence = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetTransformPersistence, None, Graphic3d_Structure)
Graphic3d_Structure.TransformPersistenceMode = new_instancemethod(_Graphic3d.Graphic3d_Structure_TransformPersistenceMode, None, Graphic3d_Structure)
Graphic3d_Structure.TransformPersistencePoint = new_instancemethod(_Graphic3d.Graphic3d_Structure_TransformPersistencePoint, None, Graphic3d_Structure)
Graphic3d_Structure.ComputeVisual = new_instancemethod(_Graphic3d.Graphic3d_Structure_ComputeVisual, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicClear = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicClear, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicConnect = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicConnect, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicDisconnect = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicDisconnect, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicHighlight = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicHighlight, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicTransform = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicTransform, None, Graphic3d_Structure)
Graphic3d_Structure.GraphicUnHighlight = new_instancemethod(_Graphic3d.Graphic3d_Structure_GraphicUnHighlight, None, Graphic3d_Structure)
Graphic3d_Structure.Identification = new_instancemethod(_Graphic3d.Graphic3d_Structure_Identification, None, Graphic3d_Structure)
Graphic3d_Structure.Plot = new_instancemethod(_Graphic3d.Graphic3d_Structure_Plot, None, Graphic3d_Structure)
Graphic3d_Structure.Remove = new_instancemethod(_Graphic3d.Graphic3d_Structure_Remove, None, Graphic3d_Structure)
Graphic3d_Structure.SetComputeVisual = new_instancemethod(_Graphic3d.Graphic3d_Structure_SetComputeVisual, None, Graphic3d_Structure)
Graphic3d_Structure.CStructure = new_instancemethod(_Graphic3d.Graphic3d_Structure_CStructure, None, Graphic3d_Structure)
Graphic3d_Structure._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Structure__kill_pointed, None, Graphic3d_Structure)
Graphic3d_Structure.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Structure_GetHandle, None, Graphic3d_Structure)
Graphic3d_Structure_swigregister = _Graphic3d.Graphic3d_Structure_swigregister
Graphic3d_Structure_swigregister(Graphic3d_Structure)

def Graphic3d_Structure_AcceptConnection(*args):
    """
    * Returns Standard_True if the connection is possible between //!	 <AStructure1> and <AStructure2> without a creation //!	 of a cycle. //!	 It's not possible to call the method //!	 AStructure1->Connect (AStructure2, TypeOfConnection) //!	 if //!	 - the set of all ancestors of <AStructure1> contains //!	 <AStructure1> and if the //!	 TypeOfConnection == TOC_DESCENDANT //!	 - the set of all descendants of <AStructure1> contains //!	 <AStructure2> and if the //!	 TypeOfConnection == TOC_ANCESTOR

    :param AStructure1:
    :type AStructure1: Handle_Graphic3d_Structure &
    :param AStructure2:
    :type AStructure2: Handle_Graphic3d_Structure &
    :param AType:
    :type AType: Graphic3d_TypeOfConnection
    :rtype: bool

    """
    return _Graphic3d.Graphic3d_Structure_AcceptConnection(*args)

def Graphic3d_Structure_Network(*args):
    """
    * Returns <ASet> the group of structures : //!	 - directly or indirectly connected to <AStructure> if the //!	 TypeOfConnection == TOC_DESCENDANT //!	 - to which <AStructure> is directly or indirectly connected //!	 if the TypeOfConnection == TOC_ANCESTOR

    :param AStructure:
    :type AStructure: Handle_Graphic3d_Structure &
    :param AType:
    :type AType: Graphic3d_TypeOfConnection
    :param ASet:
    :type ASet: Graphic3d_MapOfStructure &
    :rtype: void

    """
    return _Graphic3d.Graphic3d_Structure_Network(*args)

def Graphic3d_Structure_PrintNetwork(*args):
    """
    * Prints informations about the network associated //!	 with the structure <AStructure>.

    :param AStructure:
    :type AStructure: Handle_Graphic3d_Structure &
    :param AType:
    :type AType: Graphic3d_TypeOfConnection
    :rtype: void

    """
    return _Graphic3d.Graphic3d_Structure_PrintNetwork(*args)

def Graphic3d_Structure_Transforms(*args):
    """
    * Transforms <X>, <Y>, <Z> with the transformation <ATrsf>.

    :param ATrsf:
    :type ATrsf: TColStd_Array2OfReal &
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param Z:
    :type Z: float
    :param NewX:
    :type NewX: float &
    :param NewY:
    :type NewY: float &
    :param NewZ:
    :type NewZ: float &
    :rtype: void

    * Transforms <Coord> with the transformation <ATrsf>.

    :param ATrsf:
    :type ATrsf: TColStd_Array2OfReal &
    :param Coord:
    :type Coord: Graphic3d_Vector &
    :rtype: Graphic3d_Vector

    * Transforms <Coord> with the transformation <ATrsf>.

    :param ATrsf:
    :type ATrsf: TColStd_Array2OfReal &
    :param Coord:
    :type Coord: Graphic3d_Vertex &
    :rtype: Graphic3d_Vertex

    """
    return _Graphic3d.Graphic3d_Structure_Transforms(*args)

class Handle_Graphic3d_Structure(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Structure_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Structure(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Structure_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Structure.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Structure_Nullify, None, Handle_Graphic3d_Structure)
Handle_Graphic3d_Structure.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Structure_IsNull, None, Handle_Graphic3d_Structure)
Handle_Graphic3d_Structure.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Structure_GetObject, None, Handle_Graphic3d_Structure)
Handle_Graphic3d_Structure._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Structure__kill_pointed, None, Handle_Graphic3d_Structure)
Handle_Graphic3d_Structure_swigregister = _Graphic3d.Handle_Graphic3d_Structure_swigregister
Handle_Graphic3d_Structure_swigregister(Handle_Graphic3d_Structure)

def Handle_Graphic3d_Structure_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Structure_DownCast(AnObject)
Handle_Graphic3d_Structure_DownCast = _Graphic3d.Handle_Graphic3d_Structure_DownCast

class Graphic3d_StructureManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        * Deletes the manager <self>.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Destroy(self, *args)


    def SetPrimitivesAspect(self, *args):
        """
        * Modifies the default attributes for lines //!	 in the visualiser.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectLine3d &
        :rtype: None

        * Modifies the default attributes for faces //!	 in the visualiser.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        * Modifies the default attributes for text //!	 in the visualiser.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectText3d &
        :rtype: None

        * Modifies the default attributes for markers //!	 in the visualiser.

        :param CTX:
        :type CTX: Handle_Graphic3d_AspectMarker3d &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_SetPrimitivesAspect(self, *args)


    def SetUpdateMode(self, *args):
        """
        * Modifies the screen update mode. //!	 TOU_ASAP	as soon as possible //!	 TOU_WAIT	on demand (with the Update function) Note : Dynamic Operations and Update Mode Use SetUpdateMode to control when changes to the display are made. Use one of the following functions to update one or more views: - Update all views of the viewer: Visual3d_ViewManager::Update () - Update one view of the viewer: Visual3d_View::Update () Use one of the following functions to update the entire display: - Redraw all structures in all views: Visual3d_ViewManager::Redraw () - Redraw all structures in one view: Visual3d_View::Redraw () Update)

        :param AType:
        :type AType: Aspect_TypeOfUpdate
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_SetUpdateMode(self, *args)


    def Update(self, *args):
        """
        * Updates screen in function of modifications of //!	 the structures. Warning: Not necessary if the update mode is TOU_ASAP.

        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Update(self, *args)


    def DisplayedStructures(self, *args):
        """
        * Returns the set of structures displayed in //!	 visualiser <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_DisplayedStructures(self, *args)


    def HighlightedStructures(self, *args):
        """
        * Returns the set of highlighted structures //!	 in a visualiser <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_HighlightedStructures(self, *args)


    def PickStructures(self, *args):
        """
        * Returns the set of detectable structures //!	 in a visualiser <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_PickStructures(self, *args)


    def FillArea3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_StructureManager_FillArea3dAspect(self, *args)


    def Limit(*args):
        """
        * Returns maximum number of managers defineable.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_StructureManager_Limit(*args)

    Limit = staticmethod(Limit)

    def Line3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectLine3d

        """
        return _Graphic3d.Graphic3d_StructureManager_Line3dAspect(self, *args)


    def Marker3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Graphic3d_StructureManager_Marker3dAspect(self, *args)


    def MinMaxValues(self, *args):
        """
        * Returns the coordinates of the boundary box of all //!	 structures displayed in the manager <self>.

        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param ZMin:
        :type ZMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :param ZMax:
        :type ZMax: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_MinMaxValues(self, *args)


    def PrimitivesAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :param CTXL:
        :type CTXL: Handle_Graphic3d_AspectLine3d &
        :param CTXT:
        :type CTXT: Handle_Graphic3d_AspectText3d &
        :param CTXM:
        :type CTXM: Handle_Graphic3d_AspectMarker3d &
        :param CTXF:
        :type CTXF: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_PrimitivesAspect(self, *args)


    def Text3dAspect(self, *args):
        """
        * Returns the values of the current default attributes.

        :rtype: Handle_Graphic3d_AspectText3d

        """
        return _Graphic3d.Graphic3d_StructureManager_Text3dAspect(self, *args)


    def UpdateMode(self, *args):
        """
        * Returns the screen update mode. //!	 TOU_ASAP	as soon as possible //!	 TOU_WAIT	on demand (Update)

        :rtype: Aspect_TypeOfUpdate

        """
        return _Graphic3d.Graphic3d_StructureManager_UpdateMode(self, *args)


    def ChangeDisplayPriority(self, *args):
        """
        * Changes the display priority of the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param OldPriority:
        :type OldPriority: int
        :param NewPriority:
        :type NewPriority: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_ChangeDisplayPriority(self, *args)


    def ChangeZLayer(self, *args):
        """
        * Change Z layer for structure. The z layer mechanism allows to display structures in higher layers in overlay of structures in lower layers.

        :param theStructure:
        :type theStructure: Handle_Graphic3d_Structure &
        :param theLayerId:
        :type theLayerId: int
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_ChangeZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        * Get Z layer ID assigned to structure. If the structure has no layer ID (deleted from graphic driver), the method returns -1.

        :param theStructure:
        :type theStructure: Handle_Graphic3d_Structure &
        :rtype: int

        """
        return _Graphic3d.Graphic3d_StructureManager_GetZLayer(self, *args)


    def SetZLayerSettings(self, *args):
        """
        * Sets the settings for a single Z layer for all managed views.

        :param theLayerId:
        :type theLayerId: int
        :param theSettings:
        :type theSettings: Graphic3d_ZLayerSettings
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_SetZLayerSettings(self, *args)


    def ZLayerSettings(self, *args):
        """
        * Returns the settings of a single Z layer.

        :param theLayerId:
        :type theLayerId: int
        :rtype: Graphic3d_ZLayerSettings

        """
        return _Graphic3d.Graphic3d_StructureManager_ZLayerSettings(self, *args)


    def AddZLayer(self, *args):
        """
        * Add a new top-level Z layer and get its ID as <theLayerId> value. The method returns Standard_False if the layer can not be created. The z layer mechanism allows to display structures in higher layers in overlay of structures in lower layers.

        :param theLayerId:
        :type theLayerId: int &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_StructureManager_AddZLayer(self, *args)


    def RemoveZLayer(self, *args):
        """
        * Remove Z layer with ID <theLayerId>. Method returns Standard_False if the layer can not be removed or doesn't exists. By default, there is always a default bottom-level layer that can't be removed.

        :param theLayerId:
        :type theLayerId: int
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_StructureManager_RemoveZLayer(self, *args)


    def GetAllZLayers(self, *args):
        """
        * Return all Z layer ids in sequence ordered by level from lowest layer to highest. The first layer ID in sequence is the default layer that can't be removed.

        :param theLayerSeq:
        :type theLayerSeq: TColStd_SequenceOfInteger &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_GetAllZLayers(self, *args)


    def CurrentId(*args):
        """
        * Returns a current identifier available.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_StructureManager_CurrentId(*args)

    CurrentId = staticmethod(CurrentId)

    def ReCompute(self, *args):
        """
        * Forces a new construction of the structure <AStructure> //!	 if <AStructure> is displayed and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: void

        * Forces a new construction of the structure <AStructure> //!	 if <AStructure> is displayed in <AProjector> and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AProjector:
        :type AProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_ReCompute(self, *args)


    def Clear(self, *args):
        """
        * Clears the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param WithDestruction:
        :type WithDestruction: bool
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Clear(self, *args)


    def Connect(self, *args):
        """
        * Connects the structures <AMother> and <ADaughter>.

        :param AMother:
        :type AMother: Handle_Graphic3d_Structure &
        :param ADaughter:
        :type ADaughter: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Connect(self, *args)


    def Disconnect(self, *args):
        """
        * Disconnects the structures <AMother> and <ADaughter>.

        :param AMother:
        :type AMother: Handle_Graphic3d_Structure &
        :param ADaughter:
        :type ADaughter: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Disconnect(self, *args)


    def Display(self, *args):
        """
        * Display the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Display(self, *args)


    def Erase(self, *args):
        """
        * Erases the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Erase(self, *args)


    def Highlight(self, *args):
        """
        * Highlights the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AMethod:
        :type AMethod: Aspect_TypeOfHighlightMethod
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_Highlight(self, *args)


    def SetTransform(self, *args):
        """
        * Transforms the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param ATrsf:
        :type ATrsf: TColStd_Array2OfReal &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_SetTransform(self, *args)


    def GraphicDriver(self, *args):
        """
        * Returns the graphic driver of <self>.

        :rtype: Handle_Graphic3d_GraphicDriver

        """
        return _Graphic3d.Graphic3d_StructureManager_GraphicDriver(self, *args)


    def Identification(self, *args):
        """
        * Returns the identification number of the manager.

        :rtype: int

        * Returns the structure with the identification number <AId>.

        :param AId:
        :type AId: int
        :rtype: Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Identification(self, *args)


    def UnHighlight(self, *args):
        """
        * Suppresses the highlighting on all the structures in <self>.

        :rtype: void

        * Suppress the highlighting on the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Graphic3d.Graphic3d_StructureManager_UnHighlight(self, *args)


    def RecomputeStructures(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_StructureManager_RecomputeStructures(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_StructureManager self)"""
        return _Graphic3d.Graphic3d_StructureManager__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_StructureManager self) -> Handle_Graphic3d_StructureManager"""
        return _Graphic3d.Graphic3d_StructureManager_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_StructureManager.Destroy = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Destroy, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.SetPrimitivesAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_SetPrimitivesAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.SetUpdateMode = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_SetUpdateMode, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Update = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Update, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.DisplayedStructures = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_DisplayedStructures, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.HighlightedStructures = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_HighlightedStructures, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.PickStructures = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_PickStructures, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.FillArea3dAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_FillArea3dAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Line3dAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Line3dAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Marker3dAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Marker3dAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.MinMaxValues = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_MinMaxValues, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.PrimitivesAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_PrimitivesAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Text3dAspect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Text3dAspect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.UpdateMode = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_UpdateMode, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.ChangeDisplayPriority = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_ChangeDisplayPriority, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.ChangeZLayer = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_ChangeZLayer, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.GetZLayer = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_GetZLayer, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.SetZLayerSettings = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_SetZLayerSettings, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.ZLayerSettings = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_ZLayerSettings, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.AddZLayer = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_AddZLayer, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.RemoveZLayer = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_RemoveZLayer, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.GetAllZLayers = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_GetAllZLayers, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.ReCompute = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_ReCompute, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Clear = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Clear, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Connect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Connect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Disconnect = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Disconnect, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Display = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Display, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Erase = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Erase, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Highlight = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Highlight, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.SetTransform = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_SetTransform, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.GraphicDriver = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_GraphicDriver, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.Identification = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_Identification, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.UnHighlight = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_UnHighlight, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.RecomputeStructures = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_RecomputeStructures, None, Graphic3d_StructureManager)
Graphic3d_StructureManager._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_StructureManager__kill_pointed, None, Graphic3d_StructureManager)
Graphic3d_StructureManager.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_StructureManager_GetHandle, None, Graphic3d_StructureManager)
Graphic3d_StructureManager_swigregister = _Graphic3d.Graphic3d_StructureManager_swigregister
Graphic3d_StructureManager_swigregister(Graphic3d_StructureManager)

def Graphic3d_StructureManager_Limit(*args):
    """
    * Returns maximum number of managers defineable.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_StructureManager_Limit(*args)

def Graphic3d_StructureManager_CurrentId(*args):
    """
    * Returns a current identifier available.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_StructureManager_CurrentId(*args)

class Handle_Graphic3d_StructureManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_StructureManager_swiginit(self, _Graphic3d.new_Handle_Graphic3d_StructureManager(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_StructureManager_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_StructureManager.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_StructureManager_Nullify, None, Handle_Graphic3d_StructureManager)
Handle_Graphic3d_StructureManager.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_StructureManager_IsNull, None, Handle_Graphic3d_StructureManager)
Handle_Graphic3d_StructureManager.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_StructureManager_GetObject, None, Handle_Graphic3d_StructureManager)
Handle_Graphic3d_StructureManager._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_StructureManager__kill_pointed, None, Handle_Graphic3d_StructureManager)
Handle_Graphic3d_StructureManager_swigregister = _Graphic3d.Handle_Graphic3d_StructureManager_swigregister
Handle_Graphic3d_StructureManager_swigregister(Handle_Graphic3d_StructureManager)

def Handle_Graphic3d_StructureManager_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_StructureManager_DownCast(AnObject)
Handle_Graphic3d_StructureManager_DownCast = _Graphic3d.Handle_Graphic3d_StructureManager_DownCast

class Graphic3d_TextureParams(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Default constructor.

        :rtype: None

        """
        _Graphic3d.Graphic3d_TextureParams_swiginit(self, _Graphic3d.new_Graphic3d_TextureParams(*args))

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_Destroy(self, *args)


    def IsModulate(self, *args):
        """
        * returns True if the texture is modulate. Default value is False.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureParams_IsModulate(self, *args)


    def SetModulate(self, *args):
        """
        * @param theToModulate turn modulation on/off.

        :param theToModulate:
        :type theToModulate: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetModulate(self, *args)


    def IsRepeat(self, *args):
        """
        * returns True if the texture repeat is enabled. Default value is False.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureParams_IsRepeat(self, *args)


    def SetRepeat(self, *args):
        """
        * @param theToRepeat turn texture repeat mode ON or OFF (clamping).

        :param theToRepeat:
        :type theToRepeat: bool
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetRepeat(self, *args)


    def Filter(self, *args):
        """
        * returns texture interpolation filter. Default value is Graphic3d_TOTF_NEAREST.

        :rtype: Graphic3d_TypeOfTextureFilter

        """
        return _Graphic3d.Graphic3d_TextureParams_Filter(self, *args)


    def SetFilter(self, *args):
        """
        * @param theFilter texture interpolation filter.

        :param theFilter:
        :type theFilter: Graphic3d_TypeOfTextureFilter
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetFilter(self, *args)


    def AnisoFilter(self, *args):
        """
        * returns level of anisontropy texture filter. Default value is Graphic3d_LOTA_OFF.

        :rtype: Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureParams_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        * @param theLevel level of anisontropy texture filter.

        :param theLevel:
        :type theLevel: Graphic3d_LevelOfTextureAnisotropy
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetAnisoFilter(self, *args)


    def Rotation(self, *args):
        """
        * returns rotation angle in degrees Default value is 0.

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_TextureParams_Rotation(self, *args)


    def SetRotation(self, *args):
        """
        * @param theAngleDegrees rotation angle.

        :param theAngleDegrees:
        :type theAngleDegrees: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetRotation(self, *args)


    def Scale(self, *args):
        """
        * returns scale factor Default value is no scaling (1.0; 1.0).

        :rtype: Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_TextureParams_Scale(self, *args)


    def SetScale(self, *args):
        """
        * @param theScale scale factor.

        :param theScale:
        :type theScale: Graphic3d_Vec2
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetScale(self, *args)


    def Translation(self, *args):
        """
        * returns translation vector Default value is no translation (0.0; 0.0).

        :rtype: Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_TextureParams_Translation(self, *args)


    def SetTranslation(self, *args):
        """
        * @param theVec translation vector.

        :param theVec:
        :type theVec: Graphic3d_Vec2
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetTranslation(self, *args)


    def GenMode(self, *args):
        """
        * returns texture coordinates generation mode. Default value is Graphic3d_TOTM_MANUAL.

        :rtype: Graphic3d_TypeOfTextureMode

        """
        return _Graphic3d.Graphic3d_TextureParams_GenMode(self, *args)


    def GenPlaneS(self, *args):
        """
        * returns texture coordinates generation plane S.

        :rtype: Graphic3d_Vec4

        """
        return _Graphic3d.Graphic3d_TextureParams_GenPlaneS(self, *args)


    def GenPlaneT(self, *args):
        """
        * returns texture coordinates generation plane T.

        :rtype: Graphic3d_Vec4

        """
        return _Graphic3d.Graphic3d_TextureParams_GenPlaneT(self, *args)


    def SetGenMode(self, *args):
        """
        * Setup texture coordinates generation mode.

        :param theMode:
        :type theMode: Graphic3d_TypeOfTextureMode
        :param thePlaneS:
        :type thePlaneS: Graphic3d_Vec4
        :param thePlaneT:
        :type thePlaneT: Graphic3d_Vec4
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureParams_SetGenMode(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_TextureParams self)"""
        return _Graphic3d.Graphic3d_TextureParams__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_TextureParams self) -> Handle_Graphic3d_TextureParams"""
        return _Graphic3d.Graphic3d_TextureParams_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_TextureParams.Destroy = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_Destroy, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.IsModulate = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_IsModulate, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetModulate = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetModulate, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.IsRepeat = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_IsRepeat, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetRepeat = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetRepeat, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.Filter = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_Filter, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetFilter = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetFilter, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.AnisoFilter = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_AnisoFilter, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetAnisoFilter = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetAnisoFilter, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.Rotation = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_Rotation, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetRotation = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetRotation, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.Scale = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_Scale, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetScale = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetScale, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.Translation = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_Translation, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetTranslation = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetTranslation, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.GenMode = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_GenMode, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.GenPlaneS = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_GenPlaneS, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.GenPlaneT = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_GenPlaneT, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.SetGenMode = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_SetGenMode, None, Graphic3d_TextureParams)
Graphic3d_TextureParams._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_TextureParams__kill_pointed, None, Graphic3d_TextureParams)
Graphic3d_TextureParams.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_TextureParams_GetHandle, None, Graphic3d_TextureParams)
Graphic3d_TextureParams_swigregister = _Graphic3d.Graphic3d_TextureParams_swigregister
Graphic3d_TextureParams_swigregister(Graphic3d_TextureParams)

class Handle_Graphic3d_TextureParams(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_TextureParams_swiginit(self, _Graphic3d.new_Handle_Graphic3d_TextureParams(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureParams_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_TextureParams.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureParams_Nullify, None, Handle_Graphic3d_TextureParams)
Handle_Graphic3d_TextureParams.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureParams_IsNull, None, Handle_Graphic3d_TextureParams)
Handle_Graphic3d_TextureParams.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureParams_GetObject, None, Handle_Graphic3d_TextureParams)
Handle_Graphic3d_TextureParams._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureParams__kill_pointed, None, Handle_Graphic3d_TextureParams)
Handle_Graphic3d_TextureParams_swigregister = _Graphic3d.Handle_Graphic3d_TextureParams_swigregister
Handle_Graphic3d_TextureParams_swigregister(Handle_Graphic3d_TextureParams)

def Handle_Graphic3d_TextureParams_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_TextureParams_DownCast(AnObject)
Handle_Graphic3d_TextureParams_DownCast = _Graphic3d.Handle_Graphic3d_TextureParams_DownCast

class Graphic3d_TextureRoot(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureRoot_Destroy(self, *args)


    def IsDone(self, *args):
        """
        * Checks if a texture class is valid or not. returns true if the construction of the class is correct

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureRoot_IsDone(self, *args)


    def Path(self, *args):
        """
        * Returns the full path of the defined texture. It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OSD_Path

        """
        return _Graphic3d.Graphic3d_TextureRoot_Path(self, *args)


    def Type(self, *args):
        """
        * returns the texture type.

        :rtype: Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Graphic3d_TextureRoot_Type(self, *args)


    def GetId(self, *args):
        """
        * This ID will be used to manage resource in graphic driver. . Default implementation generates unique ID although inheritors may re-initialize it. . Multiple Graphic3d_TextureRoot instancies with same ID will be treated as single texture with different parameters to optimize memory usage though this will be more natural to use same instance of Graphic3d_TextureRoot when possible. . Notice that inheritor may set this ID to empty string. In this case independent graphical resource will be created for each instance of Graphic3d_AspectFillArea3d where texture will be used. . returns texture identifier.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_TextureRoot_GetId(self, *args)


    def GetImage(self, *args):
        """
        * This method will be called by graphic driver each time when texture resource should be created. Default constructors allow defining the texture source as path to texture image or directly as pixmap. If the source is defined as path, then the image will be dynamically loaded when this method is called (and no copy will be preserved in this class instance). Inheritors may dynamically generate the image. Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())! returns the image for texture.

        :rtype: Image_PixMap_Handle

        """
        return _Graphic3d.Graphic3d_TextureRoot_GetImage(self, *args)


    def GetParams(self, *args):
        """
        * returns low-level texture parameters

        :rtype: Handle_Graphic3d_TextureParams

        """
        return _Graphic3d.Graphic3d_TextureRoot_GetParams(self, *args)


    def TexturesFolder(*args):
        """
        * The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables. returns the root folder with default textures.

        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_TextureRoot_TexturesFolder(*args)

    TexturesFolder = staticmethod(TexturesFolder)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_TextureRoot self)"""
        return _Graphic3d.Graphic3d_TextureRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_TextureRoot self) -> Handle_Graphic3d_TextureRoot"""
        return _Graphic3d.Graphic3d_TextureRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_TextureRoot.Destroy = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_Destroy, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.IsDone = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_IsDone, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.Path = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_Path, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.Type = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_Type, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.GetId = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_GetId, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.GetImage = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_GetImage, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.GetParams = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_GetParams, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot__kill_pointed, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_TextureRoot_GetHandle, None, Graphic3d_TextureRoot)
Graphic3d_TextureRoot_swigregister = _Graphic3d.Graphic3d_TextureRoot_swigregister
Graphic3d_TextureRoot_swigregister(Graphic3d_TextureRoot)

def Graphic3d_TextureRoot_TexturesFolder(*args):
    """
    * The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables. returns the root folder with default textures.

    :rtype: TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_TextureRoot_TexturesFolder(*args)

class Handle_Graphic3d_TextureRoot(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_TextureRoot_swiginit(self, _Graphic3d.new_Handle_Graphic3d_TextureRoot(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_TextureRoot.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureRoot_Nullify, None, Handle_Graphic3d_TextureRoot)
Handle_Graphic3d_TextureRoot.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureRoot_IsNull, None, Handle_Graphic3d_TextureRoot)
Handle_Graphic3d_TextureRoot.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureRoot_GetObject, None, Handle_Graphic3d_TextureRoot)
Handle_Graphic3d_TextureRoot._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureRoot__kill_pointed, None, Handle_Graphic3d_TextureRoot)
Handle_Graphic3d_TextureRoot_swigregister = _Graphic3d.Handle_Graphic3d_TextureRoot_swigregister
Handle_Graphic3d_TextureRoot_swigregister(Handle_Graphic3d_TextureRoot)

def Handle_Graphic3d_TextureRoot_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_TextureRoot_DownCast(AnObject)
Handle_Graphic3d_TextureRoot_DownCast = _Graphic3d.Handle_Graphic3d_TextureRoot_DownCast

class Graphic3d_ValueInterface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TypeID(self, *args):
        """
        * Returns unique identifier of value type.

        :rtype: Standard_Size

        """
        return _Graphic3d.Graphic3d_ValueInterface_TypeID(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ValueInterface.TypeID = new_instancemethod(_Graphic3d.Graphic3d_ValueInterface_TypeID, None, Graphic3d_ValueInterface)
Graphic3d_ValueInterface._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ValueInterface__kill_pointed, None, Graphic3d_ValueInterface)
Graphic3d_ValueInterface_swigregister = _Graphic3d.Graphic3d_ValueInterface_swigregister
Graphic3d_ValueInterface_swigregister(Graphic3d_ValueInterface)

class Graphic3d_Vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a vector with 1.0, 0.0, 0.0 coordinates.

        :rtype: None

        * Creates a vector with <AX>, <AY>, <AZ> coordinates.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :rtype: None

        * Creates a vector from 2 points <APoint1> and <APoint2>.

        :param APoint1:
        :type APoint1: Graphic3d_Vertex &
        :param APoint2:
        :type APoint2: Graphic3d_Vertex &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Vector_swiginit(self, _Graphic3d.new_Graphic3d_Vector(*args))

    def Normalize(self, *args):
        """
        * Normalises <self>. Category: Methods to modify the class definition Warning: Raises VectorError if <self> is null.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_Normalize(self, *args)


    def SetCoord(self, *args):
        """
        * Modifies the coordinates of the vector <self>.

        :param Xnew:
        :type Xnew: float
        :param Ynew:
        :type Ynew: float
        :param Znew:
        :type Znew: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_SetCoord(self, *args)


    def SetXCoord(self, *args):
        """
        * Modifies the X coordinate of the vector <self>.

        :param Xnew:
        :type Xnew: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_SetXCoord(self, *args)


    def SetYCoord(self, *args):
        """
        * Modifies the Y coordinate of the vector <self>.

        :param Ynew:
        :type Ynew: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_SetYCoord(self, *args)


    def SetZCoord(self, *args):
        """
        * Modifies the Z coordinate of the vector <self>.

        :param Znew:
        :type Znew: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_SetZCoord(self, *args)


    def Coord(self, *args):
        """
        * Returns the coordinates of the vector <self>.

        :param AX:
        :type AX: float &
        :param AY:
        :type AY: float &
        :param AZ:
        :type AZ: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vector_Coord(self, *args)


    def IsNormalized(self, *args):
        """
        * Returns Standard_True if <self> has length 1.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Vector_IsNormalized(self, *args)


    def LengthZero(self, *args):
        """
        * Returns Standard_True if <self> has length zero.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Vector_LengthZero(self, *args)


    def X(self, *args):
        """
        * Returns the X coordinates of the vector <self>.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_Vector_X(self, *args)


    def Y(self, *args):
        """
        * Returns the Y coordinate of the vector <self>.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_Vector_Y(self, *args)


    def Z(self, *args):
        """
        * Returns the Z coordinate of the vector <self>.

        :rtype: float

        """
        return _Graphic3d.Graphic3d_Vector_Z(self, *args)


    def IsParallel(*args):
        """
        * Returns Standard_True if the vector <AV1> and //!	 <AV2> are parallel.

        :param AV1:
        :type AV1: Graphic3d_Vector &
        :param AV2:
        :type AV2: Graphic3d_Vector &
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Vector_IsParallel(*args)

    IsParallel = staticmethod(IsParallel)

    def NormeOf(*args):
        """
        * Returns the norm of the vector <AX>, <AY>, <AZ>.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :rtype: float

        * Returns the norm of the vector <AVector>.

        :param AVector:
        :type AVector: Graphic3d_Vector &
        :rtype: float

        """
        return _Graphic3d.Graphic3d_Vector_NormeOf(*args)

    NormeOf = staticmethod(NormeOf)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Vector.Normalize = new_instancemethod(_Graphic3d.Graphic3d_Vector_Normalize, None, Graphic3d_Vector)
Graphic3d_Vector.SetCoord = new_instancemethod(_Graphic3d.Graphic3d_Vector_SetCoord, None, Graphic3d_Vector)
Graphic3d_Vector.SetXCoord = new_instancemethod(_Graphic3d.Graphic3d_Vector_SetXCoord, None, Graphic3d_Vector)
Graphic3d_Vector.SetYCoord = new_instancemethod(_Graphic3d.Graphic3d_Vector_SetYCoord, None, Graphic3d_Vector)
Graphic3d_Vector.SetZCoord = new_instancemethod(_Graphic3d.Graphic3d_Vector_SetZCoord, None, Graphic3d_Vector)
Graphic3d_Vector.Coord = new_instancemethod(_Graphic3d.Graphic3d_Vector_Coord, None, Graphic3d_Vector)
Graphic3d_Vector.IsNormalized = new_instancemethod(_Graphic3d.Graphic3d_Vector_IsNormalized, None, Graphic3d_Vector)
Graphic3d_Vector.LengthZero = new_instancemethod(_Graphic3d.Graphic3d_Vector_LengthZero, None, Graphic3d_Vector)
Graphic3d_Vector.X = new_instancemethod(_Graphic3d.Graphic3d_Vector_X, None, Graphic3d_Vector)
Graphic3d_Vector.Y = new_instancemethod(_Graphic3d.Graphic3d_Vector_Y, None, Graphic3d_Vector)
Graphic3d_Vector.Z = new_instancemethod(_Graphic3d.Graphic3d_Vector_Z, None, Graphic3d_Vector)
Graphic3d_Vector._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Vector__kill_pointed, None, Graphic3d_Vector)
Graphic3d_Vector_swigregister = _Graphic3d.Graphic3d_Vector_swigregister
Graphic3d_Vector_swigregister(Graphic3d_Vector)

def Graphic3d_Vector_IsParallel(*args):
    """
    * Returns Standard_True if the vector <AV1> and //!	 <AV2> are parallel.

    :param AV1:
    :type AV1: Graphic3d_Vector &
    :param AV2:
    :type AV2: Graphic3d_Vector &
    :rtype: bool

    """
    return _Graphic3d.Graphic3d_Vector_IsParallel(*args)

def Graphic3d_Vector_NormeOf(*args):
    """
    * Returns the norm of the vector <AX>, <AY>, <AZ>.

    :param AX:
    :type AX: float
    :param AY:
    :type AY: float
    :param AZ:
    :type AZ: float
    :rtype: float

    * Returns the norm of the vector <AVector>.

    :param AVector:
    :type AVector: Graphic3d_Vector &
    :rtype: float

    """
    return _Graphic3d.Graphic3d_Vector_NormeOf(*args)

class Graphic3d_Vertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a point with 0.0, 0.0, 0.0 coordinates.

        :rtype: None

        * Creates a point with coordinates identical to <APoint>.

        :param APoint:
        :type APoint: Graphic3d_Vertex &
        :rtype: None

        * Creates a point with <AX>, <AY> and <AZ> coordinates.

        :param AX:
        :type AX: Standard_ShortReal
        :param AY:
        :type AY: Standard_ShortReal
        :param AZ:
        :type AZ: Standard_ShortReal
        :rtype: None

        * Creates a point with <AX>, <AY> and <AZ> coordinates.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :rtype: None

        """
        _Graphic3d.Graphic3d_Vertex_swiginit(self, _Graphic3d.new_Graphic3d_Vertex(*args))

    def SetCoord(self, *args):
        """
        * Modifies the coordinates of the point <self>.

        :param AX:
        :type AX: Standard_ShortReal
        :param AY:
        :type AY: Standard_ShortReal
        :param AZ:
        :type AZ: Standard_ShortReal
        :rtype: None

        * Modifies the coordinates of the point <self>.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vertex_SetCoord(self, *args)


    def Coord(self, *args):
        """
        * Returns the coordinates of the point <self>.

        :param AX:
        :type AX: Standard_ShortReal &
        :param AY:
        :type AY: Standard_ShortReal &
        :param AZ:
        :type AZ: Standard_ShortReal &
        :rtype: None

        * Returns the coordinates of the point <self>.

        :param AX:
        :type AX: float &
        :param AY:
        :type AY: float &
        :param AZ:
        :type AZ: float &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Vertex_Coord(self, *args)


    def X(self, *args):
        """
        * Returns the X coordinates of the point <self>.

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_X(self, *args)


    def Y(self, *args):
        """
        * Returns the Y coordinate of the point <self>.

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Y(self, *args)


    def Z(self, *args):
        """
        * Returns the Z coordinate of the point <self>.

        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Z(self, *args)


    def Distance(self, *args):
        """
        * Returns the distance between <AV1> and <AV2>.

        :param AOther:
        :type AOther: Graphic3d_Vertex &
        :rtype: Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Distance(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Vertex.SetCoord = new_instancemethod(_Graphic3d.Graphic3d_Vertex_SetCoord, None, Graphic3d_Vertex)
Graphic3d_Vertex.Coord = new_instancemethod(_Graphic3d.Graphic3d_Vertex_Coord, None, Graphic3d_Vertex)
Graphic3d_Vertex.X = new_instancemethod(_Graphic3d.Graphic3d_Vertex_X, None, Graphic3d_Vertex)
Graphic3d_Vertex.Y = new_instancemethod(_Graphic3d.Graphic3d_Vertex_Y, None, Graphic3d_Vertex)
Graphic3d_Vertex.Z = new_instancemethod(_Graphic3d.Graphic3d_Vertex_Z, None, Graphic3d_Vertex)
Graphic3d_Vertex.Distance = new_instancemethod(_Graphic3d.Graphic3d_Vertex_Distance, None, Graphic3d_Vertex)
Graphic3d_Vertex._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Vertex__kill_pointed, None, Graphic3d_Vertex)
Graphic3d_Vertex_swigregister = _Graphic3d.Graphic3d_Vertex_swigregister
Graphic3d_Vertex_swigregister(Graphic3d_Vertex)

class Graphic3d_ZLayerSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Graphic3d.Graphic3d_ZLayerSettings_swiginit(self, _Graphic3d.new_Graphic3d_ZLayerSettings(*args))

    def IsSettingEnabled(self, *args):
        """
        * Returns true if theSetting is enabled.

        :param theSetting:
        :type theSetting: Graphic3d_ZLayerSetting
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ZLayerSettings_IsSettingEnabled(self, *args)


    def EnableSetting(self, *args):
        """
        * Enables theSetting

        :param theSetting:
        :type theSetting: Graphic3d_ZLayerSetting
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ZLayerSettings_EnableSetting(self, *args)


    def DisableSetting(self, *args):
        """
        * Disables theSetting

        :param theSetting:
        :type theSetting: Graphic3d_ZLayerSetting
        :rtype: None

        """
        return _Graphic3d.Graphic3d_ZLayerSettings_DisableSetting(self, *args)


    def SetDepthOffsetPositive(self, *args):
        """
        * Sets minimal possible positive depth offset. Access DepthOffsetFactor and DepthOffsetUnits values for manual offset control.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetPositive(self, *args)


    def SetDepthOffsetNegative(self, *args):
        """
        * Sets minimal possible negative depth offset. Access DepthOffsetFactor and DepthOffsetUnits values for manual offset control.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetNegative(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ZLayerSettings.IsSettingEnabled = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings_IsSettingEnabled, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings.EnableSetting = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings_EnableSetting, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings.DisableSetting = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings_DisableSetting, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings.SetDepthOffsetPositive = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetPositive, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings.SetDepthOffsetNegative = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetNegative, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ZLayerSettings__kill_pointed, None, Graphic3d_ZLayerSettings)
Graphic3d_ZLayerSettings_swigregister = _Graphic3d.Graphic3d_ZLayerSettings_swigregister
Graphic3d_ZLayerSettings_swigregister(Graphic3d_ZLayerSettings)

class Graphic3d_ArrayOfPoints(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of points, a single pixel point is drawn at each vertex. The array must be filled using the AddVertex(Point) method. When <hasVColors> is True , you must use only AddVertex(Point,Color) method.

        :param maxVertexs:
        :type maxVertexs: int
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfPoints_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPoints(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfPoints self)"""
        return _Graphic3d.Graphic3d_ArrayOfPoints__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfPoints self) -> Handle_Graphic3d_ArrayOfPoints"""
        return _Graphic3d.Graphic3d_ArrayOfPoints_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfPoints._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPoints__kill_pointed, None, Graphic3d_ArrayOfPoints)
Graphic3d_ArrayOfPoints.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPoints_GetHandle, None, Graphic3d_ArrayOfPoints)
Graphic3d_ArrayOfPoints_swigregister = _Graphic3d.Graphic3d_ArrayOfPoints_swigregister
Graphic3d_ArrayOfPoints_swigregister(Graphic3d_ArrayOfPoints)

class Handle_Graphic3d_ArrayOfPoints(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfPoints_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfPoints(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfPoints.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints_Nullify, None, Handle_Graphic3d_ArrayOfPoints)
Handle_Graphic3d_ArrayOfPoints.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsNull, None, Handle_Graphic3d_ArrayOfPoints)
Handle_Graphic3d_ArrayOfPoints.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints_GetObject, None, Handle_Graphic3d_ArrayOfPoints)
Handle_Graphic3d_ArrayOfPoints._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints__kill_pointed, None, Handle_Graphic3d_ArrayOfPoints)
Handle_Graphic3d_ArrayOfPoints_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_swigregister
Handle_Graphic3d_ArrayOfPoints_swigregister(Handle_Graphic3d_ArrayOfPoints)

def Handle_Graphic3d_ArrayOfPoints_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast(AnObject)
Handle_Graphic3d_ArrayOfPoints_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast

class Graphic3d_ArrayOfPolygons(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of polygons, a polygon can be filled as: 1) creating a single polygon defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfPolygons(7) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x7,y7,z7) 2) creating separate polygons defined with a predefined number of bounds and the number of vertex per bound. i.e: myArray = Graphic3d_ArrayOfPolygons(7,2) myArray->AddBound(4) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x4,y4,z4) myArray->AddBound(3) myArray->AddVertex(x5,y5,z5) //!	.... myArray->AddVertex(x7,y7,z7) 3) creating a single indexed polygon defined with his vertex ans edges. i.e: myArray = Graphic3d_ArrayOfPolygons(4,0,6) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x4,y4,z4) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(4) 4) creating separate polygons defined with a predefined number of bounds and the number of edges per bound. i.e: myArray = Graphic3d_ArrayOfPolygons(6,4,14) myArray->AddBound(3) myArray->AddVertex(x1,y1,z1) myArray->AddVertex(x2,y2,z2) myArray->AddVertex(x3,y3,z3) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddBound(3) myArray->AddVertex(x4,y4,z4) myArray->AddVertex(x5,y5,z5) myArray->AddVertex(x6,y6,z6) myArray->AddEdge(4) myArray->AddEdge(5) myArray->AddEdge(6) myArray->AddBound(4) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(5) myArray->AddEdge(6) myArray->AddBound(4) myArray->AddEdge(1) myArray->AddEdge(3) myArray->AddEdge(5) myArray->AddEdge(4) <maxVertexs> defined the maximun allowed vertex number in the array. <maxBounds> defined the maximun allowed bound number in the array. <maxEdges> defined the maximun allowed edge number in the array. Warning: When <hasVNormals> is True , you must use one of //!	AddVertex(Point,Normal) or AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) methods. When <hasVColors> is True , you must use one of //!	AddVertex(Point,Color) or AddVertex(Point,Normal,Color) methods. When <hasTexels> is True , you must use one of //!	AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) methods. When <hasBColors> is True , <maxBounds> must be > 0 and //!	you must use the //!	AddBound(number,Color) method. When <hasEdgeInfos> is True , <maxEdges> must be > 0 and //!	you must use the //!	AddEdge(number,visibillity) method. Warning: the user is responsible about the orientation of the polygon depending of the order of the created vertex or edges and this orientation must be coherent with the vertex normal optionnaly given at each vertex (See the Orientate() methods).

        :param maxVertexs:
        :type maxVertexs: int
        :param maxBounds: default value is 0
        :type maxBounds: int
        :param maxEdges: default value is 0
        :type maxEdges: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasBColors: default value is Standard_False
        :type hasBColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :param hasEdgeInfos: default value is Standard_False
        :type hasEdgeInfos: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfPolygons_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPolygons(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfPolygons self)"""
        return _Graphic3d.Graphic3d_ArrayOfPolygons__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfPolygons self) -> Handle_Graphic3d_ArrayOfPolygons"""
        return _Graphic3d.Graphic3d_ArrayOfPolygons_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfPolygons._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPolygons__kill_pointed, None, Graphic3d_ArrayOfPolygons)
Graphic3d_ArrayOfPolygons.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPolygons_GetHandle, None, Graphic3d_ArrayOfPolygons)
Graphic3d_ArrayOfPolygons_swigregister = _Graphic3d.Graphic3d_ArrayOfPolygons_swigregister
Graphic3d_ArrayOfPolygons_swigregister(Graphic3d_ArrayOfPolygons)

class Handle_Graphic3d_ArrayOfPolygons(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfPolygons(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfPolygons.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Nullify, None, Handle_Graphic3d_ArrayOfPolygons)
Handle_Graphic3d_ArrayOfPolygons.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsNull, None, Handle_Graphic3d_ArrayOfPolygons)
Handle_Graphic3d_ArrayOfPolygons.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons_GetObject, None, Handle_Graphic3d_ArrayOfPolygons)
Handle_Graphic3d_ArrayOfPolygons._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons__kill_pointed, None, Handle_Graphic3d_ArrayOfPolygons)
Handle_Graphic3d_ArrayOfPolygons_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_swigregister
Handle_Graphic3d_ArrayOfPolygons_swigregister(Handle_Graphic3d_ArrayOfPolygons)

def Handle_Graphic3d_ArrayOfPolygons_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast(AnObject)
Handle_Graphic3d_ArrayOfPolygons_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast

class Graphic3d_ArrayOfPolylines(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of polylines, a polyline can be filled as: 1) creating a single polyline defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfPolylines(7) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x7,y7,z7) 2) creating separate polylines defined with a predefined number of bounds and the number of vertex per bound. i.e: myArray = Graphic3d_ArrayOfPolylines(7,2) myArray->AddBound(4) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x4,y4,z4) myArray->AddBound(3) myArray->AddVertex(x5,y5,z5) .... myArray->AddVertex(x7,y7,z7) 3) creating a single indexed polyline defined with his vertex ans edges. i.e: myArray = Graphic3d_ArrayOfPolylines(4,0,6) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x4,y4,z4) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(4) 4) creating separate polylines defined with a predefined number of bounds and the number of edges per bound. i.e: myArray = Graphic3d_ArrayOfPolylines(6,4,14) myArray->AddBound(3) myArray->AddVertex(x1,y1,z1) myArray->AddVertex(x2,y2,z2) myArray->AddVertex(x3,y3,z3) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddBound(3) myArray->AddVertex(x4,y4,z4) myArray->AddVertex(x5,y5,z5) myArray->AddVertex(x6,y6,z6) myArray->AddEdge(4) myArray->AddEdge(5) myArray->AddEdge(6) myArray->AddBound(4) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(5) myArray->AddEdge(6) myArray->AddBound(4) myArray->AddEdge(1) myArray->AddEdge(3) myArray->AddEdge(5) myArray->AddEdge(4) <maxVertexs> defined the maximun allowed vertex number in the array. <maxBounds> defined the maximun allowed bound number in the array. <maxEdges> defined the maximun allowed edge number in the array. Warning: When <hasVColors> is True , you must use one of AddVertex(Point,Color) or AddVertex(Point,Normal,Color) methods. When <hasBColors> is True , <maxBounds> must be > 0 and you must use the AddBound(number,Color) method. When <hasEdgeInfos> is True , <maxEdges> must be > 0 and you must use the AddEdge(number,visibillity) method.

        :param maxVertexs:
        :type maxVertexs: int
        :param maxBounds: default value is 0
        :type maxBounds: int
        :param maxEdges: default value is 0
        :type maxEdges: int
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasBColors: default value is Standard_False
        :type hasBColors: bool
        :param hasEdgeInfos: default value is Standard_False
        :type hasEdgeInfos: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfPolylines_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPolylines(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfPolylines self)"""
        return _Graphic3d.Graphic3d_ArrayOfPolylines__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfPolylines self) -> Handle_Graphic3d_ArrayOfPolylines"""
        return _Graphic3d.Graphic3d_ArrayOfPolylines_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfPolylines._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPolylines__kill_pointed, None, Graphic3d_ArrayOfPolylines)
Graphic3d_ArrayOfPolylines.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfPolylines_GetHandle, None, Graphic3d_ArrayOfPolylines)
Graphic3d_ArrayOfPolylines_swigregister = _Graphic3d.Graphic3d_ArrayOfPolylines_swigregister
Graphic3d_ArrayOfPolylines_swigregister(Graphic3d_ArrayOfPolylines)

class Handle_Graphic3d_ArrayOfPolylines(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfPolylines(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfPolylines.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Nullify, None, Handle_Graphic3d_ArrayOfPolylines)
Handle_Graphic3d_ArrayOfPolylines.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsNull, None, Handle_Graphic3d_ArrayOfPolylines)
Handle_Graphic3d_ArrayOfPolylines.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines_GetObject, None, Handle_Graphic3d_ArrayOfPolylines)
Handle_Graphic3d_ArrayOfPolylines._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines__kill_pointed, None, Handle_Graphic3d_ArrayOfPolylines)
Handle_Graphic3d_ArrayOfPolylines_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_swigregister
Handle_Graphic3d_ArrayOfPolylines_swigregister(Handle_Graphic3d_ArrayOfPolylines)

def Handle_Graphic3d_ArrayOfPolylines_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast(AnObject)
Handle_Graphic3d_ArrayOfPolylines_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast

class Graphic3d_ArrayOfQuadrangleStrips(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of quadrangle strips, a polygon can be filled as: 1) creating a single strip defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfQuadrangleStrips(7) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x7,y7,z7) 2) creating separate strips defined with a predefined number of strips and the number of vertex per strip. i.e: myArray = Graphic3d_ArrayOfQuadrangleStrips(8,2) myArray->AddBound(4) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x4,y4,z4) myArray->AddBound(4) myArray->AddVertex(x5,y5,z5) //!	.... myArray->AddVertex(x8,y8,z8) <maxVertexs> defined the maximun allowed vertex number in the array. <maxStrips> defined the maximun allowed strip number in the array. The number of quadrangle really drawn is : VertexNumber()/2-Min(1,BoundNumber())

        :param maxVertexs:
        :type maxVertexs: int
        :param maxStrips: default value is 0
        :type maxStrips: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasSColors: default value is Standard_False
        :type hasSColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfQuadrangleStrips(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfQuadrangleStrips self)"""
        return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfQuadrangleStrips self) -> Handle_Graphic3d_ArrayOfQuadrangleStrips"""
        return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfQuadrangleStrips._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfQuadrangleStrips__kill_pointed, None, Graphic3d_ArrayOfQuadrangleStrips)
Graphic3d_ArrayOfQuadrangleStrips.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_GetHandle, None, Graphic3d_ArrayOfQuadrangleStrips)
Graphic3d_ArrayOfQuadrangleStrips_swigregister = _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_swigregister
Graphic3d_ArrayOfQuadrangleStrips_swigregister(Graphic3d_ArrayOfQuadrangleStrips)

class Handle_Graphic3d_ArrayOfQuadrangleStrips(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfQuadrangleStrips(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfQuadrangleStrips.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Nullify, None, Handle_Graphic3d_ArrayOfQuadrangleStrips)
Handle_Graphic3d_ArrayOfQuadrangleStrips.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsNull, None, Handle_Graphic3d_ArrayOfQuadrangleStrips)
Handle_Graphic3d_ArrayOfQuadrangleStrips.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_GetObject, None, Handle_Graphic3d_ArrayOfQuadrangleStrips)
Handle_Graphic3d_ArrayOfQuadrangleStrips._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips__kill_pointed, None, Handle_Graphic3d_ArrayOfQuadrangleStrips)
Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister
Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister(Handle_Graphic3d_ArrayOfQuadrangleStrips)

def Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast(AnObject)
Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast

class Graphic3d_ArrayOfQuadrangles(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of quadrangles, a quadrangle can be filled as: 1) creating a set of quadrangles defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfQuadrangles(8) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x8,y8,z8) 3) creating a set of indexed quadrangles defined with his vertex ans edges. i.e: myArray = Graphic3d_ArrayOfQuadrangles(6,8) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x6,y6,z6) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(4) myArray->AddEdge(3) myArray->AddEdge(4) myArray->AddEdge(5) myArray->AddEdge(6) <maxVertexs> defined the maximun allowed vertex number in the array. <maxEdges> defined the maximun allowed edge number in the array. Warning: When <hasVNormals> is True , you must use one of //!	AddVertex(Point,Normal) or AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) methods. When <hasVColors> is True , you must use one of //!	AddVertex(Point,Color) or AddVertex(Point,Normal,Color) methods. When <hasTexels> is True , you must use one of //!	AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) methods. When <hasEdgeInfos> is True , <maxEdges> must be > 0 and //!	you must use the //!	AddEdge(number,visibillity) method. Warning: the user is responsible about the orientation of the quadrangle depending of the order of the created vertex or edges and this orientation must be coherent with the vertex normal optionnaly given at each vertex (See the Orientate() methods).

        :param maxVertexs:
        :type maxVertexs: int
        :param maxEdges: default value is 0
        :type maxEdges: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :param hasEdgeInfos: default value is Standard_False
        :type hasEdgeInfos: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfQuadrangles_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfQuadrangles(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfQuadrangles self)"""
        return _Graphic3d.Graphic3d_ArrayOfQuadrangles__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfQuadrangles self) -> Handle_Graphic3d_ArrayOfQuadrangles"""
        return _Graphic3d.Graphic3d_ArrayOfQuadrangles_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfQuadrangles._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfQuadrangles__kill_pointed, None, Graphic3d_ArrayOfQuadrangles)
Graphic3d_ArrayOfQuadrangles.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfQuadrangles_GetHandle, None, Graphic3d_ArrayOfQuadrangles)
Graphic3d_ArrayOfQuadrangles_swigregister = _Graphic3d.Graphic3d_ArrayOfQuadrangles_swigregister
Graphic3d_ArrayOfQuadrangles_swigregister(Graphic3d_ArrayOfQuadrangles)

class Handle_Graphic3d_ArrayOfQuadrangles(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfQuadrangles(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfQuadrangles.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Nullify, None, Handle_Graphic3d_ArrayOfQuadrangles)
Handle_Graphic3d_ArrayOfQuadrangles.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsNull, None, Handle_Graphic3d_ArrayOfQuadrangles)
Handle_Graphic3d_ArrayOfQuadrangles.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_GetObject, None, Handle_Graphic3d_ArrayOfQuadrangles)
Handle_Graphic3d_ArrayOfQuadrangles._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles__kill_pointed, None, Handle_Graphic3d_ArrayOfQuadrangles)
Handle_Graphic3d_ArrayOfQuadrangles_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_swigregister
Handle_Graphic3d_ArrayOfQuadrangles_swigregister(Handle_Graphic3d_ArrayOfQuadrangles)

def Handle_Graphic3d_ArrayOfQuadrangles_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast(AnObject)
Handle_Graphic3d_ArrayOfQuadrangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast

class Graphic3d_ArrayOfSegments(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of segments, a segment can be filled as: 1) creating a set of segments defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfSegments(4) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x4,y4,z4) 2) creating a set of indexed segments defined with his vertex ans edges. i.e: myArray = Graphic3d_ArrayOfSegments(4,0,8) myArray->AddVertex(x1,y1,z1) //!	.... myArray->AddVertex(x4,y4,z4) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(4) myArray->AddEdge(2) myArray->AddEdge(4) myArray->AddEdge(1) myArray->AddEdge(3) <maxVertexs> defined the maximun allowed vertex number in the array. <maxEdges> defined the maximun allowed edge number in the array. Warning: When <hasVColors> is True , you must use only //!	AddVertex(Point,Color) method

        :param maxVertexs:
        :type maxVertexs: int
        :param maxEdges: default value is 0
        :type maxEdges: int
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfSegments_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfSegments(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfSegments self)"""
        return _Graphic3d.Graphic3d_ArrayOfSegments__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfSegments self) -> Handle_Graphic3d_ArrayOfSegments"""
        return _Graphic3d.Graphic3d_ArrayOfSegments_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfSegments._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfSegments__kill_pointed, None, Graphic3d_ArrayOfSegments)
Graphic3d_ArrayOfSegments.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfSegments_GetHandle, None, Graphic3d_ArrayOfSegments)
Graphic3d_ArrayOfSegments_swigregister = _Graphic3d.Graphic3d_ArrayOfSegments_swigregister
Graphic3d_ArrayOfSegments_swigregister(Graphic3d_ArrayOfSegments)

class Handle_Graphic3d_ArrayOfSegments(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfSegments_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfSegments(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfSegments.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments_Nullify, None, Handle_Graphic3d_ArrayOfSegments)
Handle_Graphic3d_ArrayOfSegments.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsNull, None, Handle_Graphic3d_ArrayOfSegments)
Handle_Graphic3d_ArrayOfSegments.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments_GetObject, None, Handle_Graphic3d_ArrayOfSegments)
Handle_Graphic3d_ArrayOfSegments._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments__kill_pointed, None, Handle_Graphic3d_ArrayOfSegments)
Handle_Graphic3d_ArrayOfSegments_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_swigregister
Handle_Graphic3d_ArrayOfSegments_swigregister(Handle_Graphic3d_ArrayOfSegments)

def Handle_Graphic3d_ArrayOfSegments_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast(AnObject)
Handle_Graphic3d_ArrayOfSegments_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast

class Graphic3d_ArrayOfTriangleFans(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of triangle fans, a polygon can be filled as: 1) creating a single fan defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfTriangleFans(7) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x7,y7,z7) 2) creating separate fans defined with a predefined number of fans and the number of vertex per fan. i.e: myArray = Graphic3d_ArrayOfTriangleFans(8,2) myArray->AddBound(4) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x4,y4,z4) myArray->AddBound(4) myArray->AddVertex(x5,y5,z5) .... myArray->AddVertex(x8,y8,z8) <maxVertexs> defined the maximun allowed vertex number in the array. <maxFans> defined the maximun allowed fan number in the array. The number of triangle really drawn is : VertexNumber()-2*Min(1,BoundNumber())

        :param maxVertexs:
        :type maxVertexs: int
        :param maxFans: default value is 0
        :type maxFans: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasFColors: default value is Standard_False
        :type hasFColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfTriangleFans_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangleFans(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfTriangleFans self)"""
        return _Graphic3d.Graphic3d_ArrayOfTriangleFans__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfTriangleFans self) -> Handle_Graphic3d_ArrayOfTriangleFans"""
        return _Graphic3d.Graphic3d_ArrayOfTriangleFans_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfTriangleFans._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangleFans__kill_pointed, None, Graphic3d_ArrayOfTriangleFans)
Graphic3d_ArrayOfTriangleFans.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangleFans_GetHandle, None, Graphic3d_ArrayOfTriangleFans)
Graphic3d_ArrayOfTriangleFans_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangleFans_swigregister
Graphic3d_ArrayOfTriangleFans_swigregister(Graphic3d_ArrayOfTriangleFans)

class Handle_Graphic3d_ArrayOfTriangleFans(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangleFans(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfTriangleFans.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Nullify, None, Handle_Graphic3d_ArrayOfTriangleFans)
Handle_Graphic3d_ArrayOfTriangleFans.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsNull, None, Handle_Graphic3d_ArrayOfTriangleFans)
Handle_Graphic3d_ArrayOfTriangleFans.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_GetObject, None, Handle_Graphic3d_ArrayOfTriangleFans)
Handle_Graphic3d_ArrayOfTriangleFans._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans__kill_pointed, None, Handle_Graphic3d_ArrayOfTriangleFans)
Handle_Graphic3d_ArrayOfTriangleFans_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_swigregister
Handle_Graphic3d_ArrayOfTriangleFans_swigregister(Handle_Graphic3d_ArrayOfTriangleFans)

def Handle_Graphic3d_ArrayOfTriangleFans_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast(AnObject)
Handle_Graphic3d_ArrayOfTriangleFans_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast

class Graphic3d_ArrayOfTriangleStrips(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of triangle strips, a polygon can be filled as: 1) creating a single strip defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfTriangleStrips(7) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x7,y7,z7) 2) creating separate strips defined with a predefined number of strips and the number of vertex per strip. i.e: myArray = Graphic3d_ArrayOfTriangleStrips(8,2) myArray->AddBound(4) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x4,y4,z4) myArray->AddBound(4) myArray->AddVertex(x5,y5,z5) .... myArray->AddVertex(x8,y8,z8) <maxVertexs> defined the maximun allowed vertex number in the array. <maxStrips> defined the maximun allowed strip number in the array. The number of triangle really drawn is : VertexNumber()-2*Min(1,BoundNumber()) Warning: When <hasVNormals> is True , you must use one of AddVertex(Point,Normal) or AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) methods. When <hasVColors> is True , you must use one of AddVertex(Point,Color) or AddVertex(Point,Normal,Color) methods. When <hasTexels> is True , you must use one of AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) methods. When <hasBColors> is True , <maxBounds> must be > 0 and you must use the AddBound(number,Color) method. Warning: the user is responsible about the orientation of the strip depending of the order of the created vertex and this orientation must be coherent with the vertex normal optionnaly given at each vertex (See the Orientate() methods).

        :param maxVertexs:
        :type maxVertexs: int
        :param maxStrips: default value is 0
        :type maxStrips: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasSColors: default value is Standard_False
        :type hasSColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfTriangleStrips_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangleStrips(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfTriangleStrips self)"""
        return _Graphic3d.Graphic3d_ArrayOfTriangleStrips__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfTriangleStrips self) -> Handle_Graphic3d_ArrayOfTriangleStrips"""
        return _Graphic3d.Graphic3d_ArrayOfTriangleStrips_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfTriangleStrips._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangleStrips__kill_pointed, None, Graphic3d_ArrayOfTriangleStrips)
Graphic3d_ArrayOfTriangleStrips.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangleStrips_GetHandle, None, Graphic3d_ArrayOfTriangleStrips)
Graphic3d_ArrayOfTriangleStrips_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangleStrips_swigregister
Graphic3d_ArrayOfTriangleStrips_swigregister(Graphic3d_ArrayOfTriangleStrips)

class Handle_Graphic3d_ArrayOfTriangleStrips(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangleStrips(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfTriangleStrips.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Nullify, None, Handle_Graphic3d_ArrayOfTriangleStrips)
Handle_Graphic3d_ArrayOfTriangleStrips.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsNull, None, Handle_Graphic3d_ArrayOfTriangleStrips)
Handle_Graphic3d_ArrayOfTriangleStrips.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_GetObject, None, Handle_Graphic3d_ArrayOfTriangleStrips)
Handle_Graphic3d_ArrayOfTriangleStrips._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips__kill_pointed, None, Handle_Graphic3d_ArrayOfTriangleStrips)
Handle_Graphic3d_ArrayOfTriangleStrips_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_swigregister
Handle_Graphic3d_ArrayOfTriangleStrips_swigregister(Handle_Graphic3d_ArrayOfTriangleStrips)

def Handle_Graphic3d_ArrayOfTriangleStrips_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast(AnObject)
Handle_Graphic3d_ArrayOfTriangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast

class Graphic3d_ArrayOfTriangles(Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an array of triangles, a triangle can be filled as: 1) creating a set of triangles defined with his vertexs. i.e: myArray = Graphic3d_ArrayOfTriangles(6) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x6,y6,z6) 3) creating a set of indexed triangles defined with his vertex ans edges. i.e: myArray = Graphic3d_ArrayOfTriangles(4,6) myArray->AddVertex(x1,y1,z1) .... myArray->AddVertex(x4,y4,z4) myArray->AddEdge(1) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(2) myArray->AddEdge(3) myArray->AddEdge(4) <maxVertexs> defined the maximun allowed vertex number in the array. <maxEdges> defined the maximun allowed edge number in the array. Warning: When <hasVNormals> is True , you must use one of AddVertex(Point,Normal) or AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) methods. When <hasVColors> is True , you must use one of AddVertex(Point,Color) or AddVertex(Point,Normal,Color) methods. When <hasTexels> is True , you must use one of AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) methods. When <hasEdgeInfos> is True , <maxEdges> must be > 0 and you must use the AddEdge(number,visibillity) method. Warning: the user is responsible about the orientation of the triangle depending of the order of the created vertex or edges and this orientation must be coherent with the vertex normal optionnaly given at each vertex (See the Orientate() methods).

        :param maxVertexs:
        :type maxVertexs: int
        :param maxEdges: default value is 0
        :type maxEdges: int
        :param hasVNormals: default value is Standard_False
        :type hasVNormals: bool
        :param hasVColors: default value is Standard_False
        :type hasVColors: bool
        :param hasTexels: default value is Standard_False
        :type hasTexels: bool
        :param hasEdgeInfos: default value is Standard_False
        :type hasEdgeInfos: bool
        :rtype: None

        """
        _Graphic3d.Graphic3d_ArrayOfTriangles_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangles(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_ArrayOfTriangles self)"""
        return _Graphic3d.Graphic3d_ArrayOfTriangles__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_ArrayOfTriangles self) -> Handle_Graphic3d_ArrayOfTriangles"""
        return _Graphic3d.Graphic3d_ArrayOfTriangles_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_ArrayOfTriangles._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangles__kill_pointed, None, Graphic3d_ArrayOfTriangles)
Graphic3d_ArrayOfTriangles.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_ArrayOfTriangles_GetHandle, None, Graphic3d_ArrayOfTriangles)
Graphic3d_ArrayOfTriangles_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangles_swigregister
Graphic3d_ArrayOfTriangles_swigregister(Graphic3d_ArrayOfTriangles)

class Handle_Graphic3d_ArrayOfTriangles(Handle_Graphic3d_ArrayOfPrimitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_swiginit(self, _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangles(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_ArrayOfTriangles.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Nullify, None, Handle_Graphic3d_ArrayOfTriangles)
Handle_Graphic3d_ArrayOfTriangles.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsNull, None, Handle_Graphic3d_ArrayOfTriangles)
Handle_Graphic3d_ArrayOfTriangles.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles_GetObject, None, Handle_Graphic3d_ArrayOfTriangles)
Handle_Graphic3d_ArrayOfTriangles._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles__kill_pointed, None, Handle_Graphic3d_ArrayOfTriangles)
Handle_Graphic3d_ArrayOfTriangles_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_swigregister
Handle_Graphic3d_ArrayOfTriangles_swigregister(Handle_Graphic3d_ArrayOfTriangles)

def Handle_Graphic3d_ArrayOfTriangles_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast(AnObject)
Handle_Graphic3d_ArrayOfTriangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast

class Graphic3d_TextureEnv(Graphic3d_TextureRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an environment texture from a file.

        :param theFileName:
        :type theFileName: TCollection_AsciiString &
        :rtype: None

        * Creates an environment texture from a predefined texture name set.

        :param theName:
        :type theName: Graphic3d_NameOfTextureEnv
        :rtype: None

        """
        _Graphic3d.Graphic3d_TextureEnv_swiginit(self, _Graphic3d.new_Graphic3d_TextureEnv(*args))

    def Name(self, *args):
        """
        * Returns the name of the predefined textures or NOT_ENV_UNKNOWN when the name is given as a filename.

        :rtype: Graphic3d_NameOfTextureEnv

        """
        return _Graphic3d.Graphic3d_TextureEnv_Name(self, *args)


    def NumberOfTextures(*args):
        """
        * Returns the number of predefined textures.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_TextureEnv_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        * Returns the name of the predefined texture of rank <aRank>

        :param theRank:
        :type theRank: int
        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_TextureEnv_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_TextureEnv self)"""
        return _Graphic3d.Graphic3d_TextureEnv__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_TextureEnv self) -> Handle_Graphic3d_TextureEnv"""
        return _Graphic3d.Graphic3d_TextureEnv_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_TextureEnv.Name = new_instancemethod(_Graphic3d.Graphic3d_TextureEnv_Name, None, Graphic3d_TextureEnv)
Graphic3d_TextureEnv._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_TextureEnv__kill_pointed, None, Graphic3d_TextureEnv)
Graphic3d_TextureEnv.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_TextureEnv_GetHandle, None, Graphic3d_TextureEnv)
Graphic3d_TextureEnv_swigregister = _Graphic3d.Graphic3d_TextureEnv_swigregister
Graphic3d_TextureEnv_swigregister(Graphic3d_TextureEnv)

def Graphic3d_TextureEnv_NumberOfTextures(*args):
    """
    * Returns the number of predefined textures.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_TextureEnv_NumberOfTextures(*args)

def Graphic3d_TextureEnv_TextureName(*args):
    """
    * Returns the name of the predefined texture of rank <aRank>

    :param theRank:
    :type theRank: int
    :rtype: TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_TextureEnv_TextureName(*args)

class Handle_Graphic3d_TextureEnv(Handle_Graphic3d_TextureRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_TextureEnv_swiginit(self, _Graphic3d.new_Handle_Graphic3d_TextureEnv(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureEnv_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_TextureEnv.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureEnv_Nullify, None, Handle_Graphic3d_TextureEnv)
Handle_Graphic3d_TextureEnv.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureEnv_IsNull, None, Handle_Graphic3d_TextureEnv)
Handle_Graphic3d_TextureEnv.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureEnv_GetObject, None, Handle_Graphic3d_TextureEnv)
Handle_Graphic3d_TextureEnv._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureEnv__kill_pointed, None, Handle_Graphic3d_TextureEnv)
Handle_Graphic3d_TextureEnv_swigregister = _Graphic3d.Handle_Graphic3d_TextureEnv_swigregister
Handle_Graphic3d_TextureEnv_swigregister(Handle_Graphic3d_TextureEnv)

def Handle_Graphic3d_TextureEnv_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_TextureEnv_DownCast(AnObject)
Handle_Graphic3d_TextureEnv_DownCast = _Graphic3d.Handle_Graphic3d_TextureEnv_DownCast

class Graphic3d_TextureMap(Graphic3d_TextureRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def EnableSmooth(self, *args):
        """
        * enable texture smoothing

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        * Returns True if the texture is smoothed.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureMap_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        * disable texture smoothing

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        * enable texture modulate mode. the image is modulate with the shading of the surface.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        * disable texture modulate mode. the image is directly decal on the surface.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        * Returns True if the texture is modulate.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureMap_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        * use this methods if you want to enable texture repetition on your objects.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        * use this methods if you want to disable texture repetition on your objects.

        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        * Returns True if the texture repeat is enable.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_TextureMap_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        * returns level of anisontropy texture filter. Default value is Graphic3d_LOTA_OFF.

        :rtype: Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureMap_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        * @param theLevel level of anisontropy texture filter.

        :param theLevel:
        :type theLevel: Graphic3d_LevelOfTextureAnisotropy
        :rtype: None

        """
        return _Graphic3d.Graphic3d_TextureMap_SetAnisoFilter(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_TextureMap self)"""
        return _Graphic3d.Graphic3d_TextureMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_TextureMap self) -> Handle_Graphic3d_TextureMap"""
        return _Graphic3d.Graphic3d_TextureMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_TextureMap.EnableSmooth = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_EnableSmooth, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.IsSmoothed = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_IsSmoothed, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.DisableSmooth = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_DisableSmooth, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.EnableModulate = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_EnableModulate, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.DisableModulate = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_DisableModulate, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.IsModulate = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_IsModulate, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.EnableRepeat = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_EnableRepeat, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.DisableRepeat = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_DisableRepeat, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.IsRepeat = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_IsRepeat, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.AnisoFilter = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_AnisoFilter, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.SetAnisoFilter = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_SetAnisoFilter, None, Graphic3d_TextureMap)
Graphic3d_TextureMap._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_TextureMap__kill_pointed, None, Graphic3d_TextureMap)
Graphic3d_TextureMap.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_TextureMap_GetHandle, None, Graphic3d_TextureMap)
Graphic3d_TextureMap_swigregister = _Graphic3d.Graphic3d_TextureMap_swigregister
Graphic3d_TextureMap_swigregister(Graphic3d_TextureMap)

class Handle_Graphic3d_TextureMap(Handle_Graphic3d_TextureRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_TextureMap_swiginit(self, _Graphic3d.new_Handle_Graphic3d_TextureMap(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_TextureMap.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureMap_Nullify, None, Handle_Graphic3d_TextureMap)
Handle_Graphic3d_TextureMap.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureMap_IsNull, None, Handle_Graphic3d_TextureMap)
Handle_Graphic3d_TextureMap.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureMap_GetObject, None, Handle_Graphic3d_TextureMap)
Handle_Graphic3d_TextureMap._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_TextureMap__kill_pointed, None, Handle_Graphic3d_TextureMap)
Handle_Graphic3d_TextureMap_swigregister = _Graphic3d.Handle_Graphic3d_TextureMap_swigregister
Handle_Graphic3d_TextureMap_swigregister(Handle_Graphic3d_TextureMap)

def Handle_Graphic3d_TextureMap_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_TextureMap_DownCast(AnObject)
Handle_Graphic3d_TextureMap_DownCast = _Graphic3d.Handle_Graphic3d_TextureMap_DownCast

class Graphic3d_Texture1D(Graphic3d_TextureMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self, *args):
        """
        * Returns the name of the predefined textures or NOT_1D_UNKNOWN when the name is given as a filename.

        :rtype: Graphic3d_NameOfTexture1D

        """
        return _Graphic3d.Graphic3d_Texture1D_Name(self, *args)


    def NumberOfTextures(*args):
        """
        * Returns the number of predefined textures.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Texture1D_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        * Returns the name of the predefined texture of rank <aRank>

        :param aRank:
        :type aRank: int
        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_Texture1D_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture1D self)"""
        return _Graphic3d.Graphic3d_Texture1D__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture1D self) -> Handle_Graphic3d_Texture1D"""
        return _Graphic3d.Graphic3d_Texture1D_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture1D.Name = new_instancemethod(_Graphic3d.Graphic3d_Texture1D_Name, None, Graphic3d_Texture1D)
Graphic3d_Texture1D._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture1D__kill_pointed, None, Graphic3d_Texture1D)
Graphic3d_Texture1D.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture1D_GetHandle, None, Graphic3d_Texture1D)
Graphic3d_Texture1D_swigregister = _Graphic3d.Graphic3d_Texture1D_swigregister
Graphic3d_Texture1D_swigregister(Graphic3d_Texture1D)

def Graphic3d_Texture1D_NumberOfTextures(*args):
    """
    * Returns the number of predefined textures.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_Texture1D_NumberOfTextures(*args)

def Graphic3d_Texture1D_TextureName(*args):
    """
    * Returns the name of the predefined texture of rank <aRank>

    :param aRank:
    :type aRank: int
    :rtype: TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_Texture1D_TextureName(*args)

class Handle_Graphic3d_Texture1D(Handle_Graphic3d_TextureMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture1D_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture1D(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1D_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture1D.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1D_Nullify, None, Handle_Graphic3d_Texture1D)
Handle_Graphic3d_Texture1D.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1D_IsNull, None, Handle_Graphic3d_Texture1D)
Handle_Graphic3d_Texture1D.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1D_GetObject, None, Handle_Graphic3d_Texture1D)
Handle_Graphic3d_Texture1D._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1D__kill_pointed, None, Handle_Graphic3d_Texture1D)
Handle_Graphic3d_Texture1D_swigregister = _Graphic3d.Handle_Graphic3d_Texture1D_swigregister
Handle_Graphic3d_Texture1D_swigregister(Handle_Graphic3d_Texture1D)

def Handle_Graphic3d_Texture1D_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture1D_DownCast(AnObject)
Handle_Graphic3d_Texture1D_DownCast = _Graphic3d.Handle_Graphic3d_Texture1D_DownCast

class Graphic3d_Texture2D(Graphic3d_TextureMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self, *args):
        """
        * Returns the name of the predefined textures or NOT_2D_UNKNOWN when the name is given as a filename.

        :rtype: Graphic3d_NameOfTexture2D

        """
        return _Graphic3d.Graphic3d_Texture2D_Name(self, *args)


    def NumberOfTextures(*args):
        """
        * Returns the number of predefined textures.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_Texture2D_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        * Returns the name of the predefined texture of rank <aRank>

        :param theRank:
        :type theRank: int
        :rtype: TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_Texture2D_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture2D self)"""
        return _Graphic3d.Graphic3d_Texture2D__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture2D self) -> Handle_Graphic3d_Texture2D"""
        return _Graphic3d.Graphic3d_Texture2D_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture2D.Name = new_instancemethod(_Graphic3d.Graphic3d_Texture2D_Name, None, Graphic3d_Texture2D)
Graphic3d_Texture2D._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture2D__kill_pointed, None, Graphic3d_Texture2D)
Graphic3d_Texture2D.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture2D_GetHandle, None, Graphic3d_Texture2D)
Graphic3d_Texture2D_swigregister = _Graphic3d.Graphic3d_Texture2D_swigregister
Graphic3d_Texture2D_swigregister(Graphic3d_Texture2D)

def Graphic3d_Texture2D_NumberOfTextures(*args):
    """
    * Returns the number of predefined textures.

    :rtype: int

    """
    return _Graphic3d.Graphic3d_Texture2D_NumberOfTextures(*args)

def Graphic3d_Texture2D_TextureName(*args):
    """
    * Returns the name of the predefined texture of rank <aRank>

    :param theRank:
    :type theRank: int
    :rtype: TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_Texture2D_TextureName(*args)

class Handle_Graphic3d_Texture2D(Handle_Graphic3d_TextureMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture2D_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture2D(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2D_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture2D.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2D_Nullify, None, Handle_Graphic3d_Texture2D)
Handle_Graphic3d_Texture2D.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2D_IsNull, None, Handle_Graphic3d_Texture2D)
Handle_Graphic3d_Texture2D.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2D_GetObject, None, Handle_Graphic3d_Texture2D)
Handle_Graphic3d_Texture2D._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2D__kill_pointed, None, Handle_Graphic3d_Texture2D)
Handle_Graphic3d_Texture2D_swigregister = _Graphic3d.Handle_Graphic3d_Texture2D_swigregister
Handle_Graphic3d_Texture2D_swigregister(Handle_Graphic3d_Texture2D)

def Handle_Graphic3d_Texture2D_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture2D_DownCast(AnObject)
Handle_Graphic3d_Texture2D_DownCast = _Graphic3d.Handle_Graphic3d_Texture2D_DownCast

class Graphic3d_Texture1Dmanual(Graphic3d_Texture1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a texture from the file FileName.

        :param theFileName:
        :type theFileName: TCollection_AsciiString &
        :rtype: None

        * Create a texture from a predefined texture name set.

        :param theNOT:
        :type theNOT: Graphic3d_NameOfTexture1D
        :rtype: None

        * Creates a texture from the pixmap.

        :param thePixMap:
        :type thePixMap: Image_PixMap_Handle &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Texture1Dmanual_swiginit(self, _Graphic3d.new_Graphic3d_Texture1Dmanual(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture1Dmanual self)"""
        return _Graphic3d.Graphic3d_Texture1Dmanual__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture1Dmanual self) -> Handle_Graphic3d_Texture1Dmanual"""
        return _Graphic3d.Graphic3d_Texture1Dmanual_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture1Dmanual._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dmanual__kill_pointed, None, Graphic3d_Texture1Dmanual)
Graphic3d_Texture1Dmanual.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dmanual_GetHandle, None, Graphic3d_Texture1Dmanual)
Graphic3d_Texture1Dmanual_swigregister = _Graphic3d.Graphic3d_Texture1Dmanual_swigregister
Graphic3d_Texture1Dmanual_swigregister(Graphic3d_Texture1Dmanual)

class Handle_Graphic3d_Texture1Dmanual(Handle_Graphic3d_Texture1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture1Dmanual_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture1Dmanual(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture1Dmanual.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual_Nullify, None, Handle_Graphic3d_Texture1Dmanual)
Handle_Graphic3d_Texture1Dmanual.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsNull, None, Handle_Graphic3d_Texture1Dmanual)
Handle_Graphic3d_Texture1Dmanual.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual_GetObject, None, Handle_Graphic3d_Texture1Dmanual)
Handle_Graphic3d_Texture1Dmanual._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual__kill_pointed, None, Handle_Graphic3d_Texture1Dmanual)
Handle_Graphic3d_Texture1Dmanual_swigregister = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_swigregister
Handle_Graphic3d_Texture1Dmanual_swigregister(Handle_Graphic3d_Texture1Dmanual)

def Handle_Graphic3d_Texture1Dmanual_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast(AnObject)
Handle_Graphic3d_Texture1Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast

class Graphic3d_Texture1Dsegment(Graphic3d_Texture1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a texture from a file

        :param theFileName:
        :type theFileName: TCollection_AsciiString &
        :rtype: None

        * Creates a texture from a predefined texture name set.

        :param theNOT:
        :type theNOT: Graphic3d_NameOfTexture1D
        :rtype: None

        * Creates a texture from the pixmap.

        :param thePixMap:
        :type thePixMap: Image_PixMap_Handle &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Texture1Dsegment_swiginit(self, _Graphic3d.new_Graphic3d_Texture1Dsegment(*args))

    def SetSegment(self, *args):
        """
        * Sets the texture application bounds. Defines the way the texture is stretched across facets. Default values are <0.0, 0.0, 0.0> , <0.0, 0.0, 1.0>

        :param theX1:
        :type theX1: Standard_ShortReal
        :param theY1:
        :type theY1: Standard_ShortReal
        :param theZ1:
        :type theZ1: Standard_ShortReal
        :param theX2:
        :type theX2: Standard_ShortReal
        :param theY2:
        :type theY2: Standard_ShortReal
        :param theZ2:
        :type theZ2: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_SetSegment(self, *args)


    def Segment(self, *args):
        """
        * Returns the values of the current segment X1, Y1, Z1 , X2, Y2, Z2.

        :param theX1:
        :type theX1: Standard_ShortReal &
        :param theY1:
        :type theY1: Standard_ShortReal &
        :param theZ1:
        :type theZ1: Standard_ShortReal &
        :param theX2:
        :type theX2: Standard_ShortReal &
        :param theY2:
        :type theY2: Standard_ShortReal &
        :param theZ2:
        :type theZ2: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_Segment(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture1Dsegment self)"""
        return _Graphic3d.Graphic3d_Texture1Dsegment__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture1Dsegment self) -> Handle_Graphic3d_Texture1Dsegment"""
        return _Graphic3d.Graphic3d_Texture1Dsegment_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture1Dsegment.SetSegment = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dsegment_SetSegment, None, Graphic3d_Texture1Dsegment)
Graphic3d_Texture1Dsegment.Segment = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dsegment_Segment, None, Graphic3d_Texture1Dsegment)
Graphic3d_Texture1Dsegment._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dsegment__kill_pointed, None, Graphic3d_Texture1Dsegment)
Graphic3d_Texture1Dsegment.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture1Dsegment_GetHandle, None, Graphic3d_Texture1Dsegment)
Graphic3d_Texture1Dsegment_swigregister = _Graphic3d.Graphic3d_Texture1Dsegment_swigregister
Graphic3d_Texture1Dsegment_swigregister(Graphic3d_Texture1Dsegment)

class Handle_Graphic3d_Texture1Dsegment(Handle_Graphic3d_Texture1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture1Dsegment_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture1Dsegment(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture1Dsegment.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment_Nullify, None, Handle_Graphic3d_Texture1Dsegment)
Handle_Graphic3d_Texture1Dsegment.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsNull, None, Handle_Graphic3d_Texture1Dsegment)
Handle_Graphic3d_Texture1Dsegment.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment_GetObject, None, Handle_Graphic3d_Texture1Dsegment)
Handle_Graphic3d_Texture1Dsegment._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment__kill_pointed, None, Handle_Graphic3d_Texture1Dsegment)
Handle_Graphic3d_Texture1Dsegment_swigregister = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_swigregister
Handle_Graphic3d_Texture1Dsegment_swigregister(Handle_Graphic3d_Texture1Dsegment)

def Handle_Graphic3d_Texture1Dsegment_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast(AnObject)
Handle_Graphic3d_Texture1Dsegment_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast

class Graphic3d_Texture2Dmanual(Graphic3d_Texture2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a texture from a file

        :param theFileName:
        :type theFileName: TCollection_AsciiString &
        :rtype: None

        * Creates a texture from a predefined texture name set.

        :param theNOT:
        :type theNOT: Graphic3d_NameOfTexture2D
        :rtype: None

        * Creates a texture from the pixmap.

        :param thePixMap:
        :type thePixMap: Image_PixMap_Handle &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Texture2Dmanual_swiginit(self, _Graphic3d.new_Graphic3d_Texture2Dmanual(*args))

    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture2Dmanual self)"""
        return _Graphic3d.Graphic3d_Texture2Dmanual__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture2Dmanual self) -> Handle_Graphic3d_Texture2Dmanual"""
        return _Graphic3d.Graphic3d_Texture2Dmanual_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture2Dmanual._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dmanual__kill_pointed, None, Graphic3d_Texture2Dmanual)
Graphic3d_Texture2Dmanual.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dmanual_GetHandle, None, Graphic3d_Texture2Dmanual)
Graphic3d_Texture2Dmanual_swigregister = _Graphic3d.Graphic3d_Texture2Dmanual_swigregister
Graphic3d_Texture2Dmanual_swigregister(Graphic3d_Texture2Dmanual)

class Handle_Graphic3d_Texture2Dmanual(Handle_Graphic3d_Texture2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture2Dmanual_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture2Dmanual(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture2Dmanual.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual_Nullify, None, Handle_Graphic3d_Texture2Dmanual)
Handle_Graphic3d_Texture2Dmanual.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsNull, None, Handle_Graphic3d_Texture2Dmanual)
Handle_Graphic3d_Texture2Dmanual.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual_GetObject, None, Handle_Graphic3d_Texture2Dmanual)
Handle_Graphic3d_Texture2Dmanual._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual__kill_pointed, None, Handle_Graphic3d_Texture2Dmanual)
Handle_Graphic3d_Texture2Dmanual_swigregister = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_swigregister
Handle_Graphic3d_Texture2Dmanual_swigregister(Handle_Graphic3d_Texture2Dmanual)

def Handle_Graphic3d_Texture2Dmanual_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast(AnObject)
Handle_Graphic3d_Texture2Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast

class Graphic3d_Texture2Dplane(Graphic3d_Texture2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a texture from a file

        :param theFileName:
        :type theFileName: TCollection_AsciiString &
        :rtype: None

        * Creates a texture from a predefined texture name set.

        :param theNOT:
        :type theNOT: Graphic3d_NameOfTexture2D
        :rtype: None

        * Creates a texture from the pixmap.

        :param thePixMap:
        :type thePixMap: Image_PixMap_Handle &
        :rtype: None

        """
        _Graphic3d.Graphic3d_Texture2Dplane_swiginit(self, _Graphic3d.new_Graphic3d_Texture2Dplane(*args))

    def SetPlaneS(self, *args):
        """
        * Defines the texture projection plane for texture coordinate S default is <1.0, 0.0, 0.0, 0.0>

        :param A:
        :type A: Standard_ShortReal
        :param B:
        :type B: Standard_ShortReal
        :param C:
        :type C: Standard_ShortReal
        :param D:
        :type D: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlaneS(self, *args)


    def SetPlaneT(self, *args):
        """
        * Defines the texture projection plane for texture coordinate T default is <0.0, 1.0, 0.0, 0.0>

        :param A:
        :type A: Standard_ShortReal
        :param B:
        :type B: Standard_ShortReal
        :param C:
        :type C: Standard_ShortReal
        :param D:
        :type D: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlaneT(self, *args)


    def SetPlane(self, *args):
        """
        * Defines the texture projection plane for both S and T texture coordinate default is NOTP_XY meaning: <1.0, 0.0, 0.0, 0.0> for S and <0.0, 1.0, 0.0, 0.0> for T

        :param thePlane:
        :type thePlane: Graphic3d_NameOfTexturePlane
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlane(self, *args)


    def SetScaleS(self, *args):
        """
        * Defines the texture scale for the S texture coordinate much easier than recomputing the S plane equation but the result is the same default to 1.0

        :param theVal:
        :type theVal: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetScaleS(self, *args)


    def SetScaleT(self, *args):
        """
        * Defines the texture scale for the T texture coordinate much easier than recompution the T plane equation but the result is the same default to 1.0

        :param theVal:
        :type theVal: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetScaleT(self, *args)


    def SetTranslateS(self, *args):
        """
        * Defines the texture translation for the S texture coordinate you can obtain the same effect by modifying the S plane equation but its not easier. default to 0.0

        :param theVal:
        :type theVal: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetTranslateS(self, *args)


    def SetTranslateT(self, *args):
        """
        * Defines the texture translation for the T texture coordinate you can obtain the same effect by modifying the T plane equation but its not easier. default to 0.0

        :param theVal:
        :type theVal: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetTranslateT(self, *args)


    def SetRotation(self, *args):
        """
        * Sets the rotation angle of the whole texture. the same result might be achieved by recomputing the S and T plane equation but it's not the easiest way... the angle is expressed in degrees default is 0.0

        :param theVal:
        :type theVal: Standard_ShortReal
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetRotation(self, *args)


    def Plane(self, *args):
        """
        * Returns the current texture plane name or NOTP_UNKNOWN when the plane is user defined.

        :rtype: Graphic3d_NameOfTexturePlane

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_Plane(self, *args)


    def PlaneS(self, *args):
        """
        * Returns the current texture plane S equation

        :param A:
        :type A: Standard_ShortReal &
        :param B:
        :type B: Standard_ShortReal &
        :param C:
        :type C: Standard_ShortReal &
        :param D:
        :type D: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_PlaneS(self, *args)


    def PlaneT(self, *args):
        """
        * Returns the current texture plane T equation

        :param A:
        :type A: Standard_ShortReal &
        :param B:
        :type B: Standard_ShortReal &
        :param C:
        :type C: Standard_ShortReal &
        :param D:
        :type D: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_PlaneT(self, *args)


    def TranslateS(self, *args):
        """
        * Returns the current texture S translation value

        :param theVal:
        :type theVal: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_TranslateS(self, *args)


    def TranslateT(self, *args):
        """
        * Returns the current texture T translation value

        :param theVal:
        :type theVal: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_TranslateT(self, *args)


    def ScaleS(self, *args):
        """
        * Returns the current texture S scale value

        :param theVal:
        :type theVal: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_ScaleS(self, *args)


    def ScaleT(self, *args):
        """
        * Returns the current texture T scale value

        :param theVal:
        :type theVal: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_ScaleT(self, *args)


    def Rotation(self, *args):
        """
        * Returns the current texture rotation angle

        :param theVal:
        :type theVal: Standard_ShortReal &
        :rtype: None

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_Rotation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Graphic3d_Texture2Dplane self)"""
        return _Graphic3d.Graphic3d_Texture2Dplane__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Graphic3d_Texture2Dplane self) -> Handle_Graphic3d_Texture2Dplane"""
        return _Graphic3d.Graphic3d_Texture2Dplane_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Graphic3d_Texture2Dplane.SetPlaneS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetPlaneS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetPlaneT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetPlaneT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetPlane = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetPlane, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetScaleS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetScaleS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetScaleT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetScaleT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetTranslateS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetTranslateS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetTranslateT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetTranslateT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.SetRotation = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_SetRotation, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.Plane = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_Plane, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.PlaneS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_PlaneS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.PlaneT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_PlaneT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.TranslateS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_TranslateS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.TranslateT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_TranslateT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.ScaleS = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_ScaleS, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.ScaleT = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_ScaleT, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.Rotation = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_Rotation, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane._kill_pointed = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane__kill_pointed, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane.GetHandle = new_instancemethod(_Graphic3d.Graphic3d_Texture2Dplane_GetHandle, None, Graphic3d_Texture2Dplane)
Graphic3d_Texture2Dplane_swigregister = _Graphic3d.Graphic3d_Texture2Dplane_swigregister
Graphic3d_Texture2Dplane_swigregister(Graphic3d_Texture2Dplane)

class Handle_Graphic3d_Texture2Dplane(Handle_Graphic3d_Texture2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Handle_Graphic3d_Texture2Dplane_swiginit(self, _Graphic3d.new_Handle_Graphic3d_Texture2Dplane(*args))
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Graphic3d_Texture2Dplane.Nullify = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane_Nullify, None, Handle_Graphic3d_Texture2Dplane)
Handle_Graphic3d_Texture2Dplane.IsNull = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane_IsNull, None, Handle_Graphic3d_Texture2Dplane)
Handle_Graphic3d_Texture2Dplane.GetObject = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane_GetObject, None, Handle_Graphic3d_Texture2Dplane)
Handle_Graphic3d_Texture2Dplane._kill_pointed = new_instancemethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane__kill_pointed, None, Handle_Graphic3d_Texture2Dplane)
Handle_Graphic3d_Texture2Dplane_swigregister = _Graphic3d.Handle_Graphic3d_Texture2Dplane_swigregister
Handle_Graphic3d_Texture2Dplane_swigregister(Handle_Graphic3d_Texture2Dplane)

def Handle_Graphic3d_Texture2Dplane_DownCast(AnObject):
    return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast(AnObject)
Handle_Graphic3d_Texture2Dplane_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast



