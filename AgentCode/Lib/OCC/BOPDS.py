# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BOPDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BOPDS', [dirname(__file__)])
        except ImportError:
            import _BOPDS
            return _BOPDS
        if fp is not None:
            try:
                _mod = imp.load_module('_BOPDS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BOPDS = swig_import_helper()
    del swig_import_helper
else:
    import _BOPDS
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BOPDS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BOPDS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BOPDS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BOPDS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BOPDS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BOPDS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BOPDS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BOPDS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BOPDS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BOPDS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BOPDS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BOPDS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BOPDS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BOPDS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BOPDS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BOPDS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BOPDS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BOPDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.BOPCol
import OCC.IntTools
import OCC.TopoDS
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.BRepAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.BOPInt
import OCC.GeomAPI
import OCC.Quantity
import OCC.Extrema
import OCC.Approx
import OCC.AppCont
import OCC.AppParCurves
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.Bnd
import OCC.IntSurf
import OCC.IntCurvesFace
import OCC.Geom2dHatch
import OCC.IntRes2d
import OCC.HatchGen
import OCC.Geom2dInt
import OCC.IntCurve
import OCC.NCollection
class BOPDS_CommonBlock(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor <theAllocator> - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_CommonBlock_swiginit(self, _BOPDS.new_BOPDS_CommonBlock(*args))

    def AddPaveBlock(self, *args):
        """
        * Modifier Adds the pave block <aPB> to the list of pave blocks of the common block

        :param aPB:
        :type aPB: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_AddPaveBlock(self, *args)


    def AddPaveBlocks(self, *args):
        """
        * Modifier Adds the list of pave blocks <aLPB> to the list of pave blocks of the common block

        :param aLPB:
        :type aLPB: BOPDS_ListOfPaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_AddPaveBlocks(self, *args)


    def AddFace(self, *args):
        """
        * Modifier Adds the index of the face <aF> to the list of indices of faces of the common block

        :param aF:
        :type aF: int
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_AddFace(self, *args)


    def AddFaces(self, *args):
        """
        * Modifier Adds the list of indices of faces <aLF> to the list of indices of faces of the common block

        :param aLF:
        :type aLF: BOPCol_ListOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_AddFaces(self, *args)


    def PaveBlocks(self, *args):
        """
        * Selector Returns the list of pave blocks of the common block

        :rtype: BOPDS_ListOfPaveBlock

        """
        return _BOPDS.BOPDS_CommonBlock_PaveBlocks(self, *args)


    def Faces(self, *args):
        """
        * Selector Returns the list of indices of faces of the common block

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_CommonBlock_Faces(self, *args)


    def PaveBlock1(self, *args):
        """
        * Selector Returns the first pave block of the common block

        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_CommonBlock_PaveBlock1(self, *args)


    def PaveBlockOnEdge(self, *args):
        """
        * Selector Returns the pave block that belongs to the edge with index <theIx>

        :param theIndex:
        :type theIndex: int
        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_CommonBlock_PaveBlockOnEdge(self, *args)


    def IsPaveBlockOnFace(self, *args):
        """
        * Query Returns true if the common block contains a pave block that belongs to the face with index <theIx>

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_CommonBlock_IsPaveBlockOnFace(self, *args)


    def IsPaveBlockOnEdge(self, *args):
        """
        * Query Returns true if the common block contains a pave block that belongs to the edge with index <theIx>

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_CommonBlock_IsPaveBlockOnEdge(self, *args)


    def Contains(self, *args):
        """
        * Query Returns true if the common block contains a pave block that is equal to <thePB>

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: bool

        * Query Returns true if the common block contains the face with index equal to <theF>

        :param theF:
        :type theF: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_CommonBlock_Contains(self, *args)


    def SetEdge(self, *args):
        """
        * Modifier Assign the index <theEdge> as the edge index to all pave blocks of the common block

        :param theEdge:
        :type theEdge: int
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_SetEdge(self, *args)


    def Edge(self, *args):
        """
        * Selector Returns the index of the edge of all pave blocks of the common block

        :rtype: int

        """
        return _BOPDS.BOPDS_CommonBlock_Edge(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_CommonBlock_Dump(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BOPDS_CommonBlock self)"""
        return _BOPDS.BOPDS_CommonBlock__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BOPDS_CommonBlock self) -> Handle_BOPDS_CommonBlock"""
        return _BOPDS.BOPDS_CommonBlock_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_CommonBlock.AddPaveBlock = new_instancemethod(_BOPDS.BOPDS_CommonBlock_AddPaveBlock, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.AddPaveBlocks = new_instancemethod(_BOPDS.BOPDS_CommonBlock_AddPaveBlocks, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.AddFace = new_instancemethod(_BOPDS.BOPDS_CommonBlock_AddFace, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.AddFaces = new_instancemethod(_BOPDS.BOPDS_CommonBlock_AddFaces, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.PaveBlocks = new_instancemethod(_BOPDS.BOPDS_CommonBlock_PaveBlocks, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.Faces = new_instancemethod(_BOPDS.BOPDS_CommonBlock_Faces, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.PaveBlock1 = new_instancemethod(_BOPDS.BOPDS_CommonBlock_PaveBlock1, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.PaveBlockOnEdge = new_instancemethod(_BOPDS.BOPDS_CommonBlock_PaveBlockOnEdge, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.IsPaveBlockOnFace = new_instancemethod(_BOPDS.BOPDS_CommonBlock_IsPaveBlockOnFace, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.IsPaveBlockOnEdge = new_instancemethod(_BOPDS.BOPDS_CommonBlock_IsPaveBlockOnEdge, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.Contains = new_instancemethod(_BOPDS.BOPDS_CommonBlock_Contains, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.SetEdge = new_instancemethod(_BOPDS.BOPDS_CommonBlock_SetEdge, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.Edge = new_instancemethod(_BOPDS.BOPDS_CommonBlock_Edge, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.Dump = new_instancemethod(_BOPDS.BOPDS_CommonBlock_Dump, None, BOPDS_CommonBlock)
BOPDS_CommonBlock._kill_pointed = new_instancemethod(_BOPDS.BOPDS_CommonBlock__kill_pointed, None, BOPDS_CommonBlock)
BOPDS_CommonBlock.GetHandle = new_instancemethod(_BOPDS.BOPDS_CommonBlock_GetHandle, None, BOPDS_CommonBlock)
BOPDS_CommonBlock_swigregister = _BOPDS.BOPDS_CommonBlock_swigregister
BOPDS_CommonBlock_swigregister(BOPDS_CommonBlock)

class Handle_BOPDS_CommonBlock(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPDS.Handle_BOPDS_CommonBlock_swiginit(self, _BOPDS.new_Handle_BOPDS_CommonBlock(*args))
    DownCast = staticmethod(_BOPDS.Handle_BOPDS_CommonBlock_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BOPDS_CommonBlock.Nullify = new_instancemethod(_BOPDS.Handle_BOPDS_CommonBlock_Nullify, None, Handle_BOPDS_CommonBlock)
Handle_BOPDS_CommonBlock.IsNull = new_instancemethod(_BOPDS.Handle_BOPDS_CommonBlock_IsNull, None, Handle_BOPDS_CommonBlock)
Handle_BOPDS_CommonBlock.GetObject = new_instancemethod(_BOPDS.Handle_BOPDS_CommonBlock_GetObject, None, Handle_BOPDS_CommonBlock)
Handle_BOPDS_CommonBlock._kill_pointed = new_instancemethod(_BOPDS.Handle_BOPDS_CommonBlock__kill_pointed, None, Handle_BOPDS_CommonBlock)
Handle_BOPDS_CommonBlock_swigregister = _BOPDS.Handle_BOPDS_CommonBlock_swigregister
Handle_BOPDS_CommonBlock_swigregister(Handle_BOPDS_CommonBlock)

def Handle_BOPDS_CommonBlock_DownCast(AnObject):
    return _BOPDS.Handle_BOPDS_CommonBlock_DownCast(AnObject)
Handle_BOPDS_CommonBlock_DownCast = _BOPDS.Handle_BOPDS_CommonBlock_DownCast

class BOPDS_CoupleOfPaveBlocks(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param thePB1 * first pave block * @param thePB2 * secondt pave block */

        :param thePB1:
        :type thePB1: Handle_BOPDS_PaveBlock &
        :param thePB2:
        :type thePB2: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        _BOPDS.BOPDS_CoupleOfPaveBlocks_swiginit(self, _BOPDS.new_BOPDS_CoupleOfPaveBlocks(*args))

    def SetIndex(self, *args):
        """
        * /** * Sets an index * @param theIndex * index */

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_SetIndex(self, *args)


    def Index(self, *args):
        """
        * /** * Returns the index * returns * index */

        :rtype: int

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_Index(self, *args)


    def SetIndexInterf(self, *args):
        """
        * /** * Sets an index of an interference * @param theIndex * index of an interference */

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_SetIndexInterf(self, *args)


    def IndexInterf(self, *args):
        """
        * /** * Returns the index of an interference * returns * index of an interference */

        :rtype: int

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_IndexInterf(self, *args)


    def SetPaveBlocks(self, *args):
        """
        * /** * Sets pave blocks * @param thePB1 * first pave block * @param thePB2 * secondt pave block */

        :param thePB1:
        :type thePB1: Handle_BOPDS_PaveBlock &
        :param thePB2:
        :type thePB2: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlocks(self, *args)


    def PaveBlocks(self, *args):
        """
        * /** * Returns pave blocks * @param thePB1 * the first pave block * @param thePB2 * the second pave block */

        :param thePB1:
        :type thePB1: Handle_BOPDS_PaveBlock &
        :param thePB2:
        :type thePB2: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlocks(self, *args)


    def SetPaveBlock1(self, *args):
        """
        * /** * Sets the first pave block * @param thePB * the first pave block */

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlock1(self, *args)


    def PaveBlock1(self, *args):
        """
        * /** * Returns the first pave block * returns * the first pave block */

        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlock1(self, *args)


    def SetPaveBlock2(self, *args):
        """
        * /** * Sets the second pave block * @param thePB * the second pave block */

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlock2(self, *args)


    def PaveBlock2(self, *args):
        """
        * /** * Returns the second pave block * returns * the second pave block */

        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlock2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_CoupleOfPaveBlocks.SetIndex = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_SetIndex, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.Index = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_Index, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.SetIndexInterf = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_SetIndexInterf, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.IndexInterf = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_IndexInterf, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.SetPaveBlocks = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlocks, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.PaveBlocks = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlocks, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.SetPaveBlock1 = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlock1, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.PaveBlock1 = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlock1, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.SetPaveBlock2 = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_SetPaveBlock2, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks.PaveBlock2 = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks_PaveBlock2, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks._kill_pointed = new_instancemethod(_BOPDS.BOPDS_CoupleOfPaveBlocks__kill_pointed, None, BOPDS_CoupleOfPaveBlocks)
BOPDS_CoupleOfPaveBlocks_swigregister = _BOPDS.BOPDS_CoupleOfPaveBlocks_swigregister
BOPDS_CoupleOfPaveBlocks_swigregister(BOPDS_CoupleOfPaveBlocks)

class BOPDS_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor <theAllocator> - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_Curve_swiginit(self, _BOPDS.new_BOPDS_Curve(*args))

    def SetCurve(self, *args):
        """
        * Modifier Sets the curve <theC>

        :param theC:
        :type theC: IntTools_Curve &
        :rtype: None

        """
        return _BOPDS.BOPDS_Curve_SetCurve(self, *args)


    def Curve(self, *args):
        """
        * Selector Returns the curve

        :rtype: IntTools_Curve

        """
        return _BOPDS.BOPDS_Curve_Curve(self, *args)


    def SetBox(self, *args):
        """
        * Modifier Sets the bounding box <theBox> of the curve

        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _BOPDS.BOPDS_Curve_SetBox(self, *args)


    def Box(self, *args):
        """
        * Selector Returns the bounding box of the curve

        :rtype: Bnd_Box

        """
        return _BOPDS.BOPDS_Curve_Box(self, *args)


    def ChangeBox(self, *args):
        """
        * Selector/Modifier Returns the bounding box of the curve

        :rtype: Bnd_Box

        """
        return _BOPDS.BOPDS_Curve_ChangeBox(self, *args)


    def SetPaveBlocks(self, *args):
        """
        :param theLPB:
        :type theLPB: BOPDS_ListOfPaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_Curve_SetPaveBlocks(self, *args)


    def PaveBlocks(self, *args):
        """
        * Selector Returns the list of pave blocks of the curve

        :rtype: BOPDS_ListOfPaveBlock

        """
        return _BOPDS.BOPDS_Curve_PaveBlocks(self, *args)


    def ChangePaveBlocks(self, *args):
        """
        * Selector/Modifier Returns the list of pave blocks of the curve

        :rtype: BOPDS_ListOfPaveBlock

        """
        return _BOPDS.BOPDS_Curve_ChangePaveBlocks(self, *args)


    def InitPaveBlock1(self, *args):
        """
        * Creates initial pave block of the curve

        :rtype: None

        """
        return _BOPDS.BOPDS_Curve_InitPaveBlock1(self, *args)


    def ChangePaveBlock1(self, *args):
        """
        * Selector/Modifier Returns initial pave block of the curve

        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_Curve_ChangePaveBlock1(self, *args)


    def TechnoVertices(self, *args):
        """
        * Selector Returns list of indices of technologic vertices of the curve

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_Curve_TechnoVertices(self, *args)


    def ChangeTechnoVertices(self, *args):
        """
        * Selector/Modifier Returns list of indices of technologic vertices of the curve

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_Curve_ChangeTechnoVertices(self, *args)


    def HasEdge(self, *args):
        """
        * Query Returns true if at least one pave block of the curve has edge

        :rtype: bool

        """
        return _BOPDS.BOPDS_Curve_HasEdge(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_Curve.SetCurve = new_instancemethod(_BOPDS.BOPDS_Curve_SetCurve, None, BOPDS_Curve)
BOPDS_Curve.Curve = new_instancemethod(_BOPDS.BOPDS_Curve_Curve, None, BOPDS_Curve)
BOPDS_Curve.SetBox = new_instancemethod(_BOPDS.BOPDS_Curve_SetBox, None, BOPDS_Curve)
BOPDS_Curve.Box = new_instancemethod(_BOPDS.BOPDS_Curve_Box, None, BOPDS_Curve)
BOPDS_Curve.ChangeBox = new_instancemethod(_BOPDS.BOPDS_Curve_ChangeBox, None, BOPDS_Curve)
BOPDS_Curve.SetPaveBlocks = new_instancemethod(_BOPDS.BOPDS_Curve_SetPaveBlocks, None, BOPDS_Curve)
BOPDS_Curve.PaveBlocks = new_instancemethod(_BOPDS.BOPDS_Curve_PaveBlocks, None, BOPDS_Curve)
BOPDS_Curve.ChangePaveBlocks = new_instancemethod(_BOPDS.BOPDS_Curve_ChangePaveBlocks, None, BOPDS_Curve)
BOPDS_Curve.InitPaveBlock1 = new_instancemethod(_BOPDS.BOPDS_Curve_InitPaveBlock1, None, BOPDS_Curve)
BOPDS_Curve.ChangePaveBlock1 = new_instancemethod(_BOPDS.BOPDS_Curve_ChangePaveBlock1, None, BOPDS_Curve)
BOPDS_Curve.TechnoVertices = new_instancemethod(_BOPDS.BOPDS_Curve_TechnoVertices, None, BOPDS_Curve)
BOPDS_Curve.ChangeTechnoVertices = new_instancemethod(_BOPDS.BOPDS_Curve_ChangeTechnoVertices, None, BOPDS_Curve)
BOPDS_Curve.HasEdge = new_instancemethod(_BOPDS.BOPDS_Curve_HasEdge, None, BOPDS_Curve)
BOPDS_Curve._kill_pointed = new_instancemethod(_BOPDS.BOPDS_Curve__kill_pointed, None, BOPDS_Curve)
BOPDS_Curve_swigregister = _BOPDS.BOPDS_Curve_swigregister
BOPDS_Curve_swigregister(BOPDS_Curve)

class BOPDS_DS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_DS_swiginit(self, _BOPDS.new_BOPDS_DS(*args))

    def Clear(self, *args):
        """
        * Clears the contents

        :rtype: None

        """
        return _BOPDS.BOPDS_DS_Clear(self, *args)


    def Allocator(self, *args):
        """
        * Selector

        :rtype: BOPCol_BaseAllocator

        """
        return _BOPDS.BOPDS_DS_Allocator(self, *args)


    def SetArguments(self, *args):
        """
        * Modifier Sets the arguments [theLS] of an operation

        :param theLS:
        :type theLS: BOPCol_ListOfShape &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_SetArguments(self, *args)


    def Arguments(self, *args):
        """
        * Selector Returns the arguments of an operation

        :rtype: BOPCol_ListOfShape

        """
        return _BOPDS.BOPDS_DS_Arguments(self, *args)


    def Init(self, *args):
        """
        * Initializes the data structure for the arguments

        :rtype: None

        """
        return _BOPDS.BOPDS_DS_Init(self, *args)


    def NbShapes(self, *args):
        """
        * Selector Returns the total number of shapes stored

        :rtype: int

        """
        return _BOPDS.BOPDS_DS_NbShapes(self, *args)


    def NbSourceShapes(self, *args):
        """
        * Selector Returns the total number of source shapes stored

        :rtype: int

        """
        return _BOPDS.BOPDS_DS_NbSourceShapes(self, *args)


    def NbRanges(self, *args):
        """
        * Selector Returns the number of index ranges

        :rtype: int

        """
        return _BOPDS.BOPDS_DS_NbRanges(self, *args)


    def Range(self, *args):
        """
        * Selector Returns the index range 'i'

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_IndexRange

        """
        return _BOPDS.BOPDS_DS_Range(self, *args)


    def Rank(self, *args):
        """
        * Selector Returns the rank of the shape of index 'i'

        :param theIndex:
        :type theIndex: int
        :rtype: int

        """
        return _BOPDS.BOPDS_DS_Rank(self, *args)


    def IsNewShape(self, *args):
        """
        * Returns true if the shape of index 'i' is not the source shape/sub-shape

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_IsNewShape(self, *args)


    def Append(self, *args):
        """
        * Modifier Appends the information about the shape [theSI] to the data structure Returns the index of theSI in the data structure

        :param theSI:
        :type theSI: BOPDS_ShapeInfo &
        :rtype: int

        * Modifier Appends the default information about the shape [theS] to the data structure Returns the index of theS in the data structure

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: int

        """
        return _BOPDS.BOPDS_DS_Append(self, *args)


    def ShapeInfo(self, *args):
        """
        * Selector Returns the information about the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_ShapeInfo

        """
        return _BOPDS.BOPDS_DS_ShapeInfo(self, *args)


    def ChangeShapeInfo(self, *args):
        """
        * Selector/Modifier Returns the information about the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_ShapeInfo

        """
        return _BOPDS.BOPDS_DS_ChangeShapeInfo(self, *args)


    def Shape(self, *args):
        """
        * Selector Returns the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: TopoDS_Shape

        """
        return _BOPDS.BOPDS_DS_Shape(self, *args)


    def Index(self, *args):
        """
        * Selector Returns the index of the shape theS

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: int

        """
        return _BOPDS.BOPDS_DS_Index(self, *args)


    def PaveBlocksPool(self, *args):
        """
        * Selector Returns the information about pave blocks on source edges

        :rtype: BOPDS_VectorOfListOfPaveBlock

        """
        return _BOPDS.BOPDS_DS_PaveBlocksPool(self, *args)


    def ChangePaveBlocksPool(self, *args):
        """
        * Selector/Modifier Returns the information about pave blocks on source edges

        :rtype: BOPDS_VectorOfListOfPaveBlock

        """
        return _BOPDS.BOPDS_DS_ChangePaveBlocksPool(self, *args)


    def HasPaveBlocks(self, *args):
        """
        * Query Returns true if the shape with index theIndex has the information about pave blocks

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasPaveBlocks(self, *args)


    def PaveBlocks(self, *args):
        """
        * Selector Returns the pave blocks for the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_ListOfPaveBlock

        """
        return _BOPDS.BOPDS_DS_PaveBlocks(self, *args)


    def ChangePaveBlocks(self, *args):
        """
        * Selector/Modifier Returns the pave blocks for the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_ListOfPaveBlock

        """
        return _BOPDS.BOPDS_DS_ChangePaveBlocks(self, *args)


    def UpdatePaveBlocks(self, *args):
        """
        * Update the pave blocks for the all shapes in data structure

        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdatePaveBlocks(self, *args)


    def UpdatePaveBlock(self, *args):
        """
        * Update the pave block thePB

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdatePaveBlock(self, *args)


    def UpdateCommonBlock(self, *args):
        """
        * Update the common block theCB

        :param theCB:
        :type theCB: Handle_BOPDS_CommonBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdateCommonBlock(self, *args)


    def IsCommonBlock(self, *args):
        """
        * Query Returns true if the pave block is common block

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_IsCommonBlock(self, *args)


    def CommonBlock(self, *args):
        """
        * Selector Returns the common block

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: Handle_BOPDS_CommonBlock

        """
        return _BOPDS.BOPDS_DS_CommonBlock(self, *args)


    def SetCommonBlock(self, *args):
        """
        * Modifier Sets the common block <theCB>

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :param theCB:
        :type theCB: Handle_BOPDS_CommonBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_SetCommonBlock(self, *args)


    def RealPaveBlock(self, *args):
        """
        * Selector Returns the real first pave block

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: Handle_BOPDS_PaveBlock

        """
        return _BOPDS.BOPDS_DS_RealPaveBlock(self, *args)


    def IsCommonBlockOnEdge(self, *args):
        """
        * Query Returns true if common block contains more then one pave block

        :param thePB:
        :type thePB: Handle_BOPDS_PaveBlock &
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_IsCommonBlockOnEdge(self, *args)


    def FaceInfoPool(self, *args):
        """
        * Selector Returns the information about state of faces

        :rtype: BOPDS_VectorOfFaceInfo

        """
        return _BOPDS.BOPDS_DS_FaceInfoPool(self, *args)


    def HasFaceInfo(self, *args):
        """
        * Query Returns true if the shape with index theIndex has the information about state of face

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasFaceInfo(self, *args)


    def FaceInfo(self, *args):
        """
        * Selector Returns the state of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_FaceInfo

        """
        return _BOPDS.BOPDS_DS_FaceInfo(self, *args)


    def ChangeFaceInfo(self, *args):
        """
        * Selector/Modifier Returns the state of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: BOPDS_FaceInfo

        """
        return _BOPDS.BOPDS_DS_ChangeFaceInfo(self, *args)


    def UpdateFaceInfoIn(self, *args):
        """
        * Update the state In of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdateFaceInfoIn(self, *args)


    def UpdateFaceInfoOn(self, *args):
        """
        * Update the state On of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdateFaceInfoOn(self, *args)


    def FaceInfoOn(self, *args):
        """
        * Selector Returns the state On [theMPB,theMVP] of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :param theMPB:
        :type theMPB: BOPDS_IndexedMapOfPaveBlock &
        :param theMVP:
        :type theMVP: BOPCol_MapOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_FaceInfoOn(self, *args)


    def FaceInfoIn(self, *args):
        """
        * Selector Returns the state In [theMPB,theMVP] of face with index theIndex

        :param theIndex:
        :type theIndex: int
        :param theMPB:
        :type theMPB: BOPDS_IndexedMapOfPaveBlock &
        :param theMVP:
        :type theMVP: BOPCol_MapOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_FaceInfoIn(self, *args)


    def AloneVertices(self, *args):
        """
        * Selector Returns the indices of alone vertices for the face with index theIndex

        :param theF:
        :type theF: int
        :param theLI:
        :type theLI: BOPCol_ListOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_AloneVertices(self, *args)


    def RefineFaceInfoOn(self, *args):
        """
        * Refine the state On for the all faces having state information ++

        :rtype: None

        """
        return _BOPDS.BOPDS_DS_RefineFaceInfoOn(self, *args)


    def VerticesOnIn(self, *args):
        """
        * Returns the indices of vertices and pave blocks that are On/In for the faces with indices theF1, theF2

        :param theF1:
        :type theF1: int
        :param theF2:
        :type theF2: int
        :param theMI:
        :type theMI: BOPCol_MapOfInteger &
        :param aMPB:
        :type aMPB: BOPDS_IndexedMapOfPaveBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_VerticesOnIn(self, *args)


    def SharedEdges(self, *args):
        """
        * Returns the indices of edges that are shared for the faces with indices theF1, theF2 same domain shapes

        :param theF1:
        :type theF1: int
        :param theF2:
        :type theF2: int
        :param theLI:
        :type theLI: BOPCol_ListOfInteger &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_SharedEdges(self, *args)


    def ShapesSD(self, *args):
        """
        * Selector Returns the collection same domain shapes

        :rtype: BOPCol_DataMapOfIntegerInteger

        """
        return _BOPDS.BOPDS_DS_ShapesSD(self, *args)


    def AddShapeSD(self, *args):
        """
        * Modifier Adds the information about same domain shapes with indices theIndex, theIndexSD

        :param theIndex:
        :type theIndex: int
        :param theIndexSD:
        :type theIndexSD: int
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_AddShapeSD(self, *args)


    def HasShapeSD(self, *args):
        """
        * Query Returns true if the shape with index theIndex has the same domain shape. In this case theIndexSD will contain the index of same domain shape found interferences

        :param theIndex:
        :type theIndex: int
        :param theIndexSD:
        :type theIndexSD: int &
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasShapeSD(self, *args)


    def InterfVV(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Vertex/Vertex

        :rtype: BOPDS_VectorOfInterfVV

        """
        return _BOPDS.BOPDS_DS_InterfVV(self, *args)


    def InterfVE(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Vertex/Edge

        :rtype: BOPDS_VectorOfInterfVE

        """
        return _BOPDS.BOPDS_DS_InterfVE(self, *args)


    def InterfVF(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Vertex/Face

        :rtype: BOPDS_VectorOfInterfVF

        """
        return _BOPDS.BOPDS_DS_InterfVF(self, *args)


    def InterfEE(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Edge/Edge

        :rtype: BOPDS_VectorOfInterfEE

        """
        return _BOPDS.BOPDS_DS_InterfEE(self, *args)


    def InterfEF(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Edge/Face

        :rtype: BOPDS_VectorOfInterfEF

        """
        return _BOPDS.BOPDS_DS_InterfEF(self, *args)


    def InterfFF(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Face/Face

        :rtype: BOPDS_VectorOfInterfFF

        """
        return _BOPDS.BOPDS_DS_InterfFF(self, *args)


    def InterfVZ(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Vertex/Solid

        :rtype: BOPDS_VectorOfInterfVZ

        """
        return _BOPDS.BOPDS_DS_InterfVZ(self, *args)


    def InterfEZ(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Edge/Solid

        :rtype: BOPDS_VectorOfInterfEZ

        """
        return _BOPDS.BOPDS_DS_InterfEZ(self, *args)


    def InterfFZ(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Face/Solid

        :rtype: BOPDS_VectorOfInterfFZ

        """
        return _BOPDS.BOPDS_DS_InterfFZ(self, *args)


    def InterfZZ(self, *args):
        """
        * Selector/Modifier Returns the collection of interferences Solid/Solid

        :rtype: BOPDS_VectorOfInterfZZ

        """
        return _BOPDS.BOPDS_DS_InterfZZ(self, *args)


    def NbInterfTypes(*args):
        """
        * Returns the number of types of the interferences

        :rtype: int

        """
        return _BOPDS.BOPDS_DS_NbInterfTypes(*args)

    NbInterfTypes = staticmethod(NbInterfTypes)

    def AddInterf(self, *args):
        """
        * Modifier Adds the information about an interference between shapes with indices theI1, theI2 to the summary table of interferences

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_AddInterf(self, *args)


    def HasInterf(self, *args):
        """
        * Query Returns true if the shape with index theI is interferred

        :param theI:
        :type theI: int
        :rtype: bool

        * Query Returns true if the shapes with indices theI1, theI2 are interferred

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasInterf(self, *args)


    def HasInterfShapeSubShapes(self, *args):
        """
        * Query Returns true if the shape with index theI1 is interfered with any sub-shape of the shape with index theI2 (theFlag=true) all sub-shapes of the shape with index theI2 (theFlag=false)

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :param theFlag: default value is Standard_True
        :type theFlag: bool
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasInterfShapeSubShapes(self, *args)


    def HasInterfSubShapes(self, *args):
        """
        * Query Returns true if the shapes with indices theI1, theI2 have interferred sub-shapes

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_HasInterfSubShapes(self, *args)


    def Interferences(self, *args):
        """
        * Selector Returns the table of interferences debug

        :rtype: BOPDS_MapOfPassKey

        """
        return _BOPDS.BOPDS_DS_Interferences(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_Dump(self, *args)


    def SortPaveBlocks(self, *args):
        """
        :param theCB:
        :type theCB: Handle_BOPDS_CommonBlock &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_SortPaveBlocks(self, *args)


    def IsToSort(self, *args):
        """
        :param theCB:
        :type theCB: Handle_BOPDS_CommonBlock &
        :param theI:
        :type theI: int &
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_IsToSort(self, *args)


    def IsSubShape(self, *args):
        """
        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_DS_IsSubShape(self, *args)


    def Paves(self, *args):
        """
        * Fills theLP with sorted paves of the shape with index theIndex

        :param theIndex:
        :type theIndex: int
        :param theLP:
        :type theLP: BOPDS_ListOfPave &
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_Paves(self, *args)


    def UpdateEdgeTolerance(self, *args):
        """
        * Updates tolerance of the sub-shapes of the shape with index <theIndex>.

        :param theIndex:
        :type theIndex: int
        :param theTolerance:
        :type theTolerance: float
        :rtype: None

        """
        return _BOPDS.BOPDS_DS_UpdateEdgeTolerance(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_DS.Clear = new_instancemethod(_BOPDS.BOPDS_DS_Clear, None, BOPDS_DS)
BOPDS_DS.Allocator = new_instancemethod(_BOPDS.BOPDS_DS_Allocator, None, BOPDS_DS)
BOPDS_DS.SetArguments = new_instancemethod(_BOPDS.BOPDS_DS_SetArguments, None, BOPDS_DS)
BOPDS_DS.Arguments = new_instancemethod(_BOPDS.BOPDS_DS_Arguments, None, BOPDS_DS)
BOPDS_DS.Init = new_instancemethod(_BOPDS.BOPDS_DS_Init, None, BOPDS_DS)
BOPDS_DS.NbShapes = new_instancemethod(_BOPDS.BOPDS_DS_NbShapes, None, BOPDS_DS)
BOPDS_DS.NbSourceShapes = new_instancemethod(_BOPDS.BOPDS_DS_NbSourceShapes, None, BOPDS_DS)
BOPDS_DS.NbRanges = new_instancemethod(_BOPDS.BOPDS_DS_NbRanges, None, BOPDS_DS)
BOPDS_DS.Range = new_instancemethod(_BOPDS.BOPDS_DS_Range, None, BOPDS_DS)
BOPDS_DS.Rank = new_instancemethod(_BOPDS.BOPDS_DS_Rank, None, BOPDS_DS)
BOPDS_DS.IsNewShape = new_instancemethod(_BOPDS.BOPDS_DS_IsNewShape, None, BOPDS_DS)
BOPDS_DS.Append = new_instancemethod(_BOPDS.BOPDS_DS_Append, None, BOPDS_DS)
BOPDS_DS.ShapeInfo = new_instancemethod(_BOPDS.BOPDS_DS_ShapeInfo, None, BOPDS_DS)
BOPDS_DS.ChangeShapeInfo = new_instancemethod(_BOPDS.BOPDS_DS_ChangeShapeInfo, None, BOPDS_DS)
BOPDS_DS.Shape = new_instancemethod(_BOPDS.BOPDS_DS_Shape, None, BOPDS_DS)
BOPDS_DS.Index = new_instancemethod(_BOPDS.BOPDS_DS_Index, None, BOPDS_DS)
BOPDS_DS.PaveBlocksPool = new_instancemethod(_BOPDS.BOPDS_DS_PaveBlocksPool, None, BOPDS_DS)
BOPDS_DS.ChangePaveBlocksPool = new_instancemethod(_BOPDS.BOPDS_DS_ChangePaveBlocksPool, None, BOPDS_DS)
BOPDS_DS.HasPaveBlocks = new_instancemethod(_BOPDS.BOPDS_DS_HasPaveBlocks, None, BOPDS_DS)
BOPDS_DS.PaveBlocks = new_instancemethod(_BOPDS.BOPDS_DS_PaveBlocks, None, BOPDS_DS)
BOPDS_DS.ChangePaveBlocks = new_instancemethod(_BOPDS.BOPDS_DS_ChangePaveBlocks, None, BOPDS_DS)
BOPDS_DS.UpdatePaveBlocks = new_instancemethod(_BOPDS.BOPDS_DS_UpdatePaveBlocks, None, BOPDS_DS)
BOPDS_DS.UpdatePaveBlock = new_instancemethod(_BOPDS.BOPDS_DS_UpdatePaveBlock, None, BOPDS_DS)
BOPDS_DS.UpdateCommonBlock = new_instancemethod(_BOPDS.BOPDS_DS_UpdateCommonBlock, None, BOPDS_DS)
BOPDS_DS.IsCommonBlock = new_instancemethod(_BOPDS.BOPDS_DS_IsCommonBlock, None, BOPDS_DS)
BOPDS_DS.CommonBlock = new_instancemethod(_BOPDS.BOPDS_DS_CommonBlock, None, BOPDS_DS)
BOPDS_DS.SetCommonBlock = new_instancemethod(_BOPDS.BOPDS_DS_SetCommonBlock, None, BOPDS_DS)
BOPDS_DS.RealPaveBlock = new_instancemethod(_BOPDS.BOPDS_DS_RealPaveBlock, None, BOPDS_DS)
BOPDS_DS.IsCommonBlockOnEdge = new_instancemethod(_BOPDS.BOPDS_DS_IsCommonBlockOnEdge, None, BOPDS_DS)
BOPDS_DS.FaceInfoPool = new_instancemethod(_BOPDS.BOPDS_DS_FaceInfoPool, None, BOPDS_DS)
BOPDS_DS.HasFaceInfo = new_instancemethod(_BOPDS.BOPDS_DS_HasFaceInfo, None, BOPDS_DS)
BOPDS_DS.FaceInfo = new_instancemethod(_BOPDS.BOPDS_DS_FaceInfo, None, BOPDS_DS)
BOPDS_DS.ChangeFaceInfo = new_instancemethod(_BOPDS.BOPDS_DS_ChangeFaceInfo, None, BOPDS_DS)
BOPDS_DS.UpdateFaceInfoIn = new_instancemethod(_BOPDS.BOPDS_DS_UpdateFaceInfoIn, None, BOPDS_DS)
BOPDS_DS.UpdateFaceInfoOn = new_instancemethod(_BOPDS.BOPDS_DS_UpdateFaceInfoOn, None, BOPDS_DS)
BOPDS_DS.FaceInfoOn = new_instancemethod(_BOPDS.BOPDS_DS_FaceInfoOn, None, BOPDS_DS)
BOPDS_DS.FaceInfoIn = new_instancemethod(_BOPDS.BOPDS_DS_FaceInfoIn, None, BOPDS_DS)
BOPDS_DS.AloneVertices = new_instancemethod(_BOPDS.BOPDS_DS_AloneVertices, None, BOPDS_DS)
BOPDS_DS.RefineFaceInfoOn = new_instancemethod(_BOPDS.BOPDS_DS_RefineFaceInfoOn, None, BOPDS_DS)
BOPDS_DS.VerticesOnIn = new_instancemethod(_BOPDS.BOPDS_DS_VerticesOnIn, None, BOPDS_DS)
BOPDS_DS.SharedEdges = new_instancemethod(_BOPDS.BOPDS_DS_SharedEdges, None, BOPDS_DS)
BOPDS_DS.ShapesSD = new_instancemethod(_BOPDS.BOPDS_DS_ShapesSD, None, BOPDS_DS)
BOPDS_DS.AddShapeSD = new_instancemethod(_BOPDS.BOPDS_DS_AddShapeSD, None, BOPDS_DS)
BOPDS_DS.HasShapeSD = new_instancemethod(_BOPDS.BOPDS_DS_HasShapeSD, None, BOPDS_DS)
BOPDS_DS.InterfVV = new_instancemethod(_BOPDS.BOPDS_DS_InterfVV, None, BOPDS_DS)
BOPDS_DS.InterfVE = new_instancemethod(_BOPDS.BOPDS_DS_InterfVE, None, BOPDS_DS)
BOPDS_DS.InterfVF = new_instancemethod(_BOPDS.BOPDS_DS_InterfVF, None, BOPDS_DS)
BOPDS_DS.InterfEE = new_instancemethod(_BOPDS.BOPDS_DS_InterfEE, None, BOPDS_DS)
BOPDS_DS.InterfEF = new_instancemethod(_BOPDS.BOPDS_DS_InterfEF, None, BOPDS_DS)
BOPDS_DS.InterfFF = new_instancemethod(_BOPDS.BOPDS_DS_InterfFF, None, BOPDS_DS)
BOPDS_DS.InterfVZ = new_instancemethod(_BOPDS.BOPDS_DS_InterfVZ, None, BOPDS_DS)
BOPDS_DS.InterfEZ = new_instancemethod(_BOPDS.BOPDS_DS_InterfEZ, None, BOPDS_DS)
BOPDS_DS.InterfFZ = new_instancemethod(_BOPDS.BOPDS_DS_InterfFZ, None, BOPDS_DS)
BOPDS_DS.InterfZZ = new_instancemethod(_BOPDS.BOPDS_DS_InterfZZ, None, BOPDS_DS)
BOPDS_DS.AddInterf = new_instancemethod(_BOPDS.BOPDS_DS_AddInterf, None, BOPDS_DS)
BOPDS_DS.HasInterf = new_instancemethod(_BOPDS.BOPDS_DS_HasInterf, None, BOPDS_DS)
BOPDS_DS.HasInterfShapeSubShapes = new_instancemethod(_BOPDS.BOPDS_DS_HasInterfShapeSubShapes, None, BOPDS_DS)
BOPDS_DS.HasInterfSubShapes = new_instancemethod(_BOPDS.BOPDS_DS_HasInterfSubShapes, None, BOPDS_DS)
BOPDS_DS.Interferences = new_instancemethod(_BOPDS.BOPDS_DS_Interferences, None, BOPDS_DS)
BOPDS_DS.Dump = new_instancemethod(_BOPDS.BOPDS_DS_Dump, None, BOPDS_DS)
BOPDS_DS.SortPaveBlocks = new_instancemethod(_BOPDS.BOPDS_DS_SortPaveBlocks, None, BOPDS_DS)
BOPDS_DS.IsToSort = new_instancemethod(_BOPDS.BOPDS_DS_IsToSort, None, BOPDS_DS)
BOPDS_DS.IsSubShape = new_instancemethod(_BOPDS.BOPDS_DS_IsSubShape, None, BOPDS_DS)
BOPDS_DS.Paves = new_instancemethod(_BOPDS.BOPDS_DS_Paves, None, BOPDS_DS)
BOPDS_DS.UpdateEdgeTolerance = new_instancemethod(_BOPDS.BOPDS_DS_UpdateEdgeTolerance, None, BOPDS_DS)
BOPDS_DS._kill_pointed = new_instancemethod(_BOPDS.BOPDS_DS__kill_pointed, None, BOPDS_DS)
BOPDS_DS_swigregister = _BOPDS.BOPDS_DS_swigregister
BOPDS_DS_swigregister(BOPDS_DS)

def BOPDS_DS_NbInterfTypes(*args):
    """
    * Returns the number of types of the interferences

    :rtype: int

    """
    return _BOPDS.BOPDS_DS_NbInterfTypes(*args)

class BOPDS_FaceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_FaceInfo_swiginit(self, _BOPDS.new_BOPDS_FaceInfo(*args))

    def Clear(self, *args):
        """
        * Clears the contents

        :rtype: None

        """
        return _BOPDS.BOPDS_FaceInfo_Clear(self, *args)


    def SetIndex(self, *args):
        """
        * Modifier Sets the index of the face <theI>

        :param theI:
        :type theI: int
        :rtype: None

        """
        return _BOPDS.BOPDS_FaceInfo_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Selector Returns the index of the face In

        :rtype: int

        """
        return _BOPDS.BOPDS_FaceInfo_Index(self, *args)


    def PaveBlocksIn(self, *args):
        """
        * Selector Returns the pave blocks of the face that have state In

        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_PaveBlocksIn(self, *args)


    def ChangePaveBlocksIn(self, *args):
        """
        * Selector/Modifier Returns the pave blocks of the face that have state In

        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_ChangePaveBlocksIn(self, *args)


    def VerticesIn(self, *args):
        """
        * Selector Returns the list of indices for vertices of the face that have state In

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_VerticesIn(self, *args)


    def ChangeVerticesIn(self, *args):
        """
        * Selector/Modifier Returns the list of indices for vertices of the face that have state In On

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_ChangeVerticesIn(self, *args)


    def PaveBlocksOn(self, *args):
        """
        * Selector Returns the pave blocks of the face that have state On

        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_PaveBlocksOn(self, *args)


    def ChangePaveBlocksOn(self, *args):
        """
        * Selector/Modifier Returns the pave blocks of the face that have state On

        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_ChangePaveBlocksOn(self, *args)


    def VerticesOn(self, *args):
        """
        * Selector Returns the list of indices for vertices of the face that have state On

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_VerticesOn(self, *args)


    def ChangeVerticesOn(self, *args):
        """
        * Selector/Modifier Returns the list of indices for vertices of the face that have state On Sections

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_ChangeVerticesOn(self, *args)


    def PaveBlocksSc(self, *args):
        """
        * Selector Returns the pave blocks of the face that are pave blocks of section edges

        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_PaveBlocksSc(self, *args)


    def ChangePaveBlocksSc(self, *args):
        """
        :rtype: BOPDS_IndexedMapOfPaveBlock

        """
        return _BOPDS.BOPDS_FaceInfo_ChangePaveBlocksSc(self, *args)


    def VerticesSc(self, *args):
        """
        * Selector Returns the list of indices for section vertices of the face

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_VerticesSc(self, *args)


    def ChangeVerticesSc(self, *args):
        """
        * Selector/Modifier Returns the list of indices for section vertices of the face Others

        :rtype: BOPCol_MapOfInteger

        """
        return _BOPDS.BOPDS_FaceInfo_ChangeVerticesSc(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_FaceInfo.Clear = new_instancemethod(_BOPDS.BOPDS_FaceInfo_Clear, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.SetIndex = new_instancemethod(_BOPDS.BOPDS_FaceInfo_SetIndex, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.Index = new_instancemethod(_BOPDS.BOPDS_FaceInfo_Index, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.PaveBlocksIn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_PaveBlocksIn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangePaveBlocksIn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangePaveBlocksIn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.VerticesIn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_VerticesIn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangeVerticesIn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangeVerticesIn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.PaveBlocksOn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_PaveBlocksOn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangePaveBlocksOn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangePaveBlocksOn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.VerticesOn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_VerticesOn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangeVerticesOn = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangeVerticesOn, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.PaveBlocksSc = new_instancemethod(_BOPDS.BOPDS_FaceInfo_PaveBlocksSc, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangePaveBlocksSc = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangePaveBlocksSc, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.VerticesSc = new_instancemethod(_BOPDS.BOPDS_FaceInfo_VerticesSc, None, BOPDS_FaceInfo)
BOPDS_FaceInfo.ChangeVerticesSc = new_instancemethod(_BOPDS.BOPDS_FaceInfo_ChangeVerticesSc, None, BOPDS_FaceInfo)
BOPDS_FaceInfo._kill_pointed = new_instancemethod(_BOPDS.BOPDS_FaceInfo__kill_pointed, None, BOPDS_FaceInfo)
BOPDS_FaceInfo_swigregister = _BOPDS.BOPDS_FaceInfo_swigregister
BOPDS_FaceInfo_swigregister(BOPDS_FaceInfo)

class BOPDS_IndexRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        """
        _BOPDS.BOPDS_IndexRange_swiginit(self, _BOPDS.new_BOPDS_IndexRange(*args))

    def SetFirst(self, *args):
        """
        * Modifier Sets the first index <theI1> of the range

        :param theI1:
        :type theI1: int
        :rtype: None

        """
        return _BOPDS.BOPDS_IndexRange_SetFirst(self, *args)


    def SetLast(self, *args):
        """
        * Modifier Sets the second index <theI2> of the range

        :param theI2:
        :type theI2: int
        :rtype: None

        """
        return _BOPDS.BOPDS_IndexRange_SetLast(self, *args)


    def First(self, *args):
        """
        * Selector Returns the first index of the range

        :rtype: int

        """
        return _BOPDS.BOPDS_IndexRange_First(self, *args)


    def Last(self, *args):
        """
        * Selector Returns the second index of the range

        :rtype: int

        """
        return _BOPDS.BOPDS_IndexRange_Last(self, *args)


    def SetIndices(self, *args):
        """
        * Modifier Sets the first index of the range <theI1> Sets the second index of the range <theI2>

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: None

        """
        return _BOPDS.BOPDS_IndexRange_SetIndices(self, *args)


    def Indices(self, *args):
        """
        * Selector Returns the first index of the range <theI1> Returns the second index of the range <theI2>

        :param theI1:
        :type theI1: int &
        :param theI2:
        :type theI2: int &
        :rtype: None

        """
        return _BOPDS.BOPDS_IndexRange_Indices(self, *args)


    def Contains(self, *args):
        """
        * Query Returns true if the range contains <theIndex>

        :param theIndex:
        :type theIndex: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_IndexRange_Contains(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_IndexRange_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_IndexRange.SetFirst = new_instancemethod(_BOPDS.BOPDS_IndexRange_SetFirst, None, BOPDS_IndexRange)
BOPDS_IndexRange.SetLast = new_instancemethod(_BOPDS.BOPDS_IndexRange_SetLast, None, BOPDS_IndexRange)
BOPDS_IndexRange.First = new_instancemethod(_BOPDS.BOPDS_IndexRange_First, None, BOPDS_IndexRange)
BOPDS_IndexRange.Last = new_instancemethod(_BOPDS.BOPDS_IndexRange_Last, None, BOPDS_IndexRange)
BOPDS_IndexRange.SetIndices = new_instancemethod(_BOPDS.BOPDS_IndexRange_SetIndices, None, BOPDS_IndexRange)
BOPDS_IndexRange.Indices = new_instancemethod(_BOPDS.BOPDS_IndexRange_Indices, None, BOPDS_IndexRange)
BOPDS_IndexRange.Contains = new_instancemethod(_BOPDS.BOPDS_IndexRange_Contains, None, BOPDS_IndexRange)
BOPDS_IndexRange.Dump = new_instancemethod(_BOPDS.BOPDS_IndexRange_Dump, None, BOPDS_IndexRange)
BOPDS_IndexRange._kill_pointed = new_instancemethod(_BOPDS.BOPDS_IndexRange__kill_pointed, None, BOPDS_IndexRange)
BOPDS_IndexRange_swigregister = _BOPDS.BOPDS_IndexRange_swigregister
BOPDS_IndexRange_swigregister(BOPDS_IndexRange)

class BOPDS_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_Iterator_swiginit(self, _BOPDS.new_BOPDS_Iterator(*args))

    def SetDS(self, *args):
        """
        * Modifier Sets the data structure <pDS> to process

        :param pDS:
        :type pDS: BOPDS_PDS &
        :rtype: None

        """
        return _BOPDS.BOPDS_Iterator_SetDS(self, *args)


    def DS(self, *args):
        """
        * Selector Returns the data structure

        :rtype: BOPDS_DS

        """
        return _BOPDS.BOPDS_Iterator_DS(self, *args)


    def Initialize(self, *args):
        """
        * Initializes the iterator theType1 - the first type of shape theType2 - the second type of shape

        :param theType1:
        :type theType1: TopAbs_ShapeEnum
        :param theType2:
        :type theType2: TopAbs_ShapeEnum
        :rtype: None

        """
        return _BOPDS.BOPDS_Iterator_Initialize(self, *args)


    def More(self, *args):
        """
        * Returns true if still there are pairs of intersected shapes

        :rtype: bool

        """
        return _BOPDS.BOPDS_Iterator_More(self, *args)


    def Next(self, *args):
        """
        * Moves iterations ahead

        :rtype: None

        """
        return _BOPDS.BOPDS_Iterator_Next(self, *args)


    def Value(self, *args):
        """
        * Returns indices (DS) of intersected shapes theIndex1 - the index of the first shape theIndex2 - the index of the second shape theWithSubShape - flag. True if the sub-shapes of shapes are intersected

        :param theIndex1:
        :type theIndex1: int &
        :param theIndex2:
        :type theIndex2: int &
        :param theWithSubShape:
        :type theWithSubShape: bool
        :rtype: None

        """
        return _BOPDS.BOPDS_Iterator_Value(self, *args)


    def Prepare(self, *args):
        """
        * Perform the intersection algorithm and prepare the results to be used

        :rtype: void

        """
        return _BOPDS.BOPDS_Iterator_Prepare(self, *args)


    def ExpectedLength(self, *args):
        """
        * Returns the number of intersections founded

        :rtype: int

        """
        return _BOPDS.BOPDS_Iterator_ExpectedLength(self, *args)


    def BlockLength(self, *args):
        """
        * Returns the block length

        :rtype: int

        """
        return _BOPDS.BOPDS_Iterator_BlockLength(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_Iterator.SetDS = new_instancemethod(_BOPDS.BOPDS_Iterator_SetDS, None, BOPDS_Iterator)
BOPDS_Iterator.DS = new_instancemethod(_BOPDS.BOPDS_Iterator_DS, None, BOPDS_Iterator)
BOPDS_Iterator.Initialize = new_instancemethod(_BOPDS.BOPDS_Iterator_Initialize, None, BOPDS_Iterator)
BOPDS_Iterator.More = new_instancemethod(_BOPDS.BOPDS_Iterator_More, None, BOPDS_Iterator)
BOPDS_Iterator.Next = new_instancemethod(_BOPDS.BOPDS_Iterator_Next, None, BOPDS_Iterator)
BOPDS_Iterator.Value = new_instancemethod(_BOPDS.BOPDS_Iterator_Value, None, BOPDS_Iterator)
BOPDS_Iterator.Prepare = new_instancemethod(_BOPDS.BOPDS_Iterator_Prepare, None, BOPDS_Iterator)
BOPDS_Iterator.ExpectedLength = new_instancemethod(_BOPDS.BOPDS_Iterator_ExpectedLength, None, BOPDS_Iterator)
BOPDS_Iterator.BlockLength = new_instancemethod(_BOPDS.BOPDS_Iterator_BlockLength, None, BOPDS_Iterator)
BOPDS_Iterator._kill_pointed = new_instancemethod(_BOPDS.BOPDS_Iterator__kill_pointed, None, BOPDS_Iterator)
BOPDS_Iterator_swigregister = _BOPDS.BOPDS_Iterator_swigregister
BOPDS_Iterator_swigregister(BOPDS_Iterator)

class BOPDS_PassKey(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        * Copy Contructor

        :param Other:
        :type Other: BOPDS_PassKey &
        :rtype: None

        """
        _BOPDS.BOPDS_PassKey_swiginit(self, _BOPDS.new_BOPDS_PassKey(*args))

    def Set(self, *args):
        """
        :param Other:
        :type Other: BOPDS_PassKey &
        :rtype: BOPDS_PassKey

        """
        return _BOPDS.BOPDS_PassKey_Set(self, *args)


    def Clear(self, *args):
        """
        * Clear the contents

        :rtype: None

        """
        return _BOPDS.BOPDS_PassKey_Clear(self, *args)


    def SetIds(self, *args):
        """
        * Modifier Sets one Id <theI1>

        :param theI1:
        :type theI1: int
        :rtype: None

        * Modifier Sets two Id <theI1>,<theI2>

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :rtype: None

        * Modifier Sets three Id <theI1>,<theI2>,<theI3>

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :param theI3:
        :type theI3: int
        :rtype: None

        * Modifier Sets four Id <theI1>,<theI2>,<theI3>,<theI4>

        :param theI1:
        :type theI1: int
        :param theI2:
        :type theI2: int
        :param theI3:
        :type theI3: int
        :param theI4:
        :type theI4: int
        :rtype: None

        * Modifier Sets the list of Id <theLI>

        :param theLI:
        :type theLI: BOPCol_ListOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_PassKey_SetIds(self, *args)


    def NbIds(self, *args):
        """
        * Selector Returns the number of Ids>

        :rtype: int

        """
        return _BOPDS.BOPDS_PassKey_NbIds(self, *args)


    def IsEqual(self, *args):
        """
        * Query Returns true if the PassKey is equal to <the theOther>

        :param theOther:
        :type theOther: BOPDS_PassKey &
        :rtype: bool

        """
        return _BOPDS.BOPDS_PassKey_IsEqual(self, *args)


    def HashCode(self, *args):
        """
        * Query Returns hash code

        :param theUpper:
        :type theUpper: int
        :rtype: int

        """
        return _BOPDS.BOPDS_PassKey_HashCode(self, *args)


    def Id(self, *args):
        """
        * Selector Returns Id of index <theIndex>

        :param theIndex:
        :type theIndex: int
        :rtype: int

        """
        return _BOPDS.BOPDS_PassKey_Id(self, *args)


    def Ids(self, *args):
        """
        * Selector Returns the first two Ids <theI1>,<theI2>

        :param theI1:
        :type theI1: int &
        :param theI2:
        :type theI2: int &
        :rtype: None

        """
        return _BOPDS.BOPDS_PassKey_Ids(self, *args)


    def Dump(self, *args):
        """
        :param aHex: default value is 0
        :type aHex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_PassKey_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_PassKey.Set = new_instancemethod(_BOPDS.BOPDS_PassKey_Set, None, BOPDS_PassKey)
BOPDS_PassKey.Clear = new_instancemethod(_BOPDS.BOPDS_PassKey_Clear, None, BOPDS_PassKey)
BOPDS_PassKey.SetIds = new_instancemethod(_BOPDS.BOPDS_PassKey_SetIds, None, BOPDS_PassKey)
BOPDS_PassKey.NbIds = new_instancemethod(_BOPDS.BOPDS_PassKey_NbIds, None, BOPDS_PassKey)
BOPDS_PassKey.IsEqual = new_instancemethod(_BOPDS.BOPDS_PassKey_IsEqual, None, BOPDS_PassKey)
BOPDS_PassKey.HashCode = new_instancemethod(_BOPDS.BOPDS_PassKey_HashCode, None, BOPDS_PassKey)
BOPDS_PassKey.__hash__ = new_instancemethod(_BOPDS.BOPDS_PassKey___hash__, None, BOPDS_PassKey)
BOPDS_PassKey.Id = new_instancemethod(_BOPDS.BOPDS_PassKey_Id, None, BOPDS_PassKey)
BOPDS_PassKey.Ids = new_instancemethod(_BOPDS.BOPDS_PassKey_Ids, None, BOPDS_PassKey)
BOPDS_PassKey.Dump = new_instancemethod(_BOPDS.BOPDS_PassKey_Dump, None, BOPDS_PassKey)
BOPDS_PassKey._kill_pointed = new_instancemethod(_BOPDS.BOPDS_PassKey__kill_pointed, None, BOPDS_PassKey)
BOPDS_PassKey_swigregister = _BOPDS.BOPDS_PassKey_swigregister
BOPDS_PassKey_swigregister(BOPDS_PassKey)

class BOPDS_PassKeyMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param aPKey:
        :type aPKey: BOPDS_PassKey &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BOPDS.BOPDS_PassKeyMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param aPKey1:
        :type aPKey1: BOPDS_PassKey &
        :param aPKey2:
        :type aPKey2: BOPDS_PassKey &
        :rtype: bool

        """
        return _BOPDS.BOPDS_PassKeyMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BOPDS.BOPDS_PassKeyMapHasher_swiginit(self, _BOPDS.new_BOPDS_PassKeyMapHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_PassKeyMapHasher._kill_pointed = new_instancemethod(_BOPDS.BOPDS_PassKeyMapHasher__kill_pointed, None, BOPDS_PassKeyMapHasher)
BOPDS_PassKeyMapHasher_swigregister = _BOPDS.BOPDS_PassKeyMapHasher_swigregister
BOPDS_PassKeyMapHasher_swigregister(BOPDS_PassKeyMapHasher)

def BOPDS_PassKeyMapHasher_HashCode(*args):
    """
    :param aPKey:
    :type aPKey: BOPDS_PassKey &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BOPDS.BOPDS_PassKeyMapHasher_HashCode(*args)

def BOPDS_PassKeyMapHasher_IsEqual(*args):
    """
    :param aPKey1:
    :type aPKey1: BOPDS_PassKey &
    :param aPKey2:
    :type aPKey2: BOPDS_PassKey &
    :rtype: bool

    """
    return _BOPDS.BOPDS_PassKeyMapHasher_IsEqual(*args)

class BOPDS_Pave(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        """
        _BOPDS.BOPDS_Pave_swiginit(self, _BOPDS.new_BOPDS_Pave(*args))

    def SetIndex(self, *args):
        """
        * Modifier Sets the index of vertex <theIndex>

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_Pave_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Selector Returns the index of vertex

        :rtype: int

        """
        return _BOPDS.BOPDS_Pave_Index(self, *args)


    def SetParameter(self, *args):
        """
        * Modifier Sets the parameter of vertex <theParameter>

        :param theParameter:
        :type theParameter: float
        :rtype: None

        """
        return _BOPDS.BOPDS_Pave_SetParameter(self, *args)


    def Parameter(self, *args):
        """
        * Selector Returns the parameter of vertex

        :rtype: float

        """
        return _BOPDS.BOPDS_Pave_Parameter(self, *args)


    def Contents(self, *args):
        """
        * Selector Returns the index of vertex <theIndex> Returns the parameter of vertex <theParameter>

        :param theIndex:
        :type theIndex: int &
        :param theParameter:
        :type theParameter: float &
        :rtype: None

        """
        return _BOPDS.BOPDS_Pave_Contents(self, *args)


    def IsLess(self, *args):
        """
        * Query Returns true if thr parameter od this is less than the parameter of <theOther>

        :param theOther:
        :type theOther: BOPDS_Pave &
        :rtype: bool

        """
        return _BOPDS.BOPDS_Pave_IsLess(self, *args)


    def __lt__(self, *args):
        """
        :param theOther:
        :type theOther: BOPDS_Pave &
        :rtype: bool

        """
        return _BOPDS.BOPDS_Pave___lt__(self, *args)


    def IsEqual(self, *args):
        """
        * Query Returns true if thr parameter od this is equal to the parameter of <theOther>

        :param theOther:
        :type theOther: BOPDS_Pave &
        :rtype: bool

        """
        return _BOPDS.BOPDS_Pave_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_Pave_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_Pave.SetIndex = new_instancemethod(_BOPDS.BOPDS_Pave_SetIndex, None, BOPDS_Pave)
BOPDS_Pave.Index = new_instancemethod(_BOPDS.BOPDS_Pave_Index, None, BOPDS_Pave)
BOPDS_Pave.SetParameter = new_instancemethod(_BOPDS.BOPDS_Pave_SetParameter, None, BOPDS_Pave)
BOPDS_Pave.Parameter = new_instancemethod(_BOPDS.BOPDS_Pave_Parameter, None, BOPDS_Pave)
BOPDS_Pave.Contents = new_instancemethod(_BOPDS.BOPDS_Pave_Contents, None, BOPDS_Pave)
BOPDS_Pave.IsLess = new_instancemethod(_BOPDS.BOPDS_Pave_IsLess, None, BOPDS_Pave)
BOPDS_Pave.__lt__ = new_instancemethod(_BOPDS.BOPDS_Pave___lt__, None, BOPDS_Pave)
BOPDS_Pave.IsEqual = new_instancemethod(_BOPDS.BOPDS_Pave_IsEqual, None, BOPDS_Pave)
BOPDS_Pave.__eq_wrapper__ = new_instancemethod(_BOPDS.BOPDS_Pave___eq_wrapper__, None, BOPDS_Pave)
BOPDS_Pave.Dump = new_instancemethod(_BOPDS.BOPDS_Pave_Dump, None, BOPDS_Pave)
BOPDS_Pave._kill_pointed = new_instancemethod(_BOPDS.BOPDS_Pave__kill_pointed, None, BOPDS_Pave)
BOPDS_Pave_swigregister = _BOPDS.BOPDS_Pave_swigregister
BOPDS_Pave_swigregister(BOPDS_Pave)

class BOPDS_PaveBlock(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor <theAllocator> - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_PaveBlock_swiginit(self, _BOPDS.new_BOPDS_PaveBlock(*args))

    def SetPave1(self, *args):
        """
        * Modifier Sets the first pave <thePave>

        :param thePave:
        :type thePave: BOPDS_Pave &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_SetPave1(self, *args)


    def Pave1(self, *args):
        """
        * Selector Returns the first pave

        :rtype: BOPDS_Pave

        """
        return _BOPDS.BOPDS_PaveBlock_Pave1(self, *args)


    def SetPave2(self, *args):
        """
        * Modifier Sets the second pave <thePave>

        :param thePave:
        :type thePave: BOPDS_Pave &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_SetPave2(self, *args)


    def Pave2(self, *args):
        """
        * Selector Returns the second pave

        :rtype: BOPDS_Pave

        """
        return _BOPDS.BOPDS_PaveBlock_Pave2(self, *args)


    def SetEdge(self, *args):
        """
        * Modifier Sets the index of edge of pave block <theEdge>

        :param theEdge:
        :type theEdge: int
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_SetEdge(self, *args)


    def Edge(self, *args):
        """
        * Selector Returns the index of edge of pave block

        :rtype: int

        """
        return _BOPDS.BOPDS_PaveBlock_Edge(self, *args)


    def HasEdge(self, *args):
        """
        * Query Returns true if the pave block has edge

        :rtype: bool

        * Query Returns true if the pave block has edge Returns the index of edge <theEdge>

        :param theEdge:
        :type theEdge: int &
        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_HasEdge(self, *args)


    def SetOriginalEdge(self, *args):
        """
        * Modifier Sets the index of original edge of the pave block <theEdge>

        :param theEdge:
        :type theEdge: int
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_SetOriginalEdge(self, *args)


    def OriginalEdge(self, *args):
        """
        * Selector Returns the index of original edge of pave block

        :rtype: int

        """
        return _BOPDS.BOPDS_PaveBlock_OriginalEdge(self, *args)


    def IsSplitEdge(self, *args):
        """
        * Query Returns true if the edge is equal to the original edge of the pave block

        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_IsSplitEdge(self, *args)


    def Range(self, *args):
        """
        * Selector Returns the parametric range <theT1,theT2> of the pave block

        :param theT1:
        :type theT1: float &
        :param theT2:
        :type theT2: float &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_Range(self, *args)


    def HasSameBounds(self, *args):
        """
        * Query Returns true if the pave block has pave indices that equal to the pave indices of the pave block <theOther>

        :param theOther:
        :type theOther: Handle_BOPDS_PaveBlock &
        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_HasSameBounds(self, *args)


    def Indices(self, *args):
        """
        * Selector Returns the pave indices <theIndex1,theIndex2> of the pave block

        :param theIndex1:
        :type theIndex1: int &
        :param theIndex2:
        :type theIndex2: int &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_Indices(self, *args)


    def IsToUpdate(self, *args):
        """
        * Query Returns true if the pave block contains extra paves

        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_IsToUpdate(self, *args)


    def AppendExtPave(self, *args):
        """
        * Modifier Appends extra paves <theLP>

        :param theLP:
        :type theLP: BOPDS_Pave &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_AppendExtPave(self, *args)


    def AppendExtPave1(self, *args):
        """
        * Modifier Appends extra pave <thePave>

        :param thePave:
        :type thePave: BOPDS_Pave &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_AppendExtPave1(self, *args)


    def ExtPaves(self, *args):
        """
        * Selector Returns the extra paves

        :rtype: BOPDS_ListOfPave

        """
        return _BOPDS.BOPDS_PaveBlock_ExtPaves(self, *args)


    def ChangeExtPaves(self, *args):
        """
        * Selector / Modifier Returns the extra paves

        :rtype: BOPDS_ListOfPave

        """
        return _BOPDS.BOPDS_PaveBlock_ChangeExtPaves(self, *args)


    def Update(self, *args):
        """
        * Modifier Updates the pave block. The extra paves are used to create new pave blocks <theLPB>. <theFlag> - if true, the first pave and the second pave are used to produce new pave blocks.

        :param theLPB:
        :type theLPB: BOPDS_ListOfPaveBlock &
        :param theFlag: default value is Standard_True
        :type theFlag: bool
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_Update(self, *args)


    def ContainsParameter(self, *args):
        """
        * Query Returns true if the extra paves contain the pave with given value of the parameter <thePrm> <theTol> - the value of the tolerance to compare

        :param thePrm:
        :type thePrm: float
        :param theTol:
        :type theTol: float
        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_ContainsParameter(self, *args)


    def SetShrunkData(self, *args):
        """
        * Modifier Sets the shrunk data for the pave block <theTS1>, <theTS2> - shrunk range <theBox> - the bounding box

        :param theTS1:
        :type theTS1: float
        :param theTS2:
        :type theTS2: float
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_SetShrunkData(self, *args)


    def ShrunkData(self, *args):
        """
        * Selector Returns the shrunk data for the pave block <theTS1>, <theTS2> - shrunk range <theBox> - the bounding box

        :param theTS1:
        :type theTS1: float &
        :param theTS2:
        :type theTS2: float &
        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_ShrunkData(self, *args)


    def HasShrunkData(self, *args):
        """
        * Query Returns true if the pave block contains the shrunk data

        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveBlock_HasShrunkData(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_PaveBlock_Dump(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BOPDS_PaveBlock self)"""
        return _BOPDS.BOPDS_PaveBlock__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BOPDS_PaveBlock self) -> Handle_BOPDS_PaveBlock"""
        return _BOPDS.BOPDS_PaveBlock_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_PaveBlock.SetPave1 = new_instancemethod(_BOPDS.BOPDS_PaveBlock_SetPave1, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Pave1 = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Pave1, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.SetPave2 = new_instancemethod(_BOPDS.BOPDS_PaveBlock_SetPave2, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Pave2 = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Pave2, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.SetEdge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_SetEdge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Edge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Edge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.HasEdge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_HasEdge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.SetOriginalEdge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_SetOriginalEdge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.OriginalEdge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_OriginalEdge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.IsSplitEdge = new_instancemethod(_BOPDS.BOPDS_PaveBlock_IsSplitEdge, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Range = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Range, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.HasSameBounds = new_instancemethod(_BOPDS.BOPDS_PaveBlock_HasSameBounds, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Indices = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Indices, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.IsToUpdate = new_instancemethod(_BOPDS.BOPDS_PaveBlock_IsToUpdate, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.AppendExtPave = new_instancemethod(_BOPDS.BOPDS_PaveBlock_AppendExtPave, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.AppendExtPave1 = new_instancemethod(_BOPDS.BOPDS_PaveBlock_AppendExtPave1, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.ExtPaves = new_instancemethod(_BOPDS.BOPDS_PaveBlock_ExtPaves, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.ChangeExtPaves = new_instancemethod(_BOPDS.BOPDS_PaveBlock_ChangeExtPaves, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Update = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Update, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.ContainsParameter = new_instancemethod(_BOPDS.BOPDS_PaveBlock_ContainsParameter, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.SetShrunkData = new_instancemethod(_BOPDS.BOPDS_PaveBlock_SetShrunkData, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.ShrunkData = new_instancemethod(_BOPDS.BOPDS_PaveBlock_ShrunkData, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.HasShrunkData = new_instancemethod(_BOPDS.BOPDS_PaveBlock_HasShrunkData, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.Dump = new_instancemethod(_BOPDS.BOPDS_PaveBlock_Dump, None, BOPDS_PaveBlock)
BOPDS_PaveBlock._kill_pointed = new_instancemethod(_BOPDS.BOPDS_PaveBlock__kill_pointed, None, BOPDS_PaveBlock)
BOPDS_PaveBlock.GetHandle = new_instancemethod(_BOPDS.BOPDS_PaveBlock_GetHandle, None, BOPDS_PaveBlock)
BOPDS_PaveBlock_swigregister = _BOPDS.BOPDS_PaveBlock_swigregister
BOPDS_PaveBlock_swigregister(BOPDS_PaveBlock)

class Handle_BOPDS_PaveBlock(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPDS.Handle_BOPDS_PaveBlock_swiginit(self, _BOPDS.new_Handle_BOPDS_PaveBlock(*args))
    DownCast = staticmethod(_BOPDS.Handle_BOPDS_PaveBlock_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BOPDS_PaveBlock.Nullify = new_instancemethod(_BOPDS.Handle_BOPDS_PaveBlock_Nullify, None, Handle_BOPDS_PaveBlock)
Handle_BOPDS_PaveBlock.IsNull = new_instancemethod(_BOPDS.Handle_BOPDS_PaveBlock_IsNull, None, Handle_BOPDS_PaveBlock)
Handle_BOPDS_PaveBlock.GetObject = new_instancemethod(_BOPDS.Handle_BOPDS_PaveBlock_GetObject, None, Handle_BOPDS_PaveBlock)
Handle_BOPDS_PaveBlock._kill_pointed = new_instancemethod(_BOPDS.Handle_BOPDS_PaveBlock__kill_pointed, None, Handle_BOPDS_PaveBlock)
Handle_BOPDS_PaveBlock_swigregister = _BOPDS.Handle_BOPDS_PaveBlock_swigregister
Handle_BOPDS_PaveBlock_swigregister(Handle_BOPDS_PaveBlock)

def Handle_BOPDS_PaveBlock_DownCast(AnObject):
    return _BOPDS.Handle_BOPDS_PaveBlock_DownCast(AnObject)
Handle_BOPDS_PaveBlock_DownCast = _BOPDS.Handle_BOPDS_PaveBlock_DownCast

class BOPDS_PaveMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param aPave:
        :type aPave: BOPDS_Pave &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _BOPDS.BOPDS_PaveMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param aPave1:
        :type aPave1: BOPDS_Pave &
        :param aPave2:
        :type aPave2: BOPDS_Pave &
        :rtype: bool

        """
        return _BOPDS.BOPDS_PaveMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _BOPDS.BOPDS_PaveMapHasher_swiginit(self, _BOPDS.new_BOPDS_PaveMapHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_PaveMapHasher._kill_pointed = new_instancemethod(_BOPDS.BOPDS_PaveMapHasher__kill_pointed, None, BOPDS_PaveMapHasher)
BOPDS_PaveMapHasher_swigregister = _BOPDS.BOPDS_PaveMapHasher_swigregister
BOPDS_PaveMapHasher_swigregister(BOPDS_PaveMapHasher)

def BOPDS_PaveMapHasher_HashCode(*args):
    """
    :param aPave:
    :type aPave: BOPDS_Pave &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _BOPDS.BOPDS_PaveMapHasher_HashCode(*args)

def BOPDS_PaveMapHasher_IsEqual(*args):
    """
    :param aPave1:
    :type aPave1: BOPDS_Pave &
    :param aPave2:
    :type aPave2: BOPDS_Pave &
    :rtype: bool

    """
    return _BOPDS.BOPDS_PaveMapHasher_IsEqual(*args)

class BOPDS_Point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        """
        _BOPDS.BOPDS_Point_swiginit(self, _BOPDS.new_BOPDS_Point(*args))

    def SetPnt(self, *args):
        """
        * Modifier Sets 3D point <thePnt>

        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: None

        """
        return _BOPDS.BOPDS_Point_SetPnt(self, *args)


    def Pnt(self, *args):
        """
        * Selector Returns 3D point

        :rtype: gp_Pnt

        """
        return _BOPDS.BOPDS_Point_Pnt(self, *args)


    def SetPnt2D1(self, *args):
        """
        * Modifier Sets 2D point on the first face <thePnt>

        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: None

        """
        return _BOPDS.BOPDS_Point_SetPnt2D1(self, *args)


    def Pnt2D1(self, *args):
        """
        * Selector Returns 2D point on the first face <thePnt>

        :rtype: gp_Pnt2d

        """
        return _BOPDS.BOPDS_Point_Pnt2D1(self, *args)


    def SetPnt2D2(self, *args):
        """
        * Modifier Sets 2D point on the second face <thePnt>

        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: None

        """
        return _BOPDS.BOPDS_Point_SetPnt2D2(self, *args)


    def Pnt2D2(self, *args):
        """
        * Selector Returns 2D point on the second face <thePnt>

        :rtype: gp_Pnt2d

        """
        return _BOPDS.BOPDS_Point_Pnt2D2(self, *args)


    def SetIndex(self, *args):
        """
        * Modifier Sets the index of the vertex <theIndex>

        :param theIndex:
        :type theIndex: int
        :rtype: None

        """
        return _BOPDS.BOPDS_Point_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Selector Returns index of the vertex

        :rtype: int

        """
        return _BOPDS.BOPDS_Point_Index(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_Point.SetPnt = new_instancemethod(_BOPDS.BOPDS_Point_SetPnt, None, BOPDS_Point)
BOPDS_Point.Pnt = new_instancemethod(_BOPDS.BOPDS_Point_Pnt, None, BOPDS_Point)
BOPDS_Point.SetPnt2D1 = new_instancemethod(_BOPDS.BOPDS_Point_SetPnt2D1, None, BOPDS_Point)
BOPDS_Point.Pnt2D1 = new_instancemethod(_BOPDS.BOPDS_Point_Pnt2D1, None, BOPDS_Point)
BOPDS_Point.SetPnt2D2 = new_instancemethod(_BOPDS.BOPDS_Point_SetPnt2D2, None, BOPDS_Point)
BOPDS_Point.Pnt2D2 = new_instancemethod(_BOPDS.BOPDS_Point_Pnt2D2, None, BOPDS_Point)
BOPDS_Point.SetIndex = new_instancemethod(_BOPDS.BOPDS_Point_SetIndex, None, BOPDS_Point)
BOPDS_Point.Index = new_instancemethod(_BOPDS.BOPDS_Point_Index, None, BOPDS_Point)
BOPDS_Point._kill_pointed = new_instancemethod(_BOPDS.BOPDS_Point__kill_pointed, None, BOPDS_Point)
BOPDS_Point_swigregister = _BOPDS.BOPDS_Point_swigregister
BOPDS_Point_swigregister(BOPDS_Point)

class BOPDS_ShapeInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_ShapeInfo_swiginit(self, _BOPDS.new_BOPDS_ShapeInfo(*args))

    def SetShape(self, *args):
        """
        * Modifier Sets the shape <theS>

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_SetShape(self, *args)


    def Shape(self, *args):
        """
        * Selector Returns the shape

        :rtype: TopoDS_Shape

        """
        return _BOPDS.BOPDS_ShapeInfo_Shape(self, *args)


    def SetShapeType(self, *args):
        """
        * Modifier Sets the type of shape theType

        :param theType:
        :type theType: TopAbs_ShapeEnum
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_SetShapeType(self, *args)


    def ShapeType(self, *args):
        """
        * Selector Returns the type of shape

        :rtype: TopAbs_ShapeEnum

        """
        return _BOPDS.BOPDS_ShapeInfo_ShapeType(self, *args)


    def SetBox(self, *args):
        """
        * Modifier Sets the boundung box of the shape theBox

        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_SetBox(self, *args)


    def Box(self, *args):
        """
        * Selector Returns the boundung box of the shape

        :rtype: Bnd_Box

        """
        return _BOPDS.BOPDS_ShapeInfo_Box(self, *args)


    def ChangeBox(self, *args):
        """
        * Selector/Modifier Returns the boundung box of the shape

        :rtype: Bnd_Box

        """
        return _BOPDS.BOPDS_ShapeInfo_ChangeBox(self, *args)


    def SubShapes(self, *args):
        """
        * Selector Returns the list of indices of sub-shapes

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_ShapeInfo_SubShapes(self, *args)


    def ChangeSubShapes(self, *args):
        """
        * Selector/ Modifier Returns the list of indices of sub-shapes

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_ShapeInfo_ChangeSubShapes(self, *args)


    def HasSubShape(self, *args):
        """
        * Query Returns true if the shape has sub-shape with index theI

        :param theI:
        :type theI: int
        :rtype: bool

        """
        return _BOPDS.BOPDS_ShapeInfo_HasSubShape(self, *args)


    def HasReference(self, *args):
        """
        :rtype: bool

        """
        return _BOPDS.BOPDS_ShapeInfo_HasReference(self, *args)


    def SetReference(self, *args):
        """
        * Modifier Sets the index of a reference information

        :param theI:
        :type theI: int
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_SetReference(self, *args)


    def Reference(self, *args):
        """
        * Selector Returns the index of a reference information

        :rtype: int

        """
        return _BOPDS.BOPDS_ShapeInfo_Reference(self, *args)


    def HasBRep(self, *args):
        """
        * Query Returns true if the shape has boundary representation

        :rtype: bool

        """
        return _BOPDS.BOPDS_ShapeInfo_HasBRep(self, *args)


    def IsInterfering(self, *args):
        """
        * Returns true if the shape can be participant of an interference Flag

        :rtype: bool

        """
        return _BOPDS.BOPDS_ShapeInfo_IsInterfering(self, *args)


    def HasFlag(self, *args):
        """
        * Query Returns true if there is flag.

        :rtype: bool

        * Query Returns true if there is flag. Returns the the flag theFlag

        :param theFlag:
        :type theFlag: int &
        :rtype: bool

        """
        return _BOPDS.BOPDS_ShapeInfo_HasFlag(self, *args)


    def SetFlag(self, *args):
        """
        * Modifier Sets the flag

        :param theI:
        :type theI: int
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_SetFlag(self, *args)


    def Flag(self, *args):
        """
        * Returns the flag

        :rtype: int

        """
        return _BOPDS.BOPDS_ShapeInfo_Flag(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _BOPDS.BOPDS_ShapeInfo_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_ShapeInfo.SetShape = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SetShape, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.Shape = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_Shape, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.SetShapeType = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SetShapeType, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.ShapeType = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_ShapeType, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.SetBox = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SetBox, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.Box = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_Box, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.ChangeBox = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_ChangeBox, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.SubShapes = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SubShapes, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.ChangeSubShapes = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_ChangeSubShapes, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.HasSubShape = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_HasSubShape, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.HasReference = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_HasReference, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.SetReference = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SetReference, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.Reference = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_Reference, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.HasBRep = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_HasBRep, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.IsInterfering = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_IsInterfering, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.HasFlag = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_HasFlag, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.SetFlag = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_SetFlag, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.Flag = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_Flag, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo.Dump = new_instancemethod(_BOPDS.BOPDS_ShapeInfo_Dump, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo._kill_pointed = new_instancemethod(_BOPDS.BOPDS_ShapeInfo__kill_pointed, None, BOPDS_ShapeInfo)
BOPDS_ShapeInfo_swigregister = _BOPDS.BOPDS_ShapeInfo_swigregister
BOPDS_ShapeInfo_swigregister(BOPDS_ShapeInfo)

class BOPDS_SubIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_SubIterator_swiginit(self, _BOPDS.new_BOPDS_SubIterator(*args))

    def SetDS(self, *args):
        """
        * Modifier Sets the data structure <pDS> to process

        :param pDS:
        :type pDS: BOPDS_PDS &
        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_SetDS(self, *args)


    def DS(self, *args):
        """
        * Selector Returns the data structure

        :rtype: BOPDS_DS

        """
        return _BOPDS.BOPDS_SubIterator_DS(self, *args)


    def SetSubSet1(self, *args):
        """
        * Modifier Sets the first set of indices <theLI> to process

        :param theLI:
        :type theLI: BOPCol_ListOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_SetSubSet1(self, *args)


    def SubSet1(self, *args):
        """
        * Selector Returns the first set of indices to process

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_SubIterator_SubSet1(self, *args)


    def SetSubSet2(self, *args):
        """
        * Modifier Sets the second set of indices <theLI> to process

        :param theLI:
        :type theLI: BOPCol_ListOfInteger &
        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_SetSubSet2(self, *args)


    def SubSet2(self, *args):
        """
        * Selector Returns the second set of indices to process

        :rtype: BOPCol_ListOfInteger

        """
        return _BOPDS.BOPDS_SubIterator_SubSet2(self, *args)


    def Initialize(self, *args):
        """
        * Initializes the iterator

        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_Initialize(self, *args)


    def More(self, *args):
        """
        * Returns true if still there are pairs of intersected shapes

        :rtype: bool

        """
        return _BOPDS.BOPDS_SubIterator_More(self, *args)


    def Next(self, *args):
        """
        * Moves iterations ahead

        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_Next(self, *args)


    def Value(self, *args):
        """
        * Returns indices (DS) of intersected shapes theIndex1 - the index of the first shape theIndex2 - the index of the second shape

        :param theIndex1:
        :type theIndex1: int &
        :param theIndex2:
        :type theIndex2: int &
        :rtype: None

        """
        return _BOPDS.BOPDS_SubIterator_Value(self, *args)


    def Prepare(self, *args):
        """
        * Perform the intersection algorithm and prepare the results to be used

        :rtype: void

        """
        return _BOPDS.BOPDS_SubIterator_Prepare(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_SubIterator.SetDS = new_instancemethod(_BOPDS.BOPDS_SubIterator_SetDS, None, BOPDS_SubIterator)
BOPDS_SubIterator.DS = new_instancemethod(_BOPDS.BOPDS_SubIterator_DS, None, BOPDS_SubIterator)
BOPDS_SubIterator.SetSubSet1 = new_instancemethod(_BOPDS.BOPDS_SubIterator_SetSubSet1, None, BOPDS_SubIterator)
BOPDS_SubIterator.SubSet1 = new_instancemethod(_BOPDS.BOPDS_SubIterator_SubSet1, None, BOPDS_SubIterator)
BOPDS_SubIterator.SetSubSet2 = new_instancemethod(_BOPDS.BOPDS_SubIterator_SetSubSet2, None, BOPDS_SubIterator)
BOPDS_SubIterator.SubSet2 = new_instancemethod(_BOPDS.BOPDS_SubIterator_SubSet2, None, BOPDS_SubIterator)
BOPDS_SubIterator.Initialize = new_instancemethod(_BOPDS.BOPDS_SubIterator_Initialize, None, BOPDS_SubIterator)
BOPDS_SubIterator.More = new_instancemethod(_BOPDS.BOPDS_SubIterator_More, None, BOPDS_SubIterator)
BOPDS_SubIterator.Next = new_instancemethod(_BOPDS.BOPDS_SubIterator_Next, None, BOPDS_SubIterator)
BOPDS_SubIterator.Value = new_instancemethod(_BOPDS.BOPDS_SubIterator_Value, None, BOPDS_SubIterator)
BOPDS_SubIterator.Prepare = new_instancemethod(_BOPDS.BOPDS_SubIterator_Prepare, None, BOPDS_SubIterator)
BOPDS_SubIterator._kill_pointed = new_instancemethod(_BOPDS.BOPDS_SubIterator__kill_pointed, None, BOPDS_SubIterator)
BOPDS_SubIterator_swigregister = _BOPDS.BOPDS_SubIterator_swigregister
BOPDS_SubIterator_swigregister(BOPDS_SubIterator)

class BOPDS_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def TypeToInteger(*args):
        """
        * Converts the conmbination of two types of shape <theT1>,<theT2> to the one integer value, that is returned

        :param theT1:
        :type theT1: TopAbs_ShapeEnum
        :param theT2:
        :type theT2: TopAbs_ShapeEnum
        :rtype: int

        * Converts the type of shape <theT>, to integer value, that is returned

        :param theT:
        :type theT: TopAbs_ShapeEnum
        :rtype: int

        """
        return _BOPDS.BOPDS_Tools_TypeToInteger(*args)

    TypeToInteger = staticmethod(TypeToInteger)

    def HasBRep(*args):
        """
        * Returns true if the type <theT> correspond to a shape having boundary representation

        :param theT:
        :type theT: TopAbs_ShapeEnum
        :rtype: bool

        """
        return _BOPDS.BOPDS_Tools_HasBRep(*args)

    HasBRep = staticmethod(HasBRep)

    def IsInterfering(*args):
        """
        * Returns true if the type <theT> can be participant of an interference

        :param theT:
        :type theT: TopAbs_ShapeEnum
        :rtype: bool

        """
        return _BOPDS.BOPDS_Tools_IsInterfering(*args)

    IsInterfering = staticmethod(IsInterfering)

    def __init__(self):
        _BOPDS.BOPDS_Tools_swiginit(self, _BOPDS.new_BOPDS_Tools())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_Tools._kill_pointed = new_instancemethod(_BOPDS.BOPDS_Tools__kill_pointed, None, BOPDS_Tools)
BOPDS_Tools_swigregister = _BOPDS.BOPDS_Tools_swigregister
BOPDS_Tools_swigregister(BOPDS_Tools)

def BOPDS_Tools_TypeToInteger(*args):
    """
    * Converts the conmbination of two types of shape <theT1>,<theT2> to the one integer value, that is returned

    :param theT1:
    :type theT1: TopAbs_ShapeEnum
    :param theT2:
    :type theT2: TopAbs_ShapeEnum
    :rtype: int

    * Converts the type of shape <theT>, to integer value, that is returned

    :param theT:
    :type theT: TopAbs_ShapeEnum
    :rtype: int

    """
    return _BOPDS.BOPDS_Tools_TypeToInteger(*args)

def BOPDS_Tools_HasBRep(*args):
    """
    * Returns true if the type <theT> correspond to a shape having boundary representation

    :param theT:
    :type theT: TopAbs_ShapeEnum
    :rtype: bool

    """
    return _BOPDS.BOPDS_Tools_HasBRep(*args)

def BOPDS_Tools_IsInterfering(*args):
    """
    * Returns true if the type <theT> can be participant of an interference

    :param theT:
    :type theT: TopAbs_ShapeEnum
    :rtype: bool

    """
    return _BOPDS.BOPDS_Tools_IsInterfering(*args)

class BOPDS_InterfEE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfEE_swiginit(self, _BOPDS.new_BOPDS_InterfEE(*args))

    def SetCommonPart(self, *args):
        """
        * /** * Modifier * Sets the info of common part * @param theCP * common part */

        :param theCP:
        :type theCP: IntTools_CommonPrt &
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfEE_SetCommonPart(self, *args)


    def CommonPart(self, *args):
        """
        * /** * Selector * Returns the info of common part * returns * common part */

        :rtype: IntTools_CommonPrt

        """
        return _BOPDS.BOPDS_InterfEE_CommonPart(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfEE.SetCommonPart = new_instancemethod(_BOPDS.BOPDS_InterfEE_SetCommonPart, None, BOPDS_InterfEE)
BOPDS_InterfEE.CommonPart = new_instancemethod(_BOPDS.BOPDS_InterfEE_CommonPart, None, BOPDS_InterfEE)
BOPDS_InterfEE._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfEE__kill_pointed, None, BOPDS_InterfEE)
BOPDS_InterfEE_swigregister = _BOPDS.BOPDS_InterfEE_swigregister
BOPDS_InterfEE_swigregister(BOPDS_InterfEE)

class BOPDS_InterfEF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory *//** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfEF_swiginit(self, _BOPDS.new_BOPDS_InterfEF(*args))

    def SetCommonPart(self, *args):
        """
        * /** * Modifier * Sets the info of common part * @param theCP * common part */

        :param theCP:
        :type theCP: IntTools_CommonPrt &
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfEF_SetCommonPart(self, *args)


    def CommonPart(self, *args):
        """
        * /** * Selector * Returns the info of common part * returns * common part */

        :rtype: IntTools_CommonPrt

        """
        return _BOPDS.BOPDS_InterfEF_CommonPart(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfEF.SetCommonPart = new_instancemethod(_BOPDS.BOPDS_InterfEF_SetCommonPart, None, BOPDS_InterfEF)
BOPDS_InterfEF.CommonPart = new_instancemethod(_BOPDS.BOPDS_InterfEF_CommonPart, None, BOPDS_InterfEF)
BOPDS_InterfEF._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfEF__kill_pointed, None, BOPDS_InterfEF)
BOPDS_InterfEF_swigregister = _BOPDS.BOPDS_InterfEF_swigregister
BOPDS_InterfEF_swigregister(BOPDS_InterfEF)

class BOPDS_InterfEZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfEZ_swiginit(self, _BOPDS.new_BOPDS_InterfEZ(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfEZ._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfEZ__kill_pointed, None, BOPDS_InterfEZ)
BOPDS_InterfEZ_swigregister = _BOPDS.BOPDS_InterfEZ_swigregister
BOPDS_InterfEZ_swigregister(BOPDS_InterfEZ)

class BOPDS_InterfFF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        """
        _BOPDS.BOPDS_InterfFF_swiginit(self, _BOPDS.new_BOPDS_InterfFF(*args))

    def Init(self, *args):
        """
        * /** * Initializer * @param theNbCurves * number of intersection curves * @param theNbPoints * number of intersection points */

        :param theNbCurves:
        :type theNbCurves: int
        :param theNbPoints:
        :type theNbPoints: int
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfFF_Init(self, *args)


    def SetTangentFaces(self, *args):
        """
        * /** * Modifier * Sets the flag of whether the faces are tangent * @param theFlag * the flag */

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfFF_SetTangentFaces(self, *args)


    def TangentFaces(self, *args):
        """
        * /** * Selector * Returns the flag whether the faces are tangent * returns * the flag */

        :rtype: bool

        """
        return _BOPDS.BOPDS_InterfFF_TangentFaces(self, *args)


    def SetTolR3D(self, *args):
        """
        * /** * Modifier * Sets the value of 3D tolerance * @param theTol * 3D tolerance */

        :param theTol:
        :type theTol: float
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfFF_SetTolR3D(self, *args)


    def TolR3D(self, *args):
        """
        * /** * Selector * Returns the value of 3D tolerance * returns * 3D tolerance */

        :rtype: float

        """
        return _BOPDS.BOPDS_InterfFF_TolR3D(self, *args)


    def SetTolR2D(self, *args):
        """
        * /** * Modifier * Sets the value of 2D tolerance * @param theTol * 2D tolerance */

        :param theTol:
        :type theTol: float
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfFF_SetTolR2D(self, *args)


    def TolR2D(self, *args):
        """
        * /** * Selector * Returns the value of 2D tolerance * returns * 2D tolerance */

        :rtype: float

        """
        return _BOPDS.BOPDS_InterfFF_TolR2D(self, *args)


    def Curves(self, *args):
        """
        * /** * Selector * Returns the intersection curves * returns * intersection curves */

        :rtype: BOPDS_VectorOfCurve

        """
        return _BOPDS.BOPDS_InterfFF_Curves(self, *args)


    def ChangeCurves(self, *args):
        """
        * /** * Selector/Modifier * Returns the intersection curves * returns * intersection curves */

        :rtype: BOPDS_VectorOfCurve

        """
        return _BOPDS.BOPDS_InterfFF_ChangeCurves(self, *args)


    def Points(self, *args):
        """
        * /** * Selector * Returns the intersection points * returns * intersection points */

        :rtype: BOPDS_VectorOfPoint

        """
        return _BOPDS.BOPDS_InterfFF_Points(self, *args)


    def ChangePoints(self, *args):
        """
        * /** * Selector/Modifier * Returns the intersection points * returns * intersection points */

        :rtype: BOPDS_VectorOfPoint

        """
        return _BOPDS.BOPDS_InterfFF_ChangePoints(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfFF.Init = new_instancemethod(_BOPDS.BOPDS_InterfFF_Init, None, BOPDS_InterfFF)
BOPDS_InterfFF.SetTangentFaces = new_instancemethod(_BOPDS.BOPDS_InterfFF_SetTangentFaces, None, BOPDS_InterfFF)
BOPDS_InterfFF.TangentFaces = new_instancemethod(_BOPDS.BOPDS_InterfFF_TangentFaces, None, BOPDS_InterfFF)
BOPDS_InterfFF.SetTolR3D = new_instancemethod(_BOPDS.BOPDS_InterfFF_SetTolR3D, None, BOPDS_InterfFF)
BOPDS_InterfFF.TolR3D = new_instancemethod(_BOPDS.BOPDS_InterfFF_TolR3D, None, BOPDS_InterfFF)
BOPDS_InterfFF.SetTolR2D = new_instancemethod(_BOPDS.BOPDS_InterfFF_SetTolR2D, None, BOPDS_InterfFF)
BOPDS_InterfFF.TolR2D = new_instancemethod(_BOPDS.BOPDS_InterfFF_TolR2D, None, BOPDS_InterfFF)
BOPDS_InterfFF.Curves = new_instancemethod(_BOPDS.BOPDS_InterfFF_Curves, None, BOPDS_InterfFF)
BOPDS_InterfFF.ChangeCurves = new_instancemethod(_BOPDS.BOPDS_InterfFF_ChangeCurves, None, BOPDS_InterfFF)
BOPDS_InterfFF.Points = new_instancemethod(_BOPDS.BOPDS_InterfFF_Points, None, BOPDS_InterfFF)
BOPDS_InterfFF.ChangePoints = new_instancemethod(_BOPDS.BOPDS_InterfFF_ChangePoints, None, BOPDS_InterfFF)
BOPDS_InterfFF._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfFF__kill_pointed, None, BOPDS_InterfFF)
BOPDS_InterfFF_swigregister = _BOPDS.BOPDS_InterfFF_swigregister
BOPDS_InterfFF_swigregister(BOPDS_InterfFF)

class BOPDS_InterfFZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfFZ_swiginit(self, _BOPDS.new_BOPDS_InterfFZ(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfFZ._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfFZ__kill_pointed, None, BOPDS_InterfFZ)
BOPDS_InterfFZ_swigregister = _BOPDS.BOPDS_InterfFZ_swigregister
BOPDS_InterfFZ_swigregister(BOPDS_InterfFZ)

class BOPDS_InterfVE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfVE_swiginit(self, _BOPDS.new_BOPDS_InterfVE(*args))

    def SetParameter(self, *args):
        """
        * /** * Modifier * Sets the value of parameter * of the point of the vertex * on the curve of the edge * @param theT * value of parameter */

        :param theT:
        :type theT: float
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfVE_SetParameter(self, *args)


    def Parameter(self, *args):
        """
        * /** * Selector * Returrns the value of parameter * of the point of the vertex * on the curve of the edge * returns * value of parameter */

        :rtype: float

        """
        return _BOPDS.BOPDS_InterfVE_Parameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfVE.SetParameter = new_instancemethod(_BOPDS.BOPDS_InterfVE_SetParameter, None, BOPDS_InterfVE)
BOPDS_InterfVE.Parameter = new_instancemethod(_BOPDS.BOPDS_InterfVE_Parameter, None, BOPDS_InterfVE)
BOPDS_InterfVE._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfVE__kill_pointed, None, BOPDS_InterfVE)
BOPDS_InterfVE_swigregister = _BOPDS.BOPDS_InterfVE_swigregister
BOPDS_InterfVE_swigregister(BOPDS_InterfVE)

class BOPDS_InterfVF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfVF_swiginit(self, _BOPDS.new_BOPDS_InterfVF(*args))

    def SetUV(self, *args):
        """
        * /** * Modifier * Sets the value of parameters * of the point of the vertex * on the surface of of the face * @param theU * value of U parameter * @param theV * value of U parameter */

        :param theU:
        :type theU: float
        :param theV:
        :type theV: float
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfVF_SetUV(self, *args)


    def UV(self, *args):
        """
        * /** * Selector * Returns the value of parameters * of the point of the vertex * on the surface of of the face * @param theU * value of U parameter * @param theV * value of U parameter */

        :param theU:
        :type theU: float &
        :param theV:
        :type theV: float &
        :rtype: None

        """
        return _BOPDS.BOPDS_InterfVF_UV(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfVF.SetUV = new_instancemethod(_BOPDS.BOPDS_InterfVF_SetUV, None, BOPDS_InterfVF)
BOPDS_InterfVF.UV = new_instancemethod(_BOPDS.BOPDS_InterfVF_UV, None, BOPDS_InterfVF)
BOPDS_InterfVF._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfVF__kill_pointed, None, BOPDS_InterfVF)
BOPDS_InterfVF_swigregister = _BOPDS.BOPDS_InterfVF_swigregister
BOPDS_InterfVF_swigregister(BOPDS_InterfVF)

class BOPDS_InterfVV(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfVV_swiginit(self, _BOPDS.new_BOPDS_InterfVV(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfVV._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfVV__kill_pointed, None, BOPDS_InterfVV)
BOPDS_InterfVV_swigregister = _BOPDS.BOPDS_InterfVV_swigregister
BOPDS_InterfVV_swigregister(BOPDS_InterfVV)

class BOPDS_InterfVZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfVZ_swiginit(self, _BOPDS.new_BOPDS_InterfVZ(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfVZ._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfVZ__kill_pointed, None, BOPDS_InterfVZ)
BOPDS_InterfVZ_swigregister = _BOPDS.BOPDS_InterfVZ_swigregister
BOPDS_InterfVZ_swigregister(BOPDS_InterfVZ)

class BOPDS_InterfZZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */

        :rtype: None

        * /** * Constructor * @param theAllocator * allocator to manage the memory */

        :param theAllocator:
        :type theAllocator: Handle_NCollection_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_InterfZZ_swiginit(self, _BOPDS.new_BOPDS_InterfZZ(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_InterfZZ._kill_pointed = new_instancemethod(_BOPDS.BOPDS_InterfZZ__kill_pointed, None, BOPDS_InterfZZ)
BOPDS_InterfZZ_swigregister = _BOPDS.BOPDS_InterfZZ_swigregister
BOPDS_InterfZZ_swigregister(BOPDS_InterfZZ)

class BOPDS_IteratorSI(BOPDS_Iterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor

        :rtype: None

        * Contructor theAllocator - the allocator to manage the memory

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPDS.BOPDS_IteratorSI_swiginit(self, _BOPDS.new_BOPDS_IteratorSI(*args))

    def UpdateByLevelOfCheck(self, *args):
        """
        * Updates the lists of possible intersections according to the value of <theLevel>. It defines which interferferences will be checked: 0 - only V/V; 1 - V/V and V/E; 2 - V/V, V/E and E/E; 3 - V/V, V/E, E/E and V/F; 4 - V/V, V/E, E/E, V/F and E/F; other - all interferences.

        :param theLevel:
        :type theLevel: int
        :rtype: None

        """
        return _BOPDS.BOPDS_IteratorSI_UpdateByLevelOfCheck(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_IteratorSI.UpdateByLevelOfCheck = new_instancemethod(_BOPDS.BOPDS_IteratorSI_UpdateByLevelOfCheck, None, BOPDS_IteratorSI)
BOPDS_IteratorSI._kill_pointed = new_instancemethod(_BOPDS.BOPDS_IteratorSI__kill_pointed, None, BOPDS_IteratorSI)
BOPDS_IteratorSI_swigregister = _BOPDS.BOPDS_IteratorSI_swigregister
BOPDS_IteratorSI_swigregister(BOPDS_IteratorSI)

class BOPDS_PassKeyBoolean(BOPDS_PassKey):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        :param Other:
        :type Other: BOPDS_PassKeyBoolean &
        :rtype: None

        """
        _BOPDS.BOPDS_PassKeyBoolean_swiginit(self, _BOPDS.new_BOPDS_PassKeyBoolean(*args))

    def SetFlag(self, *args):
        """
        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BOPDS.BOPDS_PassKeyBoolean_SetFlag(self, *args)


    def Set(self, *args):
        """
        :param &:
        :type &: BOPDS_PassKeyBoolean
        :rtype: BOPDS_PassKeyBoolean

        """
        return _BOPDS.BOPDS_PassKeyBoolean_Set(self, *args)


    def Flag(self, *args):
        """
        :rtype: bool

        """
        return _BOPDS.BOPDS_PassKeyBoolean_Flag(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BOPDS_PassKeyBoolean.SetFlag = new_instancemethod(_BOPDS.BOPDS_PassKeyBoolean_SetFlag, None, BOPDS_PassKeyBoolean)
BOPDS_PassKeyBoolean.Set = new_instancemethod(_BOPDS.BOPDS_PassKeyBoolean_Set, None, BOPDS_PassKeyBoolean)
BOPDS_PassKeyBoolean.Flag = new_instancemethod(_BOPDS.BOPDS_PassKeyBoolean_Flag, None, BOPDS_PassKeyBoolean)
BOPDS_PassKeyBoolean._kill_pointed = new_instancemethod(_BOPDS.BOPDS_PassKeyBoolean__kill_pointed, None, BOPDS_PassKeyBoolean)
BOPDS_PassKeyBoolean_swigregister = _BOPDS.BOPDS_PassKeyBoolean_swigregister
BOPDS_PassKeyBoolean_swigregister(BOPDS_PassKeyBoolean)



