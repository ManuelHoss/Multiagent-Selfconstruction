# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StlMesh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StlMesh', [dirname(__file__)])
        except ImportError:
            import _StlMesh
            return _StlMesh
        if fp is not None:
            try:
                _mod = imp.load_module('_StlMesh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StlMesh = swig_import_helper()
    del swig_import_helper
else:
    import _StlMesh
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StlMesh.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StlMesh.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StlMesh.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StlMesh.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StlMesh.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StlMesh.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StlMesh.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StlMesh.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StlMesh.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StlMesh.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StlMesh.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StlMesh.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StlMesh.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StlMesh.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StlMesh.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StlMesh.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StlMesh.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StlMesh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TColgp
import OCC.TCollection
class stlmesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Merge(*args):
        """
        * Sequence of meshes Make a merge of two Mesh and returns a new Mesh. Very useful if you want to merge partMesh and CheckSurfaceMesh for example

        :param mesh1:
        :type mesh1: Handle_StlMesh_Mesh &
        :param mesh2:
        :type mesh2: Handle_StlMesh_Mesh &
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.stlmesh_Merge(*args)

    Merge = staticmethod(Merge)

    def __init__(self):
        _StlMesh.stlmesh_swiginit(self, _StlMesh.new_stlmesh())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


stlmesh._kill_pointed = new_instancemethod(_StlMesh.stlmesh__kill_pointed, None, stlmesh)
stlmesh_swigregister = _StlMesh.stlmesh_swigregister
stlmesh_swigregister(stlmesh)

def stlmesh_Merge(*args):
    """
    * Sequence of meshes Make a merge of two Mesh and returns a new Mesh. Very useful if you want to merge partMesh and CheckSurfaceMesh for example

    :param mesh1:
    :type mesh1: Handle_StlMesh_Mesh &
    :param mesh2:
    :type mesh2: Handle_StlMesh_Mesh &
    :rtype: Handle_StlMesh_Mesh

    """
    return _StlMesh.stlmesh_Merge(*args)

class StlMesh_Mesh(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty mesh.

        :rtype: None

        """
        _StlMesh.StlMesh_Mesh_swiginit(self, _StlMesh.new_StlMesh_Mesh(*args))

    def AddDomain(self, *args):
        """
        * Adds a new mesh domain. The mesh deflection is defaulted to Confusion from package Precision.

        :rtype: void

        * Adds a new mesh domain. Raised if the deflection is lower than zero Raised if the deflection is lower than Confusion from package Precision

        :param Deflection:
        :type Deflection: float
        :rtype: void

        """
        return _StlMesh.StlMesh_Mesh_AddDomain(self, *args)


    def AddTriangle(self, *args):
        """
        * Build a triangle with the triplet of vertices (V1, V2, V3). This triplet defines the indexes of the vertex in the current domain The coordinates Xn, Yn, Zn defines the normal direction to the triangle. Returns the range of the triangle in the current domain.

        :param V1:
        :type V1: int
        :param V2:
        :type V2: int
        :param V3:
        :type V3: int
        :param Xn:
        :type Xn: float
        :param Yn:
        :type Yn: float
        :param Zn:
        :type Zn: float
        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_AddTriangle(self, *args)


    def AddVertex(self, *args):
        """
        * Returns the range of the vertex in the current domain.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_AddVertex(self, *args)


    def AddOnlyNewVertex(self, *args):
        """
        * Returns the range of the vertex in the current domain. The current vertex is not inserted in the mesh if it already exist.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_AddOnlyNewVertex(self, *args)


    def Bounds(self, *args):
        """
        * Each vertex of the mesh verifies the following relations : XYZMin.X() <= X <= XYZMax.X() XYZMin.Y() <= Y <= XYZMax.y() XYZMin.Z() <= Z <= XYZMax.Z()

        :param XYZmax:
        :type XYZmax: gp_XYZ
        :param XYZmin:
        :type XYZmin: gp_XYZ
        :rtype: void

        """
        return _StlMesh.StlMesh_Mesh_Bounds(self, *args)


    def Clear(self, *args):
        """
        :rtype: void

        """
        return _StlMesh.StlMesh_Mesh_Clear(self, *args)


    def Deflection(self, *args):
        """
        * Returns the deflection of the mesh of the domain of range <DomainIndex>. Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex:
        :type DomainIndex: int
        :rtype: float

        """
        return _StlMesh.StlMesh_Mesh_Deflection(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _StlMesh.StlMesh_Mesh_IsEmpty(self, *args)


    def NbDomains(self, *args):
        """
        * Number of domains in the mesh.

        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_NbDomains(self, *args)


    def NbTriangles(self, *args):
        """
        * Cumulative Number of triangles in the mesh.

        :rtype: int

        * Number of triangles in the domain of range <DomainIndex>. Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex:
        :type DomainIndex: int
        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_NbTriangles(self, *args)


    def NbVertices(self, *args):
        """
        * Cumulative Number of vertices in the mesh.

        :rtype: int

        * Number of vertices in the domain of range <DomainIndex>. Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex:
        :type DomainIndex: int
        :rtype: int

        """
        return _StlMesh.StlMesh_Mesh_NbVertices(self, *args)


    def Triangles(self, *args):
        """
        * Returns the set of triangle of the mesh domain of range <DomainIndex>. Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex: default value is 1
        :type DomainIndex: int
        :rtype: StlMesh_SequenceOfMeshTriangle

        """
        return _StlMesh.StlMesh_Mesh_Triangles(self, *args)


    def Vertices(self, *args):
        """
        * Returns the coordinates of the vertices of the mesh domain of range <DomainIndex>. {XV1, YV1, ZV1, XV2, YV2, ZV2, XV3,.....} Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex: default value is 1
        :type DomainIndex: int
        :rtype: TColgp_SequenceOfXYZ

        """
        return _StlMesh.StlMesh_Mesh_Vertices(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_Mesh self)"""
        return _StlMesh.StlMesh_Mesh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_Mesh self) -> Handle_StlMesh_Mesh"""
        return _StlMesh.StlMesh_Mesh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_Mesh.AddDomain = new_instancemethod(_StlMesh.StlMesh_Mesh_AddDomain, None, StlMesh_Mesh)
StlMesh_Mesh.AddTriangle = new_instancemethod(_StlMesh.StlMesh_Mesh_AddTriangle, None, StlMesh_Mesh)
StlMesh_Mesh.AddVertex = new_instancemethod(_StlMesh.StlMesh_Mesh_AddVertex, None, StlMesh_Mesh)
StlMesh_Mesh.AddOnlyNewVertex = new_instancemethod(_StlMesh.StlMesh_Mesh_AddOnlyNewVertex, None, StlMesh_Mesh)
StlMesh_Mesh.Bounds = new_instancemethod(_StlMesh.StlMesh_Mesh_Bounds, None, StlMesh_Mesh)
StlMesh_Mesh.Clear = new_instancemethod(_StlMesh.StlMesh_Mesh_Clear, None, StlMesh_Mesh)
StlMesh_Mesh.Deflection = new_instancemethod(_StlMesh.StlMesh_Mesh_Deflection, None, StlMesh_Mesh)
StlMesh_Mesh.IsEmpty = new_instancemethod(_StlMesh.StlMesh_Mesh_IsEmpty, None, StlMesh_Mesh)
StlMesh_Mesh.NbDomains = new_instancemethod(_StlMesh.StlMesh_Mesh_NbDomains, None, StlMesh_Mesh)
StlMesh_Mesh.NbTriangles = new_instancemethod(_StlMesh.StlMesh_Mesh_NbTriangles, None, StlMesh_Mesh)
StlMesh_Mesh.NbVertices = new_instancemethod(_StlMesh.StlMesh_Mesh_NbVertices, None, StlMesh_Mesh)
StlMesh_Mesh.Triangles = new_instancemethod(_StlMesh.StlMesh_Mesh_Triangles, None, StlMesh_Mesh)
StlMesh_Mesh.Vertices = new_instancemethod(_StlMesh.StlMesh_Mesh_Vertices, None, StlMesh_Mesh)
StlMesh_Mesh._kill_pointed = new_instancemethod(_StlMesh.StlMesh_Mesh__kill_pointed, None, StlMesh_Mesh)
StlMesh_Mesh.GetHandle = new_instancemethod(_StlMesh.StlMesh_Mesh_GetHandle, None, StlMesh_Mesh)
StlMesh_Mesh_swigregister = _StlMesh.StlMesh_Mesh_swigregister
StlMesh_Mesh_swigregister(StlMesh_Mesh)

class Handle_StlMesh_Mesh(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_Mesh_swiginit(self, _StlMesh.new_Handle_StlMesh_Mesh(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_Mesh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_Mesh.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_Mesh_Nullify, None, Handle_StlMesh_Mesh)
Handle_StlMesh_Mesh.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_Mesh_IsNull, None, Handle_StlMesh_Mesh)
Handle_StlMesh_Mesh.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_Mesh_GetObject, None, Handle_StlMesh_Mesh)
Handle_StlMesh_Mesh._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_Mesh__kill_pointed, None, Handle_StlMesh_Mesh)
Handle_StlMesh_Mesh_swigregister = _StlMesh.Handle_StlMesh_Mesh_swigregister
Handle_StlMesh_Mesh_swigregister(Handle_StlMesh_Mesh)

def Handle_StlMesh_Mesh_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_Mesh_DownCast(AnObject)
Handle_StlMesh_Mesh_DownCast = _StlMesh.Handle_StlMesh_Mesh_DownCast

class StlMesh_MeshDomain(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * The mesh deflection is defaulted to Confusion from package Precision.

        :rtype: None

        * Raised if the deflection is lower than zero Raised if the deflection is lower than Confusion from package Precision

        :param Deflection:
        :type Deflection: float
        :rtype: None

        """
        _StlMesh.StlMesh_MeshDomain_swiginit(self, _StlMesh.new_StlMesh_MeshDomain(*args))

    def AddTriangle(self, *args):
        """
        * Build a triangle with the triplet of vertices (V1, V2, V3). This triplet defines the indexes of the vertex in the current domain The coordinates Xn, Yn, Zn defines the normal direction to the triangle. Returns the range of the triangle in the current domain.

        :param V1:
        :type V1: int
        :param V2:
        :type V2: int
        :param V3:
        :type V3: int
        :param Xn:
        :type Xn: float
        :param Yn:
        :type Yn: float
        :param Zn:
        :type Zn: float
        :rtype: int

        """
        return _StlMesh.StlMesh_MeshDomain_AddTriangle(self, *args)


    def AddVertex(self, *args):
        """
        * Returns the range of the vertex in the current domain.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: int

        """
        return _StlMesh.StlMesh_MeshDomain_AddVertex(self, *args)


    def AddOnlyNewVertex(self, *args):
        """
        * Returns the range of the vertex in the current domain. The current vertex is not inserted in the mesh if it already exist.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :param IsNew:
        :type IsNew: bool
        :rtype: int

        """
        return _StlMesh.StlMesh_MeshDomain_AddOnlyNewVertex(self, *args)


    def Deflection(self, *args):
        """
        :rtype: float

        """
        return _StlMesh.StlMesh_MeshDomain_Deflection(self, *args)


    def NbTriangles(self, *args):
        """
        * Number of triangles in the mesh.

        :rtype: int

        """
        return _StlMesh.StlMesh_MeshDomain_NbTriangles(self, *args)


    def NbVertices(self, *args):
        """
        * Number of vertices in the mesh.

        :rtype: int

        """
        return _StlMesh.StlMesh_MeshDomain_NbVertices(self, *args)


    def Triangles(self, *args):
        """
        * Returns the set of triangles of the current mesh domain

        :rtype: StlMesh_SequenceOfMeshTriangle

        """
        return _StlMesh.StlMesh_MeshDomain_Triangles(self, *args)


    def Vertices(self, *args):
        """
        * Returns the coordinates of the vertices of the mesh domain of range <DomainIndex>. {XV1, YV1, ZV1, XV2, YV2, ZV2, XV3,.....}

        :rtype: TColgp_SequenceOfXYZ

        """
        return _StlMesh.StlMesh_MeshDomain_Vertices(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_MeshDomain self)"""
        return _StlMesh.StlMesh_MeshDomain__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_MeshDomain self) -> Handle_StlMesh_MeshDomain"""
        return _StlMesh.StlMesh_MeshDomain_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_MeshDomain.AddTriangle = new_instancemethod(_StlMesh.StlMesh_MeshDomain_AddTriangle, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.AddVertex = new_instancemethod(_StlMesh.StlMesh_MeshDomain_AddVertex, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.AddOnlyNewVertex = new_instancemethod(_StlMesh.StlMesh_MeshDomain_AddOnlyNewVertex, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.Deflection = new_instancemethod(_StlMesh.StlMesh_MeshDomain_Deflection, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.NbTriangles = new_instancemethod(_StlMesh.StlMesh_MeshDomain_NbTriangles, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.NbVertices = new_instancemethod(_StlMesh.StlMesh_MeshDomain_NbVertices, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.Triangles = new_instancemethod(_StlMesh.StlMesh_MeshDomain_Triangles, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.Vertices = new_instancemethod(_StlMesh.StlMesh_MeshDomain_Vertices, None, StlMesh_MeshDomain)
StlMesh_MeshDomain._kill_pointed = new_instancemethod(_StlMesh.StlMesh_MeshDomain__kill_pointed, None, StlMesh_MeshDomain)
StlMesh_MeshDomain.GetHandle = new_instancemethod(_StlMesh.StlMesh_MeshDomain_GetHandle, None, StlMesh_MeshDomain)
StlMesh_MeshDomain_swigregister = _StlMesh.StlMesh_MeshDomain_swigregister
StlMesh_MeshDomain_swigregister(StlMesh_MeshDomain)

class Handle_StlMesh_MeshDomain(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_MeshDomain_swiginit(self, _StlMesh.new_Handle_StlMesh_MeshDomain(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_MeshDomain_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_MeshDomain.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_MeshDomain_Nullify, None, Handle_StlMesh_MeshDomain)
Handle_StlMesh_MeshDomain.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_MeshDomain_IsNull, None, Handle_StlMesh_MeshDomain)
Handle_StlMesh_MeshDomain.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_MeshDomain_GetObject, None, Handle_StlMesh_MeshDomain)
Handle_StlMesh_MeshDomain._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_MeshDomain__kill_pointed, None, Handle_StlMesh_MeshDomain)
Handle_StlMesh_MeshDomain_swigregister = _StlMesh.Handle_StlMesh_MeshDomain_swigregister
Handle_StlMesh_MeshDomain_swigregister(Handle_StlMesh_MeshDomain)

def Handle_StlMesh_MeshDomain_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_MeshDomain_DownCast(AnObject)
Handle_StlMesh_MeshDomain_DownCast = _StlMesh.Handle_StlMesh_MeshDomain_DownCast

class StlMesh_MeshExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param M:
        :type M: Handle_StlMesh_Mesh &
        :rtype: None

        """
        _StlMesh.StlMesh_MeshExplorer_swiginit(self, _StlMesh.new_StlMesh_MeshExplorer(*args))

    def Deflection(self, *args):
        """
        * Returns the mesh deflection of the current domain.

        :rtype: float

        """
        return _StlMesh.StlMesh_MeshExplorer_Deflection(self, *args)


    def InitTriangle(self, *args):
        """
        * Initializes the exploration of the triangles of the mesh domain of range <DomainIndex>. Raised if <DomainIndex> is lower than 1 or greater than the number of domains.

        :param DomainIndex: default value is 1
        :type DomainIndex: int
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshExplorer_InitTriangle(self, *args)


    def MoreTriangle(self, *args):
        """
        :rtype: bool

        """
        return _StlMesh.StlMesh_MeshExplorer_MoreTriangle(self, *args)


    def NextTriangle(self, *args):
        """
        * Raised if there is no more triangle in the current domain.

        :rtype: None

        """
        return _StlMesh.StlMesh_MeshExplorer_NextTriangle(self, *args)


    def TriangleVertices(self, *args):
        """
        * Raised if there is no more triangle in the current domain.

        :param X1:
        :type X1: float &
        :param Y1:
        :type Y1: float &
        :param Z1:
        :type Z1: float &
        :param X2:
        :type X2: float &
        :param Y2:
        :type Y2: float &
        :param Z2:
        :type Z2: float &
        :param X3:
        :type X3: float &
        :param Y3:
        :type Y3: float &
        :param Z3:
        :type Z3: float &
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshExplorer_TriangleVertices(self, *args)


    def TriangleOrientation(self, *args):
        """
        * Raised if there is no more triangle in the current domain.

        :param Xn:
        :type Xn: float &
        :param Yn:
        :type Yn: float &
        :param Zn:
        :type Zn: float &
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshExplorer_TriangleOrientation(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_MeshExplorer.Deflection = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_Deflection, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer.InitTriangle = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_InitTriangle, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer.MoreTriangle = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_MoreTriangle, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer.NextTriangle = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_NextTriangle, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer.TriangleVertices = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_TriangleVertices, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer.TriangleOrientation = new_instancemethod(_StlMesh.StlMesh_MeshExplorer_TriangleOrientation, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer._kill_pointed = new_instancemethod(_StlMesh.StlMesh_MeshExplorer__kill_pointed, None, StlMesh_MeshExplorer)
StlMesh_MeshExplorer_swigregister = _StlMesh.StlMesh_MeshExplorer_swigregister
StlMesh_MeshExplorer_swigregister(StlMesh_MeshExplorer)

class StlMesh_MeshTriangle(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        * create a triangle defined with the indexes of its three vertices and its orientation Raised if V1, V2 or V3 is lower than zero

        :param V1:
        :type V1: int
        :param V2:
        :type V2: int
        :param V3:
        :type V3: int
        :param Xn:
        :type Xn: float
        :param Yn:
        :type Yn: float
        :param Zn:
        :type Zn: float
        :rtype: None

        """
        _StlMesh.StlMesh_MeshTriangle_swiginit(self, _StlMesh.new_StlMesh_MeshTriangle(*args))

    def GetVertexAndOrientation(self, *args):
        """
        * get indexes of the three vertices (V1,V2,V3) and the orientation

        :param V1:
        :type V1: int &
        :param V2:
        :type V2: int &
        :param V3:
        :type V3: int &
        :param Xn:
        :type Xn: float &
        :param Yn:
        :type Yn: float &
        :param Zn:
        :type Zn: float &
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshTriangle_GetVertexAndOrientation(self, *args)


    def SetVertexAndOrientation(self, *args):
        """
        * set indexes of the three vertices (V1,V2,V3) and the orientation Raised if V1, V2 or V3 is lower than zero

        :param V1:
        :type V1: int
        :param V2:
        :type V2: int
        :param V3:
        :type V3: int
        :param Xn:
        :type Xn: float
        :param Yn:
        :type Yn: float
        :param Zn:
        :type Zn: float
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshTriangle_SetVertexAndOrientation(self, *args)


    def GetVertex(self, *args):
        """
        * get indexes of the three vertices (V1,V2,V3)

        :param V1:
        :type V1: int &
        :param V2:
        :type V2: int &
        :param V3:
        :type V3: int &
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshTriangle_GetVertex(self, *args)


    def SetVertex(self, *args):
        """
        * set indexes of the three vertices (V1,V2,V3) Raised if V1, V2 or V3 is lower than zero

        :param V1:
        :type V1: int
        :param V2:
        :type V2: int
        :param V3:
        :type V3: int
        :rtype: None

        """
        return _StlMesh.StlMesh_MeshTriangle_SetVertex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_MeshTriangle self)"""
        return _StlMesh.StlMesh_MeshTriangle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_MeshTriangle self) -> Handle_StlMesh_MeshTriangle"""
        return _StlMesh.StlMesh_MeshTriangle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_MeshTriangle.GetVertexAndOrientation = new_instancemethod(_StlMesh.StlMesh_MeshTriangle_GetVertexAndOrientation, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle.SetVertexAndOrientation = new_instancemethod(_StlMesh.StlMesh_MeshTriangle_SetVertexAndOrientation, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle.GetVertex = new_instancemethod(_StlMesh.StlMesh_MeshTriangle_GetVertex, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle.SetVertex = new_instancemethod(_StlMesh.StlMesh_MeshTriangle_SetVertex, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle._kill_pointed = new_instancemethod(_StlMesh.StlMesh_MeshTriangle__kill_pointed, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle.GetHandle = new_instancemethod(_StlMesh.StlMesh_MeshTriangle_GetHandle, None, StlMesh_MeshTriangle)
StlMesh_MeshTriangle_swigregister = _StlMesh.StlMesh_MeshTriangle_swigregister
StlMesh_MeshTriangle_swigregister(StlMesh_MeshTriangle)

class Handle_StlMesh_MeshTriangle(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_MeshTriangle_swiginit(self, _StlMesh.new_Handle_StlMesh_MeshTriangle(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_MeshTriangle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_MeshTriangle.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_MeshTriangle_Nullify, None, Handle_StlMesh_MeshTriangle)
Handle_StlMesh_MeshTriangle.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_MeshTriangle_IsNull, None, Handle_StlMesh_MeshTriangle)
Handle_StlMesh_MeshTriangle.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_MeshTriangle_GetObject, None, Handle_StlMesh_MeshTriangle)
Handle_StlMesh_MeshTriangle._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_MeshTriangle__kill_pointed, None, Handle_StlMesh_MeshTriangle)
Handle_StlMesh_MeshTriangle_swigregister = _StlMesh.Handle_StlMesh_MeshTriangle_swigregister
Handle_StlMesh_MeshTriangle_swigregister(Handle_StlMesh_MeshTriangle)

def Handle_StlMesh_MeshTriangle_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_MeshTriangle_DownCast(AnObject)
Handle_StlMesh_MeshTriangle_DownCast = _StlMesh.Handle_StlMesh_MeshTriangle_DownCast

class StlMesh_SequenceNodeOfSequenceOfMesh(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_StlMesh_Mesh &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_swiginit(self, _StlMesh.new_StlMesh_SequenceNodeOfSequenceOfMesh(*args))

    def Value(self, *args):
        """
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_SequenceNodeOfSequenceOfMesh self)"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_SequenceNodeOfSequenceOfMesh self) -> Handle_StlMesh_SequenceNodeOfSequenceOfMesh"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceNodeOfSequenceOfMesh.Value = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_Value, None, StlMesh_SequenceNodeOfSequenceOfMesh)
StlMesh_SequenceNodeOfSequenceOfMesh._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh__kill_pointed, None, StlMesh_SequenceNodeOfSequenceOfMesh)
StlMesh_SequenceNodeOfSequenceOfMesh.GetHandle = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_GetHandle, None, StlMesh_SequenceNodeOfSequenceOfMesh)
StlMesh_SequenceNodeOfSequenceOfMesh_swigregister = _StlMesh.StlMesh_SequenceNodeOfSequenceOfMesh_swigregister
StlMesh_SequenceNodeOfSequenceOfMesh_swigregister(StlMesh_SequenceNodeOfSequenceOfMesh)

class Handle_StlMesh_SequenceNodeOfSequenceOfMesh(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_swiginit(self, _StlMesh.new_Handle_StlMesh_SequenceNodeOfSequenceOfMesh(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_SequenceNodeOfSequenceOfMesh.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_Nullify, None, Handle_StlMesh_SequenceNodeOfSequenceOfMesh)
Handle_StlMesh_SequenceNodeOfSequenceOfMesh.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_IsNull, None, Handle_StlMesh_SequenceNodeOfSequenceOfMesh)
Handle_StlMesh_SequenceNodeOfSequenceOfMesh.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_GetObject, None, Handle_StlMesh_SequenceNodeOfSequenceOfMesh)
Handle_StlMesh_SequenceNodeOfSequenceOfMesh._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh__kill_pointed, None, Handle_StlMesh_SequenceNodeOfSequenceOfMesh)
Handle_StlMesh_SequenceNodeOfSequenceOfMesh_swigregister = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_swigregister
Handle_StlMesh_SequenceNodeOfSequenceOfMesh_swigregister(Handle_StlMesh_SequenceNodeOfSequenceOfMesh)

def Handle_StlMesh_SequenceNodeOfSequenceOfMesh_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_DownCast(AnObject)
Handle_StlMesh_SequenceNodeOfSequenceOfMesh_DownCast = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMesh_DownCast

class StlMesh_SequenceNodeOfSequenceOfMeshDomain(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_StlMesh_MeshDomain &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_swiginit(self, _StlMesh.new_StlMesh_SequenceNodeOfSequenceOfMeshDomain(*args))

    def Value(self, *args):
        """
        :rtype: Handle_StlMesh_MeshDomain

        """
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_SequenceNodeOfSequenceOfMeshDomain self)"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_SequenceNodeOfSequenceOfMeshDomain self) -> Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceNodeOfSequenceOfMeshDomain.Value = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_Value, None, StlMesh_SequenceNodeOfSequenceOfMeshDomain)
StlMesh_SequenceNodeOfSequenceOfMeshDomain._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain__kill_pointed, None, StlMesh_SequenceNodeOfSequenceOfMeshDomain)
StlMesh_SequenceNodeOfSequenceOfMeshDomain.GetHandle = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_GetHandle, None, StlMesh_SequenceNodeOfSequenceOfMeshDomain)
StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister = _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister
StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister(StlMesh_SequenceNodeOfSequenceOfMeshDomain)

class Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_swiginit(self, _StlMesh.new_Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_Nullify, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_IsNull, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_GetObject, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain__kill_pointed, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_swigregister(Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain)

def Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_DownCast(AnObject)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_DownCast = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshDomain_DownCast

class StlMesh_SequenceNodeOfSequenceOfMeshTriangle(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_StlMesh_MeshTriangle &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swiginit(self, _StlMesh.new_StlMesh_SequenceNodeOfSequenceOfMeshTriangle(*args))

    def Value(self, *args):
        """
        :rtype: Handle_StlMesh_MeshTriangle

        """
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(StlMesh_SequenceNodeOfSequenceOfMeshTriangle self)"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(StlMesh_SequenceNodeOfSequenceOfMeshTriangle self) -> Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle"""
        return _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceNodeOfSequenceOfMeshTriangle.Value = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_Value, None, StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
StlMesh_SequenceNodeOfSequenceOfMeshTriangle._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle__kill_pointed, None, StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
StlMesh_SequenceNodeOfSequenceOfMeshTriangle.GetHandle = new_instancemethod(_StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_GetHandle, None, StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister = _StlMesh.StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister
StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister(StlMesh_SequenceNodeOfSequenceOfMeshTriangle)

class Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swiginit(self, _StlMesh.new_Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle(*args))
    DownCast = staticmethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle.Nullify = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_Nullify, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle.IsNull = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_IsNull, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle.GetObject = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_GetObject, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle._kill_pointed = new_instancemethod(_StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle__kill_pointed, None, Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_swigregister(Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle)

def Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_DownCast(AnObject):
    return _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_DownCast(AnObject)
Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_DownCast = _StlMesh.Handle_StlMesh_SequenceNodeOfSequenceOfMeshTriangle_DownCast

class StlMesh_SequenceOfMesh(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceOfMesh_swiginit(self, _StlMesh.new_StlMesh_SequenceOfMesh(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMesh &
        :rtype: StlMesh_SequenceOfMesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMesh &
        :rtype: StlMesh_SequenceOfMesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_Mesh &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_Mesh &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_Mesh &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_Mesh &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: StlMesh_SequenceOfMesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_StlMesh_Mesh &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_Mesh

        """
        return _StlMesh.StlMesh_SequenceOfMesh_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMesh_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceOfMesh.Clear = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Clear, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Assign = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Assign, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Set = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Set, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Append = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Append, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Prepend = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Prepend, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.InsertBefore = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_InsertBefore, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.InsertAfter = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_InsertAfter, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.First = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_First, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Last = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Last, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Split = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Split, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Value = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Value, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.SetValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_SetValue, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.ChangeValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_ChangeValue, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh.Remove = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh_Remove, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceOfMesh__kill_pointed, None, StlMesh_SequenceOfMesh)
StlMesh_SequenceOfMesh_swigregister = _StlMesh.StlMesh_SequenceOfMesh_swigregister
StlMesh_SequenceOfMesh_swigregister(StlMesh_SequenceOfMesh)

class StlMesh_SequenceOfMeshDomain(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceOfMeshDomain_swiginit(self, _StlMesh.new_StlMesh_SequenceOfMeshDomain(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMeshDomain &
        :rtype: StlMesh_SequenceOfMeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMeshDomain &
        :rtype: StlMesh_SequenceOfMeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_MeshDomain &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_MeshDomain &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_MeshDomain &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_MeshDomain &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_StlMesh_MeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_StlMesh_MeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: StlMesh_SequenceOfMeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_MeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_StlMesh_MeshDomain &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_MeshDomain

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshDomain_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceOfMeshDomain.Clear = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Clear, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Assign = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Assign, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Set = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Set, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Append = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Append, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Prepend = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Prepend, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.InsertBefore = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_InsertBefore, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.InsertAfter = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_InsertAfter, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.First = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_First, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Last = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Last, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Split = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Split, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Value = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Value, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.SetValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_SetValue, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.ChangeValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_ChangeValue, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain.Remove = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain_Remove, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshDomain__kill_pointed, None, StlMesh_SequenceOfMeshDomain)
StlMesh_SequenceOfMeshDomain_swigregister = _StlMesh.StlMesh_SequenceOfMeshDomain_swigregister
StlMesh_SequenceOfMeshDomain_swigregister(StlMesh_SequenceOfMeshDomain)

class StlMesh_SequenceOfMeshTriangle(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StlMesh.StlMesh_SequenceOfMeshTriangle_swiginit(self, _StlMesh.new_StlMesh_SequenceOfMeshTriangle(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMeshTriangle &
        :rtype: StlMesh_SequenceOfMeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: StlMesh_SequenceOfMeshTriangle &
        :rtype: StlMesh_SequenceOfMeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_MeshTriangle &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_StlMesh_MeshTriangle &
        :rtype: None

        :param S:
        :type S: StlMesh_SequenceOfMeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_MeshTriangle &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_StlMesh_MeshTriangle &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: StlMesh_SequenceOfMeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_StlMesh_MeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_StlMesh_MeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: StlMesh_SequenceOfMeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_MeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_StlMesh_MeshTriangle &
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StlMesh_MeshTriangle

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _StlMesh.StlMesh_SequenceOfMeshTriangle_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


StlMesh_SequenceOfMeshTriangle.Clear = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Clear, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Assign = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Assign, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Set = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Set, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Append = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Append, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Prepend = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Prepend, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.InsertBefore = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_InsertBefore, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.InsertAfter = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_InsertAfter, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.First = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_First, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Last = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Last, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Split = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Split, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Value = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Value, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.SetValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_SetValue, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.ChangeValue = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_ChangeValue, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle.Remove = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle_Remove, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle._kill_pointed = new_instancemethod(_StlMesh.StlMesh_SequenceOfMeshTriangle__kill_pointed, None, StlMesh_SequenceOfMeshTriangle)
StlMesh_SequenceOfMeshTriangle_swigregister = _StlMesh.StlMesh_SequenceOfMeshTriangle_swigregister
StlMesh_SequenceOfMeshTriangle_swigregister(StlMesh_SequenceOfMeshTriangle)



