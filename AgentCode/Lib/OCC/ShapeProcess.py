# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeProcess.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcess', [dirname(__file__)])
        except ImportError:
            import _ShapeProcess
            return _ShapeProcess
        if fp is not None:
            try:
                _mod = imp.load_module('_ShapeProcess', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ShapeProcess = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcess
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcess.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeProcess.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeProcess.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeProcess.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeProcess.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeProcess.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeProcess.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeProcess.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeProcess.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeProcess.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeProcess.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeProcess.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeProcess.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeProcess.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeProcess.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeProcess.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeProcess.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeProcess.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.MMgt
import OCC.Resource
import OCC.TCollection
import OCC.Message
import OCC.TColStd
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.BRepTools
import OCC.Bnd
import OCC.TopTools
import OCC.BRep
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.ShapeExtend
import OCC.TColGeom
import OCC.ShapeBuild
class shapeprocess(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def RegisterOperator(*args):
        """
        * Registers operator to make it visible for Performer

        :param name:
        :type name: char *
        :param op:
        :type op: Handle_ShapeProcess_Operator &
        :rtype: bool

        """
        return _ShapeProcess.shapeprocess_RegisterOperator(*args)

    RegisterOperator = staticmethod(RegisterOperator)

    def FindOperator(*args):
        """
        * Finds operator by its name

        :param name:
        :type name: char *
        :param op:
        :type op: Handle_ShapeProcess_Operator &
        :rtype: bool

        """
        return _ShapeProcess.shapeprocess_FindOperator(*args)

    FindOperator = staticmethod(FindOperator)

    def Perform(*args):
        """
        * Performs a specified sequence of operators on Context Resource file and other data should be already loaded to Context (including description of sequence seq)

        :param context:
        :type context: Handle_ShapeProcess_Context &
        :param seq:
        :type seq: char *
        :rtype: bool

        """
        return _ShapeProcess.shapeprocess_Perform(*args)

    Perform = staticmethod(Perform)

    def __init__(self):
        _ShapeProcess.shapeprocess_swiginit(self, _ShapeProcess.new_shapeprocess())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


shapeprocess._kill_pointed = new_instancemethod(_ShapeProcess.shapeprocess__kill_pointed, None, shapeprocess)
shapeprocess_swigregister = _ShapeProcess.shapeprocess_swigregister
shapeprocess_swigregister(shapeprocess)

def shapeprocess_RegisterOperator(*args):
    """
    * Registers operator to make it visible for Performer

    :param name:
    :type name: char *
    :param op:
    :type op: Handle_ShapeProcess_Operator &
    :rtype: bool

    """
    return _ShapeProcess.shapeprocess_RegisterOperator(*args)

def shapeprocess_FindOperator(*args):
    """
    * Finds operator by its name

    :param name:
    :type name: char *
    :param op:
    :type op: Handle_ShapeProcess_Operator &
    :rtype: bool

    """
    return _ShapeProcess.shapeprocess_FindOperator(*args)

def shapeprocess_Perform(*args):
    """
    * Performs a specified sequence of operators on Context Resource file and other data should be already loaded to Context (including description of sequence seq)

    :param context:
    :type context: Handle_ShapeProcess_Context &
    :param seq:
    :type seq: char *
    :rtype: bool

    """
    return _ShapeProcess.shapeprocess_Perform(*args)

class ShapeProcess_Context(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty tool

        :rtype: None

        * Creates a new tool and initialises by name of resource file and (if specified) starting scope Calls method Init()

        :param file:
        :type file: char *
        :param scope: default value is 
        :type scope: char *
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_Context_swiginit(self, _ShapeProcess.new_ShapeProcess_Context(*args))

    def Init(self, *args):
        """
        * Initialises a tool by loading resource file and (if specified) sets starting scope Returns False if resource file not found

        :param file:
        :type file: char *
        :param scope: default value is 
        :type scope: char *
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_Init(self, *args)


    def LoadResourceManager(self, *args):
        """
        * Loading Resource_Manager object if this object not equal internal static Resource_Manager object or internal static Resource_Manager object is null

        :param file:
        :type file: char *
        :rtype: Handle_Resource_Manager

        """
        return _ShapeProcess.ShapeProcess_Context_LoadResourceManager(self, *args)


    def ResourceManager(self, *args):
        """
        * Returns internal Resource_Manager object

        :rtype: Handle_Resource_Manager

        """
        return _ShapeProcess.ShapeProcess_Context_ResourceManager(self, *args)


    def SetScope(self, *args):
        """
        * Set a new (sub)scope

        :param scope:
        :type scope: char *
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_Context_SetScope(self, *args)


    def UnSetScope(self, *args):
        """
        * Go out of current scope

        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_Context_UnSetScope(self, *args)


    def IsParamSet(self, *args):
        """
        * Returns True if parameter is defined in the resource file

        :param param:
        :type param: char *
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_IsParamSet(self, *args)


    def GetReal(self, *args):
        """
        :param param:
        :type param: char *
        :param val:
        :type val: float &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetReal(self, *args)


    def GetInteger(self, *args):
        """
        :param param:
        :type param: char *
        :param val:
        :type val: int &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        :param param:
        :type param: char *
        :param val:
        :type val: bool
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetBoolean(self, *args)


    def GetString(self, *args):
        """
        * Get value of parameter as being of specific type Returns False if parameter is not defined or has a wrong type

        :param param:
        :type param: char *
        :param val:
        :type val: TCollection_AsciiString &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetString(self, *args)


    def RealVal(self, *args):
        """
        :param param:
        :type param: char *
        :param def:
        :type def: float
        :rtype: float

        """
        return _ShapeProcess.ShapeProcess_Context_RealVal(self, *args)


    def IntegerVal(self, *args):
        """
        :param param:
        :type param: char *
        :param def:
        :type def: int
        :rtype: int

        """
        return _ShapeProcess.ShapeProcess_Context_IntegerVal(self, *args)


    def BooleanVal(self, *args):
        """
        :param param:
        :type param: char *
        :param def:
        :type def: bool
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Context_BooleanVal(self, *args)


    def StringVal(self, *args):
        """
        * Get value of parameter as being of specific type If parameter is not defined or does not have expected type, returns default value as specified

        :param param:
        :type param: char *
        :param def:
        :type def: char *
        :rtype: char *

        """
        return _ShapeProcess.ShapeProcess_Context_StringVal(self, *args)


    def SetMessenger(self, *args):
        """
        * Sets Messenger used for outputting messages.

        :param messenger:
        :type messenger: Handle_Message_Messenger &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_Context_SetMessenger(self, *args)


    def Messenger(self, *args):
        """
        * Returns Messenger used for outputting messages.

        :rtype: Handle_Message_Messenger

        """
        return _ShapeProcess.ShapeProcess_Context_Messenger(self, *args)


    def SetProgress(self, *args):
        """
        * Sets Progress Indicator.

        :param theProgress:
        :type theProgress: Handle_Message_ProgressIndicator &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_Context_SetProgress(self, *args)


    def Progress(self, *args):
        """
        * Returns Progress Indicator.

        :rtype: Handle_Message_ProgressIndicator

        """
        return _ShapeProcess.ShapeProcess_Context_Progress(self, *args)


    def SetTraceLevel(self, *args):
        """
        * Sets trace level used for outputting messages - 0: no trace at all - 1: errors - 2: errors and warnings - 3: all messages Default is 1 : Errors traced

        :param tracelev:
        :type tracelev: int
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_Context_SetTraceLevel(self, *args)


    def TraceLevel(self, *args):
        """
        * Returns trace level used for outputting messages.

        :rtype: int

        """
        return _ShapeProcess.ShapeProcess_Context_TraceLevel(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_Context self)"""
        return _ShapeProcess.ShapeProcess_Context__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_Context self) -> Handle_ShapeProcess_Context"""
        return _ShapeProcess.ShapeProcess_Context_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_Context.Init = new_instancemethod(_ShapeProcess.ShapeProcess_Context_Init, None, ShapeProcess_Context)
ShapeProcess_Context.LoadResourceManager = new_instancemethod(_ShapeProcess.ShapeProcess_Context_LoadResourceManager, None, ShapeProcess_Context)
ShapeProcess_Context.ResourceManager = new_instancemethod(_ShapeProcess.ShapeProcess_Context_ResourceManager, None, ShapeProcess_Context)
ShapeProcess_Context.SetScope = new_instancemethod(_ShapeProcess.ShapeProcess_Context_SetScope, None, ShapeProcess_Context)
ShapeProcess_Context.UnSetScope = new_instancemethod(_ShapeProcess.ShapeProcess_Context_UnSetScope, None, ShapeProcess_Context)
ShapeProcess_Context.IsParamSet = new_instancemethod(_ShapeProcess.ShapeProcess_Context_IsParamSet, None, ShapeProcess_Context)
ShapeProcess_Context.GetReal = new_instancemethod(_ShapeProcess.ShapeProcess_Context_GetReal, None, ShapeProcess_Context)
ShapeProcess_Context.GetInteger = new_instancemethod(_ShapeProcess.ShapeProcess_Context_GetInteger, None, ShapeProcess_Context)
ShapeProcess_Context.GetBoolean = new_instancemethod(_ShapeProcess.ShapeProcess_Context_GetBoolean, None, ShapeProcess_Context)
ShapeProcess_Context.GetString = new_instancemethod(_ShapeProcess.ShapeProcess_Context_GetString, None, ShapeProcess_Context)
ShapeProcess_Context.RealVal = new_instancemethod(_ShapeProcess.ShapeProcess_Context_RealVal, None, ShapeProcess_Context)
ShapeProcess_Context.IntegerVal = new_instancemethod(_ShapeProcess.ShapeProcess_Context_IntegerVal, None, ShapeProcess_Context)
ShapeProcess_Context.BooleanVal = new_instancemethod(_ShapeProcess.ShapeProcess_Context_BooleanVal, None, ShapeProcess_Context)
ShapeProcess_Context.StringVal = new_instancemethod(_ShapeProcess.ShapeProcess_Context_StringVal, None, ShapeProcess_Context)
ShapeProcess_Context.SetMessenger = new_instancemethod(_ShapeProcess.ShapeProcess_Context_SetMessenger, None, ShapeProcess_Context)
ShapeProcess_Context.Messenger = new_instancemethod(_ShapeProcess.ShapeProcess_Context_Messenger, None, ShapeProcess_Context)
ShapeProcess_Context.SetProgress = new_instancemethod(_ShapeProcess.ShapeProcess_Context_SetProgress, None, ShapeProcess_Context)
ShapeProcess_Context.Progress = new_instancemethod(_ShapeProcess.ShapeProcess_Context_Progress, None, ShapeProcess_Context)
ShapeProcess_Context.SetTraceLevel = new_instancemethod(_ShapeProcess.ShapeProcess_Context_SetTraceLevel, None, ShapeProcess_Context)
ShapeProcess_Context.TraceLevel = new_instancemethod(_ShapeProcess.ShapeProcess_Context_TraceLevel, None, ShapeProcess_Context)
ShapeProcess_Context._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_Context__kill_pointed, None, ShapeProcess_Context)
ShapeProcess_Context.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_Context_GetHandle, None, ShapeProcess_Context)
ShapeProcess_Context_swigregister = _ShapeProcess.ShapeProcess_Context_swigregister
ShapeProcess_Context_swigregister(ShapeProcess_Context)

class Handle_ShapeProcess_Context(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_Context_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_Context(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_Context_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_Context.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Context_Nullify, None, Handle_ShapeProcess_Context)
Handle_ShapeProcess_Context.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Context_IsNull, None, Handle_ShapeProcess_Context)
Handle_ShapeProcess_Context.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Context_GetObject, None, Handle_ShapeProcess_Context)
Handle_ShapeProcess_Context._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Context__kill_pointed, None, Handle_ShapeProcess_Context)
Handle_ShapeProcess_Context_swigregister = _ShapeProcess.Handle_ShapeProcess_Context_swigregister
Handle_ShapeProcess_Context_swigregister(Handle_ShapeProcess_Context)

def Handle_ShapeProcess_Context_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_Context_DownCast(AnObject)
Handle_ShapeProcess_Context_DownCast = _ShapeProcess.Handle_ShapeProcess_Context_DownCast

class ShapeProcess_DictionaryOfOperator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_DictionaryOfOperator_swiginit(self, _ShapeProcess.new_ShapeProcess_DictionaryOfOperator(*args))

    def HasItem(self, *args):
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_False
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_HasItem(self, *args)


    def Item(self, *args):
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_ShapeProcess_Operator

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_ShapeProcess_Operator

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_Item(self, *args)


    def GetItem(self, *args):
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: Handle_ShapeProcess_Operator &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: Handle_ShapeProcess_Operator &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_GetItem(self, *args)


    def SetItem(self, *args):
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: Handle_ShapeProcess_Operator &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: Handle_ShapeProcess_Operator &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_SetItem(self, *args)


    def NewItem(self, *args):
        """
        :param name:
        :type name: char *
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_ShapeProcess_Operator

        :param name:
        :type name: TCollection_AsciiString &
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_ShapeProcess_Operator

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_NewItem(self, *args)


    def RemoveItem(self, *args):
        """
        :param name:
        :type name: char *
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_RemoveItem(self, *args)


    def Clean(self, *args):
        """
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_Clean(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_Clear(self, *args)


    def Copy(self, *args):
        """
        :rtype: Handle_ShapeProcess_DictionaryOfOperator

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_Copy(self, *args)


    def Complete(self, *args):
        """
        :param acell:
        :type acell: Handle_ShapeProcess_DictionaryOfOperator &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_Complete(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_DictionaryOfOperator self)"""
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_DictionaryOfOperator self) -> Handle_ShapeProcess_DictionaryOfOperator"""
        return _ShapeProcess.ShapeProcess_DictionaryOfOperator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_DictionaryOfOperator.HasItem = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_HasItem, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.Item = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_Item, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.GetItem = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_GetItem, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.SetItem = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_SetItem, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.NewItem = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_NewItem, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.RemoveItem = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_RemoveItem, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.Clean = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_Clean, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.IsEmpty = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_IsEmpty, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.Clear = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_Clear, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.Copy = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_Copy, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.Complete = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_Complete, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator__kill_pointed, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_DictionaryOfOperator_GetHandle, None, ShapeProcess_DictionaryOfOperator)
ShapeProcess_DictionaryOfOperator_swigregister = _ShapeProcess.ShapeProcess_DictionaryOfOperator_swigregister
ShapeProcess_DictionaryOfOperator_swigregister(ShapeProcess_DictionaryOfOperator)

class Handle_ShapeProcess_DictionaryOfOperator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_DictionaryOfOperator(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_DictionaryOfOperator.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_Nullify, None, Handle_ShapeProcess_DictionaryOfOperator)
Handle_ShapeProcess_DictionaryOfOperator.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_IsNull, None, Handle_ShapeProcess_DictionaryOfOperator)
Handle_ShapeProcess_DictionaryOfOperator.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_GetObject, None, Handle_ShapeProcess_DictionaryOfOperator)
Handle_ShapeProcess_DictionaryOfOperator._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator__kill_pointed, None, Handle_ShapeProcess_DictionaryOfOperator)
Handle_ShapeProcess_DictionaryOfOperator_swigregister = _ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_swigregister
Handle_ShapeProcess_DictionaryOfOperator_swigregister(Handle_ShapeProcess_DictionaryOfOperator)

def Handle_ShapeProcess_DictionaryOfOperator_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_DownCast(AnObject)
Handle_ShapeProcess_DictionaryOfOperator_DownCast = _ShapeProcess.Handle_ShapeProcess_DictionaryOfOperator_DownCast

class ShapeProcess_IteratorOfDictionaryOfOperator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param acell:
        :type acell: Handle_ShapeProcess_DictionaryOfOperator &
        :rtype: None

        :param acell:
        :type acell: Handle_ShapeProcess_DictionaryOfOperator &
        :param basename:
        :type basename: char *
        :rtype: None

        :param acell:
        :type acell: Handle_ShapeProcess_DictionaryOfOperator &
        :param basename:
        :type basename: TCollection_AsciiString &
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_swiginit(self, _ShapeProcess.new_ShapeProcess_IteratorOfDictionaryOfOperator(*args))

    def Start(self, *args):
        """
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Start(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_ShapeProcess_Operator

        """
        return _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Value(self, *args)


    def Name(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Name(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_IteratorOfDictionaryOfOperator.Start = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Start, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator.More = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_More, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator.Next = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Next, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator.Value = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Value, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator.Name = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_Name, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator__kill_pointed, None, ShapeProcess_IteratorOfDictionaryOfOperator)
ShapeProcess_IteratorOfDictionaryOfOperator_swigregister = _ShapeProcess.ShapeProcess_IteratorOfDictionaryOfOperator_swigregister
ShapeProcess_IteratorOfDictionaryOfOperator_swigregister(ShapeProcess_IteratorOfDictionaryOfOperator)

class ShapeProcess_OperLibrary(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        * Registers all the operators

        :rtype: void

        """
        return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

    Init = staticmethod(Init)

    def ApplyModifier(*args):
        """
        * Applies BRepTools_Modification to a shape, taking into account sharing of components of compounds.

        :param S:
        :type S: TopoDS_Shape &
        :param context:
        :type context: Handle_ShapeProcess_ShapeContext &
        :param M:
        :type M: Handle_BRepTools_Modification &
        :param map:
        :type map: TopTools_DataMapOfShapeShape &
        :rtype: TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

    ApplyModifier = staticmethod(ApplyModifier)

    def __init__(self):
        _ShapeProcess.ShapeProcess_OperLibrary_swiginit(self, _ShapeProcess.new_ShapeProcess_OperLibrary())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_OperLibrary._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_OperLibrary__kill_pointed, None, ShapeProcess_OperLibrary)
ShapeProcess_OperLibrary_swigregister = _ShapeProcess.ShapeProcess_OperLibrary_swigregister
ShapeProcess_OperLibrary_swigregister(ShapeProcess_OperLibrary)

def ShapeProcess_OperLibrary_Init(*args):
    """
    * Registers all the operators

    :rtype: void

    """
    return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

def ShapeProcess_OperLibrary_ApplyModifier(*args):
    """
    * Applies BRepTools_Modification to a shape, taking into account sharing of components of compounds.

    :param S:
    :type S: TopoDS_Shape &
    :param context:
    :type context: Handle_ShapeProcess_ShapeContext &
    :param M:
    :type M: Handle_BRepTools_Modification &
    :param map:
    :type map: TopTools_DataMapOfShapeShape &
    :rtype: TopoDS_Shape

    """
    return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

class ShapeProcess_Operator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args):
        """
        * Performs operation and eventually records changes in the context

        :param context:
        :type context: Handle_ShapeProcess_Context &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_Operator_Perform(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_Operator self)"""
        return _ShapeProcess.ShapeProcess_Operator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_Operator self) -> Handle_ShapeProcess_Operator"""
        return _ShapeProcess.ShapeProcess_Operator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_Operator.Perform = new_instancemethod(_ShapeProcess.ShapeProcess_Operator_Perform, None, ShapeProcess_Operator)
ShapeProcess_Operator._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_Operator__kill_pointed, None, ShapeProcess_Operator)
ShapeProcess_Operator.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_Operator_GetHandle, None, ShapeProcess_Operator)
ShapeProcess_Operator_swigregister = _ShapeProcess.ShapeProcess_Operator_swigregister
ShapeProcess_Operator_swigregister(ShapeProcess_Operator)

class Handle_ShapeProcess_Operator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_Operator_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_Operator(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_Operator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_Operator.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Operator_Nullify, None, Handle_ShapeProcess_Operator)
Handle_ShapeProcess_Operator.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Operator_IsNull, None, Handle_ShapeProcess_Operator)
Handle_ShapeProcess_Operator.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Operator_GetObject, None, Handle_ShapeProcess_Operator)
Handle_ShapeProcess_Operator._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_Operator__kill_pointed, None, Handle_ShapeProcess_Operator)
Handle_ShapeProcess_Operator_swigregister = _ShapeProcess.Handle_ShapeProcess_Operator_swigregister
Handle_ShapeProcess_Operator_swigregister(Handle_ShapeProcess_Operator)

def Handle_ShapeProcess_Operator_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_Operator_DownCast(AnObject)
Handle_ShapeProcess_Operator_DownCast = _ShapeProcess.Handle_ShapeProcess_Operator_DownCast

class ShapeProcess_StackItemOfDictionaryOfOperator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param previous:
        :type previous: Handle_ShapeProcess_StackItemOfDictionaryOfOperator &
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_swiginit(self, _ShapeProcess.new_ShapeProcess_StackItemOfDictionaryOfOperator(*args))

    def Previous(self, *args):
        """
        :rtype: Handle_ShapeProcess_StackItemOfDictionaryOfOperator

        """
        return _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_Previous(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_ShapeProcess_DictionaryOfOperator

        """
        return _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_Value(self, *args)


    def SetValue(self, *args):
        """
        :param cval:
        :type cval: Handle_ShapeProcess_DictionaryOfOperator &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_SetValue(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_StackItemOfDictionaryOfOperator self)"""
        return _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_StackItemOfDictionaryOfOperator self) -> Handle_ShapeProcess_StackItemOfDictionaryOfOperator"""
        return _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_StackItemOfDictionaryOfOperator.Previous = new_instancemethod(_ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_Previous, None, ShapeProcess_StackItemOfDictionaryOfOperator)
ShapeProcess_StackItemOfDictionaryOfOperator.Value = new_instancemethod(_ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_Value, None, ShapeProcess_StackItemOfDictionaryOfOperator)
ShapeProcess_StackItemOfDictionaryOfOperator.SetValue = new_instancemethod(_ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_SetValue, None, ShapeProcess_StackItemOfDictionaryOfOperator)
ShapeProcess_StackItemOfDictionaryOfOperator._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator__kill_pointed, None, ShapeProcess_StackItemOfDictionaryOfOperator)
ShapeProcess_StackItemOfDictionaryOfOperator.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_GetHandle, None, ShapeProcess_StackItemOfDictionaryOfOperator)
ShapeProcess_StackItemOfDictionaryOfOperator_swigregister = _ShapeProcess.ShapeProcess_StackItemOfDictionaryOfOperator_swigregister
ShapeProcess_StackItemOfDictionaryOfOperator_swigregister(ShapeProcess_StackItemOfDictionaryOfOperator)

class Handle_ShapeProcess_StackItemOfDictionaryOfOperator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_StackItemOfDictionaryOfOperator(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_StackItemOfDictionaryOfOperator.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_Nullify, None, Handle_ShapeProcess_StackItemOfDictionaryOfOperator)
Handle_ShapeProcess_StackItemOfDictionaryOfOperator.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_IsNull, None, Handle_ShapeProcess_StackItemOfDictionaryOfOperator)
Handle_ShapeProcess_StackItemOfDictionaryOfOperator.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_GetObject, None, Handle_ShapeProcess_StackItemOfDictionaryOfOperator)
Handle_ShapeProcess_StackItemOfDictionaryOfOperator._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator__kill_pointed, None, Handle_ShapeProcess_StackItemOfDictionaryOfOperator)
Handle_ShapeProcess_StackItemOfDictionaryOfOperator_swigregister = _ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_swigregister
Handle_ShapeProcess_StackItemOfDictionaryOfOperator_swigregister(Handle_ShapeProcess_StackItemOfDictionaryOfOperator)

def Handle_ShapeProcess_StackItemOfDictionaryOfOperator_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_DownCast(AnObject)
Handle_ShapeProcess_StackItemOfDictionaryOfOperator_DownCast = _ShapeProcess.Handle_ShapeProcess_StackItemOfDictionaryOfOperator_DownCast

class ShapeProcess_ShapeContext(ShapeProcess_Context):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param file:
        :type file: char *
        :param seq: default value is 
        :type seq: char *
        :rtype: None

        * Initializes a tool by resource file and shape to be processed

        :param S:
        :type S: TopoDS_Shape &
        :param file:
        :type file: char *
        :param seq: default value is 
        :type seq: char *
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_ShapeContext_swiginit(self, _ShapeProcess.new_ShapeProcess_ShapeContext(*args))

    def Init(self, *args):
        """
        * Initializes tool by a new shape and clears all results

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Init(self, *args)


    def Shape(self, *args):
        """
        * Returns shape being processed

        :rtype: TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Shape(self, *args)


    def Result(self, *args):
        """
        * Returns current result

        :rtype: TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Result(self, *args)


    def Map(self, *args):
        """
        * Returns map of replacements shape -> shape This map is not recursive

        :rtype: TopTools_DataMapOfShapeShape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Map(self, *args)


    def Messages(self, *args):
        """
        :rtype: Handle_ShapeExtend_MsgRegistrator

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Messages(self, *args)


    def SetDetalisation(self, *args):
        """
        :param level:
        :type level: TopAbs_ShapeEnum
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetDetalisation(self, *args)


    def GetDetalisation(self, *args):
        """
        * Set and get value for detalisation level Only shapes of types from TopoDS_COMPOUND and until specified detalisation level will be recorded in maps To cancel mapping, use TopAbs_SHAPE To force full mapping, use TopAbs_VERTEX The default level is TopAbs_FACE

        :rtype: TopAbs_ShapeEnum

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetDetalisation(self, *args)


    def SetResult(self, *args):
        """
        * Sets a new result shape NOTE: this method should be used very carefully to keep consistency of modifications It is recommended to use RecordModification() methods with explicit definition of mapping from current result to a new one

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetResult(self, *args)


    def RecordModification(self, *args):
        """
        :param repl:
        :type repl: TopTools_DataMapOfShapeShape &
        :rtype: None

        :param repl:
        :type repl: Handle_ShapeBuild_ReShape &
        :param msg:
        :type msg: Handle_ShapeExtend_MsgRegistrator &
        :rtype: None

        :param repl:
        :type repl: Handle_ShapeBuild_ReShape &
        :rtype: None

        * Records modifications and resets result accordingly NOTE: modification of resulting shape should be explicitly defined in the maps along with modifications of subshapes  In the last function, sh is the shape on which Modifier was run. It can be different from the whole shape, but in that case result as a whole should be reset later either by call to SetResult(), or by another call to RecordModification() which contains mapping of current result to a new one explicitly

        :param sh:
        :type sh: TopoDS_Shape &
        :param repl:
        :type repl: BRepTools_Modifier &
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_RecordModification(self, *args)


    def AddMessage(self, *args):
        """
        * Record a message for shape S Shape S should be one of subshapes of original shape (or whole one), but not one of intermediate shapes Records only if Message() is not Null

        :param S:
        :type S: TopoDS_Shape &
        :param msg:
        :type msg: Message_Msg &
        :param gravity: default value is Message_Warning
        :type gravity: Message_Gravity
        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_AddMessage(self, *args)


    def GetContinuity(self, *args):
        """
        * Get value of parameter as being of the type GeomAbs_Shape Returns False if parameter is not defined or has a wrong type

        :param param:
        :type param: char *
        :param val:
        :type val: GeomAbs_Shape &
        :rtype: bool

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetContinuity(self, *args)


    def ContinuityVal(self, *args):
        """
        * Get value of parameter as being of the type GeomAbs_Shape If parameter is not defined or does not have expected type, returns default value as specified

        :param param:
        :type param: char *
        :param def:
        :type def: GeomAbs_Shape
        :rtype: GeomAbs_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_ContinuityVal(self, *args)


    def PrintStatistics(self, *args):
        """
        * Prints statistics on Shape Processing onto the current Messenger.

        :rtype: None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_PrintStatistics(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_ShapeContext self)"""
        return _ShapeProcess.ShapeProcess_ShapeContext__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_ShapeContext self) -> Handle_ShapeProcess_ShapeContext"""
        return _ShapeProcess.ShapeProcess_ShapeContext_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_ShapeContext.Init = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_Init, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.Shape = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_Shape, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.Result = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_Result, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.Map = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_Map, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.Messages = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_Messages, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.SetDetalisation = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_SetDetalisation, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.GetDetalisation = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_GetDetalisation, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.SetResult = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_SetResult, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.RecordModification = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_RecordModification, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.AddMessage = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_AddMessage, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.GetContinuity = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_GetContinuity, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.ContinuityVal = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_ContinuityVal, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.PrintStatistics = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_PrintStatistics, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext__kill_pointed, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_ShapeContext_GetHandle, None, ShapeProcess_ShapeContext)
ShapeProcess_ShapeContext_swigregister = _ShapeProcess.ShapeProcess_ShapeContext_swigregister
ShapeProcess_ShapeContext_swigregister(ShapeProcess_ShapeContext)

class Handle_ShapeProcess_ShapeContext(Handle_ShapeProcess_Context):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_ShapeContext_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_ShapeContext(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_ShapeContext.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext_Nullify, None, Handle_ShapeProcess_ShapeContext)
Handle_ShapeProcess_ShapeContext.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext_IsNull, None, Handle_ShapeProcess_ShapeContext)
Handle_ShapeProcess_ShapeContext.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext_GetObject, None, Handle_ShapeProcess_ShapeContext)
Handle_ShapeProcess_ShapeContext._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_ShapeContext__kill_pointed, None, Handle_ShapeProcess_ShapeContext)
Handle_ShapeProcess_ShapeContext_swigregister = _ShapeProcess.Handle_ShapeProcess_ShapeContext_swigregister
Handle_ShapeProcess_ShapeContext_swigregister(Handle_ShapeProcess_ShapeContext)

def Handle_ShapeProcess_ShapeContext_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast(AnObject)
Handle_ShapeProcess_ShapeContext_DownCast = _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast

class ShapeProcess_UOperator(ShapeProcess_Operator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates operator with implementation defined as OperFunc (static function)

        :param func:
        :type func: ShapeProcess_OperFunc
        :rtype: None

        """
        _ShapeProcess.ShapeProcess_UOperator_swiginit(self, _ShapeProcess.new_ShapeProcess_UOperator(*args))

    def _kill_pointed(self):
        """_kill_pointed(ShapeProcess_UOperator self)"""
        return _ShapeProcess.ShapeProcess_UOperator__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeProcess_UOperator self) -> Handle_ShapeProcess_UOperator"""
        return _ShapeProcess.ShapeProcess_UOperator_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeProcess_UOperator._kill_pointed = new_instancemethod(_ShapeProcess.ShapeProcess_UOperator__kill_pointed, None, ShapeProcess_UOperator)
ShapeProcess_UOperator.GetHandle = new_instancemethod(_ShapeProcess.ShapeProcess_UOperator_GetHandle, None, ShapeProcess_UOperator)
ShapeProcess_UOperator_swigregister = _ShapeProcess.ShapeProcess_UOperator_swigregister
ShapeProcess_UOperator_swigregister(ShapeProcess_UOperator)

class Handle_ShapeProcess_UOperator(Handle_ShapeProcess_Operator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeProcess.Handle_ShapeProcess_UOperator_swiginit(self, _ShapeProcess.new_Handle_ShapeProcess_UOperator(*args))
    DownCast = staticmethod(_ShapeProcess.Handle_ShapeProcess_UOperator_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeProcess_UOperator.Nullify = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_UOperator_Nullify, None, Handle_ShapeProcess_UOperator)
Handle_ShapeProcess_UOperator.IsNull = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_UOperator_IsNull, None, Handle_ShapeProcess_UOperator)
Handle_ShapeProcess_UOperator.GetObject = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_UOperator_GetObject, None, Handle_ShapeProcess_UOperator)
Handle_ShapeProcess_UOperator._kill_pointed = new_instancemethod(_ShapeProcess.Handle_ShapeProcess_UOperator__kill_pointed, None, Handle_ShapeProcess_UOperator)
Handle_ShapeProcess_UOperator_swigregister = _ShapeProcess.Handle_ShapeProcess_UOperator_swigregister
Handle_ShapeProcess_UOperator_swigregister(Handle_ShapeProcess_UOperator)

def Handle_ShapeProcess_UOperator_DownCast(AnObject):
    return _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast(AnObject)
Handle_ShapeProcess_UOperator_DownCast = _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast



