# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomProjLib.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomProjLib', [dirname(__file__)])
        except ImportError:
            import _GeomProjLib
            return _GeomProjLib
        if fp is not None:
            try:
                _mod = imp.load_module('_GeomProjLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GeomProjLib = swig_import_helper()
    del swig_import_helper
else:
    import _GeomProjLib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomProjLib.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomProjLib.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomProjLib.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomProjLib.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomProjLib.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomProjLib.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomProjLib.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomProjLib.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomProjLib.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomProjLib.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomProjLib.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomProjLib.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomProjLib.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomProjLib.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomProjLib.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomProjLib.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomProjLib.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomProjLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Geom2d
class geomprojlib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve2d(*args):
        """
        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] <Tolerance> is used as input if the projection needs an approximation. In this case, the reached tolerance is set in <Tolerance> as output. WARNING : if the projection has failed, this method returns a null Handle.

        :param C:
        :type C: Handle_Geom_Curve &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param S:
        :type S: Handle_Geom_Surface &
        :param UFirst:
        :type UFirst: float
        :param ULast:
        :type ULast: float
        :param VFirst:
        :type VFirst: float
        :param VLast:
        :type VLast: float
        :param Tolerance:
        :type Tolerance: float &
        :rtype: Handle_Geom2d_Curve

        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] <Tolerance> is used as input if the projection needs an approximation. In this case, the reached tolerance is set in <Tolerance> as output. WARNING : if the projection has failed, this method returns a null Handle.

        :param C:
        :type C: Handle_Geom_Curve &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param S:
        :type S: Handle_Geom_Surface &
        :param Tolerance:
        :type Tolerance: float &
        :rtype: Handle_Geom2d_Curve

        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle.

        :param C:
        :type C: Handle_Geom_Curve &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: Handle_Geom2d_Curve

        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle.

        :param C:
        :type C: Handle_Geom_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: Handle_Geom2d_Curve

        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle. can expand a little the bounds of surface

        :param C:
        :type C: Handle_Geom_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param UDeb:
        :type UDeb: float
        :param UFin:
        :type UFin: float
        :param VDeb:
        :type VDeb: float
        :param VFin:
        :type VFin: float
        :rtype: Handle_Geom2d_Curve

        * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle. can expand a little the bounds of surface

        :param C:
        :type C: Handle_Geom_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param UDeb:
        :type UDeb: float
        :param UFin:
        :type UFin: float
        :param VDeb:
        :type VDeb: float
        :param VFin:
        :type VFin: float
        :param Tolerance:
        :type Tolerance: float &
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomProjLib.geomprojlib_Curve2d(*args)

    Curve2d = staticmethod(Curve2d)

    def Project(*args):
        """
        * Constructs the 3d-curve from the normal projection of the Curve <C> on the surface <S>. WARNING : if the projection has failes returns a null Handle.

        :param C:
        :type C: Handle_Geom_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: Handle_Geom_Curve

        """
        return _GeomProjLib.geomprojlib_Project(*args)

    Project = staticmethod(Project)

    def ProjectOnPlane(*args):
        """
        * Constructs the 3d-curves from the projection of the curve <Curve> on the plane <Plane> along the direction <Dir>. If <KeepParametrization> is true, the parametrization of the Projected Curve <PC> will be the same as the parametrization of the initial curve <C>. It meens: proj(C(u)) = PC(u) for each u. Otherwize, the parametrization may change.

        :param Curve:
        :type Curve: Handle_Geom_Curve &
        :param Plane:
        :type Plane: Handle_Geom_Plane &
        :param Dir:
        :type Dir: gp_Dir
        :param KeepParametrization:
        :type KeepParametrization: bool
        :rtype: Handle_Geom_Curve

        """
        return _GeomProjLib.geomprojlib_ProjectOnPlane(*args)

    ProjectOnPlane = staticmethod(ProjectOnPlane)

    def __init__(self):
        _GeomProjLib.geomprojlib_swiginit(self, _GeomProjLib.new_geomprojlib())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


geomprojlib._kill_pointed = new_instancemethod(_GeomProjLib.geomprojlib__kill_pointed, None, geomprojlib)
geomprojlib_swigregister = _GeomProjLib.geomprojlib_swigregister
geomprojlib_swigregister(geomprojlib)

def geomprojlib_Curve2d(*args):
    """
    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] <Tolerance> is used as input if the projection needs an approximation. In this case, the reached tolerance is set in <Tolerance> as output. WARNING : if the projection has failed, this method returns a null Handle.

    :param C:
    :type C: Handle_Geom_Curve &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param S:
    :type S: Handle_Geom_Surface &
    :param UFirst:
    :type UFirst: float
    :param ULast:
    :type ULast: float
    :param VFirst:
    :type VFirst: float
    :param VLast:
    :type VLast: float
    :param Tolerance:
    :type Tolerance: float &
    :rtype: Handle_Geom2d_Curve

    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] <Tolerance> is used as input if the projection needs an approximation. In this case, the reached tolerance is set in <Tolerance> as output. WARNING : if the projection has failed, this method returns a null Handle.

    :param C:
    :type C: Handle_Geom_Curve &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param S:
    :type S: Handle_Geom_Surface &
    :param Tolerance:
    :type Tolerance: float &
    :rtype: Handle_Geom2d_Curve

    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ) The 3dCurve is taken between the parametrization range [First, Last] If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle.

    :param C:
    :type C: Handle_Geom_Curve &
    :param First:
    :type First: float
    :param Last:
    :type Last: float
    :param S:
    :type S: Handle_Geom_Surface &
    :rtype: Handle_Geom2d_Curve

    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle.

    :param C:
    :type C: Handle_Geom_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :rtype: Handle_Geom2d_Curve

    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle. can expand a little the bounds of surface

    :param C:
    :type C: Handle_Geom_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :param UDeb:
    :type UDeb: float
    :param UFin:
    :type UFin: float
    :param VDeb:
    :type VDeb: float
    :param VFin:
    :type VFin: float
    :rtype: Handle_Geom2d_Curve

    * gives the 2d-curve of a 3d-curve lying on a surface ( uses GeomProjLib_ProjectedCurve ). If the projection needs an approximation, Precision::PApproximation() is used. WARNING : if the projection has failed, this method returns a null Handle. can expand a little the bounds of surface

    :param C:
    :type C: Handle_Geom_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :param UDeb:
    :type UDeb: float
    :param UFin:
    :type UFin: float
    :param VDeb:
    :type VDeb: float
    :param VFin:
    :type VFin: float
    :param Tolerance:
    :type Tolerance: float &
    :rtype: Handle_Geom2d_Curve

    """
    return _GeomProjLib.geomprojlib_Curve2d(*args)

def geomprojlib_Project(*args):
    """
    * Constructs the 3d-curve from the normal projection of the Curve <C> on the surface <S>. WARNING : if the projection has failes returns a null Handle.

    :param C:
    :type C: Handle_Geom_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :rtype: Handle_Geom_Curve

    """
    return _GeomProjLib.geomprojlib_Project(*args)

def geomprojlib_ProjectOnPlane(*args):
    """
    * Constructs the 3d-curves from the projection of the curve <Curve> on the plane <Plane> along the direction <Dir>. If <KeepParametrization> is true, the parametrization of the Projected Curve <PC> will be the same as the parametrization of the initial curve <C>. It meens: proj(C(u)) = PC(u) for each u. Otherwize, the parametrization may change.

    :param Curve:
    :type Curve: Handle_Geom_Curve &
    :param Plane:
    :type Plane: Handle_Geom_Plane &
    :param Dir:
    :type Dir: gp_Dir
    :param KeepParametrization:
    :type KeepParametrization: bool
    :rtype: Handle_Geom_Curve

    """
    return _GeomProjLib.geomprojlib_ProjectOnPlane(*args)



