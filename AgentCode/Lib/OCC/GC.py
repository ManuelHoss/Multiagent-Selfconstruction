# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GC.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GC', [dirname(__file__)])
        except ImportError:
            import _GC
            return _GC
        if fp is not None:
            try:
                _mod = imp.load_module('_GC', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GC = swig_import_helper()
    del swig_import_helper
else:
    import _GC
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GC.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GC.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GC.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GC.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GC.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GC.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GC.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GC.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GC.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GC.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GC.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GC.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GC.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GC.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GC.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GC.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GC.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GC.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.gp
import OCC.Standard
import OCC.Geom
import OCC.MMgt
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.gce
class GC_MakeMirror(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        :param Axis:
        :type Axis: gp_Ax1
        :rtype: None

        :param Line:
        :type Line: gp_Lin
        :rtype: None

        * Make a symetry transformation af axis defined by <Point> and <Direc>.

        :param Point:
        :type Point: gp_Pnt
        :param Direc:
        :type Direc: gp_Dir
        :rtype: None

        * Make a symetry transformation of plane <Plane>.

        :param Plane:
        :type Plane: gp_Pln
        :rtype: None

        * Make a symetry transformation of plane <Plane>.

        :param Plane:
        :type Plane: gp_Ax2
        :rtype: None

        """
        _GC.GC_MakeMirror_swiginit(self, _GC.new_GC_MakeMirror(*args))

    def Value(self, *args):
        """
        * Returns the constructed transformation.

        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeMirror_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeMirror_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeMirror.Value = new_instancemethod(_GC.GC_MakeMirror_Value, None, GC_MakeMirror)
GC_MakeMirror.Operator = new_instancemethod(_GC.GC_MakeMirror_Operator, None, GC_MakeMirror)
GC_MakeMirror._kill_pointed = new_instancemethod(_GC.GC_MakeMirror__kill_pointed, None, GC_MakeMirror)
GC_MakeMirror_swigregister = _GC.GC_MakeMirror_swigregister
GC_MakeMirror_swigregister(GC_MakeMirror)

class GC_MakeRotation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a rotation through angle Angle about the axis defined by the line Line.

        :param Line:
        :type Line: gp_Lin
        :param Angle:
        :type Angle: float
        :rtype: None

        * Constructs a rotation through angle Angle about the axis defined by the axis Axis.

        :param Axis:
        :type Axis: gp_Ax1
        :param Angle:
        :type Angle: float
        :rtype: None

        * Constructs a rotation through angle Angle about the axis defined by the point Point and the unit vector Direc.

        :param Point:
        :type Point: gp_Pnt
        :param Direc:
        :type Direc: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _GC.GC_MakeRotation_swiginit(self, _GC.new_GC_MakeRotation(*args))

    def Value(self, *args):
        """
        * Returns the constructed transformation.

        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeRotation_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeRotation_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeRotation.Value = new_instancemethod(_GC.GC_MakeRotation_Value, None, GC_MakeRotation)
GC_MakeRotation.Operator = new_instancemethod(_GC.GC_MakeRotation_Operator, None, GC_MakeRotation)
GC_MakeRotation._kill_pointed = new_instancemethod(_GC.GC_MakeRotation__kill_pointed, None, GC_MakeRotation)
GC_MakeRotation_swigregister = _GC.GC_MakeRotation_swigregister
GC_MakeRotation_swigregister(GC_MakeRotation)

class GC_MakeScale(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a scaling transformation with - Point as the center of the transformation, and - Scale as the scale factor.

        :param Point:
        :type Point: gp_Pnt
        :param Scale:
        :type Scale: float
        :rtype: None

        """
        _GC.GC_MakeScale_swiginit(self, _GC.new_GC_MakeScale(*args))

    def Value(self, *args):
        """
        * Returns the constructed transformation.

        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeScale_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeScale_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeScale.Value = new_instancemethod(_GC.GC_MakeScale_Value, None, GC_MakeScale)
GC_MakeScale.Operator = new_instancemethod(_GC.GC_MakeScale_Operator, None, GC_MakeScale)
GC_MakeScale._kill_pointed = new_instancemethod(_GC.GC_MakeScale__kill_pointed, None, GC_MakeScale)
GC_MakeScale_swigregister = _GC.GC_MakeScale_swigregister
GC_MakeScale_swigregister(GC_MakeScale)

class GC_MakeTranslation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a translation along the vector ' Vect '

        :param Vect:
        :type Vect: gp_Vec
        :rtype: None

        * Constructs a translation along the vector (Point1,Point2) defined from the point Point1 to the point Point2.

        :param Point1:
        :type Point1: gp_Pnt
        :param Point2:
        :type Point2: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeTranslation_swiginit(self, _GC.new_GC_MakeTranslation(*args))

    def Value(self, *args):
        """
        * Returns the constructed transformation.

        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeTranslation_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Transformation

        """
        return _GC.GC_MakeTranslation_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeTranslation.Value = new_instancemethod(_GC.GC_MakeTranslation_Value, None, GC_MakeTranslation)
GC_MakeTranslation.Operator = new_instancemethod(_GC.GC_MakeTranslation_Operator, None, GC_MakeTranslation)
GC_MakeTranslation._kill_pointed = new_instancemethod(_GC.GC_MakeTranslation__kill_pointed, None, GC_MakeTranslation)
GC_MakeTranslation_swigregister = _GC.GC_MakeTranslation_swigregister
GC_MakeTranslation_swigregister(GC_MakeTranslation)

class GC_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        * Returns true if the construction is successful.

        :rtype: bool

        """
        return _GC.GC_Root_IsDone(self, *args)


    def Status(self, *args):
        """
        * Returns the status of the construction: - gce_Done, if the construction is successful, or - another value of the gce_ErrorType enumeration indicating why the construction failed.

        :rtype: gce_ErrorType

        """
        return _GC.GC_Root_Status(self, *args)


    def __init__(self):
        _GC.GC_Root_swiginit(self, _GC.new_GC_Root())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_Root.IsDone = new_instancemethod(_GC.GC_Root_IsDone, None, GC_Root)
GC_Root.Status = new_instancemethod(_GC.GC_Root_Status, None, GC_Root)
GC_Root._kill_pointed = new_instancemethod(_GC.GC_Root__kill_pointed, None, GC_Root)
GC_Root_swigregister = _GC.GC_Root_swigregister
GC_Root_swigregister(GC_Root)

class GC_MakeArcOfCircle(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make an arc of circle (TrimmedCurve from Geom) from a circle between two angles Alpha1 and Alpha2 given in radiians.

        :param Circ:
        :type Circ: gp_Circ
        :param Alpha1:
        :type Alpha1: float
        :param Alpha2:
        :type Alpha2: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Make an arc of circle (TrimmedCurve from Geom) from a circle between point <P> and the angle Alpha given in radians.

        :param Circ:
        :type Circ: gp_Circ
        :param P:
        :type P: gp_Pnt
        :param Alpha:
        :type Alpha: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Make an arc of circle (TrimmedCurve from Geom) from a circle between two points P1 and P2.

        :param Circ:
        :type Circ: gp_Circ
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Make an arc of circle (TrimmedCurve from Geom) from three points P1,P2,P3 between two points P1 and P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        * Make an arc of circle (TrimmedCurve from Geom) from two points P1,P2 and the tangente to the solution at the point P1. The orientation of the arc is: - the sense determined by the order of the points P1, P3 and P2; - the sense defined by the vector V; or - for other syntaxes: - the sense of Circ if Sense is true, or - the opposite sense if Sense is false. Note: Alpha1, Alpha2 and Alpha are angle values, given in radians. Warning If an error occurs (that is, when IsDone returns false), the Status function returns: - gce_ConfusedPoints if: - any 2 of the 3 points P1, P2 and P3 are coincident, or - P1 and P2 are coincident; or - gce_IntersectionError if: - P1, P2 and P3 are collinear and not coincident, or - the vector defined by the points P1 and P2 is collinear with the vector V.

        :param P1:
        :type P1: gp_Pnt
        :param V:
        :type V: gp_Vec
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeArcOfCircle_swiginit(self, _GC.new_GC_MakeArcOfCircle(*args))

    def Value(self, *args):
        """
        * Returns the constructed arc of circle. Exceptions StdFail_NotDone if no arc of circle is constructed.

        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfCircle_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfCircle_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeArcOfCircle.Value = new_instancemethod(_GC.GC_MakeArcOfCircle_Value, None, GC_MakeArcOfCircle)
GC_MakeArcOfCircle.Operator = new_instancemethod(_GC.GC_MakeArcOfCircle_Operator, None, GC_MakeArcOfCircle)
GC_MakeArcOfCircle._kill_pointed = new_instancemethod(_GC.GC_MakeArcOfCircle__kill_pointed, None, GC_MakeArcOfCircle)
GC_MakeArcOfCircle_swigregister = _GC.GC_MakeArcOfCircle_swigregister
GC_MakeArcOfCircle_swigregister(GC_MakeArcOfCircle)

class GC_MakeArcOfEllipse(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an arc of Ellipse (TrimmedCurve from Geom) from a Ellipse between two parameters Alpha1 and Alpha2.

        :param Elips:
        :type Elips: gp_Elips
        :param Alpha1:
        :type Alpha1: float
        :param Alpha2:
        :type Alpha2: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Constructs an arc of Ellipse (TrimmedCurve from Geom) from a Ellipse between point <P> and the angle Alpha given in radians.

        :param Elips:
        :type Elips: gp_Elips
        :param P:
        :type P: gp_Pnt
        :param Alpha:
        :type Alpha: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Constructs an arc of Ellipse (TrimmedCurve from Geom) from a Ellipse between two points P1 and P2. The orientation of the arc of ellipse is: - the sense of Elips if Sense is true, or - the opposite sense if Sense is false. Notes: - Alpha1, Alpha2 and Alpha are angle values, given in radians. - IsDone always returns true.

        :param Elips:
        :type Elips: gp_Elips
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param Sense:
        :type Sense: bool
        :rtype: None

        """
        _GC.GC_MakeArcOfEllipse_swiginit(self, _GC.new_GC_MakeArcOfEllipse(*args))

    def Value(self, *args):
        """
        * Returns the constructed arc of ellipse.

        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfEllipse_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfEllipse_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeArcOfEllipse.Value = new_instancemethod(_GC.GC_MakeArcOfEllipse_Value, None, GC_MakeArcOfEllipse)
GC_MakeArcOfEllipse.Operator = new_instancemethod(_GC.GC_MakeArcOfEllipse_Operator, None, GC_MakeArcOfEllipse)
GC_MakeArcOfEllipse._kill_pointed = new_instancemethod(_GC.GC_MakeArcOfEllipse__kill_pointed, None, GC_MakeArcOfEllipse)
GC_MakeArcOfEllipse_swigregister = _GC.GC_MakeArcOfEllipse_swigregister
GC_MakeArcOfEllipse_swigregister(GC_MakeArcOfEllipse)

class GC_MakeArcOfHyperbola(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an arc of Hyperbola (TrimmedCurve from Geom) from a Hyperbola between two parameters Alpha1 and Alpha2 (given in radians).

        :param Hypr:
        :type Hypr: gp_Hypr
        :param Alpha1:
        :type Alpha1: float
        :param Alpha2:
        :type Alpha2: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Creates an arc of Hyperbola (TrimmedCurve from Geom) from a Hyperbola between point <P> and the parameter Alpha (given in radians).

        :param Hypr:
        :type Hypr: gp_Hypr
        :param P:
        :type P: gp_Pnt
        :param Alpha:
        :type Alpha: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Creates an arc of Hyperbola (TrimmedCurve from Geom) from a Hyperbola between two points P1 and P2. The orientation of the arc of hyperbola is: - the sense of Hypr if Sense is true, or - the opposite sense if Sense is false.

        :param Hypr:
        :type Hypr: gp_Hypr
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param Sense:
        :type Sense: bool
        :rtype: None

        """
        _GC.GC_MakeArcOfHyperbola_swiginit(self, _GC.new_GC_MakeArcOfHyperbola(*args))

    def Value(self, *args):
        """
        * Returns the constructed arc of hyperbola.

        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfHyperbola_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfHyperbola_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeArcOfHyperbola.Value = new_instancemethod(_GC.GC_MakeArcOfHyperbola_Value, None, GC_MakeArcOfHyperbola)
GC_MakeArcOfHyperbola.Operator = new_instancemethod(_GC.GC_MakeArcOfHyperbola_Operator, None, GC_MakeArcOfHyperbola)
GC_MakeArcOfHyperbola._kill_pointed = new_instancemethod(_GC.GC_MakeArcOfHyperbola__kill_pointed, None, GC_MakeArcOfHyperbola)
GC_MakeArcOfHyperbola_swigregister = _GC.GC_MakeArcOfHyperbola_swigregister
GC_MakeArcOfHyperbola_swigregister(GC_MakeArcOfHyperbola)

class GC_MakeArcOfParabola(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an arc of Parabola (TrimmedCurve from Geom) from a Parabola between two parameters Alpha1 and Alpha2 (given in radians).

        :param Parab:
        :type Parab: gp_Parab
        :param Alpha1:
        :type Alpha1: float
        :param Alpha2:
        :type Alpha2: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Creates an arc of Parabola (TrimmedCurve from Geom) from a Parabola between point <P> and the parameter Alpha (given in radians).

        :param Parab:
        :type Parab: gp_Parab
        :param P:
        :type P: gp_Pnt
        :param Alpha:
        :type Alpha: float
        :param Sense:
        :type Sense: bool
        :rtype: None

        * Creates an arc of Parabola (TrimmedCurve from Geom) from a Parabola between two points P1 and P2.

        :param Parab:
        :type Parab: gp_Parab
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param Sense:
        :type Sense: bool
        :rtype: None

        """
        _GC.GC_MakeArcOfParabola_swiginit(self, _GC.new_GC_MakeArcOfParabola(*args))

    def Value(self, *args):
        """
        * Returns the constructed arc of parabola.

        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfParabola_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeArcOfParabola_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeArcOfParabola.Value = new_instancemethod(_GC.GC_MakeArcOfParabola_Value, None, GC_MakeArcOfParabola)
GC_MakeArcOfParabola.Operator = new_instancemethod(_GC.GC_MakeArcOfParabola_Operator, None, GC_MakeArcOfParabola)
GC_MakeArcOfParabola._kill_pointed = new_instancemethod(_GC.GC_MakeArcOfParabola__kill_pointed, None, GC_MakeArcOfParabola)
GC_MakeArcOfParabola_swigregister = _GC.GC_MakeArcOfParabola_swigregister
GC_MakeArcOfParabola_swigregister(GC_MakeArcOfParabola)

class GC_MakeCircle(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates a circle from a non persistent circle C by its conversion.

        :param C:
        :type C: gp_Circ
        :rtype: None

        * A2 is the local coordinates system of the circle. It is not forbidden to create a circle with Radius = 0.0 Status is 'NegativeRadius' if Radius < 0.

        :param A2:
        :type A2: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        * Make a Circle from Geom <TheCirc> parallel to another Circ <Circ> with a distance <Dist>. If Dist is greater than zero the result is enclosing the circle <Circ>, else the result is enclosed by the circle <Circ>.

        :param Circ:
        :type Circ: gp_Circ
        :param Dist:
        :type Dist: float
        :rtype: None

        * Make a Circle from Geom <TheCirc> parallel to another Circ <Circ> and passing through a Pnt <Point>.

        :param Circ:
        :type Circ: gp_Circ
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        * Make a Circ from gp <TheCirc> passing through 3 Pnt2d <P1>,<P2>,<P3>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        * Make a Circle from Geom <TheCirc> with its center <Center> and the normal of its plane <Norm> and its radius <Radius>.

        :param Center:
        :type Center: gp_Pnt
        :param Norm:
        :type Norm: gp_Dir
        :param Radius:
        :type Radius: float
        :rtype: None

        * Make a Circle from Geom <TheCirc> with its center <Center> and the normal of its plane defined by the two points <Center> and <PtAxis> and its radius <Radius>.

        :param Center:
        :type Center: gp_Pnt
        :param PtAxis:
        :type PtAxis: gp_Pnt
        :param Radius:
        :type Radius: float
        :rtype: None

        * Make a Circle from Geom <TheCirc> with its center <Center> and its radius <Radius>.

        :param Axis:
        :type Axis: gp_Ax1
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _GC.GC_MakeCircle_swiginit(self, _GC.new_GC_MakeCircle(*args))

    def Value(self, *args):
        """
        * Returns the constructed circle. Exceptions StdFail_NotDone if no circle is constructed.

        :rtype: Handle_Geom_Circle

        """
        return _GC.GC_MakeCircle_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Circle

        """
        return _GC.GC_MakeCircle_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeCircle.Value = new_instancemethod(_GC.GC_MakeCircle_Value, None, GC_MakeCircle)
GC_MakeCircle.Operator = new_instancemethod(_GC.GC_MakeCircle_Operator, None, GC_MakeCircle)
GC_MakeCircle._kill_pointed = new_instancemethod(_GC.GC_MakeCircle__kill_pointed, None, GC_MakeCircle)
GC_MakeCircle_swigregister = _GC.GC_MakeCircle_swigregister
GC_MakeCircle_swigregister(GC_MakeCircle)

class GC_MakeConicalSurface(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * A2 defines the local coordinate system of the conical surface. Ang is the conical surface semi-angle ]0, PI/2[. Radius is the radius of the circle Viso in the placement plane of the conical surface defined with 'XAxis' and 'YAxis'. The 'ZDirection' of A2 defines the direction of the surface's axis of symmetry. If the location point of A2 is the apex of the surface Radius = 0 . At the creation the parametrization of the surface is defined such that the normal Vector (N = D1U ^ D1V) is oriented towards the 'outside region' of the surface. Status is 'NegativeRadius' if Radius < 0.0 or 'BadAngle' if Ang < Resolution from gp or Ang >= PI/ - Resolution

        :param A2:
        :type A2: gp_Ax2
        :param Ang:
        :type Ang: float
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a ConicalSurface from a non persistent Cone from package gp.

        :param C:
        :type C: gp_Cone
        :rtype: None

        * Make a ConicalSurface from Geom <TheCone> parallel to another ConicalSurface <Cone> and passing through a Pnt <Point>.

        :param Cone:
        :type Cone: gp_Cone
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        * Make a ConicalSurface from Geom <TheCone> parallel to another ConicalSurface <Cone> at the distance <Dist> which can be greater or lower than zero.

        :param Cone:
        :type Cone: gp_Cone
        :param Dist:
        :type Dist: float
        :rtype: None

        * Make a ConicalSurface from Geom <TheCone> passing through 3 Pnt <P1>,<P2>,<P3>. Its axis is <P1P2> and the radius of its base is the distance between <P3> and <P1P2>. The distance between <P4> and <P1P2> is the radius of the section passing through <P4>. An error iss raised if <P1>,<P2>,<P3>,<P4> are colinear or if <P3P4> is perpendicular to <P1P2> or <P3P4> is colinear to <P1P2>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :param P4:
        :type P4: gp_Pnt
        :rtype: None

        * Make a ConicalSurface by its axis <Axis> and and two points.

        :param Axis:
        :type Axis: gp_Ax1
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        * Make a ConicalSurface by its axis <Axis> and and two points.

        :param Axis:
        :type Axis: gp_Lin
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        * Make a ConicalSurface with two points and two radius. The axis of the solution is the line passing through <P1> and <P2>. <R1> is the radius of the section passing through <P1> and <R2> the radius of the section passing through <P2>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :rtype: None

        """
        _GC.GC_MakeConicalSurface_swiginit(self, _GC.new_GC_MakeConicalSurface(*args))

    def Value(self, *args):
        """
        * Returns the constructed cone. Exceptions StdFail_NotDone if no cone is constructed.

        :rtype: Handle_Geom_ConicalSurface

        """
        return _GC.GC_MakeConicalSurface_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_ConicalSurface

        """
        return _GC.GC_MakeConicalSurface_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeConicalSurface.Value = new_instancemethod(_GC.GC_MakeConicalSurface_Value, None, GC_MakeConicalSurface)
GC_MakeConicalSurface.Operator = new_instancemethod(_GC.GC_MakeConicalSurface_Operator, None, GC_MakeConicalSurface)
GC_MakeConicalSurface._kill_pointed = new_instancemethod(_GC.GC_MakeConicalSurface__kill_pointed, None, GC_MakeConicalSurface)
GC_MakeConicalSurface_swigregister = _GC.GC_MakeConicalSurface_swigregister
GC_MakeConicalSurface_swigregister(GC_MakeConicalSurface)

class GC_MakeCylindricalSurface(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * A2 defines the local coordinate system of the cylindrical surface. The 'ZDirection' of A2 defines the direction of the surface's axis of symmetry. At the creation the parametrization of the surface is defined such that the normal Vector (N = D1U ^ D1V) is oriented towards the 'outside region' of the surface. Warnings : It is not forbidden to create a cylindrical surface with Radius = 0.0 Status is 'NegativeRadius' if Radius < 0.0

        :param A2:
        :type A2: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a CylindricalSurface from a non persistent Cylinder from package gp.

        :param C:
        :type C: gp_Cylinder
        :rtype: None

        * Make a CylindricalSurface from Geom <TheCylinder> parallel to another CylindricalSurface <Cylinder> and passing through a Pnt <Point>.

        :param Cyl:
        :type Cyl: gp_Cylinder
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        * Make a CylindricalSurface from Geom <TheCylinder> parallel to another CylindricalSurface <Cylinder> at the distance <Dist> which can be greater or lower than zero. The radius of the result is the absolute value of the radius of <Cyl> plus <Dist>

        :param Cyl:
        :type Cyl: gp_Cylinder
        :param Dist:
        :type Dist: float
        :rtype: None

        * Make a CylindricalSurface from Geom <TheCylinder> passing through 3 Pnt <P1>,<P2>,<P3>. Its axis is <P1P2> and its radius is the distance between <P3> and <P1P2>

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        * Make a CylindricalSurface by its axis <Axis> and radius <Radius>.

        :param Axis:
        :type Axis: gp_Ax1
        :param Radius:
        :type Radius: float
        :rtype: None

        * Make a CylindricalSurface by its circular base.

        :param Circ:
        :type Circ: gp_Circ
        :rtype: None

        """
        _GC.GC_MakeCylindricalSurface_swiginit(self, _GC.new_GC_MakeCylindricalSurface(*args))

    def Value(self, *args):
        """
        * Returns the constructed cylinder. Exceptions StdFail_NotDone if no cylinder is constructed.

        :rtype: Handle_Geom_CylindricalSurface

        """
        return _GC.GC_MakeCylindricalSurface_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_CylindricalSurface

        """
        return _GC.GC_MakeCylindricalSurface_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeCylindricalSurface.Value = new_instancemethod(_GC.GC_MakeCylindricalSurface_Value, None, GC_MakeCylindricalSurface)
GC_MakeCylindricalSurface.Operator = new_instancemethod(_GC.GC_MakeCylindricalSurface_Operator, None, GC_MakeCylindricalSurface)
GC_MakeCylindricalSurface._kill_pointed = new_instancemethod(_GC.GC_MakeCylindricalSurface__kill_pointed, None, GC_MakeCylindricalSurface)
GC_MakeCylindricalSurface_swigregister = _GC.GC_MakeCylindricalSurface_swigregister
GC_MakeCylindricalSurface_swigregister(GC_MakeCylindricalSurface)

class GC_MakeEllipse(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an ellipse from a non persistent ellipse E from package gp by its conversion.

        :param E:
        :type E: gp_Elips
        :rtype: None

        * Constructs an ellipse with major and minor radii MajorRadius and MinorRadius, and located in the plane defined by the 'X Axis' and 'Y Axis' of the coordinate system A2, where: - its center is the origin of A2, and - its major axis is the 'X Axis' of A2; Warnings : The MakeEllipse class does not prevent the construction of an ellipse where MajorRadius is equal to MinorRadius. If an error occurs (that is, when IsDone returns false), the Status function returns: - gce_InvertRadius if MajorRadius is less than MinorRadius; - gce_NegativeRadius if MinorRadius is less than 0.0; - gce_NullAxis if the points S1 and Center are coincident; or - gce_InvertAxis if: - the major radius computed with Center and S1 is less than the minor radius computed with Center, S1 and S2, or - Center, S1 and S2 are collinear.

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        * Constructs an ellipse centered on the point Center, where - the plane of the ellipse is defined by Center, S1 and S2, - its major axis is defined by Center and S1, - its major radius is the distance between Center and S1, and - its minor radius is the distance between S2 and the major axis.

        :param S1:
        :type S1: gp_Pnt
        :param S2:
        :type S2: gp_Pnt
        :param Center:
        :type Center: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeEllipse_swiginit(self, _GC.new_GC_MakeEllipse(*args))

    def Value(self, *args):
        """
        * Returns the constructed ellipse. Exceptions StdFail_NotDone if no ellipse is constructed.

        :rtype: Handle_Geom_Ellipse

        """
        return _GC.GC_MakeEllipse_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Ellipse

        """
        return _GC.GC_MakeEllipse_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeEllipse.Value = new_instancemethod(_GC.GC_MakeEllipse_Value, None, GC_MakeEllipse)
GC_MakeEllipse.Operator = new_instancemethod(_GC.GC_MakeEllipse_Operator, None, GC_MakeEllipse)
GC_MakeEllipse._kill_pointed = new_instancemethod(_GC.GC_MakeEllipse__kill_pointed, None, GC_MakeEllipse)
GC_MakeEllipse_swigregister = _GC.GC_MakeEllipse_swigregister
GC_MakeEllipse_swigregister(GC_MakeEllipse)

class GC_MakeHyperbola(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an Hyperbola from a non persistent hyperbola from package gp by conversion.

        :param H:
        :type H: gp_Hypr
        :rtype: None

        * Constructs a hyperbola centered on the origin of the coordinate system A2, with major and minor radii MajorRadius and MinorRadius, where: the plane of the hyperbola is defined by the 'X Axis' and 'Y Axis' of A2, - its major axis is the 'X Axis' of A2.

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        * Constructs a hyperbola centered on the point Center, where - the plane of the hyperbola is defined by Center, S1 and S2, - its major axis is defined by Center and S1, - its major radius is the distance between Center and S1, and - its minor radius is the distance between S2 and the major axis;

        :param S1:
        :type S1: gp_Pnt
        :param S2:
        :type S2: gp_Pnt
        :param Center:
        :type Center: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeHyperbola_swiginit(self, _GC.new_GC_MakeHyperbola(*args))

    def Value(self, *args):
        """
        * Returns the constructed hyperbola. Exceptions StdFail_NotDone if no hyperbola is constructed.

        :rtype: Handle_Geom_Hyperbola

        """
        return _GC.GC_MakeHyperbola_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Hyperbola

        """
        return _GC.GC_MakeHyperbola_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeHyperbola.Value = new_instancemethod(_GC.GC_MakeHyperbola_Value, None, GC_MakeHyperbola)
GC_MakeHyperbola.Operator = new_instancemethod(_GC.GC_MakeHyperbola_Operator, None, GC_MakeHyperbola)
GC_MakeHyperbola._kill_pointed = new_instancemethod(_GC.GC_MakeHyperbola__kill_pointed, None, GC_MakeHyperbola)
GC_MakeHyperbola_swigregister = _GC.GC_MakeHyperbola_swigregister
GC_MakeHyperbola_swigregister(GC_MakeHyperbola)

class GC_MakeLine(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a line located in 3D space with the axis placement A1. The Location of A1 is the origin of the line.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Creates a line from a non persistent line from package gp.

        :param L:
        :type L: gp_Lin
        :rtype: None

        * P is the origin and V is the direction of the line.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        * Make a Line from Geom <TheLin> parallel to another Lin <Lin> and passing through a Pnt <Point>.

        :param Lin:
        :type Lin: gp_Lin
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        * Make a Line from Geom <TheLin> passing through 2 Pnt <P1>,<P2>. It returns false if <p1> and <P2> are confused. Warning If the points P1 and P2 are coincident (that is, when IsDone returns false), the Status function returns gce_ConfusedPoints.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeLine_swiginit(self, _GC.new_GC_MakeLine(*args))

    def Value(self, *args):
        """
        * Returns the constructed line. Exceptions StdFail_NotDone if no line is constructed.

        :rtype: Handle_Geom_Line

        """
        return _GC.GC_MakeLine_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Line

        """
        return _GC.GC_MakeLine_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeLine.Value = new_instancemethod(_GC.GC_MakeLine_Value, None, GC_MakeLine)
GC_MakeLine.Operator = new_instancemethod(_GC.GC_MakeLine_Operator, None, GC_MakeLine)
GC_MakeLine._kill_pointed = new_instancemethod(_GC.GC_MakeLine__kill_pointed, None, GC_MakeLine)
GC_MakeLine_swigregister = _GC.GC_MakeLine_swigregister
GC_MakeLine_swigregister(GC_MakeLine)

class GC_MakePlane(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a plane located in 3D space with an axis placement two axis. The 'ZDirection' of 'A2' is the direction normal to the plane. The 'Location' point of 'A2' is the origin of the plane. The 'XDirection' and 'YDirection' of 'A2' define the directions of the U isoparametric and V isoparametric curves.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        * Creates a plane from a non persistent plane from package gp.

        :param Pl:
        :type Pl: gp_Pln
        :rtype: None

        * P is the 'Location' point or origin of the plane. V is the direction normal to the plane.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        * Creates a plane from its cartesian equation : Ax + By + Cz + D = 0.0 Status is 'BadEquation' if Sqrt (A*A + B*B + C*C) <= Resolution from gp

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :rtype: None

        * Make a Plane from Geom <ThePlane> parallel to another Pln <Pln> and passing through a Pnt <Point>.

        :param Pln:
        :type Pln: gp_Pln
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        * Make a Plane from Geom <ThePlane> parallel to another Pln <Pln> at the distance <Dist> which can be greater or lower than zero. In the first case the result is at the distance <Dist> to the plane <Pln> in the direction of the normal to <Pln>. Otherwize it is in the oposite direction.

        :param Pln:
        :type Pln: gp_Pln
        :param Dist:
        :type Dist: float
        :rtype: None

        * Make a Plane from Geom <ThePlane> passing through 3 Pnt <P1>,<P2>,<P3>. It returns false if <P1> <P2> <P3> are confused.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        * Make a Plane passing through the location of <Axis>and normal to the Direction of <Axis>.

        :param Axis:
        :type Axis: gp_Ax1
        :rtype: None

        """
        _GC.GC_MakePlane_swiginit(self, _GC.new_GC_MakePlane(*args))

    def Value(self, *args):
        """
        * Returns the constructed plane. Exceptions StdFail_NotDone if no plane is constructed.

        :rtype: Handle_Geom_Plane

        """
        return _GC.GC_MakePlane_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_Plane

        """
        return _GC.GC_MakePlane_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakePlane.Value = new_instancemethod(_GC.GC_MakePlane_Value, None, GC_MakePlane)
GC_MakePlane.Operator = new_instancemethod(_GC.GC_MakePlane_Operator, None, GC_MakePlane)
GC_MakePlane._kill_pointed = new_instancemethod(_GC.GC_MakePlane__kill_pointed, None, GC_MakePlane)
GC_MakePlane_swigregister = _GC.GC_MakePlane_swigregister
GC_MakePlane_swigregister(GC_MakePlane)

class GC_MakeSegment(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make a segment of Line from the 2 points <P1> and <P2>. It returns NullObject if <P1> and <P2> are confused.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        * Make a segment of Line from the line <Line1> between the two parameters U1 and U2. It returns NullObject if <U1> is equal <U2>.

        :param Line:
        :type Line: gp_Lin
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :rtype: None

        * Make a segment of Line from the line <Line1> between the point <Point> and the parameter Ulast. It returns NullObject if <U1> is equal <U2>.

        :param Line:
        :type Line: gp_Lin
        :param Point:
        :type Point: gp_Pnt
        :param Ulast:
        :type Ulast: float
        :rtype: None

        * Make a segment of Line from the line <Line1> between the two points <P1> and <P2>. It returns NullObject if <U1> is equal <U2>.

        :param Line:
        :type Line: gp_Lin
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeSegment_swiginit(self, _GC.new_GC_MakeSegment(*args))

    def Value(self, *args):
        """
        * Returns the constructed line segment.

        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeSegment_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_TrimmedCurve

        """
        return _GC.GC_MakeSegment_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeSegment.Value = new_instancemethod(_GC.GC_MakeSegment_Value, None, GC_MakeSegment)
GC_MakeSegment.Operator = new_instancemethod(_GC.GC_MakeSegment_Operator, None, GC_MakeSegment)
GC_MakeSegment._kill_pointed = new_instancemethod(_GC.GC_MakeSegment__kill_pointed, None, GC_MakeSegment)
GC_MakeSegment_swigregister = _GC.GC_MakeSegment_swigregister
GC_MakeSegment_swigregister(GC_MakeSegment)

class GC_MakeTrimmedCone(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make a RectangularTrimmedSurface <TheCone> from Geom It is trimmed by P3 and P4. Its axis is <P1P2> and the radius of its base is the distance between <P3> and <P1P2>. The distance between <P4> and <P1P2> is the radius of the section passing through <P4>. An error iss raised if <P1>,<P2>,<P3>,<P4> are colinear or if <P3P4> is perpendicular to <P1P2> or <P3P4> is colinear to <P1P2>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :param P4:
        :type P4: gp_Pnt
        :rtype: None

        * Make a RectangularTrimmedSurface from Geom <TheCone> from a cone and trimmed by two points P1 and P2 and the two radius <R1> and <R2> of the sections passing through <P1> an <P2>. Warning If an error occurs (that is, when IsDone returns false), the Status function returns: - gce_ConfusedPoints if points P1 and P2, or P3 and P4, are coincident; - gce_NullAngle if: - the lines joining P1 to P2 and P3 to P4 are parallel, or - R1 and R2 are equal (i.e. their difference is less than gp::Resolution()); - gce_NullRadius if: - the line joining P1 to P2 is perpendicular to the line joining P3 to P4, or - the points P1, P2, P3 and P4 are collinear; - gce_NegativeRadius if R1 or R2 is negative; or - gce_NullAxis if points P1 and P2 are coincident (2nd syntax only).

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :rtype: None

        """
        _GC.GC_MakeTrimmedCone_swiginit(self, _GC.new_GC_MakeTrimmedCone(*args))

    def Value(self, *args):
        """
        * Returns the constructed trimmed cone. StdFail_NotDone if no trimmed cone is constructed.

        :rtype: Handle_Geom_RectangularTrimmedSurface

        """
        return _GC.GC_MakeTrimmedCone_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_RectangularTrimmedSurface

        """
        return _GC.GC_MakeTrimmedCone_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeTrimmedCone.Value = new_instancemethod(_GC.GC_MakeTrimmedCone_Value, None, GC_MakeTrimmedCone)
GC_MakeTrimmedCone.Operator = new_instancemethod(_GC.GC_MakeTrimmedCone_Operator, None, GC_MakeTrimmedCone)
GC_MakeTrimmedCone._kill_pointed = new_instancemethod(_GC.GC_MakeTrimmedCone__kill_pointed, None, GC_MakeTrimmedCone)
GC_MakeTrimmedCone_swigregister = _GC.GC_MakeTrimmedCone_swigregister
GC_MakeTrimmedCone_swigregister(GC_MakeTrimmedCone)

class GC_MakeTrimmedCylinder(GC_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make a cylindricalSurface <Cyl> from Geom Its axis is is <P1P2> and its radius is the distance between <P3> and <P1P2>. The height is the distance between P1 and P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        * Make a cylindricalSurface <Cyl> from gp by its base <Circ>. Its axis is the normal to the plane defined bi <Circ>. <Height> can be greater than zero or lower than zero. In the first case the V parametric direction of the result has the same orientation as the normal to <Circ>. In the other case it has the opposite orientation.

        :param Circ:
        :type Circ: gp_Circ
        :param Height:
        :type Height: float
        :rtype: None

        * Make a cylindricalSurface <Cyl> from gp by its axis <A1> and its radius <Radius>. It returns NullObject if <Radius> is lower than zero. <Height> can be greater than zero or lower than zero. In the first case the V parametric direction of the result has the same orientation as <A1>. In the other case it has the opposite orientation.

        :param A1:
        :type A1: gp_Ax1
        :param Radius:
        :type Radius: float
        :param Height:
        :type Height: float
        :rtype: None

        * Make a RectangularTrimmedSurface <Cylinder> from gp by a cylinder from gp. It is trimmed by the point <P> and the heigh <Heigh>. <Height> can be greater than zero or lower than zero. in the first case the limit section is in the side of the positives V paramters of <Cyl> and in the other side if <Heigh> is lower than zero.

        :param Cyl:
        :type Cyl: gp_Cylinder
        :param P:
        :type P: gp_Pnt
        :param Height:
        :type Height: float
        :rtype: None

        * Make a RectangularTrimmedSurface <Cylinder> from gp by a cylinder from gp. It is trimmed by the two points <P1> and <P2>. Warning If an error occurs (that is, when IsDone returns false), the Status function returns: - gce_NegativeRadius if Radius is less than 0.0, or - gce_ConfusedPoints if the points P1 and P2 are coincident. - gce_ColinearPoints if the points P1, P2 and P3 are collinear.

        :param Cyl:
        :type Cyl: gp_Cylinder
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _GC.GC_MakeTrimmedCylinder_swiginit(self, _GC.new_GC_MakeTrimmedCylinder(*args))

    def Value(self, *args):
        """
        * Returns the constructed trimmed cylinder. Exceptions StdFail_NotDone if no trimmed cylinder is constructed.

        :rtype: Handle_Geom_RectangularTrimmedSurface

        """
        return _GC.GC_MakeTrimmedCylinder_Value(self, *args)


    def Operator(self, *args):
        """
        :rtype: Handle_Geom_RectangularTrimmedSurface

        """
        return _GC.GC_MakeTrimmedCylinder_Operator(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GC_MakeTrimmedCylinder.Value = new_instancemethod(_GC.GC_MakeTrimmedCylinder_Value, None, GC_MakeTrimmedCylinder)
GC_MakeTrimmedCylinder.Operator = new_instancemethod(_GC.GC_MakeTrimmedCylinder_Operator, None, GC_MakeTrimmedCylinder)
GC_MakeTrimmedCylinder._kill_pointed = new_instancemethod(_GC.GC_MakeTrimmedCylinder__kill_pointed, None, GC_MakeTrimmedCylinder)
GC_MakeTrimmedCylinder_swigregister = _GC.GC_MakeTrimmedCylinder_swigregister
GC_MakeTrimmedCylinder_swigregister(GC_MakeTrimmedCylinder)



