# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Visual3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Visual3d', [dirname(__file__)])
        except ImportError:
            import _Visual3d
            return _Visual3d
        if fp is not None:
            try:
                _mod = imp.load_module('_Visual3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Visual3d = swig_import_helper()
    del swig_import_helper
else:
    import _Visual3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Visual3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Visual3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Visual3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Visual3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Visual3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Visual3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Visual3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Visual3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Visual3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Visual3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Visual3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Visual3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Visual3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Visual3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Visual3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Visual3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Visual3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Visual3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.Graphic3d
import OCC.Aspect
import OCC.Quantity
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.TShort
import OCC.TColQuantity
import OCC.gp
import OCC.Image
import OCC.OSD

_Visual3d.Visual3d_TOA_YES_swigconstant(_Visual3d)
Visual3d_TOA_YES = _Visual3d.Visual3d_TOA_YES

_Visual3d.Visual3d_TOA_NO_swigconstant(_Visual3d)
Visual3d_TOA_NO = _Visual3d.Visual3d_TOA_NO

_Visual3d.Visual3d_TOA_COMPUTE_swigconstant(_Visual3d)
Visual3d_TOA_COMPUTE = _Visual3d.Visual3d_TOA_COMPUTE

_Visual3d.Visual3d_TOBM_AUTOMATIC_swigconstant(_Visual3d)
Visual3d_TOBM_AUTOMATIC = _Visual3d.Visual3d_TOBM_AUTOMATIC

_Visual3d.Visual3d_TOBM_FORCE_swigconstant(_Visual3d)
Visual3d_TOBM_FORCE = _Visual3d.Visual3d_TOBM_FORCE

_Visual3d.Visual3d_TOBM_DISABLE_swigconstant(_Visual3d)
Visual3d_TOBM_DISABLE = _Visual3d.Visual3d_TOBM_DISABLE

_Visual3d.Visual3d_TOLS_AMBIENT_swigconstant(_Visual3d)
Visual3d_TOLS_AMBIENT = _Visual3d.Visual3d_TOLS_AMBIENT

_Visual3d.Visual3d_TOLS_DIRECTIONAL_swigconstant(_Visual3d)
Visual3d_TOLS_DIRECTIONAL = _Visual3d.Visual3d_TOLS_DIRECTIONAL

_Visual3d.Visual3d_TOLS_POSITIONAL_swigconstant(_Visual3d)
Visual3d_TOLS_POSITIONAL = _Visual3d.Visual3d_TOLS_POSITIONAL

_Visual3d.Visual3d_TOLS_SPOT_swigconstant(_Visual3d)
Visual3d_TOLS_SPOT = _Visual3d.Visual3d_TOLS_SPOT

_Visual3d.Visual3d_TOM_NONE_swigconstant(_Visual3d)
Visual3d_TOM_NONE = _Visual3d.Visual3d_TOM_NONE

_Visual3d.Visual3d_TOM_INTERP_COLOR_swigconstant(_Visual3d)
Visual3d_TOM_INTERP_COLOR = _Visual3d.Visual3d_TOM_INTERP_COLOR

_Visual3d.Visual3d_TOM_FACET_swigconstant(_Visual3d)
Visual3d_TOM_FACET = _Visual3d.Visual3d_TOM_FACET

_Visual3d.Visual3d_TOM_VERTEX_swigconstant(_Visual3d)
Visual3d_TOM_VERTEX = _Visual3d.Visual3d_TOM_VERTEX

_Visual3d.Visual3d_TOO_TOPFIRST_swigconstant(_Visual3d)
Visual3d_TOO_TOPFIRST = _Visual3d.Visual3d_TOO_TOPFIRST

_Visual3d.Visual3d_TOO_BOTTOMFIRST_swigconstant(_Visual3d)
Visual3d_TOO_BOTTOMFIRST = _Visual3d.Visual3d_TOO_BOTTOMFIRST

_Visual3d.Visual3d_TOP_PERSPECTIVE_swigconstant(_Visual3d)
Visual3d_TOP_PERSPECTIVE = _Visual3d.Visual3d_TOP_PERSPECTIVE

_Visual3d.Visual3d_TOP_PARALLEL_swigconstant(_Visual3d)
Visual3d_TOP_PARALLEL = _Visual3d.Visual3d_TOP_PARALLEL

_Visual3d.Visual3d_TOD_NONE_swigconstant(_Visual3d)
Visual3d_TOD_NONE = _Visual3d.Visual3d_TOD_NONE

_Visual3d.Visual3d_TOD_ENVIRONMENT_swigconstant(_Visual3d)
Visual3d_TOD_ENVIRONMENT = _Visual3d.Visual3d_TOD_ENVIRONMENT

_Visual3d.Visual3d_TOD_ALL_swigconstant(_Visual3d)
Visual3d_TOD_ALL = _Visual3d.Visual3d_TOD_ALL

_Visual3d.Visual3d_TOV_WIREFRAME_swigconstant(_Visual3d)
Visual3d_TOV_WIREFRAME = _Visual3d.Visual3d_TOV_WIREFRAME

_Visual3d.Visual3d_TOV_SHADING_swigconstant(_Visual3d)
Visual3d_TOV_SHADING = _Visual3d.Visual3d_TOV_SHADING
class Visual3d_ContextPick(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context from default values //!	 Aperture	: 4.0 //!	 Depth	: 10 //!	 Order	: TOO_TOPFIRST

        :rtype: None

        * Creates a context with the values defined Warning: Raises ContextPickDefinitionError if <Depth> or //!	 <Aperture> is a negative value.

        :param Aperture:
        :type Aperture: float
        :param Depth:
        :type Depth: int
        :param Order:
        :type Order: Visual3d_TypeOfOrder
        :rtype: None

        """
        _Visual3d.Visual3d_ContextPick_swiginit(self, _Visual3d.new_Visual3d_ContextPick(*args))

    def SetAperture(self, *args):
        """
        * Modifies the size of the pick window. Category: Methods to modifies the class definition Warning: Raises ContextPickDefinitionError if <Aperture> is //!	 a negative value.

        :param Aperture:
        :type Aperture: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetAperture(self, *args)


    def SetDepth(self, *args):
        """
        * Modifies the pick depth a priori. Category: Methods to modifies the class definition Warning: Raises ContextPickDefinitionError if <Depth> is //!	 a negative value.

        :param Depth:
        :type Depth: int
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetDepth(self, *args)


    def SetOrder(self, *args):
        """
        * Modifies the order of picking. //!	 TypeOfOrder : TOO_TOPFIRST //!			 TOO_BOTTOMFIRST

        :param Order:
        :type Order: Visual3d_TypeOfOrder
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetOrder(self, *args)


    def Aperture(self, *args):
        """
        * Returns the size of the pick window <self>.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextPick_Aperture(self, *args)


    def Depth(self, *args):
        """
        * Returns the effective pick depth of <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_ContextPick_Depth(self, *args)


    def Order(self, *args):
        """
        * Returns the order of picking of <self>. //!	 TypeOfOrder	: TOO_TOPFIRST //!			 TOO_BOTTOMFIRST

        :rtype: Visual3d_TypeOfOrder

        """
        return _Visual3d.Visual3d_ContextPick_Order(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ContextPick.SetAperture = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetAperture, None, Visual3d_ContextPick)
Visual3d_ContextPick.SetDepth = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetDepth, None, Visual3d_ContextPick)
Visual3d_ContextPick.SetOrder = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetOrder, None, Visual3d_ContextPick)
Visual3d_ContextPick.Aperture = new_instancemethod(_Visual3d.Visual3d_ContextPick_Aperture, None, Visual3d_ContextPick)
Visual3d_ContextPick.Depth = new_instancemethod(_Visual3d.Visual3d_ContextPick_Depth, None, Visual3d_ContextPick)
Visual3d_ContextPick.Order = new_instancemethod(_Visual3d.Visual3d_ContextPick_Order, None, Visual3d_ContextPick)
Visual3d_ContextPick._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ContextPick__kill_pointed, None, Visual3d_ContextPick)
Visual3d_ContextPick_swigregister = _Visual3d.Visual3d_ContextPick_swigregister
Visual3d_ContextPick_swigregister(Visual3d_ContextPick)

class Visual3d_ContextView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context from default values //!	 Aliasing		 : OFF //!	 BackZClipping	 : OFF //!	 FrontZClipping	 : OFF //!	 Depth-cueing	 : OFF //!	 Light source	 : 0 //!	 Clipping plane	 : 0 //!	 Type Of Visualization : TOV_WIREFRAME //!	 Type Of Model	 : TOM_NONE Type Of SurfaceDetail : TOSD_NONE

        :rtype: None

        """
        _Visual3d.Visual3d_ContextView_swiginit(self, _Visual3d.new_Visual3d_ContextView(*args))

    def SetSurfaceDetail(self, *args):
        """
        * Selects the kind of rendering default to: TOSD_NONE

        :param TOSD:
        :type TOSD: Visual3d_TypeOfSurfaceDetail
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetSurfaceDetail(self, *args)


    def SetTextureEnv(self, *args):
        """
        * Sets the environment texture to use no environment texture by default

        :param ATexture:
        :type ATexture: Handle_Graphic3d_TextureEnv &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetTextureEnv(self, *args)


    def SetAliasingOn(self, *args):
        """
        * Activates antialiasing. //!	Antialiasing can be activated on all the structures //!	in the view

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetAliasingOn(self, *args)


    def SetAliasingOff(self, *args):
        """
        * Deactivates the antialiasing.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetAliasingOff(self, *args)


    def SetDepthCueingBackPlane(self, *args):
        """
        * Modifies the back depth-cueing plane. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> //!	 is front of <FrontPlane> and DepthCueing is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingBackPlane(self, *args)


    def SetDepthCueingFrontPlane(self, *args):
        """
        * Modifies the front depth-cueing plane. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> is //!	 front of <FrontPlane> and DepthCueing is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingFrontPlane(self, *args)


    def SetDepthCueingOn(self, *args):
        """
        * Activates the depth-cueing. //!	Depth-cueing can be activated on all structures //!	present in the view. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> is //!	 front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingOn(self, *args)


    def SetDepthCueingOff(self, *args):
        """
        * Deactivates the depth-cueing.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingOff(self, *args)


    def ClipPlanes(self, *args):
        """
        * Returns sequence of clip planes. returns sequence of clip planes.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _Visual3d.Visual3d_ContextView_ClipPlanes(self, *args)


    def ChangeClipPlanes(self, *args):
        """
        * Change clip planes. returns sequence of clip planes.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _Visual3d.Visual3d_ContextView_ChangeClipPlanes(self, *args)


    def SetLightOn(self, *args):
        """
        * Activates the light source <ALight>

        :param ALight:
        :type ALight: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetLightOn(self, *args)


    def SetLightOff(self, *args):
        """
        * Deactivates the light source <ALight>

        :param ALight:
        :type ALight: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetLightOff(self, *args)


    def SetModel(self, *args):
        """
        * Modifies the shading model when the type of //!	 visualization is TOV_SHADING //!	 TypeOfModel	: TOM_NONE //!			 TOM_INTERP_COLOR //!			 TOM_FACET //!			 TOM_VERTEX

        :param AModel:
        :type AModel: Visual3d_TypeOfModel
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetModel(self, *args)


    def SetVisualization(self, *args):
        """
        * Modifies the mode of visualization. //!	 TypeOfVisualization	: TOV_WIREFRAME //!				 TOV_SHADING

        :param AVisual:
        :type AVisual: Visual3d_TypeOfVisualization
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetVisualization(self, *args)


    def SetZClippingBackPlane(self, *args):
        """
        * Modifies the back Z-clipping plane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is //!	 front of <FrontPlane> and ZClipping is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingBackPlane(self, *args)


    def SetZClippingFrontPlane(self, *args):
        """
        * Modifies the front Z-clipping plane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is //!	 front of <FrontPlane> and ZClipping is ON.

        :param AFront:
        :type AFront: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingFrontPlane(self, *args)


    def SetZClippingOn(self, *args):
        """
        * Activates the Z-clipping planes defined by //!	 SetZClippingFrontPlane and SetZClippingBackPlane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is //!	 front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingOn(self, *args)


    def SetZClippingOff(self, *args):
        """
        * Deactivates the Z-clipping planes defined by //!	 SetFrontPlane and SetBackPlane.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingOff(self, *args)


    def SetFrontZClippingOn(self, *args):
        """
        * Activates the front Z-clipping plane defined by //!	 SetFrontPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetFrontZClippingOn(self, *args)


    def SetFrontZClippingOff(self, *args):
        """
        * Deactivates the front Z-clipping plane defined by //!	 SetFrontPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetFrontZClippingOff(self, *args)


    def SetBackZClippingOn(self, *args):
        """
        * Activates the back Z-clipping plane defined by //!	 SetBackPlane method. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is //!	 front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetBackZClippingOn(self, *args)


    def SetBackZClippingOff(self, *args):
        """
        * Deactivates the back Z-clipping plane defined by //!	 SetBackPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetBackZClippingOff(self, *args)


    def ActivatedLights(self, *args):
        """
        * Returns the group of active light sources //!	 in the view of context <self>.

        :rtype: Handle_Visual3d_HSetOfLight

        """
        return _Visual3d.Visual3d_ContextView_ActivatedLights(self, *args)


    def NumberOfActivatedLights(self, *args):
        """
        * Returns the number of active light sources //!	 in the view of context <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_ContextView_NumberOfActivatedLights(self, *args)


    def ActivatedLight(self, *args):
        """
        :param AnIndex:
        :type AnIndex: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_ContextView_ActivatedLight(self, *args)


    def AliasingIsOn(self, *args):
        """
        * Returns the activity of the aliasing.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_AliasingIsOn(self, *args)


    def BackZClippingIsOn(self, *args):
        """
        * Returns the activity of the ZClipping.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_BackZClippingIsOn(self, *args)


    def DepthCueingBackPlane(self, *args):
        """
        * Returns the definition of the back depth-cueing plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingBackPlane(self, *args)


    def DepthCueingFrontPlane(self, *args):
        """
        * Returns the definition of the front depth-cueing plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingFrontPlane(self, *args)


    def DepthCueingIsOn(self, *args):
        """
        * Returns the activity of the depth-cueing.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingIsOn(self, *args)


    def FrontZClippingIsOn(self, *args):
        """
        * Returns the activity of the ZClipping.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_FrontZClippingIsOn(self, *args)


    def Model(self, *args):
        """
        * Returns the shading model.

        :rtype: Visual3d_TypeOfModel

        """
        return _Visual3d.Visual3d_ContextView_Model(self, *args)


    def Visualization(self, *args):
        """
        * Returns the mode of visualization.

        :rtype: Visual3d_TypeOfVisualization

        """
        return _Visual3d.Visual3d_ContextView_Visualization(self, *args)


    def ZClippingBackPlane(self, *args):
        """
        * Returns the definition of the back Z-clipping plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_ZClippingBackPlane(self, *args)


    def ZClippingFrontPlane(self, *args):
        """
        * Returns the definition of the front Z-clipping plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_ZClippingFrontPlane(self, *args)


    def SurfaceDetail(self, *args):
        """
        :rtype: Visual3d_TypeOfSurfaceDetail

        """
        return _Visual3d.Visual3d_ContextView_SurfaceDetail(self, *args)


    def TextureEnv(self, *args):
        """
        :rtype: Handle_Graphic3d_TextureEnv

        """
        return _Visual3d.Visual3d_ContextView_TextureEnv(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ContextView.SetSurfaceDetail = new_instancemethod(_Visual3d.Visual3d_ContextView_SetSurfaceDetail, None, Visual3d_ContextView)
Visual3d_ContextView.SetTextureEnv = new_instancemethod(_Visual3d.Visual3d_ContextView_SetTextureEnv, None, Visual3d_ContextView)
Visual3d_ContextView.SetAliasingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetAliasingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetAliasingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetAliasingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingOff, None, Visual3d_ContextView)
Visual3d_ContextView.ClipPlanes = new_instancemethod(_Visual3d.Visual3d_ContextView_ClipPlanes, None, Visual3d_ContextView)
Visual3d_ContextView.ChangeClipPlanes = new_instancemethod(_Visual3d.Visual3d_ContextView_ChangeClipPlanes, None, Visual3d_ContextView)
Visual3d_ContextView.SetLightOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetLightOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetLightOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetLightOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetModel = new_instancemethod(_Visual3d.Visual3d_ContextView_SetModel, None, Visual3d_ContextView)
Visual3d_ContextView.SetVisualization = new_instancemethod(_Visual3d.Visual3d_ContextView_SetVisualization, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetFrontZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetFrontZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetFrontZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetFrontZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetBackZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetBackZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetBackZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetBackZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.ActivatedLights = new_instancemethod(_Visual3d.Visual3d_ContextView_ActivatedLights, None, Visual3d_ContextView)
Visual3d_ContextView.NumberOfActivatedLights = new_instancemethod(_Visual3d.Visual3d_ContextView_NumberOfActivatedLights, None, Visual3d_ContextView)
Visual3d_ContextView.ActivatedLight = new_instancemethod(_Visual3d.Visual3d_ContextView_ActivatedLight, None, Visual3d_ContextView)
Visual3d_ContextView.AliasingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_AliasingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.BackZClippingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_BackZClippingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.FrontZClippingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_FrontZClippingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.Model = new_instancemethod(_Visual3d.Visual3d_ContextView_Model, None, Visual3d_ContextView)
Visual3d_ContextView.Visualization = new_instancemethod(_Visual3d.Visual3d_ContextView_Visualization, None, Visual3d_ContextView)
Visual3d_ContextView.ZClippingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_ZClippingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.ZClippingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_ZClippingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SurfaceDetail = new_instancemethod(_Visual3d.Visual3d_ContextView_SurfaceDetail, None, Visual3d_ContextView)
Visual3d_ContextView.TextureEnv = new_instancemethod(_Visual3d.Visual3d_ContextView_TextureEnv, None, Visual3d_ContextView)
Visual3d_ContextView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ContextView__kill_pointed, None, Visual3d_ContextView)
Visual3d_ContextView_swigregister = _Visual3d.Visual3d_ContextView_swigregister
Visual3d_ContextView_swigregister(Visual3d_ContextView)

class Visual3d_HSequenceOfPickPath(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_HSequenceOfPickPath_swiginit(self, _Visual3d.new_Visual3d_HSequenceOfPickPath(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Visual3d_PickPath &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Visual3d_PickPath &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Visual3d_PickPath &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Visual3d_PickPath &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_HSequenceOfPickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Visual3d_PickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Visual3d_SequenceOfPickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Visual3d_SequenceOfPickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Visual3d_HSequenceOfPickPath

        """
        return _Visual3d.Visual3d_HSequenceOfPickPath_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_HSequenceOfPickPath self)"""
        return _Visual3d.Visual3d_HSequenceOfPickPath__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_HSequenceOfPickPath self) -> Handle_Visual3d_HSequenceOfPickPath"""
        return _Visual3d.Visual3d_HSequenceOfPickPath_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_HSequenceOfPickPath.IsEmpty = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_IsEmpty, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Length = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Length, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Clear = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Clear, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Append = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Append, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Prepend = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Prepend, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Reverse = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Reverse, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.InsertBefore = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_InsertBefore, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.InsertAfter = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_InsertAfter, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Exchange = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Exchange, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Split = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Split, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.SetValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_SetValue, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Value = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Value, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.ChangeValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_ChangeValue, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Remove = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Remove, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.Sequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_Sequence, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.ChangeSequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_ChangeSequence, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.ShallowCopy = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_ShallowCopy, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath._kill_pointed = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath__kill_pointed, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath.GetHandle = new_instancemethod(_Visual3d.Visual3d_HSequenceOfPickPath_GetHandle, None, Visual3d_HSequenceOfPickPath)
Visual3d_HSequenceOfPickPath_swigregister = _Visual3d.Visual3d_HSequenceOfPickPath_swigregister
Visual3d_HSequenceOfPickPath_swigregister(Visual3d_HSequenceOfPickPath)

class Handle_Visual3d_HSequenceOfPickPath(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_HSequenceOfPickPath_swiginit(self, _Visual3d.new_Handle_Visual3d_HSequenceOfPickPath(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_HSequenceOfPickPath_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_HSequenceOfPickPath.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfPickPath_Nullify, None, Handle_Visual3d_HSequenceOfPickPath)
Handle_Visual3d_HSequenceOfPickPath.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfPickPath_IsNull, None, Handle_Visual3d_HSequenceOfPickPath)
Handle_Visual3d_HSequenceOfPickPath.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfPickPath_GetObject, None, Handle_Visual3d_HSequenceOfPickPath)
Handle_Visual3d_HSequenceOfPickPath._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfPickPath__kill_pointed, None, Handle_Visual3d_HSequenceOfPickPath)
Handle_Visual3d_HSequenceOfPickPath_swigregister = _Visual3d.Handle_Visual3d_HSequenceOfPickPath_swigregister
Handle_Visual3d_HSequenceOfPickPath_swigregister(Handle_Visual3d_HSequenceOfPickPath)

def Handle_Visual3d_HSequenceOfPickPath_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_HSequenceOfPickPath_DownCast(AnObject)
Handle_Visual3d_HSequenceOfPickPath_DownCast = _Visual3d.Handle_Visual3d_HSequenceOfPickPath_DownCast

class Visual3d_HSetOfLight(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_HSetOfLight_swiginit(self, _Visual3d.new_Visual3d_HSetOfLight(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_HSetOfLight_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSetOfLight_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfLight &
        :rtype: Handle_Visual3d_HSetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfLight &
        :rtype: Handle_Visual3d_HSetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfLight &
        :rtype: Handle_Visual3d_HSetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Handle_Visual3d_HSetOfLight &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Handle_Visual3d_HSetOfLight &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfLight_IsAProperSubset(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Visual3d_HSetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_ShallowCopy(self, *args)


    def Set(self, *args):
        """
        :rtype: Visual3d_SetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_Set(self, *args)


    def ChangeSet(self, *args):
        """
        :rtype: Visual3d_SetOfLight

        """
        return _Visual3d.Visual3d_HSetOfLight_ChangeSet(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_HSetOfLight self)"""
        return _Visual3d.Visual3d_HSetOfLight__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_HSetOfLight self) -> Handle_Visual3d_HSetOfLight"""
        return _Visual3d.Visual3d_HSetOfLight_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_HSetOfLight.Extent = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Extent, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.IsEmpty = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_IsEmpty, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Clear = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Clear, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Add = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Add, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Remove = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Remove, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Union = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Union, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Intersection = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Intersection, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Difference = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Difference, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Contains = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Contains, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.IsASubset = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_IsASubset, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.IsAProperSubset = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_IsAProperSubset, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.ShallowCopy = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_ShallowCopy, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.Set = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_Set, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.ChangeSet = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_ChangeSet, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_HSetOfLight__kill_pointed, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight.GetHandle = new_instancemethod(_Visual3d.Visual3d_HSetOfLight_GetHandle, None, Visual3d_HSetOfLight)
Visual3d_HSetOfLight_swigregister = _Visual3d.Visual3d_HSetOfLight_swigregister
Visual3d_HSetOfLight_swigregister(Visual3d_HSetOfLight)

class Handle_Visual3d_HSetOfLight(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_HSetOfLight_swiginit(self, _Visual3d.new_Handle_Visual3d_HSetOfLight(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_HSetOfLight_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_HSetOfLight.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfLight_Nullify, None, Handle_Visual3d_HSetOfLight)
Handle_Visual3d_HSetOfLight.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfLight_IsNull, None, Handle_Visual3d_HSetOfLight)
Handle_Visual3d_HSetOfLight.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfLight_GetObject, None, Handle_Visual3d_HSetOfLight)
Handle_Visual3d_HSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfLight__kill_pointed, None, Handle_Visual3d_HSetOfLight)
Handle_Visual3d_HSetOfLight_swigregister = _Visual3d.Handle_Visual3d_HSetOfLight_swigregister
Handle_Visual3d_HSetOfLight_swigregister(Handle_Visual3d_HSetOfLight)

def Handle_Visual3d_HSetOfLight_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_HSetOfLight_DownCast(AnObject)
Handle_Visual3d_HSetOfLight_DownCast = _Visual3d.Handle_Visual3d_HSetOfLight_DownCast

class Visual3d_HSetOfView(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_HSetOfView_swiginit(self, _Visual3d.new_Visual3d_HSetOfView(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_HSetOfView_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSetOfView_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfView &
        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfView &
        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Handle_Visual3d_HSetOfView &
        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Handle_Visual3d_HSetOfView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Handle_Visual3d_HSetOfView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSetOfView_IsAProperSubset(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_ShallowCopy(self, *args)


    def Set(self, *args):
        """
        :rtype: Visual3d_SetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_Set(self, *args)


    def ChangeSet(self, *args):
        """
        :rtype: Visual3d_SetOfView

        """
        return _Visual3d.Visual3d_HSetOfView_ChangeSet(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_HSetOfView self)"""
        return _Visual3d.Visual3d_HSetOfView__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_HSetOfView self) -> Handle_Visual3d_HSetOfView"""
        return _Visual3d.Visual3d_HSetOfView_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_HSetOfView.Extent = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Extent, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.IsEmpty = new_instancemethod(_Visual3d.Visual3d_HSetOfView_IsEmpty, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Clear = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Clear, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Add = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Add, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Remove = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Remove, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Union = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Union, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Intersection = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Intersection, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Difference = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Difference, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Contains = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Contains, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.IsASubset = new_instancemethod(_Visual3d.Visual3d_HSetOfView_IsASubset, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.IsAProperSubset = new_instancemethod(_Visual3d.Visual3d_HSetOfView_IsAProperSubset, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.ShallowCopy = new_instancemethod(_Visual3d.Visual3d_HSetOfView_ShallowCopy, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.Set = new_instancemethod(_Visual3d.Visual3d_HSetOfView_Set, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.ChangeSet = new_instancemethod(_Visual3d.Visual3d_HSetOfView_ChangeSet, None, Visual3d_HSetOfView)
Visual3d_HSetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_HSetOfView__kill_pointed, None, Visual3d_HSetOfView)
Visual3d_HSetOfView.GetHandle = new_instancemethod(_Visual3d.Visual3d_HSetOfView_GetHandle, None, Visual3d_HSetOfView)
Visual3d_HSetOfView_swigregister = _Visual3d.Visual3d_HSetOfView_swigregister
Visual3d_HSetOfView_swigregister(Visual3d_HSetOfView)

class Handle_Visual3d_HSetOfView(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_HSetOfView_swiginit(self, _Visual3d.new_Handle_Visual3d_HSetOfView(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_HSetOfView_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_HSetOfView.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfView_Nullify, None, Handle_Visual3d_HSetOfView)
Handle_Visual3d_HSetOfView.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfView_IsNull, None, Handle_Visual3d_HSetOfView)
Handle_Visual3d_HSetOfView.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfView_GetObject, None, Handle_Visual3d_HSetOfView)
Handle_Visual3d_HSetOfView._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_HSetOfView__kill_pointed, None, Handle_Visual3d_HSetOfView)
Handle_Visual3d_HSetOfView_swigregister = _Visual3d.Handle_Visual3d_HSetOfView_swigregister
Handle_Visual3d_HSetOfView_swigregister(Handle_Visual3d_HSetOfView)

def Handle_Visual3d_HSetOfView_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_HSetOfView_DownCast(AnObject)
Handle_Visual3d_HSetOfView_DownCast = _Visual3d.Handle_Visual3d_HSetOfView_DownCast

class Visual3d_Layer(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a layer with the type <Atype>. if <AFlag> == Standard_True then the layer is 'size dependent'. The mapping of the layer is dependent of each window's size. if <AFlag> == Standard_False then the mapping of the layer is dependent of the highest window and the largest window of all the views of the viewer <AViewer>. When the viewer <AViewer> have only one view, the result will be the same with <AFlag> == Standard_False or <AFlag> == Standard_True.

        :param AViewer:
        :type AViewer: Handle_Visual3d_ViewManager &
        :param AType: default value is Aspect_TOL_OVERLAY
        :type AType: Aspect_TypeOfLayer
        :param AFlag: default value is Standard_False
        :type AFlag: bool
        :rtype: None

        """
        _Visual3d.Visual3d_Layer_swiginit(self, _Visual3d.new_Visual3d_Layer(*args))

    def Destroy(self, *args):
        """
        * Suppress the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Destroy(self, *args)


    def Begin(self, *args):
        """
        * Begins the definition of the layer <self> Warning: No default attributes

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Begin(self, *args)


    def End(self, *args):
        """
        * Finishs the definition of the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_End(self, *args)


    def Clear(self, *args):
        """
        * Clear all graphics managed by the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Clear(self, *args)


    def BeginPolyline(self, *args):
        """
        * After this call, <self> is ready to receive a definition of a polyline with AddVertex().

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_BeginPolyline(self, *args)


    def BeginPolygon(self, *args):
        """
        * After this call, <self> is ready to receive a definition of a polygon with AddEdge().

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_BeginPolygon(self, *args)


    def AddVertex(self, *args):
        """
        * Puts <X, Y> as a new point in the current primitive. If <AFlag> then it is a draw between last point and this point else it is a move between last point and this point.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param AFlag: default value is Standard_True
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_AddVertex(self, *args)


    def ClosePrimitive(self, *args):
        """
        * After this call, <self> stops the reception of a definition of a Begin... primitive.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_ClosePrimitive(self, *args)


    def DrawRectangle(self, *args):
        """
        * Draws the rectangle at position <X,Y>.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Width:
        :type Width: float
        :param Height:
        :type Height: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_DrawRectangle(self, *args)


    def TextSize(self, *args):
        """
        * Get the size of text. The attributes are given with respect to the plane of projection. <AHeight> : Height of text.  (Relative to the Normalized Projection Coordinates (NPC) Space).

        :param AText:
        :type AText: char *
        :param AHeight:
        :type AHeight: float
        :param AWidth:
        :type AWidth: float &
        :param AnAscent:
        :type AnAscent: float &
        :param ADescent:
        :type ADescent: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_TextSize(self, *args)


    def SetColor(self, *args):
        """
        * Modifies the current color. Warning: No default color

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetColor(self, *args)


    def SetTransparency(self, *args):
        """
        * Modifies the current transparency. Warning: No default transparency

        :param ATransparency:
        :type ATransparency: Standard_ShortReal
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetTransparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        * Unsets the transparency.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_UnsetTransparency(self, *args)


    def SetLineAttributes(self, *args):
        """
        * Modifies the current lines attributes. Warning: No default attributes

        :param AType:
        :type AType: Aspect_TypeOfLine
        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetLineAttributes(self, *args)


    def SetTextAttributes(self, *args):
        """
        * Modifies the current texts attributes. <AFont> defines the name of the font to be used. <AType> defines the display type of the text. <AColor> defines the color of decal or subtitle background. To set the color of the text you can use the SetColor method. Warning: No default attributes

        :param AFont:
        :type AFont: char *
        :param AType:
        :type AType: Aspect_TypeOfDisplayText
        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetTextAttributes(self, *args)


    def SetOrtho(self, *args):
        """
        * Modifies the current coordinates system of the layer <self>.

        :param Left:
        :type Left: float
        :param Right:
        :type Right: float
        :param Bottom:
        :type Bottom: float
        :param Top:
        :type Top: float
        :param Attach: default value is Aspect_TOC_BOTTOM_LEFT
        :type Attach: Aspect_TypeOfConstraint
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetOrtho(self, *args)


    def SetViewport(self, *args):
        """
        * Modifies the current viewport of the layer <self>.

        :param Width:
        :type Width: int
        :param Height:
        :type Height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetViewport(self, *args)


    def CLayer(self, *args):
        """
        * Returns the associated C structure.

        :rtype: Aspect_CLayer2d

        """
        return _Visual3d.Visual3d_Layer_CLayer(self, *args)


    def Type(self, *args):
        """
        * Returns the type.

        :rtype: Aspect_TypeOfLayer

        """
        return _Visual3d.Visual3d_Layer_Type(self, *args)


    def AddLayerItem(self, *args):
        """
        :param Item:
        :type Item: Handle_Visual3d_LayerItem &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_AddLayerItem(self, *args)


    def RemoveLayerItem(self, *args):
        """
        :param Item:
        :type Item: Handle_Visual3d_LayerItem &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RemoveLayerItem(self, *args)


    def RemoveAllLayerItems(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RemoveAllLayerItems(self, *args)


    def GetLayerItemList(self, *args):
        """
        :rtype: Visual3d_NListOfLayerItem

        """
        return _Visual3d.Visual3d_Layer_GetLayerItemList(self, *args)


    def RenderLayerItems(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RenderLayerItems(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_Layer self)"""
        return _Visual3d.Visual3d_Layer__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_Layer self) -> Handle_Visual3d_Layer"""
        return _Visual3d.Visual3d_Layer_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_Layer.Destroy = new_instancemethod(_Visual3d.Visual3d_Layer_Destroy, None, Visual3d_Layer)
Visual3d_Layer.Begin = new_instancemethod(_Visual3d.Visual3d_Layer_Begin, None, Visual3d_Layer)
Visual3d_Layer.End = new_instancemethod(_Visual3d.Visual3d_Layer_End, None, Visual3d_Layer)
Visual3d_Layer.Clear = new_instancemethod(_Visual3d.Visual3d_Layer_Clear, None, Visual3d_Layer)
Visual3d_Layer.BeginPolyline = new_instancemethod(_Visual3d.Visual3d_Layer_BeginPolyline, None, Visual3d_Layer)
Visual3d_Layer.BeginPolygon = new_instancemethod(_Visual3d.Visual3d_Layer_BeginPolygon, None, Visual3d_Layer)
Visual3d_Layer.AddVertex = new_instancemethod(_Visual3d.Visual3d_Layer_AddVertex, None, Visual3d_Layer)
Visual3d_Layer.ClosePrimitive = new_instancemethod(_Visual3d.Visual3d_Layer_ClosePrimitive, None, Visual3d_Layer)
Visual3d_Layer.DrawRectangle = new_instancemethod(_Visual3d.Visual3d_Layer_DrawRectangle, None, Visual3d_Layer)
Visual3d_Layer.TextSize = new_instancemethod(_Visual3d.Visual3d_Layer_TextSize, None, Visual3d_Layer)
Visual3d_Layer.SetColor = new_instancemethod(_Visual3d.Visual3d_Layer_SetColor, None, Visual3d_Layer)
Visual3d_Layer.SetTransparency = new_instancemethod(_Visual3d.Visual3d_Layer_SetTransparency, None, Visual3d_Layer)
Visual3d_Layer.UnsetTransparency = new_instancemethod(_Visual3d.Visual3d_Layer_UnsetTransparency, None, Visual3d_Layer)
Visual3d_Layer.SetLineAttributes = new_instancemethod(_Visual3d.Visual3d_Layer_SetLineAttributes, None, Visual3d_Layer)
Visual3d_Layer.SetTextAttributes = new_instancemethod(_Visual3d.Visual3d_Layer_SetTextAttributes, None, Visual3d_Layer)
Visual3d_Layer.SetOrtho = new_instancemethod(_Visual3d.Visual3d_Layer_SetOrtho, None, Visual3d_Layer)
Visual3d_Layer.SetViewport = new_instancemethod(_Visual3d.Visual3d_Layer_SetViewport, None, Visual3d_Layer)
Visual3d_Layer.CLayer = new_instancemethod(_Visual3d.Visual3d_Layer_CLayer, None, Visual3d_Layer)
Visual3d_Layer.Type = new_instancemethod(_Visual3d.Visual3d_Layer_Type, None, Visual3d_Layer)
Visual3d_Layer.AddLayerItem = new_instancemethod(_Visual3d.Visual3d_Layer_AddLayerItem, None, Visual3d_Layer)
Visual3d_Layer.RemoveLayerItem = new_instancemethod(_Visual3d.Visual3d_Layer_RemoveLayerItem, None, Visual3d_Layer)
Visual3d_Layer.RemoveAllLayerItems = new_instancemethod(_Visual3d.Visual3d_Layer_RemoveAllLayerItems, None, Visual3d_Layer)
Visual3d_Layer.GetLayerItemList = new_instancemethod(_Visual3d.Visual3d_Layer_GetLayerItemList, None, Visual3d_Layer)
Visual3d_Layer.RenderLayerItems = new_instancemethod(_Visual3d.Visual3d_Layer_RenderLayerItems, None, Visual3d_Layer)
Visual3d_Layer._kill_pointed = new_instancemethod(_Visual3d.Visual3d_Layer__kill_pointed, None, Visual3d_Layer)
Visual3d_Layer.GetHandle = new_instancemethod(_Visual3d.Visual3d_Layer_GetHandle, None, Visual3d_Layer)
Visual3d_Layer_swigregister = _Visual3d.Visual3d_Layer_swigregister
Visual3d_Layer_swigregister(Visual3d_Layer)

class Handle_Visual3d_Layer(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_Layer_swiginit(self, _Visual3d.new_Handle_Visual3d_Layer(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_Layer_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_Layer.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_Layer_Nullify, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_Layer_IsNull, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_Layer_GetObject, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_Layer__kill_pointed, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer_swigregister = _Visual3d.Handle_Visual3d_Layer_swigregister
Handle_Visual3d_Layer_swigregister(Handle_Visual3d_Layer)

def Handle_Visual3d_Layer_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_Layer_DownCast(AnObject)
Handle_Visual3d_Layer_DownCast = _Visual3d.Handle_Visual3d_Layer_DownCast

class Visual3d_LayerItem(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a layer item

        :rtype: None

        """
        _Visual3d.Visual3d_LayerItem_swiginit(self, _Visual3d.new_Visual3d_LayerItem(*args))

    def ComputeLayerPrs(self, *args):
        """
        * virtual function for recompute 2D presentation (empty by default)

        :rtype: void

        """
        return _Visual3d.Visual3d_LayerItem_ComputeLayerPrs(self, *args)


    def RedrawLayerPrs(self, *args):
        """
        * virtual function for recompute 2D presentation (empty by default)

        :rtype: void

        """
        return _Visual3d.Visual3d_LayerItem_RedrawLayerPrs(self, *args)


    def IsNeedToRecompute(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_LayerItem_IsNeedToRecompute(self, *args)


    def SetNeedToRecompute(self, *args):
        """
        :param NeedToRecompute: default value is Standard_True
        :type NeedToRecompute: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_LayerItem_SetNeedToRecompute(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_LayerItem self)"""
        return _Visual3d.Visual3d_LayerItem__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_LayerItem self) -> Handle_Visual3d_LayerItem"""
        return _Visual3d.Visual3d_LayerItem_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_LayerItem.ComputeLayerPrs = new_instancemethod(_Visual3d.Visual3d_LayerItem_ComputeLayerPrs, None, Visual3d_LayerItem)
Visual3d_LayerItem.RedrawLayerPrs = new_instancemethod(_Visual3d.Visual3d_LayerItem_RedrawLayerPrs, None, Visual3d_LayerItem)
Visual3d_LayerItem.IsNeedToRecompute = new_instancemethod(_Visual3d.Visual3d_LayerItem_IsNeedToRecompute, None, Visual3d_LayerItem)
Visual3d_LayerItem.SetNeedToRecompute = new_instancemethod(_Visual3d.Visual3d_LayerItem_SetNeedToRecompute, None, Visual3d_LayerItem)
Visual3d_LayerItem._kill_pointed = new_instancemethod(_Visual3d.Visual3d_LayerItem__kill_pointed, None, Visual3d_LayerItem)
Visual3d_LayerItem.GetHandle = new_instancemethod(_Visual3d.Visual3d_LayerItem_GetHandle, None, Visual3d_LayerItem)
Visual3d_LayerItem_swigregister = _Visual3d.Visual3d_LayerItem_swigregister
Visual3d_LayerItem_swigregister(Visual3d_LayerItem)

class Handle_Visual3d_LayerItem(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_LayerItem_swiginit(self, _Visual3d.new_Handle_Visual3d_LayerItem(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_LayerItem_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_LayerItem.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem_Nullify, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem_IsNull, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem_GetObject, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem__kill_pointed, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem_swigregister = _Visual3d.Handle_Visual3d_LayerItem_swigregister
Handle_Visual3d_LayerItem_swigregister(Handle_Visual3d_LayerItem)

def Handle_Visual3d_LayerItem_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_LayerItem_DownCast(AnObject)
Handle_Visual3d_LayerItem_DownCast = _Visual3d.Handle_Visual3d_LayerItem_DownCast

class Visual3d_Light(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a light from default values. //!	 Light sources are created in a visualiser //!	 and are activated in one of its views. //!	 Type	= TOLS_AMBIENT //!	 Color	= WHITE

        :rtype: None

        * Creates an AMBIENT light source. //!	 Light sources are created in a visualiser //!	 and are activated in one of its views.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        * Creates a DIRECTIONAL light source. //!	 Light sources are created in a visualiser //!	 and are activated in one of its views. Warning: Raises LightDefinitionError if <Direction> is null.

        :param Color:
        :type Color: Quantity_Color &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Headlight: default value is Standard_False
        :type Headlight: bool
        :rtype: None

        * Creates a POSITIONAL light source. //!	 Light sources are created in a visualiser //!	 and are activated in one of its views. Warning: Raises LightDefinitionError //!	 if <Fact1> and <Fact2> are null. //!	 if <Fact1> is a negative value or greater than 1.0. //!	 if <Fact2> is a negative value or greater than 1.0.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Fact1:
        :type Fact1: float
        :param Fact2:
        :type Fact2: float
        :rtype: None

        * Creates a SPOT light source. //!	 Light sources are created in a visualiser //!	 and are activated in one of its views. //!	 <Concentration> specifies the intensity distribution of //!	 the light. //!	 <AngleCone> specifies the angle (radians) of the cone //!	 created by the spot. 	 the global attenuation is equal : //!	 1 / (Fact1 + Fact2 * (norm(ObjectPosition - LightPosition))) Warning: Raises LightDefinitionError //!	 if <Direction> is null. //!	 if <Concentration> is a negative value or greater than 1.0. //!	 if <Fact1> and <Fact2> are null. //!	 if <Fact1> is a negative value or greater than 1.0. //!	 if <Fact2> is a negative value or greater than 1.0. //!	 if <AngleCone> is a negative value or greater than PI/2.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Concentration:
        :type Concentration: float
        :param Fact1:
        :type Fact1: float
        :param Fact2:
        :type Fact2: float
        :param AngleCone:
        :type AngleCone: float
        :rtype: None

        """
        _Visual3d.Visual3d_Light_swiginit(self, _Visual3d.new_Visual3d_Light(*args))

    def SetAngle(self, *args):
        """
        * Modifies the angle (radians) of the cone created by the spot. //!	 Works only on TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_SPOT. //!	 if <AngleCone> is a negative value or greater than PI/2.

        :param AngleCone:
        :type AngleCone: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAngle(self, *args)


    def SetAttenuation1(self, *args):
        """
        * Modifies the attenuation factor of the light. //!	 Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_SPOT or TOLS_POSITIONAL. //!	 if <Fact1> is a negative value or greater than 1.0.

        :param Fact1:
        :type Fact1: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAttenuation1(self, *args)


    def SetAttenuation2(self, *args):
        """
        * Modifies the attenuation factor of the light. //!	 Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_POSITIONAL or TOLS_SPOT. //!	 if <Fact2> is a negative value or greater than 1.0..

        :param Fact2:
        :type Fact2: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAttenuation2(self, *args)


    def SetColor(self, *args):
        """
        * Modifies the colour of the light.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetColor(self, *args)


    def SetConcentration(self, *args):
        """
        * Modifies the intensity distribution of the light. //!	 Works only on the TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_SPOT. //!	 if <Concentration> is a negative value or greater than 1.0.

        :param Concentration:
        :type Concentration: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetConcentration(self, *args)


    def SetDirection(self, *args):
        """
        * Modifies the light direction. //!	 Works only on the TOLS_DIRECTIONAL and TOLS_SPOT lights. //!	 Default z Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_DIRECTIONAL //!	 or TOLS_SPOT. //!	 if <Direction> is null.

        :param Direction:
        :type Direction: Graphic3d_Vector &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetDirection(self, *args)


    def SetPosition(self, *args):
        """
        * Modifies the position of the light. //!	 Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_POSITIONAL or TOLS_SPOT.

        :param Position:
        :type Position: Graphic3d_Vertex &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetPosition(self, *args)


    def Headlight(self, *args):
        """
        * Returns the headlight state of the light <self>

        :rtype: bool

        """
        return _Visual3d.Visual3d_Light_Headlight(self, *args)


    def SetHeadlight(self, *args):
        """
        * Setup headlight flag.

        :param theValue:
        :type theValue: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetHeadlight(self, *args)


    def Color(self, *args):
        """
        * Returns the colour of the light <self>.

        :rtype: Quantity_Color

        """
        return _Visual3d.Visual3d_Light_Color(self, *args)


    def LightType(self, *args):
        """
        * Returns the light type of <self>. //!	 TypeOfLightSource = TOLS_AMBIENT //!				TOLS_DIRECTIONAL //!				TOLS_POSITIONAL //!				TOLS_SPOT

        :rtype: Visual3d_TypeOfLightSource

        """
        return _Visual3d.Visual3d_Light_LightType(self, *args)


    def Values(self, *args):
        """
        * Returns the definition of <self> if <self> is //!	 a light source of the TOLS_AMBIENT type. Category: Inquire methods Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_AMBIENT.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        * Returns the definition of <self> if <self> is //!	 a light source of the TOLS_DIRECTIONAL type. Category: Inquire methods Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_DIRECTIONAL.

        :param Color:
        :type Color: Quantity_Color &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :rtype: None

        * Returns the definition of <self> if <self> is //!	 a light source of the TOLS_POSITIONAL type. Category: Inquire methods Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_POSITIONAL.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Fact1:
        :type Fact1: float &
        :param Fact2:
        :type Fact2: float &
        :rtype: None

        * Returns the definition of <self> if <self> is //!	 a light source of the TOLS_SPOT type. Category: Inquire methods Warning: Raises LightDefinitionError //!	 if the type of the light is not TOLS_SPOT.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Concentration:
        :type Concentration: float &
        :param Fact1:
        :type Fact1: float &
        :param Fact2:
        :type Fact2: float &
        :param AngleCone:
        :type AngleCone: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_Values(self, *args)


    def CLight(self, *args):
        """
        * Returns the light defintion.

        :rtype: Graphic3d_CLight

        """
        return _Visual3d.Visual3d_Light_CLight(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_Light self)"""
        return _Visual3d.Visual3d_Light__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_Light self) -> Handle_Visual3d_Light"""
        return _Visual3d.Visual3d_Light_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_Light.SetAngle = new_instancemethod(_Visual3d.Visual3d_Light_SetAngle, None, Visual3d_Light)
Visual3d_Light.SetAttenuation1 = new_instancemethod(_Visual3d.Visual3d_Light_SetAttenuation1, None, Visual3d_Light)
Visual3d_Light.SetAttenuation2 = new_instancemethod(_Visual3d.Visual3d_Light_SetAttenuation2, None, Visual3d_Light)
Visual3d_Light.SetColor = new_instancemethod(_Visual3d.Visual3d_Light_SetColor, None, Visual3d_Light)
Visual3d_Light.SetConcentration = new_instancemethod(_Visual3d.Visual3d_Light_SetConcentration, None, Visual3d_Light)
Visual3d_Light.SetDirection = new_instancemethod(_Visual3d.Visual3d_Light_SetDirection, None, Visual3d_Light)
Visual3d_Light.SetPosition = new_instancemethod(_Visual3d.Visual3d_Light_SetPosition, None, Visual3d_Light)
Visual3d_Light.Headlight = new_instancemethod(_Visual3d.Visual3d_Light_Headlight, None, Visual3d_Light)
Visual3d_Light.SetHeadlight = new_instancemethod(_Visual3d.Visual3d_Light_SetHeadlight, None, Visual3d_Light)
Visual3d_Light.Color = new_instancemethod(_Visual3d.Visual3d_Light_Color, None, Visual3d_Light)
Visual3d_Light.LightType = new_instancemethod(_Visual3d.Visual3d_Light_LightType, None, Visual3d_Light)
Visual3d_Light.Values = new_instancemethod(_Visual3d.Visual3d_Light_Values, None, Visual3d_Light)
Visual3d_Light.CLight = new_instancemethod(_Visual3d.Visual3d_Light_CLight, None, Visual3d_Light)
Visual3d_Light._kill_pointed = new_instancemethod(_Visual3d.Visual3d_Light__kill_pointed, None, Visual3d_Light)
Visual3d_Light.GetHandle = new_instancemethod(_Visual3d.Visual3d_Light_GetHandle, None, Visual3d_Light)
Visual3d_Light_swigregister = _Visual3d.Visual3d_Light_swigregister
Visual3d_Light_swigregister(Visual3d_Light)

class Handle_Visual3d_Light(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_Light_swiginit(self, _Visual3d.new_Handle_Visual3d_Light(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_Light_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_Light.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_Light_Nullify, None, Handle_Visual3d_Light)
Handle_Visual3d_Light.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_Light_IsNull, None, Handle_Visual3d_Light)
Handle_Visual3d_Light.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_Light_GetObject, None, Handle_Visual3d_Light)
Handle_Visual3d_Light._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_Light__kill_pointed, None, Handle_Visual3d_Light)
Handle_Visual3d_Light_swigregister = _Visual3d.Handle_Visual3d_Light_swigregister
Handle_Visual3d_Light_swigregister(Handle_Visual3d_Light)

def Handle_Visual3d_Light_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_Light_DownCast(AnObject)
Handle_Visual3d_Light_DownCast = _Visual3d.Handle_Visual3d_Light_DownCast

class Visual3d_ListIteratorOfSetListOfSetOfLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_swiginit(self, _Visual3d.new_Visual3d_ListIteratorOfSetListOfSetOfLight(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ListIteratorOfSetListOfSetOfLight.Initialize = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Initialize, None, Visual3d_ListIteratorOfSetListOfSetOfLight)
Visual3d_ListIteratorOfSetListOfSetOfLight.More = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_More, None, Visual3d_ListIteratorOfSetListOfSetOfLight)
Visual3d_ListIteratorOfSetListOfSetOfLight.Next = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Next, None, Visual3d_ListIteratorOfSetListOfSetOfLight)
Visual3d_ListIteratorOfSetListOfSetOfLight.Value = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_Value, None, Visual3d_ListIteratorOfSetListOfSetOfLight)
Visual3d_ListIteratorOfSetListOfSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight__kill_pointed, None, Visual3d_ListIteratorOfSetListOfSetOfLight)
Visual3d_ListIteratorOfSetListOfSetOfLight_swigregister = _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfLight_swigregister
Visual3d_ListIteratorOfSetListOfSetOfLight_swigregister(Visual3d_ListIteratorOfSetListOfSetOfLight)

class Visual3d_ListIteratorOfSetListOfSetOfView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_swiginit(self, _Visual3d.new_Visual3d_ListIteratorOfSetListOfSetOfView(*args))

    def Initialize(self, *args):
        """
        :param L:
        :type L: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ListIteratorOfSetListOfSetOfView.Initialize = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Initialize, None, Visual3d_ListIteratorOfSetListOfSetOfView)
Visual3d_ListIteratorOfSetListOfSetOfView.More = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_More, None, Visual3d_ListIteratorOfSetListOfSetOfView)
Visual3d_ListIteratorOfSetListOfSetOfView.Next = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Next, None, Visual3d_ListIteratorOfSetListOfSetOfView)
Visual3d_ListIteratorOfSetListOfSetOfView.Value = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_Value, None, Visual3d_ListIteratorOfSetListOfSetOfView)
Visual3d_ListIteratorOfSetListOfSetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView__kill_pointed, None, Visual3d_ListIteratorOfSetListOfSetOfView)
Visual3d_ListIteratorOfSetListOfSetOfView_swigregister = _Visual3d.Visual3d_ListIteratorOfSetListOfSetOfView_swigregister
Visual3d_ListIteratorOfSetListOfSetOfView_swigregister(Visual3d_ListIteratorOfSetListOfSetOfView)

class Visual3d_ListNodeOfSetListOfSetOfLight(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_swiginit(self, _Visual3d.new_Visual3d_ListNodeOfSetListOfSetOfLight(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_ListNodeOfSetListOfSetOfLight self)"""
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_ListNodeOfSetListOfSetOfLight self) -> Handle_Visual3d_ListNodeOfSetListOfSetOfLight"""
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ListNodeOfSetListOfSetOfLight.Value = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_Value, None, Visual3d_ListNodeOfSetListOfSetOfLight)
Visual3d_ListNodeOfSetListOfSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight__kill_pointed, None, Visual3d_ListNodeOfSetListOfSetOfLight)
Visual3d_ListNodeOfSetListOfSetOfLight.GetHandle = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_GetHandle, None, Visual3d_ListNodeOfSetListOfSetOfLight)
Visual3d_ListNodeOfSetListOfSetOfLight_swigregister = _Visual3d.Visual3d_ListNodeOfSetListOfSetOfLight_swigregister
Visual3d_ListNodeOfSetListOfSetOfLight_swigregister(Visual3d_ListNodeOfSetListOfSetOfLight)

class Handle_Visual3d_ListNodeOfSetListOfSetOfLight(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_swiginit(self, _Visual3d.new_Handle_Visual3d_ListNodeOfSetListOfSetOfLight(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_ListNodeOfSetListOfSetOfLight.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_Nullify, None, Handle_Visual3d_ListNodeOfSetListOfSetOfLight)
Handle_Visual3d_ListNodeOfSetListOfSetOfLight.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_IsNull, None, Handle_Visual3d_ListNodeOfSetListOfSetOfLight)
Handle_Visual3d_ListNodeOfSetListOfSetOfLight.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_GetObject, None, Handle_Visual3d_ListNodeOfSetListOfSetOfLight)
Handle_Visual3d_ListNodeOfSetListOfSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight__kill_pointed, None, Handle_Visual3d_ListNodeOfSetListOfSetOfLight)
Handle_Visual3d_ListNodeOfSetListOfSetOfLight_swigregister = _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_swigregister
Handle_Visual3d_ListNodeOfSetListOfSetOfLight_swigregister(Handle_Visual3d_ListNodeOfSetListOfSetOfLight)

def Handle_Visual3d_ListNodeOfSetListOfSetOfLight_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_DownCast(AnObject)
Handle_Visual3d_ListNodeOfSetListOfSetOfLight_DownCast = _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfLight_DownCast

class Visual3d_ListNodeOfSetListOfSetOfView(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_swiginit(self, _Visual3d.new_Visual3d_ListNodeOfSetListOfSetOfView(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_ListNodeOfSetListOfSetOfView self)"""
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfView__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_ListNodeOfSetListOfSetOfView self) -> Handle_Visual3d_ListNodeOfSetListOfSetOfView"""
        return _Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ListNodeOfSetListOfSetOfView.Value = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_Value, None, Visual3d_ListNodeOfSetListOfSetOfView)
Visual3d_ListNodeOfSetListOfSetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfView__kill_pointed, None, Visual3d_ListNodeOfSetListOfSetOfView)
Visual3d_ListNodeOfSetListOfSetOfView.GetHandle = new_instancemethod(_Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_GetHandle, None, Visual3d_ListNodeOfSetListOfSetOfView)
Visual3d_ListNodeOfSetListOfSetOfView_swigregister = _Visual3d.Visual3d_ListNodeOfSetListOfSetOfView_swigregister
Visual3d_ListNodeOfSetListOfSetOfView_swigregister(Visual3d_ListNodeOfSetListOfSetOfView)

class Handle_Visual3d_ListNodeOfSetListOfSetOfView(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_swiginit(self, _Visual3d.new_Handle_Visual3d_ListNodeOfSetListOfSetOfView(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_ListNodeOfSetListOfSetOfView.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_Nullify, None, Handle_Visual3d_ListNodeOfSetListOfSetOfView)
Handle_Visual3d_ListNodeOfSetListOfSetOfView.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_IsNull, None, Handle_Visual3d_ListNodeOfSetListOfSetOfView)
Handle_Visual3d_ListNodeOfSetListOfSetOfView.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_GetObject, None, Handle_Visual3d_ListNodeOfSetListOfSetOfView)
Handle_Visual3d_ListNodeOfSetListOfSetOfView._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView__kill_pointed, None, Handle_Visual3d_ListNodeOfSetListOfSetOfView)
Handle_Visual3d_ListNodeOfSetListOfSetOfView_swigregister = _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_swigregister
Handle_Visual3d_ListNodeOfSetListOfSetOfView_swigregister(Handle_Visual3d_ListNodeOfSetListOfSetOfView)

def Handle_Visual3d_ListNodeOfSetListOfSetOfView_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_DownCast(AnObject)
Handle_Visual3d_ListNodeOfSetListOfSetOfView_DownCast = _Visual3d.Handle_Visual3d_ListNodeOfSetListOfSetOfView_DownCast

class Visual3d_PickDescriptor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a PickDescriptor <self>.

        :param CTX:
        :type CTX: Visual3d_ContextPick &
        :rtype: None

        """
        _Visual3d.Visual3d_PickDescriptor_swiginit(self, _Visual3d.new_Visual3d_PickDescriptor(*args))

    def AddPickPath(self, *args):
        """
        * Adds a PickPath to PickDescriptor <self>.

        :param APickPath:
        :type APickPath: Visual3d_PickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_PickDescriptor_AddPickPath(self, *args)


    def Clear(self, *args):
        """
        * Erases all the information in <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_PickDescriptor_Clear(self, *args)


    def Depth(self, *args):
        """
        * Returns the pick depth, that is the //!	 number of PickPaths available in the PickDescriptor.

        :rtype: int

        """
        return _Visual3d.Visual3d_PickDescriptor_Depth(self, *args)


    def PickPath(self, *args):
        """
        * Returns the group of PickPaths of <self>.

        :rtype: Handle_Visual3d_HSequenceOfPickPath

        """
        return _Visual3d.Visual3d_PickDescriptor_PickPath(self, *args)


    def TopStructure(self, *args):
        """
        * Returns the root structure. //!	 If the pick order was of the type TOO_TOPFIRST //!	 then it's the first structure. //!	 If the pick order was of the type TOO_BOTTOMFIRST //!	 Then it's the last structure. //!	 The pick order is set by the method SetOrder //!	 from ContextPick. Category: Inquire methods Warning: Raises PickError if Depth == 0 (no picked structure).

        :rtype: Handle_Graphic3d_Structure

        """
        return _Visual3d.Visual3d_PickDescriptor_TopStructure(self, *args)


    def TopPickId(self, *args):
        """
        * Returns the root structure pickid. //!	 If the pick order was of the type TOO_TOPFIRST //!	 then it's the first pickid. //!	 If the pick order was of the type TOO_BOTTOMFIRST //!	 then it's the last pickid. //!	 The pick order is set by the method SetOrder //!	 from ContextPick. Category: Inquire methods Warning: Raises PickError if Depth == 0 (no picked structure).

        :rtype: int

        """
        return _Visual3d.Visual3d_PickDescriptor_TopPickId(self, *args)


    def TopElementNumber(self, *args):
        """
        * Returns the root structure element number. //!	 If the pick order was of the type TOO_TOPFIRST //!	 then it's the first element number. //!	 If the pick order was of the type TOO_BOTTOMFIRST //!	 then it's the last element number. //!	 The pick order is set by the method SetOrder //!	 from ContextPick. Category: Inquire methods Warning: Raises PickError if Depth == 0 (no picked structure).

        :rtype: int

        """
        return _Visual3d.Visual3d_PickDescriptor_TopElementNumber(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_PickDescriptor.AddPickPath = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_AddPickPath, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.Clear = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_Clear, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.Depth = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_Depth, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.PickPath = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_PickPath, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.TopStructure = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_TopStructure, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.TopPickId = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_TopPickId, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor.TopElementNumber = new_instancemethod(_Visual3d.Visual3d_PickDescriptor_TopElementNumber, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor._kill_pointed = new_instancemethod(_Visual3d.Visual3d_PickDescriptor__kill_pointed, None, Visual3d_PickDescriptor)
Visual3d_PickDescriptor_swigregister = _Visual3d.Visual3d_PickDescriptor_swigregister
Visual3d_PickDescriptor_swigregister(Visual3d_PickDescriptor)

class Visual3d_PickPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an undefined PickPath.

        :rtype: None

        * Creates a PickPath : //!	 <AElemNumber> : Element number of the structure picked. //!	 <APickId>	 : Pick identifier of the structure picked. //!	 <AStructure> : The picked structure.

        :param AElemNumber:
        :type AElemNumber: int
        :param APickId:
        :type APickId: int
        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        _Visual3d.Visual3d_PickPath_swiginit(self, _Visual3d.new_Visual3d_PickPath(*args))

    def SetElementNumber(self, *args):
        """
        * Modifies the PickPath <self>. //!	 <AElemNumber> : Element number of the structure picked.

        :param AElemNumber:
        :type AElemNumber: int
        :rtype: None

        """
        return _Visual3d.Visual3d_PickPath_SetElementNumber(self, *args)


    def SetPickIdentifier(self, *args):
        """
        * Modifies the PickPath <self>. //!	 <APickId>	 : Pick identifier of the structure picked.

        :param APickId:
        :type APickId: int
        :rtype: None

        """
        return _Visual3d.Visual3d_PickPath_SetPickIdentifier(self, *args)


    def SetStructIdentifier(self, *args):
        """
        * Modifies the PickPath <self>. //!	 <AStructure>	: Identifier of the structure picked.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_PickPath_SetStructIdentifier(self, *args)


    def ElementNumber(self, *args):
        """
        * Returns the element number stocked in the PickPath <self>. Category: Inquire methods Warning: Raises PickError if PickPath is empty (no picked structure).

        :rtype: int

        """
        return _Visual3d.Visual3d_PickPath_ElementNumber(self, *args)


    def PickIdentifier(self, *args):
        """
        * Returns the pick identifier stocked in the PickPath <self>. Category: Inquire methods Warning: Raises PickError if PickPath is empty (no picked structure).

        :rtype: int

        """
        return _Visual3d.Visual3d_PickPath_PickIdentifier(self, *args)


    def StructIdentifier(self, *args):
        """
        * Returns the structure stocked in the PickPath <self>. Category: Inquire methods Warning: Raises PickError if PickPath is empty (no picked structure).

        :rtype: Handle_Graphic3d_Structure

        """
        return _Visual3d.Visual3d_PickPath_StructIdentifier(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_PickPath.SetElementNumber = new_instancemethod(_Visual3d.Visual3d_PickPath_SetElementNumber, None, Visual3d_PickPath)
Visual3d_PickPath.SetPickIdentifier = new_instancemethod(_Visual3d.Visual3d_PickPath_SetPickIdentifier, None, Visual3d_PickPath)
Visual3d_PickPath.SetStructIdentifier = new_instancemethod(_Visual3d.Visual3d_PickPath_SetStructIdentifier, None, Visual3d_PickPath)
Visual3d_PickPath.ElementNumber = new_instancemethod(_Visual3d.Visual3d_PickPath_ElementNumber, None, Visual3d_PickPath)
Visual3d_PickPath.PickIdentifier = new_instancemethod(_Visual3d.Visual3d_PickPath_PickIdentifier, None, Visual3d_PickPath)
Visual3d_PickPath.StructIdentifier = new_instancemethod(_Visual3d.Visual3d_PickPath_StructIdentifier, None, Visual3d_PickPath)
Visual3d_PickPath._kill_pointed = new_instancemethod(_Visual3d.Visual3d_PickPath__kill_pointed, None, Visual3d_PickPath)
Visual3d_PickPath_swigregister = _Visual3d.Visual3d_PickPath_swigregister
Visual3d_PickPath_swigregister(Visual3d_PickPath)

class Visual3d_SequenceNodeOfSequenceOfPickPath(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Visual3d_PickPath &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_swiginit(self, _Visual3d.new_Visual3d_SequenceNodeOfSequenceOfPickPath(*args))

    def Value(self, *args):
        """
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_SequenceNodeOfSequenceOfPickPath self)"""
        return _Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_SequenceNodeOfSequenceOfPickPath self) -> Handle_Visual3d_SequenceNodeOfSequenceOfPickPath"""
        return _Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SequenceNodeOfSequenceOfPickPath.Value = new_instancemethod(_Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_Value, None, Visual3d_SequenceNodeOfSequenceOfPickPath)
Visual3d_SequenceNodeOfSequenceOfPickPath._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath__kill_pointed, None, Visual3d_SequenceNodeOfSequenceOfPickPath)
Visual3d_SequenceNodeOfSequenceOfPickPath.GetHandle = new_instancemethod(_Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_GetHandle, None, Visual3d_SequenceNodeOfSequenceOfPickPath)
Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister = _Visual3d.Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister
Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister(Visual3d_SequenceNodeOfSequenceOfPickPath)

class Handle_Visual3d_SequenceNodeOfSequenceOfPickPath(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_swiginit(self, _Visual3d.new_Handle_Visual3d_SequenceNodeOfSequenceOfPickPath(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_SequenceNodeOfSequenceOfPickPath.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_Nullify, None, Handle_Visual3d_SequenceNodeOfSequenceOfPickPath)
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_IsNull, None, Handle_Visual3d_SequenceNodeOfSequenceOfPickPath)
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_GetObject, None, Handle_Visual3d_SequenceNodeOfSequenceOfPickPath)
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath__kill_pointed, None, Handle_Visual3d_SequenceNodeOfSequenceOfPickPath)
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_swigregister(Handle_Visual3d_SequenceNodeOfSequenceOfPickPath)

def Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_DownCast(AnObject)
Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_DownCast = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfPickPath_DownCast

class Visual3d_SequenceOfPickPath(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceOfPickPath_swiginit(self, _Visual3d.new_Visual3d_SequenceOfPickPath(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SequenceOfPickPath &
        :rtype: Visual3d_SequenceOfPickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SequenceOfPickPath &
        :rtype: Visual3d_SequenceOfPickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Visual3d_PickPath &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Visual3d_PickPath &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Visual3d_PickPath &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Visual3d_PickPath &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Visual3d_SequenceOfPickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Visual3d_PickPath &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Visual3d_PickPath

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfPickPath_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SequenceOfPickPath.Clear = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Clear, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Assign = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Assign, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Set = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Set, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Append = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Append, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Prepend = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Prepend, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.InsertBefore = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_InsertBefore, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.InsertAfter = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_InsertAfter, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.First = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_First, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Last = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Last, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Split = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Split, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Value = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Value, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.SetValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_SetValue, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.ChangeValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_ChangeValue, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath.Remove = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath_Remove, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SequenceOfPickPath__kill_pointed, None, Visual3d_SequenceOfPickPath)
Visual3d_SequenceOfPickPath_swigregister = _Visual3d.Visual3d_SequenceOfPickPath_swigregister
Visual3d_SequenceOfPickPath_swigregister(Visual3d_SequenceOfPickPath)

class Visual3d_SetIteratorOfSetOfLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Visual3d_SetOfLight &
        :rtype: None

        """
        _Visual3d.Visual3d_SetIteratorOfSetOfLight_swiginit(self, _Visual3d.new_Visual3d_SetIteratorOfSetOfLight(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfLight_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfLight_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfLight_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfLight_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetIteratorOfSetOfLight.Initialize = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfLight_Initialize, None, Visual3d_SetIteratorOfSetOfLight)
Visual3d_SetIteratorOfSetOfLight.More = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfLight_More, None, Visual3d_SetIteratorOfSetOfLight)
Visual3d_SetIteratorOfSetOfLight.Next = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfLight_Next, None, Visual3d_SetIteratorOfSetOfLight)
Visual3d_SetIteratorOfSetOfLight.Value = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfLight_Value, None, Visual3d_SetIteratorOfSetOfLight)
Visual3d_SetIteratorOfSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfLight__kill_pointed, None, Visual3d_SetIteratorOfSetOfLight)
Visual3d_SetIteratorOfSetOfLight_swigregister = _Visual3d.Visual3d_SetIteratorOfSetOfLight_swigregister
Visual3d_SetIteratorOfSetOfLight_swigregister(Visual3d_SetIteratorOfSetOfLight)

class Visual3d_SetIteratorOfSetOfView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: Visual3d_SetOfView &
        :rtype: None

        """
        _Visual3d.Visual3d_SetIteratorOfSetOfView_swiginit(self, _Visual3d.new_Visual3d_SetIteratorOfSetOfView(*args))

    def Initialize(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfView_Initialize(self, *args)


    def More(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfView_More(self, *args)


    def Next(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfView_Next(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SetIteratorOfSetOfView_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetIteratorOfSetOfView.Initialize = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfView_Initialize, None, Visual3d_SetIteratorOfSetOfView)
Visual3d_SetIteratorOfSetOfView.More = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfView_More, None, Visual3d_SetIteratorOfSetOfView)
Visual3d_SetIteratorOfSetOfView.Next = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfView_Next, None, Visual3d_SetIteratorOfSetOfView)
Visual3d_SetIteratorOfSetOfView.Value = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfView_Value, None, Visual3d_SetIteratorOfSetOfView)
Visual3d_SetIteratorOfSetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetIteratorOfSetOfView__kill_pointed, None, Visual3d_SetIteratorOfSetOfView)
Visual3d_SetIteratorOfSetOfView_swigregister = _Visual3d.Visual3d_SetIteratorOfSetOfView_swigregister
Visual3d_SetIteratorOfSetOfView_swigregister(Visual3d_SetIteratorOfSetOfView)

class Visual3d_SetListOfSetOfLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_SetListOfSetOfLight_swiginit(self, _Visual3d.new_Visual3d_SetListOfSetOfLight(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :rtype: None

        :param I:
        :type I: Handle_Visual3d_Light &
        :param theIt:
        :type theIt: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :rtype: None

        :param I:
        :type I: Handle_Visual3d_Light &
        :param theIt:
        :type theIt: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfLight &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfLight_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetListOfSetOfLight.Assign = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Assign, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Set = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Set, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Extent = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Extent, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Clear = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Clear, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.IsEmpty = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_IsEmpty, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Prepend = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Prepend, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Append = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Append, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.First = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_First, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Last = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Last, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.RemoveFirst = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_RemoveFirst, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.Remove = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_Remove, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.InsertBefore = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_InsertBefore, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight.InsertAfter = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight_InsertAfter, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfLight__kill_pointed, None, Visual3d_SetListOfSetOfLight)
Visual3d_SetListOfSetOfLight_swigregister = _Visual3d.Visual3d_SetListOfSetOfLight_swigregister
Visual3d_SetListOfSetOfLight_swigregister(Visual3d_SetListOfSetOfLight)

class Visual3d_SetListOfSetOfView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_SetListOfSetOfView_swiginit(self, _Visual3d.new_Visual3d_SetListOfSetOfView(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Set(self, *args)


    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Extent(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_IsEmpty(self, *args)


    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :rtype: None

        :param I:
        :type I: Handle_Visual3d_View &
        :param theIt:
        :type theIt: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Prepend(self, *args)


    def Append(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :rtype: None

        :param I:
        :type I: Handle_Visual3d_View &
        :param theIt:
        :type theIt: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Append(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Last(self, *args)


    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        :param Other:
        :type Other: Visual3d_SetListOfSetOfView &
        :param It:
        :type It: Visual3d_ListIteratorOfSetListOfSetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetListOfSetOfView_InsertAfter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetListOfSetOfView.Assign = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Assign, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Set = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Set, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Extent = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Extent, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Clear = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Clear, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.IsEmpty = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_IsEmpty, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Prepend = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Prepend, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Append = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Append, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.First = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_First, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Last = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Last, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.RemoveFirst = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_RemoveFirst, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.Remove = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_Remove, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.InsertBefore = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_InsertBefore, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView.InsertAfter = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView_InsertAfter, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetListOfSetOfView__kill_pointed, None, Visual3d_SetListOfSetOfView)
Visual3d_SetListOfSetOfView_swigregister = _Visual3d.Visual3d_SetListOfSetOfView_swigregister
Visual3d_SetListOfSetOfView_swigregister(Visual3d_SetListOfSetOfView)

class Visual3d_SetOfLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_SetOfLight_swiginit(self, _Visual3d.new_Visual3d_SetOfLight(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_SetOfLight_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfLight_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfLight_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfLight_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfLight_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfLight &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfLight &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfLight_IsAProperSubset(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetOfLight.Extent = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Extent, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.IsEmpty = new_instancemethod(_Visual3d.Visual3d_SetOfLight_IsEmpty, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Clear = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Clear, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Add = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Add, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Remove = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Remove, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Union = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Union, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Intersection = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Intersection, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Difference = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Difference, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.Contains = new_instancemethod(_Visual3d.Visual3d_SetOfLight_Contains, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.IsASubset = new_instancemethod(_Visual3d.Visual3d_SetOfLight_IsASubset, None, Visual3d_SetOfLight)
Visual3d_SetOfLight.IsAProperSubset = new_instancemethod(_Visual3d.Visual3d_SetOfLight_IsAProperSubset, None, Visual3d_SetOfLight)
Visual3d_SetOfLight._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetOfLight__kill_pointed, None, Visual3d_SetOfLight)
Visual3d_SetOfLight_swigregister = _Visual3d.Visual3d_SetOfLight_swigregister
Visual3d_SetOfLight_swigregister(Visual3d_SetOfLight)

class Visual3d_SetOfView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_SetOfView_swiginit(self, _Visual3d.new_Visual3d_SetOfView(*args))

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_SetOfView_Extent(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_IsEmpty(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfView_Clear(self, *args)


    def Add(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_Add(self, *args)


    def Remove(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_Remove(self, *args)


    def Union(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfView_Union(self, *args)


    def Intersection(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfView_Intersection(self, *args)


    def Difference(self, *args):
        """
        :param B:
        :type B: Visual3d_SetOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SetOfView_Difference(self, *args)


    def Contains(self, *args):
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_Contains(self, *args)


    def IsASubset(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_IsASubset(self, *args)


    def IsAProperSubset(self, *args):
        """
        :param S:
        :type S: Visual3d_SetOfView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_SetOfView_IsAProperSubset(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_SetOfView.Extent = new_instancemethod(_Visual3d.Visual3d_SetOfView_Extent, None, Visual3d_SetOfView)
Visual3d_SetOfView.IsEmpty = new_instancemethod(_Visual3d.Visual3d_SetOfView_IsEmpty, None, Visual3d_SetOfView)
Visual3d_SetOfView.Clear = new_instancemethod(_Visual3d.Visual3d_SetOfView_Clear, None, Visual3d_SetOfView)
Visual3d_SetOfView.Add = new_instancemethod(_Visual3d.Visual3d_SetOfView_Add, None, Visual3d_SetOfView)
Visual3d_SetOfView.Remove = new_instancemethod(_Visual3d.Visual3d_SetOfView_Remove, None, Visual3d_SetOfView)
Visual3d_SetOfView.Union = new_instancemethod(_Visual3d.Visual3d_SetOfView_Union, None, Visual3d_SetOfView)
Visual3d_SetOfView.Intersection = new_instancemethod(_Visual3d.Visual3d_SetOfView_Intersection, None, Visual3d_SetOfView)
Visual3d_SetOfView.Difference = new_instancemethod(_Visual3d.Visual3d_SetOfView_Difference, None, Visual3d_SetOfView)
Visual3d_SetOfView.Contains = new_instancemethod(_Visual3d.Visual3d_SetOfView_Contains, None, Visual3d_SetOfView)
Visual3d_SetOfView.IsASubset = new_instancemethod(_Visual3d.Visual3d_SetOfView_IsASubset, None, Visual3d_SetOfView)
Visual3d_SetOfView.IsAProperSubset = new_instancemethod(_Visual3d.Visual3d_SetOfView_IsAProperSubset, None, Visual3d_SetOfView)
Visual3d_SetOfView._kill_pointed = new_instancemethod(_Visual3d.Visual3d_SetOfView__kill_pointed, None, Visual3d_SetOfView)
Visual3d_SetOfView_swigregister = _Visual3d.Visual3d_SetOfView_swigregister
Visual3d_SetOfView_swigregister(Visual3d_SetOfView)

class Visual3d_TransientManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a TransientManager <aView>.

        :rtype: None

        """
        _Visual3d.Visual3d_TransientManager_swiginit(self, _Visual3d.new_Visual3d_TransientManager(*args))

    def Destroy(self, *args):
        """
        * Suppress the TransientManager <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_TransientManager_Destroy(self, *args)


    def BeginDraw(*args):
        """
        * Begins any graphics in the view <aView> Redraw any structured graphics in the back buffer before if <DoubleBuffer> is True. Restore the front buffer from the back before if <DoubleBuffer> is False. if <RetainMode> is True. the graphic managed itself exposure,resizing ... if <RetainMode> is False. the application must managed itself exposure,resizing ... Warning: Returns True if transient drawing is enabled in the associated view. Returns False ,if nothing works because something is wrong for the transient principle : Immediat mode is not implemented depending of the graphic library used.  MBX,PIXMAP double buffering don't works depending of  the graphic board and the visual of the window supporting  the view. Warning: No default attributes Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

        :param aView:
        :type aView: Handle_Visual3d_View &
        :param DoubleBuffer: default value is Standard_False
        :type DoubleBuffer: bool
        :param RetainMode: default value is Standard_False
        :type RetainMode: bool
        :rtype: int

        """
        return _Visual3d.Visual3d_TransientManager_BeginDraw(*args)

    BeginDraw = staticmethod(BeginDraw)

    def EndDraw(*args):
        """
        * Flush all graphics to the front buffer. Synchronize graphics to the screen if <Synchronize> is True (make becarefull to the performances!). Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

        :param Synchronize: default value is Standard_False
        :type Synchronize: bool
        :rtype: void

        """
        return _Visual3d.Visual3d_TransientManager_EndDraw(*args)

    EndDraw = staticmethod(EndDraw)

    def ClearDraw(*args):
        """
        * Clear all transient graphics in the view <aView>  updates a scene if <aFlush> = true Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

        :param aView:
        :type aView: Handle_Visual3d_View &
        :param aFlush: default value is Standard_True
        :type aFlush: bool
        :rtype: void

        """
        return _Visual3d.Visual3d_TransientManager_ClearDraw(*args)

    ClearDraw = staticmethod(ClearDraw)

    def BeginAddDraw(*args):
        """
        * Begins any add graphics in the view <aView> the application must managed itself exposure,resizing ... Warning: Returns True if transient drawing is enabled in the associated view. Returns False ,if nothing works because something is wrong for the transient principle : Immediat mode is not implemented depending of the graphic library used.  MBX,PIXMAP double buffering don't works depending of  the graphic board and the visual of the window supporting  the view. Warning: No default attributes Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

        :param aView:
        :type aView: Handle_Visual3d_View &
        :rtype: int

        """
        return _Visual3d.Visual3d_TransientManager_BeginAddDraw(*args)

    BeginAddDraw = staticmethod(BeginAddDraw)

    def EndAddDraw(*args):
        """
        * Flush all add graphics to the front buffer. Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

        :rtype: void

        """
        return _Visual3d.Visual3d_TransientManager_EndAddDraw(*args)

    EndAddDraw = staticmethod(EndAddDraw)

    def DrawStructure(*args):
        """
        * Drawn the structure <AStructure>. Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Visual3d.Visual3d_TransientManager_DrawStructure(*args)

    DrawStructure = staticmethod(DrawStructure)

    def _kill_pointed(self):
        """_kill_pointed(Visual3d_TransientManager self)"""
        return _Visual3d.Visual3d_TransientManager__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_TransientManager self) -> Handle_Visual3d_TransientManager"""
        return _Visual3d.Visual3d_TransientManager_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_TransientManager.Destroy = new_instancemethod(_Visual3d.Visual3d_TransientManager_Destroy, None, Visual3d_TransientManager)
Visual3d_TransientManager._kill_pointed = new_instancemethod(_Visual3d.Visual3d_TransientManager__kill_pointed, None, Visual3d_TransientManager)
Visual3d_TransientManager.GetHandle = new_instancemethod(_Visual3d.Visual3d_TransientManager_GetHandle, None, Visual3d_TransientManager)
Visual3d_TransientManager_swigregister = _Visual3d.Visual3d_TransientManager_swigregister
Visual3d_TransientManager_swigregister(Visual3d_TransientManager)

def Visual3d_TransientManager_BeginDraw(*args):
    """
    * Begins any graphics in the view <aView> Redraw any structured graphics in the back buffer before if <DoubleBuffer> is True. Restore the front buffer from the back before if <DoubleBuffer> is False. if <RetainMode> is True. the graphic managed itself exposure,resizing ... if <RetainMode> is False. the application must managed itself exposure,resizing ... Warning: Returns True if transient drawing is enabled in the associated view. Returns False ,if nothing works because something is wrong for the transient principle : Immediat mode is not implemented depending of the graphic library used.  MBX,PIXMAP double buffering don't works depending of  the graphic board and the visual of the window supporting  the view. Warning: No default attributes Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

    :param aView:
    :type aView: Handle_Visual3d_View &
    :param DoubleBuffer: default value is Standard_False
    :type DoubleBuffer: bool
    :param RetainMode: default value is Standard_False
    :type RetainMode: bool
    :rtype: int

    """
    return _Visual3d.Visual3d_TransientManager_BeginDraw(*args)

def Visual3d_TransientManager_EndDraw(*args):
    """
    * Flush all graphics to the front buffer. Synchronize graphics to the screen if <Synchronize> is True (make becarefull to the performances!). Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

    :param Synchronize: default value is Standard_False
    :type Synchronize: bool
    :rtype: void

    """
    return _Visual3d.Visual3d_TransientManager_EndDraw(*args)

def Visual3d_TransientManager_ClearDraw(*args):
    """
    * Clear all transient graphics in the view <aView>  updates a scene if <aFlush> = true Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

    :param aView:
    :type aView: Handle_Visual3d_View &
    :param aFlush: default value is Standard_True
    :type aFlush: bool
    :rtype: void

    """
    return _Visual3d.Visual3d_TransientManager_ClearDraw(*args)

def Visual3d_TransientManager_BeginAddDraw(*args):
    """
    * Begins any add graphics in the view <aView> the application must managed itself exposure,resizing ... Warning: Returns True if transient drawing is enabled in the associated view. Returns False ,if nothing works because something is wrong for the transient principle : Immediat mode is not implemented depending of the graphic library used.  MBX,PIXMAP double buffering don't works depending of  the graphic board and the visual of the window supporting  the view. Warning: No default attributes Raises TransientDefinitionError from Visual3d; if Drawing is already opened. or the associated view is not mapped on a window.

    :param aView:
    :type aView: Handle_Visual3d_View &
    :rtype: int

    """
    return _Visual3d.Visual3d_TransientManager_BeginAddDraw(*args)

def Visual3d_TransientManager_EndAddDraw(*args):
    """
    * Flush all add graphics to the front buffer. Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

    :rtype: void

    """
    return _Visual3d.Visual3d_TransientManager_EndAddDraw(*args)

def Visual3d_TransientManager_DrawStructure(*args):
    """
    * Drawn the structure <AStructure>. Raises TransientDefinitionError from Visual3d; if Drawing is not opened.

    :param AStructure:
    :type AStructure: Handle_Graphic3d_Structure &
    :rtype: void

    """
    return _Visual3d.Visual3d_TransientManager_DrawStructure(*args)

class Handle_Visual3d_TransientManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_TransientManager_swiginit(self, _Visual3d.new_Handle_Visual3d_TransientManager(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_TransientManager_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_TransientManager.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_TransientManager_Nullify, None, Handle_Visual3d_TransientManager)
Handle_Visual3d_TransientManager.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_TransientManager_IsNull, None, Handle_Visual3d_TransientManager)
Handle_Visual3d_TransientManager.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_TransientManager_GetObject, None, Handle_Visual3d_TransientManager)
Handle_Visual3d_TransientManager._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_TransientManager__kill_pointed, None, Handle_Visual3d_TransientManager)
Handle_Visual3d_TransientManager_swigregister = _Visual3d.Handle_Visual3d_TransientManager_swigregister
Handle_Visual3d_TransientManager_swigregister(Handle_Visual3d_TransientManager)

def Handle_Visual3d_TransientManager_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_TransientManager_DownCast(AnObject)
Handle_Visual3d_TransientManager_DownCast = _Visual3d.Handle_Visual3d_TransientManager_DownCast

class Visual3d_View(OCC.Graphic3d.Graphic3d_DataStructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a view in the viewer <AManager> with a default //!	 orientation and a default mapping.

        :param AManager:
        :type AManager: Handle_Visual3d_ViewManager &
        :rtype: None

        * Creates a view in the viewer <AManager> with the orientation //!	 <VO>, the mapping <VM>, and the context<CTX>.

        :param AManager:
        :type AManager: Handle_Visual3d_ViewManager &
        :param VO:
        :type VO: Visual3d_ViewOrientation &
        :param VM:
        :type VM: Visual3d_ViewMapping &
        :param CTX:
        :type CTX: Visual3d_ContextView &
        :rtype: None

        """
        _Visual3d.Visual3d_View_swiginit(self, _Visual3d.new_Visual3d_View(*args))

    def Activate(self, *args):
        """
        * Activates the view <self>. //!	 Map the associated window on the screen and //!	 post the view in this window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Activate(self, *args)


    def Deactivate(self, *args):
        """
        * Deactivates the view <self>. //!	 Unmap the associated window on the screen and //!	 unpost the view in this window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Deactivate(self, *args)


    def Redraw(self, *args):
        """
        * Updates screen in all cases.

        :rtype: None

        * Updates screen area in all cases. area is given by his xy min corner and size in pixel coordinates

        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        * Updates screen in all cases.

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :rtype: None

        * Updates screen area in all cases. area is given by his xy min corner and size in pixel coordinates

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Redraw(self, *args)


    def Remove(self, *args):
        """
        * Deletes and erases the view <self>. Warning: No more graphic operations in <self> after this call.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Remove(self, *args)


    def Resized(self, *args):
        """
        * Updates the view <self> after the modification //!	 of the associated window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Resized(self, *args)


    def SetBackground(self, *args):
        """
        * Modifies the default window background. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :param ABack:
        :type ABack: Aspect_Background &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackground(self, *args)


    def SetBackgroundImage(self, *args):
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :param FileName:
        :type FileName: char *
        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackgroundImage(self, *args)


    def SetBgImageStyle(self, *args):
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBgImageStyle(self, *args)


    def SetGradientBackground(self, *args):
        """
        * Modifies the gradient window background. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :param ABack:
        :type ABack: Aspect_GradientBackground &
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetGradientBackground(self, *args)


    def SetBgGradientStyle(self, *args):
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :param FillStyle:
        :type FillStyle: Aspect_GradientFillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBgGradientStyle(self, *args)


    def SetBackFacingModel(self, *args):
        """
        * Manages display of the back faces

        :param aModel:
        :type aModel: Visual3d_TypeOfBackfacingModel
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackFacingModel(self, *args)


    def BackFacingModel(self, *args):
        """
        * Returns current state of the back faces display

        :rtype: Visual3d_TypeOfBackfacingModel

        """
        return _Visual3d.Visual3d_View_BackFacingModel(self, *args)


    def SetContext(self, *args):
        """
        * Sets the context <CTX> in the view <self>.

        :param CTX:
        :type CTX: Visual3d_ContextView &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetContext(self, *args)


    def SetTransform(self, *args):
        """
        * Sets the transformation matrix that is applied to <MyViewOrientation> field of the view <self>. //!	 <AMatrix> is defined as a 4*4 real matrix. //!		------------------- //!		| a11 a12 a13 t1 | //!		| a21 a22 a23 t2 | //!		| a31 a32 a33 t3 | //!		| 0 0 0 1 | //!		------------------- Category: Methods to modify the class definition Warning: Raises TransformError if the matrix isn't a 4x4 matrix.

        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetTransform(self, *args)


    def SetViewMapping(self, *args):
        """
        * Modifies the mapping of the view <self>.

        :param VM:
        :type VM: Visual3d_ViewMapping &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewMapping(self, *args)


    def SetViewMappingDefault(self, *args):
        """
        * Saves the current mapping which will be the //!	 reference value for the reset of the mapping //!	 done by the ViewmappingReset method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewMappingDefault(self, *args)


    def SetViewOrientation(self, *args):
        """
        * Modifies the orientation of <self>.

        :param VO:
        :type VO: Visual3d_ViewOrientation &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewOrientation(self, *args)


    def SetViewOrientationDefault(self, *args):
        """
        * Saves the current orientation which will be the //!	 reference value for the reset of the orientation //!	 done by the ViewOrientationReset method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewOrientationDefault(self, *args)


    def SetWindow(self, *args):
        """
        * Associates the window <AWindow> to the view <self>. //!	 No new association if the window is already defined. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if it is impossible //!	 to associate a view and a window. //!	 (association already done or another problem) //!	 Modifies the viewmapping of the associated view //!	 when it calls the SetRatio method. //!	 After this call, each view is mapped in an unique window. Programming example : An example when we have 1 view and 1 window ------------------------------------------- Handle_Aspect_DisplayConnection aDisplayConnection; // Display connection initialization only needed on Linux platform // and on Mac OS X, in cases when you use Xlib for windows drawing. aDisplayConnection = new Aspect_DisplayConnection(); // Graphic driver initialization Handle_Graphic3d_GraphicDriver aGraphicDriver = Graphic3d::InitGraphicDriver (aDisplayConnection); // Define a view manager Handle_Visual3d_ViewManager aVisualManager = new Visual3d_ViewManager (aGraphicDriver); // Define a view Handle_Visual3d_View aView = new Visual3d_View (aVisaulManager); // Define a window Handle_Xw_Window aWindow = new Xw_Window //!	(aDisplayConnection, 'Graphic View 1', 0.695, 0.695, 0.600, 0.600, Quantity_NOC_MATRAGRAY); // Associate the view and the window aView->SetWindow (aWindow); // Map the window aWindow->Map (); // Activate the view aView->Activate ();

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :rtype: None

        * Associates the window <AWindow> and context <AContext> //!	 to the view <self>. //!	 If <AContext> is not NULL the graphic context is used directly to draw something in this view. //!	 Otherwise an internal context is created. If <ADisplayCB> is not NULL then a user display CB is call at the end of the OCC graphic traversal and just before the swap of buffers. The <aClientData> is pass to this call back. //!	 No new association if the window is already defined. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if it is impossible //!	 to associate a view and a window. //!	 (association already done or another problem) //!	 Modifies the viewmapping of the associated view //!	 when it calls the SetRatio method. //!	 After this call, each view is mapped in an unique window.

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param AContext:
        :type AContext: Aspect_RenderingContext
        :param ADisplayCB:
        :type ADisplayCB: Aspect_GraphicCallbackProc &
        :param AClientData:
        :type AClientData: Standard_Address
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetWindow(self, *args)


    def Update(self, *args):
        """
        * Updates screen in function of modifications of //!	 the structures.

        :rtype: None

        * Updates screen in function of modifications of //!	 the structures.

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Update(self, *args)


    def ViewMappingReset(self, *args):
        """
        * Sets the value of the mapping to be the same as //!	 the mapping saved by the SetViewMappingDefaut method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_ViewMappingReset(self, *args)


    def ViewOrientationReset(self, *args):
        """
        * Sets the value of the orientation to be the same as the //!	 orientation saved by the SetViewOrientationDefaut method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_ViewOrientationReset(self, *args)


    def SetComputedMode(self, *args):
        """
        * Switches computed HLR mode in the view

        :param aMode:
        :type aMode: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetComputedMode(self, *args)


    def ComputedMode(self, *args):
        """
        * Returns the computed HLR mode state

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ComputedMode(self, *args)


    def ZBufferTriedronSetup(self, *args):
        """
        * Customization of the ZBUFFER Triedron.  Initializes Colors of X Y and axis  Scale ratio defines decreasing of trihedron size when  its position is out of a View

        :param XColor: default value is Quantity_NOC_RED
        :type XColor: Quantity_NameOfColor
        :param YColor: default value is Quantity_NOC_GREEN
        :type YColor: Quantity_NameOfColor
        :param ZColor: default value is Quantity_NOC_BLUE1
        :type ZColor: Quantity_NameOfColor
        :param SizeRatio: default value is 0.8
        :type SizeRatio: float
        :param AxisDiametr: default value is 0.05
        :type AxisDiametr: float
        :param NbFacettes: default value is 12
        :type NbFacettes: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ZBufferTriedronSetup(self, *args)


    def TriedronDisplay(self, *args):
        """
        * Display of the Triedron.  Initialize position, color and length of Triedron axes.  The scale is a percent of the window width.  If AsWireframe is False triedron is shown in shaded mode  AColor is not considered for ZBUFFER mode

        :param APosition: default value is Aspect_TOTP_CENTER
        :type APosition: Aspect_TypeOfTriedronPosition
        :param AColor: default value is Quantity_NOC_WHITE
        :type AColor: Quantity_NameOfColor
        :param AScale: default value is 0.02
        :type AScale: float
        :param AsWireframe: default value is Standard_True
        :type AsWireframe: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronDisplay(self, *args)


    def TriedronErase(self, *args):
        """
        * Erases the Triedron.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronErase(self, *args)


    def TriedronEcho(self, *args):
        """
        * Highlights the echo zone of the Triedron.

        :param AType: default value is Aspect_TOTE_NONE
        :type AType: Aspect_TypeOfTriedronEcho
        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronEcho(self, *args)


    def GetGraduatedTrihedron(self, *args):
        """
        * Returns data of a graduated trihedron if displayed (return value is True)

        :param xname:
        :type xname: TCollection_ExtendedString &
        :param yname:
        :type yname: TCollection_ExtendedString &
        :param zname:
        :type zname: TCollection_ExtendedString &
        :param xdrawname:
        :type xdrawname: bool
        :param ydrawname:
        :type ydrawname: bool
        :param zdrawname:
        :type zdrawname: bool
        :param xdrawvalues:
        :type xdrawvalues: bool
        :param ydrawvalues:
        :type ydrawvalues: bool
        :param zdrawvalues:
        :type zdrawvalues: bool
        :param drawgrid:
        :type drawgrid: bool
        :param drawaxes:
        :type drawaxes: bool
        :param nbx:
        :type nbx: int &
        :param nby:
        :type nby: int &
        :param nbz:
        :type nbz: int &
        :param xoffset:
        :type xoffset: int &
        :param yoffset:
        :type yoffset: int &
        :param zoffset:
        :type zoffset: int &
        :param xaxisoffset:
        :type xaxisoffset: int &
        :param yaxisoffset:
        :type yaxisoffset: int &
        :param zaxisoffset:
        :type zaxisoffset: int &
        :param xdrawtickmarks:
        :type xdrawtickmarks: bool
        :param ydrawtickmarks:
        :type ydrawtickmarks: bool
        :param zdrawtickmarks:
        :type zdrawtickmarks: bool
        :param xtickmarklength:
        :type xtickmarklength: int &
        :param ytickmarklength:
        :type ytickmarklength: int &
        :param ztickmarklength:
        :type ztickmarklength: int &
        :param gridcolor:
        :type gridcolor: Quantity_Color &
        :param xnamecolor:
        :type xnamecolor: Quantity_Color &
        :param ynamecolor:
        :type ynamecolor: Quantity_Color &
        :param znamecolor:
        :type znamecolor: Quantity_Color &
        :param xcolor:
        :type xcolor: Quantity_Color &
        :param ycolor:
        :type ycolor: Quantity_Color &
        :param zcolor:
        :type zcolor: Quantity_Color &
        :param fontOfNames:
        :type fontOfNames: TCollection_AsciiString &
        :param styleOfNames:
        :type styleOfNames: Font_FontAspect &
        :param sizeOfNames:
        :type sizeOfNames: int &
        :param fontOfValues:
        :type fontOfValues: TCollection_AsciiString &
        :param styleOfValues:
        :type styleOfValues: Font_FontAspect &
        :param sizeOfValues:
        :type sizeOfValues: int &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_GetGraduatedTrihedron(self, *args)


    def GraduatedTrihedronDisplay(self, *args):
        """
        * Displays a graduated trihedron.

        :param xname:
        :type xname: TCollection_ExtendedString &
        :param yname:
        :type yname: TCollection_ExtendedString &
        :param zname:
        :type zname: TCollection_ExtendedString &
        :param xdrawname:
        :type xdrawname: bool
        :param ydrawname:
        :type ydrawname: bool
        :param zdrawname:
        :type zdrawname: bool
        :param xdrawvalues:
        :type xdrawvalues: bool
        :param ydrawvalues:
        :type ydrawvalues: bool
        :param zdrawvalues:
        :type zdrawvalues: bool
        :param drawgrid:
        :type drawgrid: bool
        :param drawaxes:
        :type drawaxes: bool
        :param nbx:
        :type nbx: int
        :param nby:
        :type nby: int
        :param nbz:
        :type nbz: int
        :param xoffset:
        :type xoffset: int
        :param yoffset:
        :type yoffset: int
        :param zoffset:
        :type zoffset: int
        :param xaxisoffset:
        :type xaxisoffset: int
        :param yaxisoffset:
        :type yaxisoffset: int
        :param zaxisoffset:
        :type zaxisoffset: int
        :param xdrawtickmarks:
        :type xdrawtickmarks: bool
        :param ydrawtickmarks:
        :type ydrawtickmarks: bool
        :param zdrawtickmarks:
        :type zdrawtickmarks: bool
        :param xtickmarklength:
        :type xtickmarklength: int
        :param ytickmarklength:
        :type ytickmarklength: int
        :param ztickmarklength:
        :type ztickmarklength: int
        :param gridcolor:
        :type gridcolor: Quantity_Color &
        :param xnamecolor:
        :type xnamecolor: Quantity_Color &
        :param ynamecolor:
        :type ynamecolor: Quantity_Color &
        :param znamecolor:
        :type znamecolor: Quantity_Color &
        :param xcolor:
        :type xcolor: Quantity_Color &
        :param ycolor:
        :type ycolor: Quantity_Color &
        :param zcolor:
        :type zcolor: Quantity_Color &
        :param fontOfNames:
        :type fontOfNames: TCollection_AsciiString &
        :param styleOfNames:
        :type styleOfNames: Font_FontAspect
        :param sizeOfNames:
        :type sizeOfNames: int
        :param fontOfValues:
        :type fontOfValues: TCollection_AsciiString &
        :param styleOfValues:
        :type styleOfValues: Font_FontAspect
        :param sizeOfValues:
        :type sizeOfValues: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_GraduatedTrihedronDisplay(self, *args)


    def GraduatedTrihedronErase(self, *args):
        """
        * Erases a graduated trihedron from the view.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_GraduatedTrihedronErase(self, *args)


    def Background(self, *args):
        """
        * Returns the value of the default window background.

        :rtype: Aspect_Background

        """
        return _Visual3d.Visual3d_View_Background(self, *args)


    def GradientBackground(self, *args):
        """
        * Returns the value of the window background.

        :rtype: Aspect_GradientBackground

        """
        return _Visual3d.Visual3d_View_GradientBackground(self, *args)


    def ContainsFacet(self, *args):
        """
        * Returns Standard_True if one of the structures //!	 displayed in the view <self> contains Polygons, //!	 Triangles or Quadrangles.

        :rtype: bool

        * Returns Standard_True if one of the structures //!	 in the set <ASet> contains Polygons, Triangles //!	 or Quadrangles.

        :param ASet:
        :type ASet: Graphic3d_MapOfStructure &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ContainsFacet(self, *args)


    def Context(self, *args):
        """
        * Returns the current context of the view <self>.

        :rtype: Visual3d_ContextView

        """
        return _Visual3d.Visual3d_View_Context(self, *args)


    def DisplayedStructures(self, *args):
        """
        * Returns the set of structures displayed in //!	 the view <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_DisplayedStructures(self, *args)


    def IsActive(self, *args):
        """
        * Returns the activity flag of the view <self>.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsActive(self, *args)


    def IsDefined(self, *args):
        """
        * Returns True if the window associated to the view //!	 <self> is defined.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDefined(self, *args)


    def IsDeleted(self, *args):
        """
        * Returns Standard_True is the view <self> is deleted. //!	 <self> is deleted after the call Remove (me).

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDeleted(self, *args)


    def MinMaxValues(self, *args):
        """
        * Returns the coordinates of the boundary box of all //!	 structures displayed in the view <self>.

        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param ZMin:
        :type ZMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :param ZMax:
        :type ZMax: float &
        :rtype: None

        * Returns the coordinates of the boundary box of all //!	 structures in the set <ASet>.

        :param ASet:
        :type ASet: Graphic3d_MapOfStructure &
        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param ZMin:
        :type ZMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :param ZMax:
        :type ZMax: float &
        :rtype: None

        * Returns the coordinates of the projection of the //!	 boundary box of all structures displayed in the view <self>.

        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :rtype: None

        * Returns the coordinates of the projection of the //!	 boundary box of all structures in the set <ASet>.

        :param ASet:
        :type ASet: Graphic3d_MapOfStructure &
        :param XMin:
        :type XMin: float &
        :param YMin:
        :type YMin: float &
        :param XMax:
        :type XMax: float &
        :param YMax:
        :type YMax: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_MinMaxValues(self, *args)


    def NumberOfDisplayedStructures(self, *args):
        """
        * Returns number of displayed structures in //!	 the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_NumberOfDisplayedStructures(self, *args)


    def Projects(self, *args):
        """
        * Returns the coordinates of the projection of the //!	 3d coordinates <AX>, <AY>, <AZ>.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :param APX:
        :type APX: float &
        :param APY:
        :type APY: float &
        :param APZ:
        :type APZ: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Projects(self, *args)


    def Transform(self, *args):
        """
        * Returns the transformation associated to the view <self>

        :rtype: TColStd_Array2OfReal

        """
        return _Visual3d.Visual3d_View_Transform(self, *args)


    def ViewMapping(self, *args):
        """
        * Returns the current mapping of the view <self>.

        :rtype: Visual3d_ViewMapping

        """
        return _Visual3d.Visual3d_View_ViewMapping(self, *args)


    def ViewMappingDefault(self, *args):
        """
        * Returns the current reset mapping of the view <self>.

        :rtype: Visual3d_ViewMapping

        """
        return _Visual3d.Visual3d_View_ViewMappingDefault(self, *args)


    def ViewOrientation(self, *args):
        """
        * Returns the current orientation of the view <self>.

        :rtype: Visual3d_ViewOrientation

        """
        return _Visual3d.Visual3d_View_ViewOrientation(self, *args)


    def ViewOrientationDefault(self, *args):
        """
        * Returns the current reset orientation of the view <self>.

        :rtype: Visual3d_ViewOrientation

        """
        return _Visual3d.Visual3d_View_ViewOrientationDefault(self, *args)


    def Window(self, *args):
        """
        * Returns the window associated to the view <self>. Warning: Raises ViewDefinitionError if the associated //!	 window isn't defined.

        :rtype: Handle_Aspect_Window

        """
        return _Visual3d.Visual3d_View_Window(self, *args)


    def LightLimit(self, *args):
        """
        * Returns the MAX number of light associated to the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_LightLimit(self, *args)


    def PlaneLimit(self, *args):
        """
        * Returns the MAX number of clipping planes associated to the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_PlaneLimit(self, *args)


    def ViewManager(self, *args):
        """
        * Returns the view manager handle which manage this view

        :rtype: Handle_Visual3d_ViewManager

        """
        return _Visual3d.Visual3d_View_ViewManager(self, *args)


    def ReCompute(self, *args):
        """
        * Computes the new presentation of the //!	 structure <AStructure> displayed in <self> //!	 with the type Graphic3d_TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ReCompute(self, *args)


    def Identification(self, *args):
        """
        * Returns the identification number of the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_Identification(self, *args)


    def MatrixOfMapping(self, *args):
        """
        * Returns the current matrix of mapping of the view <self>. Warning: Stores the current matrix of mapping.

        :rtype: TColStd_Array2OfReal

        """
        return _Visual3d.Visual3d_View_MatrixOfMapping(self, *args)


    def MatrixOfOrientation(self, *args):
        """
        * Returns the current matrix of orientation of the view <self>. Warning: Stores the current matrix of orientation.

        :rtype: TColStd_Array2OfReal

        """
        return _Visual3d.Visual3d_View_MatrixOfOrientation(self, *args)


    def CView(self, *args):
        """
        * Returns the c structure associated to <self>.

        :rtype: Standard_Address

        """
        return _Visual3d.Visual3d_View_CView(self, *args)


    def GraphicDriver(self, *args):
        """
        * Returns the associated GraphicDriver.

        :rtype: Handle_Graphic3d_GraphicDriver

        """
        return _Visual3d.Visual3d_View_GraphicDriver(self, *args)


    def Plot(self, *args):
        """
        * Calls the method Plot for each Structure //!	 displayed in <self>.

        :param APlotter:
        :type APlotter: Handle_Graphic3d_Plotter &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Plot(self, *args)


    def SetTransparency(self, *args):
        """
        * if <AFlag> is Standard_True then the transparency //!	 is managed in the view <self>. //!	 Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetTransparency(self, *args)


    def ZBufferIsActivated(self, *args):
        """
        * Returns Standard_True if the ZBuffer is activated //!	 in the view <self> and Standard_False if not.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ZBufferIsActivated(self, *args)


    def SetZBufferActivity(self, *args):
        """
        * Activates the ZBuffer if the integer <AnActivity> //!	 is equal to 1. //!	 Deactivates the ZBuffer if the integer <AnActivity> //!	 is equal to 0. //!	 If the integer <AnActivity> is equal to -1 then //!	 - the ZBuffer is activated if //!		me->Context ().Visualization () == Visual3d_TOV_SHADING //!	 - the ZBuffer is deactivated if //!		me->Context ().Visualization () == Visual3d_TOV_WIREFRAME

        :param AnActivity:
        :type AnActivity: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetZBufferActivity(self, *args)


    def UnderLayer(self, *args):
        """
        * Returns the underlay of the view <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_View_UnderLayer(self, *args)


    def OverLayer(self, *args):
        """
        * Returns the underlay of the view <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_View_OverLayer(self, *args)


    def EnableDepthTest(self, *args):
        """
        * turns on/off opengl depth

        :param enable:
        :type enable: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_EnableDepthTest(self, *args)


    def IsDepthTestEnabled(self, *args):
        """
        * returns current state of the opengl depth testing

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDepthTestEnabled(self, *args)


    def ReadDepths(self, *args):
        """
        * Reads depths of shown pixels of the given rectangle

        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :param buffer:
        :type buffer: Standard_Address
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ReadDepths(self, *args)


    def FBOCreate(self, *args):
        """
        * Generate offscreen FBO in the graphic library

        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: Graphic3d_PtrFrameBuffer

        """
        return _Visual3d.Visual3d_View_FBOCreate(self, *args)


    def FBORelease(self, *args):
        """
        * Remove offscreen FBO from the graphic library

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBORelease(self, *args)


    def FBOGetDimensions(self, *args):
        """
        * Read offscreen FBO configuration.

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer
        :param width:
        :type width: int &
        :param height:
        :type height: int &
        :param widthMax:
        :type widthMax: int &
        :param heightMax:
        :type heightMax: int &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBOGetDimensions(self, *args)


    def FBOChangeViewport(self, *args):
        """
        * Change offscreen FBO viewport.

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBOChangeViewport(self, *args)


    def BufferDump(self, *args):
        """
        * Dump active rendering buffer into specified memory buffer.

        :param theImage:
        :type theImage: Image_PixMap &
        :param theBufferType:
        :type theBufferType: Graphic3d_BufferType &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_BufferDump(self, *args)


    def EnableGLLight(self, *args):
        """
        * turns on/off opengl lighting, currently used in triedron displaying

        :param enable:
        :type enable: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_EnableGLLight(self, *args)


    def IsGLLightEnabled(self, *args):
        """
        * returns the current state of the gl lighting currently used in triedron displaying

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsGLLightEnabled(self, *args)


    def Export(self, *args):
        """
        * Export scene into the one of the Vector graphics formats (SVG, PS, PDF...). In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits on printing to laser printer). Notice however that results may differ a lot and do not contain some elements.

        :param theFileName:
        :type theFileName: char *
        :param theFormat:
        :type theFormat: Graphic3d_ExportFormat
        :param theSortType: default value is Graphic3d_ST_BSP_Tree
        :type theSortType: Graphic3d_SortType
        :param thePrecision: default value is 0.005
        :type thePrecision: float
        :param theProgressBarFunc: default value is NULL
        :type theProgressBarFunc: Standard_Address
        :param theProgressObject: default value is NULL
        :type theProgressObject: Standard_Address
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_Export(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_View self)"""
        return _Visual3d.Visual3d_View__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_View self) -> Handle_Visual3d_View"""
        return _Visual3d.Visual3d_View_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_View.Activate = new_instancemethod(_Visual3d.Visual3d_View_Activate, None, Visual3d_View)
Visual3d_View.Deactivate = new_instancemethod(_Visual3d.Visual3d_View_Deactivate, None, Visual3d_View)
Visual3d_View.Redraw = new_instancemethod(_Visual3d.Visual3d_View_Redraw, None, Visual3d_View)
Visual3d_View.Remove = new_instancemethod(_Visual3d.Visual3d_View_Remove, None, Visual3d_View)
Visual3d_View.Resized = new_instancemethod(_Visual3d.Visual3d_View_Resized, None, Visual3d_View)
Visual3d_View.SetBackground = new_instancemethod(_Visual3d.Visual3d_View_SetBackground, None, Visual3d_View)
Visual3d_View.SetBackgroundImage = new_instancemethod(_Visual3d.Visual3d_View_SetBackgroundImage, None, Visual3d_View)
Visual3d_View.SetBgImageStyle = new_instancemethod(_Visual3d.Visual3d_View_SetBgImageStyle, None, Visual3d_View)
Visual3d_View.SetGradientBackground = new_instancemethod(_Visual3d.Visual3d_View_SetGradientBackground, None, Visual3d_View)
Visual3d_View.SetBgGradientStyle = new_instancemethod(_Visual3d.Visual3d_View_SetBgGradientStyle, None, Visual3d_View)
Visual3d_View.SetBackFacingModel = new_instancemethod(_Visual3d.Visual3d_View_SetBackFacingModel, None, Visual3d_View)
Visual3d_View.BackFacingModel = new_instancemethod(_Visual3d.Visual3d_View_BackFacingModel, None, Visual3d_View)
Visual3d_View.SetContext = new_instancemethod(_Visual3d.Visual3d_View_SetContext, None, Visual3d_View)
Visual3d_View.SetTransform = new_instancemethod(_Visual3d.Visual3d_View_SetTransform, None, Visual3d_View)
Visual3d_View.SetViewMapping = new_instancemethod(_Visual3d.Visual3d_View_SetViewMapping, None, Visual3d_View)
Visual3d_View.SetViewMappingDefault = new_instancemethod(_Visual3d.Visual3d_View_SetViewMappingDefault, None, Visual3d_View)
Visual3d_View.SetViewOrientation = new_instancemethod(_Visual3d.Visual3d_View_SetViewOrientation, None, Visual3d_View)
Visual3d_View.SetViewOrientationDefault = new_instancemethod(_Visual3d.Visual3d_View_SetViewOrientationDefault, None, Visual3d_View)
Visual3d_View.SetWindow = new_instancemethod(_Visual3d.Visual3d_View_SetWindow, None, Visual3d_View)
Visual3d_View.Update = new_instancemethod(_Visual3d.Visual3d_View_Update, None, Visual3d_View)
Visual3d_View.ViewMappingReset = new_instancemethod(_Visual3d.Visual3d_View_ViewMappingReset, None, Visual3d_View)
Visual3d_View.ViewOrientationReset = new_instancemethod(_Visual3d.Visual3d_View_ViewOrientationReset, None, Visual3d_View)
Visual3d_View.SetComputedMode = new_instancemethod(_Visual3d.Visual3d_View_SetComputedMode, None, Visual3d_View)
Visual3d_View.ComputedMode = new_instancemethod(_Visual3d.Visual3d_View_ComputedMode, None, Visual3d_View)
Visual3d_View.ZBufferTriedronSetup = new_instancemethod(_Visual3d.Visual3d_View_ZBufferTriedronSetup, None, Visual3d_View)
Visual3d_View.TriedronDisplay = new_instancemethod(_Visual3d.Visual3d_View_TriedronDisplay, None, Visual3d_View)
Visual3d_View.TriedronErase = new_instancemethod(_Visual3d.Visual3d_View_TriedronErase, None, Visual3d_View)
Visual3d_View.TriedronEcho = new_instancemethod(_Visual3d.Visual3d_View_TriedronEcho, None, Visual3d_View)
Visual3d_View.GetGraduatedTrihedron = new_instancemethod(_Visual3d.Visual3d_View_GetGraduatedTrihedron, None, Visual3d_View)
Visual3d_View.GraduatedTrihedronDisplay = new_instancemethod(_Visual3d.Visual3d_View_GraduatedTrihedronDisplay, None, Visual3d_View)
Visual3d_View.GraduatedTrihedronErase = new_instancemethod(_Visual3d.Visual3d_View_GraduatedTrihedronErase, None, Visual3d_View)
Visual3d_View.Background = new_instancemethod(_Visual3d.Visual3d_View_Background, None, Visual3d_View)
Visual3d_View.GradientBackground = new_instancemethod(_Visual3d.Visual3d_View_GradientBackground, None, Visual3d_View)
Visual3d_View.ContainsFacet = new_instancemethod(_Visual3d.Visual3d_View_ContainsFacet, None, Visual3d_View)
Visual3d_View.Context = new_instancemethod(_Visual3d.Visual3d_View_Context, None, Visual3d_View)
Visual3d_View.DisplayedStructures = new_instancemethod(_Visual3d.Visual3d_View_DisplayedStructures, None, Visual3d_View)
Visual3d_View.IsActive = new_instancemethod(_Visual3d.Visual3d_View_IsActive, None, Visual3d_View)
Visual3d_View.IsDefined = new_instancemethod(_Visual3d.Visual3d_View_IsDefined, None, Visual3d_View)
Visual3d_View.IsDeleted = new_instancemethod(_Visual3d.Visual3d_View_IsDeleted, None, Visual3d_View)
Visual3d_View.MinMaxValues = new_instancemethod(_Visual3d.Visual3d_View_MinMaxValues, None, Visual3d_View)
Visual3d_View.NumberOfDisplayedStructures = new_instancemethod(_Visual3d.Visual3d_View_NumberOfDisplayedStructures, None, Visual3d_View)
Visual3d_View.Projects = new_instancemethod(_Visual3d.Visual3d_View_Projects, None, Visual3d_View)
Visual3d_View.Transform = new_instancemethod(_Visual3d.Visual3d_View_Transform, None, Visual3d_View)
Visual3d_View.ViewMapping = new_instancemethod(_Visual3d.Visual3d_View_ViewMapping, None, Visual3d_View)
Visual3d_View.ViewMappingDefault = new_instancemethod(_Visual3d.Visual3d_View_ViewMappingDefault, None, Visual3d_View)
Visual3d_View.ViewOrientation = new_instancemethod(_Visual3d.Visual3d_View_ViewOrientation, None, Visual3d_View)
Visual3d_View.ViewOrientationDefault = new_instancemethod(_Visual3d.Visual3d_View_ViewOrientationDefault, None, Visual3d_View)
Visual3d_View.Window = new_instancemethod(_Visual3d.Visual3d_View_Window, None, Visual3d_View)
Visual3d_View.LightLimit = new_instancemethod(_Visual3d.Visual3d_View_LightLimit, None, Visual3d_View)
Visual3d_View.PlaneLimit = new_instancemethod(_Visual3d.Visual3d_View_PlaneLimit, None, Visual3d_View)
Visual3d_View.ViewManager = new_instancemethod(_Visual3d.Visual3d_View_ViewManager, None, Visual3d_View)
Visual3d_View.ReCompute = new_instancemethod(_Visual3d.Visual3d_View_ReCompute, None, Visual3d_View)
Visual3d_View.Identification = new_instancemethod(_Visual3d.Visual3d_View_Identification, None, Visual3d_View)
Visual3d_View.MatrixOfMapping = new_instancemethod(_Visual3d.Visual3d_View_MatrixOfMapping, None, Visual3d_View)
Visual3d_View.MatrixOfOrientation = new_instancemethod(_Visual3d.Visual3d_View_MatrixOfOrientation, None, Visual3d_View)
Visual3d_View.CView = new_instancemethod(_Visual3d.Visual3d_View_CView, None, Visual3d_View)
Visual3d_View.GraphicDriver = new_instancemethod(_Visual3d.Visual3d_View_GraphicDriver, None, Visual3d_View)
Visual3d_View.Plot = new_instancemethod(_Visual3d.Visual3d_View_Plot, None, Visual3d_View)
Visual3d_View.SetTransparency = new_instancemethod(_Visual3d.Visual3d_View_SetTransparency, None, Visual3d_View)
Visual3d_View.ZBufferIsActivated = new_instancemethod(_Visual3d.Visual3d_View_ZBufferIsActivated, None, Visual3d_View)
Visual3d_View.SetZBufferActivity = new_instancemethod(_Visual3d.Visual3d_View_SetZBufferActivity, None, Visual3d_View)
Visual3d_View.UnderLayer = new_instancemethod(_Visual3d.Visual3d_View_UnderLayer, None, Visual3d_View)
Visual3d_View.OverLayer = new_instancemethod(_Visual3d.Visual3d_View_OverLayer, None, Visual3d_View)
Visual3d_View.EnableDepthTest = new_instancemethod(_Visual3d.Visual3d_View_EnableDepthTest, None, Visual3d_View)
Visual3d_View.IsDepthTestEnabled = new_instancemethod(_Visual3d.Visual3d_View_IsDepthTestEnabled, None, Visual3d_View)
Visual3d_View.ReadDepths = new_instancemethod(_Visual3d.Visual3d_View_ReadDepths, None, Visual3d_View)
Visual3d_View.FBOCreate = new_instancemethod(_Visual3d.Visual3d_View_FBOCreate, None, Visual3d_View)
Visual3d_View.FBORelease = new_instancemethod(_Visual3d.Visual3d_View_FBORelease, None, Visual3d_View)
Visual3d_View.FBOGetDimensions = new_instancemethod(_Visual3d.Visual3d_View_FBOGetDimensions, None, Visual3d_View)
Visual3d_View.FBOChangeViewport = new_instancemethod(_Visual3d.Visual3d_View_FBOChangeViewport, None, Visual3d_View)
Visual3d_View.BufferDump = new_instancemethod(_Visual3d.Visual3d_View_BufferDump, None, Visual3d_View)
Visual3d_View.EnableGLLight = new_instancemethod(_Visual3d.Visual3d_View_EnableGLLight, None, Visual3d_View)
Visual3d_View.IsGLLightEnabled = new_instancemethod(_Visual3d.Visual3d_View_IsGLLightEnabled, None, Visual3d_View)
Visual3d_View.Export = new_instancemethod(_Visual3d.Visual3d_View_Export, None, Visual3d_View)
Visual3d_View._kill_pointed = new_instancemethod(_Visual3d.Visual3d_View__kill_pointed, None, Visual3d_View)
Visual3d_View.GetHandle = new_instancemethod(_Visual3d.Visual3d_View_GetHandle, None, Visual3d_View)
Visual3d_View_swigregister = _Visual3d.Visual3d_View_swigregister
Visual3d_View_swigregister(Visual3d_View)

class Handle_Visual3d_View(OCC.Graphic3d.Handle_Graphic3d_DataStructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_View_swiginit(self, _Visual3d.new_Handle_Visual3d_View(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_View_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_View.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_View_Nullify, None, Handle_Visual3d_View)
Handle_Visual3d_View.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_View_IsNull, None, Handle_Visual3d_View)
Handle_Visual3d_View.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_View_GetObject, None, Handle_Visual3d_View)
Handle_Visual3d_View._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_View__kill_pointed, None, Handle_Visual3d_View)
Handle_Visual3d_View_swigregister = _Visual3d.Handle_Visual3d_View_swigregister
Handle_Visual3d_View_swigregister(Handle_Visual3d_View)

def Handle_Visual3d_View_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_View_DownCast(AnObject)
Handle_Visual3d_View_DownCast = _Visual3d.Handle_Visual3d_View_DownCast

class Visual3d_ViewManager(OCC.Graphic3d.Graphic3d_StructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a 3D visualizer. Currently creating of more than 100 viewer instances is not supported and leads to InitializationError and initialisation failure. This limitation might be addressed in some future OCCT releases. Category: Methods to modify the class definition

        :param theDriver:
        :type theDriver: Handle_Graphic3d_GraphicDriver &
        :rtype: None

        """
        _Visual3d.Visual3d_ViewManager_swiginit(self, _Visual3d.new_Visual3d_ViewManager(*args))

    def Activate(self, *args):
        """
        * Activates all the views of the manager <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Activate(self, *args)


    def Deactivate(self, *args):
        """
        * Deactivates all the views of the manager <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Deactivate(self, *args)


    def Redraw(self, *args):
        """
        * Redraws all the displayed structures.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Redraw(self, *args)


    def Remove(self, *args):
        """
        * Deletes and erases the 3D visualiser <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Remove(self, *args)


    def ActivatedView(self, *args):
        """
        * Returns the group of views activated in the visualiser <self>.

        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_ViewManager_ActivatedView(self, *args)


    def ConvertCoord(self, *args):
        """
        * Applies the view orientation transformation, the //!	 view mapping transformation and view clip, the //!	 display transformation to the vertex <AVertex>. //!	 Returns the pixel coordinates <AU>, <AV>. Warning: Returns <AU> = <AV> = IntegerLast () if the //!	 evaluation is impossible. //!	 -- Bad Window, Numeric error...

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param AVertex:
        :type AVertex: Graphic3d_Vertex &
        :param AU:
        :type AU: int &
        :param AV:
        :type AV: int &
        :rtype: None

        * Applies the inverse of the display transformation, the //!	 inverse of the view mapping transformation and view clip, //!	 the inverse of the view orientation transformation to //!	 the pixel coordinates <AU>, <AV>. //!	 Returns the world coordinates <AVertex>. Warning: Returns AVertex (X, Y, Z) with X = Y = Z = RealLast () //!	 if the evaluation is impossible. //!	 -- Bad Window, Numeric error...

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param AU:
        :type AU: int
        :param AV:
        :type AV: int
        :rtype: Graphic3d_Vertex

        """
        return _Visual3d.Visual3d_ViewManager_ConvertCoord(self, *args)


    def ConvertCoordWithProj(self, *args):
        """
        * Applies the inverse of the display transformation, the //!	 inverse of the view mapping transformation and view clip, //!	 the inverse of the view orientation transformation to //!	 the pixel coordinates <AU>, <AV>. //!	 Returns the world coordinates <AVertex> and projection ray <AVector>. Warning: Returns AVertex (X, Y, Z) with X = Y = Z = RealLast () and AVector (VX, VY, VZ) with VX = VY = VZ = 0. //!	 if the evaluation is impossible. //!	 -- Bad Window, Numeric error...

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param AU:
        :type AU: int
        :param AV:
        :type AV: int
        :param Point:
        :type Point: Graphic3d_Vertex &
        :param Proj:
        :type Proj: Graphic3d_Vector &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_ConvertCoordWithProj(self, *args)


    def DefinedView(self, *args):
        """
        * Returns the group of views defined in the visualiser <self>.

        :rtype: Handle_Visual3d_HSetOfView

        """
        return _Visual3d.Visual3d_ViewManager_DefinedView(self, *args)


    def MaxNumOfViews(self, *args):
        """
        * Returns the theoretical maximum number of //!	 definable views in the view manager <self>. Warning: It's not possible to accept an infinite //!	 number of definable views because each //!	 view must have an identification and we //!	 have different view managers.

        :rtype: int

        """
        return _Visual3d.Visual3d_ViewManager_MaxNumOfViews(self, *args)


    def UnIdentification(self, *args):
        """
        * Release a unique ID of the view reserved for the view on its creation.

        :param aViewId:
        :type aViewId: int
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_UnIdentification(self, *args)


    def Identification(self, *args):
        """
        * Returns : //!	 a new identification number for a new view //!	 in the visualiser.

        :param AView:
        :type AView: Handle_Visual3d_View &
        :rtype: int

        * Returns the structure with the identification number <AId>.

        :param AId:
        :type AId: int
        :rtype: Handle_Graphic3d_Structure

        * Returns the identification number of the visualiser.

        :rtype: int

        """
        return _Visual3d.Visual3d_ViewManager_Identification(self, *args)


    def Erase(self, *args):
        """
        * Erases all of the structures displayed in the //!	 visualiser <self>.

        :rtype: None

        * Erases the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Erase(self, *args)


    def UnHighlight(self, *args):
        """
        * Suppress the highlighting on all the structures.

        :rtype: None

        * Suppress the highlighting on the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_UnHighlight(self, *args)


    def ViewExists(self, *args):
        """
        * Returns Standard_True if the view associated to the //!	 window <AWindow> exists and is activated. //!	 <TheViewId> contains the internal identification of //!	 the associated view.

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param TheCView:
        :type TheCView: Graphic3d_CView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_ViewExists(self, *args)


    def UnderLayer(self, *args):
        """
        * Returns the underlay of the viewer <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_ViewManager_UnderLayer(self, *args)


    def OverLayer(self, *args):
        """
        * Returns the underlay of the viewer <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_ViewManager_OverLayer(self, *args)


    def ReCompute(self, *args):
        """
        * Forces a new construction of the structure <AStructure> //!	 if <AStructure> is displayed and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        * Forces a new construction of the structure <AStructure> //!	 if <AStructure> is displayed in <AProjector> and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AProjector:
        :type AProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_ReCompute(self, *args)


    def Transparency(self, *args):
        """
        * Returns Standard_True if the transparency //!	 is activated in all activated views. //!	 Default Standard_False

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_Transparency(self, *args)


    def SetTransparency(self, *args):
        """
        * if <AFlag> is Standard_True then the transparency //!	 is managed. //!	 Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_SetTransparency(self, *args)


    def ZBufferAuto(self, *args):
        """
        * Returns Standard_True if the zbuffer activity //!	 is managed automatically. //!	 Default Standard_False

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_ZBufferAuto(self, *args)


    def SetZBufferAuto(self, *args):
        """
        * if <AFlag> is Standard_True then the zbuffer activity //!	 is managed automatically. //!	 Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_SetZBufferAuto(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Visual3d_ViewManager self)"""
        return _Visual3d.Visual3d_ViewManager__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Visual3d_ViewManager self) -> Handle_Visual3d_ViewManager"""
        return _Visual3d.Visual3d_ViewManager_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ViewManager.Activate = new_instancemethod(_Visual3d.Visual3d_ViewManager_Activate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Deactivate = new_instancemethod(_Visual3d.Visual3d_ViewManager_Deactivate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Redraw = new_instancemethod(_Visual3d.Visual3d_ViewManager_Redraw, None, Visual3d_ViewManager)
Visual3d_ViewManager.Remove = new_instancemethod(_Visual3d.Visual3d_ViewManager_Remove, None, Visual3d_ViewManager)
Visual3d_ViewManager.ActivatedView = new_instancemethod(_Visual3d.Visual3d_ViewManager_ActivatedView, None, Visual3d_ViewManager)
Visual3d_ViewManager.ConvertCoord = new_instancemethod(_Visual3d.Visual3d_ViewManager_ConvertCoord, None, Visual3d_ViewManager)
Visual3d_ViewManager.ConvertCoordWithProj = new_instancemethod(_Visual3d.Visual3d_ViewManager_ConvertCoordWithProj, None, Visual3d_ViewManager)
Visual3d_ViewManager.DefinedView = new_instancemethod(_Visual3d.Visual3d_ViewManager_DefinedView, None, Visual3d_ViewManager)
Visual3d_ViewManager.MaxNumOfViews = new_instancemethod(_Visual3d.Visual3d_ViewManager_MaxNumOfViews, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnIdentification = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnIdentification, None, Visual3d_ViewManager)
Visual3d_ViewManager.Identification = new_instancemethod(_Visual3d.Visual3d_ViewManager_Identification, None, Visual3d_ViewManager)
Visual3d_ViewManager.Erase = new_instancemethod(_Visual3d.Visual3d_ViewManager_Erase, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnHighlight = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnHighlight, None, Visual3d_ViewManager)
Visual3d_ViewManager.ViewExists = new_instancemethod(_Visual3d.Visual3d_ViewManager_ViewExists, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnderLayer = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnderLayer, None, Visual3d_ViewManager)
Visual3d_ViewManager.OverLayer = new_instancemethod(_Visual3d.Visual3d_ViewManager_OverLayer, None, Visual3d_ViewManager)
Visual3d_ViewManager.ReCompute = new_instancemethod(_Visual3d.Visual3d_ViewManager_ReCompute, None, Visual3d_ViewManager)
Visual3d_ViewManager.Transparency = new_instancemethod(_Visual3d.Visual3d_ViewManager_Transparency, None, Visual3d_ViewManager)
Visual3d_ViewManager.SetTransparency = new_instancemethod(_Visual3d.Visual3d_ViewManager_SetTransparency, None, Visual3d_ViewManager)
Visual3d_ViewManager.ZBufferAuto = new_instancemethod(_Visual3d.Visual3d_ViewManager_ZBufferAuto, None, Visual3d_ViewManager)
Visual3d_ViewManager.SetZBufferAuto = new_instancemethod(_Visual3d.Visual3d_ViewManager_SetZBufferAuto, None, Visual3d_ViewManager)
Visual3d_ViewManager._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ViewManager__kill_pointed, None, Visual3d_ViewManager)
Visual3d_ViewManager.GetHandle = new_instancemethod(_Visual3d.Visual3d_ViewManager_GetHandle, None, Visual3d_ViewManager)
Visual3d_ViewManager_swigregister = _Visual3d.Visual3d_ViewManager_swigregister
Visual3d_ViewManager_swigregister(Visual3d_ViewManager)

class Handle_Visual3d_ViewManager(OCC.Graphic3d.Handle_Graphic3d_StructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_ViewManager_swiginit(self, _Visual3d.new_Handle_Visual3d_ViewManager(*args))
    DownCast = staticmethod(_Visual3d.Handle_Visual3d_ViewManager_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Visual3d_ViewManager.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager_Nullify, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager_IsNull, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager.GetObject = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager_GetObject, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager._kill_pointed = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager__kill_pointed, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager_swigregister = _Visual3d.Handle_Visual3d_ViewManager_swigregister
Handle_Visual3d_ViewManager_swigregister(Handle_Visual3d_ViewManager)

def Handle_Visual3d_ViewManager_DownCast(AnObject):
    return _Visual3d.Handle_Visual3d_ViewManager_DownCast(AnObject)
Handle_Visual3d_ViewManager_DownCast = _Visual3d.Handle_Visual3d_ViewManager_DownCast

class Visual3d_ViewMapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a projection. //!	TypeOfProjection		= TOP_PARALLEL //!	PRP : Projection Reference Point= (0.5, 0.5, 2.0) //!	BPD : Distance from Back Plane	= 0.0 //!	FPD : Distance from Front Plane	= 1.0 //!	VPD : Distance from View Plane	= 1.0 //!	WUmin	= 0.0 //!	WUmax	= 1.0 //!	WVmin	= 0.0 //!	WVmax	= 1.0

        :rtype: None

        * Creates a projection. //!	TypeOfProjection : TOP_PERSPECTIVE //!			 TOP_PARALLEL //!	PRP : Projection Reference Point with respect to //!	 coordinate system VRC, defined by the //!	 class ViewOrientation. //!	BPD : Distance from Back Plane. //!	FPD : Distance from Front Plane. //!	VPD : Distance from View Plane. //!	These three values are with respect to VRP, according to //!	the N axis of the VRC coordinate system, defined by the class //!	ViewOrientation. //!	WUmin,WUmax,WVmin,WVmax : Visible part of the plane of //!	projection defined with respect to the UV axes of coordinate //!	system VRC. //!	 That's what allows modification of the zoom/panning. //!	The mapping of the visible part of the plane of projection //!	on the screen is done in the window. //!	 That's why multiple views on the same window is not allowed. Warning: Raises ViewMappingDefinitionError //!	 if the specified window is invalid. //!	 if <PRP> is between the front and back planes. //!	 if <PRP> is positioned on the view plane. //!	 if the back plane is in front of the front plane.

        :param AType:
        :type AType: Visual3d_TypeOfProjection
        :param PRP:
        :type PRP: Graphic3d_Vertex &
        :param BPD:
        :type BPD: float
        :param FPD:
        :type FPD: float
        :param VPD:
        :type VPD: float
        :param WUmin:
        :type WUmin: float
        :param WVmin:
        :type WVmin: float
        :param WUmax:
        :type WUmax: float
        :param WVmax:
        :type WVmax: float
        :rtype: None

        """
        _Visual3d.Visual3d_ViewMapping_swiginit(self, _Visual3d.new_Visual3d_ViewMapping(*args))

    def SetBackPlaneDistance(self, *args):
        """
        * Modifies the back clipping plane. Category: Methods to modify the class definition Warning: Raises ViewMappingDefinitionError //!	 if <PRP> is between the front and back planes. //!	 if <PRP> is positioned on the view plane. //!	 if the back plane is in front of the front plane.

        :param BPD:
        :type BPD: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetBackPlaneDistance(self, *args)


    def SetFrontPlaneDistance(self, *args):
        """
        * Modifies the front clipping plane. Category: Methods to modify the class definition Warning: Raises ViewMappingDefinitionError //!	 if <PRP> is between the front and back planes. //!	 if <PRP> is positioned on the view plane. //!	 if the back plane is in front of the front plane.

        :param FPD:
        :type FPD: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetFrontPlaneDistance(self, *args)


    def SetProjection(self, *args):
        """
        * Modifies the type of projection. //!	 TypeOfProjection : TOP_PERSPECTIVE //!			 TOP_PARALLEL

        :param AType:
        :type AType: Visual3d_TypeOfProjection
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetProjection(self, *args)


    def SetProjectionReferencePoint(self, *args):
        """
        * Modifies the PRP. Category: Methods to modify the class definition Warning: Raises ViewMappingDefinitionError //!	 if <PRP> is between the front and back planes. //!	 if <PRP> is positioned on the view plane.

        :param PRP:
        :type PRP: Graphic3d_Vertex &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetProjectionReferencePoint(self, *args)


    def SetViewPlaneDistance(self, *args):
        """
        * Modifies the distance of the view plane of projection. Category: Methods to modify the class definition Warning: Raises ViewMappingDefinitionError //!	 if <PRP> is positioned on the view plane.

        :param VPD:
        :type VPD: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetViewPlaneDistance(self, *args)


    def SetWindowLimit(self, *args):
        """
        * Modifies the visible part of the projection plane. Category: Methods to modify the class definition Warning: Raises ViewMappingDefinitionError if the //!	 specified window is invalid.

        :param Umin:
        :type Umin: float
        :param Vmin:
        :type Vmin: float
        :param Umax:
        :type Umax: float
        :param Vmax:
        :type Vmax: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetWindowLimit(self, *args)


    def SetCustomProjectionMatrix(self, *args):
        """
        * Sets custom PROJECTION matrix for the OpenGl context

        :param Mat:
        :type Mat: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_SetCustomProjectionMatrix(self, *args)


    def BackPlaneDistance(self, *args):
        """
        * Returns the distance from the back clipping plane of this view mapping.

        :rtype: float

        """
        return _Visual3d.Visual3d_ViewMapping_BackPlaneDistance(self, *args)


    def FrontPlaneDistance(self, *args):
        """
        * Returns the distance from the front clipping plane of this view mapping.

        :rtype: float

        """
        return _Visual3d.Visual3d_ViewMapping_FrontPlaneDistance(self, *args)


    def Projection(self, *args):
        """
        * Returns the type of projection.

        :rtype: Visual3d_TypeOfProjection

        """
        return _Visual3d.Visual3d_ViewMapping_Projection(self, *args)


    def ProjectionReferencePoint(self, *args):
        """
        * Returns the PRP.

        :rtype: Graphic3d_Vertex

        """
        return _Visual3d.Visual3d_ViewMapping_ProjectionReferencePoint(self, *args)


    def ViewPlaneDistance(self, *args):
        """
        * Returns the distance from the projection plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ViewMapping_ViewPlaneDistance(self, *args)


    def WindowLimit(self, *args):
        """
        * Returns the visible part of the projection plane.

        :param Umin:
        :type Umin: float &
        :param Vmin:
        :type Vmin: float &
        :param Umax:
        :type Umax: float &
        :param Vmax:
        :type Vmax: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewMapping_WindowLimit(self, *args)


    def IsCustomMatrix(self, *args):
        """
        * Returns whether the custom PROJECTION matrix is used.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewMapping_IsCustomMatrix(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ViewMapping.SetBackPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetBackPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetFrontPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetFrontPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetProjection = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetProjection, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetProjectionReferencePoint = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetProjectionReferencePoint, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetViewPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetViewPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetWindowLimit = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetWindowLimit, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.SetCustomProjectionMatrix = new_instancemethod(_Visual3d.Visual3d_ViewMapping_SetCustomProjectionMatrix, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.BackPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_BackPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.FrontPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_FrontPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.Projection = new_instancemethod(_Visual3d.Visual3d_ViewMapping_Projection, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.ProjectionReferencePoint = new_instancemethod(_Visual3d.Visual3d_ViewMapping_ProjectionReferencePoint, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.ViewPlaneDistance = new_instancemethod(_Visual3d.Visual3d_ViewMapping_ViewPlaneDistance, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.WindowLimit = new_instancemethod(_Visual3d.Visual3d_ViewMapping_WindowLimit, None, Visual3d_ViewMapping)
Visual3d_ViewMapping.IsCustomMatrix = new_instancemethod(_Visual3d.Visual3d_ViewMapping_IsCustomMatrix, None, Visual3d_ViewMapping)
Visual3d_ViewMapping._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ViewMapping__kill_pointed, None, Visual3d_ViewMapping)
Visual3d_ViewMapping_swigregister = _Visual3d.Visual3d_ViewMapping_swigregister
Visual3d_ViewMapping_swigregister(Visual3d_ViewMapping)

class Visual3d_ViewOrientation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a VRC coordinate system. //!	 VRP		: Origin of the VRC coordinate system. //!			 (default value : 0.0, 0.0, 0.0) //!	 VPN		: Vector normal to the plane of visualisation. //!			 (default value : 0.0, 0.0, 1.0) //!	 VUP 	: Vector for which the projection in the plane //!			 of visualisation defines the axis V of a VRC //!			 coordinate system. //!			 (default value : 0.0, 1.0, 0.0)

        :rtype: None

        * Creates a VRC coordinate system. //!	 VRP		: Origin of the VRC coordinate system. //!	 VPN		: Vector normal to the plane of visualisation. //!	 VUP 	: Vector for which the projection in the plane //!			 of visualisation defines the axis V of a VRC //!			 coordinate system. //!			 This vector can be likened to the //!			 vertical of the observer. Warning: Raises ViewOrientationDefinitionError //!	 if <VPN> is null. //!	 if <VUP> is null. //!	 if <VPN> and <VUP> are parallel.

        :param VRP:
        :type VRP: Graphic3d_Vertex &
        :param VPN:
        :type VPN: Graphic3d_Vector &
        :param VUP:
        :type VUP: Graphic3d_Vector &
        :rtype: None

        * Creates a VRC coordinate system. //!	 VRP		: Origin of VRC coordinate system. //!	 VPN		: Normal vector to the plane of visualisation. //!	 Twist 	: Angle in radians of the V axis in the VRC //!			 coordinate system with the projection in //!			 the plane of visualisation of the Zm axis //!			 in the model space. Warning: Raises ViewOrientationDefinitionError if <VPN> is null.

        :param VRP:
        :type VRP: Graphic3d_Vertex &
        :param VPN:
        :type VPN: Graphic3d_Vector &
        :param Twist:
        :type Twist: float
        :rtype: None

        * Creates a VRC coordinate system. //!	 VRP		: Origin of the VRC coordinate system. //!	 Azim 	: Angle in radians of the plane of visualisation //!			 with the XmYm plane of the model space. //!	 Inc 	: Angle in radians of the plane of visualisation //!			 with the YmZm plane of the model space. //!	 Twist 	: Angle in radians of the V axis in the VRC //!			 coordinate system with the projection in //!			 the plane of visualisation of the Zm axis //!			 in the model space. Warning: Raises ViewOrientationDefinitionError

        :param VRP:
        :type VRP: Graphic3d_Vertex &
        :param Azim:
        :type Azim: float
        :param Inc:
        :type Inc: float
        :param Twist:
        :type Twist: float
        :rtype: None

        """
        _Visual3d.Visual3d_ViewOrientation_swiginit(self, _Visual3d.new_Visual3d_ViewOrientation(*args))

    def SetViewReferencePlane(self, *args):
        """
        * Modifies the plane of visualisation //!	 defined by a normal vector. Category: Methods to modify the class definition Warning: Raises ViewOrientationDefinitionError if <VPN> is null.

        :param VPN:
        :type VPN: Graphic3d_Vector &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_SetViewReferencePlane(self, *args)


    def SetViewReferencePoint(self, *args):
        """
        * Modifies the origin of the VRC coordinate system

        :param VRP:
        :type VRP: Graphic3d_Vertex &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_SetViewReferencePoint(self, *args)


    def SetViewReferenceUp(self, *args):
        """
        * Modifies the vertical of the observer. Category: Methods to modify the class definition Warning: Raises ViewOrientationDefinitionError if <VUP> is null.

        :param VUP:
        :type VUP: Graphic3d_Vector &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_SetViewReferenceUp(self, *args)


    def SetAxialScale(self, *args):
        """
        * Sets axial scale factors of the view

        :param Sx:
        :type Sx: float
        :param Sy:
        :type Sy: float
        :param Sz:
        :type Sz: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_SetAxialScale(self, *args)


    def SetCustomModelViewMatrix(self, *args):
        """
        * Sets custom MODELVIEW matrix for the OpenGl context

        :param Mat:
        :type Mat: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_SetCustomModelViewMatrix(self, *args)


    def Twist(self, *args):
        """
        * Returns the angle in radians of the V axis in the VRC //!	 coordinate system with the projection in the plane of //!	 visualisation of the Zm axis in the model space.

        :rtype: float

        """
        return _Visual3d.Visual3d_ViewOrientation_Twist(self, *args)


    def ViewReferencePlane(self, *args):
        """
        * Returns the normal to the plane of projection.

        :rtype: Graphic3d_Vector

        """
        return _Visual3d.Visual3d_ViewOrientation_ViewReferencePlane(self, *args)


    def ViewReferencePoint(self, *args):
        """
        * Returns origin of the VRC coordinate system.

        :rtype: Graphic3d_Vertex

        """
        return _Visual3d.Visual3d_ViewOrientation_ViewReferencePoint(self, *args)


    def ViewReferenceUp(self, *args):
        """
        * Returns the vertical of the observer.

        :rtype: Graphic3d_Vector

        """
        return _Visual3d.Visual3d_ViewOrientation_ViewReferenceUp(self, *args)


    def AxialScale(self, *args):
        """
        * Returns current values of the axial scale factors.

        :param Sx:
        :type Sx: float &
        :param Sy:
        :type Sy: float &
        :param Sz:
        :type Sz: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewOrientation_AxialScale(self, *args)


    def IsCustomMatrix(self, *args):
        """
        * Returns whether the custom MODELVIEW matrix is used.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewOrientation_IsCustomMatrix(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Visual3d_ViewOrientation.SetViewReferencePlane = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_SetViewReferencePlane, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.SetViewReferencePoint = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_SetViewReferencePoint, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.SetViewReferenceUp = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_SetViewReferenceUp, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.SetAxialScale = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_SetAxialScale, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.SetCustomModelViewMatrix = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_SetCustomModelViewMatrix, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.Twist = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_Twist, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.ViewReferencePlane = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_ViewReferencePlane, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.ViewReferencePoint = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_ViewReferencePoint, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.ViewReferenceUp = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_ViewReferenceUp, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.AxialScale = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_AxialScale, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation.IsCustomMatrix = new_instancemethod(_Visual3d.Visual3d_ViewOrientation_IsCustomMatrix, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation._kill_pointed = new_instancemethod(_Visual3d.Visual3d_ViewOrientation__kill_pointed, None, Visual3d_ViewOrientation)
Visual3d_ViewOrientation_swigregister = _Visual3d.Visual3d_ViewOrientation_swigregister
Visual3d_ViewOrientation_swigregister(Visual3d_ViewOrientation)



