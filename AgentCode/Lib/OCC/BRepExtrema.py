# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepExtrema.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepExtrema', [dirname(__file__)])
        except ImportError:
            import _BRepExtrema
            return _BRepExtrema
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepExtrema', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepExtrema = swig_import_helper()
    del swig_import_helper
else:
    import _BRepExtrema
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepExtrema.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepExtrema.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepExtrema.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepExtrema.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepExtrema.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepExtrema.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepExtrema.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepExtrema.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepExtrema.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepExtrema.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepExtrema.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepExtrema.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepExtrema.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepExtrema.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepExtrema.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepExtrema.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepExtrema.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepExtrema.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Extrema
import OCC.math
import OCC.Adaptor2d
import OCC.GeomAbs
import OCC.TColStd
import OCC.Geom2d
import OCC.TColgp
import OCC.Adaptor3d
import OCC.Geom
import OCC.Bnd

_BRepExtrema.BRepExtrema_IsVertex_swigconstant(_BRepExtrema)
BRepExtrema_IsVertex = _BRepExtrema.BRepExtrema_IsVertex

_BRepExtrema.BRepExtrema_IsOnEdge_swigconstant(_BRepExtrema)
BRepExtrema_IsOnEdge = _BRepExtrema.BRepExtrema_IsOnEdge

_BRepExtrema.BRepExtrema_IsInFace_swigconstant(_BRepExtrema)
BRepExtrema_IsInFace = _BRepExtrema.BRepExtrema_IsInFace
class BRepExtrema_DistShapeShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * create empty tool

        :rtype: None

        * computation of the minimum distance (value and pair of points) using default deflection Default value is Precision::Confusion().

        :param Shape1:
        :type Shape1: TopoDS_Shape &
        :param Shape2:
        :type Shape2: TopoDS_Shape &
        :param F: default value is Extrema_ExtFlag_MINMAX
        :type F: Extrema_ExtFlag
        :param A: default value is Extrema_ExtAlgo_Grad
        :type A: Extrema_ExtAlgo
        :rtype: None

        * create tool and load both shapes into it

        :param Shape1:
        :type Shape1: TopoDS_Shape &
        :param Shape2:
        :type Shape2: TopoDS_Shape &
        :param theDeflection:
        :type theDeflection: float
        :param F: default value is Extrema_ExtFlag_MINMAX
        :type F: Extrema_ExtFlag
        :param A: default value is Extrema_ExtAlgo_Grad
        :type A: Extrema_ExtAlgo
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_DistShapeShape_swiginit(self, _BRepExtrema.new_BRepExtrema_DistShapeShape(*args))

    def SetDeflection(self, *args):
        """
        :param theDeflection:
        :type theDeflection: float
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetDeflection(self, *args)


    def LoadS1(self, *args):
        """
        * load first shape into extrema

        :param Shape1:
        :type Shape1: TopoDS_Shape &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_LoadS1(self, *args)


    def LoadS2(self, *args):
        """
        * load second shape into extrema

        :param Shape1:
        :type Shape1: TopoDS_Shape &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_LoadS2(self, *args)


    def Perform(self, *args):
        """
        * computation of the minimum distance (value and couple of points). Parameter theDeflection is used to specify a maximum deviation of extreme distances from the minimum one. Returns IsDone status.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the minimum distance is found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_IsDone(self, *args)


    def NbSolution(self, *args):
        """
        * Returns the number of solutions satisfying the minimum distance.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_NbSolution(self, *args)


    def Value(self, *args):
        """
        * Returns the value of the minimum distance.

        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_Value(self, *args)


    def InnerSolution(self, *args):
        """
        * True if one of the shapes is a solid and the other shape is completely or partially inside the solid.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_InnerSolution(self, *args)


    def PointOnShape1(self, *args):
        """
        * Returns the Point corresponding to the <N>th solution on the first Shape

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape1(self, *args)


    def PointOnShape2(self, *args):
        """
        * Returns the Point corresponding to the <N>th solution on the second Shape

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape2(self, *args)


    def SupportTypeShape1(self, *args):
        """
        * gives the type of the support where the Nth solution on the first shape is situated: IsVertex => the Nth solution on the first shape is a Vertex IsOnEdge => the Nth soluion on the first shape is on a Edge IsInFace => the Nth solution on the first shape is inside a face the corresponding support is obtained by the method SupportOnShape1

        :param N:
        :type N: int
        :rtype: BRepExtrema_SupportType

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape1(self, *args)


    def SupportTypeShape2(self, *args):
        """
        * gives the type of the support where the Nth solution on the second shape is situated: IsVertex => the Nth solution on the second shape is a Vertex IsOnEdge => the Nth soluion on the secondt shape is on a Edge IsInFace => the Nth solution on the second shape is inside a face the corresponding support is obtained by the method SupportOnShape2

        :param N:
        :type N: int
        :rtype: BRepExtrema_SupportType

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape2(self, *args)


    def SupportOnShape1(self, *args):
        """
        * gives the support where the Nth solution on the first shape is situated. This support can be a Vertex, an Edge or a Face.

        :param N:
        :type N: int
        :rtype: TopoDS_Shape

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape1(self, *args)


    def SupportOnShape2(self, *args):
        """
        * gives the support where the Nth solution on the second shape is situated. This support can be a Vertex, an Edge or a Face.

        :param N:
        :type N: int
        :rtype: TopoDS_Shape

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape2(self, *args)


    def ParOnEdgeS1(self, *args):
        """
        * gives the corresponding parameter t if the Nth solution is situated on an Egde of the first shape

        :param N:
        :type N: int
        :param t:
        :type t: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS1(self, *args)


    def ParOnEdgeS2(self, *args):
        """
        * gives the corresponding parameter t if the Nth solution is situated on an Egde of the first shape

        :param N:
        :type N: int
        :param t:
        :type t: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS2(self, *args)


    def ParOnFaceS1(self, *args):
        """
        * gives the corresponding parameters (U,V) if the Nth solution is situated on an face of the first shape

        :param N:
        :type N: int
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS1(self, *args)


    def ParOnFaceS2(self, *args):
        """
        * gives the corresponding parameters (U,V) if the Nth solution is situated on an Face of the second shape

        :param N:
        :type N: int
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS2(self, *args)


    def DumpToString(self):
        """DumpToString(BRepExtrema_DistShapeShape self) -> std::string"""
        return _BRepExtrema.BRepExtrema_DistShapeShape_DumpToString(self)


    def SetFlag(self, *args):
        """
        :param F:
        :type F: Extrema_ExtFlag
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetFlag(self, *args)


    def SetAlgo(self, *args):
        """
        :param A:
        :type A: Extrema_ExtAlgo
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetAlgo(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepExtrema_DistShapeShape self)"""
        return _BRepExtrema.BRepExtrema_DistShapeShape__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_DistShapeShape.SetDeflection = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetDeflection, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.LoadS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.LoadS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_Perform, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_IsDone, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.NbSolution = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_NbSolution, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_Value, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.InnerSolution = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_InnerSolution, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.PointOnShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.PointOnShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportTypeShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportTypeShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportOnShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportOnShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnEdgeS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnEdgeS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnFaceS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnFaceS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.DumpToString = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_DumpToString, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetFlag, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetAlgo, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape__kill_pointed, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape_swigregister = _BRepExtrema.BRepExtrema_DistShapeShape_swigregister
BRepExtrema_DistShapeShape_swigregister(BRepExtrema_DistShapeShape)

class BRepExtrema_DistanceSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * computes the distance between two Shapes ( face edge vertex).

        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param B1:
        :type B1: Bnd_Box &
        :param B2:
        :type B2: Bnd_Box &
        :param DstRef:
        :type DstRef: float
        :param F: default value is Extrema_ExtFlag_MINMAX
        :type F: Extrema_ExtFlag
        :param A: default value is Extrema_ExtAlgo_Grad
        :type A: Extrema_ExtAlgo
        :rtype: None

        * computes the distance between two Shapes ( face edge vertex). Parameter theDeflection is used to specify a maximum deviation of extreme distances from the minimum one. Default value is Precision::Confusion().

        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param B1:
        :type B1: Bnd_Box &
        :param B2:
        :type B2: Bnd_Box &
        :param DstRef:
        :type DstRef: float
        :param aDeflection:
        :type aDeflection: float
        :param F: default value is Extrema_ExtFlag_MINMAX
        :type F: Extrema_ExtFlag
        :param A: default value is Extrema_ExtAlgo_Grad
        :type A: Extrema_ExtAlgo
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_DistanceSS_swiginit(self, _BRepExtrema.new_BRepExtrema_DistanceSS(*args))

    def IsDone(self, *args):
        """
        * True if the distance has been computed

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_IsDone(self, *args)


    def DistValue(self, *args):
        """
        * returns the distance value

        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_DistValue(self, *args)


    def Seq1Value(self, *args):
        """
        * returns the list of solutions on the first shape

        :rtype: BRepExtrema_SeqOfSolution

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_Seq1Value(self, *args)


    def Seq2Value(self, *args):
        """
        * returns the list of solutions on the second shape

        :rtype: BRepExtrema_SeqOfSolution

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_Seq2Value(self, *args)


    def SetFlag(self, *args):
        """
        * sets the flag controlling minimum and maximum search

        :param F:
        :type F: Extrema_ExtFlag
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_SetFlag(self, *args)


    def SetAlgo(self, *args):
        """
        * sets the flag controlling ...

        :param A:
        :type A: Extrema_ExtAlgo
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_DistanceSS_SetAlgo(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_DistanceSS.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_IsDone, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.DistValue = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_DistValue, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.Seq1Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_Seq1Value, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.Seq2Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_Seq2Value, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_SetFlag, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_SetAlgo, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS__kill_pointed, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS_swigregister = _BRepExtrema.BRepExtrema_DistanceSS_swigregister
BRepExtrema_DistanceSS_swigregister(BRepExtrema_DistanceSS)

class BRepExtrema_ExtCC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * It calculates all the distances.

        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_ExtCC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCC(*args))

    def Initialize(self, *args):
        """
        :param E2:
        :type E2: TopoDS_Edge &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCC_Initialize(self, *args)


    def Perform(self, *args):
        """
        * An exception is raised if the fields have not been initialized.

        :param E1:
        :type E1: TopoDS_Edge &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCC_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the distances are found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtCC_IsDone(self, *args)


    def NbExt(self, *args):
        """
        * Returns the number of extremum distances.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_ExtCC_NbExt(self, *args)


    def IsParallel(self, *args):
        """
        * Returns True if E1 and E2 are parallel.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtCC_IsParallel(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the value of the <N>th extremum square distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtCC_SquareDistance(self, *args)


    def ParameterOnE1(self, *args):
        """
        * Returns the parameter on the first edge of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtCC_ParameterOnE1(self, *args)


    def PointOnE1(self, *args):
        """
        * Returns the Point of the <N>th extremum distance on the edge E1.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtCC_PointOnE1(self, *args)


    def ParameterOnE2(self, *args):
        """
        * Returns the parameter on the second edge of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtCC_ParameterOnE2(self, *args)


    def PointOnE2(self, *args):
        """
        * Returns the Point of the <N>th extremum distance on the edge E2.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtCC_PointOnE2(self, *args)


    def TrimmedSquareDistances(self, *args):
        """
        * if the edges is a trimmed curve, dist11 is a square distance between the point on E1 of parameter FirstParameter and the point of parameter FirstParameter on E2.

        :param dist11:
        :type dist11: float &
        :param distP12:
        :type distP12: float &
        :param distP21:
        :type distP21: float &
        :param distP22:
        :type distP22: float &
        :param P11:
        :type P11: gp_Pnt
        :param P12:
        :type P12: gp_Pnt
        :param P21:
        :type P21: gp_Pnt
        :param P22:
        :type P22: gp_Pnt
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCC_TrimmedSquareDistances(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_ExtCC.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_Initialize, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_Perform, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_IsDone, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_NbExt, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_IsParallel, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_SquareDistance, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.ParameterOnE1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE1, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.PointOnE1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_PointOnE1, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.ParameterOnE2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE2, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.PointOnE2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_PointOnE2, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.TrimmedSquareDistances = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_TrimmedSquareDistances, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC__kill_pointed, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC_swigregister = _BRepExtrema.BRepExtrema_ExtCC_swigregister
BRepExtrema_ExtCC_swigregister(BRepExtrema_ExtCC)

class BRepExtrema_ExtCF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * It calculates all the distances.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_ExtCF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCF(*args))

    def Initialize(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCF_Initialize(self, *args)


    def Perform(self, *args):
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face only for classify not for the fields.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCF_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the distances are found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtCF_IsDone(self, *args)


    def NbExt(self, *args):
        """
        * Returns the number of extremum distances.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_ExtCF_NbExt(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the value of the <N>th extremum square distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtCF_SquareDistance(self, *args)


    def IsParallel(self, *args):
        """
        * Returns True if the curve is on a parallel surface.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtCF_IsParallel(self, *args)


    def ParameterOnEdge(self, *args):
        """
        * Returns the parameters on the Edge of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtCF_ParameterOnEdge(self, *args)


    def ParameterOnFace(self, *args):
        """
        * Returns the parameters on the Face of the <N>th extremum distance.

        :param N:
        :type N: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtCF_ParameterOnFace(self, *args)


    def PointOnEdge(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtCF_PointOnEdge(self, *args)


    def PointOnFace(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtCF_PointOnFace(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_ExtCF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_Initialize, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_Perform, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_IsDone, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_NbExt, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_SquareDistance, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_IsParallel, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.ParameterOnEdge = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnEdge, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.ParameterOnFace = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnFace, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.PointOnEdge = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_PointOnEdge, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.PointOnFace = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_PointOnFace, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF__kill_pointed, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF_swigregister = _BRepExtrema.BRepExtrema_ExtCF_swigregister
BRepExtrema_ExtCF_swigregister(BRepExtrema_ExtCF)

class BRepExtrema_ExtFF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * It calculates all the distances.

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_ExtFF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtFF(*args))

    def Initialize(self, *args):
        """
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtFF_Initialize(self, *args)


    def Perform(self, *args):
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face F2 only for classify, not for the fields.

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtFF_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the distances are found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtFF_IsDone(self, *args)


    def IsParallel(self, *args):
        """
        * Returns True if the surfaces are parallel.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtFF_IsParallel(self, *args)


    def NbExt(self, *args):
        """
        * Returns the number of extremum distances.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_ExtFF_NbExt(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the value of the <N>th extremum square distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtFF_SquareDistance(self, *args)


    def ParameterOnFace1(self, *args):
        """
        * Returns the parameters on the Face F1 of the <N>th extremum distance.

        :param N:
        :type N: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace1(self, *args)


    def ParameterOnFace2(self, *args):
        """
        * Returns the parameters on the Face F2 of the <N>th extremum distance.

        :param N:
        :type N: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace2(self, *args)


    def PointOnFace1(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtFF_PointOnFace1(self, *args)


    def PointOnFace2(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtFF_PointOnFace2(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_ExtFF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_Initialize, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_Perform, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_IsDone, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_IsParallel, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_NbExt, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_SquareDistance, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.ParameterOnFace1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace1, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.ParameterOnFace2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace2, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.PointOnFace1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace1, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.PointOnFace2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace2, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF__kill_pointed, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF_swigregister = _BRepExtrema.BRepExtrema_ExtFF_swigregister
BRepExtrema_ExtFF_swigregister(BRepExtrema_ExtFF)

class BRepExtrema_ExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * It calculates all the distances.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_ExtPC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPC(*args))

    def Initialize(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPC_Initialize(self, *args)


    def Perform(self, *args):
        """
        * An exception is raised if the fields have not been initialized.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPC_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the distances are found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtPC_IsDone(self, *args)


    def NbExt(self, *args):
        """
        * Returns the number of extremum distances.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_ExtPC_NbExt(self, *args)


    def IsMin(self, *args):
        """
        * Returns True if the <N>th extremum distance is a minimum.

        :param N:
        :type N: int
        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtPC_IsMin(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the value of the <N>th extremum square distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtPC_SquareDistance(self, *args)


    def Parameter(self, *args):
        """
        * Returns the parameter on the edge of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtPC_Parameter(self, *args)


    def Point(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtPC_Point(self, *args)


    def TrimmedSquareDistances(self, *args):
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <pnt1> and dist2 is a square distance between <P> and the point of parameter LastParameter <pnt2>.

        :param dist1:
        :type dist1: float &
        :param dist2:
        :type dist2: float &
        :param pnt1:
        :type pnt1: gp_Pnt
        :param pnt2:
        :type pnt2: gp_Pnt
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPC_TrimmedSquareDistances(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_ExtPC.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Initialize, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Perform, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_IsDone, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_NbExt, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.IsMin = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_IsMin, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_SquareDistance, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Parameter = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Parameter, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Point = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Point, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.TrimmedSquareDistances = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_TrimmedSquareDistances, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC__kill_pointed, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC_swigregister = _BRepExtrema.BRepExtrema_ExtPC_swigregister
BRepExtrema_ExtPC_swigregister(BRepExtrema_ExtPC)

class BRepExtrema_ExtPF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * It calculates all the distances.

        :param TheVertex:
        :type TheVertex: TopoDS_Vertex &
        :param TheFace:
        :type TheFace: TopoDS_Face &
        :param TheFlag: default value is Extrema_ExtFlag_MINMAX
        :type TheFlag: Extrema_ExtFlag
        :param TheAlgo: default value is Extrema_ExtAlgo_Grad
        :type TheAlgo: Extrema_ExtAlgo
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_ExtPF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPF(*args))

    def Initialize(self, *args):
        """
        :param TheFace:
        :type TheFace: TopoDS_Face &
        :param TheFlag: default value is Extrema_ExtFlag_MINMAX
        :type TheFlag: Extrema_ExtFlag
        :param TheAlgo: default value is Extrema_ExtAlgo_Grad
        :type TheAlgo: Extrema_ExtAlgo
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPF_Initialize(self, *args)


    def Perform(self, *args):
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face only for classify not for the fields.

        :param TheVertex:
        :type TheVertex: TopoDS_Vertex &
        :param TheFace:
        :type TheFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPF_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True if the distances are found.

        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_ExtPF_IsDone(self, *args)


    def NbExt(self, *args):
        """
        * Returns the number of extremum distances.

        :rtype: int

        """
        return _BRepExtrema.BRepExtrema_ExtPF_NbExt(self, *args)


    def SquareDistance(self, *args):
        """
        * Returns the value of the <N>th extremum square distance.

        :param N:
        :type N: int
        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_ExtPF_SquareDistance(self, *args)


    def Parameter(self, *args):
        """
        * Returns the parameters on the Face of the <N>th extremum distance.

        :param N:
        :type N: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPF_Parameter(self, *args)


    def Point(self, *args):
        """
        * Returns the Point of the <N>th extremum distance.

        :param N:
        :type N: int
        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_ExtPF_Point(self, *args)


    def SetFlag(self, *args):
        """
        :param F:
        :type F: Extrema_ExtFlag
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPF_SetFlag(self, *args)


    def SetAlgo(self, *args):
        """
        :param A:
        :type A: Extrema_ExtAlgo
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_ExtPF_SetAlgo(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_ExtPF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Initialize, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Perform, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_IsDone, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_NbExt, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SquareDistance, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Parameter = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Parameter, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Point = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Point, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SetFlag, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SetAlgo, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF__kill_pointed, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF_swigregister = _BRepExtrema.BRepExtrema_ExtPF_swigregister
BRepExtrema_ExtPF_swigregister(BRepExtrema_ExtPF)

class BRepExtrema_Poly(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Distance(*args):
        """
        * returns Standard_True if OK.

        :param S1:
        :type S1: TopoDS_Shape &
        :param S2:
        :type S2: TopoDS_Shape &
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param dist:
        :type dist: float &
        :rtype: bool

        """
        return _BRepExtrema.BRepExtrema_Poly_Distance(*args)

    Distance = staticmethod(Distance)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_Poly._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_Poly__kill_pointed, None, BRepExtrema_Poly)
BRepExtrema_Poly_swigregister = _BRepExtrema.BRepExtrema_Poly_swigregister
BRepExtrema_Poly_swigregister(BRepExtrema_Poly)

def BRepExtrema_Poly_Distance(*args):
    """
    * returns Standard_True if OK.

    :param S1:
    :type S1: TopoDS_Shape &
    :param S2:
    :type S2: TopoDS_Shape &
    :param P1:
    :type P1: gp_Pnt
    :param P2:
    :type P2: gp_Pnt
    :param dist:
    :type dist: float &
    :rtype: bool

    """
    return _BRepExtrema.BRepExtrema_Poly_Distance(*args)

class BRepExtrema_SolutionElem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * initialisation of the fields This constructor is used when the solution of a distance is a Vertex. The different initialized fields are:  _ the distance d  _ the solution point  _ the type of solution  _ and the Vertex.

        :param d:
        :type d: float
        :param Pt:
        :type Pt: gp_Pnt
        :param SolType:
        :type SolType: BRepExtrema_SupportType
        :param vertex:
        :type vertex: TopoDS_Vertex &
        :rtype: None

        * initialisation of the fiels. This constructor is used when the solution of distance is on an Edge. The different initialized fields are:  _ the distance d,  _ the solution point,  _ the type of solution,  _ the Edge,  _ and the parameter t to locate the solution.

        :param d:
        :type d: float
        :param Pt:
        :type Pt: gp_Pnt
        :param SolType:
        :type SolType: BRepExtrema_SupportType
        :param edge:
        :type edge: TopoDS_Edge &
        :param t:
        :type t: float
        :rtype: None

        * initialisation of the fields This constructor is used when the solution of distance is in a Face. The different initialized fields are:  _ the distance d,  _ the solution point,  _ the type of solution,  _ the Face,  _ and the parameter u et v to locate the solution.

        :param d:
        :type d: float
        :param Pt:
        :type Pt: gp_Pnt
        :param SolType:
        :type SolType: BRepExtrema_SupportType
        :param face:
        :type face: TopoDS_Face &
        :param u:
        :type u: float
        :param v:
        :type v: float
        :rtype: None

        """
        _BRepExtrema.BRepExtrema_SolutionElem_swiginit(self, _BRepExtrema.new_BRepExtrema_SolutionElem(*args))

    def Dist(self, *args):
        """
        * returns the value of the minimum distance.

        :rtype: float

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Dist(self, *args)


    def Point(self, *args):
        """
        * returns the solution point.

        :rtype: gp_Pnt

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Point(self, *args)


    def SupportKind(self, *args):
        """
        * returns the Support type : //!	 IsVertex => The solution is a vertex. 	 IsOnEdge => The solution belongs to an Edge. 	 IsInFace => The solution is inside a Face.

        :rtype: BRepExtrema_SupportType

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_SupportKind(self, *args)


    def Vertex(self, *args):
        """
        * returns the vertex if the solution is a Vertex.

        :rtype: TopoDS_Vertex

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Vertex(self, *args)


    def Edge(self, *args):
        """
        * returns the vertex if the solution is an Edge.

        :rtype: TopoDS_Edge

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Edge(self, *args)


    def Face(self, *args):
        """
        * returns the vertex if the solution is an Face.

        :rtype: TopoDS_Face

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Face(self, *args)


    def EdgeParameter(self, *args):
        """
        * returns the parameter t if the solution is on Edge.

        :param par1:
        :type par1: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_EdgeParameter(self, *args)


    def FaceParameter(self, *args):
        """
        * returns the parameters u et v if the solution is in a Face.

        :param par1:
        :type par1: float &
        :param par2:
        :type par2: float &
        :rtype: None

        """
        return _BRepExtrema.BRepExtrema_SolutionElem_FaceParameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepExtrema_SolutionElem.Dist = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Dist, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Point = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Point, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.SupportKind = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_SupportKind, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Vertex = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Vertex, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Edge = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Edge, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Face = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Face, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.EdgeParameter = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_EdgeParameter, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.FaceParameter = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_FaceParameter, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem._kill_pointed = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem__kill_pointed, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem_swigregister = _BRepExtrema.BRepExtrema_SolutionElem_swigregister
BRepExtrema_SolutionElem_swigregister(BRepExtrema_SolutionElem)



