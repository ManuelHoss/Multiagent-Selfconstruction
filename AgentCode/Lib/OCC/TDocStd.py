# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _TDocStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDocStd', [dirname(__file__)])
        except ImportError:
            import _TDocStd
            return _TDocStd
        if fp is not None:
            try:
                _mod = imp.load_module('_TDocStd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _TDocStd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDocStd.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_TDocStd.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDocStd.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDocStd.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDocStd.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDocStd.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDocStd.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDocStd.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDocStd.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDocStd.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDocStd.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDocStd.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDocStd.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDocStd.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDocStd.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDocStd.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDocStd.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _TDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TDF
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.Resource
class tdocstd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def IDList(*args):
        """
        * specific GUID of this package ============================= Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: void

        """
        return _TDocStd.tdocstd_IDList(*args)

    IDList = staticmethod(IDList)
    def __init__(self): 
        _TDocStd.tdocstd_swiginit(self,_TDocStd.new_tdocstd())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


tdocstd._kill_pointed = new_instancemethod(_TDocStd.tdocstd__kill_pointed,None,tdocstd)
tdocstd_swigregister = _TDocStd.tdocstd_swigregister
tdocstd_swigregister(tdocstd)

def tdocstd_IDList(*args):
  """
    * specific GUID of this package ============================= Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.

    :param anIDList:
    :type anIDList: TDF_IDList &
    :rtype: void

    """
  return _TDocStd.tdocstd_IDList(*args)

class TDocStd_Application(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def IsDriverLoaded(self, *args):
        """
        * Check if meta data driver was successfully loaded by the application constructor

        :rtype: bool

        """
        return _TDocStd.TDocStd_Application_IsDriverLoaded(self, *args)

    def Resources(self, *args):
        """
        * create (if not done) a Manager using ResourcesName method.

        :rtype: Handle_Resource_Manager

        """
        return _TDocStd.TDocStd_Application_Resources(self, *args)

    def ResourcesName(self, *args):
        """
        * Returns the name of the file containing the resources of this application. In a resource file, the application associates the schema name of the document with the storage and retrieval plug-ins that are to be loaded for each document. On retrieval, the application reads the schema name in the heading of the CSF file and loads the plug-in indicated in the resource file. This plug-in instantiates the actual driver for transient-persistent conversion. Your application can bring this process into play by defining a class which inherits CDF_Application and redefines the function which returns the appropriate resources file. At this point, the function Retrieve and the class CDF_Store can be called. This allows you to deal with storage and retrieval of - as well as copying and pasting - documents. To implement a class like this, several virtual functions should be redefined. In particular, you must redefine the abstract function Resources inherited from the superclass CDM_Application.

        :rtype: char *

        """
        return _TDocStd.TDocStd_Application_ResourcesName(self, *args)

    def NbDocuments(self, *args):
        """
        * returns the number of documents handled by the current applicative session.

        :rtype: int

        """
        return _TDocStd.TDocStd_Application_NbDocuments(self, *args)

    def GetDocument(self, *args):
        """
        * Constructs the new document aDoc. aDoc is identified by the index index which is any integer between 1 and n where n is the number of documents returned by NbDocument. Example Handle_TDocStd_Application anApp; if (!CafTest::Find(A)) return 1; Handle_TDocStd aDoc; Standard_Integer nbdoc = anApp->NbDocuments(); for (Standard_Integer i = 1; i <= nbdoc; i++) { aApp->GetDocument(i,aDoc);

        :param index:
        :type index: int
        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_Application_GetDocument(self, *args)

    def Formats(self, *args):
        """
        * Returns the format name Formats representing the format supported for application documents. This virtual function is to be redefined for each specific application.

        :param Formats:
        :type Formats: TColStd_SequenceOfExtendedString &
        :rtype: void

        """
        return _TDocStd.TDocStd_Application_Formats(self, *args)

    def NewDocument(self, *args):
        """
        * Constructs the empty new document aDoc. This document will have the format format. If InitDocument is redefined for a specific application, the new document is handled by the applicative session.

        :param format:
        :type format: TCollection_ExtendedString &
        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: void

        """
        return _TDocStd.TDocStd_Application_NewDocument(self, *args)

    def InitDocument(self, *args):
        """
        * Initialize the document aDoc for the applicative session. This virtual function is called by NewDocument and is to be redefined for each specific application. Modified flag (different of disk version) ============= to open/save a document =======================

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: void

        """
        return _TDocStd.TDocStd_Application_InitDocument(self, *args)

    def Close(self, *args):
        """
        * Close the given document. the document is not any more handled by the applicative session.

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_Application_Close(self, *args)

    def IsInSession(self, *args):
        """
        * Returns an index for the document found in the path path in this applicative session. If the returned value is 0, the document is not present in the applicative session. This method can be used for the interactive part of an application. For instance, on a call to Open, the document to be opened may already be in memory. IsInSession checks to see if this is the case. Open can be made to depend on the value of the index returned: if IsInSession returns 0, the document is opened; if it returns another value, a message is displayed asking the user if he wants to override the version of the document in memory. Example: Standard_Integer insession = A->IsInSession(aDoc); if (insession > 0) { cout << 'document ' << insession << ' is already in session' << endl; return 0; }

        :param path:
        :type path: TCollection_ExtendedString &
        :rtype: int

        """
        return _TDocStd.TDocStd_Application_IsInSession(self, *args)

    def Open(self, *args):
        """
        * Retrieves the document aDoc stored under the name aName in the directory directory. In order not to override a version of aDoc which is already in memory, this method can be made to depend on the value returned by IsInSession.

        :param path:
        :type path: TCollection_ExtendedString &
        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: PCDM_ReaderStatus

        """
        return _TDocStd.TDocStd_Application_Open(self, *args)

    def SaveAs(self, *args):
        """
        * Save the active document in the file <name> in the path <path> ; o verwrites the file if it already exists.

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :param path:
        :type path: TCollection_ExtendedString &
        :rtype: PCDM_StoreStatus

        * Save the active document in the file <name> in the path <path> . overwrite the file if it already exist.

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :param path:
        :type path: TCollection_ExtendedString &
        :param theStatusMessage:
        :type theStatusMessage: TCollection_ExtendedString &
        :rtype: PCDM_StoreStatus

        """
        return _TDocStd.TDocStd_Application_SaveAs(self, *args)

    def Save(self, *args):
        """
        * Save aDoc active document. Exceptions: Standard_NotImplemented if the document was not retrieved in the applicative session by using Open.

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :rtype: PCDM_StoreStatus

        * Save the document overwriting the previous file

        :param aDoc:
        :type aDoc: Handle_TDocStd_Document &
        :param theStatusMessage:
        :type theStatusMessage: TCollection_ExtendedString &
        :rtype: PCDM_StoreStatus

        """
        return _TDocStd.TDocStd_Application_Save(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_Application.IsDriverLoaded = new_instancemethod(_TDocStd.TDocStd_Application_IsDriverLoaded,None,TDocStd_Application)
TDocStd_Application.Resources = new_instancemethod(_TDocStd.TDocStd_Application_Resources,None,TDocStd_Application)
TDocStd_Application.ResourcesName = new_instancemethod(_TDocStd.TDocStd_Application_ResourcesName,None,TDocStd_Application)
TDocStd_Application.NbDocuments = new_instancemethod(_TDocStd.TDocStd_Application_NbDocuments,None,TDocStd_Application)
TDocStd_Application.GetDocument = new_instancemethod(_TDocStd.TDocStd_Application_GetDocument,None,TDocStd_Application)
TDocStd_Application.Formats = new_instancemethod(_TDocStd.TDocStd_Application_Formats,None,TDocStd_Application)
TDocStd_Application.NewDocument = new_instancemethod(_TDocStd.TDocStd_Application_NewDocument,None,TDocStd_Application)
TDocStd_Application.InitDocument = new_instancemethod(_TDocStd.TDocStd_Application_InitDocument,None,TDocStd_Application)
TDocStd_Application.Close = new_instancemethod(_TDocStd.TDocStd_Application_Close,None,TDocStd_Application)
TDocStd_Application.IsInSession = new_instancemethod(_TDocStd.TDocStd_Application_IsInSession,None,TDocStd_Application)
TDocStd_Application.Open = new_instancemethod(_TDocStd.TDocStd_Application_Open,None,TDocStd_Application)
TDocStd_Application.SaveAs = new_instancemethod(_TDocStd.TDocStd_Application_SaveAs,None,TDocStd_Application)
TDocStd_Application.Save = new_instancemethod(_TDocStd.TDocStd_Application_Save,None,TDocStd_Application)
TDocStd_Application._kill_pointed = new_instancemethod(_TDocStd.TDocStd_Application__kill_pointed,None,TDocStd_Application)
TDocStd_Application.GetHandle = new_instancemethod(_TDocStd.TDocStd_Application_GetHandle,None,TDocStd_Application)
TDocStd_Application_swigregister = _TDocStd.TDocStd_Application_swigregister
TDocStd_Application_swigregister(TDocStd_Application)

class Handle_TDocStd_Application(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_Application_swiginit(self,_TDocStd.new_Handle_TDocStd_Application(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_Application_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_Application.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_Application_Nullify,None,Handle_TDocStd_Application)
Handle_TDocStd_Application.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_Application_IsNull,None,Handle_TDocStd_Application)
Handle_TDocStd_Application.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_Application_GetObject,None,Handle_TDocStd_Application)
Handle_TDocStd_Application._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_Application__kill_pointed,None,Handle_TDocStd_Application)
Handle_TDocStd_Application_swigregister = _TDocStd.Handle_TDocStd_Application_swigregister
Handle_TDocStd_Application_swigregister(Handle_TDocStd_Application)

def Handle_TDocStd_Application_DownCast(*args):
  return _TDocStd.Handle_TDocStd_Application_DownCast(*args)
Handle_TDocStd_Application_DownCast = _TDocStd.Handle_TDocStd_Application_DownCast

class TDocStd_ApplicationDelta(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_ApplicationDelta_swiginit(self,_TDocStd.new_TDocStd_ApplicationDelta(*args))
    def GetDocuments(self, *args):
        """
        :rtype: TDocStd_SequenceOfDocument

        """
        return _TDocStd.TDocStd_ApplicationDelta_GetDocuments(self, *args)

    def GetName(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_ApplicationDelta_GetName(self, *args)

    def SetName(self, *args):
        """
        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDocStd.TDocStd_ApplicationDelta_SetName(self, *args)

    def DumpToString(self):
        """DumpToString(TDocStd_ApplicationDelta self) -> std::string"""
        return _TDocStd.TDocStd_ApplicationDelta_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_ApplicationDelta self)"""
        return _TDocStd.TDocStd_ApplicationDelta__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_ApplicationDelta self) -> Handle_TDocStd_ApplicationDelta"""
        return _TDocStd.TDocStd_ApplicationDelta_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_ApplicationDelta.GetDocuments = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_GetDocuments,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.GetName = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_GetName,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.SetName = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_SetName,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.DumpToString = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_DumpToString,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta._kill_pointed = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta__kill_pointed,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.GetHandle = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_GetHandle,None,TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta_swigregister = _TDocStd.TDocStd_ApplicationDelta_swigregister
TDocStd_ApplicationDelta_swigregister(TDocStd_ApplicationDelta)

class Handle_TDocStd_ApplicationDelta(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_ApplicationDelta_swiginit(self,_TDocStd.new_Handle_TDocStd_ApplicationDelta(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_ApplicationDelta_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_ApplicationDelta.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_ApplicationDelta_Nullify,None,Handle_TDocStd_ApplicationDelta)
Handle_TDocStd_ApplicationDelta.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_ApplicationDelta_IsNull,None,Handle_TDocStd_ApplicationDelta)
Handle_TDocStd_ApplicationDelta.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_ApplicationDelta_GetObject,None,Handle_TDocStd_ApplicationDelta)
Handle_TDocStd_ApplicationDelta._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_ApplicationDelta__kill_pointed,None,Handle_TDocStd_ApplicationDelta)
Handle_TDocStd_ApplicationDelta_swigregister = _TDocStd.Handle_TDocStd_ApplicationDelta_swigregister
Handle_TDocStd_ApplicationDelta_swigregister(Handle_TDocStd_ApplicationDelta)

def Handle_TDocStd_ApplicationDelta_DownCast(*args):
  return _TDocStd.Handle_TDocStd_ApplicationDelta_DownCast(*args)
Handle_TDocStd_ApplicationDelta_DownCast = _TDocStd.Handle_TDocStd_ApplicationDelta_DownCast

class TDocStd_CompoundDelta(OCC.TDF.TDF_Delta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a compound delta. Validates <self> at <aBeginTime>. If applied, it restores the TDF_Data in the state it was at <anEndTime>. Reserved to TDF_Data.

        :rtype: None

        """
        _TDocStd.TDocStd_CompoundDelta_swiginit(self,_TDocStd.new_TDocStd_CompoundDelta(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDocStd_CompoundDelta self)"""
        return _TDocStd.TDocStd_CompoundDelta__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_CompoundDelta self) -> Handle_TDocStd_CompoundDelta"""
        return _TDocStd.TDocStd_CompoundDelta_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_CompoundDelta._kill_pointed = new_instancemethod(_TDocStd.TDocStd_CompoundDelta__kill_pointed,None,TDocStd_CompoundDelta)
TDocStd_CompoundDelta.GetHandle = new_instancemethod(_TDocStd.TDocStd_CompoundDelta_GetHandle,None,TDocStd_CompoundDelta)
TDocStd_CompoundDelta_swigregister = _TDocStd.TDocStd_CompoundDelta_swigregister
TDocStd_CompoundDelta_swigregister(TDocStd_CompoundDelta)

class Handle_TDocStd_CompoundDelta(OCC.TDF.Handle_TDF_Delta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_CompoundDelta_swiginit(self,_TDocStd.new_Handle_TDocStd_CompoundDelta(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_CompoundDelta_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_CompoundDelta.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_CompoundDelta_Nullify,None,Handle_TDocStd_CompoundDelta)
Handle_TDocStd_CompoundDelta.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_CompoundDelta_IsNull,None,Handle_TDocStd_CompoundDelta)
Handle_TDocStd_CompoundDelta.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_CompoundDelta_GetObject,None,Handle_TDocStd_CompoundDelta)
Handle_TDocStd_CompoundDelta._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_CompoundDelta__kill_pointed,None,Handle_TDocStd_CompoundDelta)
Handle_TDocStd_CompoundDelta_swigregister = _TDocStd.Handle_TDocStd_CompoundDelta_swigregister
Handle_TDocStd_CompoundDelta_swigregister(Handle_TDocStd_CompoundDelta)

def Handle_TDocStd_CompoundDelta_DownCast(*args):
  return _TDocStd.Handle_TDocStd_CompoundDelta_DownCast(*args)
Handle_TDocStd_CompoundDelta_DownCast = _TDocStd.Handle_TDocStd_CompoundDelta_DownCast

class TDocStd_Context(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_Context_swiginit(self,_TDocStd.new_TDocStd_Context(*args))
    def SetModifiedReferences(self, *args):
        """
        :param Mod:
        :type Mod: bool
        :rtype: None

        """
        return _TDocStd.TDocStd_Context_SetModifiedReferences(self, *args)

    def ModifiedReferences(self, *args):
        """
        :rtype: bool

        """
        return _TDocStd.TDocStd_Context_ModifiedReferences(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_Context.SetModifiedReferences = new_instancemethod(_TDocStd.TDocStd_Context_SetModifiedReferences,None,TDocStd_Context)
TDocStd_Context.ModifiedReferences = new_instancemethod(_TDocStd.TDocStd_Context_ModifiedReferences,None,TDocStd_Context)
TDocStd_Context._kill_pointed = new_instancemethod(_TDocStd.TDocStd_Context__kill_pointed,None,TDocStd_Context)
TDocStd_Context_swigregister = _TDocStd.TDocStd_Context_swigregister
TDocStd_Context_swigregister(TDocStd_Context)

class TDocStd_DataMapIteratorOfLabelIDMapDataMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDocStd_LabelIDMapDataMap &
        :rtype: None

        """
        _TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_swiginit(self,_TDocStd.new_TDocStd_DataMapIteratorOfLabelIDMapDataMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDocStd_LabelIDMapDataMap &
        :rtype: None

        """
        return _TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_IDMap

        """
        return _TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_DataMapIteratorOfLabelIDMapDataMap.Initialize = new_instancemethod(_TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Initialize,None,TDocStd_DataMapIteratorOfLabelIDMapDataMap)
TDocStd_DataMapIteratorOfLabelIDMapDataMap.Key = new_instancemethod(_TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Key,None,TDocStd_DataMapIteratorOfLabelIDMapDataMap)
TDocStd_DataMapIteratorOfLabelIDMapDataMap.Value = new_instancemethod(_TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_Value,None,TDocStd_DataMapIteratorOfLabelIDMapDataMap)
TDocStd_DataMapIteratorOfLabelIDMapDataMap._kill_pointed = new_instancemethod(_TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap__kill_pointed,None,TDocStd_DataMapIteratorOfLabelIDMapDataMap)
TDocStd_DataMapIteratorOfLabelIDMapDataMap_swigregister = _TDocStd.TDocStd_DataMapIteratorOfLabelIDMapDataMap_swigregister
TDocStd_DataMapIteratorOfLabelIDMapDataMap_swigregister(TDocStd_DataMapIteratorOfLabelIDMapDataMap)

class TDocStd_DataMapNodeOfLabelIDMapDataMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_IDMap &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_swiginit(self,_TDocStd.new_TDocStd_DataMapNodeOfLabelIDMapDataMap(*args))
    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_IDMap

        """
        return _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_DataMapNodeOfLabelIDMapDataMap self)"""
        return _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_DataMapNodeOfLabelIDMapDataMap self) -> Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap"""
        return _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_DataMapNodeOfLabelIDMapDataMap.Key = new_instancemethod(_TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_Key,None,TDocStd_DataMapNodeOfLabelIDMapDataMap)
TDocStd_DataMapNodeOfLabelIDMapDataMap.Value = new_instancemethod(_TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_Value,None,TDocStd_DataMapNodeOfLabelIDMapDataMap)
TDocStd_DataMapNodeOfLabelIDMapDataMap._kill_pointed = new_instancemethod(_TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap__kill_pointed,None,TDocStd_DataMapNodeOfLabelIDMapDataMap)
TDocStd_DataMapNodeOfLabelIDMapDataMap.GetHandle = new_instancemethod(_TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_GetHandle,None,TDocStd_DataMapNodeOfLabelIDMapDataMap)
TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister = _TDocStd.TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister
TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister(TDocStd_DataMapNodeOfLabelIDMapDataMap)

class Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_swiginit(self,_TDocStd.new_Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_Nullify,None,Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap)
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_IsNull,None,Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap)
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_GetObject,None,Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap)
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap__kill_pointed,None,Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap)
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister = _TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_swigregister(Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap)

def Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_DownCast(*args):
  return _TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_DownCast(*args)
Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_DownCast = _TDocStd.Handle_TDocStd_DataMapNodeOfLabelIDMapDataMap_DownCast

class TDocStd_Document(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Get(*args):
        """
        * Will Abort any execution, clear fields returns the document which contains <L>. raises an exception if the document is not found.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_Document_Get(*args)

    Get = staticmethod(Get)
    def __init__(self, *args): 
        """
        * Constructs a document object defined by the string astorageformat.

        :param astorageformat:
        :type astorageformat: TCollection_ExtendedString &
        :rtype: None

        """
        _TDocStd.TDocStd_Document_swiginit(self,_TDocStd.new_TDocStd_Document(*args))
    def IsSaved(self, *args):
        """
        * the document is saved in a file.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_IsSaved(self, *args)

    def IsChanged(self, *args):
        """
        * returns True if document differs from the state of last saving. this method have to be called only wroking in the transaction mode

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_IsChanged(self, *args)

    def SetSaved(self, *args):
        """
        * This method have to be called to show document that it has been saved

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetSaved(self, *args)

    def SetSavedTime(self, *args):
        """
        * Say to document what it is not saved. Use value, returned earlier by GetSavedTime().

        :param theTime:
        :type theTime: int
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetSavedTime(self, *args)

    def GetSavedTime(self, *args):
        """
        * Returns value of <mySavedTime> to be used later in SetSavedTime()

        :rtype: int

        """
        return _TDocStd.TDocStd_Document_GetSavedTime(self, *args)

    def GetName(self, *args):
        """
        * raise if <self> is not saved.

        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_Document_GetName(self, *args)

    def GetPath(self, *args):
        """
        * returns the OS path of the file, in wich one <self> is saved. Raise an exception if <self> is not saved.

        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_Document_GetPath(self, *args)

    def SetData(self, *args):
        """
        :param data:
        :type data: Handle_TDF_Data &
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetData(self, *args)

    def GetData(self, *args):
        """
        :rtype: Handle_TDF_Data

        """
        return _TDocStd.TDocStd_Document_GetData(self, *args)

    def Main(self, *args):
        """
        * Returns the main label in this data framework. By definition, this is the label with the entry 0:1.

        :rtype: TDF_Label

        """
        return _TDocStd.TDocStd_Document_Main(self, *args)

    def IsEmpty(self, *args):
        """
        * Returns True if the main label has no attributes

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_IsEmpty(self, *args)

    def IsValid(self, *args):
        """
        * Returns False if the document has been modified but not recomputed.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_IsValid(self, *args)

    def SetModified(self, *args):
        """
        * Notify the label as modified, the Document becomes UnValid. returns True if <L> has been notified as modified.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetModified(self, *args)

    def PurgeModified(self, *args):
        """
        * Remove all modifications. After this call The document becomesagain Valid.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_PurgeModified(self, *args)

    def GetModified(self, *args):
        """
        * Returns the labels which have been modified in this document.

        :rtype: TDF_LabelMap

        """
        return _TDocStd.TDocStd_Document_GetModified(self, *args)

    def NewCommand(self, *args):
        """
        * Launches a new command. This command may be undone.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_NewCommand(self, *args)

    def HasOpenCommand(self, *args):
        """
        * returns True if a Command transaction is open in the curret .

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_HasOpenCommand(self, *args)

    def OpenCommand(self, *args):
        """
        * Opens a new command transaction in this document. You can use HasOpenCommand to see whether a command is already open. Exceptions Standard_DomainError if a command is already open in this document.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_OpenCommand(self, *args)

    def CommitCommand(self, *args):
        """
        * Commits documents transactions and fills the transaction manager with documents that have been changed during the transaction. If no command transaction is open, nothing is done. Returns True if a new delta has been added to myUndos.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_CommitCommand(self, *args)

    def AbortCommand(self, *args):
        """
        * Abort the Command transaction. Does nothing If there is no Command transaction open.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_AbortCommand(self, *args)

    def GetUndoLimit(self, *args):
        """
        * The current limit on the number of undos

        :rtype: int

        """
        return _TDocStd.TDocStd_Document_GetUndoLimit(self, *args)

    def SetUndoLimit(self, *args):
        """
        * Set the limit on the number of Undo Delta stored 0 will disable Undo on the document A negative value means no limit. Note that by default Undo is disabled. Enabling it will take effect with the next call to NewCommand. Of course this limit is the same for Redo

        :param L:
        :type L: int
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetUndoLimit(self, *args)

    def ClearUndos(self, *args):
        """
        * Remove all stored Undos and Redos

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_ClearUndos(self, *args)

    def ClearRedos(self, *args):
        """
        * Remove all stored Redos

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_ClearRedos(self, *args)

    def GetAvailableUndos(self, *args):
        """
        * Returns the number of undos stored in this document. If this figure is greater than 0, the method Undo can be used.

        :rtype: int

        """
        return _TDocStd.TDocStd_Document_GetAvailableUndos(self, *args)

    def Undo(self, *args):
        """
        * Will UNDO one step, returns False if no undo was done (Undos == 0). Otherwise, true is returned and one step in the list of undoes is undone.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_Undo(self, *args)

    def GetAvailableRedos(self, *args):
        """
        * Returns the number of redos stored in this document. If this figure is greater than 0, the method Redo can be used.

        :rtype: int

        """
        return _TDocStd.TDocStd_Document_GetAvailableRedos(self, *args)

    def Redo(self, *args):
        """
        * Will REDO one step, returns False if no redo was done (Redos == 0). Otherwise, true is returned, and one step in the list of redoes is done again.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_Redo(self, *args)

    def GetUndos(self, *args):
        """
        :rtype: TDF_DeltaList

        """
        return _TDocStd.TDocStd_Document_GetUndos(self, *args)

    def GetRedos(self, *args):
        """
        :rtype: TDF_DeltaList

        """
        return _TDocStd.TDocStd_Document_GetRedos(self, *args)

    def RemoveFirstUndo(self, *args):
        """
        * Removes the first undo in the list of document undos. It is used in the application when the undo limit is exceed.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_RemoveFirstUndo(self, *args)

    def InitDeltaCompaction(self, *args):
        """
        * Initializes the procedure of delta compaction Returns false if there is no delta to compact Marks the last delta as a 'from' delta

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_InitDeltaCompaction(self, *args)

    def PerformDeltaCompaction(self, *args):
        """
        * Performs the procedure of delta compaction Makes all deltas starting from 'from' delta till the last one to be one delta.

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_PerformDeltaCompaction(self, *args)

    def UpdateReferences(self, *args):
        """
        * Set modifications on labels impacted by external references to the entry. The document becomes invalid and must be recomputed.

        :param aDocEntry:
        :type aDocEntry: TCollection_AsciiString &
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_UpdateReferences(self, *args)

    def Recompute(self, *args):
        """
        * Recompute if the document was not valid and propagate the reccorded modification.

        :rtype: None

        """
        return _TDocStd.TDocStd_Document_Recompute(self, *args)

    def Update(self, *args):
        """
        * This method Update will be called to signal the end of the modified references list. The document should be recomputed and UpdateFromDocuments should be called. Update should returns True in case of success, false otherwise. In case of Failure, additional information can be given in ErrorString. Update the document by propagation ================================== Update the document from internal stored  modifications. If you want to undoing this operation, please call NewCommand before. to change format (advanced programming) ================

        :param aToDocument:
        :type aToDocument: Handle_CDM_Document &
        :param aReferenceIdentifier:
        :type aReferenceIdentifier: int
        :param aModifContext:
        :type aModifContext: Standard_Address
        :rtype: void

        """
        return _TDocStd.TDocStd_Document_Update(self, *args)

    def StorageFormat(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_Document_StorageFormat(self, *args)

    def ChangeStorageFormat(self, *args):
        """
        * methods for the nested transaction mode

        :param newStorageFormat:
        :type newStorageFormat: TCollection_ExtendedString &
        :rtype: void

        """
        return _TDocStd.TDocStd_Document_ChangeStorageFormat(self, *args)

    def SetNestedTransactionMode(self, *args):
        """
        * Sets nested transaction mode if isAllowed == Standard_True

        :param isAllowed: default value is Standard_True
        :type isAllowed: bool
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetNestedTransactionMode(self, *args)

    def IsNestedTransactionMode(self, *args):
        """
        * Returns Standard_True if mode is set

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_IsNestedTransactionMode(self, *args)

    def SetModificationMode(self, *args):
        """
        * if theTransactionOnly is True changes is denied outside transactions

        :param theTransactionOnly:
        :type theTransactionOnly: bool
        :rtype: None

        """
        return _TDocStd.TDocStd_Document_SetModificationMode(self, *args)

    def ModificationMode(self, *args):
        """
        * returns True if changes allowed only inside transactions

        :rtype: bool

        """
        return _TDocStd.TDocStd_Document_ModificationMode(self, *args)

    def BeforeClose(self, *args):
        """
        * Prepares document for closing

        :rtype: void

        """
        return _TDocStd.TDocStd_Document_BeforeClose(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_Document.IsSaved = new_instancemethod(_TDocStd.TDocStd_Document_IsSaved,None,TDocStd_Document)
TDocStd_Document.IsChanged = new_instancemethod(_TDocStd.TDocStd_Document_IsChanged,None,TDocStd_Document)
TDocStd_Document.SetSaved = new_instancemethod(_TDocStd.TDocStd_Document_SetSaved,None,TDocStd_Document)
TDocStd_Document.SetSavedTime = new_instancemethod(_TDocStd.TDocStd_Document_SetSavedTime,None,TDocStd_Document)
TDocStd_Document.GetSavedTime = new_instancemethod(_TDocStd.TDocStd_Document_GetSavedTime,None,TDocStd_Document)
TDocStd_Document.GetName = new_instancemethod(_TDocStd.TDocStd_Document_GetName,None,TDocStd_Document)
TDocStd_Document.GetPath = new_instancemethod(_TDocStd.TDocStd_Document_GetPath,None,TDocStd_Document)
TDocStd_Document.SetData = new_instancemethod(_TDocStd.TDocStd_Document_SetData,None,TDocStd_Document)
TDocStd_Document.GetData = new_instancemethod(_TDocStd.TDocStd_Document_GetData,None,TDocStd_Document)
TDocStd_Document.Main = new_instancemethod(_TDocStd.TDocStd_Document_Main,None,TDocStd_Document)
TDocStd_Document.IsEmpty = new_instancemethod(_TDocStd.TDocStd_Document_IsEmpty,None,TDocStd_Document)
TDocStd_Document.IsValid = new_instancemethod(_TDocStd.TDocStd_Document_IsValid,None,TDocStd_Document)
TDocStd_Document.SetModified = new_instancemethod(_TDocStd.TDocStd_Document_SetModified,None,TDocStd_Document)
TDocStd_Document.PurgeModified = new_instancemethod(_TDocStd.TDocStd_Document_PurgeModified,None,TDocStd_Document)
TDocStd_Document.GetModified = new_instancemethod(_TDocStd.TDocStd_Document_GetModified,None,TDocStd_Document)
TDocStd_Document.NewCommand = new_instancemethod(_TDocStd.TDocStd_Document_NewCommand,None,TDocStd_Document)
TDocStd_Document.HasOpenCommand = new_instancemethod(_TDocStd.TDocStd_Document_HasOpenCommand,None,TDocStd_Document)
TDocStd_Document.OpenCommand = new_instancemethod(_TDocStd.TDocStd_Document_OpenCommand,None,TDocStd_Document)
TDocStd_Document.CommitCommand = new_instancemethod(_TDocStd.TDocStd_Document_CommitCommand,None,TDocStd_Document)
TDocStd_Document.AbortCommand = new_instancemethod(_TDocStd.TDocStd_Document_AbortCommand,None,TDocStd_Document)
TDocStd_Document.GetUndoLimit = new_instancemethod(_TDocStd.TDocStd_Document_GetUndoLimit,None,TDocStd_Document)
TDocStd_Document.SetUndoLimit = new_instancemethod(_TDocStd.TDocStd_Document_SetUndoLimit,None,TDocStd_Document)
TDocStd_Document.ClearUndos = new_instancemethod(_TDocStd.TDocStd_Document_ClearUndos,None,TDocStd_Document)
TDocStd_Document.ClearRedos = new_instancemethod(_TDocStd.TDocStd_Document_ClearRedos,None,TDocStd_Document)
TDocStd_Document.GetAvailableUndos = new_instancemethod(_TDocStd.TDocStd_Document_GetAvailableUndos,None,TDocStd_Document)
TDocStd_Document.Undo = new_instancemethod(_TDocStd.TDocStd_Document_Undo,None,TDocStd_Document)
TDocStd_Document.GetAvailableRedos = new_instancemethod(_TDocStd.TDocStd_Document_GetAvailableRedos,None,TDocStd_Document)
TDocStd_Document.Redo = new_instancemethod(_TDocStd.TDocStd_Document_Redo,None,TDocStd_Document)
TDocStd_Document.GetUndos = new_instancemethod(_TDocStd.TDocStd_Document_GetUndos,None,TDocStd_Document)
TDocStd_Document.GetRedos = new_instancemethod(_TDocStd.TDocStd_Document_GetRedos,None,TDocStd_Document)
TDocStd_Document.RemoveFirstUndo = new_instancemethod(_TDocStd.TDocStd_Document_RemoveFirstUndo,None,TDocStd_Document)
TDocStd_Document.InitDeltaCompaction = new_instancemethod(_TDocStd.TDocStd_Document_InitDeltaCompaction,None,TDocStd_Document)
TDocStd_Document.PerformDeltaCompaction = new_instancemethod(_TDocStd.TDocStd_Document_PerformDeltaCompaction,None,TDocStd_Document)
TDocStd_Document.UpdateReferences = new_instancemethod(_TDocStd.TDocStd_Document_UpdateReferences,None,TDocStd_Document)
TDocStd_Document.Recompute = new_instancemethod(_TDocStd.TDocStd_Document_Recompute,None,TDocStd_Document)
TDocStd_Document.Update = new_instancemethod(_TDocStd.TDocStd_Document_Update,None,TDocStd_Document)
TDocStd_Document.StorageFormat = new_instancemethod(_TDocStd.TDocStd_Document_StorageFormat,None,TDocStd_Document)
TDocStd_Document.ChangeStorageFormat = new_instancemethod(_TDocStd.TDocStd_Document_ChangeStorageFormat,None,TDocStd_Document)
TDocStd_Document.SetNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_Document_SetNestedTransactionMode,None,TDocStd_Document)
TDocStd_Document.IsNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_Document_IsNestedTransactionMode,None,TDocStd_Document)
TDocStd_Document.SetModificationMode = new_instancemethod(_TDocStd.TDocStd_Document_SetModificationMode,None,TDocStd_Document)
TDocStd_Document.ModificationMode = new_instancemethod(_TDocStd.TDocStd_Document_ModificationMode,None,TDocStd_Document)
TDocStd_Document.BeforeClose = new_instancemethod(_TDocStd.TDocStd_Document_BeforeClose,None,TDocStd_Document)
TDocStd_Document._kill_pointed = new_instancemethod(_TDocStd.TDocStd_Document__kill_pointed,None,TDocStd_Document)
TDocStd_Document.GetHandle = new_instancemethod(_TDocStd.TDocStd_Document_GetHandle,None,TDocStd_Document)
TDocStd_Document_swigregister = _TDocStd.TDocStd_Document_swigregister
TDocStd_Document_swigregister(TDocStd_Document)

def TDocStd_Document_Get(*args):
  """
    * Will Abort any execution, clear fields returns the document which contains <L>. raises an exception if the document is not found.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_TDocStd_Document

    """
  return _TDocStd.TDocStd_Document_Get(*args)

class Handle_TDocStd_Document(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_Document_swiginit(self,_TDocStd.new_Handle_TDocStd_Document(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_Document_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_Document.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_Document_Nullify,None,Handle_TDocStd_Document)
Handle_TDocStd_Document.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_Document_IsNull,None,Handle_TDocStd_Document)
Handle_TDocStd_Document.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_Document_GetObject,None,Handle_TDocStd_Document)
Handle_TDocStd_Document._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_Document__kill_pointed,None,Handle_TDocStd_Document)
Handle_TDocStd_Document_swigregister = _TDocStd.Handle_TDocStd_Document_swigregister
Handle_TDocStd_Document_swigregister(Handle_TDocStd_Document)

def Handle_TDocStd_Document_DownCast(*args):
  return _TDocStd.Handle_TDocStd_Document_DownCast(*args)
Handle_TDocStd_Document_DownCast = _TDocStd.Handle_TDocStd_Document_DownCast

class TDocStd_LabelIDMapDataMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDocStd.TDocStd_LabelIDMapDataMap_swiginit(self,_TDocStd.new_TDocStd_LabelIDMapDataMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDocStd_LabelIDMapDataMap &
        :rtype: TDocStd_LabelIDMapDataMap

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDocStd_LabelIDMapDataMap &
        :rtype: TDocStd_LabelIDMapDataMap

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_IDMap &
        :rtype: bool

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_IDMap

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_IDMap

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDocStd.TDocStd_LabelIDMapDataMap_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_LabelIDMapDataMap self)"""
        return _TDocStd.TDocStd_LabelIDMapDataMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_LabelIDMapDataMap.Assign = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Assign,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Set = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Set,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ReSize = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ReSize,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Clear = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Clear,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Bind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Bind,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.IsBound = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_IsBound,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.UnBind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_UnBind,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Find = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Find,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ChangeFind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ChangeFind,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Find1 = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Find1,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ChangeFind1 = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ChangeFind1,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap._kill_pointed = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap__kill_pointed,None,TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap_swigregister = _TDocStd.TDocStd_LabelIDMapDataMap_swigregister
TDocStd_LabelIDMapDataMap_swigregister(TDocStd_LabelIDMapDataMap)

class TDocStd_Modified(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Add(*args):
        """
        :param alabel:
        :type alabel: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_Add(*args)

    Add = staticmethod(Add)
    def Remove(*args):
        """
        :param alabel:
        :type alabel: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_Remove(*args)

    Remove = staticmethod(Remove)
    def Contains(*args):
        """
        :param alabel:
        :type alabel: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_Contains(*args)

    Contains = staticmethod(Contains)
    def GetID(*args):
        """
        * Modified methods ================

        :rtype: Standard_GUID

        """
        return _TDocStd.TDocStd_Modified_GetID(*args)

    GetID = staticmethod(GetID)
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_Modified_swiginit(self,_TDocStd.new_TDocStd_Modified(*args))
    def IsEmpty(self, *args):
        """
        * API class methods =================

        :param access:
        :type access: TDF_Label &
        :rtype: bool

        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_IsEmpty(self, *args)

    def Clear(self, *args):
        """
        * remove all modified labels. becomes empty

        :param access:
        :type access: TDF_Label &
        :rtype: void

        :rtype: None

        """
        return _TDocStd.TDocStd_Modified_Clear(self, *args)

    def AddLabel(self, *args):
        """
        * add <L> as modified

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_AddLabel(self, *args)

    def RemoveLabel(self, *args):
        """
        * remove <L> as modified

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _TDocStd.TDocStd_Modified_RemoveLabel(self, *args)

    def Get(self, *args):
        """
        * if <IsEmpty> raise an exception.

        :param access:
        :type access: TDF_Label &
        :rtype: TDF_LabelMap

        * returns modified label map

        :rtype: TDF_LabelMap

        """
        return _TDocStd.TDocStd_Modified_Get(self, *args)

    def DumpToString(self):
        """DumpToString(TDocStd_Modified self) -> std::string"""
        return _TDocStd.TDocStd_Modified_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_Modified self)"""
        return _TDocStd.TDocStd_Modified__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_Modified self) -> Handle_TDocStd_Modified"""
        return _TDocStd.TDocStd_Modified_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_Modified.IsEmpty = new_instancemethod(_TDocStd.TDocStd_Modified_IsEmpty,None,TDocStd_Modified)
TDocStd_Modified.Clear = new_instancemethod(_TDocStd.TDocStd_Modified_Clear,None,TDocStd_Modified)
TDocStd_Modified.AddLabel = new_instancemethod(_TDocStd.TDocStd_Modified_AddLabel,None,TDocStd_Modified)
TDocStd_Modified.RemoveLabel = new_instancemethod(_TDocStd.TDocStd_Modified_RemoveLabel,None,TDocStd_Modified)
TDocStd_Modified.Get = new_instancemethod(_TDocStd.TDocStd_Modified_Get,None,TDocStd_Modified)
TDocStd_Modified.DumpToString = new_instancemethod(_TDocStd.TDocStd_Modified_DumpToString,None,TDocStd_Modified)
TDocStd_Modified._kill_pointed = new_instancemethod(_TDocStd.TDocStd_Modified__kill_pointed,None,TDocStd_Modified)
TDocStd_Modified.GetHandle = new_instancemethod(_TDocStd.TDocStd_Modified_GetHandle,None,TDocStd_Modified)
TDocStd_Modified_swigregister = _TDocStd.TDocStd_Modified_swigregister
TDocStd_Modified_swigregister(TDocStd_Modified)

def TDocStd_Modified_Add(*args):
  """
    :param alabel:
    :type alabel: TDF_Label &
    :rtype: bool

    """
  return _TDocStd.TDocStd_Modified_Add(*args)

def TDocStd_Modified_Remove(*args):
  """
    :param alabel:
    :type alabel: TDF_Label &
    :rtype: bool

    """
  return _TDocStd.TDocStd_Modified_Remove(*args)

def TDocStd_Modified_Contains(*args):
  """
    :param alabel:
    :type alabel: TDF_Label &
    :rtype: bool

    """
  return _TDocStd.TDocStd_Modified_Contains(*args)

def TDocStd_Modified_GetID(*args):
  """
    * Modified methods ================

    :rtype: Standard_GUID

    """
  return _TDocStd.TDocStd_Modified_GetID(*args)

class Handle_TDocStd_Modified(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_Modified_swiginit(self,_TDocStd.new_Handle_TDocStd_Modified(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_Modified_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_Modified.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_Modified_Nullify,None,Handle_TDocStd_Modified)
Handle_TDocStd_Modified.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_Modified_IsNull,None,Handle_TDocStd_Modified)
Handle_TDocStd_Modified.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_Modified_GetObject,None,Handle_TDocStd_Modified)
Handle_TDocStd_Modified._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_Modified__kill_pointed,None,Handle_TDocStd_Modified)
Handle_TDocStd_Modified_swigregister = _TDocStd.Handle_TDocStd_Modified_swigregister
Handle_TDocStd_Modified_swigregister(Handle_TDocStd_Modified)

def Handle_TDocStd_Modified_DownCast(*args):
  return _TDocStd.Handle_TDocStd_Modified_DownCast(*args)
Handle_TDocStd_Modified_DownCast = _TDocStd.Handle_TDocStd_Modified_DownCast

class TDocStd_MultiTransactionManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructor

        :rtype: None

        """
        _TDocStd.TDocStd_MultiTransactionManager_swiginit(self,_TDocStd.new_TDocStd_MultiTransactionManager(*args))
    def SetUndoLimit(self, *args):
        """
        * Sets undo limit for the manager and all documents.

        :param theLimit:
        :type theLimit: int
        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetUndoLimit(self, *args)

    def GetUndoLimit(self, *args):
        """
        * Returns undo limit for the manager.

        :rtype: int

        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetUndoLimit(self, *args)

    def Undo(self, *args):
        """
        * Undoes the current transaction of the manager. It calls the Undo () method of the document being on top of the manager list of undos (list.First()) and moves the list item to the top of the list of manager redos (list.Prepend(item)).

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_Undo(self, *args)

    def Redo(self, *args):
        """
        * Redoes the current transaction of the application. It calls the Redo () method of the document being on top of the manager list of redos (list.First()) and moves the list item to the top of the list of manager undos (list.Prepend(item)).

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_Redo(self, *args)

    def GetAvailableUndos(self, *args):
        """
        * Returns available manager undos.

        :rtype: TDocStd_SequenceOfApplicationDelta

        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetAvailableUndos(self, *args)

    def GetAvailableRedos(self, *args):
        """
        * Returns available manager redos.

        :rtype: TDocStd_SequenceOfApplicationDelta

        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetAvailableRedos(self, *args)

    def OpenCommand(self, *args):
        """
        * Opens transaction in each document and sets the flag that transaction is opened. If there are already opened transactions in the documents, these transactions will be aborted before openning new ones.

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_OpenCommand(self, *args)

    def AbortCommand(self, *args):
        """
        * Unsets the flag of started manager transaction and aborts transaction in each document.

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_AbortCommand(self, *args)

    def CommitCommand(self, *args):
        """
        * Commits transaction in all documents and fills the transaction manager with the documents that have been changed during the transaction. Returns True if new data has been added to myUndos. NOTE: All nested transactions in the documents will be commited.

        :rtype: bool

        * Makes the same steps as the previous function but defines the name for transaction. Returns True if new data has been added to myUndos.

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDocStd.TDocStd_MultiTransactionManager_CommitCommand(self, *args)

    def HasOpenCommand(self, *args):
        """
        * Returns true if a transaction is opened.

        :rtype: bool

        """
        return _TDocStd.TDocStd_MultiTransactionManager_HasOpenCommand(self, *args)

    def RemoveLastUndo(self, *args):
        """
        * Removes undo information from the list of undos of the manager and all documents which have been modified during the transaction.

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_RemoveLastUndo(self, *args)

    def DumpTransactionToString(self):
        """DumpTransactionToString(TDocStd_MultiTransactionManager self) -> std::string"""
        return _TDocStd.TDocStd_MultiTransactionManager_DumpTransactionToString(self)

    def AddDocument(self, *args):
        """
        * Adds the document to the transaction manager and checks if it has been already added

        :param theDoc:
        :type theDoc: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_AddDocument(self, *args)

    def RemoveDocument(self, *args):
        """
        * Removes the document from the transaction manager.

        :param theDoc:
        :type theDoc: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_RemoveDocument(self, *args)

    def Documents(self, *args):
        """
        * Returns the added documents to the transaction manager.

        :rtype: TDocStd_SequenceOfDocument

        """
        return _TDocStd.TDocStd_MultiTransactionManager_Documents(self, *args)

    def SetNestedTransactionMode(self, *args):
        """
        * Sets nested transaction mode if isAllowed == Standard_True NOTE: field myIsNestedTransactionMode exists only for synchronization between several documents and has no effect on transactions of multitransaction manager.

        :param isAllowed: default value is Standard_True
        :type isAllowed: bool
        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetNestedTransactionMode(self, *args)

    def IsNestedTransactionMode(self, *args):
        """
        * Returns Standard_True if NestedTransaction mode is set. Methods for protection of changes outside transactions

        :rtype: bool

        """
        return _TDocStd.TDocStd_MultiTransactionManager_IsNestedTransactionMode(self, *args)

    def SetModificationMode(self, *args):
        """
        * If theTransactionOnly is True, denies all changes outside transactions.

        :param theTransactionOnly:
        :type theTransactionOnly: bool
        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetModificationMode(self, *args)

    def ModificationMode(self, *args):
        """
        * Returns True if changes are allowed only inside transactions.

        :rtype: bool

        """
        return _TDocStd.TDocStd_MultiTransactionManager_ModificationMode(self, *args)

    def ClearUndos(self, *args):
        """
        * Clears undos in the manager and in documents.

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_ClearUndos(self, *args)

    def ClearRedos(self, *args):
        """
        * Clears redos in the manager and in documents.

        :rtype: None

        """
        return _TDocStd.TDocStd_MultiTransactionManager_ClearRedos(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_MultiTransactionManager self)"""
        return _TDocStd.TDocStd_MultiTransactionManager__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_MultiTransactionManager self) -> Handle_TDocStd_MultiTransactionManager"""
        return _TDocStd.TDocStd_MultiTransactionManager_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_MultiTransactionManager.SetUndoLimit = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetUndoLimit,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetUndoLimit = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetUndoLimit,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Undo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Undo,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Redo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Redo,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetAvailableUndos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetAvailableUndos,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetAvailableRedos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetAvailableRedos,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.OpenCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_OpenCommand,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.AbortCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_AbortCommand,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.CommitCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_CommitCommand,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.HasOpenCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_HasOpenCommand,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.RemoveLastUndo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_RemoveLastUndo,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.DumpTransactionToString = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_DumpTransactionToString,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.AddDocument = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_AddDocument,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.RemoveDocument = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_RemoveDocument,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Documents = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Documents,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.SetNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetNestedTransactionMode,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.IsNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_IsNestedTransactionMode,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.SetModificationMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetModificationMode,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ModificationMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ModificationMode,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ClearUndos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ClearUndos,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ClearRedos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ClearRedos,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager._kill_pointed = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager__kill_pointed,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetHandle = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetHandle,None,TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager_swigregister = _TDocStd.TDocStd_MultiTransactionManager_swigregister
TDocStd_MultiTransactionManager_swigregister(TDocStd_MultiTransactionManager)

class Handle_TDocStd_MultiTransactionManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_MultiTransactionManager_swiginit(self,_TDocStd.new_Handle_TDocStd_MultiTransactionManager(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_MultiTransactionManager_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_MultiTransactionManager.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_MultiTransactionManager_Nullify,None,Handle_TDocStd_MultiTransactionManager)
Handle_TDocStd_MultiTransactionManager.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_MultiTransactionManager_IsNull,None,Handle_TDocStd_MultiTransactionManager)
Handle_TDocStd_MultiTransactionManager.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_MultiTransactionManager_GetObject,None,Handle_TDocStd_MultiTransactionManager)
Handle_TDocStd_MultiTransactionManager._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_MultiTransactionManager__kill_pointed,None,Handle_TDocStd_MultiTransactionManager)
Handle_TDocStd_MultiTransactionManager_swigregister = _TDocStd.Handle_TDocStd_MultiTransactionManager_swigregister
Handle_TDocStd_MultiTransactionManager_swigregister(Handle_TDocStd_MultiTransactionManager)

def Handle_TDocStd_MultiTransactionManager_DownCast(*args):
  return _TDocStd.Handle_TDocStd_MultiTransactionManager_DownCast(*args)
Handle_TDocStd_MultiTransactionManager_DownCast = _TDocStd.Handle_TDocStd_MultiTransactionManager_DownCast

class TDocStd_Owner(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDocStd.TDocStd_Owner_GetID(*args)

    GetID = staticmethod(GetID)
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_Owner_swiginit(self,_TDocStd.new_TDocStd_Owner(*args))
    def SetDocument(self, *args):
        """
        :param indata:
        :type indata: Handle_TDF_Data &
        :param doc:
        :type doc: Handle_TDocStd_Document &
        :rtype: void

        :param document:
        :type document: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_Owner_SetDocument(self, *args)

    def GetDocument(self, *args):
        """
        * Owner methods ===============

        :param ofdata:
        :type ofdata: Handle_TDF_Data &
        :rtype: Handle_TDocStd_Document

        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_Owner_GetDocument(self, *args)

    def DumpToString(self):
        """DumpToString(TDocStd_Owner self) -> std::string"""
        return _TDocStd.TDocStd_Owner_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_Owner self)"""
        return _TDocStd.TDocStd_Owner__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_Owner self) -> Handle_TDocStd_Owner"""
        return _TDocStd.TDocStd_Owner_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_Owner.SetDocument = new_instancemethod(_TDocStd.TDocStd_Owner_SetDocument,None,TDocStd_Owner)
TDocStd_Owner.GetDocument = new_instancemethod(_TDocStd.TDocStd_Owner_GetDocument,None,TDocStd_Owner)
TDocStd_Owner.DumpToString = new_instancemethod(_TDocStd.TDocStd_Owner_DumpToString,None,TDocStd_Owner)
TDocStd_Owner._kill_pointed = new_instancemethod(_TDocStd.TDocStd_Owner__kill_pointed,None,TDocStd_Owner)
TDocStd_Owner.GetHandle = new_instancemethod(_TDocStd.TDocStd_Owner_GetHandle,None,TDocStd_Owner)
TDocStd_Owner_swigregister = _TDocStd.TDocStd_Owner_swigregister
TDocStd_Owner_swigregister(TDocStd_Owner)

def TDocStd_Owner_GetID(*args):
  """
    * class methods =============

    :rtype: Standard_GUID

    """
  return _TDocStd.TDocStd_Owner_GetID(*args)

class Handle_TDocStd_Owner(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_Owner_swiginit(self,_TDocStd.new_Handle_TDocStd_Owner(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_Owner_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_Owner.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_Owner_Nullify,None,Handle_TDocStd_Owner)
Handle_TDocStd_Owner.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_Owner_IsNull,None,Handle_TDocStd_Owner)
Handle_TDocStd_Owner.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_Owner_GetObject,None,Handle_TDocStd_Owner)
Handle_TDocStd_Owner._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_Owner__kill_pointed,None,Handle_TDocStd_Owner)
Handle_TDocStd_Owner_swigregister = _TDocStd.Handle_TDocStd_Owner_swigregister
Handle_TDocStd_Owner_swigregister(Handle_TDocStd_Owner)

def Handle_TDocStd_Owner_DownCast(*args):
  return _TDocStd.Handle_TDocStd_Owner_DownCast(*args)
Handle_TDocStd_Owner_DownCast = _TDocStd.Handle_TDocStd_Owner_DownCast

class TDocStd_PathParser(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param path:
        :type path: TCollection_ExtendedString &
        :rtype: None

        """
        _TDocStd.TDocStd_PathParser_swiginit(self,_TDocStd.new_TDocStd_PathParser(*args))
    def Parse(self, *args):
        """
        :rtype: None

        """
        return _TDocStd.TDocStd_PathParser_Parse(self, *args)

    def Trek(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_PathParser_Trek(self, *args)

    def Name(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_PathParser_Name(self, *args)

    def Extension(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_PathParser_Extension(self, *args)

    def Path(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDocStd.TDocStd_PathParser_Path(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDocStd.TDocStd_PathParser_Length(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_PathParser.Parse = new_instancemethod(_TDocStd.TDocStd_PathParser_Parse,None,TDocStd_PathParser)
TDocStd_PathParser.Trek = new_instancemethod(_TDocStd.TDocStd_PathParser_Trek,None,TDocStd_PathParser)
TDocStd_PathParser.Name = new_instancemethod(_TDocStd.TDocStd_PathParser_Name,None,TDocStd_PathParser)
TDocStd_PathParser.Extension = new_instancemethod(_TDocStd.TDocStd_PathParser_Extension,None,TDocStd_PathParser)
TDocStd_PathParser.Path = new_instancemethod(_TDocStd.TDocStd_PathParser_Path,None,TDocStd_PathParser)
TDocStd_PathParser.Length = new_instancemethod(_TDocStd.TDocStd_PathParser_Length,None,TDocStd_PathParser)
TDocStd_PathParser._kill_pointed = new_instancemethod(_TDocStd.TDocStd_PathParser__kill_pointed,None,TDocStd_PathParser)
TDocStd_PathParser_swigregister = _TDocStd.TDocStd_PathParser_swigregister
TDocStd_PathParser_swigregister(TDocStd_PathParser)

class TDocStd_SequenceNodeOfSequenceOfApplicationDelta(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDocStd_ApplicationDelta &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swiginit(self,_TDocStd.new_TDocStd_SequenceNodeOfSequenceOfApplicationDelta(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDocStd_ApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_SequenceNodeOfSequenceOfApplicationDelta self)"""
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_SequenceNodeOfSequenceOfApplicationDelta self) -> Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta"""
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_SequenceNodeOfSequenceOfApplicationDelta.Value = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_Value,None,TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
TDocStd_SequenceNodeOfSequenceOfApplicationDelta._kill_pointed = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta__kill_pointed,None,TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
TDocStd_SequenceNodeOfSequenceOfApplicationDelta.GetHandle = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_GetHandle,None,TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister = _TDocStd.TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister
TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister(TDocStd_SequenceNodeOfSequenceOfApplicationDelta)

class Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swiginit(self,_TDocStd.new_Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_Nullify,None,Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_IsNull,None,Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_GetObject,None,Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta__kill_pointed,None,Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta)
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister = _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_swigregister(Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta)

def Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_DownCast(*args):
  return _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_DownCast(*args)
Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_DownCast = _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfApplicationDelta_DownCast

class TDocStd_SequenceNodeOfSequenceOfDocument(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDocStd_Document &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_swiginit(self,_TDocStd.new_TDocStd_SequenceNodeOfSequenceOfDocument(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_SequenceNodeOfSequenceOfDocument self)"""
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_SequenceNodeOfSequenceOfDocument self) -> Handle_TDocStd_SequenceNodeOfSequenceOfDocument"""
        return _TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_SequenceNodeOfSequenceOfDocument.Value = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_Value,None,TDocStd_SequenceNodeOfSequenceOfDocument)
TDocStd_SequenceNodeOfSequenceOfDocument._kill_pointed = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument__kill_pointed,None,TDocStd_SequenceNodeOfSequenceOfDocument)
TDocStd_SequenceNodeOfSequenceOfDocument.GetHandle = new_instancemethod(_TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_GetHandle,None,TDocStd_SequenceNodeOfSequenceOfDocument)
TDocStd_SequenceNodeOfSequenceOfDocument_swigregister = _TDocStd.TDocStd_SequenceNodeOfSequenceOfDocument_swigregister
TDocStd_SequenceNodeOfSequenceOfDocument_swigregister(TDocStd_SequenceNodeOfSequenceOfDocument)

class Handle_TDocStd_SequenceNodeOfSequenceOfDocument(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_swiginit(self,_TDocStd.new_Handle_TDocStd_SequenceNodeOfSequenceOfDocument(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_SequenceNodeOfSequenceOfDocument.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_Nullify,None,Handle_TDocStd_SequenceNodeOfSequenceOfDocument)
Handle_TDocStd_SequenceNodeOfSequenceOfDocument.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_IsNull,None,Handle_TDocStd_SequenceNodeOfSequenceOfDocument)
Handle_TDocStd_SequenceNodeOfSequenceOfDocument.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_GetObject,None,Handle_TDocStd_SequenceNodeOfSequenceOfDocument)
Handle_TDocStd_SequenceNodeOfSequenceOfDocument._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument__kill_pointed,None,Handle_TDocStd_SequenceNodeOfSequenceOfDocument)
Handle_TDocStd_SequenceNodeOfSequenceOfDocument_swigregister = _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_swigregister
Handle_TDocStd_SequenceNodeOfSequenceOfDocument_swigregister(Handle_TDocStd_SequenceNodeOfSequenceOfDocument)

def Handle_TDocStd_SequenceNodeOfSequenceOfDocument_DownCast(*args):
  return _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_DownCast(*args)
Handle_TDocStd_SequenceNodeOfSequenceOfDocument_DownCast = _TDocStd.Handle_TDocStd_SequenceNodeOfSequenceOfDocument_DownCast

class TDocStd_SequenceOfApplicationDelta(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_SequenceOfApplicationDelta_swiginit(self,_TDocStd.new_TDocStd_SequenceOfApplicationDelta(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDocStd_SequenceOfApplicationDelta &
        :rtype: TDocStd_SequenceOfApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDocStd_SequenceOfApplicationDelta &
        :rtype: TDocStd_SequenceOfApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_TDocStd_ApplicationDelta &
        :rtype: None

        :param S:
        :type S: TDocStd_SequenceOfApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_TDocStd_ApplicationDelta &
        :rtype: None

        :param S:
        :type S: TDocStd_SequenceOfApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDocStd_ApplicationDelta &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDocStd_SequenceOfApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDocStd_ApplicationDelta &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDocStd_SequenceOfApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDocStd_ApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDocStd_ApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TDocStd_SequenceOfApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDocStd_ApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_TDocStd_ApplicationDelta &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDocStd_ApplicationDelta

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfApplicationDelta_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_SequenceOfApplicationDelta.Clear = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Clear,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Assign = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Assign,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Set = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Set,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Append = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Append,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Prepend = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Prepend,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.InsertBefore = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_InsertBefore,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.InsertAfter = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_InsertAfter,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.First = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_First,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Last = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Last,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Split = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Split,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Value = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Value,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.SetValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_SetValue,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.ChangeValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_ChangeValue,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Remove = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Remove,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta._kill_pointed = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta__kill_pointed,None,TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta_swigregister = _TDocStd.TDocStd_SequenceOfApplicationDelta_swigregister
TDocStd_SequenceOfApplicationDelta_swigregister(TDocStd_SequenceOfApplicationDelta)

class TDocStd_SequenceOfDocument(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_SequenceOfDocument_swiginit(self,_TDocStd.new_TDocStd_SequenceOfDocument(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDocStd_SequenceOfDocument &
        :rtype: TDocStd_SequenceOfDocument

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDocStd_SequenceOfDocument &
        :rtype: TDocStd_SequenceOfDocument

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_TDocStd_Document &
        :rtype: None

        :param S:
        :type S: TDocStd_SequenceOfDocument &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_TDocStd_Document &
        :rtype: None

        :param S:
        :type S: TDocStd_SequenceOfDocument &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDocStd_Document &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDocStd_SequenceOfDocument &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDocStd_Document &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDocStd_SequenceOfDocument &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_SequenceOfDocument_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TDocStd_SequenceOfDocument &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDocStd_Document

        """
        return _TDocStd.TDocStd_SequenceOfDocument_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TDocStd.TDocStd_SequenceOfDocument_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_SequenceOfDocument.Clear = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Clear,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Assign = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Assign,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Set = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Set,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Append = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Append,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Prepend = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Prepend,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.InsertBefore = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_InsertBefore,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.InsertAfter = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_InsertAfter,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.First = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_First,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Last = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Last,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Split = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Split,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Value = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Value,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.SetValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_SetValue,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.ChangeValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_ChangeValue,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Remove = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Remove,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument._kill_pointed = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument__kill_pointed,None,TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument_swigregister = _TDocStd.TDocStd_SequenceOfDocument_swigregister
TDocStd_SequenceOfDocument_swigregister(TDocStd_SequenceOfDocument)

class TDocStd_XLink(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Set(*args):
        """
        * Sets an empty external reference, at the label aLabel.

        :param atLabel:
        :type atLabel: TDF_Label &
        :rtype: Handle_TDocStd_XLink

        """
        return _TDocStd.TDocStd_XLink_Set(*args)

    Set = staticmethod(Set)
    def __init__(self, *args): 
        """
        * Initializes fields.

        :rtype: None

        """
        _TDocStd.TDocStd_XLink_swiginit(self,_TDocStd.new_TDocStd_XLink(*args))
    def Update(self, *args):
        """
        * Updates the data referenced in this external link attribute.

        :rtype: Handle_TDF_Reference

        """
        return _TDocStd.TDocStd_XLink_Update(self, *args)

    def GetID(*args):
        """
        * Returns the GUID for external links.

        :rtype: Standard_GUID

        """
        return _TDocStd.TDocStd_XLink_GetID(*args)

    GetID = staticmethod(GetID)
    def DocumentEntry(self, *args):
        """
        * Sets the name aDocEntry for the external document in this external link attribute.

        :param aDocEntry:
        :type aDocEntry: TCollection_AsciiString &
        :rtype: None

        * Returns the contents of the document identified by aDocEntry. aDocEntry provides external data to this external link attribute.

        :rtype: TCollection_AsciiString

        """
        return _TDocStd.TDocStd_XLink_DocumentEntry(self, *args)

    def LabelEntry(self, *args):
        """
        * Sets the label entry for this external link attribute with the label aLabel. aLabel pilots the importation of data from the document entry.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        * Sets the label entry for this external link attribute as a document identified by aLabEntry.

        :param aLabEntry:
        :type aLabEntry: TCollection_AsciiString &
        :rtype: None

        * Returns the contents of the field <myLabelEntry>.

        :rtype: TCollection_AsciiString

        """
        return _TDocStd.TDocStd_XLink_LabelEntry(self, *args)

    def DumpToString(self):
        """DumpToString(TDocStd_XLink self) -> std::string"""
        return _TDocStd.TDocStd_XLink_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_XLink self)"""
        return _TDocStd.TDocStd_XLink__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_XLink self) -> Handle_TDocStd_XLink"""
        return _TDocStd.TDocStd_XLink_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_XLink.Update = new_instancemethod(_TDocStd.TDocStd_XLink_Update,None,TDocStd_XLink)
TDocStd_XLink.DocumentEntry = new_instancemethod(_TDocStd.TDocStd_XLink_DocumentEntry,None,TDocStd_XLink)
TDocStd_XLink.LabelEntry = new_instancemethod(_TDocStd.TDocStd_XLink_LabelEntry,None,TDocStd_XLink)
TDocStd_XLink.DumpToString = new_instancemethod(_TDocStd.TDocStd_XLink_DumpToString,None,TDocStd_XLink)
TDocStd_XLink._kill_pointed = new_instancemethod(_TDocStd.TDocStd_XLink__kill_pointed,None,TDocStd_XLink)
TDocStd_XLink.GetHandle = new_instancemethod(_TDocStd.TDocStd_XLink_GetHandle,None,TDocStd_XLink)
TDocStd_XLink_swigregister = _TDocStd.TDocStd_XLink_swigregister
TDocStd_XLink_swigregister(TDocStd_XLink)

def TDocStd_XLink_Set(*args):
  """
    * Sets an empty external reference, at the label aLabel.

    :param atLabel:
    :type atLabel: TDF_Label &
    :rtype: Handle_TDocStd_XLink

    """
  return _TDocStd.TDocStd_XLink_Set(*args)

def TDocStd_XLink_GetID(*args):
  """
    * Returns the GUID for external links.

    :rtype: Standard_GUID

    """
  return _TDocStd.TDocStd_XLink_GetID(*args)

class Handle_TDocStd_XLink(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_XLink_swiginit(self,_TDocStd.new_Handle_TDocStd_XLink(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_XLink_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_XLink.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_XLink_Nullify,None,Handle_TDocStd_XLink)
Handle_TDocStd_XLink.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_XLink_IsNull,None,Handle_TDocStd_XLink)
Handle_TDocStd_XLink.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_XLink_GetObject,None,Handle_TDocStd_XLink)
Handle_TDocStd_XLink._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_XLink__kill_pointed,None,Handle_TDocStd_XLink)
Handle_TDocStd_XLink_swigregister = _TDocStd.Handle_TDocStd_XLink_swigregister
Handle_TDocStd_XLink_swigregister(Handle_TDocStd_XLink)

def Handle_TDocStd_XLink_DownCast(*args):
  return _TDocStd.Handle_TDocStd_XLink_DownCast(*args)
Handle_TDocStd_XLink_DownCast = _TDocStd.Handle_TDocStd_XLink_DownCast

class TDocStd_XLinkIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns an empty iterator;

        :rtype: None

        * Creates an iterator on Reference of <D>.

        :param D:
        :type D: Handle_TDocStd_Document &
        :rtype: None

        """
        _TDocStd.TDocStd_XLinkIterator_swiginit(self,_TDocStd.new_TDocStd_XLinkIterator(*args))
    def Initialize(self, *args):
        """
        * Restarts an iteration with <D>.

        :param D:
        :type D: Handle_TDocStd_Document &
        :rtype: None

        """
        return _TDocStd.TDocStd_XLinkIterator_Initialize(self, *args)

    def More(self, *args):
        """
        * Returns True if there is a current Item in the iteration.

        :rtype: bool

        """
        return _TDocStd.TDocStd_XLinkIterator_More(self, *args)

    def Next(self, *args):
        """
        * Move to the next item; raises if there is no more item.

        :rtype: None

        """
        return _TDocStd.TDocStd_XLinkIterator_Next(self, *args)

    def Value(self, *args):
        """
        * Returns the current item; a null handle if there is none.

        :rtype: TDocStd_XLinkPtr

        """
        return _TDocStd.TDocStd_XLinkIterator_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_XLinkIterator.Initialize = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Initialize,None,TDocStd_XLinkIterator)
TDocStd_XLinkIterator.More = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_More,None,TDocStd_XLinkIterator)
TDocStd_XLinkIterator.Next = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Next,None,TDocStd_XLinkIterator)
TDocStd_XLinkIterator.Value = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Value,None,TDocStd_XLinkIterator)
TDocStd_XLinkIterator._kill_pointed = new_instancemethod(_TDocStd.TDocStd_XLinkIterator__kill_pointed,None,TDocStd_XLinkIterator)
TDocStd_XLinkIterator_swigregister = _TDocStd.TDocStd_XLinkIterator_swigregister
TDocStd_XLinkIterator_swigregister(TDocStd_XLinkIterator)

class TDocStd_XLinkRoot(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def GetID(*args):
        """
        * Returns the ID: 2a96b61d-ec8b-11d0-bee7-080009dc3333

        :rtype: Standard_GUID

        """
        return _TDocStd.TDocStd_XLinkRoot_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Sets an empty XLinkRoot to Root or gets the existing one. Only one attribute per TDF_Data.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :rtype: Handle_TDocStd_XLinkRoot

        """
        return _TDocStd.TDocStd_XLinkRoot_Set(*args)

    Set = staticmethod(Set)
    def Insert(*args):
        """
        * Inserts <anXLinkPtr> at the beginning of the XLink chain.

        :param anXLinkPtr:
        :type anXLinkPtr: TDocStd_XLinkPtr &
        :rtype: void

        """
        return _TDocStd.TDocStd_XLinkRoot_Insert(*args)

    Insert = staticmethod(Insert)
    def Remove(*args):
        """
        * Removes <anXLinkPtr> from the XLink chain, if it exists.

        :param anXLinkPtr:
        :type anXLinkPtr: TDocStd_XLinkPtr &
        :rtype: void

        """
        return _TDocStd.TDocStd_XLinkRoot_Remove(*args)

    Remove = staticmethod(Remove)
    def DumpToString(self):
        """DumpToString(TDocStd_XLinkRoot self) -> std::string"""
        return _TDocStd.TDocStd_XLinkRoot_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDocStd_XLinkRoot self)"""
        return _TDocStd.TDocStd_XLinkRoot__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDocStd_XLinkRoot self) -> Handle_TDocStd_XLinkRoot"""
        return _TDocStd.TDocStd_XLinkRoot_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_XLinkRoot.DumpToString = new_instancemethod(_TDocStd.TDocStd_XLinkRoot_DumpToString,None,TDocStd_XLinkRoot)
TDocStd_XLinkRoot._kill_pointed = new_instancemethod(_TDocStd.TDocStd_XLinkRoot__kill_pointed,None,TDocStd_XLinkRoot)
TDocStd_XLinkRoot.GetHandle = new_instancemethod(_TDocStd.TDocStd_XLinkRoot_GetHandle,None,TDocStd_XLinkRoot)
TDocStd_XLinkRoot_swigregister = _TDocStd.TDocStd_XLinkRoot_swigregister
TDocStd_XLinkRoot_swigregister(TDocStd_XLinkRoot)

def TDocStd_XLinkRoot_GetID(*args):
  """
    * Returns the ID: 2a96b61d-ec8b-11d0-bee7-080009dc3333

    :rtype: Standard_GUID

    """
  return _TDocStd.TDocStd_XLinkRoot_GetID(*args)

def TDocStd_XLinkRoot_Set(*args):
  """
    * Sets an empty XLinkRoot to Root or gets the existing one. Only one attribute per TDF_Data.

    :param aDF:
    :type aDF: Handle_TDF_Data &
    :rtype: Handle_TDocStd_XLinkRoot

    """
  return _TDocStd.TDocStd_XLinkRoot_Set(*args)

def TDocStd_XLinkRoot_Insert(*args):
  """
    * Inserts <anXLinkPtr> at the beginning of the XLink chain.

    :param anXLinkPtr:
    :type anXLinkPtr: TDocStd_XLinkPtr &
    :rtype: void

    """
  return _TDocStd.TDocStd_XLinkRoot_Insert(*args)

def TDocStd_XLinkRoot_Remove(*args):
  """
    * Removes <anXLinkPtr> from the XLink chain, if it exists.

    :param anXLinkPtr:
    :type anXLinkPtr: TDocStd_XLinkPtr &
    :rtype: void

    """
  return _TDocStd.TDocStd_XLinkRoot_Remove(*args)

class Handle_TDocStd_XLinkRoot(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDocStd.Handle_TDocStd_XLinkRoot_swiginit(self,_TDocStd.new_Handle_TDocStd_XLinkRoot(*args))
    DownCast = staticmethod(_TDocStd.Handle_TDocStd_XLinkRoot_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDocStd_XLinkRoot.Nullify = new_instancemethod(_TDocStd.Handle_TDocStd_XLinkRoot_Nullify,None,Handle_TDocStd_XLinkRoot)
Handle_TDocStd_XLinkRoot.IsNull = new_instancemethod(_TDocStd.Handle_TDocStd_XLinkRoot_IsNull,None,Handle_TDocStd_XLinkRoot)
Handle_TDocStd_XLinkRoot.GetObject = new_instancemethod(_TDocStd.Handle_TDocStd_XLinkRoot_GetObject,None,Handle_TDocStd_XLinkRoot)
Handle_TDocStd_XLinkRoot._kill_pointed = new_instancemethod(_TDocStd.Handle_TDocStd_XLinkRoot__kill_pointed,None,Handle_TDocStd_XLinkRoot)
Handle_TDocStd_XLinkRoot_swigregister = _TDocStd.Handle_TDocStd_XLinkRoot_swigregister
Handle_TDocStd_XLinkRoot_swigregister(Handle_TDocStd_XLinkRoot)

def Handle_TDocStd_XLinkRoot_DownCast(*args):
  return _TDocStd.Handle_TDocStd_XLinkRoot_DownCast(*args)
Handle_TDocStd_XLinkRoot_DownCast = _TDocStd.Handle_TDocStd_XLinkRoot_DownCast

class TDocStd_XLinkTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDocStd.TDocStd_XLinkTool_swiginit(self,_TDocStd.new_TDocStd_XLinkTool(*args))
    def CopyWithLink(self, *args):
        """
        * Copies the content of the label <fromsource> to the label <intarget>. The link is registred with an XLink attribute by <intarget> label. if the content of <fromsource> is not self-contained, and/or <intarget> has already an XLink attribute, an exception is raised.

        :param intarget:
        :type intarget: TDF_Label &
        :param fromsource:
        :type fromsource: TDF_Label &
        :rtype: None

        """
        return _TDocStd.TDocStd_XLinkTool_CopyWithLink(self, *args)

    def UpdateLink(self, *args):
        """
        * Update the external reference set at <L>. Example Handle_TDocStd_Document aDoc; if (!OCAFTest::GetDocument(1,aDoc)) return 1; Handle_TDataStd_Reference aRef; TDocStd_XLinkTool xlinktool; if (!OCAFTest::Find(aDoc,2),TDataStd_Reference::GetID(),aRef) return 1; xlinktool.UpdateLink(aRef->Label()); Exceptions Standard_DomainError if <L> has no XLink attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _TDocStd.TDocStd_XLinkTool_UpdateLink(self, *args)

    def Copy(self, *args):
        """
        * Copy the content of <fromsource> under <intarget>. Noone link is registred. noone check is done. Example Handle_TDocStd_Document DOC, XDOC; TDF_Label L, XL; TDocStd_XLinkTool xlinktool; xlinktool.Copy(L,XL); Exceptions: Standard_DomainError if the contents of fromsource are not entirely in the scope of this label, in other words, are not self-contained. !!! ==> Warning: If the document manages shapes use the next way: TDocStd_XLinkTool xlinktool; xlinktool.Copy(L,XL); TopTools_DataMapOfShapeShape M; TNaming::ChangeShapes(target,M);

        :param intarget:
        :type intarget: TDF_Label &
        :param fromsource:
        :type fromsource: TDF_Label &
        :rtype: void

        """
        return _TDocStd.TDocStd_XLinkTool_Copy(self, *args)

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _TDocStd.TDocStd_XLinkTool_IsDone(self, *args)

    def DataSet(self, *args):
        """
        :rtype: Handle_TDF_DataSet

        """
        return _TDocStd.TDocStd_XLinkTool_DataSet(self, *args)

    def RelocationTable(self, *args):
        """
        :rtype: Handle_TDF_RelocationTable

        """
        return _TDocStd.TDocStd_XLinkTool_RelocationTable(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDocStd_XLinkTool.CopyWithLink = new_instancemethod(_TDocStd.TDocStd_XLinkTool_CopyWithLink,None,TDocStd_XLinkTool)
TDocStd_XLinkTool.UpdateLink = new_instancemethod(_TDocStd.TDocStd_XLinkTool_UpdateLink,None,TDocStd_XLinkTool)
TDocStd_XLinkTool.Copy = new_instancemethod(_TDocStd.TDocStd_XLinkTool_Copy,None,TDocStd_XLinkTool)
TDocStd_XLinkTool.IsDone = new_instancemethod(_TDocStd.TDocStd_XLinkTool_IsDone,None,TDocStd_XLinkTool)
TDocStd_XLinkTool.DataSet = new_instancemethod(_TDocStd.TDocStd_XLinkTool_DataSet,None,TDocStd_XLinkTool)
TDocStd_XLinkTool.RelocationTable = new_instancemethod(_TDocStd.TDocStd_XLinkTool_RelocationTable,None,TDocStd_XLinkTool)
TDocStd_XLinkTool._kill_pointed = new_instancemethod(_TDocStd.TDocStd_XLinkTool__kill_pointed,None,TDocStd_XLinkTool)
TDocStd_XLinkTool_swigregister = _TDocStd.TDocStd_XLinkTool_swigregister
TDocStd_XLinkTool_swigregister(TDocStd_XLinkTool)



