# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepClass3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepClass3d', [dirname(__file__)])
        except ImportError:
            import _BRepClass3d
            return _BRepClass3d
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepClass3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepClass3d = swig_import_helper()
    del swig_import_helper
else:
    import _BRepClass3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepClass3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepClass3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepClass3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepClass3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepClass3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepClass3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepClass3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepClass3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepClass3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepClass3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepClass3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepClass3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepClass3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepClass3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepClass3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepClass3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepClass3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepClass3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.IntCurveSurface
import OCC.math
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.Intf
import OCC.Bnd
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.IntCurvesFace
class brepclass3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def OuterShell(*args):
        """
        * Returns the outer most shell of <S>. Returns a Null shell if <S> has no outer shell. If <S> has only one shell, then it will return, without checking orientation.

        :param S:
        :type S: TopoDS_Solid &
        :rtype: TopoDS_Shell

        """
        return _BRepClass3d.brepclass3d_OuterShell(*args)

    OuterShell = staticmethod(OuterShell)

    def __init__(self):
        _BRepClass3d.brepclass3d_swiginit(self, _BRepClass3d.new_brepclass3d())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


brepclass3d._kill_pointed = new_instancemethod(_BRepClass3d.brepclass3d__kill_pointed, None, brepclass3d)
brepclass3d_swigregister = _BRepClass3d.brepclass3d_swigregister
brepclass3d_swigregister(brepclass3d)

def brepclass3d_OuterShell(*args):
    """
    * Returns the outer most shell of <S>. Returns a Null shell if <S> has no outer shell. If <S> has only one shell, then it will return, without checking orientation.

    :param S:
    :type S: TopoDS_Solid &
    :rtype: TopoDS_Shell

    """
    return _BRepClass3d.brepclass3d_OuterShell(*args)

class BRepClass3d_DataMapIteratorOfMapOfInter(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepClass3d_MapOfInter &
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_swiginit(self, _BRepClass3d.new_BRepClass3d_DataMapIteratorOfMapOfInter(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: BRepClass3d_MapOfInter &
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_DataMapIteratorOfMapOfInter.Initialize = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Initialize, None, BRepClass3d_DataMapIteratorOfMapOfInter)
BRepClass3d_DataMapIteratorOfMapOfInter.Key = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Key, None, BRepClass3d_DataMapIteratorOfMapOfInter)
BRepClass3d_DataMapIteratorOfMapOfInter.Value = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_Value, None, BRepClass3d_DataMapIteratorOfMapOfInter)
BRepClass3d_DataMapIteratorOfMapOfInter._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter__kill_pointed, None, BRepClass3d_DataMapIteratorOfMapOfInter)
BRepClass3d_DataMapIteratorOfMapOfInter_swigregister = _BRepClass3d.BRepClass3d_DataMapIteratorOfMapOfInter_swigregister
BRepClass3d_DataMapIteratorOfMapOfInter_swigregister(BRepClass3d_DataMapIteratorOfMapOfInter)

class BRepClass3d_DataMapNodeOfMapOfInter(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Standard_Address &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_swiginit(self, _BRepClass3d.new_BRepClass3d_DataMapNodeOfMapOfInter(*args))

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepClass3d_DataMapNodeOfMapOfInter self)"""
        return _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepClass3d_DataMapNodeOfMapOfInter self) -> Handle_BRepClass3d_DataMapNodeOfMapOfInter"""
        return _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_DataMapNodeOfMapOfInter.Key = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_Key, None, BRepClass3d_DataMapNodeOfMapOfInter)
BRepClass3d_DataMapNodeOfMapOfInter.Value = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_Value, None, BRepClass3d_DataMapNodeOfMapOfInter)
BRepClass3d_DataMapNodeOfMapOfInter._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter__kill_pointed, None, BRepClass3d_DataMapNodeOfMapOfInter)
BRepClass3d_DataMapNodeOfMapOfInter.GetHandle = new_instancemethod(_BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_GetHandle, None, BRepClass3d_DataMapNodeOfMapOfInter)
BRepClass3d_DataMapNodeOfMapOfInter_swigregister = _BRepClass3d.BRepClass3d_DataMapNodeOfMapOfInter_swigregister
BRepClass3d_DataMapNodeOfMapOfInter_swigregister(BRepClass3d_DataMapNodeOfMapOfInter)

class Handle_BRepClass3d_DataMapNodeOfMapOfInter(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_swiginit(self, _BRepClass3d.new_Handle_BRepClass3d_DataMapNodeOfMapOfInter(*args))
    DownCast = staticmethod(_BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepClass3d_DataMapNodeOfMapOfInter.Nullify = new_instancemethod(_BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_Nullify, None, Handle_BRepClass3d_DataMapNodeOfMapOfInter)
Handle_BRepClass3d_DataMapNodeOfMapOfInter.IsNull = new_instancemethod(_BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_IsNull, None, Handle_BRepClass3d_DataMapNodeOfMapOfInter)
Handle_BRepClass3d_DataMapNodeOfMapOfInter.GetObject = new_instancemethod(_BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_GetObject, None, Handle_BRepClass3d_DataMapNodeOfMapOfInter)
Handle_BRepClass3d_DataMapNodeOfMapOfInter._kill_pointed = new_instancemethod(_BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter__kill_pointed, None, Handle_BRepClass3d_DataMapNodeOfMapOfInter)
Handle_BRepClass3d_DataMapNodeOfMapOfInter_swigregister = _BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_swigregister
Handle_BRepClass3d_DataMapNodeOfMapOfInter_swigregister(Handle_BRepClass3d_DataMapNodeOfMapOfInter)

def Handle_BRepClass3d_DataMapNodeOfMapOfInter_DownCast(AnObject):
    return _BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_DownCast(AnObject)
Handle_BRepClass3d_DataMapNodeOfMapOfInter_DownCast = _BRepClass3d.Handle_BRepClass3d_DataMapNodeOfMapOfInter_DownCast

class BRepClass3d_Intersector3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _BRepClass3d.BRepClass3d_Intersector3d_swiginit(self, _BRepClass3d.new_BRepClass3d_Intersector3d(*args))

    def Perform(self, *args):
        """
        * Perform the intersection between the segment L(0) ... L(Prm) and the Shape <Sh>.  Only the point with the smallest parameter on the line is returned.  The Tolerance <Tol> is used to determine if the first point of the segment is near the face. In that case, the parameter of the intersection point on the line can be a negative value (greater than -Tol).

        :param L:
        :type L: gp_Lin
        :param Prm:
        :type Prm: float
        :param Tol:
        :type Tol: float
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_Perform(self, *args)


    def IsDone(self, *args):
        """
        * True is returned when the intersection have been computed.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_IsDone(self, *args)


    def HasAPoint(self, *args):
        """
        * True is returned if a point has been found.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_HasAPoint(self, *args)


    def UParameter(self, *args):
        """
        * Returns the U parameter of the intersection point on the surface.

        :rtype: float

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_UParameter(self, *args)


    def VParameter(self, *args):
        """
        * Returns the V parameter of the intersection point on the surface.

        :rtype: float

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_VParameter(self, *args)


    def WParameter(self, *args):
        """
        * Returns the parameter of the intersection point on the line.

        :rtype: float

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_WParameter(self, *args)


    def Pnt(self, *args):
        """
        * Returns the geometric point of the intersection between the line and the surface.

        :rtype: gp_Pnt

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_Pnt(self, *args)


    def Transition(self, *args):
        """
        * Returns the transition of the line on the surface.

        :rtype: IntCurveSurface_TransitionOnCurve

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_Transition(self, *args)


    def State(self, *args):
        """
        * Returns the state of the point on the face. The values can be either TopAbs_IN ( the point is in the face) or TopAbs_ON ( the point is on a boudary of the face).

        :rtype: TopAbs_State

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_State(self, *args)


    def Face(self, *args):
        """
        * Returns the significant face used to determine the intersection.

        :rtype: TopoDS_Face

        """
        return _BRepClass3d.BRepClass3d_Intersector3d_Face(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_Intersector3d.Perform = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_Perform, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.IsDone = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_IsDone, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.HasAPoint = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_HasAPoint, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.UParameter = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_UParameter, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.VParameter = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_VParameter, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.WParameter = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_WParameter, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.Pnt = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_Pnt, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.Transition = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_Transition, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.State = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_State, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d.Face = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d_Face, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_Intersector3d__kill_pointed, None, BRepClass3d_Intersector3d)
BRepClass3d_Intersector3d_swigregister = _BRepClass3d.BRepClass3d_Intersector3d_swigregister
BRepClass3d_Intersector3d_swigregister(BRepClass3d_Intersector3d)

class BRepClass3d_MapOfInter(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_MapOfInter_swiginit(self, _BRepClass3d.new_BRepClass3d_MapOfInter(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepClass3d_MapOfInter &
        :rtype: BRepClass3d_MapOfInter

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepClass3d_MapOfInter &
        :rtype: BRepClass3d_MapOfInter

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: Standard_Address &
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepClass3d.BRepClass3d_MapOfInter_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepClass3d_MapOfInter self)"""
        return _BRepClass3d.BRepClass3d_MapOfInter__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_MapOfInter.Assign = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Assign, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.Set = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Set, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.ReSize = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_ReSize, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.Clear = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Clear, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.Bind = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Bind, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.IsBound = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_IsBound, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.UnBind = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_UnBind, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.Find = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Find, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.ChangeFind = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_ChangeFind, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.Find1 = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_Find1, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter.ChangeFind1 = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter_ChangeFind1, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_MapOfInter__kill_pointed, None, BRepClass3d_MapOfInter)
BRepClass3d_MapOfInter_swigregister = _BRepClass3d.BRepClass3d_MapOfInter_swigregister
BRepClass3d_MapOfInter_swigregister(BRepClass3d_MapOfInter)

class BRepClass3d_SClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Constructor to classify the point P with the tolerance Tol on the solid S.

        :param S:
        :type S: BRepClass3d_SolidExplorer &
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_SClassifier_swiginit(self, _BRepClass3d.new_BRepClass3d_SClassifier(*args))

    def Perform(self, *args):
        """
        * Classify the point P with the tolerance Tol on the solid S.

        :param S:
        :type S: BRepClass3d_SolidExplorer &
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SClassifier_Perform(self, *args)


    def PerformInfinitePoint(self, *args):
        """
        * Classify an infinite point with the tolerance Tol on the solid S.

        :param S:
        :type S: BRepClass3d_SolidExplorer &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SClassifier_PerformInfinitePoint(self, *args)


    def Rejected(self, *args):
        """
        * Returns True if the classification has been computed by rejection. The State is then OUT.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SClassifier_Rejected(self, *args)


    def State(self, *args):
        """
        * Returns the result of the classification.

        :rtype: TopAbs_State

        """
        return _BRepClass3d.BRepClass3d_SClassifier_State(self, *args)


    def IsOnAFace(self, *args):
        """
        * Returns True when the point is a point of a face.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SClassifier_IsOnAFace(self, *args)


    def Face(self, *args):
        """
        * Returns the face used to determine the classification. When the state is ON, this is the face containing the point.  When Rejected() returns True, Face() has no signification.

        :rtype: TopoDS_Face

        """
        return _BRepClass3d.BRepClass3d_SClassifier_Face(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_SClassifier.Perform = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_Perform, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier.PerformInfinitePoint = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_PerformInfinitePoint, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier.Rejected = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_Rejected, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier.State = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_State, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier.IsOnAFace = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_IsOnAFace, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier.Face = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier_Face, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_SClassifier__kill_pointed, None, BRepClass3d_SClassifier)
BRepClass3d_SClassifier_swigregister = _BRepClass3d.BRepClass3d_SClassifier_swigregister
BRepClass3d_SClassifier_swigregister(BRepClass3d_SClassifier)

class BRepClass3d_SolidExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Raise if called.

        :param Oth:
        :type Oth: BRepClass3d_SolidExplorer &
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_SolidExplorer_swiginit(self, _BRepClass3d.new_BRepClass3d_SolidExplorer(*args))

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Delete(self, *args)


    def InitShape(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_InitShape(self, *args)


    def Reject(self, *args):
        """
        * Should return True if P outside of bounding vol. of the shape

        :param P:
        :type P: gp_Pnt
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Reject(self, *args)


    def FindAPointInTheFace(*args):
        """
        * compute a point P in the face F. Param is a Real in  ]0,1[ and is used to initialise the algorithm. For  different values , different points are returned.

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param Param:
        :type Param: float &
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :param Param:
        :type Param: float &
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :param Param:
        :type Param: float &
        :param theVecD1U:
        :type theVecD1U: gp_Vec
        :param theVecD1V:
        :type theVecD1V: gp_Vec
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_FindAPointInTheFace(*args)

    FindAPointInTheFace = staticmethod(FindAPointInTheFace)

    def PointInTheFace(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :param Param:
        :type Param: float &
        :param Index:
        :type Index: int &
        :rtype: bool

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :param Param:
        :type Param: float &
        :param Index:
        :type Index: int &
        :param surf:
        :type surf: Handle_BRepAdaptor_HSurface &
        :param u1:
        :type u1: float
        :param v1:
        :type v1: float
        :param u2:
        :type u2: float
        :param v2:
        :type v2: float
        :rtype: bool

        * <Index> gives point index to search from and returns point index of succeseful search

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pnt
        :param u:
        :type u: float &
        :param v:
        :type v: float &
        :param Param:
        :type Param: float &
        :param Index:
        :type Index: int &
        :param surf:
        :type surf: Handle_BRepAdaptor_HSurface &
        :param u1:
        :type u1: float
        :param v1:
        :type v1: float
        :param u2:
        :type u2: float
        :param v2:
        :type v2: float
        :param theVecD1U:
        :type theVecD1U: gp_Vec
        :param theVecD1V:
        :type theVecD1V: gp_Vec
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_PointInTheFace(self, *args)


    def InitShell(self, *args):
        """
        * Starts an exploration of the shells.

        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_InitShell(self, *args)


    def MoreShell(self, *args):
        """
        * Returns True if there is a current shell.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_MoreShell(self, *args)


    def NextShell(self, *args):
        """
        * Sets the explorer to the next shell.

        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_NextShell(self, *args)


    def CurrentShell(self, *args):
        """
        * Returns the current shell.

        :rtype: TopoDS_Shell

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_CurrentShell(self, *args)


    def RejectShell(self, *args):
        """
        * Returns True if the Shell is rejected.

        :param L:
        :type L: gp_Lin
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_RejectShell(self, *args)


    def InitFace(self, *args):
        """
        * Starts an exploration of the faces of the current shell.

        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_InitFace(self, *args)


    def MoreFace(self, *args):
        """
        * Returns True if current face in current shell.

        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_MoreFace(self, *args)


    def NextFace(self, *args):
        """
        * Sets the explorer to the next Face of the current shell.

        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_NextFace(self, *args)


    def CurrentFace(self, *args):
        """
        * Returns the current face.

        :rtype: TopoDS_Face

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_CurrentFace(self, *args)


    def RejectFace(self, *args):
        """
        * returns True if the face is rejected.

        :param L:
        :type L: gp_Lin
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_RejectFace(self, *args)


    def Segment(self, *args):
        """
        * Returns in <L>, <Par> a segment having at least one intersection with the shape boundary to compute intersections.

        :param P:
        :type P: gp_Pnt
        :param L:
        :type L: gp_Lin
        :param Par:
        :type Par: float &
        :rtype: int

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Segment(self, *args)


    def OtherSegment(self, *args):
        """
        * Returns in <L>, <Par> a segment having at least one intersection with the shape boundary to compute intersections.  The First Call to this method returns a line which point to a point of the first face of the shape. The Second Call provide a line to the second face and so on.

        :param P:
        :type P: gp_Pnt
        :param L:
        :type L: gp_Lin
        :param Par:
        :type Par: float &
        :rtype: int

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_OtherSegment(self, *args)


    def GetFaceSegmentIndex(self, *args):
        """
        * Returns the index of face for which last segment is calculated.

        :rtype: int

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_GetFaceSegmentIndex(self, *args)


    def DumpSegment(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param L:
        :type L: gp_Lin
        :param Par:
        :type Par: float
        :param S:
        :type S: TopAbs_State
        :rtype: void

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_DumpSegment(self, *args)


    def Box(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Box(self, *args)


    def Intersector(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :rtype: IntCurvesFace_Intersector

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Intersector(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidExplorer_Destroy(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_SolidExplorer.Delete = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Delete, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.InitShape = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_InitShape, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.Reject = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Reject, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.PointInTheFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_PointInTheFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.InitShell = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_InitShell, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.MoreShell = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_MoreShell, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.NextShell = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_NextShell, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.CurrentShell = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_CurrentShell, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.RejectShell = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_RejectShell, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.InitFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_InitFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.MoreFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_MoreFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.NextFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_NextFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.CurrentFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_CurrentFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.RejectFace = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_RejectFace, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.Segment = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Segment, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.OtherSegment = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_OtherSegment, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.GetFaceSegmentIndex = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_GetFaceSegmentIndex, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.DumpSegment = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_DumpSegment, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.Box = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Box, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.Intersector = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Intersector, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer.Destroy = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer_Destroy, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_SolidExplorer__kill_pointed, None, BRepClass3d_SolidExplorer)
BRepClass3d_SolidExplorer_swigregister = _BRepClass3d.BRepClass3d_SolidExplorer_swigregister
BRepClass3d_SolidExplorer_swigregister(BRepClass3d_SolidExplorer)

def BRepClass3d_SolidExplorer_FindAPointInTheFace(*args):
    """
    * compute a point P in the face F. Param is a Real in  ]0,1[ and is used to initialise the algorithm. For  different values , different points are returned.

    :param F:
    :type F: TopoDS_Face &
    :param P:
    :type P: gp_Pnt
    :param Param:
    :type Param: float &
    :rtype: bool

    :param F:
    :type F: TopoDS_Face &
    :param P:
    :type P: gp_Pnt
    :param u:
    :type u: float &
    :param v:
    :type v: float &
    :param Param:
    :type Param: float &
    :rtype: bool

    :param F:
    :type F: TopoDS_Face &
    :param P:
    :type P: gp_Pnt
    :param u:
    :type u: float &
    :param v:
    :type v: float &
    :param Param:
    :type Param: float &
    :param theVecD1U:
    :type theVecD1U: gp_Vec
    :param theVecD1V:
    :type theVecD1V: gp_Vec
    :rtype: bool

    :param F:
    :type F: TopoDS_Face &
    :param P:
    :type P: gp_Pnt
    :param u:
    :type u: float &
    :param v:
    :type v: float &
    :rtype: bool

    :param F:
    :type F: TopoDS_Face &
    :param P:
    :type P: gp_Pnt
    :rtype: bool

    :param F:
    :type F: TopoDS_Face &
    :param u:
    :type u: float &
    :param v:
    :type v: float &
    :rtype: bool

    """
    return _BRepClass3d.BRepClass3d_SolidExplorer_FindAPointInTheFace(*args)

class BRepClass3d_SolidPassiveClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_SolidPassiveClassifier_swiginit(self, _BRepClass3d.new_BRepClass3d_SolidPassiveClassifier(*args))

    def Reset(self, *args):
        """
        :param L:
        :type L: gp_Lin
        :param P:
        :type P: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_Reset(self, *args)


    def Compare(self, *args):
        """
        :param F:
        :type F: TopoDS_Face &
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_Compare(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_Parameter(self, *args)


    def HasIntersection(self, *args):
        """
        :rtype: bool

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_HasIntersection(self, *args)


    def Intersector(self, *args):
        """
        :rtype: BRepClass3d_Intersector3d

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_Intersector(self, *args)


    def State(self, *args):
        """
        :rtype: TopAbs_State

        """
        return _BRepClass3d.BRepClass3d_SolidPassiveClassifier_State(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_SolidPassiveClassifier.Reset = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_Reset, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier.Compare = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_Compare, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier.Parameter = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_Parameter, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier.HasIntersection = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_HasIntersection, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier.Intersector = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_Intersector, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier.State = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier_State, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_SolidPassiveClassifier__kill_pointed, None, BRepClass3d_SolidPassiveClassifier)
BRepClass3d_SolidPassiveClassifier_swigregister = _BRepClass3d.BRepClass3d_SolidPassiveClassifier_swigregister
BRepClass3d_SolidPassiveClassifier_swigregister(BRepClass3d_SolidPassiveClassifier)

class BRepClass3d_SolidClassifier(BRepClass3d_SClassifier):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Load(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidClassifier_Load(self, *args)


    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        * Constructor from a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        * Constructor to classify the point P with the tolerance Tol on the solid S.

        :param S:
        :type S: TopoDS_Shape &
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _BRepClass3d.BRepClass3d_SolidClassifier_swiginit(self, _BRepClass3d.new_BRepClass3d_SolidClassifier(*args))

    def Perform(self, *args):
        """
        * Classify the point P with the tolerance Tol on the solid S.

        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidClassifier_Perform(self, *args)


    def PerformInfinitePoint(self, *args):
        """
        * Classify an infinite point with the tolerance Tol on the solid S. Useful for compute the orientation of a solid.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidClassifier_PerformInfinitePoint(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepClass3d.BRepClass3d_SolidClassifier_Destroy(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepClass3d_SolidClassifier.Load = new_instancemethod(_BRepClass3d.BRepClass3d_SolidClassifier_Load, None, BRepClass3d_SolidClassifier)
BRepClass3d_SolidClassifier.Perform = new_instancemethod(_BRepClass3d.BRepClass3d_SolidClassifier_Perform, None, BRepClass3d_SolidClassifier)
BRepClass3d_SolidClassifier.PerformInfinitePoint = new_instancemethod(_BRepClass3d.BRepClass3d_SolidClassifier_PerformInfinitePoint, None, BRepClass3d_SolidClassifier)
BRepClass3d_SolidClassifier.Destroy = new_instancemethod(_BRepClass3d.BRepClass3d_SolidClassifier_Destroy, None, BRepClass3d_SolidClassifier)
BRepClass3d_SolidClassifier._kill_pointed = new_instancemethod(_BRepClass3d.BRepClass3d_SolidClassifier__kill_pointed, None, BRepClass3d_SolidClassifier)
BRepClass3d_SolidClassifier_swigregister = _BRepClass3d.BRepClass3d_SolidClassifier_swigregister
BRepClass3d_SolidClassifier_swigregister(BRepClass3d_SolidClassifier)



