# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Plate.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Plate', [dirname(__file__)])
        except ImportError:
            import _Plate
            return _Plate
        if fp is not None:
            try:
                _mod = imp.load_module('_Plate', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Plate = swig_import_helper()
    del swig_import_helper
else:
    import _Plate
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Plate.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Plate.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Plate.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Plate.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Plate.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Plate.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Plate.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Plate.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Plate.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Plate.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Plate.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Plate.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Plate.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Plate.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Plate.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Plate.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Plate.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Plate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.gp
import OCC.TColgp
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
class Plate_Array1OfPinpointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Plate_PinpointConstraint &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Plate.Plate_Array1OfPinpointConstraint_swiginit(self, _Plate.new_Plate_Array1OfPinpointConstraint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Plate.Plate_Array1OfPinpointConstraint_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Plate_Array1OfPinpointConstraint &
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Plate_Array1OfPinpointConstraint &
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_Array1OfPinpointConstraint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_Array1OfPinpointConstraint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_Array1OfPinpointConstraint_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_Array1OfPinpointConstraint.Init = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Init, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Destroy = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Destroy, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.IsAllocated = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_IsAllocated, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Assign = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Assign, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Set = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Set, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Length = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Length, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Lower = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Lower, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Upper = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Upper, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.SetValue = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_SetValue, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Value, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.ChangeValue = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_ChangeValue, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint__kill_pointed, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint_swigregister = _Plate.Plate_Array1OfPinpointConstraint_swigregister
Plate_Array1OfPinpointConstraint_swigregister(Plate_Array1OfPinpointConstraint)

class Plate_D1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param du:
        :type du: gp_XYZ
        :param dv:
        :type dv: gp_XYZ
        :rtype: None

        :param ref:
        :type ref: Plate_D1 &
        :rtype: None

        """
        _Plate.Plate_D1_swiginit(self, _Plate.new_Plate_D1(*args))

    def DU(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Plate.Plate_D1_DU(self, *args)


    def DV(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Plate.Plate_D1_DV(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_D1.DU = new_instancemethod(_Plate.Plate_D1_DU, None, Plate_D1)
Plate_D1.DV = new_instancemethod(_Plate.Plate_D1_DV, None, Plate_D1)
Plate_D1._kill_pointed = new_instancemethod(_Plate.Plate_D1__kill_pointed, None, Plate_D1)
Plate_D1_swigregister = _Plate.Plate_D1_swigregister
Plate_D1_swigregister(Plate_D1)

class Plate_D2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param duu:
        :type duu: gp_XYZ
        :param duv:
        :type duv: gp_XYZ
        :param dvv:
        :type dvv: gp_XYZ
        :rtype: None

        :param ref:
        :type ref: Plate_D2 &
        :rtype: None

        """
        _Plate.Plate_D2_swiginit(self, _Plate.new_Plate_D2(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_D2._kill_pointed = new_instancemethod(_Plate.Plate_D2__kill_pointed, None, Plate_D2)
Plate_D2_swigregister = _Plate.Plate_D2_swigregister
Plate_D2_swigregister(Plate_D2)

class Plate_D3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param duuu:
        :type duuu: gp_XYZ
        :param duuv:
        :type duuv: gp_XYZ
        :param duvv:
        :type duvv: gp_XYZ
        :param dvvv:
        :type dvvv: gp_XYZ
        :rtype: None

        :param ref:
        :type ref: Plate_D3 &
        :rtype: None

        """
        _Plate.Plate_D3_swiginit(self, _Plate.new_Plate_D3(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_D3._kill_pointed = new_instancemethod(_Plate.Plate_D3__kill_pointed, None, Plate_D3)
Plate_D3_swigregister = _Plate.Plate_D3_swigregister
Plate_D3_swigregister(Plate_D3)

class Plate_FreeGtoCConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param IncrementalLoad: default value is 1.0
        :type IncrementalLoad: float
        :param orientation: default value is 0
        :type orientation: int
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :param IncrementalLoad: default value is 1.0
        :type IncrementalLoad: float
        :param orientation: default value is 0
        :type orientation: int
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :param D3S:
        :type D3S: Plate_D3 &
        :param D3T:
        :type D3T: Plate_D3 &
        :param IncrementalLoad: default value is 1.0
        :type IncrementalLoad: float
        :param orientation: default value is 0
        :type orientation: int
        :rtype: None

        """
        _Plate.Plate_FreeGtoCConstraint_swiginit(self, _Plate.new_Plate_FreeGtoCConstraint(*args))

    def nb_PPC(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_PPC(self, *args)


    def GetPPC(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_FreeGtoCConstraint_GetPPC(self, *args)


    def nb_LSC(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_LSC(self, *args)


    def LSC(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_FreeGtoCConstraint_LSC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_FreeGtoCConstraint.nb_PPC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_nb_PPC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.GetPPC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_GetPPC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.nb_LSC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_nb_LSC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.LSC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_LSC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint._kill_pointed = new_instancemethod(_Plate.Plate_FreeGtoCConstraint__kill_pointed, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint_swigregister = _Plate.Plate_FreeGtoCConstraint_swigregister
Plate_FreeGtoCConstraint_swigregister(Plate_FreeGtoCConstraint)

class Plate_GlobalTranslationConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SOfXY:
        :type SOfXY: TColgp_SequenceOfXY
        :rtype: None

        """
        _Plate.Plate_GlobalTranslationConstraint_swiginit(self, _Plate.new_Plate_GlobalTranslationConstraint(*args))

    def LXYZC(self, *args):
        """
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_GlobalTranslationConstraint_LXYZC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_GlobalTranslationConstraint.LXYZC = new_instancemethod(_Plate.Plate_GlobalTranslationConstraint_LXYZC, None, Plate_GlobalTranslationConstraint)
Plate_GlobalTranslationConstraint._kill_pointed = new_instancemethod(_Plate.Plate_GlobalTranslationConstraint__kill_pointed, None, Plate_GlobalTranslationConstraint)
Plate_GlobalTranslationConstraint_swigregister = _Plate.Plate_GlobalTranslationConstraint_swigregister
Plate_GlobalTranslationConstraint_swigregister(Plate_GlobalTranslationConstraint)

class Plate_GtoCConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param ref:
        :type ref: Plate_GtoCConstraint &
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param nP:
        :type nP: gp_XYZ
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :param nP:
        :type nP: gp_XYZ
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :param D3S:
        :type D3S: Plate_D3 &
        :param D3T:
        :type D3T: Plate_D3 &
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param D1S:
        :type D1S: Plate_D1 &
        :param D1T:
        :type D1T: Plate_D1 &
        :param D2S:
        :type D2S: Plate_D2 &
        :param D2T:
        :type D2T: Plate_D2 &
        :param D3S:
        :type D3S: Plate_D3 &
        :param D3T:
        :type D3T: Plate_D3 &
        :param nP:
        :type nP: gp_XYZ
        :rtype: None

        """
        _Plate.Plate_GtoCConstraint_swiginit(self, _Plate.new_Plate_GtoCConstraint(*args))

    def nb_PPC(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_GtoCConstraint_nb_PPC(self, *args)


    def GetPPC(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_GtoCConstraint_GetPPC(self, *args)


    def D1SurfInit(self, *args):
        """
        :rtype: Plate_D1

        """
        return _Plate.Plate_GtoCConstraint_D1SurfInit(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_GtoCConstraint.nb_PPC = new_instancemethod(_Plate.Plate_GtoCConstraint_nb_PPC, None, Plate_GtoCConstraint)
Plate_GtoCConstraint.GetPPC = new_instancemethod(_Plate.Plate_GtoCConstraint_GetPPC, None, Plate_GtoCConstraint)
Plate_GtoCConstraint.D1SurfInit = new_instancemethod(_Plate.Plate_GtoCConstraint_D1SurfInit, None, Plate_GtoCConstraint)
Plate_GtoCConstraint._kill_pointed = new_instancemethod(_Plate.Plate_GtoCConstraint__kill_pointed, None, Plate_GtoCConstraint)
Plate_GtoCConstraint_swigregister = _Plate.Plate_GtoCConstraint_swigregister
Plate_GtoCConstraint_swigregister(Plate_GtoCConstraint)

class Plate_HArray1OfPinpointConstraint(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Plate_PinpointConstraint &
        :rtype: None

        """
        _Plate.Plate_HArray1OfPinpointConstraint_swiginit(self, _Plate.new_Plate_HArray1OfPinpointConstraint(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_HArray1OfPinpointConstraint_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Plate_HArray1OfPinpointConstraint self)"""
        return _Plate.Plate_HArray1OfPinpointConstraint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Plate_HArray1OfPinpointConstraint self) -> Handle_Plate_HArray1OfPinpointConstraint"""
        return _Plate.Plate_HArray1OfPinpointConstraint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_HArray1OfPinpointConstraint.Init = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Init, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.Length = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Length, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.Lower = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Lower, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.Upper = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Upper, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.SetValue = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_SetValue, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Value, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.ChangeValue = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_ChangeValue, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.Array1 = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Array1, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.ChangeArray1 = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_ChangeArray1, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint__kill_pointed, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.GetHandle = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_GetHandle, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Plate_HArray1OfPinpointConstraint_swigregister
Plate_HArray1OfPinpointConstraint_swigregister(Plate_HArray1OfPinpointConstraint)

class Handle_Plate_HArray1OfPinpointConstraint(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Handle_Plate_HArray1OfPinpointConstraint_swiginit(self, _Plate.new_Handle_Plate_HArray1OfPinpointConstraint(*args))
    DownCast = staticmethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Plate_HArray1OfPinpointConstraint.Nullify = new_instancemethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint_Nullify, None, Handle_Plate_HArray1OfPinpointConstraint)
Handle_Plate_HArray1OfPinpointConstraint.IsNull = new_instancemethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull, None, Handle_Plate_HArray1OfPinpointConstraint)
Handle_Plate_HArray1OfPinpointConstraint.GetObject = new_instancemethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint_GetObject, None, Handle_Plate_HArray1OfPinpointConstraint)
Handle_Plate_HArray1OfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Handle_Plate_HArray1OfPinpointConstraint__kill_pointed, None, Handle_Plate_HArray1OfPinpointConstraint)
Handle_Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Handle_Plate_HArray1OfPinpointConstraint_swigregister
Handle_Plate_HArray1OfPinpointConstraint_swigregister(Handle_Plate_HArray1OfPinpointConstraint)

def Handle_Plate_HArray1OfPinpointConstraint_DownCast(AnObject):
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast(AnObject)
Handle_Plate_HArray1OfPinpointConstraint_DownCast = _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast

class Plate_LineConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param point2d:
        :type point2d: gp_XY
        :param lin:
        :type lin: gp_Lin
        :param iu: default value is 0
        :type iu: int
        :param iv: default value is 0
        :type iv: int
        :rtype: None

        """
        _Plate.Plate_LineConstraint_swiginit(self, _Plate.new_Plate_LineConstraint(*args))

    def LSC(self, *args):
        """
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_LineConstraint_LSC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_LineConstraint.LSC = new_instancemethod(_Plate.Plate_LineConstraint_LSC, None, Plate_LineConstraint)
Plate_LineConstraint._kill_pointed = new_instancemethod(_Plate.Plate_LineConstraint__kill_pointed, None, Plate_LineConstraint)
Plate_LineConstraint_swigregister = _Plate.Plate_LineConstraint_swigregister
Plate_LineConstraint_swigregister(Plate_LineConstraint)

class Plate_LinearScalarConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param PPC1:
        :type PPC1: Plate_PinpointConstraint &
        :param coeff:
        :type coeff: gp_XYZ
        :rtype: None

        :param ppc:
        :type ppc: Plate_Array1OfPinpointConstraint &
        :param coeff:
        :type coeff: TColgp_Array1OfXYZ
        :rtype: None

        :param ppc:
        :type ppc: Plate_Array1OfPinpointConstraint &
        :param coeff:
        :type coeff: TColgp_Array2OfXYZ
        :rtype: None

        :param ColLen:
        :type ColLen: int
        :param RowLen:
        :type RowLen: int
        :rtype: None

        """
        _Plate.Plate_LinearScalarConstraint_swiginit(self, _Plate.new_Plate_LinearScalarConstraint(*args))

    def GetPPC(self, *args):
        """
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_LinearScalarConstraint_GetPPC(self, *args)


    def Coeff(self, *args):
        """
        :rtype: TColgp_Array2OfXYZ

        """
        return _Plate.Plate_LinearScalarConstraint_Coeff(self, *args)


    def SetPPC(self, *args):
        """
        * Sets the PinPointConstraint of index Index to Value raise if Index is greater than the length of ppc or the Row length of coeff or lower than 1

        :param Index:
        :type Index: int
        :param Value:
        :type Value: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_LinearScalarConstraint_SetPPC(self, *args)


    def SetCoeff(self, *args):
        """
        * Sets the coeff of index (Row,Col) to Value raise if Row (respectively Col) is greater than the Row (respectively Column) length of coeff

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: gp_XYZ
        :rtype: None

        """
        return _Plate.Plate_LinearScalarConstraint_SetCoeff(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_LinearScalarConstraint.GetPPC = new_instancemethod(_Plate.Plate_LinearScalarConstraint_GetPPC, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.Coeff = new_instancemethod(_Plate.Plate_LinearScalarConstraint_Coeff, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.SetPPC = new_instancemethod(_Plate.Plate_LinearScalarConstraint_SetPPC, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.SetCoeff = new_instancemethod(_Plate.Plate_LinearScalarConstraint_SetCoeff, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint._kill_pointed = new_instancemethod(_Plate.Plate_LinearScalarConstraint__kill_pointed, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint_swigregister = _Plate.Plate_LinearScalarConstraint_swigregister
Plate_LinearScalarConstraint_swigregister(Plate_LinearScalarConstraint)

class Plate_LinearXYZConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param ppc:
        :type ppc: Plate_Array1OfPinpointConstraint &
        :param coeff:
        :type coeff: TColStd_Array1OfReal &
        :rtype: None

        :param ppc:
        :type ppc: Plate_Array1OfPinpointConstraint &
        :param coeff:
        :type coeff: TColStd_Array2OfReal &
        :rtype: None

        :param ColLen:
        :type ColLen: int
        :param RowLen:
        :type RowLen: int
        :rtype: None

        """
        _Plate.Plate_LinearXYZConstraint_swiginit(self, _Plate.new_Plate_LinearXYZConstraint(*args))

    def GetPPC(self, *args):
        """
        :rtype: Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_LinearXYZConstraint_GetPPC(self, *args)


    def Coeff(self, *args):
        """
        :rtype: TColStd_Array2OfReal

        """
        return _Plate.Plate_LinearXYZConstraint_Coeff(self, *args)


    def SetPPC(self, *args):
        """
        * Sets the PinPointConstraint of index Index to Value raise if Index is greater than the length of ppc or the Row length of coeff or lower than 1

        :param Index:
        :type Index: int
        :param Value:
        :type Value: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_LinearXYZConstraint_SetPPC(self, *args)


    def SetCoeff(self, *args):
        """
        * Sets the coeff of index (Row,Col) to Value raise if Row (respectively Col) is greater than the Row (respectively Column) length of coeff

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _Plate.Plate_LinearXYZConstraint_SetCoeff(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_LinearXYZConstraint.GetPPC = new_instancemethod(_Plate.Plate_LinearXYZConstraint_GetPPC, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.Coeff = new_instancemethod(_Plate.Plate_LinearXYZConstraint_Coeff, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.SetPPC = new_instancemethod(_Plate.Plate_LinearXYZConstraint_SetPPC, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.SetCoeff = new_instancemethod(_Plate.Plate_LinearXYZConstraint_SetCoeff, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint._kill_pointed = new_instancemethod(_Plate.Plate_LinearXYZConstraint__kill_pointed, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint_swigregister = _Plate.Plate_LinearXYZConstraint_swigregister
Plate_LinearXYZConstraint_swigregister(Plate_LinearXYZConstraint)

class Plate_PinpointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param point2d:
        :type point2d: gp_XY
        :param ImposedValue:
        :type ImposedValue: gp_XYZ
        :param iu: default value is 0
        :type iu: int
        :param iv: default value is 0
        :type iv: int
        :rtype: None

        """
        _Plate.Plate_PinpointConstraint_swiginit(self, _Plate.new_Plate_PinpointConstraint(*args))

    def Pnt2d(self, *args):
        """
        :rtype: gp_XY

        """
        return _Plate.Plate_PinpointConstraint_Pnt2d(self, *args)


    def Idu(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_PinpointConstraint_Idu(self, *args)


    def Idv(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_PinpointConstraint_Idv(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Plate.Plate_PinpointConstraint_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_PinpointConstraint.Pnt2d = new_instancemethod(_Plate.Plate_PinpointConstraint_Pnt2d, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Idu = new_instancemethod(_Plate.Plate_PinpointConstraint_Idu, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Idv = new_instancemethod(_Plate.Plate_PinpointConstraint_Idv, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Value = new_instancemethod(_Plate.Plate_PinpointConstraint_Value, None, Plate_PinpointConstraint)
Plate_PinpointConstraint._kill_pointed = new_instancemethod(_Plate.Plate_PinpointConstraint__kill_pointed, None, Plate_PinpointConstraint)
Plate_PinpointConstraint_swigregister = _Plate.Plate_PinpointConstraint_swigregister
Plate_PinpointConstraint_swigregister(Plate_PinpointConstraint)

class Plate_PlaneConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param point2d:
        :type point2d: gp_XY
        :param pln:
        :type pln: gp_Pln
        :param iu: default value is 0
        :type iu: int
        :param iv: default value is 0
        :type iv: int
        :rtype: None

        """
        _Plate.Plate_PlaneConstraint_swiginit(self, _Plate.new_Plate_PlaneConstraint(*args))

    def LSC(self, *args):
        """
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_PlaneConstraint_LSC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_PlaneConstraint.LSC = new_instancemethod(_Plate.Plate_PlaneConstraint_LSC, None, Plate_PlaneConstraint)
Plate_PlaneConstraint._kill_pointed = new_instancemethod(_Plate.Plate_PlaneConstraint__kill_pointed, None, Plate_PlaneConstraint)
Plate_PlaneConstraint_swigregister = _Plate.Plate_PlaneConstraint_swigregister
Plate_PlaneConstraint_swigregister(Plate_PlaneConstraint)

class Plate_Plate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Ref:
        :type Ref: Plate_Plate &
        :rtype: None

        """
        _Plate.Plate_Plate_swiginit(self, _Plate.new_Plate_Plate(*args))

    def Copy(self, *args):
        """
        :param Ref:
        :type Ref: Plate_Plate &
        :rtype: Plate_Plate

        """
        return _Plate.Plate_Plate_Copy(self, *args)


    def Set(self, *args):
        """
        :param Ref:
        :type Ref: Plate_Plate &
        :rtype: Plate_Plate

        """
        return _Plate.Plate_Plate_Set(self, *args)


    def Load(self, *args):
        """
        :param PConst:
        :type PConst: Plate_PinpointConstraint &
        :rtype: None

        :param LXYZConst:
        :type LXYZConst: Plate_LinearXYZConstraint &
        :rtype: None

        :param LScalarConst:
        :type LScalarConst: Plate_LinearScalarConstraint &
        :rtype: None

        :param GTConst:
        :type GTConst: Plate_GlobalTranslationConstraint &
        :rtype: None

        :param LConst:
        :type LConst: Plate_LineConstraint &
        :rtype: None

        :param PConst:
        :type PConst: Plate_PlaneConstraint &
        :rtype: None

        :param SCConst:
        :type SCConst: Plate_SampledCurveConstraint &
        :rtype: None

        :param GtoCConst:
        :type GtoCConst: Plate_GtoCConstraint &
        :rtype: None

        :param FGtoCConst:
        :type FGtoCConst: Plate_FreeGtoCConstraint &
        :rtype: None

        """
        return _Plate.Plate_Plate_Load(self, *args)


    def SolveTI(self, *args):
        """
        :param ord: default value is 4
        :type ord: int
        :param anisotropie: default value is 1.0
        :type anisotropie: float
        :rtype: None

        """
        return _Plate.Plate_Plate_SolveTI(self, *args)


    def IsDone(self, *args):
        """
        * returns True if all has been correctly done.

        :rtype: bool

        """
        return _Plate.Plate_Plate_IsDone(self, *args)


    def destroy(self, *args):
        """
        :rtype: None

        """
        return _Plate.Plate_Plate_destroy(self, *args)


    def Init(self, *args):
        """
        * reset the Plate in the initial state ( same as after Create())

        :rtype: None

        """
        return _Plate.Plate_Plate_Init(self, *args)


    def Evaluate(self, *args):
        """
        :param point2d:
        :type point2d: gp_XY
        :rtype: gp_XYZ

        """
        return _Plate.Plate_Plate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args):
        """
        :param point2d:
        :type point2d: gp_XY
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: gp_XYZ

        """
        return _Plate.Plate_Plate_EvaluateDerivative(self, *args)


    def CoefPol(self, *args):
        """
        :param Coefs:
        :type Coefs: Handle_TColgp_HArray2OfXYZ
        :rtype: None

        """
        return _Plate.Plate_Plate_CoefPol(self, *args)


    def SetPolynomialPartOnly(self, *args):
        """
        :param PPOnly: default value is Standard_True
        :type PPOnly: bool
        :rtype: None

        """
        return _Plate.Plate_Plate_SetPolynomialPartOnly(self, *args)


    def Continuity(self, *args):
        """
        :rtype: int

        """
        return _Plate.Plate_Plate_Continuity(self, *args)


    def UVBox(self, *args):
        """
        :param UMin:
        :type UMin: float &
        :param UMax:
        :type UMax: float &
        :param VMin:
        :type VMin: float &
        :param VMax:
        :type VMax: float &
        :rtype: None

        """
        return _Plate.Plate_Plate_UVBox(self, *args)


    def UVConstraints(self, *args):
        """
        :param Seq:
        :type Seq: TColgp_SequenceOfXY
        :rtype: None

        """
        return _Plate.Plate_Plate_UVConstraints(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_Plate.Copy = new_instancemethod(_Plate.Plate_Plate_Copy, None, Plate_Plate)
Plate_Plate.Set = new_instancemethod(_Plate.Plate_Plate_Set, None, Plate_Plate)
Plate_Plate.Load = new_instancemethod(_Plate.Plate_Plate_Load, None, Plate_Plate)
Plate_Plate.SolveTI = new_instancemethod(_Plate.Plate_Plate_SolveTI, None, Plate_Plate)
Plate_Plate.IsDone = new_instancemethod(_Plate.Plate_Plate_IsDone, None, Plate_Plate)
Plate_Plate.destroy = new_instancemethod(_Plate.Plate_Plate_destroy, None, Plate_Plate)
Plate_Plate.Init = new_instancemethod(_Plate.Plate_Plate_Init, None, Plate_Plate)
Plate_Plate.Evaluate = new_instancemethod(_Plate.Plate_Plate_Evaluate, None, Plate_Plate)
Plate_Plate.EvaluateDerivative = new_instancemethod(_Plate.Plate_Plate_EvaluateDerivative, None, Plate_Plate)
Plate_Plate.CoefPol = new_instancemethod(_Plate.Plate_Plate_CoefPol, None, Plate_Plate)
Plate_Plate.SetPolynomialPartOnly = new_instancemethod(_Plate.Plate_Plate_SetPolynomialPartOnly, None, Plate_Plate)
Plate_Plate.Continuity = new_instancemethod(_Plate.Plate_Plate_Continuity, None, Plate_Plate)
Plate_Plate.UVBox = new_instancemethod(_Plate.Plate_Plate_UVBox, None, Plate_Plate)
Plate_Plate.UVConstraints = new_instancemethod(_Plate.Plate_Plate_UVConstraints, None, Plate_Plate)
Plate_Plate._kill_pointed = new_instancemethod(_Plate.Plate_Plate__kill_pointed, None, Plate_Plate)
Plate_Plate_swigregister = _Plate.Plate_Plate_swigregister
Plate_Plate_swigregister(Plate_Plate)

class Plate_SampledCurveConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SOPPC:
        :type SOPPC: Plate_SequenceOfPinpointConstraint &
        :param n:
        :type n: int
        :rtype: None

        """
        _Plate.Plate_SampledCurveConstraint_swiginit(self, _Plate.new_Plate_SampledCurveConstraint(*args))

    def LXYZC(self, *args):
        """
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SampledCurveConstraint_LXYZC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SampledCurveConstraint.LXYZC = new_instancemethod(_Plate.Plate_SampledCurveConstraint_LXYZC, None, Plate_SampledCurveConstraint)
Plate_SampledCurveConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SampledCurveConstraint__kill_pointed, None, Plate_SampledCurveConstraint)
Plate_SampledCurveConstraint_swigregister = _Plate.Plate_SampledCurveConstraint_swigregister
Plate_SampledCurveConstraint_swigregister(Plate_SampledCurveConstraint)

class Plate_SequenceNodeOfSequenceOfLinearScalarConstraint(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Plate_LinearScalarConstraint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swiginit(self, _Plate.new_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint(*args))

    def Value(self, *args):
        """
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Plate_SequenceNodeOfSequenceOfLinearScalarConstraint self)"""
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Plate_SequenceNodeOfSequenceOfLinearScalarConstraint self) -> Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint"""
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceNodeOfSequenceOfLinearScalarConstraint.Value = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_Value, None, Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Plate_SequenceNodeOfSequenceOfLinearScalarConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint__kill_pointed, None, Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Plate_SequenceNodeOfSequenceOfLinearScalarConstraint.GetHandle = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_GetHandle, None, Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister = _Plate.Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister
Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister(Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)

class Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swiginit(self, _Plate.new_Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint(*args))
    DownCast = staticmethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint.Nullify = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_Nullify, None, Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint.IsNull = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_IsNull, None, Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint.GetObject = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_GetObject, None, Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint._kill_pointed = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint__kill_pointed, None, Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister = _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_swigregister(Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint)

def Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_DownCast(AnObject):
    return _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_DownCast(AnObject)
Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_DownCast = _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearScalarConstraint_DownCast

class Plate_SequenceNodeOfSequenceOfLinearXYZConstraint(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Plate_LinearXYZConstraint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swiginit(self, _Plate.new_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint(*args))

    def Value(self, *args):
        """
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Plate_SequenceNodeOfSequenceOfLinearXYZConstraint self)"""
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Plate_SequenceNodeOfSequenceOfLinearXYZConstraint self) -> Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint"""
        return _Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceNodeOfSequenceOfLinearXYZConstraint.Value = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_Value, None, Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Plate_SequenceNodeOfSequenceOfLinearXYZConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint__kill_pointed, None, Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Plate_SequenceNodeOfSequenceOfLinearXYZConstraint.GetHandle = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_GetHandle, None, Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister = _Plate.Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister
Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister(Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)

class Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swiginit(self, _Plate.new_Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint(*args))
    DownCast = staticmethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint.Nullify = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_Nullify, None, Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint.IsNull = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_IsNull, None, Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint.GetObject = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_GetObject, None, Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint._kill_pointed = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint__kill_pointed, None, Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister = _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_swigregister(Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint)

def Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_DownCast(AnObject):
    return _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_DownCast(AnObject)
Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_DownCast = _Plate.Handle_Plate_SequenceNodeOfSequenceOfLinearXYZConstraint_DownCast

class Plate_SequenceNodeOfSequenceOfPinpointConstraint(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Plate_PinpointConstraint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_swiginit(self, _Plate.new_Plate_SequenceNodeOfSequenceOfPinpointConstraint(*args))

    def Value(self, *args):
        """
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Plate_SequenceNodeOfSequenceOfPinpointConstraint self)"""
        return _Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Plate_SequenceNodeOfSequenceOfPinpointConstraint self) -> Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint"""
        return _Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceNodeOfSequenceOfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_Value, None, Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Plate_SequenceNodeOfSequenceOfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint__kill_pointed, None, Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Plate_SequenceNodeOfSequenceOfPinpointConstraint.GetHandle = new_instancemethod(_Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_GetHandle, None, Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister = _Plate.Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister
Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister(Plate_SequenceNodeOfSequenceOfPinpointConstraint)

class Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_swiginit(self, _Plate.new_Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint(*args))
    DownCast = staticmethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint.Nullify = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_Nullify, None, Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint.IsNull = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_IsNull, None, Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint.GetObject = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_GetObject, None, Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint__kill_pointed, None, Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint)
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister = _Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_swigregister(Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint)

def Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_DownCast(AnObject):
    return _Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_DownCast(AnObject)
Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_DownCast = _Plate.Handle_Plate_SequenceNodeOfSequenceOfPinpointConstraint_DownCast

class Plate_SequenceOfLinearScalarConstraint(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Plate.Plate_SequenceOfLinearScalarConstraint_swiginit(self, _Plate.new_Plate_SequenceOfLinearScalarConstraint(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfLinearScalarConstraint &
        :rtype: Plate_SequenceOfLinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfLinearScalarConstraint &
        :rtype: Plate_SequenceOfLinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Plate_LinearScalarConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfLinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Plate_LinearScalarConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfLinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_LinearScalarConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfLinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_LinearScalarConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfLinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Plate_SequenceOfLinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Plate_LinearScalarConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_LinearScalarConstraint

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceOfLinearScalarConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Clear, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Assign, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Set, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Append, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Prepend, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_InsertBefore, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_InsertAfter, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_First, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Last, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Split, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Value, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_SetValue, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_ChangeValue, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Remove, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint__kill_pointed, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint_swigregister = _Plate.Plate_SequenceOfLinearScalarConstraint_swigregister
Plate_SequenceOfLinearScalarConstraint_swigregister(Plate_SequenceOfLinearScalarConstraint)

class Plate_SequenceOfLinearXYZConstraint(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Plate.Plate_SequenceOfLinearXYZConstraint_swiginit(self, _Plate.new_Plate_SequenceOfLinearXYZConstraint(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfLinearXYZConstraint &
        :rtype: Plate_SequenceOfLinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfLinearXYZConstraint &
        :rtype: Plate_SequenceOfLinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Plate_LinearXYZConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfLinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Plate_LinearXYZConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfLinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_LinearXYZConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfLinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_LinearXYZConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfLinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Plate_SequenceOfLinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Plate_LinearXYZConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceOfLinearXYZConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Clear, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Assign, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Set, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Append, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Prepend, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_InsertBefore, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_InsertAfter, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_First, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Last, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Split, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Value, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_SetValue, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_ChangeValue, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Remove, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint__kill_pointed, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint_swigregister = _Plate.Plate_SequenceOfLinearXYZConstraint_swigregister
Plate_SequenceOfLinearXYZConstraint_swigregister(Plate_SequenceOfLinearXYZConstraint)

class Plate_SequenceOfPinpointConstraint(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Plate.Plate_SequenceOfPinpointConstraint_swiginit(self, _Plate.new_Plate_SequenceOfPinpointConstraint(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfPinpointConstraint &
        :rtype: Plate_SequenceOfPinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Plate_SequenceOfPinpointConstraint &
        :rtype: Plate_SequenceOfPinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Plate_PinpointConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfPinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Plate_PinpointConstraint &
        :rtype: None

        :param S:
        :type S: Plate_SequenceOfPinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_PinpointConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfPinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Plate_PinpointConstraint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Plate_SequenceOfPinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Plate_SequenceOfPinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Plate_PinpointConstraint &
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Plate_PinpointConstraint

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Plate.Plate_SequenceOfPinpointConstraint_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Plate_SequenceOfPinpointConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Clear, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Assign, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Set, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Append, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Prepend, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_InsertBefore, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_InsertAfter, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_First, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Last, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Split, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Value, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_SetValue, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_ChangeValue, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Remove, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint._kill_pointed = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint__kill_pointed, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint_swigregister = _Plate.Plate_SequenceOfPinpointConstraint_swigregister
Plate_SequenceOfPinpointConstraint_swigregister(Plate_SequenceOfPinpointConstraint)



