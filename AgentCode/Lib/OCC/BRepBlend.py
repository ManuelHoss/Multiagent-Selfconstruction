# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepBlend.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepBlend', [dirname(__file__)])
        except ImportError:
            import _BRepBlend
            return _BRepBlend
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepBlend', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepBlend = swig_import_helper()
    del swig_import_helper
else:
    import _BRepBlend
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepBlend.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepBlend.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepBlend.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepBlend.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepBlend.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepBlend.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepBlend.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepBlend.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepBlend.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepBlend.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepBlend.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepBlend.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepBlend.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepBlend.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepBlend.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepBlend.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepBlend.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepBlend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Approx
import OCC.Standard
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
import OCC.AppCont
import OCC.AppParCurves
import OCC.Blend
import OCC.AppBlend
import OCC.IntSurf
import OCC.BlendFunc
import OCC.Law
class BRepBlend_AppFuncRoot(OCC.Approx.Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Point(self, *args):
        """
        :param Func:
        :type Func: Blend_AppFunction &
        :param Param:
        :type Param: float
        :param Sol:
        :type Sol: math_Vector &
        :param Pnt:
        :type Pnt: Blend_Point &
        :rtype: void

        """
        return _BRepBlend.BRepBlend_AppFuncRoot_Point(self, *args)


    def Vec(self, *args):
        """
        :param Sol:
        :type Sol: math_Vector &
        :param Pnt:
        :type Pnt: Blend_Point &
        :rtype: void

        """
        return _BRepBlend.BRepBlend_AppFuncRoot_Vec(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_AppFuncRoot self)"""
        return _BRepBlend.BRepBlend_AppFuncRoot__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_AppFuncRoot self) -> Handle_BRepBlend_AppFuncRoot"""
        return _BRepBlend.BRepBlend_AppFuncRoot_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppFuncRoot.Point = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot_Point, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot.Vec = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot_Vec, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot__kill_pointed, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot_GetHandle, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot_swigregister = _BRepBlend.BRepBlend_AppFuncRoot_swigregister
BRepBlend_AppFuncRoot_swigregister(BRepBlend_AppFuncRoot)

class Handle_BRepBlend_AppFuncRoot(OCC.Approx.Handle_Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_AppFuncRoot_swiginit(self, _BRepBlend.new_Handle_BRepBlend_AppFuncRoot(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_AppFuncRoot_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_AppFuncRoot.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRoot_Nullify, None, Handle_BRepBlend_AppFuncRoot)
Handle_BRepBlend_AppFuncRoot.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRoot_IsNull, None, Handle_BRepBlend_AppFuncRoot)
Handle_BRepBlend_AppFuncRoot.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRoot_GetObject, None, Handle_BRepBlend_AppFuncRoot)
Handle_BRepBlend_AppFuncRoot._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRoot__kill_pointed, None, Handle_BRepBlend_AppFuncRoot)
Handle_BRepBlend_AppFuncRoot_swigregister = _BRepBlend.Handle_BRepBlend_AppFuncRoot_swigregister
Handle_BRepBlend_AppFuncRoot_swigregister(Handle_BRepBlend_AppFuncRoot)

def Handle_BRepBlend_AppFuncRoot_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_AppFuncRoot_DownCast(AnObject)
Handle_BRepBlend_AppFuncRoot_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRoot_DownCast

class BRepBlend_AppSurf(OCC.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        _BRepBlend.BRepBlend_AppSurf_swiginit(self, _BRepBlend.new_BRepBlend_AppSurf(*args))

    def Init(self, *args):
        """
        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_Init(self, *args)


    def SetParType(self, *args):
        """
        :param ParType:
        :type ParType: Approx_ParametrizationType
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_SetParType(self, *args)


    def SetContinuity(self, *args):
        """
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_SetContinuity(self, *args)


    def SetCriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float
        :param W2:
        :type W2: float
        :param W3:
        :type W3: float
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_SetCriteriumWeight(self, *args)


    def ParType(self, *args):
        """
        :rtype: Approx_ParametrizationType

        """
        return _BRepBlend.BRepBlend_AppSurf_ParType(self, *args)


    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _BRepBlend.BRepBlend_AppSurf_Continuity(self, *args)


    def CriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float &
        :param W2:
        :type W2: float &
        :param W3:
        :type W3: float &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_CriteriumWeight(self, *args)


    def PerformSmoothing(self, *args):
        """
        :param Lin:
        :type Lin: Handle_BRepBlend_Line &
        :param SecGen:
        :type SecGen: Blend_AppFunction &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_PerformSmoothing(self, *args)


    def Perform(self, *args):
        """
        :param Lin:
        :type Lin: Handle_BRepBlend_Line &
        :param SecGen:
        :type SecGen: Blend_AppFunction &
        :param SpApprox: default value is Standard_False
        :type SpApprox: bool
        :rtype: None

        :param Lin:
        :type Lin: Handle_BRepBlend_Line &
        :param SecGen:
        :type SecGen: Blend_AppFunction &
        :param NbMaxP:
        :type NbMaxP: int
        :rtype: None

        """
        return _BRepBlend.BRepBlend_AppSurf_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppSurf.Init = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Init, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetParType = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetParType, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetContinuity = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetContinuity, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetCriteriumWeight = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetCriteriumWeight, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.ParType = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_ParType, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.Continuity = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Continuity, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.CriteriumWeight = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_CriteriumWeight, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.PerformSmoothing = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_PerformSmoothing, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.Perform = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Perform, None, BRepBlend_AppSurf)
BRepBlend_AppSurf._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppSurf__kill_pointed, None, BRepBlend_AppSurf)
BRepBlend_AppSurf_swigregister = _BRepBlend.BRepBlend_AppSurf_swigregister
BRepBlend_AppSurf_swigregister(BRepBlend_AppSurf)

class BRepBlend_AppSurface(OCC.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Approximation of the new Surface (and eventually the 2d Curves on the support surfaces). Normaly the 2d curve are approximated with an tolerance given by the resolution on support surfaces, but if this tolerance is too large Tol2d is used.

        :param Funct:
        :type Funct: Handle_Approx_SweepFunction &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param TolAngular:
        :type TolAngular: float
        :param Continuity: default value is GeomAbs_C0
        :type Continuity: GeomAbs_Shape
        :param Degmax: default value is 11
        :type Degmax: int
        :param Segmax: default value is 50
        :type Segmax: int
        :rtype: None

        """
        _BRepBlend.BRepBlend_AppSurface_swiginit(self, _BRepBlend.new_BRepBlend_AppSurface(*args))

    def MaxErrorOnSurf(self, *args):
        """
        * returns the maximum error in the suface approximation.

        :rtype: float

        """
        return _BRepBlend.BRepBlend_AppSurface_MaxErrorOnSurf(self, *args)


    def Max2dError(self, *args):
        """
        * returns the maximum error in the <Index> 2d curve approximation.

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _BRepBlend.BRepBlend_AppSurface_Max2dError(self, *args)


    def DumpToString(self):
        """DumpToString(BRepBlend_AppSurface self) -> std::string"""
        return _BRepBlend.BRepBlend_AppSurface_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_AppSurface self)"""
        return _BRepBlend.BRepBlend_AppSurface__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppSurface.MaxErrorOnSurf = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_MaxErrorOnSurf, None, BRepBlend_AppSurface)
BRepBlend_AppSurface.Max2dError = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_Max2dError, None, BRepBlend_AppSurface)
BRepBlend_AppSurface.DumpToString = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_DumpToString, None, BRepBlend_AppSurface)
BRepBlend_AppSurface._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppSurface__kill_pointed, None, BRepBlend_AppSurface)
BRepBlend_AppSurface_swigregister = _BRepBlend.BRepBlend_AppSurface_swigregister
BRepBlend_AppSurface_swigregister(BRepBlend_AppSurface)

class BRepBlend_BlendTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Project(*args):
        """
        * Projects the point P on the arc C. If the methods returns Standard_True, the projection is successful, and Paramproj is the parameter on the arc of the projected point, Dist is the distance between P and the curve.. If the method returns Standard_False, Param proj and Dist are not significant.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Paramproj:
        :type Paramproj: float &
        :param Dist:
        :type Dist: float &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_Project(*args)

    Project = staticmethod(Project)

    def Inters(*args):
        """
        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Param:
        :type Param: float &
        :param Dist:
        :type Dist: float &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_Inters(*args)

    Inters = staticmethod(Inters)

    def Parameter(*args):
        """
        * Returns the parameter of the vertex V on the edge A.

        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_BlendTool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Tolerance(*args):
        """
        * Returns the parametric tolerance on the arc A used to consider that the vertex and another point meet, i-e if Abs(Parameter(Vertex)-Parameter(OtherPnt))<= Tolerance, the points are 'merged'.

        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_BlendTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def SingularOnUMin(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_SingularOnUMin(*args)

    SingularOnUMin = staticmethod(SingularOnUMin)

    def SingularOnUMax(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_SingularOnUMax(*args)

    SingularOnUMax = staticmethod(SingularOnUMax)

    def SingularOnVMin(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_SingularOnVMin(*args)

    SingularOnVMin = staticmethod(SingularOnVMin)

    def SingularOnVMax(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_BlendTool_SingularOnVMax(*args)

    SingularOnVMax = staticmethod(SingularOnVMax)

    def NbSamplesU(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :rtype: int

        """
        return _BRepBlend.BRepBlend_BlendTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param v1:
        :type v1: float
        :param v2:
        :type v2: float
        :rtype: int

        """
        return _BRepBlend.BRepBlend_BlendTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def Bounds(*args):
        """
        * Returns the parametric limits on the arc C. These limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.

        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Ufirst:
        :type Ufirst: float &
        :param Ulast:
        :type Ulast: float &
        :rtype: void

        """
        return _BRepBlend.BRepBlend_BlendTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def CurveOnSurf(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _BRepBlend.BRepBlend_BlendTool_CurveOnSurf(*args)

    CurveOnSurf = staticmethod(CurveOnSurf)

    def __init__(self):
        _BRepBlend.BRepBlend_BlendTool_swiginit(self, _BRepBlend.new_BRepBlend_BlendTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_BlendTool._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_BlendTool__kill_pointed, None, BRepBlend_BlendTool)
BRepBlend_BlendTool_swigregister = _BRepBlend.BRepBlend_BlendTool_swigregister
BRepBlend_BlendTool_swigregister(BRepBlend_BlendTool)

def BRepBlend_BlendTool_Project(*args):
    """
    * Projects the point P on the arc C. If the methods returns Standard_True, the projection is successful, and Paramproj is the parameter on the arc of the projected point, Dist is the distance between P and the curve.. If the method returns Standard_False, Param proj and Dist are not significant.

    :param P:
    :type P: gp_Pnt2d
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Paramproj:
    :type Paramproj: float &
    :param Dist:
    :type Dist: float &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_Project(*args)

def BRepBlend_BlendTool_Inters(*args):
    """
    :param P1:
    :type P1: gp_Pnt2d
    :param P2:
    :type P2: gp_Pnt2d
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Param:
    :type Param: float &
    :param Dist:
    :type Dist: float &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_Inters(*args)

def BRepBlend_BlendTool_Parameter(*args):
    """
    * Returns the parameter of the vertex V on the edge A.

    :param V:
    :type V: Handle_Adaptor3d_HVertex &
    :param A:
    :type A: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_BlendTool_Parameter(*args)

def BRepBlend_BlendTool_Tolerance(*args):
    """
    * Returns the parametric tolerance on the arc A used to consider that the vertex and another point meet, i-e if Abs(Parameter(Vertex)-Parameter(OtherPnt))<= Tolerance, the points are 'merged'.

    :param V:
    :type V: Handle_Adaptor3d_HVertex &
    :param A:
    :type A: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_BlendTool_Tolerance(*args)

def BRepBlend_BlendTool_SingularOnUMin(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_SingularOnUMin(*args)

def BRepBlend_BlendTool_SingularOnUMax(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_SingularOnUMax(*args)

def BRepBlend_BlendTool_SingularOnVMin(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_SingularOnVMin(*args)

def BRepBlend_BlendTool_SingularOnVMax(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_BlendTool_SingularOnVMax(*args)

def BRepBlend_BlendTool_NbSamplesU(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u1:
    :type u1: float
    :param u2:
    :type u2: float
    :rtype: int

    """
    return _BRepBlend.BRepBlend_BlendTool_NbSamplesU(*args)

def BRepBlend_BlendTool_NbSamplesV(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param v1:
    :type v1: float
    :param v2:
    :type v2: float
    :rtype: int

    """
    return _BRepBlend.BRepBlend_BlendTool_NbSamplesV(*args)

def BRepBlend_BlendTool_Bounds(*args):
    """
    * Returns the parametric limits on the arc C. These limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.

    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Ufirst:
    :type Ufirst: float &
    :param Ulast:
    :type Ulast: float &
    :rtype: void

    """
    return _BRepBlend.BRepBlend_BlendTool_Bounds(*args)

def BRepBlend_BlendTool_CurveOnSurf(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: Handle_Adaptor2d_HCurve2d

    """
    return _BRepBlend.BRepBlend_BlendTool_CurveOnSurf(*args)

class BRepBlend_CSWalking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curv:
        :type Curv: Handle_Adaptor3d_HCurve &
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :rtype: None

        """
        _BRepBlend.BRepBlend_CSWalking_swiginit(self, _BRepBlend.new_BRepBlend_CSWalking(*args))

    def Perform(self, *args):
        """
        :param F:
        :type F: Blend_CSFunction &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param MaxStep:
        :type MaxStep: float
        :param TolGuide:
        :type TolGuide: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param Fleche:
        :type Fleche: float
        :param Appro: default value is Standard_False
        :type Appro: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_CSWalking_Perform(self, *args)


    def Complete(self, *args):
        """
        :param F:
        :type F: Blend_CSFunction &
        :param Pmin:
        :type Pmin: float
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_CSWalking_Complete(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_CSWalking_IsDone(self, *args)


    def Line(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_CSWalking_Line(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_CSWalking.Perform = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Perform, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.Complete = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Complete, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.IsDone = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_IsDone, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.Line = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Line, None, BRepBlend_CSWalking)
BRepBlend_CSWalking._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_CSWalking__kill_pointed, None, BRepBlend_CSWalking)
BRepBlend_CSWalking_swigregister = _BRepBlend.BRepBlend_CSWalking_swigregister
BRepBlend_CSWalking_swigregister(BRepBlend_CSWalking)

class BRepBlend_CurvPointRadInv(OCC.Blend.Blend_CurvPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        :type C1: Handle_Adaptor3d_HCurve &
        :param C2:
        :type C2: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _BRepBlend.BRepBlend_CurvPointRadInv_swiginit(self, _BRepBlend.new_BRepBlend_CurvPointRadInv(*args))

    def Set(self, *args):
        """
        :param Choix:
        :type Choix: int
        :rtype: None

        * Set the Point on which a solution has to be found.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRepBlend.BRepBlend_CurvPointRadInv_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_CurvPointRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_CurvPointRadInv_Set, None, BRepBlend_CurvPointRadInv)
BRepBlend_CurvPointRadInv._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_CurvPointRadInv__kill_pointed, None, BRepBlend_CurvPointRadInv)
BRepBlend_CurvPointRadInv_swigregister = _BRepBlend.BRepBlend_CurvPointRadInv_swigregister
BRepBlend_CurvPointRadInv_swigregister(BRepBlend_CurvPointRadInv)

class BRepBlend_Extremity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :param Vtx:
        :type Vtx: Handle_Adaptor3d_HVertex &
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param W:
        :type W: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _BRepBlend.BRepBlend_Extremity_swiginit(self, _BRepBlend.new_BRepBlend_Extremity(*args))

    def SetValue(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :param Vtx:
        :type Vtx: Handle_Adaptor3d_HVertex &
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param W:
        :type W: float
        :param Param:
        :type Param: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Extremity_SetValue(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _BRepBlend.BRepBlend_Extremity_Value(self, *args)


    def SetTangent(self, *args):
        """
        :param Tangent:
        :type Tangent: gp_Vec
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Extremity_SetTangent(self, *args)


    def HasTangent(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Extremity_HasTangent(self, *args)


    def Tangent(self, *args):
        """
        :rtype: gp_Vec

        """
        return _BRepBlend.BRepBlend_Extremity_Tangent(self, *args)


    def Tolerance(self, *args):
        """
        :rtype: float

        """
        return _BRepBlend.BRepBlend_Extremity_Tolerance(self, *args)


    def SetVertex(self, *args):
        """
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Extremity_SetVertex(self, *args)


    def AddArc(self, *args):
        """
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Param:
        :type Param: float
        :param TLine:
        :type TLine: IntSurf_Transition &
        :param TArc:
        :type TArc: IntSurf_Transition &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Extremity_AddArc(self, *args)


    def Parameters(self, *args):
        """
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Extremity_Parameters(self, *args)


    def IsVertex(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Extremity_IsVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: Handle_Adaptor3d_HVertex

        """
        return _BRepBlend.BRepBlend_Extremity_Vertex(self, *args)


    def NbPointOnRst(self, *args):
        """
        :rtype: int

        """
        return _BRepBlend.BRepBlend_Extremity_NbPointOnRst(self, *args)


    def PointOnRst(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_Extremity_PointOnRst(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _BRepBlend.BRepBlend_Extremity_Parameter(self, *args)


    def ParameterOnGuide(self, *args):
        """
        :rtype: float

        """
        return _BRepBlend.BRepBlend_Extremity_ParameterOnGuide(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_Extremity.SetValue = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetValue, None, BRepBlend_Extremity)
BRepBlend_Extremity.Value = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Value, None, BRepBlend_Extremity)
BRepBlend_Extremity.SetTangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetTangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.HasTangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_HasTangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.Tangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Tangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.Tolerance = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Tolerance, None, BRepBlend_Extremity)
BRepBlend_Extremity.SetVertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetVertex, None, BRepBlend_Extremity)
BRepBlend_Extremity.AddArc = new_instancemethod(_BRepBlend.BRepBlend_Extremity_AddArc, None, BRepBlend_Extremity)
BRepBlend_Extremity.Parameters = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Parameters, None, BRepBlend_Extremity)
BRepBlend_Extremity.IsVertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_IsVertex, None, BRepBlend_Extremity)
BRepBlend_Extremity.Vertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Vertex, None, BRepBlend_Extremity)
BRepBlend_Extremity.NbPointOnRst = new_instancemethod(_BRepBlend.BRepBlend_Extremity_NbPointOnRst, None, BRepBlend_Extremity)
BRepBlend_Extremity.PointOnRst = new_instancemethod(_BRepBlend.BRepBlend_Extremity_PointOnRst, None, BRepBlend_Extremity)
BRepBlend_Extremity.Parameter = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Parameter, None, BRepBlend_Extremity)
BRepBlend_Extremity.ParameterOnGuide = new_instancemethod(_BRepBlend.BRepBlend_Extremity_ParameterOnGuide, None, BRepBlend_Extremity)
BRepBlend_Extremity._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_Extremity__kill_pointed, None, BRepBlend_Extremity)
BRepBlend_Extremity_swigregister = _BRepBlend.BRepBlend_Extremity_swigregister
BRepBlend_Extremity_swigregister(BRepBlend_Extremity)

class BRepBlend_HCurve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Continuity(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: GeomAbs_Shape

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def NbIntervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def Intervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def Period(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Period(*args)

    Period = staticmethod(Period)

    def Value(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :rtype: gp_Pnt2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Vec2d
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :param V3:
        :type V3: gp_Vec2d
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_DN(*args)

    DN = staticmethod(DN)

    def Resolution(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def GetType(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: GeomAbs_CurveType

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Line(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Lin2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Circ2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Elips2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Hyperbola(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Hypr2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Parabola(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Parab2d

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Bezier(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def NbSamples(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :rtype: int

        """
        return _BRepBlend.BRepBlend_HCurve2dTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def __init__(self):
        _BRepBlend.BRepBlend_HCurve2dTool_swiginit(self, _BRepBlend.new_BRepBlend_HCurve2dTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_HCurve2dTool._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_HCurve2dTool__kill_pointed, None, BRepBlend_HCurve2dTool)
BRepBlend_HCurve2dTool_swigregister = _BRepBlend.BRepBlend_HCurve2dTool_swigregister
BRepBlend_HCurve2dTool_swigregister(BRepBlend_HCurve2dTool)

def BRepBlend_HCurve2dTool_FirstParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_FirstParameter(*args)

def BRepBlend_HCurve2dTool_LastParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_LastParameter(*args)

def BRepBlend_HCurve2dTool_Continuity(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: GeomAbs_Shape

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Continuity(*args)

def BRepBlend_HCurve2dTool_NbIntervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: int

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_NbIntervals(*args)

def BRepBlend_HCurve2dTool_Intervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Intervals(*args)

def BRepBlend_HCurve2dTool_IsClosed(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_IsClosed(*args)

def BRepBlend_HCurve2dTool_IsPeriodic(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_IsPeriodic(*args)

def BRepBlend_HCurve2dTool_Period(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Period(*args)

def BRepBlend_HCurve2dTool_Value(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :rtype: gp_Pnt2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Value(*args)

def BRepBlend_HCurve2dTool_D0(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_D0(*args)

def BRepBlend_HCurve2dTool_D1(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V:
    :type V: gp_Vec2d
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_D1(*args)

def BRepBlend_HCurve2dTool_D2(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_D2(*args)

def BRepBlend_HCurve2dTool_D3(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :param V3:
    :type V3: gp_Vec2d
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_D3(*args)

def BRepBlend_HCurve2dTool_DN(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param N:
    :type N: int
    :rtype: gp_Vec2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_DN(*args)

def BRepBlend_HCurve2dTool_Resolution(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Resolution(*args)

def BRepBlend_HCurve2dTool_GetType(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: GeomAbs_CurveType

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_GetType(*args)

def BRepBlend_HCurve2dTool_Line(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Lin2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Line(*args)

def BRepBlend_HCurve2dTool_Circle(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Circ2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Circle(*args)

def BRepBlend_HCurve2dTool_Ellipse(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Elips2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Ellipse(*args)

def BRepBlend_HCurve2dTool_Hyperbola(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Hypr2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Hyperbola(*args)

def BRepBlend_HCurve2dTool_Parabola(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Parab2d

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Parabola(*args)

def BRepBlend_HCurve2dTool_Bezier(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: Handle_Geom2d_BezierCurve

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_Bezier(*args)

def BRepBlend_HCurve2dTool_BSpline(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: Handle_Geom2d_BSplineCurve

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_BSpline(*args)

def BRepBlend_HCurve2dTool_NbSamples(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U0:
    :type U0: float
    :param U1:
    :type U1: float
    :rtype: int

    """
    return _BRepBlend.BRepBlend_HCurve2dTool_NbSamples(*args)

class BRepBlend_HCurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Continuity(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: GeomAbs_Shape

        """
        return _BRepBlend.BRepBlend_HCurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def NbIntervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _BRepBlend.BRepBlend_HCurveTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def Intervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurveTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_HCurveTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_HCurveTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def Period(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurveTool_Period(*args)

    Period = staticmethod(Period)

    def Value(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _BRepBlend.BRepBlend_HCurveTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurveTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: void

        """
        return _BRepBlend.BRepBlend_HCurveTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _BRepBlend.BRepBlend_HCurveTool_DN(*args)

    DN = staticmethod(DN)

    def Resolution(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _BRepBlend.BRepBlend_HCurveTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def GetType(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: GeomAbs_CurveType

        """
        return _BRepBlend.BRepBlend_HCurveTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Line(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Lin

        """
        return _BRepBlend.BRepBlend_HCurveTool_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Circ

        """
        return _BRepBlend.BRepBlend_HCurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Elips

        """
        return _BRepBlend.BRepBlend_HCurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Hyperbola(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Hypr

        """
        return _BRepBlend.BRepBlend_HCurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Parabola(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: gp_Parab

        """
        return _BRepBlend.BRepBlend_HCurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Bezier(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: Handle_Geom_BezierCurve

        """
        return _BRepBlend.BRepBlend_HCurveTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: Handle_Geom_BSplineCurve

        """
        return _BRepBlend.BRepBlend_HCurveTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def NbSamples(*args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :rtype: int

        """
        return _BRepBlend.BRepBlend_HCurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def __init__(self):
        _BRepBlend.BRepBlend_HCurveTool_swiginit(self, _BRepBlend.new_BRepBlend_HCurveTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_HCurveTool._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_HCurveTool__kill_pointed, None, BRepBlend_HCurveTool)
BRepBlend_HCurveTool_swigregister = _BRepBlend.BRepBlend_HCurveTool_swigregister
BRepBlend_HCurveTool_swigregister(BRepBlend_HCurveTool)

def BRepBlend_HCurveTool_FirstParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurveTool_FirstParameter(*args)

def BRepBlend_HCurveTool_LastParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurveTool_LastParameter(*args)

def BRepBlend_HCurveTool_Continuity(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: GeomAbs_Shape

    """
    return _BRepBlend.BRepBlend_HCurveTool_Continuity(*args)

def BRepBlend_HCurveTool_NbIntervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: int

    """
    return _BRepBlend.BRepBlend_HCurveTool_NbIntervals(*args)

def BRepBlend_HCurveTool_Intervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurveTool_Intervals(*args)

def BRepBlend_HCurveTool_IsClosed(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_HCurveTool_IsClosed(*args)

def BRepBlend_HCurveTool_IsPeriodic(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: bool

    """
    return _BRepBlend.BRepBlend_HCurveTool_IsPeriodic(*args)

def BRepBlend_HCurveTool_Period(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurveTool_Period(*args)

def BRepBlend_HCurveTool_Value(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :rtype: gp_Pnt

    """
    return _BRepBlend.BRepBlend_HCurveTool_Value(*args)

def BRepBlend_HCurveTool_D0(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurveTool_D0(*args)

def BRepBlend_HCurveTool_D1(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V:
    :type V: gp_Vec
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurveTool_D1(*args)

def BRepBlend_HCurveTool_D2(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurveTool_D2(*args)

def BRepBlend_HCurveTool_D3(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt
    :param V1:
    :type V1: gp_Vec
    :param V2:
    :type V2: gp_Vec
    :param V3:
    :type V3: gp_Vec
    :rtype: void

    """
    return _BRepBlend.BRepBlend_HCurveTool_D3(*args)

def BRepBlend_HCurveTool_DN(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U:
    :type U: float
    :param N:
    :type N: int
    :rtype: gp_Vec

    """
    return _BRepBlend.BRepBlend_HCurveTool_DN(*args)

def BRepBlend_HCurveTool_Resolution(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _BRepBlend.BRepBlend_HCurveTool_Resolution(*args)

def BRepBlend_HCurveTool_GetType(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: GeomAbs_CurveType

    """
    return _BRepBlend.BRepBlend_HCurveTool_GetType(*args)

def BRepBlend_HCurveTool_Line(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Lin

    """
    return _BRepBlend.BRepBlend_HCurveTool_Line(*args)

def BRepBlend_HCurveTool_Circle(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Circ

    """
    return _BRepBlend.BRepBlend_HCurveTool_Circle(*args)

def BRepBlend_HCurveTool_Ellipse(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Elips

    """
    return _BRepBlend.BRepBlend_HCurveTool_Ellipse(*args)

def BRepBlend_HCurveTool_Hyperbola(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Hypr

    """
    return _BRepBlend.BRepBlend_HCurveTool_Hyperbola(*args)

def BRepBlend_HCurveTool_Parabola(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: gp_Parab

    """
    return _BRepBlend.BRepBlend_HCurveTool_Parabola(*args)

def BRepBlend_HCurveTool_Bezier(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: Handle_Geom_BezierCurve

    """
    return _BRepBlend.BRepBlend_HCurveTool_Bezier(*args)

def BRepBlend_HCurveTool_BSpline(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :rtype: Handle_Geom_BSplineCurve

    """
    return _BRepBlend.BRepBlend_HCurveTool_BSpline(*args)

def BRepBlend_HCurveTool_NbSamples(*args):
    """
    :param C:
    :type C: Handle_Adaptor3d_HCurve &
    :param U0:
    :type U0: float
    :param U1:
    :type U1: float
    :rtype: int

    """
    return _BRepBlend.BRepBlend_HCurveTool_NbSamples(*args)

class BRepBlend_Line(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepBlend.BRepBlend_Line_swiginit(self, _BRepBlend.new_BRepBlend_Line(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_Clear(self, *args)


    def Append(self, *args):
        """
        :param P:
        :type P: Blend_Point &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_Append(self, *args)


    def Prepend(self, *args):
        """
        :param P:
        :type P: Blend_Point &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param P:
        :type P: Blend_Point &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_InsertBefore(self, *args)


    def Remove(self, *args):
        """
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_Remove(self, *args)


    def Set(self, *args):
        """
        :param TranS1:
        :type TranS1: IntSurf_TypeTrans
        :param TranS2:
        :type TranS2: IntSurf_TypeTrans
        :rtype: None

        :param Trans:
        :type Trans: IntSurf_TypeTrans
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_Set(self, *args)


    def SetStartPoints(self, *args):
        """
        :param StartPt1:
        :type StartPt1: BRepBlend_Extremity &
        :param StartPt2:
        :type StartPt2: BRepBlend_Extremity &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_SetStartPoints(self, *args)


    def SetEndPoints(self, *args):
        """
        :param EndPt1:
        :type EndPt1: BRepBlend_Extremity &
        :param EndPt2:
        :type EndPt2: BRepBlend_Extremity &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Line_SetEndPoints(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _BRepBlend.BRepBlend_Line_NbPoints(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Blend_Point

        """
        return _BRepBlend.BRepBlend_Line_Point(self, *args)


    def TransitionOnS1(self, *args):
        """
        :rtype: IntSurf_TypeTrans

        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS1(self, *args)


    def TransitionOnS2(self, *args):
        """
        :rtype: IntSurf_TypeTrans

        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS2(self, *args)


    def StartPointOnFirst(self, *args):
        """
        :rtype: BRepBlend_Extremity

        """
        return _BRepBlend.BRepBlend_Line_StartPointOnFirst(self, *args)


    def StartPointOnSecond(self, *args):
        """
        :rtype: BRepBlend_Extremity

        """
        return _BRepBlend.BRepBlend_Line_StartPointOnSecond(self, *args)


    def EndPointOnFirst(self, *args):
        """
        :rtype: BRepBlend_Extremity

        """
        return _BRepBlend.BRepBlend_Line_EndPointOnFirst(self, *args)


    def EndPointOnSecond(self, *args):
        """
        :rtype: BRepBlend_Extremity

        """
        return _BRepBlend.BRepBlend_Line_EndPointOnSecond(self, *args)


    def TransitionOnS(self, *args):
        """
        :rtype: IntSurf_TypeTrans

        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_Line self)"""
        return _BRepBlend.BRepBlend_Line__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_Line self) -> Handle_BRepBlend_Line"""
        return _BRepBlend.BRepBlend_Line_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_Line.Clear = new_instancemethod(_BRepBlend.BRepBlend_Line_Clear, None, BRepBlend_Line)
BRepBlend_Line.Append = new_instancemethod(_BRepBlend.BRepBlend_Line_Append, None, BRepBlend_Line)
BRepBlend_Line.Prepend = new_instancemethod(_BRepBlend.BRepBlend_Line_Prepend, None, BRepBlend_Line)
BRepBlend_Line.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_Line_InsertBefore, None, BRepBlend_Line)
BRepBlend_Line.Remove = new_instancemethod(_BRepBlend.BRepBlend_Line_Remove, None, BRepBlend_Line)
BRepBlend_Line.Set = new_instancemethod(_BRepBlend.BRepBlend_Line_Set, None, BRepBlend_Line)
BRepBlend_Line.SetStartPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_SetStartPoints, None, BRepBlend_Line)
BRepBlend_Line.SetEndPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_SetEndPoints, None, BRepBlend_Line)
BRepBlend_Line.NbPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_NbPoints, None, BRepBlend_Line)
BRepBlend_Line.Point = new_instancemethod(_BRepBlend.BRepBlend_Line_Point, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS1, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS2, None, BRepBlend_Line)
BRepBlend_Line.StartPointOnFirst = new_instancemethod(_BRepBlend.BRepBlend_Line_StartPointOnFirst, None, BRepBlend_Line)
BRepBlend_Line.StartPointOnSecond = new_instancemethod(_BRepBlend.BRepBlend_Line_StartPointOnSecond, None, BRepBlend_Line)
BRepBlend_Line.EndPointOnFirst = new_instancemethod(_BRepBlend.BRepBlend_Line_EndPointOnFirst, None, BRepBlend_Line)
BRepBlend_Line.EndPointOnSecond = new_instancemethod(_BRepBlend.BRepBlend_Line_EndPointOnSecond, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS, None, BRepBlend_Line)
BRepBlend_Line._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_Line__kill_pointed, None, BRepBlend_Line)
BRepBlend_Line.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_Line_GetHandle, None, BRepBlend_Line)
BRepBlend_Line_swigregister = _BRepBlend.BRepBlend_Line_swigregister
BRepBlend_Line_swigregister(BRepBlend_Line)

class Handle_BRepBlend_Line(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_Line_swiginit(self, _BRepBlend.new_Handle_BRepBlend_Line(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_Line_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_Line.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_Line_Nullify, None, Handle_BRepBlend_Line)
Handle_BRepBlend_Line.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_Line_IsNull, None, Handle_BRepBlend_Line)
Handle_BRepBlend_Line.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_Line_GetObject, None, Handle_BRepBlend_Line)
Handle_BRepBlend_Line._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_Line__kill_pointed, None, Handle_BRepBlend_Line)
Handle_BRepBlend_Line_swigregister = _BRepBlend.Handle_BRepBlend_Line_swigregister
Handle_BRepBlend_Line_swigregister(Handle_BRepBlend_Line)

def Handle_BRepBlend_Line_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_Line_DownCast(AnObject)
Handle_BRepBlend_Line_DownCast = _BRepBlend.Handle_BRepBlend_Line_DownCast

class BRepBlend_PointOnRst(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Param:
        :type Param: float
        :param TLine:
        :type TLine: IntSurf_Transition &
        :param TArc:
        :type TArc: IntSurf_Transition &
        :rtype: None

        """
        _BRepBlend.BRepBlend_PointOnRst_swiginit(self, _BRepBlend.new_BRepBlend_PointOnRst(*args))

    def SetArc(self, *args):
        """
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Param:
        :type Param: float
        :param TLine:
        :type TLine: IntSurf_Transition &
        :param TArc:
        :type TArc: IntSurf_Transition &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_PointOnRst_SetArc(self, *args)


    def Arc(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _BRepBlend.BRepBlend_PointOnRst_Arc(self, *args)


    def TransitionOnLine(self, *args):
        """
        :rtype: IntSurf_Transition

        """
        return _BRepBlend.BRepBlend_PointOnRst_TransitionOnLine(self, *args)


    def TransitionOnArc(self, *args):
        """
        :rtype: IntSurf_Transition

        """
        return _BRepBlend.BRepBlend_PointOnRst_TransitionOnArc(self, *args)


    def ParameterOnArc(self, *args):
        """
        :rtype: float

        """
        return _BRepBlend.BRepBlend_PointOnRst_ParameterOnArc(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_PointOnRst.SetArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_SetArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.Arc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_Arc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.TransitionOnLine = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_TransitionOnLine, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.TransitionOnArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_TransitionOnArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.ParameterOnArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_ParameterOnArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst__kill_pointed, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst_swigregister = _BRepBlend.BRepBlend_PointOnRst_swigregister
BRepBlend_PointOnRst_swigregister(BRepBlend_PointOnRst)

class BRepBlend_RstRstConstRad(OCC.Blend.Blend_RstRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Rst1:
        :type Rst1: Handle_Adaptor2d_HCurve2d &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :param Rst2:
        :type Rst2: Handle_Adaptor2d_HCurve2d &
        :param CGuide:
        :type CGuide: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _BRepBlend.BRepBlend_RstRstConstRad_swiginit(self, _BRepBlend.new_BRepBlend_RstRstConstRad(*args))

    def Set(self, *args):
        """
        :param SurfRef1:
        :type SurfRef1: Handle_Adaptor3d_HSurface &
        :param RstRef1:
        :type RstRef1: Handle_Adaptor2d_HCurve2d &
        :param SurfRef2:
        :type SurfRef2: Handle_Adaptor3d_HSurface &
        :param RstRef2:
        :type RstRef2: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        :param Param:
        :type Param: float
        :rtype: None

        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        :param Radius:
        :type Radius: float
        :param Choix:
        :type Choix: int
        :rtype: None

        * Sets the type of section generation for the approximations.

        :param TypeSection:
        :type TypeSection: BlendFunc_SectionShape
        :rtype: None

        """
        return _BRepBlend.BRepBlend_RstRstConstRad_Set(self, *args)


    def CenterCircleRst1Rst2(self, *args):
        """
        * Give the center of circle define by PtRst1, PtRst2 and radius ray.

        :param PtRst1:
        :type PtRst1: gp_Pnt
        :param PtRst2:
        :type PtRst2: gp_Pnt
        :param np:
        :type np: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param VdMed:
        :type VdMed: gp_Vec
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstConstRad_CenterCircleRst1Rst2(self, *args)


    def GetTolerance(self, *args):
        """
        :param Tolerance:
        :type Tolerance: math_Vector &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.

        :param BoundTol:
        :type BoundTol: float
        :param SurfTol:
        :type SurfTol: float
        :param AngleTol:
        :type AngleTol: float
        :param Tol3d:
        :type Tol3d: math_Vector &
        :param Tol1D:
        :type Tol1D: math_Vector &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_RstRstConstRad_GetTolerance(self, *args)


    def Section(self, *args):
        """
        :param Param:
        :type Param: float
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Pdeb:
        :type Pdeb: float &
        :param Pfin:
        :type Pfin: float &
        :param C:
        :type C: gp_Circ
        :rtype: None

        * Used for the first and last section

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: None

        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param D2Poles2d:
        :type D2Poles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstConstRad_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_RstRstConstRad.Set = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_Set, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.CenterCircleRst1Rst2 = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_CenterCircleRst1Rst2, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_GetTolerance, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.Section = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_Section, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad__kill_pointed, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad_swigregister = _BRepBlend.BRepBlend_RstRstConstRad_swigregister
BRepBlend_RstRstConstRad_swigregister(BRepBlend_RstRstConstRad)

class BRepBlend_RstRstEvolRad(OCC.Blend.Blend_RstRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Rst1:
        :type Rst1: Handle_Adaptor2d_HCurve2d &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :param Rst2:
        :type Rst2: Handle_Adaptor2d_HCurve2d &
        :param CGuide:
        :type CGuide: Handle_Adaptor3d_HCurve &
        :param Evol:
        :type Evol: Handle_Law_Function &
        :rtype: None

        """
        _BRepBlend.BRepBlend_RstRstEvolRad_swiginit(self, _BRepBlend.new_BRepBlend_RstRstEvolRad(*args))

    def Set(self, *args):
        """
        :param SurfRef1:
        :type SurfRef1: Handle_Adaptor3d_HSurface &
        :param RstRef1:
        :type RstRef1: Handle_Adaptor2d_HCurve2d &
        :param SurfRef2:
        :type SurfRef2: Handle_Adaptor3d_HSurface &
        :param RstRef2:
        :type RstRef2: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        :param Param:
        :type Param: float
        :rtype: None

        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        :param Choix:
        :type Choix: int
        :rtype: None

        * Sets the type of section generation for the approximations.

        :param TypeSection:
        :type TypeSection: BlendFunc_SectionShape
        :rtype: None

        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_Set(self, *args)


    def CenterCircleRst1Rst2(self, *args):
        """
        * Gives the center of circle defined by PtRst1, PtRst2 and radius ray.

        :param PtRst1:
        :type PtRst1: gp_Pnt
        :param PtRst2:
        :type PtRst2: gp_Pnt
        :param np:
        :type np: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param VdMed:
        :type VdMed: gp_Vec
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_CenterCircleRst1Rst2(self, *args)


    def GetTolerance(self, *args):
        """
        :param Tolerance:
        :type Tolerance: math_Vector &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.

        :param BoundTol:
        :type BoundTol: float
        :param SurfTol:
        :type SurfTol: float
        :param AngleTol:
        :type AngleTol: float
        :param Tol3d:
        :type Tol3d: math_Vector &
        :param Tol1D:
        :type Tol1D: math_Vector &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_GetTolerance(self, *args)


    def Section(self, *args):
        """
        :param Param:
        :type Param: float
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Pdeb:
        :type Pdeb: float &
        :param Pfin:
        :type Pfin: float &
        :param C:
        :type C: gp_Circ
        :rtype: None

        * Used for the first and last section

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: None

        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param D2Poles2d:
        :type D2Poles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_RstRstEvolRad.Set = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_Set, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.CenterCircleRst1Rst2 = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_CenterCircleRst1Rst2, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_GetTolerance, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.Section = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_Section, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad__kill_pointed, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad_swigregister = _BRepBlend.BRepBlend_RstRstEvolRad_swigregister
BRepBlend_RstRstEvolRad_swigregister(BRepBlend_RstRstEvolRad)

class BRepBlend_RstRstLineBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Rst1:
        :type Rst1: Handle_Adaptor2d_HCurve2d &
        :param Domain1:
        :type Domain1: Handle_Adaptor3d_TopolTool &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :param Rst2:
        :type Rst2: Handle_Adaptor2d_HCurve2d &
        :param Domain2:
        :type Domain2: Handle_Adaptor3d_TopolTool &
        :rtype: None

        """
        _BRepBlend.BRepBlend_RstRstLineBuilder_swiginit(self, _BRepBlend.new_BRepBlend_RstRstLineBuilder(*args))

    def Perform(self, *args):
        """
        :param Func:
        :type Func: Blend_RstRstFunction &
        :param Finv1:
        :type Finv1: Blend_SurfCurvFuncInv &
        :param FinvP1:
        :type FinvP1: Blend_CurvPointFuncInv &
        :param Finv2:
        :type Finv2: Blend_SurfCurvFuncInv &
        :param FinvP2:
        :type FinvP2: Blend_CurvPointFuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param MaxStep:
        :type MaxStep: float
        :param TolGuide:
        :type TolGuide: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param Fleche:
        :type Fleche: float
        :param Appro: default value is Standard_False
        :type Appro: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Perform(self, *args)


    def PerformFirstSection(self, *args):
        """
        :param Func:
        :type Func: Blend_RstRstFunction &
        :param Finv1:
        :type Finv1: Blend_SurfCurvFuncInv &
        :param FinvP1:
        :type FinvP1: Blend_CurvPointFuncInv &
        :param Finv2:
        :type Finv2: Blend_SurfCurvFuncInv &
        :param FinvP2:
        :type FinvP2: Blend_CurvPointFuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param TolGuide:
        :type TolGuide: float
        :param RecRst1:
        :type RecRst1: bool
        :param RecP1:
        :type RecP1: bool
        :param RecRst2:
        :type RecRst2: bool
        :param RecP2:
        :type RecP2: bool
        :param Psol:
        :type Psol: float &
        :param ParSol:
        :type ParSol: math_Vector &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_PerformFirstSection(self, *args)


    def Complete(self, *args):
        """
        :param Func:
        :type Func: Blend_RstRstFunction &
        :param Finv1:
        :type Finv1: Blend_SurfCurvFuncInv &
        :param FinvP1:
        :type FinvP1: Blend_CurvPointFuncInv &
        :param Finv2:
        :type Finv2: Blend_SurfCurvFuncInv &
        :param FinvP2:
        :type FinvP2: Blend_CurvPointFuncInv &
        :param Pmin:
        :type Pmin: float
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Complete(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_IsDone(self, *args)


    def Line(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Line(self, *args)


    def Decroch1Start(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1Start(self, *args)


    def Decroch1End(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1End(self, *args)


    def Decroch2Start(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2Start(self, *args)


    def Decroch2End(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2End(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_RstRstLineBuilder.Perform = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Perform, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_PerformFirstSection, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Complete = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Complete, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.IsDone = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_IsDone, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Line = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Line, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch1Start = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1Start, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch1End = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1End, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch2Start = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2Start, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch2End = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2End, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder__kill_pointed, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder_swigregister = _BRepBlend.BRepBlend_RstRstLineBuilder_swigregister
BRepBlend_RstRstLineBuilder_swigregister(BRepBlend_RstRstLineBuilder)

class BRepBlend_SequenceNodeOfSequenceOfLine(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_BRepBlend_Line &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_swiginit(self, _BRepBlend.new_BRepBlend_SequenceNodeOfSequenceOfLine(*args))

    def Value(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_SequenceNodeOfSequenceOfLine self)"""
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_SequenceNodeOfSequenceOfLine self) -> Handle_BRepBlend_SequenceNodeOfSequenceOfLine"""
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SequenceNodeOfSequenceOfLine.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_Value, None, BRepBlend_SequenceNodeOfSequenceOfLine)
BRepBlend_SequenceNodeOfSequenceOfLine._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine__kill_pointed, None, BRepBlend_SequenceNodeOfSequenceOfLine)
BRepBlend_SequenceNodeOfSequenceOfLine.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_GetHandle, None, BRepBlend_SequenceNodeOfSequenceOfLine)
BRepBlend_SequenceNodeOfSequenceOfLine_swigregister = _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfLine_swigregister
BRepBlend_SequenceNodeOfSequenceOfLine_swigregister(BRepBlend_SequenceNodeOfSequenceOfLine)

class Handle_BRepBlend_SequenceNodeOfSequenceOfLine(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_swiginit(self, _BRepBlend.new_Handle_BRepBlend_SequenceNodeOfSequenceOfLine(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_SequenceNodeOfSequenceOfLine.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_Nullify, None, Handle_BRepBlend_SequenceNodeOfSequenceOfLine)
Handle_BRepBlend_SequenceNodeOfSequenceOfLine.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_IsNull, None, Handle_BRepBlend_SequenceNodeOfSequenceOfLine)
Handle_BRepBlend_SequenceNodeOfSequenceOfLine.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_GetObject, None, Handle_BRepBlend_SequenceNodeOfSequenceOfLine)
Handle_BRepBlend_SequenceNodeOfSequenceOfLine._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine__kill_pointed, None, Handle_BRepBlend_SequenceNodeOfSequenceOfLine)
Handle_BRepBlend_SequenceNodeOfSequenceOfLine_swigregister = _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_swigregister
Handle_BRepBlend_SequenceNodeOfSequenceOfLine_swigregister(Handle_BRepBlend_SequenceNodeOfSequenceOfLine)

def Handle_BRepBlend_SequenceNodeOfSequenceOfLine_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_DownCast(AnObject)
Handle_BRepBlend_SequenceNodeOfSequenceOfLine_DownCast = _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfLine_DownCast

class BRepBlend_SequenceNodeOfSequenceOfPointOnRst(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepBlend_PointOnRst &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swiginit(self, _BRepBlend.new_BRepBlend_SequenceNodeOfSequenceOfPointOnRst(*args))

    def Value(self, *args):
        """
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_SequenceNodeOfSequenceOfPointOnRst self)"""
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_SequenceNodeOfSequenceOfPointOnRst self) -> Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst"""
        return _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SequenceNodeOfSequenceOfPointOnRst.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_Value, None, BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
BRepBlend_SequenceNodeOfSequenceOfPointOnRst._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst__kill_pointed, None, BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
BRepBlend_SequenceNodeOfSequenceOfPointOnRst.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_GetHandle, None, BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister = _BRepBlend.BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister
BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister(BRepBlend_SequenceNodeOfSequenceOfPointOnRst)

class Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swiginit(self, _BRepBlend.new_Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_Nullify, None, Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_IsNull, None, Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_GetObject, None, Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst__kill_pointed, None, Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst)
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister = _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_swigregister(Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst)

def Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_DownCast(AnObject)
Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_DownCast = _BRepBlend.Handle_BRepBlend_SequenceNodeOfSequenceOfPointOnRst_DownCast

class BRepBlend_SequenceOfLine(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepBlend.BRepBlend_SequenceOfLine_swiginit(self, _BRepBlend.new_BRepBlend_SequenceOfLine(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepBlend_SequenceOfLine &
        :rtype: BRepBlend_SequenceOfLine

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepBlend_SequenceOfLine &
        :rtype: BRepBlend_SequenceOfLine

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_BRepBlend_Line &
        :rtype: None

        :param S:
        :type S: BRepBlend_SequenceOfLine &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_BRepBlend_Line &
        :rtype: None

        :param S:
        :type S: BRepBlend_SequenceOfLine &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_BRepBlend_Line &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepBlend_SequenceOfLine &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_BRepBlend_Line &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepBlend_SequenceOfLine &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepBlend_SequenceOfLine &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_BRepBlend_Line &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfLine_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SequenceOfLine.Clear = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Clear, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Assign = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Assign, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Set = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Set, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Append = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Append, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Prepend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Prepend, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_InsertBefore, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.InsertAfter = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_InsertAfter, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.First = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_First, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Last = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Last, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Split = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Split, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Value, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.SetValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_SetValue, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.ChangeValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_ChangeValue, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Remove = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Remove, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine__kill_pointed, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine_swigregister = _BRepBlend.BRepBlend_SequenceOfLine_swigregister
BRepBlend_SequenceOfLine_swigregister(BRepBlend_SequenceOfLine)

class BRepBlend_SequenceOfPointOnRst(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepBlend.BRepBlend_SequenceOfPointOnRst_swiginit(self, _BRepBlend.new_BRepBlend_SequenceOfPointOnRst(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepBlend_SequenceOfPointOnRst &
        :rtype: BRepBlend_SequenceOfPointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepBlend_SequenceOfPointOnRst &
        :rtype: BRepBlend_SequenceOfPointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: BRepBlend_PointOnRst &
        :rtype: None

        :param S:
        :type S: BRepBlend_SequenceOfPointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: BRepBlend_PointOnRst &
        :rtype: None

        :param S:
        :type S: BRepBlend_SequenceOfPointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepBlend_PointOnRst &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepBlend_SequenceOfPointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: BRepBlend_PointOnRst &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepBlend_SequenceOfPointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_First(self, *args)


    def Last(self, *args):
        """
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepBlend_SequenceOfPointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: BRepBlend_PointOnRst &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: BRepBlend_PointOnRst

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SequenceOfPointOnRst_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SequenceOfPointOnRst.Clear = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Clear, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Assign = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Assign, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Set = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Set, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Append = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Append, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Prepend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Prepend, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertBefore, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.InsertAfter = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertAfter, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.First = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_First, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Last = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Last, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Split = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Split, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Value, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.SetValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_SetValue, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.ChangeValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_ChangeValue, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Remove = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Remove, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst__kill_pointed, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst_swigregister = _BRepBlend.BRepBlend_SequenceOfPointOnRst_swigregister
BRepBlend_SequenceOfPointOnRst_swigregister(BRepBlend_SequenceOfPointOnRst)

class BRepBlend_SurfCurvConstRadInv(OCC.Blend.Blend_SurfCurvFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param Cg:
        :type Cg: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfCurvConstRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfCurvConstRadInv(*args))

    def Set(self, *args):
        """
        :param R:
        :type R: float
        :param Choix:
        :type Choix: int
        :rtype: None

        * Set the restriction on which a solution has to be found.

        :param Rst:
        :type Rst: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfCurvConstRadInv_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfCurvConstRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvConstRadInv_Set, None, BRepBlend_SurfCurvConstRadInv)
BRepBlend_SurfCurvConstRadInv._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvConstRadInv__kill_pointed, None, BRepBlend_SurfCurvConstRadInv)
BRepBlend_SurfCurvConstRadInv_swigregister = _BRepBlend.BRepBlend_SurfCurvConstRadInv_swigregister
BRepBlend_SurfCurvConstRadInv_swigregister(BRepBlend_SurfCurvConstRadInv)

class BRepBlend_SurfCurvEvolRadInv(OCC.Blend.Blend_SurfCurvFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param Cg:
        :type Cg: Handle_Adaptor3d_HCurve &
        :param Evol:
        :type Evol: Handle_Law_Function &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfCurvEvolRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfCurvEvolRadInv(*args))

    def Set(self, *args):
        """
        :param Choix:
        :type Choix: int
        :rtype: None

        * Set the restriction on which a solution has to be found.

        :param Rst:
        :type Rst: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfCurvEvolRadInv_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfCurvEvolRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvEvolRadInv_Set, None, BRepBlend_SurfCurvEvolRadInv)
BRepBlend_SurfCurvEvolRadInv._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvEvolRadInv__kill_pointed, None, BRepBlend_SurfCurvEvolRadInv)
BRepBlend_SurfCurvEvolRadInv_swigregister = _BRepBlend.BRepBlend_SurfCurvEvolRadInv_swigregister
BRepBlend_SurfCurvEvolRadInv_swigregister(BRepBlend_SurfCurvEvolRadInv)

class BRepBlend_SurfPointConstRadInv(OCC.Blend.Blend_SurfPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfPointConstRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfPointConstRadInv(*args))

    def Set(self, *args):
        """
        :param R:
        :type R: float
        :param Choix:
        :type Choix: int
        :rtype: None

        * Set the Point on which a solution has to be found.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfPointConstRadInv_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfPointConstRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfPointConstRadInv_Set, None, BRepBlend_SurfPointConstRadInv)
BRepBlend_SurfPointConstRadInv._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfPointConstRadInv__kill_pointed, None, BRepBlend_SurfPointConstRadInv)
BRepBlend_SurfPointConstRadInv_swigregister = _BRepBlend.BRepBlend_SurfPointConstRadInv_swigregister
BRepBlend_SurfPointConstRadInv_swigregister(BRepBlend_SurfPointConstRadInv)

class BRepBlend_SurfPointEvolRadInv(OCC.Blend.Blend_SurfPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param Evol:
        :type Evol: Handle_Law_Function &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfPointEvolRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfPointEvolRadInv(*args))

    def Set(self, *args):
        """
        :param Choix:
        :type Choix: int
        :rtype: None

        * Set the Point on which a solution has to be found.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfPointEvolRadInv_Set(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfPointEvolRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfPointEvolRadInv_Set, None, BRepBlend_SurfPointEvolRadInv)
BRepBlend_SurfPointEvolRadInv._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfPointEvolRadInv__kill_pointed, None, BRepBlend_SurfPointEvolRadInv)
BRepBlend_SurfPointEvolRadInv_swigregister = _BRepBlend.BRepBlend_SurfPointEvolRadInv_swigregister
BRepBlend_SurfPointEvolRadInv_swigregister(BRepBlend_SurfPointEvolRadInv)

class BRepBlend_SurfRstConstRad(OCC.Blend.Blend_SurfRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param SurfRst:
        :type SurfRst: Handle_Adaptor3d_HSurface &
        :param Rst:
        :type Rst: Handle_Adaptor2d_HCurve2d &
        :param CGuide:
        :type CGuide: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfRstConstRad_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstConstRad(*args))

    def Set(self, *args):
        """
        :param SurfRef:
        :type SurfRef: Handle_Adaptor3d_HSurface &
        :param RstRef:
        :type RstRef: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        :param Param:
        :type Param: float
        :rtype: None

        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        :param Radius:
        :type Radius: float
        :param Choix:
        :type Choix: int
        :rtype: None

        * Sets the type of section generation for the approximations.

        :param TypeSection:
        :type TypeSection: BlendFunc_SectionShape
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_Set(self, *args)


    def GetTolerance(self, *args):
        """
        :param Tolerance:
        :type Tolerance: math_Vector &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.

        :param BoundTol:
        :type BoundTol: float
        :param SurfTol:
        :type SurfTol: float
        :param AngleTol:
        :type AngleTol: float
        :param Tol3d:
        :type Tol3d: math_Vector &
        :param Tol1D:
        :type Tol1D: math_Vector &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_GetTolerance(self, *args)


    def Section(self, *args):
        """
        :param Param:
        :type Param: float
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param W:
        :type W: float
        :param Pdeb:
        :type Pdeb: float &
        :param Pfin:
        :type Pfin: float &
        :param C:
        :type C: gp_Circ
        :rtype: None

        * Used for the first and last section

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param D2Poles2d:
        :type D2Poles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfRstConstRad.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_Set, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_GetTolerance, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad.Section = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_Section, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad__kill_pointed, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad_swigregister = _BRepBlend.BRepBlend_SurfRstConstRad_swigregister
BRepBlend_SurfRstConstRad_swigregister(BRepBlend_SurfRstConstRad)

class BRepBlend_SurfRstEvolRad(OCC.Blend.Blend_SurfRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param SurfRst:
        :type SurfRst: Handle_Adaptor3d_HSurface &
        :param Rst:
        :type Rst: Handle_Adaptor2d_HCurve2d &
        :param CGuide:
        :type CGuide: Handle_Adaptor3d_HCurve &
        :param Evol:
        :type Evol: Handle_Law_Function &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfRstEvolRad_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstEvolRad(*args))

    def Set(self, *args):
        """
        :param SurfRef:
        :type SurfRef: Handle_Adaptor3d_HSurface &
        :param RstRef:
        :type RstRef: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        :param Param:
        :type Param: float
        :rtype: None

        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        :param Choix:
        :type Choix: int
        :rtype: None

        * Sets the type of section generation for the approximations.

        :param TypeSection:
        :type TypeSection: BlendFunc_SectionShape
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_Set(self, *args)


    def GetTolerance(self, *args):
        """
        :param Tolerance:
        :type Tolerance: math_Vector &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.

        :param BoundTol:
        :type BoundTol: float
        :param SurfTol:
        :type SurfTol: float
        :param AngleTol:
        :type AngleTol: float
        :param Tol3d:
        :type Tol3d: math_Vector &
        :param Tol1D:
        :type Tol1D: math_Vector &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_GetTolerance(self, *args)


    def Section(self, *args):
        """
        :param Param:
        :type Param: float
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param W:
        :type W: float
        :param Pdeb:
        :type Pdeb: float &
        :param Pfin:
        :type Pfin: float &
        :param C:
        :type C: gp_Circ
        :rtype: None

        * Used for the first and last section

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param D2Poles2d:
        :type D2Poles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        :param P:
        :type P: Blend_Point &
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfRstEvolRad.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_Set, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_GetTolerance, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad.Section = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_Section, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad__kill_pointed, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad_swigregister = _BRepBlend.BRepBlend_SurfRstEvolRad_swigregister
BRepBlend_SurfRstEvolRad_swigregister(BRepBlend_SurfRstEvolRad)

class BRepBlend_SurfRstLineBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Domain1:
        :type Domain1: Handle_Adaptor3d_TopolTool &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :param Rst:
        :type Rst: Handle_Adaptor2d_HCurve2d &
        :param Domain2:
        :type Domain2: Handle_Adaptor3d_TopolTool &
        :rtype: None

        """
        _BRepBlend.BRepBlend_SurfRstLineBuilder_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstLineBuilder(*args))

    def Perform(self, *args):
        """
        :param Func:
        :type Func: Blend_SurfRstFunction &
        :param Finv:
        :type Finv: Blend_FuncInv &
        :param FinvP:
        :type FinvP: Blend_SurfPointFuncInv &
        :param FinvC:
        :type FinvC: Blend_SurfCurvFuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param MaxStep:
        :type MaxStep: float
        :param TolGuide:
        :type TolGuide: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param Fleche:
        :type Fleche: float
        :param Appro: default value is Standard_False
        :type Appro: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Perform(self, *args)


    def PerformFirstSection(self, *args):
        """
        :param Func:
        :type Func: Blend_SurfRstFunction &
        :param Finv:
        :type Finv: Blend_FuncInv &
        :param FinvP:
        :type FinvP: Blend_SurfPointFuncInv &
        :param FinvC:
        :type FinvC: Blend_SurfCurvFuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param TolGuide:
        :type TolGuide: float
        :param RecRst:
        :type RecRst: bool
        :param RecP:
        :type RecP: bool
        :param RecS:
        :type RecS: bool
        :param Psol:
        :type Psol: float &
        :param ParSol:
        :type ParSol: math_Vector &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_PerformFirstSection(self, *args)


    def Complete(self, *args):
        """
        :param Func:
        :type Func: Blend_SurfRstFunction &
        :param Finv:
        :type Finv: Blend_FuncInv &
        :param FinvP:
        :type FinvP: Blend_SurfPointFuncInv &
        :param FinvC:
        :type FinvC: Blend_SurfCurvFuncInv &
        :param Pmin:
        :type Pmin: float
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Complete(self, *args)


    def ArcToRecadre(self, *args):
        """
        :param Sol:
        :type Sol: math_Vector &
        :param PrevIndex:
        :type PrevIndex: int
        :param pt2d:
        :type pt2d: gp_Pnt2d
        :param lastpt2d:
        :type lastpt2d: gp_Pnt2d
        :param ponarc:
        :type ponarc: float &
        :rtype: int

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_ArcToRecadre(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_IsDone(self, *args)


    def Line(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Line(self, *args)


    def DecrochStart(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochStart(self, *args)


    def DecrochEnd(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochEnd(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_SurfRstLineBuilder.Perform = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Perform, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_PerformFirstSection, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.Complete = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Complete, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.ArcToRecadre = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_ArcToRecadre, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.IsDone = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_IsDone, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.Line = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Line, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.DecrochStart = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochStart, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.DecrochEnd = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochEnd, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder__kill_pointed, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder_swigregister = _BRepBlend.BRepBlend_SurfRstLineBuilder_swigregister
BRepBlend_SurfRstLineBuilder_swigregister(BRepBlend_SurfRstLineBuilder)

class BRepBlend_Walking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :param Domain1:
        :type Domain1: Handle_Adaptor3d_TopolTool &
        :param Domain2:
        :type Domain2: Handle_Adaptor3d_TopolTool &
        :rtype: None

        """
        _BRepBlend.BRepBlend_Walking_swiginit(self, _BRepBlend.new_BRepBlend_Walking(*args))

    def SetDomainsToRecadre(self, *args):
        """
        :param RecDomain1:
        :type RecDomain1: Handle_Adaptor3d_TopolTool &
        :param RecDomain2:
        :type RecDomain2: Handle_Adaptor3d_TopolTool &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_SetDomainsToRecadre(self, *args)


    def AddSingularPoint(self, *args):
        """
        :param P:
        :type P: Blend_Point &
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_AddSingularPoint(self, *args)


    def Perform(self, *args):
        """
        :param F:
        :type F: Blend_Function &
        :param FInv:
        :type FInv: Blend_FuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param MaxStep:
        :type MaxStep: float
        :param TolGuide:
        :type TolGuide: float
        :param Soldep:
        :type Soldep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param Fleche:
        :type Fleche: float
        :param Appro: default value is Standard_False
        :type Appro: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_Perform(self, *args)


    def PerformFirstSection(self, *args):
        """
        :param F:
        :type F: Blend_Function &
        :param Pdep:
        :type Pdep: float
        :param ParDep:
        :type ParDep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param TolGuide:
        :type TolGuide: float
        :param Pos1:
        :type Pos1: TopAbs_State &
        :param Pos2:
        :type Pos2: TopAbs_State &
        :rtype: bool

        :param F:
        :type F: Blend_Function &
        :param FInv:
        :type FInv: Blend_FuncInv &
        :param Pdep:
        :type Pdep: float
        :param Pmax:
        :type Pmax: float
        :param ParDep:
        :type ParDep: math_Vector &
        :param Tolesp:
        :type Tolesp: float
        :param TolGuide:
        :type TolGuide: float
        :param RecOnS1:
        :type RecOnS1: bool
        :param RecOnS2:
        :type RecOnS2: bool
        :param Psol:
        :type Psol: float &
        :param ParSol:
        :type ParSol: math_Vector &
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_PerformFirstSection(self, *args)


    def Continu(self, *args):
        """
        :param F:
        :type F: Blend_Function &
        :param FInv:
        :type FInv: Blend_FuncInv &
        :param P:
        :type P: float
        :rtype: bool

        :param F:
        :type F: Blend_Function &
        :param FInv:
        :type FInv: Blend_FuncInv &
        :param P:
        :type P: float
        :param OnS1:
        :type OnS1: bool
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_Continu(self, *args)


    def Complete(self, *args):
        """
        :param F:
        :type F: Blend_Function &
        :param FInv:
        :type FInv: Blend_FuncInv &
        :param Pmin:
        :type Pmin: float
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_Complete(self, *args)


    def ClassificationOnS1(self, *args):
        """
        :param C:
        :type C: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_ClassificationOnS1(self, *args)


    def ClassificationOnS2(self, *args):
        """
        :param C:
        :type C: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_ClassificationOnS2(self, *args)


    def Check2d(self, *args):
        """
        :param C:
        :type C: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_Check2d(self, *args)


    def Check(self, *args):
        """
        :param C:
        :type C: bool
        :rtype: None

        """
        return _BRepBlend.BRepBlend_Walking_Check(self, *args)


    def TwistOnS1(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_TwistOnS1(self, *args)


    def TwistOnS2(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_TwistOnS2(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _BRepBlend.BRepBlend_Walking_IsDone(self, *args)


    def Line(self, *args):
        """
        :rtype: Handle_BRepBlend_Line

        """
        return _BRepBlend.BRepBlend_Walking_Line(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_Walking.SetDomainsToRecadre = new_instancemethod(_BRepBlend.BRepBlend_Walking_SetDomainsToRecadre, None, BRepBlend_Walking)
BRepBlend_Walking.AddSingularPoint = new_instancemethod(_BRepBlend.BRepBlend_Walking_AddSingularPoint, None, BRepBlend_Walking)
BRepBlend_Walking.Perform = new_instancemethod(_BRepBlend.BRepBlend_Walking_Perform, None, BRepBlend_Walking)
BRepBlend_Walking.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_Walking_PerformFirstSection, None, BRepBlend_Walking)
BRepBlend_Walking.Continu = new_instancemethod(_BRepBlend.BRepBlend_Walking_Continu, None, BRepBlend_Walking)
BRepBlend_Walking.Complete = new_instancemethod(_BRepBlend.BRepBlend_Walking_Complete, None, BRepBlend_Walking)
BRepBlend_Walking.ClassificationOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Walking_ClassificationOnS1, None, BRepBlend_Walking)
BRepBlend_Walking.ClassificationOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Walking_ClassificationOnS2, None, BRepBlend_Walking)
BRepBlend_Walking.Check2d = new_instancemethod(_BRepBlend.BRepBlend_Walking_Check2d, None, BRepBlend_Walking)
BRepBlend_Walking.Check = new_instancemethod(_BRepBlend.BRepBlend_Walking_Check, None, BRepBlend_Walking)
BRepBlend_Walking.TwistOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Walking_TwistOnS1, None, BRepBlend_Walking)
BRepBlend_Walking.TwistOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Walking_TwistOnS2, None, BRepBlend_Walking)
BRepBlend_Walking.IsDone = new_instancemethod(_BRepBlend.BRepBlend_Walking_IsDone, None, BRepBlend_Walking)
BRepBlend_Walking.Line = new_instancemethod(_BRepBlend.BRepBlend_Walking_Line, None, BRepBlend_Walking)
BRepBlend_Walking._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_Walking__kill_pointed, None, BRepBlend_Walking)
BRepBlend_Walking_swigregister = _BRepBlend.BRepBlend_Walking_swigregister
BRepBlend_Walking_swigregister(BRepBlend_Walking)

class BRepBlend_AppFunc(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: Handle_BRepBlend_Line &
        :param Func:
        :type Func: Blend_Function &
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :rtype: None

        """
        _BRepBlend.BRepBlend_AppFunc_swiginit(self, _BRepBlend.new_BRepBlend_AppFunc(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_AppFunc self)"""
        return _BRepBlend.BRepBlend_AppFunc__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_AppFunc self) -> Handle_BRepBlend_AppFunc"""
        return _BRepBlend.BRepBlend_AppFunc_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppFunc._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppFunc__kill_pointed, None, BRepBlend_AppFunc)
BRepBlend_AppFunc.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_AppFunc_GetHandle, None, BRepBlend_AppFunc)
BRepBlend_AppFunc_swigregister = _BRepBlend.BRepBlend_AppFunc_swigregister
BRepBlend_AppFunc_swigregister(BRepBlend_AppFunc)

class Handle_BRepBlend_AppFunc(Handle_BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_AppFunc_swiginit(self, _BRepBlend.new_Handle_BRepBlend_AppFunc(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_AppFunc_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_AppFunc.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFunc_Nullify, None, Handle_BRepBlend_AppFunc)
Handle_BRepBlend_AppFunc.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFunc_IsNull, None, Handle_BRepBlend_AppFunc)
Handle_BRepBlend_AppFunc.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFunc_GetObject, None, Handle_BRepBlend_AppFunc)
Handle_BRepBlend_AppFunc._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFunc__kill_pointed, None, Handle_BRepBlend_AppFunc)
Handle_BRepBlend_AppFunc_swigregister = _BRepBlend.Handle_BRepBlend_AppFunc_swigregister
Handle_BRepBlend_AppFunc_swigregister(Handle_BRepBlend_AppFunc)

def Handle_BRepBlend_AppFunc_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_AppFunc_DownCast(AnObject)
Handle_BRepBlend_AppFunc_DownCast = _BRepBlend.Handle_BRepBlend_AppFunc_DownCast

class BRepBlend_AppFuncRst(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: Handle_BRepBlend_Line &
        :param Func:
        :type Func: Blend_SurfRstFunction &
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :rtype: None

        """
        _BRepBlend.BRepBlend_AppFuncRst_swiginit(self, _BRepBlend.new_BRepBlend_AppFuncRst(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_AppFuncRst self)"""
        return _BRepBlend.BRepBlend_AppFuncRst__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_AppFuncRst self) -> Handle_BRepBlend_AppFuncRst"""
        return _BRepBlend.BRepBlend_AppFuncRst_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppFuncRst._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRst__kill_pointed, None, BRepBlend_AppFuncRst)
BRepBlend_AppFuncRst.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRst_GetHandle, None, BRepBlend_AppFuncRst)
BRepBlend_AppFuncRst_swigregister = _BRepBlend.BRepBlend_AppFuncRst_swigregister
BRepBlend_AppFuncRst_swigregister(BRepBlend_AppFuncRst)

class Handle_BRepBlend_AppFuncRst(Handle_BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_AppFuncRst_swiginit(self, _BRepBlend.new_Handle_BRepBlend_AppFuncRst(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_AppFuncRst_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_AppFuncRst.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRst_Nullify, None, Handle_BRepBlend_AppFuncRst)
Handle_BRepBlend_AppFuncRst.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRst_IsNull, None, Handle_BRepBlend_AppFuncRst)
Handle_BRepBlend_AppFuncRst.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRst_GetObject, None, Handle_BRepBlend_AppFuncRst)
Handle_BRepBlend_AppFuncRst._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRst__kill_pointed, None, Handle_BRepBlend_AppFuncRst)
Handle_BRepBlend_AppFuncRst_swigregister = _BRepBlend.Handle_BRepBlend_AppFuncRst_swigregister
Handle_BRepBlend_AppFuncRst_swigregister(Handle_BRepBlend_AppFuncRst)

def Handle_BRepBlend_AppFuncRst_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_AppFuncRst_DownCast(AnObject)
Handle_BRepBlend_AppFuncRst_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRst_DownCast

class BRepBlend_AppFuncRstRst(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: Handle_BRepBlend_Line &
        :param Func:
        :type Func: Blend_RstRstFunction &
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :rtype: None

        """
        _BRepBlend.BRepBlend_AppFuncRstRst_swiginit(self, _BRepBlend.new_BRepBlend_AppFuncRstRst(*args))

    def _kill_pointed(self):
        """_kill_pointed(BRepBlend_AppFuncRstRst self)"""
        return _BRepBlend.BRepBlend_AppFuncRstRst__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(BRepBlend_AppFuncRstRst self) -> Handle_BRepBlend_AppFuncRstRst"""
        return _BRepBlend.BRepBlend_AppFuncRstRst_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepBlend_AppFuncRstRst._kill_pointed = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRstRst__kill_pointed, None, BRepBlend_AppFuncRstRst)
BRepBlend_AppFuncRstRst.GetHandle = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRstRst_GetHandle, None, BRepBlend_AppFuncRstRst)
BRepBlend_AppFuncRstRst_swigregister = _BRepBlend.BRepBlend_AppFuncRstRst_swigregister
BRepBlend_AppFuncRstRst_swigregister(BRepBlend_AppFuncRstRst)

class Handle_BRepBlend_AppFuncRstRst(Handle_BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.Handle_BRepBlend_AppFuncRstRst_swiginit(self, _BRepBlend.new_Handle_BRepBlend_AppFuncRstRst(*args))
    DownCast = staticmethod(_BRepBlend.Handle_BRepBlend_AppFuncRstRst_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepBlend_AppFuncRstRst.Nullify = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRstRst_Nullify, None, Handle_BRepBlend_AppFuncRstRst)
Handle_BRepBlend_AppFuncRstRst.IsNull = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRstRst_IsNull, None, Handle_BRepBlend_AppFuncRstRst)
Handle_BRepBlend_AppFuncRstRst.GetObject = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRstRst_GetObject, None, Handle_BRepBlend_AppFuncRstRst)
Handle_BRepBlend_AppFuncRstRst._kill_pointed = new_instancemethod(_BRepBlend.Handle_BRepBlend_AppFuncRstRst__kill_pointed, None, Handle_BRepBlend_AppFuncRstRst)
Handle_BRepBlend_AppFuncRstRst_swigregister = _BRepBlend.Handle_BRepBlend_AppFuncRstRst_swigregister
Handle_BRepBlend_AppFuncRstRst_swigregister(Handle_BRepBlend_AppFuncRstRst)

def Handle_BRepBlend_AppFuncRstRst_DownCast(AnObject):
    return _BRepBlend.Handle_BRepBlend_AppFuncRstRst_DownCast(AnObject)
Handle_BRepBlend_AppFuncRstRst_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRstRst_DownCast



