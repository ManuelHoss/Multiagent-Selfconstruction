# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepFilletAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepFilletAPI', [dirname(__file__)])
        except ImportError:
            import _BRepFilletAPI
            return _BRepFilletAPI
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepFilletAPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepFilletAPI = swig_import_helper()
    del swig_import_helper
else:
    import _BRepFilletAPI
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFilletAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepFilletAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepFilletAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepFilletAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepFilletAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepFilletAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepFilletAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepFilletAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepFilletAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepFilletAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepFilletAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepFilletAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.BRepBuilderAPI
import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.TopTools
import OCC.Message
import OCC.BRepTools
import OCC.Bnd
import OCC.BRep
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.ChFiDS
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.BRepAdaptor
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.Law
import OCC.ChFi2d
import OCC.TopOpeBRepBuild
import OCC.TopOpeBRepTool
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.IntCurvesFace
import OCC.Extrema
import OCC.TopOpeBRepDS
import OCC.ChFi3d
import OCC.GeomFill
import OCC.Convert
import OCC.AppBlend
import OCC.Approx
import OCC.AppCont
import OCC.AppParCurves
import OCC.TColGeom
import OCC.BRepBlend
import OCC.Blend
import OCC.BlendFunc
class BRepFilletAPI_LocalOperation(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Add(self, *args):
        """
        * Adds a contour in the builder (builds a contour of tangent edges).

        :param E:
        :type E: TopoDS_Edge &
        :rtype: void

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Add(self, *args)


    def ResetContour(self, *args):
        """
        * Reset the contour of index IC, there is nomore information in the contour.

        :param IC:
        :type IC: int
        :rtype: void

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_ResetContour(self, *args)


    def NbContours(self, *args):
        """
        * Number of contours.

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbContours(self, *args)


    def Contour(self, *args):
        """
        * Returns the index of the contour containing the edge E, returns 0 if E doesn't belong to any contour.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Contour(self, *args)


    def NbEdges(self, *args):
        """
        * Number of Edges in the contour I.

        :param I:
        :type I: int
        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbEdges(self, *args)


    def Edge(self, *args):
        """
        * Returns the Edge J in the contour I.

        :param I:
        :type I: int
        :param J:
        :type J: int
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Edge(self, *args)


    def Remove(self, *args):
        """
        * remove the contour containing the Edge E.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: void

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Remove(self, *args)


    def Length(self, *args):
        """
        * returns the length the contour of index IC.

        :param IC:
        :type IC: int
        :rtype: float

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Length(self, *args)


    def FirstVertex(self, *args):
        """
        * Returns the first Vertex of the contour of index IC.

        :param IC:
        :type IC: int
        :rtype: TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        * Returns the last Vertex of the contour of index IC.

        :param IC:
        :type IC: int
        :rtype: TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_LastVertex(self, *args)


    def Abscissa(self, *args):
        """
        * returns the abscissa of the vertex V on the contour of index IC.

        :param IC:
        :type IC: int
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: float

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Abscissa(self, *args)


    def RelativeAbscissa(self, *args):
        """
        * returns the relative abscissa([0.,1.]) of the vertex V on the contour of index IC.

        :param IC:
        :type IC: int
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: float

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_RelativeAbscissa(self, *args)


    def ClosedAndTangent(self, *args):
        """
        * returns true if the contour of index IC is closed an tangent.

        :param IC:
        :type IC: int
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_ClosedAndTangent(self, *args)


    def Closed(self, *args):
        """
        * returns true if the contour of index IC is closed

        :param IC:
        :type IC: int
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Closed(self, *args)


    def Reset(self, *args):
        """
        * Reset all the fields updated by Build operation and leave the algorithm in the same state than before build call. It allows contours and radius modifications to build the result another time.

        :rtype: void

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Reset(self, *args)


    def Simulate(self, *args):
        """
        :param IC:
        :type IC: int
        :rtype: void

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        :param IC:
        :type IC: int
        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbSurf(self, *args)


    def Sect(self, *args):
        """
        :param IC:
        :type IC: int
        :param IS:
        :type IS: int
        :rtype: Handle_ChFiDS_SecHArray1

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Sect(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFilletAPI_LocalOperation.Add = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Add, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.ResetContour = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_ResetContour, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.NbContours = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_NbContours, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Contour = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Contour, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.NbEdges = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_NbEdges, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Edge = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Edge, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Remove = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Remove, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Length = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Length, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.FirstVertex = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_FirstVertex, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.LastVertex = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_LastVertex, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Abscissa = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Abscissa, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.RelativeAbscissa = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_RelativeAbscissa, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.ClosedAndTangent = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_ClosedAndTangent, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Closed = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Closed, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Reset = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Reset, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Simulate = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Simulate, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.NbSurf = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_NbSurf, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation.Sect = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation_Sect, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation._kill_pointed = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_LocalOperation__kill_pointed, None, BRepFilletAPI_LocalOperation)
BRepFilletAPI_LocalOperation_swigregister = _BRepFilletAPI.BRepFilletAPI_LocalOperation_swigregister
BRepFilletAPI_LocalOperation_swigregister(BRepFilletAPI_LocalOperation)

class BRepFilletAPI_MakeFillet2d(OCC.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes an empty algorithm for computing fillets and chamfers. The face on which the fillets and chamfers are built is defined using the Init function. The vertices on which fillets or chamfers are built are defined using the AddFillet or AddChamfer function. Warning The status of the initialization, as given by the Status function, can be one of the following: - ChFi2d_Ready if the initialization is correct, - ChFi2d_NotPlanar if F is not planar, - ChFi2d_NoFace if F is a null face.

        :rtype: None

        * Initializes an algorithm for computing fillets and chamfers on the face F. The vertices on which fillets or chamfers are built are defined using the AddFillet or AddChamfer function. Warning The status of the initialization, as given by the Status function, can be one of the following: - ChFi2d_Ready if the initialization is correct, - ChFi2d_NotPlanar if F is not planar, - ChFi2d_NoFace if F is a null face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_swiginit(self, _BRepFilletAPI.new_BRepFilletAPI_MakeFillet2d(*args))

    def Init(self, *args):
        """
        * Initializes this algorithm for constructing fillets or chamfers with the face F. Warning The status of the initialization, as given by the Status function, can be one of the following: - ChFi2d_Ready if the initialization is correct, - ChFi2d_NotPlanar if F is not planar, - ChFi2d_NoFace if F is a null face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * This initialize method allow to init the builder from a face <RefFace> and another face <ModFace> which derive from <RefFace>. This is usefull to modify a fillet or a chamfer already created on <ModFace> .

        :param RefFace:
        :type RefFace: TopoDS_Face &
        :param ModFace:
        :type ModFace: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Init(self, *args)


    def AddFillet(self, *args):
        """
        * Adds a fillet of radius Radius between the two edges adjacent to the vertex V on the face modified by this algorithm. The two edges do not need to be rectilinear. This function returns the fillet and builds the resulting face. Warning The status of the construction, as given by the Status function, can be one of the following: - ChFi2d_IsDone if the fillet is built, - ChFi2d_ConnexionError if V does not belong to the initial face, - ChFi2d_ComputationError if Radius is too large to build a fillet between the two adjacent edges, - ChFi2d_NotAuthorized - if one of the two edges connected to V is a fillet or chamfer, or - if a curve other than a straight line or an arc of a circle is used as E, E1 or E2. Do not use the returned fillet if the status of the construction is not ChFi2d_IsDone. Exceptions Standard_NegativeValue if Radius is less than or equal to zero.

        :param V:
        :type V: TopoDS_Vertex &
        :param Radius:
        :type Radius: float
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddFillet(self, *args)


    def ModifyFillet(self, *args):
        """
        * Assigns the radius Radius to the fillet Fillet already built on the face modified by this algorithm. This function returns the new fillet and modifies the existing face. Warning The status of the construction, as given by the Status function, can be one of the following: - ChFi2d_IsDone if the new fillet is built, - ChFi2d_ConnexionError if Fillet does not belong to the existing face, - ChFi2d_ComputationError if Radius is too large to build a fillet between the two adjacent edges. Do not use the returned fillet if the status of the construction is not ChFi2d_IsDone. Exceptions Standard_NegativeValue if Radius is less than or equal to zero.

        :param Fillet:
        :type Fillet: TopoDS_Edge &
        :param Radius:
        :type Radius: float
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyFillet(self, *args)


    def RemoveFillet(self, *args):
        """
        * Removes the fillet Fillet already built on the face modified by this algorithm. This function returns the vertex connecting the two adjacent edges of Fillet and modifies the existing face. Warning - The returned vertex is only valid if the Status function returns ChFi2d_IsDone. - A null vertex is returned if the edge Fillet does not belong to the initial face.

        :param Fillet:
        :type Fillet: TopoDS_Edge &
        :rtype: TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveFillet(self, *args)


    def AddChamfer(self, *args):
        """
        * Adds a chamfer on the face modified by this algorithm between the two adjacent edges E1 and E2, where the extremities of the chamfer are on E1 and E2 at distances D1 and D2 respectively In cases where the edges are not rectilinear, distances are measured using the curvilinear abscissa of the edges and the angle is measured with respect to the tangent at the corresponding point. The angle Ang is given in radians. This function returns the chamfer and builds the resulting face.

        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :param D1:
        :type D1: float
        :param D2:
        :type D2: float
        :rtype: TopoDS_Edge

        * Adds a chamfer on the face modified by this algorithm between the two edges connected by the vertex V, where E is one of the two edges. The chamfer makes an angle Ang with E and one of its extremities is on E at distance D from V. In cases where the edges are not rectilinear, distances are measured using the curvilinear abscissa of the edges and the angle is measured with respect to the tangent at the corresponding point. The angle Ang is given in radians. This function returns the chamfer and builds the resulting face. Warning The status of the construction, as given by the Status function, can be one of the following: - ChFi2d_IsDone if the chamfer is built, - ChFi2d_ParametersError if D1, D2, D or Ang is less than or equal to zero, - ChFi2d_ConnexionError if: - the edge E, E1 or E2 does not belong to the initial face, or - the edges E1 and E2 are not adjacent, or - the vertex V is not one of the limit points of the edge E, - ChFi2d_ComputationError if the parameters of the chamfer are too large to build a chamfer between the two adjacent edges, - ChFi2d_NotAuthorized if: - the edge E1, E2 or one of the two edges connected to V is a fillet or chamfer, or - a curve other than a straight line or an arc of a circle is used as E, E1 or E2. Do not use the returned chamfer if the status of the construction is not ChFi2d_IsDone.

        :param E:
        :type E: TopoDS_Edge &
        :param V:
        :type V: TopoDS_Vertex &
        :param D:
        :type D: float
        :param Ang:
        :type Ang: float
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddChamfer(self, *args)


    def ModifyChamfer(self, *args):
        """
        * Modifies the chamfer Chamfer on the face modified by this algorithm, where: E1 and E2 are the two adjacent edges on which Chamfer is already built; the extremities of the new chamfer are on E1 and E2 at distances D1 and D2 respectively.

        :param Chamfer:
        :type Chamfer: TopoDS_Edge &
        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :param D1:
        :type D1: float
        :param D2:
        :type D2: float
        :rtype: TopoDS_Edge

        * Modifies the chamfer Chamfer on the face modified by this algorithm, where: E is one of the two adjacent edges on which Chamfer is already built; the new chamfer makes an angle Ang with E and one of its extremities is on E at distance D from the vertex on which the chamfer is built. In cases where the edges are not rectilinear, the distances are measured using the curvilinear abscissa of the edges and the angle is measured with respect to the tangent at the corresponding point. The angle Ang is given in radians. This function returns the new chamfer and modifies the existing face. Warning The status of the construction, as given by the Status function, can be one of the following: - ChFi2d_IsDone if the chamfer is built, - ChFi2d_ParametersError if D1, D2, D or Ang is less than or equal to zero, - ChFi2d_ConnexionError if: - the edge E, E1, E2 or Chamfer does not belong to the existing face, or - the edges E1 and E2 are not adjacent, - ChFi2d_ComputationError if the parameters of the chamfer are too large to build a chamfer between the two adjacent edges, - ChFi2d_NotAuthorized if E1 or E2 is a fillet or chamfer. Do not use the returned chamfer if the status of the construction is not ChFi2d_IsDone.

        :param Chamfer:
        :type Chamfer: TopoDS_Edge &
        :param E:
        :type E: TopoDS_Edge &
        :param D:
        :type D: float
        :param Ang:
        :type Ang: float
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyChamfer(self, *args)


    def RemoveChamfer(self, *args):
        """
        * Removes the chamfer Chamfer already built on the face modified by this algorithm. This function returns the vertex connecting the two adjacent edges of Chamfer and modifies the existing face. Warning - The returned vertex is only valid if the Status function returns ChFi2d_IsDone. - A null vertex is returned if the edge Chamfer does not belong to the initial face.

        :param Chamfer:
        :type Chamfer: TopoDS_Edge &
        :rtype: TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveChamfer(self, *args)


    def IsModified(self, *args):
        """
        * Returns true if the edge E on the face modified by this algorithm is chamfered or filleted. Warning Returns false if E does not belong to the face modified by this algorithm.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_IsModified(self, *args)


    def FilletEdges(self, *args):
        """
        * Returns the table of fillets on the face modified by this algorithm.

        :rtype: TopTools_SequenceOfShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_FilletEdges(self, *args)


    def NbFillet(self, *args):
        """
        * Returns the number of fillets on the face modified by this algorithm.

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbFillet(self, *args)


    def ChamferEdges(self, *args):
        """
        * Returns the table of chamfers on the face modified by this algorithm.

        :rtype: TopTools_SequenceOfShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ChamferEdges(self, *args)


    def NbChamfer(self, *args):
        """
        * Returns the number of chamfers on the face modified by this algorithm.

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbChamfer(self, *args)


    def NbCurves(self, *args):
        """
        * returns the number of new curves after the shape creation.

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbCurves(self, *args)


    def NewEdges(self, *args):
        """
        * Return the Edges created for curve I.

        :param I:
        :type I: int
        :rtype: TopTools_ListOfShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NewEdges(self, *args)


    def HasDescendant(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_HasDescendant(self, *args)


    def DescendantEdge(self, *args):
        """
        * Returns the chamfered or filleted edge built from the edge E on the face modified by this algorithm. If E has not been modified, this function returns E. Exceptions Standard_NoSuchObject if the edge E does not belong to the initial face.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_DescendantEdge(self, *args)


    def BasisEdge(self, *args):
        """
        * Returns the basis edge on the face modified by this algorithm from which the chamfered or filleted edge E is built. If E has not been modified, this function returns E. Warning E is returned if it does not belong to the initial face.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_BasisEdge(self, *args)


    def Status(self, *args):
        """
        :rtype: ChFi2d_ConstructionError

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Status(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFilletAPI_MakeFillet2d.Init = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Init, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.AddFillet = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddFillet, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.ModifyFillet = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyFillet, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.RemoveFillet = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveFillet, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.AddChamfer = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddChamfer, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.ModifyChamfer = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyChamfer, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.RemoveChamfer = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveChamfer, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.IsModified = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_IsModified, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.FilletEdges = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_FilletEdges, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.NbFillet = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbFillet, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.ChamferEdges = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ChamferEdges, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.NbChamfer = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbChamfer, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.NbCurves = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbCurves, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.NewEdges = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NewEdges, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.HasDescendant = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_HasDescendant, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.DescendantEdge = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_DescendantEdge, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.BasisEdge = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_BasisEdge, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d.Status = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Status, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d._kill_pointed = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet2d__kill_pointed, None, BRepFilletAPI_MakeFillet2d)
BRepFilletAPI_MakeFillet2d_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_swigregister
BRepFilletAPI_MakeFillet2d_swigregister(BRepFilletAPI_MakeFillet2d)

class BRepFilletAPI_MakeChamfer(BRepFilletAPI_LocalOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes an algorithm for computing chamfers on the shape S. The edges on which chamfers are built are defined using the Add function.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _BRepFilletAPI.BRepFilletAPI_MakeChamfer_swiginit(self, _BRepFilletAPI.new_BRepFilletAPI_MakeChamfer(*args))

    def SetDist(self, *args):
        """
        * Sets the distances Dis1 and Dis2 which give the parameters of the chamfer along the contour of index IC generated using the Add function in the internal data structure of this algorithm. The face F identifies the side where Dis1 is measured. Warning Nothing is done if either the edge E or the face F does not belong to the initial shape.

        :param Dis:
        :type Dis: float
        :param IC:
        :type IC: int
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDist(self, *args)


    def GetDist(self, *args):
        """
        :param IC:
        :type IC: int
        :param Dis:
        :type Dis: float &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDist(self, *args)


    def Add(self, *args):
        """
        * Adds edge E to the table of edges used by this algorithm to build chamfers, where the parameters of the chamfer must be set after the

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds edge E to the table of edges used by this algorithm to build chamfers, where the parameters of the chamfer are given by the two distances Dis1 and Dis2; the face F identifies the side where Dis1 is measured. The Add function results in a contour being built by propagation from the edge E (i.e. the contour contains at least this edge). This contour is composed of edges of the shape which are tangential to one another and which delimit two series of tangential faces, with one series of faces being located on either side of the contour. Warning Nothing is done if edge E or the face F does not belong to the initial shape.

        :param Dis:
        :type Dis: float
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Adds a fillet contour in the builder (builds a contour of tangent edges to <E> and sets the two distances <Dis1> and <Dis2> ( parameters of the chamfer ) ).

        :param Dis1:
        :type Dis1: float
        :param Dis2:
        :type Dis2: float
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Add(self, *args)


    def SetDists(self, *args):
        """
        * Sets the distances Dis1 and Dis2 which give the parameters of the chamfer along the contour of index IC generated using the Add function in the internal data structure of this algorithm. The face F identifies the side where Dis1 is measured. Warning Nothing is done if either the edge E or the face F does not belong to the initial shape.

        :param Dis1:
        :type Dis1: float
        :param Dis2:
        :type Dis2: float
        :param IC:
        :type IC: int
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDists(self, *args)


    def Dists(self, *args):
        """
        * Returns the distances Dis1 and Dis2 which give the parameters of the chamfer along the contour of index IC in the internal data structure of this algorithm. Warning -1. is returned if IC is outside the bounds of the table of contours.

        :param IC:
        :type IC: int
        :param Dis1:
        :type Dis1: float &
        :param Dis2:
        :type Dis2: float &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Dists(self, *args)


    def AddDA(self, *args):
        """
        * Adds a fillet contour in the builder (builds a contour of tangent edges to <E> and sets the distance <Dis1> and angle <Angle> ( parameters of the chamfer ) ).

        :param Dis:
        :type Dis: float
        :param Angle:
        :type Angle: float
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_AddDA(self, *args)


    def SetDistAngle(self, *args):
        """
        * set the distance <Dis> and <Angle> of the fillet contour of index <IC> in the DS with <Dis> on <F>. if the face <F> is not one of common faces of an edge of the contour <IC>

        :param Dis:
        :type Dis: float
        :param Angle:
        :type Angle: float
        :param IC:
        :type IC: int
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDistAngle(self, *args)


    def GetDistAngle(self, *args):
        """
        * gives the distances <Dis> and <Angle> of the fillet contour of index <IC> in the DS

        :param IC:
        :type IC: int
        :param Dis:
        :type Dis: float &
        :param Angle:
        :type Angle: float &
        :param DisOnFace1:
        :type DisOnFace1: bool
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDistAngle(self, *args)


    def IsSymetric(self, *args):
        """
        * return True if chamfer symetric false else.

        :param IC:
        :type IC: int
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsSymetric(self, *args)


    def IsTwoDistances(self, *args):
        """
        * return True if chamfer is made with two distances false else.

        :param IC:
        :type IC: int
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsTwoDistances(self, *args)


    def IsDistanceAngle(self, *args):
        """
        * return True if chamfer is made with distance and angle false else.

        :param IC:
        :type IC: int
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsDistanceAngle(self, *args)


    def Builder(self, *args):
        """
        * Returns the internal filleting algorithm.

        :rtype: Handle_TopOpeBRepBuild_HBuilder

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Builder(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFilletAPI_MakeChamfer.SetDist = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDist, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.GetDist = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDist, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.Add = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_Add, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.SetDists = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDists, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.Dists = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_Dists, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.AddDA = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_AddDA, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.SetDistAngle = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDistAngle, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.GetDistAngle = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDistAngle, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.IsSymetric = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsSymetric, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.IsTwoDistances = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsTwoDistances, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.IsDistanceAngle = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsDistanceAngle, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer.Builder = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer_Builder, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer._kill_pointed = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeChamfer__kill_pointed, None, BRepFilletAPI_MakeChamfer)
BRepFilletAPI_MakeChamfer_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeChamfer_swigregister
BRepFilletAPI_MakeChamfer_swigregister(BRepFilletAPI_MakeChamfer)

class BRepFilletAPI_MakeFillet(BRepFilletAPI_LocalOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes the computation of the fillets. <FShape> sets the type of fillet surface. The default value is ChFi3d_Rational (classical nurbs representation of circles). ChFi3d_QuasiAngular corresponds to a nurbs representation of circles which parameterisation matches the circle one. ChFi3d_Polynomial corresponds to a polynomial representation of circles.

        :param S:
        :type S: TopoDS_Shape &
        :param FShape: default value is ChFi3d_Rational
        :type FShape: ChFi3d_FilletShape
        :rtype: None

        """
        _BRepFilletAPI.BRepFilletAPI_MakeFillet_swiginit(self, _BRepFilletAPI.new_BRepFilletAPI_MakeFillet(*args))

    def SetParams(self, *args):
        """
        :param Tang:
        :type Tang: float
        :param Tesp:
        :type Tesp: float
        :param T2d:
        :type T2d: float
        :param TApp3d:
        :type TApp3d: float
        :param TolApp2d:
        :type TolApp2d: float
        :param Fleche:
        :type Fleche: float
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetParams(self, *args)


    def SetContinuity(self, *args):
        """
        * Changes the parameters of continiuity InternalContinuity to produce fillet'surfaces with an continuity Ci (i=0,1 or 2). By defaultInternalContinuity = GeomAbs_C1. AngularTolerance is the G1 tolerance between fillet and support'faces.

        :param InternalContinuity:
        :type InternalContinuity: GeomAbs_Shape
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetContinuity(self, *args)


    def Add(self, *args):
        """
        * Adds a fillet contour in the builder (builds a contour of tangent edges). The Radius must be set after.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds a fillet description in the builder - builds a contour of tangent edges, - sets the radius.

        :param Radius:
        :type Radius: float
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds a fillet description in the builder - builds a contour of tangent edges, - sets a linear radius evolution law between  the first and last vertex of the spine.

        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds a fillet description in the builder - builds a contour of tangent edges, - sest the radius evolution law.

        :param L:
        :type L: Handle_Law_Function &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Adds a fillet description in the builder - builds a contour of tangent edges, - sets the radius evolution law interpolating the values given in the array UandR :  p2d.X() = relative parameter on the spine [0,1] p2d.Y() = value of the radius.

        :param UandR:
        :type UandR: TColgp_Array1OfPnt2d
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Add(self, *args)


    def IsConstant(self, *args):
        """
        * Returns true if the radius of the fillet along the contour of index IC in the internal data structure of this algorithm is constant, Warning False is returned if IC is outside the bounds of the table of contours or if E does not belong to the contour of index IC.

        :param IC:
        :type IC: int
        :rtype: bool

        * Returns true if the radius of the fillet along the edge E of the contour of index IC in the internal data structure of this algorithm is constant. Warning False is returned if IC is outside the bounds of the table of contours or if E does not belong to the contour of index IC.

        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_IsConstant(self, *args)


    def Radius(self, *args):
        """
        * Returns the radius of the fillet along the contour of index IC in the internal data structure of this algorithm Warning - Use this function only if the radius is constant. - -1. is returned if IC is outside the bounds of the table of contours or if E does not belong to the contour of index IC.

        :param IC:
        :type IC: int
        :rtype: float

        * Returns the radius of the fillet along the edge E of the contour of index IC in the internal data structure of this algorithm. Warning - Use this function only if the radius is constant. - -1 is returned if IC is outside the bounds of the table of contours or if E does not belong to the contour of index IC.

        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :rtype: float

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Radius(self, *args)


    def SetRadius(self, *args):
        """
        * Sets the parameters of the fillet along the contour of index IC generated using the Add function in the internal data structure of this algorithm, where Radius is the radius of the fillet.

        :param Radius:
        :type Radius: float
        :param IC:
        :type IC: int
        :param IinC:
        :type IinC: int
        :rtype: None

        * Sets the parameters of the fillet along the contour of index IC generated using the Add function in the internal data structure of this algorithm, where the radius of the fillet evolves according to a linear evolution law defined from R1 to R2, between the first and last vertices of the contour of index IC.

        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :param IC:
        :type IC: int
        :param IinC:
        :type IinC: int
        :rtype: None

        * Sets the parameters of the fillet along the contour of index IC generated using the Add function in the internal data structure of this algorithm, where the radius of the fillet evolves according to the evolution law L, between the first and last vertices of the contour of index IC.

        :param L:
        :type L: Handle_Law_Function &
        :param IC:
        :type IC: int
        :param IinC:
        :type IinC: int
        :rtype: None

        * Sets the parameters of the fillet along the contour of index IC generated using the Add function in the internal data structure of this algorithm, where the radius of the fillet evolves according to the evolution law which interpolates the set of parameter and radius pairs given in the array UandR as follows: - the X coordinate of a point in UandR defines a relative parameter on the contour (i.e. a parameter between 0 and 1), - the Y coordinate of a point in UandR gives the corresponding value of the radius, and the radius evolves between the first and last vertices of the contour of index IC.

        :param UandR:
        :type UandR: TColgp_Array1OfPnt2d
        :param IC:
        :type IC: int
        :param IinC:
        :type IinC: int
        :rtype: None

        * Assigns Radius as the radius of the fillet on the edge E

        :param Radius:
        :type Radius: float
        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        :param Radius:
        :type Radius: float
        :param IC:
        :type IC: int
        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetRadius(self, *args)


    def GetBounds(self, *args):
        """
        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: float &
        :param L:
        :type L: float &
        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetBounds(self, *args)


    def GetLaw(self, *args):
        """
        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :rtype: Handle_Law_Function

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetLaw(self, *args)


    def SetLaw(self, *args):
        """
        :param IC:
        :type IC: int
        :param E:
        :type E: TopoDS_Edge &
        :param L:
        :type L: Handle_Law_Function &
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetLaw(self, *args)


    def SetFilletShape(self, *args):
        """
        * Assigns FShape as the type of fillet shape built by this algorithm.

        :param FShape:
        :type FShape: ChFi3d_FilletShape
        :rtype: None

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetFilletShape(self, *args)


    def GetFilletShape(self, *args):
        """
        * Returns the type of fillet shape built by this algorithm.

        :rtype: ChFi3d_FilletShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetFilletShape(self, *args)


    def Builder(self, *args):
        """
        * Returns the internal topology building algorithm.

        :rtype: Handle_TopOpeBRepBuild_HBuilder

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Builder(self, *args)


    def NbSurfaces(self, *args):
        """
        * returns the number of surfaces after the shape creation.

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbSurfaces(self, *args)


    def NewFaces(self, *args):
        """
        * Return the faces created for surface <I>.

        :param I:
        :type I: int
        :rtype: TopTools_ListOfShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NewFaces(self, *args)


    def NbFaultyContours(self, *args):
        """
        * Returns the number of contours where the computation of the fillet failed

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyContours(self, *args)


    def FaultyContour(self, *args):
        """
        * for each I in [1.. NbFaultyContours] returns the index IC of the contour where the computation of the fillet failed. the method NbEdges(IC) gives the number of edges in the contour IC the method Edge(IC,ie) gives the edge number ie of the contour IC

        :param I:
        :type I: int
        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyContour(self, *args)


    def NbComputedSurfaces(self, *args):
        """
        * returns the number of surfaces which have been computed on the contour IC

        :param IC:
        :type IC: int
        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbComputedSurfaces(self, *args)


    def ComputedSurface(self, *args):
        """
        * returns the surface number IS concerning the contour IC

        :param IC:
        :type IC: int
        :param IS:
        :type IS: int
        :rtype: Handle_Geom_Surface

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_ComputedSurface(self, *args)


    def NbFaultyVertices(self, *args):
        """
        * returns the number of vertices where the computation failed

        :rtype: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyVertices(self, *args)


    def FaultyVertex(self, *args):
        """
        * returns the vertex where the computation failed

        :param IV:
        :type IV: int
        :rtype: TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyVertex(self, *args)


    def HasResult(self, *args):
        """
        * returns true if a part of the result has been computed if the filling in a corner failed a shape with a hole is returned

        :rtype: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_HasResult(self, *args)


    def BadShape(self, *args):
        """
        * if (HasResult()) returns the partial result

        :rtype: TopoDS_Shape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_BadShape(self, *args)


    def StripeStatus(self, *args):
        """
        * returns the status concerning the contour IC in case of error ChFiDS_Ok : the computation is Ok ChFiDS_StartsolFailure : the computation can't start, perhaps the  the radius is too big ChFiDS_TwistedSurface : the computation failed because of a twisted  surface ChFiDS_WalkingFailure : there is a problem in the walking ChFiDS_Error: other error different from above

        :param IC:
        :type IC: int
        :rtype: ChFiDS_ErrorStatus

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_StripeStatus(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepFilletAPI_MakeFillet.SetParams = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_SetParams, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.SetContinuity = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_SetContinuity, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.Add = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_Add, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.IsConstant = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_IsConstant, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.Radius = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_Radius, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.SetRadius = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_SetRadius, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.GetBounds = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_GetBounds, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.GetLaw = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_GetLaw, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.SetLaw = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_SetLaw, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.SetFilletShape = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_SetFilletShape, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.GetFilletShape = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_GetFilletShape, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.Builder = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_Builder, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.NbSurfaces = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_NbSurfaces, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.NewFaces = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_NewFaces, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.NbFaultyContours = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyContours, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.FaultyContour = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyContour, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.NbComputedSurfaces = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_NbComputedSurfaces, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.ComputedSurface = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_ComputedSurface, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.NbFaultyVertices = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyVertices, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.FaultyVertex = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyVertex, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.HasResult = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_HasResult, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.BadShape = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_BadShape, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet.StripeStatus = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet_StripeStatus, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet._kill_pointed = new_instancemethod(_BRepFilletAPI.BRepFilletAPI_MakeFillet__kill_pointed, None, BRepFilletAPI_MakeFillet)
BRepFilletAPI_MakeFillet_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeFillet_swigregister
BRepFilletAPI_MakeFillet_swigregister(BRepFilletAPI_MakeFillet)



