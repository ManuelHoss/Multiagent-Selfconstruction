# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _BRepPrim.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepPrim', [dirname(__file__)])
        except ImportError:
            import _BRepPrim
            return _BRepPrim
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepPrim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepPrim = swig_import_helper()
    del swig_import_helper
else:
    import _BRepPrim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepPrim.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_BRepPrim.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepPrim.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepPrim.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepPrim.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepPrim.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepPrim.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepPrim.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepPrim.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepPrim.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepPrim.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepPrim.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepPrim.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepPrim.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepPrim.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepPrim.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepPrim.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _BRepPrim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.BRep
import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.Primitives
class BRepPrim_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty, useless Builder. Necesseray for compilation.

        :rtype: None

        * Creates from a Builder.

        :param B:
        :type B: BRep_Builder &
        :rtype: None

        """
        _BRepPrim.BRepPrim_Builder_swiginit(self,_BRepPrim.new_BRepPrim_Builder(*args))
    def Builder(self, *args):
        """
        :rtype: BRep_Builder

        """
        return _BRepPrim.BRepPrim_Builder_Builder(self, *args)

    def MakeShell(self, *args):
        """
        * Make a empty Shell.

        :param S:
        :type S: TopoDS_Shell &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeShell(self, *args)

    def MakeFace(self, *args):
        """
        * Returns in <F> a Face built with the plane equation <P>. Used by all primitives.

        :param F:
        :type F: TopoDS_Face &
        :param P:
        :type P: gp_Pln
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeFace(self, *args)

    def MakeWire(self, *args):
        """
        * Returns in <W> an empty Wire.

        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeWire(self, *args)

    def MakeDegeneratedEdge(self, *args):
        """
        * Returns in <E> a degenerated edge.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeDegeneratedEdge(self, *args)

    def MakeEdge(self, *args):
        """
        * Returns in <E> an Edge built with the line equation <L>.

        :param E:
        :type E: TopoDS_Edge &
        :param L:
        :type L: gp_Lin
        :rtype: None

        * Returns in <E> an Edge built with the circle equation <C>.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: gp_Circ
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeEdge(self, *args)

    def SetPCurve(self, *args):
        """
        * Sets the line <L> to be the curve representing the edge <E> in the parametric space of the surface of <F>.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param L:
        :type L: gp_Lin2d
        :rtype: None

        * Sets the lines <L1,L2> to be the curves representing the edge <E> in the parametric space of the closed surface of <F>.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param L1:
        :type L1: gp_Lin2d
        :param L2:
        :type L2: gp_Lin2d
        :rtype: None

        * Sets the circle <C> to be the curve representing the edge <E> in the parametric space of the surface of <F>.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param C:
        :type C: gp_Circ2d
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_SetPCurve(self, *args)

    def MakeVertex(self, *args):
        """
        * Returns in <V> a Vertex built with the point <P>.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_MakeVertex(self, *args)

    def ReverseFace(self, *args):
        """
        * Reverses the Face <F>.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_ReverseFace(self, *args)

    def AddEdgeVertex(self, *args):
        """
        * Adds the Vertex <V> in the Edge <E>. <P> is the parameter of the vertex on the edge. If direct is False the Vertex is reversed.

        :param E:
        :type E: TopoDS_Edge &
        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :param direct:
        :type direct: bool
        :rtype: None

        * Adds the Vertex <V> in the Edge <E>. <P1,P2> are the parameters of the vertex on the closed edge.

        :param E:
        :type E: TopoDS_Edge &
        :param V:
        :type V: TopoDS_Vertex &
        :param P1:
        :type P1: float
        :param P2:
        :type P2: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_AddEdgeVertex(self, *args)

    def SetParameters(self, *args):
        """
        * <P1,P2> are the parameters of the vertex on the edge. The edge is a closed curve.

        :param E:
        :type E: TopoDS_Edge &
        :param V:
        :type V: TopoDS_Vertex &
        :param P1:
        :type P1: float
        :param P2:
        :type P2: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_SetParameters(self, *args)

    def AddWireEdge(self, *args):
        """
        * Adds the Edge <E> in the Wire <W>, if direct is False the Edge is reversed.

        :param W:
        :type W: TopoDS_Wire &
        :param E:
        :type E: TopoDS_Edge &
        :param direct:
        :type direct: bool
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_AddWireEdge(self, *args)

    def AddFaceWire(self, *args):
        """
        * Adds the Wire <W> in the Face <F>.

        :param F:
        :type F: TopoDS_Face &
        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_AddFaceWire(self, *args)

    def AddShellFace(self, *args):
        """
        * Adds the Face <F> in the Shell <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shell &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_AddShellFace(self, *args)

    def CompleteEdge(self, *args):
        """
        * This is called once an edge is completed. It gives the opportunity to perform any post treatment.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_CompleteEdge(self, *args)

    def CompleteWire(self, *args):
        """
        * This is called once a wire is completed. It gives the opportunity to perform any post treatment.

        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_CompleteWire(self, *args)

    def CompleteFace(self, *args):
        """
        * This is called once a face is completed. It gives the opportunity to perform any post treatment.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_CompleteFace(self, *args)

    def CompleteShell(self, *args):
        """
        * This is called once a shell is completed. It gives the opportunity to perform any post treatment.

        :param S:
        :type S: TopoDS_Shell &
        :rtype: None

        """
        return _BRepPrim.BRepPrim_Builder_CompleteShell(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Builder.Builder = new_instancemethod(_BRepPrim.BRepPrim_Builder_Builder,None,BRepPrim_Builder)
BRepPrim_Builder.MakeShell = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeShell,None,BRepPrim_Builder)
BRepPrim_Builder.MakeFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeFace,None,BRepPrim_Builder)
BRepPrim_Builder.MakeWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeWire,None,BRepPrim_Builder)
BRepPrim_Builder.MakeDegeneratedEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeDegeneratedEdge,None,BRepPrim_Builder)
BRepPrim_Builder.MakeEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeEdge,None,BRepPrim_Builder)
BRepPrim_Builder.SetPCurve = new_instancemethod(_BRepPrim.BRepPrim_Builder_SetPCurve,None,BRepPrim_Builder)
BRepPrim_Builder.MakeVertex = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeVertex,None,BRepPrim_Builder)
BRepPrim_Builder.ReverseFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_ReverseFace,None,BRepPrim_Builder)
BRepPrim_Builder.AddEdgeVertex = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddEdgeVertex,None,BRepPrim_Builder)
BRepPrim_Builder.SetParameters = new_instancemethod(_BRepPrim.BRepPrim_Builder_SetParameters,None,BRepPrim_Builder)
BRepPrim_Builder.AddWireEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddWireEdge,None,BRepPrim_Builder)
BRepPrim_Builder.AddFaceWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddFaceWire,None,BRepPrim_Builder)
BRepPrim_Builder.AddShellFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddShellFace,None,BRepPrim_Builder)
BRepPrim_Builder.CompleteEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteEdge,None,BRepPrim_Builder)
BRepPrim_Builder.CompleteWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteWire,None,BRepPrim_Builder)
BRepPrim_Builder.CompleteFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteFace,None,BRepPrim_Builder)
BRepPrim_Builder.CompleteShell = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteShell,None,BRepPrim_Builder)
BRepPrim_Builder._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Builder__kill_pointed,None,BRepPrim_Builder)
BRepPrim_Builder_swigregister = _BRepPrim.BRepPrim_Builder_swigregister
BRepPrim_Builder_swigregister(BRepPrim_Builder)

class BRepPrim_FaceBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param B:
        :type B: BRep_Builder &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        :param B:
        :type B: BRep_Builder &
        :param S:
        :type S: Handle_Geom_Surface &
        :param UMin:
        :type UMin: float
        :param UMax:
        :type UMax: float
        :param VMin:
        :type VMin: float
        :param VMax:
        :type VMax: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_FaceBuilder_swiginit(self,_BRepPrim.new_BRepPrim_FaceBuilder(*args))
    def Init(self, *args):
        """
        :param B:
        :type B: BRep_Builder &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        :param B:
        :type B: BRep_Builder &
        :param S:
        :type S: Handle_Geom_Surface &
        :param UMin:
        :type UMin: float
        :param UMax:
        :type UMax: float
        :param VMin:
        :type VMin: float
        :param VMax:
        :type VMax: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_FaceBuilder_Init(self, *args)

    def Face(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_FaceBuilder_Face(self, *args)

    def Edge(self, *args):
        """
        * Returns the edge of index <I> 1 - Edge VMin 2 - Edge UMax 3 - Edge VMax 4 - Edge UMin

        :param I:
        :type I: int
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_FaceBuilder_Edge(self, *args)

    def Vertex(self, *args):
        """
        * Returns the vertex of index <I> 1 - Vertex UMin,VMin 2 - Vertex UMax,VMin 3 - Vertex UMax,VMax 4 - Vertex UMin,VMax

        :param I:
        :type I: int
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_FaceBuilder_Vertex(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_FaceBuilder.Init = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Init,None,BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Face = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Face,None,BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Edge = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Edge,None,BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Vertex = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Vertex,None,BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder__kill_pointed,None,BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder_swigregister = _BRepPrim.BRepPrim_FaceBuilder_swigregister
BRepPrim_FaceBuilder_swigregister(BRepPrim_FaceBuilder)

class BRepPrim_GWedge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param B:
        :type B: BRepPrim_Builder &
        :param Axes:
        :type Axes: gp_Ax2
        :param dx:
        :type dx: float
        :param dy:
        :type dy: float
        :param dz:
        :type dz: float
        :rtype: None

        :param B:
        :type B: BRepPrim_Builder &
        :param Axes:
        :type Axes: gp_Ax2
        :param dx:
        :type dx: float
        :param dy:
        :type dy: float
        :param dz:
        :type dz: float
        :param ltx:
        :type ltx: float
        :rtype: None

        :param B:
        :type B: BRepPrim_Builder &
        :param Axes:
        :type Axes: gp_Ax2
        :param xmin:
        :type xmin: float
        :param ymin:
        :type ymin: float
        :param zmin:
        :type zmin: float
        :param z2min:
        :type z2min: float
        :param x2min:
        :type x2min: float
        :param xmax:
        :type xmax: float
        :param ymax:
        :type ymax: float
        :param zmax:
        :type zmax: float
        :param z2max:
        :type z2max: float
        :param x2max:
        :type x2max: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_GWedge_swiginit(self,_BRepPrim.new_BRepPrim_GWedge(*args))
    def Axes(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _BRepPrim.BRepPrim_GWedge_Axes(self, *args)

    def GetXMin(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetXMin(self, *args)

    def GetYMin(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetYMin(self, *args)

    def GetZMin(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetZMin(self, *args)

    def GetZ2Min(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetZ2Min(self, *args)

    def GetX2Min(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetX2Min(self, *args)

    def GetXMax(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetXMax(self, *args)

    def GetYMax(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetYMax(self, *args)

    def GetZMax(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetZMax(self, *args)

    def GetZ2Max(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetZ2Max(self, *args)

    def GetX2Max(self, *args):
        """
        :rtype: float

        """
        return _BRepPrim.BRepPrim_GWedge_GetX2Max(self, *args)

    def Open(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: None

        """
        return _BRepPrim.BRepPrim_GWedge_Open(self, *args)

    def Close(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: None

        """
        return _BRepPrim.BRepPrim_GWedge_Close(self, *args)

    def IsInfinite(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_GWedge_IsInfinite(self, *args)

    def Shell(self, *args):
        """
        :rtype: TopoDS_Shell

        """
        return _BRepPrim.BRepPrim_GWedge_Shell(self, *args)

    def HasFace(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_GWedge_HasFace(self, *args)

    def Face(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_GWedge_Face(self, *args)

    def Plane(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: gp_Pln

        """
        return _BRepPrim.BRepPrim_GWedge_Plane(self, *args)

    def HasWire(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_GWedge_HasWire(self, *args)

    def Wire(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_GWedge_Wire(self, *args)

    def HasEdge(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_GWedge_HasEdge(self, *args)

    def Edge(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_GWedge_Edge(self, *args)

    def Line(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :rtype: gp_Lin

        """
        return _BRepPrim.BRepPrim_GWedge_Line(self, *args)

    def HasVertex(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :param d3:
        :type d3: Primitives_Direction
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_GWedge_HasVertex(self, *args)

    def Vertex(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :param d3:
        :type d3: Primitives_Direction
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_GWedge_Vertex(self, *args)

    def Point(self, *args):
        """
        :param d1:
        :type d1: Primitives_Direction
        :param d2:
        :type d2: Primitives_Direction
        :param d3:
        :type d3: Primitives_Direction
        :rtype: gp_Pnt

        """
        return _BRepPrim.BRepPrim_GWedge_Point(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_GWedge.Axes = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Axes,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetXMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetXMin,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetYMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetYMin,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetZMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZMin,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetZ2Min = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZ2Min,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetX2Min = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetX2Min,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetXMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetXMax,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetYMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetYMax,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetZMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZMax,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetZ2Max = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZ2Max,None,BRepPrim_GWedge)
BRepPrim_GWedge.GetX2Max = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetX2Max,None,BRepPrim_GWedge)
BRepPrim_GWedge.Open = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Open,None,BRepPrim_GWedge)
BRepPrim_GWedge.Close = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Close,None,BRepPrim_GWedge)
BRepPrim_GWedge.IsInfinite = new_instancemethod(_BRepPrim.BRepPrim_GWedge_IsInfinite,None,BRepPrim_GWedge)
BRepPrim_GWedge.Shell = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Shell,None,BRepPrim_GWedge)
BRepPrim_GWedge.HasFace = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasFace,None,BRepPrim_GWedge)
BRepPrim_GWedge.Face = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Face,None,BRepPrim_GWedge)
BRepPrim_GWedge.Plane = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Plane,None,BRepPrim_GWedge)
BRepPrim_GWedge.HasWire = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasWire,None,BRepPrim_GWedge)
BRepPrim_GWedge.Wire = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Wire,None,BRepPrim_GWedge)
BRepPrim_GWedge.HasEdge = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasEdge,None,BRepPrim_GWedge)
BRepPrim_GWedge.Edge = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Edge,None,BRepPrim_GWedge)
BRepPrim_GWedge.Line = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Line,None,BRepPrim_GWedge)
BRepPrim_GWedge.HasVertex = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasVertex,None,BRepPrim_GWedge)
BRepPrim_GWedge.Vertex = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Vertex,None,BRepPrim_GWedge)
BRepPrim_GWedge.Point = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Point,None,BRepPrim_GWedge)
BRepPrim_GWedge._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_GWedge__kill_pointed,None,BRepPrim_GWedge)
BRepPrim_GWedge_swigregister = _BRepPrim.BRepPrim_GWedge_swigregister
BRepPrim_GWedge_swigregister(BRepPrim_GWedge)

class BRepPrim_OneAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Delete(self, *args):
        """
        :rtype: void

        """
        return _BRepPrim.BRepPrim_OneAxis_Delete(self, *args)

    def SetMeridianOffset(self, *args):
        """
        :param MeridianOffset: default value is 0
        :type MeridianOffset: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_OneAxis_SetMeridianOffset(self, *args)

    def Axes(self, *args):
        """
        :rtype: gp_Ax2

        :param A:
        :type A: gp_Ax2
        :rtype: None

        """
        return _BRepPrim.BRepPrim_OneAxis_Axes(self, *args)

    def Angle(self, *args):
        """
        :rtype: float

        :param A:
        :type A: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_OneAxis_Angle(self, *args)

    def VMin(self, *args):
        """
        :rtype: float

        :param V:
        :type V: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_OneAxis_VMin(self, *args)

    def VMax(self, *args):
        """
        :rtype: float

        :param V:
        :type V: float
        :rtype: None

        """
        return _BRepPrim.BRepPrim_OneAxis_VMax(self, *args)

    def MakeEmptyLateralFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_MakeEmptyLateralFace(self, *args)

    def MakeEmptyMeridianEdge(self, *args):
        """
        :param Ang:
        :type Ang: float
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_MakeEmptyMeridianEdge(self, *args)

    def SetMeridianPCurve(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: void

        """
        return _BRepPrim.BRepPrim_OneAxis_SetMeridianPCurve(self, *args)

    def MeridianValue(self, *args):
        """
        :param V:
        :type V: float
        :rtype: gp_Pnt2d

        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianValue(self, *args)

    def MeridianOnAxis(self, *args):
        """
        :param V:
        :type V: float
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianOnAxis(self, *args)

    def MeridianClosed(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianClosed(self, *args)

    def VMaxInfinite(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_VMaxInfinite(self, *args)

    def VMinInfinite(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_VMinInfinite(self, *args)

    def HasTop(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_HasTop(self, *args)

    def HasBottom(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_HasBottom(self, *args)

    def HasSides(self, *args):
        """
        :rtype: bool

        """
        return _BRepPrim.BRepPrim_OneAxis_HasSides(self, *args)

    def Shell(self, *args):
        """
        :rtype: TopoDS_Shell

        """
        return _BRepPrim.BRepPrim_OneAxis_Shell(self, *args)

    def LateralFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_LateralFace(self, *args)

    def TopFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_TopFace(self, *args)

    def BottomFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_BottomFace(self, *args)

    def StartFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_StartFace(self, *args)

    def EndFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _BRepPrim.BRepPrim_OneAxis_EndFace(self, *args)

    def LateralWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_LateralWire(self, *args)

    def LateralStartWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_LateralStartWire(self, *args)

    def LateralEndWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_LateralEndWire(self, *args)

    def TopWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_TopWire(self, *args)

    def BottomWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_BottomWire(self, *args)

    def StartWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_StartWire(self, *args)

    def AxisStartWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_AxisStartWire(self, *args)

    def EndWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_EndWire(self, *args)

    def AxisEndWire(self, *args):
        """
        :rtype: TopoDS_Wire

        """
        return _BRepPrim.BRepPrim_OneAxis_AxisEndWire(self, *args)

    def AxisEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_AxisEdge(self, *args)

    def StartEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_StartEdge(self, *args)

    def EndEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_EndEdge(self, *args)

    def StartTopEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_StartTopEdge(self, *args)

    def StartBottomEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_StartBottomEdge(self, *args)

    def EndTopEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_EndTopEdge(self, *args)

    def EndBottomEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_EndBottomEdge(self, *args)

    def TopEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_TopEdge(self, *args)

    def BottomEdge(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _BRepPrim.BRepPrim_OneAxis_BottomEdge(self, *args)

    def AxisTopVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_AxisTopVertex(self, *args)

    def AxisBottomVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_AxisBottomVertex(self, *args)

    def TopStartVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_TopStartVertex(self, *args)

    def TopEndVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_TopEndVertex(self, *args)

    def BottomStartVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_BottomStartVertex(self, *args)

    def BottomEndVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _BRepPrim.BRepPrim_OneAxis_BottomEndVertex(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_OneAxis.Delete = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Delete,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.SetMeridianOffset = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_SetMeridianOffset,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.Axes = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Axes,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.Angle = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Angle,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.VMin = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMin,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.VMax = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMax,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.MakeEmptyLateralFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MakeEmptyLateralFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.MakeEmptyMeridianEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MakeEmptyMeridianEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.SetMeridianPCurve = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_SetMeridianPCurve,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianValue = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianValue,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianOnAxis = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianOnAxis,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianClosed = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianClosed,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.VMaxInfinite = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMaxInfinite,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.VMinInfinite = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMinInfinite,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.HasTop = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasTop,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.HasBottom = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasBottom,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.HasSides = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasSides,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.Shell = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Shell,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.TopFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.StartFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.EndFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndFace,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralStartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralStartWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralEndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralEndWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.TopWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.StartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisStartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisStartWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.EndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisEndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisEndWire,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.StartEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.EndEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.StartTopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartTopEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.StartBottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartBottomEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.EndTopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndTopEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.EndBottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndBottomEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.TopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomEdge,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisTopVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisTopVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisBottomVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisBottomVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.TopStartVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopStartVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.TopEndVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopEndVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomStartVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomStartVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomEndVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomEndVertex,None,BRepPrim_OneAxis)
BRepPrim_OneAxis._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_OneAxis__kill_pointed,None,BRepPrim_OneAxis)
BRepPrim_OneAxis_swigregister = _BRepPrim.BRepPrim_OneAxis_swigregister
BRepPrim_OneAxis_swigregister(BRepPrim_OneAxis)

class BRepPrim_Revolution(BRepPrim_OneAxis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Create a revolution body <M> is the meridian nd must be in the XZ plane of <A>. <PM> is the meridian in the XZ plane.

        :param A:
        :type A: gp_Ax2
        :param VMin:
        :type VMin: float
        :param VMax:
        :type VMax: float
        :param M:
        :type M: Handle_Geom_Curve &
        :param PM:
        :type PM: Handle_Geom2d_Curve &
        :rtype: None

        """
        _BRepPrim.BRepPrim_Revolution_swiginit(self,_BRepPrim.new_BRepPrim_Revolution(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Revolution._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Revolution__kill_pointed,None,BRepPrim_Revolution)
BRepPrim_Revolution_swigregister = _BRepPrim.BRepPrim_Revolution_swigregister
BRepPrim_Revolution_swigregister(BRepPrim_Revolution)

class BRepPrim_Wedge(BRepPrim_GWedge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a Wedge algorithm. <Axes> is the axis system for the primitive.  XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = XMin X2Max = XMax The result is a box dx,dy,dz should be positive

        :param Axes:
        :type Axes: gp_Ax2
        :param dx:
        :type dx: float
        :param dy:
        :type dy: float
        :param dz:
        :type dz: float
        :rtype: None

        * Creates a Wedge primitive. <Axes> is the axis system for the primitive.  XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = ltx X2Max = ltx The result is a STEP right angular wedge dx,dy,dz should be positive ltx should not be negative

        :param Axes:
        :type Axes: gp_Ax2
        :param dx:
        :type dx: float
        :param dy:
        :type dy: float
        :param dz:
        :type dz: float
        :param ltx:
        :type ltx: float
        :rtype: None

        * Create a Wedge primitive. <Axes> is the axis system for the primitive.  all the fields are set to the corresponding value XYZMax - XYZMin should be positive ZX2Max - ZX2Min should not be negative

        :param Axes:
        :type Axes: gp_Ax2
        :param xmin:
        :type xmin: float
        :param ymin:
        :type ymin: float
        :param zmin:
        :type zmin: float
        :param z2min:
        :type z2min: float
        :param x2min:
        :type x2min: float
        :param xmax:
        :type xmax: float
        :param ymax:
        :type ymax: float
        :param zmax:
        :type zmax: float
        :param z2max:
        :type z2max: float
        :param x2max:
        :type x2max: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_Wedge_swiginit(self,_BRepPrim.new_BRepPrim_Wedge(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Wedge._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Wedge__kill_pointed,None,BRepPrim_Wedge)
BRepPrim_Wedge_swigregister = _BRepPrim.BRepPrim_Wedge_swigregister
BRepPrim_Wedge_swigregister(BRepPrim_Wedge)

class BRepPrim_Cone(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * the STEP definition Angle = semi-angle of the cone Position : the coordinate system Height : height of the cone. Radius : radius of truncated face at z = 0  The apex is on z < 0  Errors : Height < Resolution  Angle < Resolution / Height  Angle > PI/2 - Resolution / Height

        :param Angle:
        :type Angle: float
        :param Position:
        :type Position: gp_Ax2
        :param Height:
        :type Height: float
        :param Radius: default value is 0
        :type Radius: float
        :rtype: None

        * infinite cone at origin on Z negative

        :param Angle:
        :type Angle: float
        :rtype: None

        * infinite cone at Apex on Z negative

        :param Angle:
        :type Angle: float
        :param Apex:
        :type Apex: gp_Pnt
        :rtype: None

        * infinite cone with Axes

        :param Angle:
        :type Angle: float
        :param Axes:
        :type Axes: gp_Ax2
        :rtype: None

        * create a Cone at origin on Z axis, of height H, radius R1 at Z = 0, R2 at Z = H, X is the origin of angles. If R1 or R2 is 0 there is an apex. Otherwise, it is a truncated cone.  Error : R1 and R2 < Resolution R1 or R2 negative Abs(R1-R2) < Resolution H < Resolution H negative

        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :param H:
        :type H: float
        :rtype: None

        * same as above but at a given point

        :param Center:
        :type Center: gp_Pnt
        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :param H:
        :type H: float
        :rtype: None

        * same as above with given axes system.

        :param Axes:
        :type Axes: gp_Ax2
        :param R1:
        :type R1: float
        :param R2:
        :type R2: float
        :param H:
        :type H: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_Cone_swiginit(self,_BRepPrim.new_BRepPrim_Cone(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Cone._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Cone__kill_pointed,None,BRepPrim_Cone)
BRepPrim_Cone_swigregister = _BRepPrim.BRepPrim_Cone_swigregister
BRepPrim_Cone_swigregister(BRepPrim_Cone)

class BRepPrim_Cylinder(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * the STEP definition Position : center of a Face and Axis Radius : radius of cylinder Height : distance between faces on positive side  Errors : Height < Resolution Radius < Resolution

        :param Position:
        :type Position: gp_Ax2
        :param Radius:
        :type Radius: float
        :param Height:
        :type Height: float
        :rtype: None

        * infinite Cylinder at origin on Z negative

        :param Radius:
        :type Radius: float
        :rtype: None

        * infinite Cylinder at Center on Z negative

        :param Center:
        :type Center: gp_Pnt
        :param Radius:
        :type Radius: float
        :rtype: None

        * infinite Cylinder at Axes on Z negative

        :param Axes:
        :type Axes: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        * create a Cylinder at origin on Z axis, of height H and radius R Error : Radius < Resolution H < Resolution H negative

        :param R:
        :type R: float
        :param H:
        :type H: float
        :rtype: None

        * same as above but at a given point

        :param Center:
        :type Center: gp_Pnt
        :param R:
        :type R: float
        :param H:
        :type H: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_Cylinder_swiginit(self,_BRepPrim.new_BRepPrim_Cylinder(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Cylinder._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Cylinder__kill_pointed,None,BRepPrim_Cylinder)
BRepPrim_Cylinder_swigregister = _BRepPrim.BRepPrim_Cylinder_swigregister
BRepPrim_Cylinder_swigregister(BRepPrim_Cylinder)

class BRepPrim_Sphere(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a Sphere at origin with Radius. The axes of the sphere are the reference axes. An error is raised if the radius is < Resolution.

        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a Sphere with Center and Radius. Axes are the referrence axes. This is the STEP constructor.

        :param Center:
        :type Center: gp_Pnt
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a sphere with given axes system.

        :param Axes:
        :type Axes: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_Sphere_swiginit(self,_BRepPrim.new_BRepPrim_Sphere(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Sphere._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Sphere__kill_pointed,None,BRepPrim_Sphere)
BRepPrim_Sphere_swigregister = _BRepPrim.BRepPrim_Sphere_swigregister
BRepPrim_Sphere_swigregister(BRepPrim_Sphere)

class BRepPrim_Torus(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * the STEP definition Position : center and axes Major, Minor : Radii  Errors : Major < Resolution Minor < Resolution

        :param Position:
        :type Position: gp_Ax2
        :param Major:
        :type Major: float
        :param Minor:
        :type Minor: float
        :rtype: None

        * Torus centered at origin

        :param Major:
        :type Major: float
        :param Minor:
        :type Minor: float
        :rtype: None

        * Torus at Center

        :param Center:
        :type Center: gp_Pnt
        :param Major:
        :type Major: float
        :param Minor:
        :type Minor: float
        :rtype: None

        """
        _BRepPrim.BRepPrim_Torus_swiginit(self,_BRepPrim.new_BRepPrim_Torus(*args))
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepPrim_Torus._kill_pointed = new_instancemethod(_BRepPrim.BRepPrim_Torus__kill_pointed,None,BRepPrim_Torus)
BRepPrim_Torus_swigregister = _BRepPrim.BRepPrim_Torus_swigregister
BRepPrim_Torus_swigregister(BRepPrim_Torus)



