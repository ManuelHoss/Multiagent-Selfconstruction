# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dLProp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dLProp', [dirname(__file__)])
        except ImportError:
            import _Geom2dLProp
            return _Geom2dLProp
        if fp is not None:
            try:
                _mod = imp.load_module('_Geom2dLProp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Geom2dLProp = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dLProp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dLProp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dLProp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dLProp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dLProp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dLProp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dLProp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dLProp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dLProp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dLProp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dLProp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dLProp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dLProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Geom2d
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.GeomAbs
import OCC.TColgp
import OCC.TCollection
import OCC.TColStd
import OCC.LProp
import OCC.math
class Geom2dLProp_CLProps2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        :param N:
        :type N: int
        :param Resolution:
        :type Resolution: float
        :rtype: None

        """
        _Geom2dLProp.Geom2dLProp_CLProps2d_swiginit(self, _Geom2dLProp.new_Geom2dLProp_CLProps2d(*args))

    def SetParameter(self, *args):
        """
        :param U:
        :type U: float
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_SetParameter(self, *args)


    def SetCurve(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_SetCurve(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Value(self, *args)


    def D1(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_D1(self, *args)


    def D2(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_D2(self, *args)


    def D3(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_D3(self, *args)


    def IsTangentDefined(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_IsTangentDefined(self, *args)


    def Tangent(self, *args):
        """
        :param D:
        :type D: gp_Dir2d
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Tangent(self, *args)


    def Curvature(self, *args):
        """
        :rtype: float

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Curvature(self, *args)


    def Normal(self, *args):
        """
        :param N:
        :type N: gp_Dir2d
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Normal(self, *args)


    def CentreOfCurvature(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_CentreOfCurvature(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_CLProps2d.SetParameter = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_SetParameter, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.SetCurve = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_SetCurve, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.Value = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_Value, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.D1 = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_D1, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.D2 = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_D2, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.D3 = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_D3, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.IsTangentDefined = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_IsTangentDefined, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.Tangent = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_Tangent, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.Curvature = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_Curvature, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.Normal = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_Normal, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d.CentreOfCurvature = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d_CentreOfCurvature, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_CLProps2d__kill_pointed, None, Geom2dLProp_CLProps2d)
Geom2dLProp_CLProps2d_swigregister = _Geom2dLProp.Geom2dLProp_CLProps2d_swigregister
Geom2dLProp_CLProps2d_swigregister(Geom2dLProp_CLProps2d)

class Geom2dLProp_CurAndInf2d(OCC.LProp.LProp_CurAndInf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes the framework. Note: The curve on which the local properties are computed is defined using one of the following functions: Perform, PerformCurExt or PerformInf.

        :rtype: None

        """
        _Geom2dLProp.Geom2dLProp_CurAndInf2d_swiginit(self, _Geom2dLProp.new_Geom2dLProp_CurAndInf2d(*args))

    def Perform(self, *args):
        """
        * For the curve C, Computes both the inflection points and the maximum and minimum curvatures.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_Perform(self, *args)


    def PerformCurExt(self, *args):
        """
        * For the curve C, Computes the locals extremas of curvature.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformCurExt(self, *args)


    def PerformInf(self, *args):
        """
        * For the curve C, Computes the inflections. After computation, the following functions can be used: - IsDone to check if the computation was successful - NbPoints to obtain the number of computed particular points - Parameter to obtain the parameter on the curve for each particular point - Type to check if the point is an inflection point or an extremum of curvature of the curve C. Warning These functions can be used to analyze a series of curves, however it is necessary to clear the table of results between each computation.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformInf(self, *args)


    def IsDone(self, *args):
        """
        * True if the solutions are found.

        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_IsDone(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_CurAndInf2d.Perform = new_instancemethod(_Geom2dLProp.Geom2dLProp_CurAndInf2d_Perform, None, Geom2dLProp_CurAndInf2d)
Geom2dLProp_CurAndInf2d.PerformCurExt = new_instancemethod(_Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformCurExt, None, Geom2dLProp_CurAndInf2d)
Geom2dLProp_CurAndInf2d.PerformInf = new_instancemethod(_Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformInf, None, Geom2dLProp_CurAndInf2d)
Geom2dLProp_CurAndInf2d.IsDone = new_instancemethod(_Geom2dLProp.Geom2dLProp_CurAndInf2d_IsDone, None, Geom2dLProp_CurAndInf2d)
Geom2dLProp_CurAndInf2d._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_CurAndInf2d__kill_pointed, None, Geom2dLProp_CurAndInf2d)
Geom2dLProp_CurAndInf2d_swigregister = _Geom2dLProp.Geom2dLProp_CurAndInf2d_swigregister
Geom2dLProp_CurAndInf2d_swigregister(Geom2dLProp_CurAndInf2d)

class Geom2dLProp_Curve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value(*args):
        """
        * Computes the point <P> of parameter <U> on the curve <C>.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :rtype: void

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        * Computes the point <P> and first derivative <V1> of parameter <U> on the curve <C>.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :rtype: void

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the curve <C>.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :rtype: void

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the curve <C>.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :param V3:
        :type V3: gp_Vec2d
        :rtype: void

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def Continuity(*args):
        """
        * returns the order of continuity of the curve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: int

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def FirstParameter(*args):
        """
        * returns the first parameter bound of the curve.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: float

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        * returns the last parameter bound of the curve. FirstParameter must be less than LastParameter.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: float

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def __init__(self):
        _Geom2dLProp.Geom2dLProp_Curve2dTool_swiginit(self, _Geom2dLProp.new_Geom2dLProp_Curve2dTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_Curve2dTool._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_Curve2dTool__kill_pointed, None, Geom2dLProp_Curve2dTool)
Geom2dLProp_Curve2dTool_swigregister = _Geom2dLProp.Geom2dLProp_Curve2dTool_swigregister
Geom2dLProp_Curve2dTool_swigregister(Geom2dLProp_Curve2dTool)

def Geom2dLProp_Curve2dTool_Value(*args):
    """
    * Computes the point <P> of parameter <U> on the curve <C>.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :rtype: void

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_Value(*args)

def Geom2dLProp_Curve2dTool_D1(*args):
    """
    * Computes the point <P> and first derivative <V1> of parameter <U> on the curve <C>.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :rtype: void

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D1(*args)

def Geom2dLProp_Curve2dTool_D2(*args):
    """
    * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the curve <C>.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :rtype: void

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D2(*args)

def Geom2dLProp_Curve2dTool_D3(*args):
    """
    * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the curve <C>.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :param V3:
    :type V3: gp_Vec2d
    :rtype: void

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D3(*args)

def Geom2dLProp_Curve2dTool_Continuity(*args):
    """
    * returns the order of continuity of the curve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :rtype: int

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_Continuity(*args)

def Geom2dLProp_Curve2dTool_FirstParameter(*args):
    """
    * returns the first parameter bound of the curve.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :rtype: float

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_FirstParameter(*args)

def Geom2dLProp_Curve2dTool_LastParameter(*args):
    """
    * returns the last parameter bound of the curve. FirstParameter must be less than LastParameter.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :rtype: float

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_LastParameter(*args)

class Geom2dLProp_FCurExtOfNumericCurInf2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_swiginit(self, _Geom2dLProp.new_Geom2dLProp_FCurExtOfNumericCurInf2d(*args))

    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Values(self, *args)


    def IsMinKC(self, *args):
        """
        :param Param:
        :type Param: float
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_IsMinKC(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_FCurExtOfNumericCurInf2d.Value = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Value, None, Geom2dLProp_FCurExtOfNumericCurInf2d)
Geom2dLProp_FCurExtOfNumericCurInf2d.Derivative = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Derivative, None, Geom2dLProp_FCurExtOfNumericCurInf2d)
Geom2dLProp_FCurExtOfNumericCurInf2d.Values = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_Values, None, Geom2dLProp_FCurExtOfNumericCurInf2d)
Geom2dLProp_FCurExtOfNumericCurInf2d.IsMinKC = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_IsMinKC, None, Geom2dLProp_FCurExtOfNumericCurInf2d)
Geom2dLProp_FCurExtOfNumericCurInf2d._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d__kill_pointed, None, Geom2dLProp_FCurExtOfNumericCurInf2d)
Geom2dLProp_FCurExtOfNumericCurInf2d_swigregister = _Geom2dLProp.Geom2dLProp_FCurExtOfNumericCurInf2d_swigregister
Geom2dLProp_FCurExtOfNumericCurInf2d_swigregister(Geom2dLProp_FCurExtOfNumericCurInf2d)

class Geom2dLProp_FCurNulOfNumericCurInf2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        """
        _Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_swiginit(self, _Geom2dLProp.new_Geom2dLProp_FCurNulOfNumericCurInf2d(*args))

    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Values(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_FCurNulOfNumericCurInf2d.Value = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Value, None, Geom2dLProp_FCurNulOfNumericCurInf2d)
Geom2dLProp_FCurNulOfNumericCurInf2d.Derivative = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Derivative, None, Geom2dLProp_FCurNulOfNumericCurInf2d)
Geom2dLProp_FCurNulOfNumericCurInf2d.Values = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_Values, None, Geom2dLProp_FCurNulOfNumericCurInf2d)
Geom2dLProp_FCurNulOfNumericCurInf2d._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d__kill_pointed, None, Geom2dLProp_FCurNulOfNumericCurInf2d)
Geom2dLProp_FCurNulOfNumericCurInf2d_swigregister = _Geom2dLProp.Geom2dLProp_FCurNulOfNumericCurInf2d_swigregister
Geom2dLProp_FCurNulOfNumericCurInf2d_swigregister(Geom2dLProp_FCurNulOfNumericCurInf2d)

class Geom2dLProp_NumericCurInf2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Geom2dLProp.Geom2dLProp_NumericCurInf2d_swiginit(self, _Geom2dLProp.new_Geom2dLProp_NumericCurInf2d(*args))

    def PerformCurExt(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param UMin:
        :type UMin: float
        :param UMax:
        :type UMax: float
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformCurExt(self, *args)


    def PerformInf(self, *args):
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param UMin:
        :type UMin: float
        :param UMax:
        :type UMax: float
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformInf(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_IsDone(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dLProp_NumericCurInf2d.PerformCurExt = new_instancemethod(_Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformCurExt, None, Geom2dLProp_NumericCurInf2d)
Geom2dLProp_NumericCurInf2d.PerformInf = new_instancemethod(_Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformInf, None, Geom2dLProp_NumericCurInf2d)
Geom2dLProp_NumericCurInf2d.IsDone = new_instancemethod(_Geom2dLProp.Geom2dLProp_NumericCurInf2d_IsDone, None, Geom2dLProp_NumericCurInf2d)
Geom2dLProp_NumericCurInf2d._kill_pointed = new_instancemethod(_Geom2dLProp.Geom2dLProp_NumericCurInf2d__kill_pointed, None, Geom2dLProp_NumericCurInf2d)
Geom2dLProp_NumericCurInf2d_swigregister = _Geom2dLProp.Geom2dLProp_NumericCurInf2d_swigregister
Geom2dLProp_NumericCurInf2d_swigregister(Geom2dLProp_NumericCurInf2d)



