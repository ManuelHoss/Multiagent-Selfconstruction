# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _MeshVS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MeshVS', [dirname(__file__)])
        except ImportError:
            import _MeshVS
            return _MeshVS
        if fp is not None:
            try:
                _mod = imp.load_module('_MeshVS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MeshVS = swig_import_helper()
    del swig_import_helper
else:
    import _MeshVS
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MeshVS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_MeshVS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_MeshVS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_MeshVS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_MeshVS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_MeshVS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_MeshVS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_MeshVS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_MeshVS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_MeshVS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_MeshVS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_MeshVS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_MeshVS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_MeshVS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_MeshVS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_MeshVS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_MeshVS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _MeshVS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.Quantity
import OCC.Graphic3d
import OCC.Aspect
import OCC.TShort
import OCC.TColQuantity
import OCC.gp
import OCC.Image
import OCC.OSD
import OCC.SelectMgr
import OCC.Bnd
import OCC.TColgp
import OCC.SelectBasics
import OCC.TopLoc
import OCC.AIS
import OCC.TopoDS
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.Prs3d
import OCC.HLRAlgo
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.NCollection
import OCC.PrsMgr
import OCC.V3d
import OCC.Visual3d
import OCC.StdSelect
import OCC.Select3D
import OCC.DsgPrs

_MeshVS.MeshVS_BP_Mesh_swigconstant(_MeshVS)
MeshVS_BP_Mesh = _MeshVS.MeshVS_BP_Mesh

_MeshVS.MeshVS_BP_NodalColor_swigconstant(_MeshVS)
MeshVS_BP_NodalColor = _MeshVS.MeshVS_BP_NodalColor

_MeshVS.MeshVS_BP_ElemColor_swigconstant(_MeshVS)
MeshVS_BP_ElemColor = _MeshVS.MeshVS_BP_ElemColor

_MeshVS.MeshVS_BP_Text_swigconstant(_MeshVS)
MeshVS_BP_Text = _MeshVS.MeshVS_BP_Text

_MeshVS.MeshVS_BP_Vector_swigconstant(_MeshVS)
MeshVS_BP_Vector = _MeshVS.MeshVS_BP_Vector

_MeshVS.MeshVS_BP_User_swigconstant(_MeshVS)
MeshVS_BP_User = _MeshVS.MeshVS_BP_User

_MeshVS.MeshVS_BP_Default_swigconstant(_MeshVS)
MeshVS_BP_Default = _MeshVS.MeshVS_BP_Default

_MeshVS.MeshVS_DMF_WireFrame_swigconstant(_MeshVS)
MeshVS_DMF_WireFrame = _MeshVS.MeshVS_DMF_WireFrame

_MeshVS.MeshVS_DMF_Shading_swigconstant(_MeshVS)
MeshVS_DMF_Shading = _MeshVS.MeshVS_DMF_Shading

_MeshVS.MeshVS_DMF_Shrink_swigconstant(_MeshVS)
MeshVS_DMF_Shrink = _MeshVS.MeshVS_DMF_Shrink

_MeshVS.MeshVS_DMF_OCCMask_swigconstant(_MeshVS)
MeshVS_DMF_OCCMask = _MeshVS.MeshVS_DMF_OCCMask

_MeshVS.MeshVS_DMF_VectorDataPrs_swigconstant(_MeshVS)
MeshVS_DMF_VectorDataPrs = _MeshVS.MeshVS_DMF_VectorDataPrs

_MeshVS.MeshVS_DMF_NodalColorDataPrs_swigconstant(_MeshVS)
MeshVS_DMF_NodalColorDataPrs = _MeshVS.MeshVS_DMF_NodalColorDataPrs

_MeshVS.MeshVS_DMF_ElementalColorDataPrs_swigconstant(_MeshVS)
MeshVS_DMF_ElementalColorDataPrs = _MeshVS.MeshVS_DMF_ElementalColorDataPrs

_MeshVS.MeshVS_DMF_TextDataPrs_swigconstant(_MeshVS)
MeshVS_DMF_TextDataPrs = _MeshVS.MeshVS_DMF_TextDataPrs

_MeshVS.MeshVS_DMF_EntitiesWithData_swigconstant(_MeshVS)
MeshVS_DMF_EntitiesWithData = _MeshVS.MeshVS_DMF_EntitiesWithData

_MeshVS.MeshVS_DMF_DeformedPrsWireFrame_swigconstant(_MeshVS)
MeshVS_DMF_DeformedPrsWireFrame = _MeshVS.MeshVS_DMF_DeformedPrsWireFrame

_MeshVS.MeshVS_DMF_DeformedPrsShading_swigconstant(_MeshVS)
MeshVS_DMF_DeformedPrsShading = _MeshVS.MeshVS_DMF_DeformedPrsShading

_MeshVS.MeshVS_DMF_DeformedPrsShrink_swigconstant(_MeshVS)
MeshVS_DMF_DeformedPrsShrink = _MeshVS.MeshVS_DMF_DeformedPrsShrink

_MeshVS.MeshVS_DMF_DeformedMask_swigconstant(_MeshVS)
MeshVS_DMF_DeformedMask = _MeshVS.MeshVS_DMF_DeformedMask

_MeshVS.MeshVS_DMF_SelectionPrs_swigconstant(_MeshVS)
MeshVS_DMF_SelectionPrs = _MeshVS.MeshVS_DMF_SelectionPrs

_MeshVS.MeshVS_DMF_HilightPrs_swigconstant(_MeshVS)
MeshVS_DMF_HilightPrs = _MeshVS.MeshVS_DMF_HilightPrs

_MeshVS.MeshVS_DMF_User_swigconstant(_MeshVS)
MeshVS_DMF_User = _MeshVS.MeshVS_DMF_User

_MeshVS.MeshVS_DA_InteriorStyle_swigconstant(_MeshVS)
MeshVS_DA_InteriorStyle = _MeshVS.MeshVS_DA_InteriorStyle

_MeshVS.MeshVS_DA_InteriorColor_swigconstant(_MeshVS)
MeshVS_DA_InteriorColor = _MeshVS.MeshVS_DA_InteriorColor

_MeshVS.MeshVS_DA_BackInteriorColor_swigconstant(_MeshVS)
MeshVS_DA_BackInteriorColor = _MeshVS.MeshVS_DA_BackInteriorColor

_MeshVS.MeshVS_DA_EdgeColor_swigconstant(_MeshVS)
MeshVS_DA_EdgeColor = _MeshVS.MeshVS_DA_EdgeColor

_MeshVS.MeshVS_DA_EdgeType_swigconstant(_MeshVS)
MeshVS_DA_EdgeType = _MeshVS.MeshVS_DA_EdgeType

_MeshVS.MeshVS_DA_EdgeWidth_swigconstant(_MeshVS)
MeshVS_DA_EdgeWidth = _MeshVS.MeshVS_DA_EdgeWidth

_MeshVS.MeshVS_DA_HatchStyle_swigconstant(_MeshVS)
MeshVS_DA_HatchStyle = _MeshVS.MeshVS_DA_HatchStyle

_MeshVS.MeshVS_DA_FrontMaterial_swigconstant(_MeshVS)
MeshVS_DA_FrontMaterial = _MeshVS.MeshVS_DA_FrontMaterial

_MeshVS.MeshVS_DA_BackMaterial_swigconstant(_MeshVS)
MeshVS_DA_BackMaterial = _MeshVS.MeshVS_DA_BackMaterial

_MeshVS.MeshVS_DA_BeamType_swigconstant(_MeshVS)
MeshVS_DA_BeamType = _MeshVS.MeshVS_DA_BeamType

_MeshVS.MeshVS_DA_BeamWidth_swigconstant(_MeshVS)
MeshVS_DA_BeamWidth = _MeshVS.MeshVS_DA_BeamWidth

_MeshVS.MeshVS_DA_BeamColor_swigconstant(_MeshVS)
MeshVS_DA_BeamColor = _MeshVS.MeshVS_DA_BeamColor

_MeshVS.MeshVS_DA_MarkerType_swigconstant(_MeshVS)
MeshVS_DA_MarkerType = _MeshVS.MeshVS_DA_MarkerType

_MeshVS.MeshVS_DA_MarkerColor_swigconstant(_MeshVS)
MeshVS_DA_MarkerColor = _MeshVS.MeshVS_DA_MarkerColor

_MeshVS.MeshVS_DA_MarkerScale_swigconstant(_MeshVS)
MeshVS_DA_MarkerScale = _MeshVS.MeshVS_DA_MarkerScale

_MeshVS.MeshVS_DA_TextColor_swigconstant(_MeshVS)
MeshVS_DA_TextColor = _MeshVS.MeshVS_DA_TextColor

_MeshVS.MeshVS_DA_TextHeight_swigconstant(_MeshVS)
MeshVS_DA_TextHeight = _MeshVS.MeshVS_DA_TextHeight

_MeshVS.MeshVS_DA_TextFont_swigconstant(_MeshVS)
MeshVS_DA_TextFont = _MeshVS.MeshVS_DA_TextFont

_MeshVS.MeshVS_DA_TextExpansionFactor_swigconstant(_MeshVS)
MeshVS_DA_TextExpansionFactor = _MeshVS.MeshVS_DA_TextExpansionFactor

_MeshVS.MeshVS_DA_TextSpace_swigconstant(_MeshVS)
MeshVS_DA_TextSpace = _MeshVS.MeshVS_DA_TextSpace

_MeshVS.MeshVS_DA_TextStyle_swigconstant(_MeshVS)
MeshVS_DA_TextStyle = _MeshVS.MeshVS_DA_TextStyle

_MeshVS.MeshVS_DA_TextDisplayType_swigconstant(_MeshVS)
MeshVS_DA_TextDisplayType = _MeshVS.MeshVS_DA_TextDisplayType

_MeshVS.MeshVS_DA_TextTexFont_swigconstant(_MeshVS)
MeshVS_DA_TextTexFont = _MeshVS.MeshVS_DA_TextTexFont

_MeshVS.MeshVS_DA_TextFontAspect_swigconstant(_MeshVS)
MeshVS_DA_TextFontAspect = _MeshVS.MeshVS_DA_TextFontAspect

_MeshVS.MeshVS_DA_VectorColor_swigconstant(_MeshVS)
MeshVS_DA_VectorColor = _MeshVS.MeshVS_DA_VectorColor

_MeshVS.MeshVS_DA_VectorMaxLength_swigconstant(_MeshVS)
MeshVS_DA_VectorMaxLength = _MeshVS.MeshVS_DA_VectorMaxLength

_MeshVS.MeshVS_DA_VectorArrowPart_swigconstant(_MeshVS)
MeshVS_DA_VectorArrowPart = _MeshVS.MeshVS_DA_VectorArrowPart

_MeshVS.MeshVS_DA_IsAllowOverlapped_swigconstant(_MeshVS)
MeshVS_DA_IsAllowOverlapped = _MeshVS.MeshVS_DA_IsAllowOverlapped

_MeshVS.MeshVS_DA_Reflection_swigconstant(_MeshVS)
MeshVS_DA_Reflection = _MeshVS.MeshVS_DA_Reflection

_MeshVS.MeshVS_DA_ColorReflection_swigconstant(_MeshVS)
MeshVS_DA_ColorReflection = _MeshVS.MeshVS_DA_ColorReflection

_MeshVS.MeshVS_DA_ShrinkCoeff_swigconstant(_MeshVS)
MeshVS_DA_ShrinkCoeff = _MeshVS.MeshVS_DA_ShrinkCoeff

_MeshVS.MeshVS_DA_MaxFaceNodes_swigconstant(_MeshVS)
MeshVS_DA_MaxFaceNodes = _MeshVS.MeshVS_DA_MaxFaceNodes

_MeshVS.MeshVS_DA_ComputeTime_swigconstant(_MeshVS)
MeshVS_DA_ComputeTime = _MeshVS.MeshVS_DA_ComputeTime

_MeshVS.MeshVS_DA_ComputeSelectionTime_swigconstant(_MeshVS)
MeshVS_DA_ComputeSelectionTime = _MeshVS.MeshVS_DA_ComputeSelectionTime

_MeshVS.MeshVS_DA_DisplayNodes_swigconstant(_MeshVS)
MeshVS_DA_DisplayNodes = _MeshVS.MeshVS_DA_DisplayNodes

_MeshVS.MeshVS_DA_SelectableAuto_swigconstant(_MeshVS)
MeshVS_DA_SelectableAuto = _MeshVS.MeshVS_DA_SelectableAuto

_MeshVS.MeshVS_DA_ShowEdges_swigconstant(_MeshVS)
MeshVS_DA_ShowEdges = _MeshVS.MeshVS_DA_ShowEdges

_MeshVS.MeshVS_DA_SmoothShading_swigconstant(_MeshVS)
MeshVS_DA_SmoothShading = _MeshVS.MeshVS_DA_SmoothShading

_MeshVS.MeshVS_DA_SupressBackFaces_swigconstant(_MeshVS)
MeshVS_DA_SupressBackFaces = _MeshVS.MeshVS_DA_SupressBackFaces

_MeshVS.MeshVS_DA_User_swigconstant(_MeshVS)
MeshVS_DA_User = _MeshVS.MeshVS_DA_User

_MeshVS.MeshVS_ET_NONE_swigconstant(_MeshVS)
MeshVS_ET_NONE = _MeshVS.MeshVS_ET_NONE

_MeshVS.MeshVS_ET_Node_swigconstant(_MeshVS)
MeshVS_ET_Node = _MeshVS.MeshVS_ET_Node

_MeshVS.MeshVS_ET_0D_swigconstant(_MeshVS)
MeshVS_ET_0D = _MeshVS.MeshVS_ET_0D

_MeshVS.MeshVS_ET_Link_swigconstant(_MeshVS)
MeshVS_ET_Link = _MeshVS.MeshVS_ET_Link

_MeshVS.MeshVS_ET_Face_swigconstant(_MeshVS)
MeshVS_ET_Face = _MeshVS.MeshVS_ET_Face

_MeshVS.MeshVS_ET_Volume_swigconstant(_MeshVS)
MeshVS_ET_Volume = _MeshVS.MeshVS_ET_Volume

_MeshVS.MeshVS_ET_Element_swigconstant(_MeshVS)
MeshVS_ET_Element = _MeshVS.MeshVS_ET_Element

_MeshVS.MeshVS_ET_All_swigconstant(_MeshVS)
MeshVS_ET_All = _MeshVS.MeshVS_ET_All

_MeshVS.MeshVS_MSM_PRECISE_swigconstant(_MeshVS)
MeshVS_MSM_PRECISE = _MeshVS.MeshVS_MSM_PRECISE

_MeshVS.MeshVS_MSM_NODES_swigconstant(_MeshVS)
MeshVS_MSM_NODES = _MeshVS.MeshVS_MSM_NODES

_MeshVS.MeshVS_MSM_BOX_swigconstant(_MeshVS)
MeshVS_MSM_BOX = _MeshVS.MeshVS_MSM_BOX

_MeshVS.MeshVS_SMF_Mesh_swigconstant(_MeshVS)
MeshVS_SMF_Mesh = _MeshVS.MeshVS_SMF_Mesh

_MeshVS.MeshVS_SMF_Node_swigconstant(_MeshVS)
MeshVS_SMF_Node = _MeshVS.MeshVS_SMF_Node

_MeshVS.MeshVS_SMF_0D_swigconstant(_MeshVS)
MeshVS_SMF_0D = _MeshVS.MeshVS_SMF_0D

_MeshVS.MeshVS_SMF_Link_swigconstant(_MeshVS)
MeshVS_SMF_Link = _MeshVS.MeshVS_SMF_Link

_MeshVS.MeshVS_SMF_Face_swigconstant(_MeshVS)
MeshVS_SMF_Face = _MeshVS.MeshVS_SMF_Face

_MeshVS.MeshVS_SMF_Volume_swigconstant(_MeshVS)
MeshVS_SMF_Volume = _MeshVS.MeshVS_SMF_Volume

_MeshVS.MeshVS_SMF_Element_swigconstant(_MeshVS)
MeshVS_SMF_Element = _MeshVS.MeshVS_SMF_Element

_MeshVS.MeshVS_SMF_All_swigconstant(_MeshVS)
MeshVS_SMF_All = _MeshVS.MeshVS_SMF_All

_MeshVS.MeshVS_SMF_Group_swigconstant(_MeshVS)
MeshVS_SMF_Group = _MeshVS.MeshVS_SMF_Group
class MeshVS_Array1OfSequenceOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TColStd_SequenceOfInteger &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _MeshVS.MeshVS_Array1OfSequenceOfInteger_swiginit(self, _MeshVS.new_MeshVS_Array1OfSequenceOfInteger(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_Array1OfSequenceOfInteger &
        :rtype: MeshVS_Array1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_Array1OfSequenceOfInteger &
        :rtype: MeshVS_Array1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfInteger

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfInteger

        """
        return _MeshVS.MeshVS_Array1OfSequenceOfInteger_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_Array1OfSequenceOfInteger.Init = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Init, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Destroy = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Destroy, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.IsAllocated = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_IsAllocated, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Assign = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Assign, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Set = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Set, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Length = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Length, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Lower = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Lower, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Upper = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Upper, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.SetValue = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_SetValue, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_Value, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger.ChangeValue = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger_ChangeValue, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_Array1OfSequenceOfInteger__kill_pointed, None, MeshVS_Array1OfSequenceOfInteger)
MeshVS_Array1OfSequenceOfInteger_swigregister = _MeshVS.MeshVS_Array1OfSequenceOfInteger_swigregister
MeshVS_Array1OfSequenceOfInteger_swigregister(MeshVS_Array1OfSequenceOfInteger)

class MeshVS_ColorHasher(OCC.TColStd.TColStd_MapIntegerHasher):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: Quantity_Color &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _MeshVS.MeshVS_ColorHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: Quantity_Color &
        :param K2:
        :type K2: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_ColorHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _MeshVS.MeshVS_ColorHasher_swiginit(self, _MeshVS.new_MeshVS_ColorHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_ColorHasher._kill_pointed = new_instancemethod(_MeshVS.MeshVS_ColorHasher__kill_pointed, None, MeshVS_ColorHasher)
MeshVS_ColorHasher_swigregister = _MeshVS.MeshVS_ColorHasher_swigregister
MeshVS_ColorHasher_swigregister(MeshVS_ColorHasher)

def MeshVS_ColorHasher_HashCode(*args):
    """
    :param K:
    :type K: Quantity_Color &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _MeshVS.MeshVS_ColorHasher_HashCode(*args)

def MeshVS_ColorHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: Quantity_Color &
    :param K2:
    :type K2: Quantity_Color &
    :rtype: bool

    """
    return _MeshVS.MeshVS_ColorHasher_IsEqual(*args)

class MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfColorMapOfInteger &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfColorMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Key, None, MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_Value, None, MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_swigregister
MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger_swigregister(MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger)

class MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfHArray1OfSequenceOfInteger &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfHArray1OfSequenceOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Key, None, MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_Value, None, MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_swigregister
MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger_swigregister(MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger)

class MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerAsciiString &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerAsciiString &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString)
MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString)
MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString)
MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString)
MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerAsciiString)

class MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerBoolean &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerBoolean &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean)
MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean)
MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean)
MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean)
MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerBoolean)

class MeshVS_DataMapIteratorOfDataMapOfIntegerColor(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerColor &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerColor(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerColor &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerColor.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerColor)
MeshVS_DataMapIteratorOfDataMapOfIntegerColor.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerColor)
MeshVS_DataMapIteratorOfDataMapOfIntegerColor.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerColor)
MeshVS_DataMapIteratorOfDataMapOfIntegerColor._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerColor)
MeshVS_DataMapIteratorOfDataMapOfIntegerColor_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerColor_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerColor_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerColor)

class MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerMaterial &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerMaterial &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Graphic3d_MaterialAspect

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial)
MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial)
MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial)
MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial)
MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerMaterial)

class MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerMeshEntityOwner &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerMeshEntityOwner &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_MeshVS_MeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner)

class MeshVS_DataMapIteratorOfDataMapOfIntegerOwner(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerOwner &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerOwner(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerOwner &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Handle_SelectMgr_EntityOwner

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerOwner.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerOwner.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerOwner.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerOwner)
MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerOwner_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerOwner)

class MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerTwoColors &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerTwoColors &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors)
MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors)
MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors)
MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors)
MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerTwoColors)

class MeshVS_DataMapIteratorOfDataMapOfIntegerVector(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerVector &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfIntegerVector(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfIntegerVector &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Vec

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfIntegerVector.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfIntegerVector)
MeshVS_DataMapIteratorOfDataMapOfIntegerVector.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Key, None, MeshVS_DataMapIteratorOfDataMapOfIntegerVector)
MeshVS_DataMapIteratorOfDataMapOfIntegerVector.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_Value, None, MeshVS_DataMapIteratorOfDataMapOfIntegerVector)
MeshVS_DataMapIteratorOfDataMapOfIntegerVector._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfIntegerVector)
MeshVS_DataMapIteratorOfDataMapOfIntegerVector_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfIntegerVector_swigregister
MeshVS_DataMapIteratorOfDataMapOfIntegerVector_swigregister(MeshVS_DataMapIteratorOfDataMapOfIntegerVector)

class MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_DataMapOfTwoColorsMapOfInteger &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_DataMapOfTwoColorsMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger.Initialize = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Initialize, None, MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger.Key = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Key, None, MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_Value, None, MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger__kill_pointed, None, MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_swigregister
MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger_swigregister(MeshVS_DataMapIteratorOfDataMapOfTwoColorsMapOfInteger)

class MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :param I:
        :type I: TColStd_MapOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger(*args))

    def Key(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger self) -> Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.Key = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_Key, None, MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_Value, None, MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister
MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister(MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)

class Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger)

def Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger_DownCast

class MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger self) -> Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_GetKey, None, MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_SetKey, None, MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_Value, None, MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister
MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister(MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)

class Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger)

def Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: TCollection_AsciiString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: TCollection_AsciiString

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerAsciiString_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerBoolean(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: bool
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_SetKey(self, value)


    def GetValue(self):
        """GetValue(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self) -> Standard_Boolean"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetValue(self)


    def SetValue(self, value):
        """SetValue(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self, Standard_Boolean value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_SetValue(self, value)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.GetValue = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetValue, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.SetValue = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_SetValue, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerBoolean_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerColor(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Quantity_Color &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerColor(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerColor self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerColor self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerColor self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerColor self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerColor.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerColor)
MeshVS_DataMapNodeOfDataMapOfIntegerColor.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerColor)
MeshVS_DataMapNodeOfDataMapOfIntegerColor.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerColor)
MeshVS_DataMapNodeOfDataMapOfIntegerColor._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerColor)
MeshVS_DataMapNodeOfDataMapOfIntegerColor.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerColor)
MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerColor)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerColor_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerMaterial(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Graphic3d_MaterialAspect &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerMaterial self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerMaterial self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Graphic3d_MaterialAspect

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerMaterial self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerMaterial self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMaterial_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MeshVS_MeshEntityOwner &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Handle_MeshVS_MeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerOwner(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_SelectMgr_EntityOwner &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerOwner(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerOwner self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerOwner self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Handle_SelectMgr_EntityOwner

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerOwner self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerOwner self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerOwner.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerOwner.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerOwner.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerOwner.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerOwner)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerOwner_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: MeshVS_TwoColors &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerTwoColors_DownCast

class MeshVS_DataMapNodeOfDataMapOfIntegerVector(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Vec
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfIntegerVector(*args))

    def GetKey(self):
        """GetKey(MeshVS_DataMapNodeOfDataMapOfIntegerVector self) -> Standard_Integer"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_GetKey(self)


    def SetKey(self, value):
        """SetKey(MeshVS_DataMapNodeOfDataMapOfIntegerVector self, Standard_Integer value)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: gp_Vec

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfIntegerVector self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfIntegerVector self) -> Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfIntegerVector.GetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_GetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerVector)
MeshVS_DataMapNodeOfDataMapOfIntegerVector.SetKey = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_SetKey, None, MeshVS_DataMapNodeOfDataMapOfIntegerVector)
MeshVS_DataMapNodeOfDataMapOfIntegerVector.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_Value, None, MeshVS_DataMapNodeOfDataMapOfIntegerVector)
MeshVS_DataMapNodeOfDataMapOfIntegerVector._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfIntegerVector)
MeshVS_DataMapNodeOfDataMapOfIntegerVector.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfIntegerVector)
MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister
MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister(MeshVS_DataMapNodeOfDataMapOfIntegerVector)

class Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector)

def Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfIntegerVector_DownCast

class MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :param I:
        :type I: TColStd_MapOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger(*args))

    def Key(self, *args):
        """
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger self)"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger self) -> Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger"""
        return _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.Key = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_Key, None, MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_Value, None, MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger__kill_pointed, None, MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_GetHandle, None, MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister
MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister(MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)

class Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swiginit(self, _MeshVS.new_Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_Nullify, None, Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_IsNull, None, Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_GetObject, None, Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger__kill_pointed, None, Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_swigregister(Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger)

def Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_DownCast(AnObject)
Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_DownCast = _MeshVS.Handle_MeshVS_DataMapNodeOfDataMapOfTwoColorsMapOfInteger_DownCast

class MeshVS_DataMapOfColorMapOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfColorMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapOfColorMapOfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfColorMapOfInteger &
        :rtype: MeshVS_DataMapOfColorMapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfColorMapOfInteger &
        :rtype: MeshVS_DataMapOfColorMapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :param I:
        :type I: TColStd_MapOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Quantity_Color &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfColorMapOfInteger self)"""
        return _MeshVS.MeshVS_DataMapOfColorMapOfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfColorMapOfInteger.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Assign, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Set, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_ReSize, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Clear, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Bind, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_IsBound, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_UnBind, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Find, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_ChangeFind, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_Find1, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger_ChangeFind1, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfColorMapOfInteger__kill_pointed, None, MeshVS_DataMapOfColorMapOfInteger)
MeshVS_DataMapOfColorMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapOfColorMapOfInteger_swigregister
MeshVS_DataMapOfColorMapOfInteger_swigregister(MeshVS_DataMapOfColorMapOfInteger)

class MeshVS_DataMapOfHArray1OfSequenceOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapOfHArray1OfSequenceOfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfHArray1OfSequenceOfInteger &
        :rtype: MeshVS_DataMapOfHArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfHArray1OfSequenceOfInteger &
        :rtype: MeshVS_DataMapOfHArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfHArray1OfSequenceOfInteger self)"""
        return _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfHArray1OfSequenceOfInteger.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Assign, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Set, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ReSize, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Clear, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Bind, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_IsBound, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_UnBind, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Find, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ChangeFind, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_Find1, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_ChangeFind1, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger__kill_pointed, None, MeshVS_DataMapOfHArray1OfSequenceOfInteger)
MeshVS_DataMapOfHArray1OfSequenceOfInteger_swigregister = _MeshVS.MeshVS_DataMapOfHArray1OfSequenceOfInteger_swigregister
MeshVS_DataMapOfHArray1OfSequenceOfInteger_swigregister(MeshVS_DataMapOfHArray1OfSequenceOfInteger)

class MeshVS_DataMapOfIntegerAsciiString(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerAsciiString_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerAsciiString(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerAsciiString &
        :rtype: MeshVS_DataMapOfIntegerAsciiString

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerAsciiString &
        :rtype: MeshVS_DataMapOfIntegerAsciiString

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: TCollection_AsciiString

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: TCollection_AsciiString

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerAsciiString self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerAsciiString__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerAsciiString.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Assign, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Set, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_ReSize, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Clear, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Bind, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_IsBound, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_UnBind, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Find, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_ChangeFind, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_Find1, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString_ChangeFind1, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerAsciiString__kill_pointed, None, MeshVS_DataMapOfIntegerAsciiString)
MeshVS_DataMapOfIntegerAsciiString_swigregister = _MeshVS.MeshVS_DataMapOfIntegerAsciiString_swigregister
MeshVS_DataMapOfIntegerAsciiString_swigregister(MeshVS_DataMapOfIntegerAsciiString)

class MeshVS_DataMapOfIntegerBoolean(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerBoolean_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerBoolean(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerBoolean &
        :rtype: MeshVS_DataMapOfIntegerBoolean

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerBoolean &
        :rtype: MeshVS_DataMapOfIntegerBoolean

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: bool
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerBoolean self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerBoolean__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerBoolean.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Assign, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Set, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_ReSize, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Clear, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Bind, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_IsBound, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_UnBind, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Find, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_ChangeFind, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_Find1, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean_ChangeFind1, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerBoolean__kill_pointed, None, MeshVS_DataMapOfIntegerBoolean)
MeshVS_DataMapOfIntegerBoolean_swigregister = _MeshVS.MeshVS_DataMapOfIntegerBoolean_swigregister
MeshVS_DataMapOfIntegerBoolean_swigregister(MeshVS_DataMapOfIntegerBoolean)

class MeshVS_DataMapOfIntegerColor(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerColor_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerColor(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerColor &
        :rtype: MeshVS_DataMapOfIntegerColor

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerColor &
        :rtype: MeshVS_DataMapOfIntegerColor

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerColor_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerColor self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerColor__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerColor.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Assign, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Set, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_ReSize, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Clear, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Bind, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_IsBound, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_UnBind, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Find, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_ChangeFind, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_Find1, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor_ChangeFind1, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerColor__kill_pointed, None, MeshVS_DataMapOfIntegerColor)
MeshVS_DataMapOfIntegerColor_swigregister = _MeshVS.MeshVS_DataMapOfIntegerColor_swigregister
MeshVS_DataMapOfIntegerColor_swigregister(MeshVS_DataMapOfIntegerColor)

class MeshVS_DataMapOfIntegerMaterial(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerMaterial_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerMaterial(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerMaterial &
        :rtype: MeshVS_DataMapOfIntegerMaterial

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerMaterial &
        :rtype: MeshVS_DataMapOfIntegerMaterial

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Graphic3d_MaterialAspect &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Graphic3d_MaterialAspect

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Graphic3d_MaterialAspect

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerMaterial self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerMaterial__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerMaterial.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Assign, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Set, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_ReSize, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Clear, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Bind, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_IsBound, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_UnBind, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Find, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_ChangeFind, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_Find1, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial_ChangeFind1, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMaterial__kill_pointed, None, MeshVS_DataMapOfIntegerMaterial)
MeshVS_DataMapOfIntegerMaterial_swigregister = _MeshVS.MeshVS_DataMapOfIntegerMaterial_swigregister
MeshVS_DataMapOfIntegerMaterial_swigregister(MeshVS_DataMapOfIntegerMaterial)

class MeshVS_DataMapOfIntegerMeshEntityOwner(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerMeshEntityOwner(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerMeshEntityOwner &
        :rtype: MeshVS_DataMapOfIntegerMeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerMeshEntityOwner &
        :rtype: MeshVS_DataMapOfIntegerMeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MeshVS_MeshEntityOwner &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MeshVS_MeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_MeshVS_MeshEntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerMeshEntityOwner self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerMeshEntityOwner.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Assign, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Set, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ReSize, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Clear, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Bind, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_IsBound, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_UnBind, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Find, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ChangeFind, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_Find1, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_ChangeFind1, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner__kill_pointed, None, MeshVS_DataMapOfIntegerMeshEntityOwner)
MeshVS_DataMapOfIntegerMeshEntityOwner_swigregister = _MeshVS.MeshVS_DataMapOfIntegerMeshEntityOwner_swigregister
MeshVS_DataMapOfIntegerMeshEntityOwner_swigregister(MeshVS_DataMapOfIntegerMeshEntityOwner)

class MeshVS_DataMapOfIntegerOwner(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerOwner_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerOwner(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerOwner &
        :rtype: MeshVS_DataMapOfIntegerOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerOwner &
        :rtype: MeshVS_DataMapOfIntegerOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_SelectMgr_EntityOwner &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_SelectMgr_EntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Handle_SelectMgr_EntityOwner

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerOwner_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerOwner self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerOwner__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerOwner.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Assign, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Set, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_ReSize, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Clear, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Bind, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_IsBound, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_UnBind, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Find, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_ChangeFind, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_Find1, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner_ChangeFind1, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerOwner__kill_pointed, None, MeshVS_DataMapOfIntegerOwner)
MeshVS_DataMapOfIntegerOwner_swigregister = _MeshVS.MeshVS_DataMapOfIntegerOwner_swigregister
MeshVS_DataMapOfIntegerOwner_swigregister(MeshVS_DataMapOfIntegerOwner)

class MeshVS_DataMapOfIntegerTwoColors(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerTwoColors_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerTwoColors(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerTwoColors &
        :rtype: MeshVS_DataMapOfIntegerTwoColors

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerTwoColors &
        :rtype: MeshVS_DataMapOfIntegerTwoColors

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: MeshVS_TwoColors &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: MeshVS_TwoColors

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerTwoColors self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerTwoColors__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerTwoColors.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Assign, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Set, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_ReSize, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Clear, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Bind, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_IsBound, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_UnBind, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Find, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_ChangeFind, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_Find1, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors_ChangeFind1, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerTwoColors__kill_pointed, None, MeshVS_DataMapOfIntegerTwoColors)
MeshVS_DataMapOfIntegerTwoColors_swigregister = _MeshVS.MeshVS_DataMapOfIntegerTwoColors_swigregister
MeshVS_DataMapOfIntegerTwoColors_swigregister(MeshVS_DataMapOfIntegerTwoColors)

class MeshVS_DataMapOfIntegerVector(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfIntegerVector_swiginit(self, _MeshVS.new_MeshVS_DataMapOfIntegerVector(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerVector &
        :rtype: MeshVS_DataMapOfIntegerVector

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfIntegerVector &
        :rtype: MeshVS_DataMapOfIntegerVector

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: gp_Vec
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Vec

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: gp_Vec

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfIntegerVector_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfIntegerVector self)"""
        return _MeshVS.MeshVS_DataMapOfIntegerVector__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfIntegerVector.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Assign, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Set, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_ReSize, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Clear, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Bind, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_IsBound, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_UnBind, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Find, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_ChangeFind, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_Find1, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector_ChangeFind1, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfIntegerVector__kill_pointed, None, MeshVS_DataMapOfIntegerVector)
MeshVS_DataMapOfIntegerVector_swigregister = _MeshVS.MeshVS_DataMapOfIntegerVector_swigregister
MeshVS_DataMapOfIntegerVector_swigregister(MeshVS_DataMapOfIntegerVector)

class MeshVS_DataMapOfTwoColorsMapOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_swiginit(self, _MeshVS.new_MeshVS_DataMapOfTwoColorsMapOfInteger(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfTwoColorsMapOfInteger &
        :rtype: MeshVS_DataMapOfTwoColorsMapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_DataMapOfTwoColorsMapOfInteger &
        :rtype: MeshVS_DataMapOfTwoColorsMapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :param I:
        :type I: TColStd_MapOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: TColStd_MapOfInteger

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataMapOfTwoColorsMapOfInteger self)"""
        return _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataMapOfTwoColorsMapOfInteger.Assign = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Assign, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.Set = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Set, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.ReSize = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ReSize, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.Clear = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Clear, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.Bind = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Bind, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.IsBound = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_IsBound, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.UnBind = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_UnBind, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.Find = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Find, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.ChangeFind = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ChangeFind, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.Find1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_Find1, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger.ChangeFind1 = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_ChangeFind1, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger__kill_pointed, None, MeshVS_DataMapOfTwoColorsMapOfInteger)
MeshVS_DataMapOfTwoColorsMapOfInteger_swigregister = _MeshVS.MeshVS_DataMapOfTwoColorsMapOfInteger_swigregister
MeshVS_DataMapOfTwoColorsMapOfInteger_swigregister(MeshVS_DataMapOfTwoColorsMapOfInteger)

class MeshVS_DataSource(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetGeom(self, *args):
        """
        * Returns geometry information about node or element ID is the numerical identificator of node or element IsElement indicates this ID describe node ( if Standard_False ) or element ( if Standard_True ) Coords is an array of co-ordinates of node(s). For node it is only 3 numbers: X, Y, Z in the strict order For element it is 3*n numbers, where n is number of this element vertices The order is strict also: X1, Y1, Z1, X2,...., where Xi, Yi, Zi are co-ordinates of vertices NbNodes is number of nodes. It is recommended this parameter to be set to 1 for node. Type is type of node or element (from enumeration). It is recommended this parameter to be set to MeshVS_ET_Node for node.

        :param ID:
        :type ID: int
        :param IsElement:
        :type IsElement: bool
        :param Coords:
        :type Coords: TColStd_Array1OfReal &
        :param NbNodes:
        :type NbNodes: int &
        :param Type:
        :type Type: MeshVS_EntityType &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetGeom(self, *args)


    def GetGeomType(self, *args):
        """
        * This method is similar to GetGeom, but returns only element or node type.

        :param ID:
        :type ID: int
        :param IsElement:
        :type IsElement: bool
        :param Type:
        :type Type: MeshVS_EntityType &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetGeomType(self, *args)


    def Get3DGeom(self, *args):
        """
        * This method returns topology information about 3D-element Returns false if element with ID isn't 3D or because other troubles

        :param ID:
        :type ID: int
        :param NbNodes:
        :type NbNodes: int &
        :param Data:
        :type Data: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_Get3DGeom(self, *args)


    def GetAddr(self, *args):
        """
        * This method returns pointer which represents element or node data structure. This address will be saved in MeshVS_MeshEntityOwner, so that you can access to data structure fast by the method Owner(). In the redefined method you can return NULL. ID is the numerical identificator of node or element IsElement indicates this ID describe node ( if Standard_False ) or element ( if Standard_True )

        :param ID:
        :type ID: int
        :param IsElement:
        :type IsElement: bool
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataSource_GetAddr(self, *args)


    def GetNodesByElement(self, *args):
        """
        * This method returns information about nodes this element consist of. ID is the numerical identificator of element. NodeIDs is the output array of nodes IDs in correct order, the same as coordinates returned by GetGeom(). NbNodes is number of nodes (number of items set in NodeIDs). Returns False if element does not exist

        :param ID:
        :type ID: int
        :param NodeIDs:
        :type NodeIDs: TColStd_Array1OfInteger &
        :param NbNodes:
        :type NbNodes: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetNodesByElement(self, *args)


    def GetAllNodes(self, *args):
        """
        * This method returns map of all nodes the object consist of.

        :rtype: TColStd_PackedMapOfInteger

        """
        return _MeshVS.MeshVS_DataSource_GetAllNodes(self, *args)


    def GetAllElements(self, *args):
        """
        * This method returns map of all elements the object consist of.

        :rtype: TColStd_PackedMapOfInteger

        """
        return _MeshVS.MeshVS_DataSource_GetAllElements(self, *args)


    def GetNormal(self, *args):
        """
        * This method calculates normal of face, which is using for correct reflection presentation. There is default method, for advance reflection this method can be redefined. Id is the numerical identificator of only element! Max is maximal number of nodes an element can consist of nx, ny, nz are values whose represent co-ordinates of normal (will be returned) In the redefined method you can return normal with length more then 1, but in this case the appearance of element will be more bright than usual. For ordinary brightness you must return normal with length 1

        :param Id:
        :type Id: int
        :param Max:
        :type Max: int
        :param nx:
        :type nx: float &
        :param ny:
        :type ny: float &
        :param nz:
        :type nz: float &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetNormal(self, *args)


    def GetNodeNormal(self, *args):
        """
        * This method return normal of node ranknode of face Id, which is using for smooth shading presentation. Returns false if normal isn't defined.

        :param ranknode:
        :type ranknode: int
        :param ElementId:
        :type ElementId: int
        :param nx:
        :type nx: float &
        :param ny:
        :type ny: float &
        :param nz:
        :type nz: float &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetNodeNormal(self, *args)


    def GetNormalsByElement(self, *args):
        """
        * This method puts components of normal vectors at each node of a mesh face (at each face of a mesh volume) into the output array. Returns false if some problem was detected during calculation of normals. Id is an identifier of the mesh element. IsNodal, when true, means that normals at mesh element nodes are needed. If nodal normals are not available, or IsNodal is false, or the mesh element is a volume, then the output array contents depend on the element type: face: a normal calculated by GetNormal() is duplicated for each node of the face; volume: normals to all faces of the volume are computed (not for each node!). MaxNodes is maximal number of nodes an element can consist of. Normals contains the result.

        :param Id:
        :type Id: int
        :param IsNodal:
        :type IsNodal: bool
        :param MaxNodes:
        :type MaxNodes: int
        :param Normals:
        :type Normals: Handle_TColStd_HArray1OfReal &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetNormalsByElement(self, *args)


    def GetAllGroups(self, *args):
        """
        * This method returns map of all groups the object contains.

        :param Ids:
        :type Ids: TColStd_PackedMapOfInteger &
        :rtype: void

        """
        return _MeshVS.MeshVS_DataSource_GetAllGroups(self, *args)


    def GetGroup(self, *args):
        """
        * This method returns map of all group elements.

        :param Id:
        :type Id: int
        :param Type:
        :type Type: MeshVS_EntityType &
        :param Ids:
        :type Ids: TColStd_PackedMapOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetGroup(self, *args)


    def GetGroupAddr(self, *args):
        """
        * This method returns pointer which represents group data structure. This address will be saved in MeshVS_MeshOwner, so that you can access to data structure fast by the method Owner(). In the redefined method you can return NULL. ID is the numerical identificator of group

        :param ID:
        :type ID: int
        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_DataSource_GetGroupAddr(self, *args)


    def IsAdvancedSelectionEnabled(self, *args):
        """
        * Returns True if advanced mesh selection is enabled. Default implementation returns False. It should be redefined to return True for advanced mesh selection activation.

        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_IsAdvancedSelectionEnabled(self, *args)


    def GetBoundingBox(self, *args):
        """
        * Returns the bounding box of the whole mesh. It is used in advanced selection mode to define roughly the sensitive area of the mesh. It can be redefined to get access to a box computed in advance.

        :rtype: Bnd_Box

        """
        return _MeshVS.MeshVS_DataSource_GetBoundingBox(self, *args)


    def GetDetectedEntities(self, *args):
        """
        * Returns maps of entities (nodes and elements) detected by mouse click at the point (X,Y) on the current view plane, with the tolerance aTol. DMin - is out argument should return actual detection tolerance. Returns True if something is detected. It should be redefined if the advanced mesh selection is activated. Default implementation returns False.

        :param Prs:
        :type Prs: Handle_MeshVS_Mesh &
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param aTol:
        :type aTol: float
        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elements:
        :type Elements: Handle_TColStd_HPackedMapOfInteger &
        :param DMin:
        :type DMin: float &
        :rtype: bool

        * Returns maps of entities (nodes and elements) detected by mouse selection with rectangular box (XMin, YMin, XMax, YMax) on the current veiw plane, with the tolerance aTol. Returns True if something is detected. It should be redefined if the advanced mesh selection is activated. Default implementation returns False.

        :param Prs:
        :type Prs: Handle_MeshVS_Mesh &
        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elements:
        :type Elements: Handle_TColStd_HPackedMapOfInteger &
        :rtype: bool

        * Returns maps of entities (nodes and elements) detected by mouse selection with the polyline <Polyline> on the current veiw plane, with the tolerance aTol. Returns True if something is detected. It should be redefined if the advanced mesh selection is activated. Default implementation returns False.

        :param Prs:
        :type Prs: Handle_MeshVS_Mesh &
        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elements:
        :type Elements: Handle_TColStd_HPackedMapOfInteger &
        :rtype: bool

        * Filter out the maps of mesh entities so as to keep only the entities that are allowed to be selected according to the current context. Returns True if any of the maps has been changed. It should be redefined if the advanced mesh selection is activated. Default implementation returns False.

        :param Prs:
        :type Prs: Handle_MeshVS_Mesh &
        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elements:
        :type Elements: Handle_TColStd_HPackedMapOfInteger &
        :rtype: bool

        """
        return _MeshVS.MeshVS_DataSource_GetDetectedEntities(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataSource self)"""
        return _MeshVS.MeshVS_DataSource__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataSource self) -> Handle_MeshVS_DataSource"""
        return _MeshVS.MeshVS_DataSource_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataSource.GetGeom = new_instancemethod(_MeshVS.MeshVS_DataSource_GetGeom, None, MeshVS_DataSource)
MeshVS_DataSource.GetGeomType = new_instancemethod(_MeshVS.MeshVS_DataSource_GetGeomType, None, MeshVS_DataSource)
MeshVS_DataSource.Get3DGeom = new_instancemethod(_MeshVS.MeshVS_DataSource_Get3DGeom, None, MeshVS_DataSource)
MeshVS_DataSource.GetAddr = new_instancemethod(_MeshVS.MeshVS_DataSource_GetAddr, None, MeshVS_DataSource)
MeshVS_DataSource.GetNodesByElement = new_instancemethod(_MeshVS.MeshVS_DataSource_GetNodesByElement, None, MeshVS_DataSource)
MeshVS_DataSource.GetAllNodes = new_instancemethod(_MeshVS.MeshVS_DataSource_GetAllNodes, None, MeshVS_DataSource)
MeshVS_DataSource.GetAllElements = new_instancemethod(_MeshVS.MeshVS_DataSource_GetAllElements, None, MeshVS_DataSource)
MeshVS_DataSource.GetNormal = new_instancemethod(_MeshVS.MeshVS_DataSource_GetNormal, None, MeshVS_DataSource)
MeshVS_DataSource.GetNodeNormal = new_instancemethod(_MeshVS.MeshVS_DataSource_GetNodeNormal, None, MeshVS_DataSource)
MeshVS_DataSource.GetNormalsByElement = new_instancemethod(_MeshVS.MeshVS_DataSource_GetNormalsByElement, None, MeshVS_DataSource)
MeshVS_DataSource.GetAllGroups = new_instancemethod(_MeshVS.MeshVS_DataSource_GetAllGroups, None, MeshVS_DataSource)
MeshVS_DataSource.GetGroup = new_instancemethod(_MeshVS.MeshVS_DataSource_GetGroup, None, MeshVS_DataSource)
MeshVS_DataSource.GetGroupAddr = new_instancemethod(_MeshVS.MeshVS_DataSource_GetGroupAddr, None, MeshVS_DataSource)
MeshVS_DataSource.IsAdvancedSelectionEnabled = new_instancemethod(_MeshVS.MeshVS_DataSource_IsAdvancedSelectionEnabled, None, MeshVS_DataSource)
MeshVS_DataSource.GetBoundingBox = new_instancemethod(_MeshVS.MeshVS_DataSource_GetBoundingBox, None, MeshVS_DataSource)
MeshVS_DataSource.GetDetectedEntities = new_instancemethod(_MeshVS.MeshVS_DataSource_GetDetectedEntities, None, MeshVS_DataSource)
MeshVS_DataSource._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataSource__kill_pointed, None, MeshVS_DataSource)
MeshVS_DataSource.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataSource_GetHandle, None, MeshVS_DataSource)
MeshVS_DataSource_swigregister = _MeshVS.MeshVS_DataSource_swigregister
MeshVS_DataSource_swigregister(MeshVS_DataSource)

class Handle_MeshVS_DataSource(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataSource_swiginit(self, _MeshVS.new_Handle_MeshVS_DataSource(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataSource_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataSource.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource_Nullify, None, Handle_MeshVS_DataSource)
Handle_MeshVS_DataSource.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource_IsNull, None, Handle_MeshVS_DataSource)
Handle_MeshVS_DataSource.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource_GetObject, None, Handle_MeshVS_DataSource)
Handle_MeshVS_DataSource._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource__kill_pointed, None, Handle_MeshVS_DataSource)
Handle_MeshVS_DataSource_swigregister = _MeshVS.Handle_MeshVS_DataSource_swigregister
Handle_MeshVS_DataSource_swigregister(Handle_MeshVS_DataSource)

def Handle_MeshVS_DataSource_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataSource_DownCast(AnObject)
Handle_MeshVS_DataSource_DownCast = _MeshVS.Handle_MeshVS_DataSource_DownCast

class MeshVS_Drawer(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Assign(self, *args):
        """
        * This method copies other drawer contents to this.

        :param aDrawer:
        :type aDrawer: Handle_MeshVS_Drawer &
        :rtype: void

        """
        return _MeshVS.MeshVS_Drawer_Assign(self, *args)


    def SetInteger(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: int
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetInteger(self, *args)


    def SetDouble(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetDouble(self, *args)


    def SetBoolean(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: bool
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetBoolean(self, *args)


    def SetColor(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetColor(self, *args)


    def SetMaterial(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: Graphic3d_MaterialAspect &
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetMaterial(self, *args)


    def SetAsciiString(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: TCollection_AsciiString &
        :rtype: None

        """
        return _MeshVS.MeshVS_Drawer_SetAsciiString(self, *args)


    def GetInteger(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: int &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetInteger(self, *args)


    def GetDouble(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: float &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetDouble(self, *args)


    def GetBoolean(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: bool
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetBoolean(self, *args)


    def GetColor(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetColor(self, *args)


    def GetMaterial(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: Graphic3d_MaterialAspect &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetMaterial(self, *args)


    def GetAsciiString(self, *args):
        """
        :param Key:
        :type Key: int
        :param Value:
        :type Value: TCollection_AsciiString &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_GetAsciiString(self, *args)


    def RemoveInteger(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveInteger(self, *args)


    def RemoveDouble(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveDouble(self, *args)


    def RemoveBoolean(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveBoolean(self, *args)


    def RemoveColor(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveColor(self, *args)


    def RemoveMaterial(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveMaterial(self, *args)


    def RemoveAsciiString(self, *args):
        """
        :param Key:
        :type Key: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Drawer_RemoveAsciiString(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_Drawer self)"""
        return _MeshVS.MeshVS_Drawer__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_Drawer self) -> Handle_MeshVS_Drawer"""
        return _MeshVS.MeshVS_Drawer_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_Drawer.Assign = new_instancemethod(_MeshVS.MeshVS_Drawer_Assign, None, MeshVS_Drawer)
MeshVS_Drawer.SetInteger = new_instancemethod(_MeshVS.MeshVS_Drawer_SetInteger, None, MeshVS_Drawer)
MeshVS_Drawer.SetDouble = new_instancemethod(_MeshVS.MeshVS_Drawer_SetDouble, None, MeshVS_Drawer)
MeshVS_Drawer.SetBoolean = new_instancemethod(_MeshVS.MeshVS_Drawer_SetBoolean, None, MeshVS_Drawer)
MeshVS_Drawer.SetColor = new_instancemethod(_MeshVS.MeshVS_Drawer_SetColor, None, MeshVS_Drawer)
MeshVS_Drawer.SetMaterial = new_instancemethod(_MeshVS.MeshVS_Drawer_SetMaterial, None, MeshVS_Drawer)
MeshVS_Drawer.SetAsciiString = new_instancemethod(_MeshVS.MeshVS_Drawer_SetAsciiString, None, MeshVS_Drawer)
MeshVS_Drawer.GetInteger = new_instancemethod(_MeshVS.MeshVS_Drawer_GetInteger, None, MeshVS_Drawer)
MeshVS_Drawer.GetDouble = new_instancemethod(_MeshVS.MeshVS_Drawer_GetDouble, None, MeshVS_Drawer)
MeshVS_Drawer.GetBoolean = new_instancemethod(_MeshVS.MeshVS_Drawer_GetBoolean, None, MeshVS_Drawer)
MeshVS_Drawer.GetColor = new_instancemethod(_MeshVS.MeshVS_Drawer_GetColor, None, MeshVS_Drawer)
MeshVS_Drawer.GetMaterial = new_instancemethod(_MeshVS.MeshVS_Drawer_GetMaterial, None, MeshVS_Drawer)
MeshVS_Drawer.GetAsciiString = new_instancemethod(_MeshVS.MeshVS_Drawer_GetAsciiString, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveInteger = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveInteger, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveDouble = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveDouble, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveBoolean = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveBoolean, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveColor = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveColor, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveMaterial = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveMaterial, None, MeshVS_Drawer)
MeshVS_Drawer.RemoveAsciiString = new_instancemethod(_MeshVS.MeshVS_Drawer_RemoveAsciiString, None, MeshVS_Drawer)
MeshVS_Drawer._kill_pointed = new_instancemethod(_MeshVS.MeshVS_Drawer__kill_pointed, None, MeshVS_Drawer)
MeshVS_Drawer.GetHandle = new_instancemethod(_MeshVS.MeshVS_Drawer_GetHandle, None, MeshVS_Drawer)
MeshVS_Drawer_swigregister = _MeshVS.MeshVS_Drawer_swigregister
MeshVS_Drawer_swigregister(MeshVS_Drawer)

class Handle_MeshVS_Drawer(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_Drawer_swiginit(self, _MeshVS.new_Handle_MeshVS_Drawer(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_Drawer_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_Drawer.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_Drawer_Nullify, None, Handle_MeshVS_Drawer)
Handle_MeshVS_Drawer.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_Drawer_IsNull, None, Handle_MeshVS_Drawer)
Handle_MeshVS_Drawer.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_Drawer_GetObject, None, Handle_MeshVS_Drawer)
Handle_MeshVS_Drawer._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_Drawer__kill_pointed, None, Handle_MeshVS_Drawer)
Handle_MeshVS_Drawer_swigregister = _MeshVS.Handle_MeshVS_Drawer_swigregister
Handle_MeshVS_Drawer_swigregister(Handle_MeshVS_Drawer)

def Handle_MeshVS_Drawer_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_Drawer_DownCast(AnObject)
Handle_MeshVS_Drawer_DownCast = _MeshVS.Handle_MeshVS_Drawer_DownCast

class MeshVS_DummySensitiveEntity(OCC.SelectBasics.SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :rtype: None

        """
        _MeshVS.MeshVS_DummySensitiveEntity_swiginit(self, _MeshVS.new_MeshVS_DummySensitiveEntity(*args))

    def Matches(self, *args):
        """
        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _MeshVS.MeshVS_DummySensitiveEntity_Matches(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DummySensitiveEntity self)"""
        return _MeshVS.MeshVS_DummySensitiveEntity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DummySensitiveEntity self) -> Handle_MeshVS_DummySensitiveEntity"""
        return _MeshVS.MeshVS_DummySensitiveEntity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DummySensitiveEntity.Matches = new_instancemethod(_MeshVS.MeshVS_DummySensitiveEntity_Matches, None, MeshVS_DummySensitiveEntity)
MeshVS_DummySensitiveEntity._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DummySensitiveEntity__kill_pointed, None, MeshVS_DummySensitiveEntity)
MeshVS_DummySensitiveEntity.GetHandle = new_instancemethod(_MeshVS.MeshVS_DummySensitiveEntity_GetHandle, None, MeshVS_DummySensitiveEntity)
MeshVS_DummySensitiveEntity_swigregister = _MeshVS.MeshVS_DummySensitiveEntity_swigregister
MeshVS_DummySensitiveEntity_swigregister(MeshVS_DummySensitiveEntity)

class Handle_MeshVS_DummySensitiveEntity(OCC.SelectBasics.Handle_SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DummySensitiveEntity_swiginit(self, _MeshVS.new_Handle_MeshVS_DummySensitiveEntity(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DummySensitiveEntity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DummySensitiveEntity.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DummySensitiveEntity_Nullify, None, Handle_MeshVS_DummySensitiveEntity)
Handle_MeshVS_DummySensitiveEntity.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DummySensitiveEntity_IsNull, None, Handle_MeshVS_DummySensitiveEntity)
Handle_MeshVS_DummySensitiveEntity.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DummySensitiveEntity_GetObject, None, Handle_MeshVS_DummySensitiveEntity)
Handle_MeshVS_DummySensitiveEntity._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DummySensitiveEntity__kill_pointed, None, Handle_MeshVS_DummySensitiveEntity)
Handle_MeshVS_DummySensitiveEntity_swigregister = _MeshVS.Handle_MeshVS_DummySensitiveEntity_swigregister
Handle_MeshVS_DummySensitiveEntity_swigregister(Handle_MeshVS_DummySensitiveEntity)

def Handle_MeshVS_DummySensitiveEntity_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DummySensitiveEntity_DownCast(AnObject)
Handle_MeshVS_DummySensitiveEntity_DownCast = _MeshVS.Handle_MeshVS_DummySensitiveEntity_DownCast

class MeshVS_HArray1OfSequenceOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TColStd_SequenceOfInteger &
        :rtype: None

        """
        _MeshVS.MeshVS_HArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_MeshVS_HArray1OfSequenceOfInteger(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfInteger

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_SequenceOfInteger

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: MeshVS_Array1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: MeshVS_Array1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_HArray1OfSequenceOfInteger self)"""
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_HArray1OfSequenceOfInteger self) -> Handle_MeshVS_HArray1OfSequenceOfInteger"""
        return _MeshVS.MeshVS_HArray1OfSequenceOfInteger_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_HArray1OfSequenceOfInteger.Init = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Init, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.Length = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Length, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.Lower = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Lower, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.Upper = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Upper, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.SetValue = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_SetValue, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.Value = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Value, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.ChangeValue = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_ChangeValue, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.Array1 = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_Array1, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.ChangeArray1 = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_ChangeArray1, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger__kill_pointed, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger.GetHandle = new_instancemethod(_MeshVS.MeshVS_HArray1OfSequenceOfInteger_GetHandle, None, MeshVS_HArray1OfSequenceOfInteger)
MeshVS_HArray1OfSequenceOfInteger_swigregister = _MeshVS.MeshVS_HArray1OfSequenceOfInteger_swigregister
MeshVS_HArray1OfSequenceOfInteger_swigregister(MeshVS_HArray1OfSequenceOfInteger)

class Handle_MeshVS_HArray1OfSequenceOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_swiginit(self, _MeshVS.new_Handle_MeshVS_HArray1OfSequenceOfInteger(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_HArray1OfSequenceOfInteger.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_Nullify, None, Handle_MeshVS_HArray1OfSequenceOfInteger)
Handle_MeshVS_HArray1OfSequenceOfInteger.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_IsNull, None, Handle_MeshVS_HArray1OfSequenceOfInteger)
Handle_MeshVS_HArray1OfSequenceOfInteger.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_GetObject, None, Handle_MeshVS_HArray1OfSequenceOfInteger)
Handle_MeshVS_HArray1OfSequenceOfInteger._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger__kill_pointed, None, Handle_MeshVS_HArray1OfSequenceOfInteger)
Handle_MeshVS_HArray1OfSequenceOfInteger_swigregister = _MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_swigregister
Handle_MeshVS_HArray1OfSequenceOfInteger_swigregister(Handle_MeshVS_HArray1OfSequenceOfInteger)

def Handle_MeshVS_HArray1OfSequenceOfInteger_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_DownCast(AnObject)
Handle_MeshVS_HArray1OfSequenceOfInteger_DownCast = _MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger_DownCast

class MeshVS_MapIteratorOfMapOfTwoNodes(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MeshVS_MapOfTwoNodes &
        :rtype: None

        """
        _MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_swiginit(self, _MeshVS.new_MeshVS_MapIteratorOfMapOfTwoNodes(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: MeshVS_MapOfTwoNodes &
        :rtype: None

        """
        return _MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: MeshVS_TwoNodes

        """
        return _MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_Key(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_MapIteratorOfMapOfTwoNodes.Initialize = new_instancemethod(_MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_Initialize, None, MeshVS_MapIteratorOfMapOfTwoNodes)
MeshVS_MapIteratorOfMapOfTwoNodes.Key = new_instancemethod(_MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_Key, None, MeshVS_MapIteratorOfMapOfTwoNodes)
MeshVS_MapIteratorOfMapOfTwoNodes._kill_pointed = new_instancemethod(_MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes__kill_pointed, None, MeshVS_MapIteratorOfMapOfTwoNodes)
MeshVS_MapIteratorOfMapOfTwoNodes_swigregister = _MeshVS.MeshVS_MapIteratorOfMapOfTwoNodes_swigregister
MeshVS_MapIteratorOfMapOfTwoNodes_swigregister(MeshVS_MapIteratorOfMapOfTwoNodes)

class MeshVS_MapOfTwoNodes(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MeshVS.MeshVS_MapOfTwoNodes_swiginit(self, _MeshVS.new_MeshVS_MapOfTwoNodes(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_MapOfTwoNodes &
        :rtype: MeshVS_MapOfTwoNodes

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_MapOfTwoNodes &
        :rtype: MeshVS_MapOfTwoNodes

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Clear(self, *args)


    def Add(self, *args):
        """
        :param aKey:
        :type aKey: MeshVS_TwoNodes &
        :rtype: bool

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Add(self, *args)


    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: MeshVS_TwoNodes &
        :rtype: bool

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Contains(self, *args)


    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: MeshVS_TwoNodes &
        :rtype: bool

        """
        return _MeshVS.MeshVS_MapOfTwoNodes_Remove(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_MapOfTwoNodes self)"""
        return _MeshVS.MeshVS_MapOfTwoNodes__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_MapOfTwoNodes.Assign = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Assign, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.Set = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Set, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.ReSize = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_ReSize, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.Clear = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Clear, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.Add = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Add, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.Contains = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Contains, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes.Remove = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes_Remove, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes._kill_pointed = new_instancemethod(_MeshVS.MeshVS_MapOfTwoNodes__kill_pointed, None, MeshVS_MapOfTwoNodes)
MeshVS_MapOfTwoNodes_swigregister = _MeshVS.MeshVS_MapOfTwoNodes_swigregister
MeshVS_MapOfTwoNodes_swigregister(MeshVS_MapOfTwoNodes)

class MeshVS_Mesh(OCC.AIS.AIS_InteractiveObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor. theIsAllowOverlapped is Standard_True, if it is allowed to draw edges overlapped with beams Its value is stored in drawer

        :param theIsAllowOverlapped: default value is Standard_False
        :type theIsAllowOverlapped: bool
        :rtype: None

        """
        _MeshVS.MeshVS_Mesh_swiginit(self, _MeshVS.new_MeshVS_Mesh(*args))

    def Destroy(self, *args):
        """
        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_Destroy(self, *args)


    def Compute(self, *args):
        """
        * Computes presentation using builders added to sequence. Each builder computes own part of mesh presentation according to its type.

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager3d &
        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param DisplayMode:
        :type DisplayMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_Compute(self, *args)


    def ComputeSelection(self, *args):
        """
        * Computes selection according to SelectMode

        :param Sel:
        :type Sel: Handle_SelectMgr_Selection &
        :param SelectMode:
        :type SelectMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_ComputeSelection(self, *args)


    def HilightSelected(self, *args):
        """
        * Draw selected owners presentation

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager3d &
        :param Owners:
        :type Owners: SelectMgr_SequenceOfOwner &
        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_HilightSelected(self, *args)


    def HilightOwnerWithColor(self, *args):
        """
        * Draw hilighted owner presentation

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager3d &
        :param Color:
        :type Color: Quantity_NameOfColor
        :param Owner:
        :type Owner: Handle_SelectMgr_EntityOwner &
        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_HilightOwnerWithColor(self, *args)


    def ClearSelected(self, *args):
        """
        * Clears internal selection presentation

        :rtype: void

        """
        return _MeshVS.MeshVS_Mesh_ClearSelected(self, *args)


    def GetBuildersCount(self, *args):
        """
        * How many builders there are in sequence

        :rtype: int

        """
        return _MeshVS.MeshVS_Mesh_GetBuildersCount(self, *args)


    def GetBuilder(self, *args):
        """
        * Returns builder by its index in sequence

        :param Index:
        :type Index: int
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_Mesh_GetBuilder(self, *args)


    def GetBuilderById(self, *args):
        """
        * Returns builder by its ID

        :param Id:
        :type Id: int
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_Mesh_GetBuilderById(self, *args)


    def GetFreeId(self, *args):
        """
        * Returns the smallest positive ID, not occupied by any builder. This method using when builder is created with ID = -1

        :rtype: int

        """
        return _MeshVS.MeshVS_Mesh_GetFreeId(self, *args)


    def AddBuilder(self, *args):
        """
        * Adds builder to tale of sequence. PrsBuilder is builder to be added If TreatAsHilighter is true, MeshVS_Mesh will use this builder to create presentation of hilighted and selected owners. Only one builder can be hilighter, so that if you call this method with TreatAsHilighter = Standard_True some times, only last builder will be hilighter WARNING: As minimum one builder must be added as hilighter, otherwise selection cannot be computed

        :param Builder:
        :type Builder: Handle_MeshVS_PrsBuilder &
        :param TreatAsHilighter: default value is Standard_False
        :type TreatAsHilighter: bool
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_AddBuilder(self, *args)


    def SetHilighter(self, *args):
        """
        * Changes hilighter ( see above )

        :param Builder:
        :type Builder: Handle_MeshVS_PrsBuilder &
        :rtype: None

        * Sets builder with sequence index 'Index' as hilighter

        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_SetHilighter(self, *args)


    def SetHilighterById(self, *args):
        """
        * Sets builder with identificator 'Id' as hilighter

        :param Id:
        :type Id: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_SetHilighterById(self, *args)


    def GetHilighter(self, *args):
        """
        * Returns hilighter

        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_Mesh_GetHilighter(self, *args)


    def RemoveBuilder(self, *args):
        """
        * Removes builder from sequence. If it is hilighter, hilighter will be NULL ( Don't remember to set it to other after!!! )

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_RemoveBuilder(self, *args)


    def RemoveBuilderById(self, *args):
        """
        * Removes builder with identificator Id

        :param Id:
        :type Id: int
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_RemoveBuilderById(self, *args)


    def FindBuilder(self, *args):
        """
        * Finds builder by its type the string represents

        :param TypeString:
        :type TypeString: char *
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_Mesh_FindBuilder(self, *args)


    def GetOwnerMaps(self, *args):
        """
        * Returns map of owners.

        :param IsElement:
        :type IsElement: bool
        :rtype: MeshVS_DataMapOfIntegerOwner

        """
        return _MeshVS.MeshVS_Mesh_GetOwnerMaps(self, *args)


    def GetDataSource(self, *args):
        """
        * Returns default builders' data source

        :rtype: Handle_MeshVS_DataSource

        """
        return _MeshVS.MeshVS_Mesh_GetDataSource(self, *args)


    def SetDataSource(self, *args):
        """
        * Sets default builders' data source

        :param aDataSource:
        :type aDataSource: Handle_MeshVS_DataSource &
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetDataSource(self, *args)


    def GetDrawer(self, *args):
        """
        * Returns default builders' drawer

        :rtype: Handle_MeshVS_Drawer

        """
        return _MeshVS.MeshVS_Mesh_GetDrawer(self, *args)


    def SetDrawer(self, *args):
        """
        * Sets default builders' drawer

        :param aDrawer:
        :type aDrawer: Handle_MeshVS_Drawer &
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetDrawer(self, *args)


    def IsHiddenElem(self, *args):
        """
        * Returns True if specified element is hidden By default no elements are hidden

        :param ID:
        :type ID: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_IsHiddenElem(self, *args)


    def IsHiddenNode(self, *args):
        """
        * Returns True if specified node is hidden. By default all nodes are hidden

        :param ID:
        :type ID: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_IsHiddenNode(self, *args)


    def IsSelectableElem(self, *args):
        """
        * Returns True if specified element is not hidden

        :param ID:
        :type ID: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_IsSelectableElem(self, *args)


    def IsSelectableNode(self, *args):
        """
        * Returns True if specified node is specified as selectable.

        :param ID:
        :type ID: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_IsSelectableNode(self, *args)


    def GetHiddenNodes(self, *args):
        """
        * Returns map of hidden nodes (may be null handle)

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_Mesh_GetHiddenNodes(self, *args)


    def SetHiddenNodes(self, *args):
        """
        * Sets map of hidden nodes, which shall not be displayed individually. If nodes shared by some elements shall not be drawn, they should be included into that map

        :param Ids:
        :type Ids: Handle_TColStd_HPackedMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetHiddenNodes(self, *args)


    def GetHiddenElems(self, *args):
        """
        * Returns map of hidden elements (may be null handle)

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_Mesh_GetHiddenElems(self, *args)


    def SetHiddenElems(self, *args):
        """
        * Sets map of hidden elements

        :param Ids:
        :type Ids: Handle_TColStd_HPackedMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetHiddenElems(self, *args)


    def GetSelectableNodes(self, *args):
        """
        * Returns map of selectable elements (may be null handle)

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_Mesh_GetSelectableNodes(self, *args)


    def SetSelectableNodes(self, *args):
        """
        * Sets map of selectable nodes.

        :param Ids:
        :type Ids: Handle_TColStd_HPackedMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetSelectableNodes(self, *args)


    def UpdateSelectableNodes(self, *args):
        """
        * Automatically computes selectable nodes; the node is considered as being selectable if it is either not hidden, or is hidden but referred by at least one non-hidden element. Thus all nodes that are visible (either individually, or as ends or corners of elements) are selectable by default.

        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_UpdateSelectableNodes(self, *args)


    def GetMeshSelMethod(self, *args):
        """
        * Returns set mesh selection method (see MeshVS.cdl)

        :rtype: MeshVS_MeshSelectionMethod

        """
        return _MeshVS.MeshVS_Mesh_GetMeshSelMethod(self, *args)


    def SetMeshSelMethod(self, *args):
        """
        * Sets mesh selection method (see MeshVS.cdl)

        :param M:
        :type M: MeshVS_MeshSelectionMethod
        :rtype: None

        """
        return _MeshVS.MeshVS_Mesh_SetMeshSelMethod(self, *args)


    def IsWholeMeshOwner(self, *args):
        """
        * Returns True if the given owner represents a whole mesh.

        :param theOwner:
        :type theOwner: Handle_SelectMgr_EntityOwner &
        :rtype: bool

        """
        return _MeshVS.MeshVS_Mesh_IsWholeMeshOwner(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_Mesh.Destroy = new_instancemethod(_MeshVS.MeshVS_Mesh_Destroy, None, MeshVS_Mesh)
MeshVS_Mesh.Compute = new_instancemethod(_MeshVS.MeshVS_Mesh_Compute, None, MeshVS_Mesh)
MeshVS_Mesh.ComputeSelection = new_instancemethod(_MeshVS.MeshVS_Mesh_ComputeSelection, None, MeshVS_Mesh)
MeshVS_Mesh.HilightSelected = new_instancemethod(_MeshVS.MeshVS_Mesh_HilightSelected, None, MeshVS_Mesh)
MeshVS_Mesh.HilightOwnerWithColor = new_instancemethod(_MeshVS.MeshVS_Mesh_HilightOwnerWithColor, None, MeshVS_Mesh)
MeshVS_Mesh.ClearSelected = new_instancemethod(_MeshVS.MeshVS_Mesh_ClearSelected, None, MeshVS_Mesh)
MeshVS_Mesh.GetBuildersCount = new_instancemethod(_MeshVS.MeshVS_Mesh_GetBuildersCount, None, MeshVS_Mesh)
MeshVS_Mesh.GetBuilder = new_instancemethod(_MeshVS.MeshVS_Mesh_GetBuilder, None, MeshVS_Mesh)
MeshVS_Mesh.GetBuilderById = new_instancemethod(_MeshVS.MeshVS_Mesh_GetBuilderById, None, MeshVS_Mesh)
MeshVS_Mesh.GetFreeId = new_instancemethod(_MeshVS.MeshVS_Mesh_GetFreeId, None, MeshVS_Mesh)
MeshVS_Mesh.AddBuilder = new_instancemethod(_MeshVS.MeshVS_Mesh_AddBuilder, None, MeshVS_Mesh)
MeshVS_Mesh.SetHilighter = new_instancemethod(_MeshVS.MeshVS_Mesh_SetHilighter, None, MeshVS_Mesh)
MeshVS_Mesh.SetHilighterById = new_instancemethod(_MeshVS.MeshVS_Mesh_SetHilighterById, None, MeshVS_Mesh)
MeshVS_Mesh.GetHilighter = new_instancemethod(_MeshVS.MeshVS_Mesh_GetHilighter, None, MeshVS_Mesh)
MeshVS_Mesh.RemoveBuilder = new_instancemethod(_MeshVS.MeshVS_Mesh_RemoveBuilder, None, MeshVS_Mesh)
MeshVS_Mesh.RemoveBuilderById = new_instancemethod(_MeshVS.MeshVS_Mesh_RemoveBuilderById, None, MeshVS_Mesh)
MeshVS_Mesh.FindBuilder = new_instancemethod(_MeshVS.MeshVS_Mesh_FindBuilder, None, MeshVS_Mesh)
MeshVS_Mesh.GetOwnerMaps = new_instancemethod(_MeshVS.MeshVS_Mesh_GetOwnerMaps, None, MeshVS_Mesh)
MeshVS_Mesh.GetDataSource = new_instancemethod(_MeshVS.MeshVS_Mesh_GetDataSource, None, MeshVS_Mesh)
MeshVS_Mesh.SetDataSource = new_instancemethod(_MeshVS.MeshVS_Mesh_SetDataSource, None, MeshVS_Mesh)
MeshVS_Mesh.GetDrawer = new_instancemethod(_MeshVS.MeshVS_Mesh_GetDrawer, None, MeshVS_Mesh)
MeshVS_Mesh.SetDrawer = new_instancemethod(_MeshVS.MeshVS_Mesh_SetDrawer, None, MeshVS_Mesh)
MeshVS_Mesh.IsHiddenElem = new_instancemethod(_MeshVS.MeshVS_Mesh_IsHiddenElem, None, MeshVS_Mesh)
MeshVS_Mesh.IsHiddenNode = new_instancemethod(_MeshVS.MeshVS_Mesh_IsHiddenNode, None, MeshVS_Mesh)
MeshVS_Mesh.IsSelectableElem = new_instancemethod(_MeshVS.MeshVS_Mesh_IsSelectableElem, None, MeshVS_Mesh)
MeshVS_Mesh.IsSelectableNode = new_instancemethod(_MeshVS.MeshVS_Mesh_IsSelectableNode, None, MeshVS_Mesh)
MeshVS_Mesh.GetHiddenNodes = new_instancemethod(_MeshVS.MeshVS_Mesh_GetHiddenNodes, None, MeshVS_Mesh)
MeshVS_Mesh.SetHiddenNodes = new_instancemethod(_MeshVS.MeshVS_Mesh_SetHiddenNodes, None, MeshVS_Mesh)
MeshVS_Mesh.GetHiddenElems = new_instancemethod(_MeshVS.MeshVS_Mesh_GetHiddenElems, None, MeshVS_Mesh)
MeshVS_Mesh.SetHiddenElems = new_instancemethod(_MeshVS.MeshVS_Mesh_SetHiddenElems, None, MeshVS_Mesh)
MeshVS_Mesh.GetSelectableNodes = new_instancemethod(_MeshVS.MeshVS_Mesh_GetSelectableNodes, None, MeshVS_Mesh)
MeshVS_Mesh.SetSelectableNodes = new_instancemethod(_MeshVS.MeshVS_Mesh_SetSelectableNodes, None, MeshVS_Mesh)
MeshVS_Mesh.UpdateSelectableNodes = new_instancemethod(_MeshVS.MeshVS_Mesh_UpdateSelectableNodes, None, MeshVS_Mesh)
MeshVS_Mesh.GetMeshSelMethod = new_instancemethod(_MeshVS.MeshVS_Mesh_GetMeshSelMethod, None, MeshVS_Mesh)
MeshVS_Mesh.SetMeshSelMethod = new_instancemethod(_MeshVS.MeshVS_Mesh_SetMeshSelMethod, None, MeshVS_Mesh)
MeshVS_Mesh.IsWholeMeshOwner = new_instancemethod(_MeshVS.MeshVS_Mesh_IsWholeMeshOwner, None, MeshVS_Mesh)
MeshVS_Mesh._kill_pointed = new_instancemethod(_MeshVS.MeshVS_Mesh__kill_pointed, None, MeshVS_Mesh)
MeshVS_Mesh.GetHandle = new_instancemethod(_MeshVS.MeshVS_Mesh_GetHandle, None, MeshVS_Mesh)
MeshVS_Mesh_swigregister = _MeshVS.MeshVS_Mesh_swigregister
MeshVS_Mesh_swigregister(MeshVS_Mesh)

class Handle_MeshVS_Mesh(OCC.AIS.Handle_AIS_InteractiveObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_Mesh_swiginit(self, _MeshVS.new_Handle_MeshVS_Mesh(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_Mesh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_Mesh.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_Mesh_Nullify, None, Handle_MeshVS_Mesh)
Handle_MeshVS_Mesh.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_Mesh_IsNull, None, Handle_MeshVS_Mesh)
Handle_MeshVS_Mesh.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_Mesh_GetObject, None, Handle_MeshVS_Mesh)
Handle_MeshVS_Mesh._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_Mesh__kill_pointed, None, Handle_MeshVS_Mesh)
Handle_MeshVS_Mesh_swigregister = _MeshVS.Handle_MeshVS_Mesh_swigregister
Handle_MeshVS_Mesh_swigregister(Handle_MeshVS_Mesh)

def Handle_MeshVS_Mesh_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_Mesh_DownCast(AnObject)
Handle_MeshVS_Mesh_DownCast = _MeshVS.Handle_MeshVS_Mesh_DownCast

class MeshVS_MeshEntityOwner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SelObj:
        :type SelObj: SelectMgr_SOPtr &
        :param ID:
        :type ID: int
        :param MeshEntity:
        :type MeshEntity: Standard_Address
        :param Type:
        :type Type: MeshVS_EntityType &
        :param Priority: default value is 0
        :type Priority: int
        :param IsGroup: default value is Standard_False
        :type IsGroup: bool
        :rtype: None

        """
        _MeshVS.MeshVS_MeshEntityOwner_swiginit(self, _MeshVS.new_MeshVS_MeshEntityOwner(*args))

    def Owner(self, *args):
        """
        * Returns an address of element or node data structure

        :rtype: Standard_Address

        """
        return _MeshVS.MeshVS_MeshEntityOwner_Owner(self, *args)


    def Type(self, *args):
        """
        * Returns type of element or node data structure

        :rtype: MeshVS_EntityType

        """
        return _MeshVS.MeshVS_MeshEntityOwner_Type(self, *args)


    def ID(self, *args):
        """
        * Returns ID of element or node data structure

        :rtype: int

        """
        return _MeshVS.MeshVS_MeshEntityOwner_ID(self, *args)


    def IsGroup(self, *args):
        """
        * Returns true if owner represents group of nodes or elements

        :rtype: bool

        """
        return _MeshVS.MeshVS_MeshEntityOwner_IsGroup(self, *args)


    def IsHilighted(self, *args):
        """
        * Returns true if owner is hilighted

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager &
        :param Mode: default value is 0
        :type Mode: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_MeshEntityOwner_IsHilighted(self, *args)


    def Hilight(self, *args):
        """
        * Hilights owner

        :rtype: void

        * Hilights owner

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager &
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshEntityOwner_Hilight(self, *args)


    def HilightWithColor(self, *args):
        """
        * Hilights owner with the certain color

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager3d &
        :param theColor:
        :type theColor: Quantity_NameOfColor
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshEntityOwner_HilightWithColor(self, *args)


    def Unhilight(self, *args):
        """
        * Strip hilight of owner

        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager &
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshEntityOwner_Unhilight(self, *args)


    def Clear(self, *args):
        """
        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager &
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshEntityOwner_Clear(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_MeshEntityOwner.Owner = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_Owner, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.Type = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_Type, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.ID = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_ID, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.IsGroup = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_IsGroup, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.IsHilighted = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_IsHilighted, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.Hilight = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_Hilight, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.HilightWithColor = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_HilightWithColor, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.Unhilight = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_Unhilight, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.Clear = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_Clear, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner__kill_pointed, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner.GetHandle = new_instancemethod(_MeshVS.MeshVS_MeshEntityOwner_GetHandle, None, MeshVS_MeshEntityOwner)
MeshVS_MeshEntityOwner_swigregister = _MeshVS.MeshVS_MeshEntityOwner_swigregister
MeshVS_MeshEntityOwner_swigregister(MeshVS_MeshEntityOwner)

class Handle_MeshVS_MeshEntityOwner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_MeshEntityOwner_swiginit(self, _MeshVS.new_Handle_MeshVS_MeshEntityOwner(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_MeshEntityOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_MeshEntityOwner.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_MeshEntityOwner_Nullify, None, Handle_MeshVS_MeshEntityOwner)
Handle_MeshVS_MeshEntityOwner.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_MeshEntityOwner_IsNull, None, Handle_MeshVS_MeshEntityOwner)
Handle_MeshVS_MeshEntityOwner.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_MeshEntityOwner_GetObject, None, Handle_MeshVS_MeshEntityOwner)
Handle_MeshVS_MeshEntityOwner._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_MeshEntityOwner__kill_pointed, None, Handle_MeshVS_MeshEntityOwner)
Handle_MeshVS_MeshEntityOwner_swigregister = _MeshVS.Handle_MeshVS_MeshEntityOwner_swigregister
Handle_MeshVS_MeshEntityOwner_swigregister(Handle_MeshVS_MeshEntityOwner)

def Handle_MeshVS_MeshEntityOwner_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_MeshEntityOwner_DownCast(AnObject)
Handle_MeshVS_MeshEntityOwner_DownCast = _MeshVS.Handle_MeshVS_MeshEntityOwner_DownCast

class MeshVS_MeshOwner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theSelObj:
        :type theSelObj: SelectMgr_SOPtr &
        :param theDS:
        :type theDS: Handle_MeshVS_DataSource &
        :param thePriority: default value is 0
        :type thePriority: int
        :rtype: None

        """
        _MeshVS.MeshVS_MeshOwner_swiginit(self, _MeshVS.new_MeshVS_MeshOwner(*args))

    def GetDataSource(self, *args):
        """
        :rtype: Handle_MeshVS_DataSource

        """
        return _MeshVS.MeshVS_MeshOwner_GetDataSource(self, *args)


    def GetSelectedNodes(self, *args):
        """
        * Returns ids of selected mesh nodes

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_MeshOwner_GetSelectedNodes(self, *args)


    def GetSelectedElements(self, *args):
        """
        * Returns ids of selected mesh elements

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_MeshOwner_GetSelectedElements(self, *args)


    def AddSelectedEntities(self, *args):
        """
        * Saves ids of selected mesh entities

        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elems:
        :type Elems: Handle_TColStd_HPackedMapOfInteger &
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshOwner_AddSelectedEntities(self, *args)


    def ClearSelectedEntities(self, *args):
        """
        * Clears ids of selected mesh entities

        :rtype: void

        """
        return _MeshVS.MeshVS_MeshOwner_ClearSelectedEntities(self, *args)


    def GetDetectedNodes(self, *args):
        """
        * Returns ids of hilighted mesh nodes

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_MeshOwner_GetDetectedNodes(self, *args)


    def GetDetectedElements(self, *args):
        """
        * Returns ids of hilighted mesh elements

        :rtype: Handle_TColStd_HPackedMapOfInteger

        """
        return _MeshVS.MeshVS_MeshOwner_GetDetectedElements(self, *args)


    def SetDetectedEntities(self, *args):
        """
        * Saves ids of hilighted mesh entities

        :param Nodes:
        :type Nodes: Handle_TColStd_HPackedMapOfInteger &
        :param Elems:
        :type Elems: Handle_TColStd_HPackedMapOfInteger &
        :rtype: None

        """
        return _MeshVS.MeshVS_MeshOwner_SetDetectedEntities(self, *args)


    def HilightWithColor(self, *args):
        """
        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager3d &
        :param theColor:
        :type theColor: Quantity_NameOfColor
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshOwner_HilightWithColor(self, *args)


    def Unhilight(self, *args):
        """
        :param PM:
        :type PM: Handle_PrsMgr_PresentationManager &
        :param Mode: default value is 0
        :type Mode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshOwner_Unhilight(self, *args)


    def IsForcedHilight(self, *args):
        """
        :rtype: bool

        """
        return _MeshVS.MeshVS_MeshOwner_IsForcedHilight(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_MeshOwner.GetDataSource = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetDataSource, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.GetSelectedNodes = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetSelectedNodes, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.GetSelectedElements = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetSelectedElements, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.AddSelectedEntities = new_instancemethod(_MeshVS.MeshVS_MeshOwner_AddSelectedEntities, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.ClearSelectedEntities = new_instancemethod(_MeshVS.MeshVS_MeshOwner_ClearSelectedEntities, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.GetDetectedNodes = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetDetectedNodes, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.GetDetectedElements = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetDetectedElements, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.SetDetectedEntities = new_instancemethod(_MeshVS.MeshVS_MeshOwner_SetDetectedEntities, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.HilightWithColor = new_instancemethod(_MeshVS.MeshVS_MeshOwner_HilightWithColor, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.Unhilight = new_instancemethod(_MeshVS.MeshVS_MeshOwner_Unhilight, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.IsForcedHilight = new_instancemethod(_MeshVS.MeshVS_MeshOwner_IsForcedHilight, None, MeshVS_MeshOwner)
MeshVS_MeshOwner._kill_pointed = new_instancemethod(_MeshVS.MeshVS_MeshOwner__kill_pointed, None, MeshVS_MeshOwner)
MeshVS_MeshOwner.GetHandle = new_instancemethod(_MeshVS.MeshVS_MeshOwner_GetHandle, None, MeshVS_MeshOwner)
MeshVS_MeshOwner_swigregister = _MeshVS.MeshVS_MeshOwner_swigregister
MeshVS_MeshOwner_swigregister(MeshVS_MeshOwner)

class Handle_MeshVS_MeshOwner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_MeshOwner_swiginit(self, _MeshVS.new_Handle_MeshVS_MeshOwner(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_MeshOwner_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_MeshOwner.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_MeshOwner_Nullify, None, Handle_MeshVS_MeshOwner)
Handle_MeshVS_MeshOwner.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_MeshOwner_IsNull, None, Handle_MeshVS_MeshOwner)
Handle_MeshVS_MeshOwner.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_MeshOwner_GetObject, None, Handle_MeshVS_MeshOwner)
Handle_MeshVS_MeshOwner._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_MeshOwner__kill_pointed, None, Handle_MeshVS_MeshOwner)
Handle_MeshVS_MeshOwner_swigregister = _MeshVS.Handle_MeshVS_MeshOwner_swigregister
Handle_MeshVS_MeshOwner_swigregister(Handle_MeshVS_MeshOwner)

def Handle_MeshVS_MeshOwner_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_MeshOwner_DownCast(AnObject)
Handle_MeshVS_MeshOwner_DownCast = _MeshVS.Handle_MeshVS_MeshOwner_DownCast

class MeshVS_PrsBuilder(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Build(self, *args):
        """
        * Builds presentation of certain type of data. Prs is presentation object which this method constructs. IDs is set of numeric identificators forming object appearance. IDsToExclude is set of IDs to exclude from processing. If some entity has been excluded, it is not processed by other builders. IsElement indicates, IDs is identificators of nodes or elements. DisplayMode is numeric constant describing display mode (see MeshVS_DisplayModeFlags.hxx)

        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param IDs:
        :type IDs: TColStd_PackedMapOfInteger &
        :param IDsToExclude:
        :type IDsToExclude: TColStd_PackedMapOfInteger &
        :param IsElement:
        :type IsElement: bool
        :param DisplayMode:
        :type DisplayMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_PrsBuilder_Build(self, *args)


    def CustomBuild(self, *args):
        """
        * This method is called to build presentation of custom elements (they have MeshVS_ET_0D type). IDs is set of numeric identificators of elements for custom building. IDsToExclude is set of IDs to exclude from processing. If some entity has been excluded, it is not processed by other builders. DisplayMode is numeric constant describing display mode (see MeshVS_DisplayModeFlags.hxx)

        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param IDs:
        :type IDs: TColStd_PackedMapOfInteger &
        :param IDsToExclude:
        :type IDsToExclude: TColStd_PackedMapOfInteger &
        :param DisplayMode:
        :type DisplayMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_PrsBuilder_CustomBuild(self, *args)


    def CustomSensitiveEntity(self, *args):
        """
        * This method is called to build sensitive of custom elements ( they have MeshVS_ET_0D type )

        :param Owner:
        :type Owner: Handle_SelectBasics_EntityOwner &
        :param SelectMode:
        :type SelectMode: int
        :rtype: Handle_SelectBasics_SensitiveEntity

        """
        return _MeshVS.MeshVS_PrsBuilder_CustomSensitiveEntity(self, *args)


    def GetFlags(self, *args):
        """
        * Returns flags, assigned with builder during creation

        :rtype: int

        """
        return _MeshVS.MeshVS_PrsBuilder_GetFlags(self, *args)


    def TestFlags(self, *args):
        """
        * Test whether display mode has flags assigned with this builder. This method has default implementation and can be redefined for advance behavior Returns Standard_True only if display mode is appropriate for this builder

        :param DisplayMode:
        :type DisplayMode: int
        :rtype: bool

        """
        return _MeshVS.MeshVS_PrsBuilder_TestFlags(self, *args)


    def GetId(self, *args):
        """
        * Returns builder ID

        :rtype: int

        """
        return _MeshVS.MeshVS_PrsBuilder_GetId(self, *args)


    def GetPriority(self, *args):
        """
        * Returns priority; as priority bigger, as soon builder will be called.

        :rtype: int

        """
        return _MeshVS.MeshVS_PrsBuilder_GetPriority(self, *args)


    def GetDataSource(self, *args):
        """
        * Returns custom data source or default ( from MeshVS_Mesh ) if custom is NULL

        :rtype: Handle_MeshVS_DataSource

        """
        return _MeshVS.MeshVS_PrsBuilder_GetDataSource(self, *args)


    def SetDataSource(self, *args):
        """
        * Change custom data source

        :param newDS:
        :type newDS: Handle_MeshVS_DataSource &
        :rtype: None

        """
        return _MeshVS.MeshVS_PrsBuilder_SetDataSource(self, *args)


    def GetDrawer(self, *args):
        """
        * Returns custom drawer or default ( from MeshVS_Mesh ) if custom is NULL

        :rtype: Handle_MeshVS_Drawer

        """
        return _MeshVS.MeshVS_PrsBuilder_GetDrawer(self, *args)


    def SetDrawer(self, *args):
        """
        * Change custom drawer

        :param newDr:
        :type newDr: Handle_MeshVS_Drawer &
        :rtype: None

        """
        return _MeshVS.MeshVS_PrsBuilder_SetDrawer(self, *args)


    def SetExcluding(self, *args):
        """
        * Set excluding state. If it is Standard_True, the nodes or elements, processed by current builder will be noted and next builder won't process its.

        :param state:
        :type state: bool
        :rtype: None

        """
        return _MeshVS.MeshVS_PrsBuilder_SetExcluding(self, *args)


    def IsExcludingOn(self, *args):
        """
        * Read excluding state

        :rtype: bool

        """
        return _MeshVS.MeshVS_PrsBuilder_IsExcludingOn(self, *args)


    def SetPresentationManager(self, *args):
        """
        * Set presentation manager for builder

        :param thePrsMgr:
        :type thePrsMgr: Handle_PrsMgr_PresentationManager3d &
        :rtype: None

        """
        return _MeshVS.MeshVS_PrsBuilder_SetPresentationManager(self, *args)


    def GetPresentationManager(self, *args):
        """
        * Get presentation manager of builder

        :rtype: Handle_PrsMgr_PresentationManager3d

        """
        return _MeshVS.MeshVS_PrsBuilder_GetPresentationManager(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_PrsBuilder self)"""
        return _MeshVS.MeshVS_PrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_PrsBuilder self) -> Handle_MeshVS_PrsBuilder"""
        return _MeshVS.MeshVS_PrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_PrsBuilder.Build = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_Build, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.CustomBuild = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_CustomBuild, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.CustomSensitiveEntity = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_CustomSensitiveEntity, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetFlags = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetFlags, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.TestFlags = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_TestFlags, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetId = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetId, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetPriority = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetPriority, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetDataSource = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetDataSource, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.SetDataSource = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_SetDataSource, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetDrawer = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetDrawer, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.SetDrawer = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_SetDrawer, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.SetExcluding = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_SetExcluding, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.IsExcludingOn = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_IsExcludingOn, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.SetPresentationManager = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_SetPresentationManager, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetPresentationManager = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetPresentationManager, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_PrsBuilder__kill_pointed, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_PrsBuilder_GetHandle, None, MeshVS_PrsBuilder)
MeshVS_PrsBuilder_swigregister = _MeshVS.MeshVS_PrsBuilder_swigregister
MeshVS_PrsBuilder_swigregister(MeshVS_PrsBuilder)

class Handle_MeshVS_PrsBuilder(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_PrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_PrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_PrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_PrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_PrsBuilder_Nullify, None, Handle_MeshVS_PrsBuilder)
Handle_MeshVS_PrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_PrsBuilder_IsNull, None, Handle_MeshVS_PrsBuilder)
Handle_MeshVS_PrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_PrsBuilder_GetObject, None, Handle_MeshVS_PrsBuilder)
Handle_MeshVS_PrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_PrsBuilder__kill_pointed, None, Handle_MeshVS_PrsBuilder)
Handle_MeshVS_PrsBuilder_swigregister = _MeshVS.Handle_MeshVS_PrsBuilder_swigregister
Handle_MeshVS_PrsBuilder_swigregister(Handle_MeshVS_PrsBuilder)

def Handle_MeshVS_PrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_PrsBuilder_DownCast(AnObject)
Handle_MeshVS_PrsBuilder_DownCast = _MeshVS.Handle_MeshVS_PrsBuilder_DownCast

class MeshVS_SensitiveFace(OCC.Select3D.Select3D_SensitiveFace):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theOwner:
        :type theOwner: Handle_SelectBasics_EntityOwner &
        :param thePoints:
        :type thePoints: TColgp_Array1OfPnt
        :param theSensType: default value is Select3D_TOS_INTERIOR
        :type theSensType: Select3D_TypeOfSensitivity
        :rtype: None

        """
        _MeshVS.MeshVS_SensitiveFace_swiginit(self, _MeshVS.new_MeshVS_SensitiveFace(*args))

    def Matches(self, *args):
        """
        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _MeshVS.MeshVS_SensitiveFace_Matches(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_SensitiveFace self)"""
        return _MeshVS.MeshVS_SensitiveFace__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_SensitiveFace self) -> Handle_MeshVS_SensitiveFace"""
        return _MeshVS.MeshVS_SensitiveFace_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SensitiveFace.Matches = new_instancemethod(_MeshVS.MeshVS_SensitiveFace_Matches, None, MeshVS_SensitiveFace)
MeshVS_SensitiveFace._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SensitiveFace__kill_pointed, None, MeshVS_SensitiveFace)
MeshVS_SensitiveFace.GetHandle = new_instancemethod(_MeshVS.MeshVS_SensitiveFace_GetHandle, None, MeshVS_SensitiveFace)
MeshVS_SensitiveFace_swigregister = _MeshVS.MeshVS_SensitiveFace_swigregister
MeshVS_SensitiveFace_swigregister(MeshVS_SensitiveFace)

class Handle_MeshVS_SensitiveFace(OCC.Select3D.Handle_Select3D_SensitiveFace):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_SensitiveFace_swiginit(self, _MeshVS.new_Handle_MeshVS_SensitiveFace(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_SensitiveFace_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_SensitiveFace.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveFace_Nullify, None, Handle_MeshVS_SensitiveFace)
Handle_MeshVS_SensitiveFace.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveFace_IsNull, None, Handle_MeshVS_SensitiveFace)
Handle_MeshVS_SensitiveFace.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveFace_GetObject, None, Handle_MeshVS_SensitiveFace)
Handle_MeshVS_SensitiveFace._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveFace__kill_pointed, None, Handle_MeshVS_SensitiveFace)
Handle_MeshVS_SensitiveFace_swigregister = _MeshVS.Handle_MeshVS_SensitiveFace_swigregister
Handle_MeshVS_SensitiveFace_swigregister(Handle_MeshVS_SensitiveFace)

def Handle_MeshVS_SensitiveFace_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_SensitiveFace_DownCast(AnObject)
Handle_MeshVS_SensitiveFace_DownCast = _MeshVS.Handle_MeshVS_SensitiveFace_DownCast

class MeshVS_SensitiveMesh(OCC.Select3D.Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theOwner:
        :type theOwner: Handle_SelectBasics_EntityOwner &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        _MeshVS.MeshVS_SensitiveMesh_swiginit(self, _MeshVS.new_MeshVS_SensitiveMesh(*args))

    def GetMode(self, *args):
        """
        :rtype: int

        """
        return _MeshVS.MeshVS_SensitiveMesh_GetMode(self, *args)


    def Matches(self, *args):
        """
        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _MeshVS.MeshVS_SensitiveMesh_Matches(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_SensitiveMesh self)"""
        return _MeshVS.MeshVS_SensitiveMesh__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_SensitiveMesh self) -> Handle_MeshVS_SensitiveMesh"""
        return _MeshVS.MeshVS_SensitiveMesh_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SensitiveMesh.GetMode = new_instancemethod(_MeshVS.MeshVS_SensitiveMesh_GetMode, None, MeshVS_SensitiveMesh)
MeshVS_SensitiveMesh.Matches = new_instancemethod(_MeshVS.MeshVS_SensitiveMesh_Matches, None, MeshVS_SensitiveMesh)
MeshVS_SensitiveMesh._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SensitiveMesh__kill_pointed, None, MeshVS_SensitiveMesh)
MeshVS_SensitiveMesh.GetHandle = new_instancemethod(_MeshVS.MeshVS_SensitiveMesh_GetHandle, None, MeshVS_SensitiveMesh)
MeshVS_SensitiveMesh_swigregister = _MeshVS.MeshVS_SensitiveMesh_swigregister
MeshVS_SensitiveMesh_swigregister(MeshVS_SensitiveMesh)

class Handle_MeshVS_SensitiveMesh(OCC.Select3D.Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_SensitiveMesh_swiginit(self, _MeshVS.new_Handle_MeshVS_SensitiveMesh(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_SensitiveMesh_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_SensitiveMesh.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveMesh_Nullify, None, Handle_MeshVS_SensitiveMesh)
Handle_MeshVS_SensitiveMesh.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveMesh_IsNull, None, Handle_MeshVS_SensitiveMesh)
Handle_MeshVS_SensitiveMesh.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveMesh_GetObject, None, Handle_MeshVS_SensitiveMesh)
Handle_MeshVS_SensitiveMesh._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveMesh__kill_pointed, None, Handle_MeshVS_SensitiveMesh)
Handle_MeshVS_SensitiveMesh_swigregister = _MeshVS.Handle_MeshVS_SensitiveMesh_swigregister
Handle_MeshVS_SensitiveMesh_swigregister(Handle_MeshVS_SensitiveMesh)

def Handle_MeshVS_SensitiveMesh_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_SensitiveMesh_DownCast(AnObject)
Handle_MeshVS_SensitiveMesh_DownCast = _MeshVS.Handle_MeshVS_SensitiveMesh_DownCast

class MeshVS_SensitivePolyhedron(OCC.Select3D.Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Owner:
        :type Owner: Handle_SelectBasics_EntityOwner &
        :param Nodes:
        :type Nodes: TColgp_Array1OfPnt
        :param Topo:
        :type Topo: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :rtype: None

        """
        _MeshVS.MeshVS_SensitivePolyhedron_swiginit(self, _MeshVS.new_MeshVS_SensitivePolyhedron(*args))

    def Matches(self, *args):
        """
        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _MeshVS.MeshVS_SensitivePolyhedron_Matches(self, *args)


    def ComputeDepth(self, *args):
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _MeshVS.MeshVS_SensitivePolyhedron_ComputeDepth(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_SensitivePolyhedron self)"""
        return _MeshVS.MeshVS_SensitivePolyhedron__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_SensitivePolyhedron self) -> Handle_MeshVS_SensitivePolyhedron"""
        return _MeshVS.MeshVS_SensitivePolyhedron_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SensitivePolyhedron.Matches = new_instancemethod(_MeshVS.MeshVS_SensitivePolyhedron_Matches, None, MeshVS_SensitivePolyhedron)
MeshVS_SensitivePolyhedron.ComputeDepth = new_instancemethod(_MeshVS.MeshVS_SensitivePolyhedron_ComputeDepth, None, MeshVS_SensitivePolyhedron)
MeshVS_SensitivePolyhedron._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SensitivePolyhedron__kill_pointed, None, MeshVS_SensitivePolyhedron)
MeshVS_SensitivePolyhedron.GetHandle = new_instancemethod(_MeshVS.MeshVS_SensitivePolyhedron_GetHandle, None, MeshVS_SensitivePolyhedron)
MeshVS_SensitivePolyhedron_swigregister = _MeshVS.MeshVS_SensitivePolyhedron_swigregister
MeshVS_SensitivePolyhedron_swigregister(MeshVS_SensitivePolyhedron)

class Handle_MeshVS_SensitivePolyhedron(OCC.Select3D.Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_SensitivePolyhedron_swiginit(self, _MeshVS.new_Handle_MeshVS_SensitivePolyhedron(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_SensitivePolyhedron_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_SensitivePolyhedron.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_SensitivePolyhedron_Nullify, None, Handle_MeshVS_SensitivePolyhedron)
Handle_MeshVS_SensitivePolyhedron.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_SensitivePolyhedron_IsNull, None, Handle_MeshVS_SensitivePolyhedron)
Handle_MeshVS_SensitivePolyhedron.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_SensitivePolyhedron_GetObject, None, Handle_MeshVS_SensitivePolyhedron)
Handle_MeshVS_SensitivePolyhedron._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_SensitivePolyhedron__kill_pointed, None, Handle_MeshVS_SensitivePolyhedron)
Handle_MeshVS_SensitivePolyhedron_swigregister = _MeshVS.Handle_MeshVS_SensitivePolyhedron_swigregister
Handle_MeshVS_SensitivePolyhedron_swigregister(Handle_MeshVS_SensitivePolyhedron)

def Handle_MeshVS_SensitivePolyhedron_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_SensitivePolyhedron_DownCast(AnObject)
Handle_MeshVS_SensitivePolyhedron_DownCast = _MeshVS.Handle_MeshVS_SensitivePolyhedron_DownCast

class MeshVS_SensitiveSegment(OCC.Select3D.Select3D_SensitiveSegment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theOwner:
        :type theOwner: Handle_SelectBasics_EntityOwner &
        :param theFirstP:
        :type theFirstP: gp_Pnt
        :param theLastP:
        :type theLastP: gp_Pnt
        :param theMaxRect: default value is 1
        :type theMaxRect: int
        :rtype: None

        """
        _MeshVS.MeshVS_SensitiveSegment_swiginit(self, _MeshVS.new_MeshVS_SensitiveSegment(*args))

    def Matches(self, *args):
        """
        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _MeshVS.MeshVS_SensitiveSegment_Matches(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_SensitiveSegment self)"""
        return _MeshVS.MeshVS_SensitiveSegment__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_SensitiveSegment self) -> Handle_MeshVS_SensitiveSegment"""
        return _MeshVS.MeshVS_SensitiveSegment_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SensitiveSegment.Matches = new_instancemethod(_MeshVS.MeshVS_SensitiveSegment_Matches, None, MeshVS_SensitiveSegment)
MeshVS_SensitiveSegment._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SensitiveSegment__kill_pointed, None, MeshVS_SensitiveSegment)
MeshVS_SensitiveSegment.GetHandle = new_instancemethod(_MeshVS.MeshVS_SensitiveSegment_GetHandle, None, MeshVS_SensitiveSegment)
MeshVS_SensitiveSegment_swigregister = _MeshVS.MeshVS_SensitiveSegment_swigregister
MeshVS_SensitiveSegment_swigregister(MeshVS_SensitiveSegment)

class Handle_MeshVS_SensitiveSegment(OCC.Select3D.Handle_Select3D_SensitiveSegment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_SensitiveSegment_swiginit(self, _MeshVS.new_Handle_MeshVS_SensitiveSegment(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_SensitiveSegment_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_SensitiveSegment.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveSegment_Nullify, None, Handle_MeshVS_SensitiveSegment)
Handle_MeshVS_SensitiveSegment.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveSegment_IsNull, None, Handle_MeshVS_SensitiveSegment)
Handle_MeshVS_SensitiveSegment.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveSegment_GetObject, None, Handle_MeshVS_SensitiveSegment)
Handle_MeshVS_SensitiveSegment._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_SensitiveSegment__kill_pointed, None, Handle_MeshVS_SensitiveSegment)
Handle_MeshVS_SensitiveSegment_swigregister = _MeshVS.Handle_MeshVS_SensitiveSegment_swigregister
Handle_MeshVS_SensitiveSegment_swigregister(Handle_MeshVS_SensitiveSegment)

def Handle_MeshVS_SensitiveSegment_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_SensitiveSegment_DownCast(AnObject)
Handle_MeshVS_SensitiveSegment_DownCast = _MeshVS.Handle_MeshVS_SensitiveSegment_DownCast

class MeshVS_SequenceNodeOfSequenceOfPrsBuilder(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_MeshVS_PrsBuilder &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_SequenceNodeOfSequenceOfPrsBuilder(*args))

    def Value(self, *args):
        """
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_SequenceNodeOfSequenceOfPrsBuilder self)"""
        return _MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_SequenceNodeOfSequenceOfPrsBuilder self) -> Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder"""
        return _MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SequenceNodeOfSequenceOfPrsBuilder.Value = new_instancemethod(_MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_Value, None, MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
MeshVS_SequenceNodeOfSequenceOfPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder__kill_pointed, None, MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
MeshVS_SequenceNodeOfSequenceOfPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_GetHandle, None, MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister = _MeshVS.MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister
MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister(MeshVS_SequenceNodeOfSequenceOfPrsBuilder)

class Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_Nullify, None, Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_IsNull, None, Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_GetObject, None, Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder__kill_pointed, None, Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder)
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_swigregister(Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder)

def Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_DownCast(AnObject)
Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_SequenceNodeOfSequenceOfPrsBuilder_DownCast

class MeshVS_SequenceOfPrsBuilder(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MeshVS.MeshVS_SequenceOfPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_SequenceOfPrsBuilder(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: MeshVS_SequenceOfPrsBuilder &
        :rtype: MeshVS_SequenceOfPrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: MeshVS_SequenceOfPrsBuilder &
        :rtype: MeshVS_SequenceOfPrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_MeshVS_PrsBuilder &
        :rtype: None

        :param S:
        :type S: MeshVS_SequenceOfPrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_MeshVS_PrsBuilder &
        :rtype: None

        :param S:
        :type S: MeshVS_SequenceOfPrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MeshVS_PrsBuilder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MeshVS_SequenceOfPrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MeshVS_PrsBuilder &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MeshVS_SequenceOfPrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MeshVS_SequenceOfPrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_MeshVS_PrsBuilder &
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MeshVS_PrsBuilder

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MeshVS.MeshVS_SequenceOfPrsBuilder_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_SequenceOfPrsBuilder.Clear = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Clear, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Assign = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Assign, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Set = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Set, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Append = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Append, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Prepend = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Prepend, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.InsertBefore = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_InsertBefore, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.InsertAfter = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_InsertAfter, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.First = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_First, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Last = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Last, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Split = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Split, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Value = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Value, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.SetValue = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_SetValue, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.ChangeValue = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_ChangeValue, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder.Remove = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder_Remove, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_SequenceOfPrsBuilder__kill_pointed, None, MeshVS_SequenceOfPrsBuilder)
MeshVS_SequenceOfPrsBuilder_swigregister = _MeshVS.MeshVS_SequenceOfPrsBuilder_swigregister
MeshVS_SequenceOfPrsBuilder_swigregister(MeshVS_SequenceOfPrsBuilder)

class MeshVS_StdMapNodeOfMapOfTwoNodes(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: MeshVS_TwoNodes &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_swiginit(self, _MeshVS.new_MeshVS_StdMapNodeOfMapOfTwoNodes(*args))

    def Key(self, *args):
        """
        :rtype: MeshVS_TwoNodes

        """
        return _MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_Key(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_StdMapNodeOfMapOfTwoNodes self)"""
        return _MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_StdMapNodeOfMapOfTwoNodes self) -> Handle_MeshVS_StdMapNodeOfMapOfTwoNodes"""
        return _MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_StdMapNodeOfMapOfTwoNodes.Key = new_instancemethod(_MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_Key, None, MeshVS_StdMapNodeOfMapOfTwoNodes)
MeshVS_StdMapNodeOfMapOfTwoNodes._kill_pointed = new_instancemethod(_MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes__kill_pointed, None, MeshVS_StdMapNodeOfMapOfTwoNodes)
MeshVS_StdMapNodeOfMapOfTwoNodes.GetHandle = new_instancemethod(_MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_GetHandle, None, MeshVS_StdMapNodeOfMapOfTwoNodes)
MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister = _MeshVS.MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister
MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister(MeshVS_StdMapNodeOfMapOfTwoNodes)

class Handle_MeshVS_StdMapNodeOfMapOfTwoNodes(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_swiginit(self, _MeshVS.new_Handle_MeshVS_StdMapNodeOfMapOfTwoNodes(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_StdMapNodeOfMapOfTwoNodes.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_Nullify, None, Handle_MeshVS_StdMapNodeOfMapOfTwoNodes)
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_IsNull, None, Handle_MeshVS_StdMapNodeOfMapOfTwoNodes)
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_GetObject, None, Handle_MeshVS_StdMapNodeOfMapOfTwoNodes)
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes__kill_pointed, None, Handle_MeshVS_StdMapNodeOfMapOfTwoNodes)
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister = _MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_swigregister(Handle_MeshVS_StdMapNodeOfMapOfTwoNodes)

def Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_DownCast(AnObject)
Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_DownCast = _MeshVS.Handle_MeshVS_StdMapNodeOfMapOfTwoNodes_DownCast

class MeshVS_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateAspectFillArea3d(*args):
        """
        * Creates fill area aspect with values from Drawer according to keys from DrawerAttribute

        :param theDr:
        :type theDr: Handle_MeshVS_Drawer &
        :param UseDefaults: default value is Standard_True
        :type UseDefaults: bool
        :rtype: Handle_Graphic3d_AspectFillArea3d

        * Creates fill aspect with values from Drawer according to keys from DrawerAttribute and specific material aspect

        :param theDr:
        :type theDr: Handle_MeshVS_Drawer &
        :param Mat:
        :type Mat: Graphic3d_MaterialAspect &
        :param UseDefaults: default value is Standard_True
        :type UseDefaults: bool
        :rtype: Handle_Graphic3d_AspectFillArea3d

        """
        return _MeshVS.MeshVS_Tool_CreateAspectFillArea3d(*args)

    CreateAspectFillArea3d = staticmethod(CreateAspectFillArea3d)

    def CreateAspectLine3d(*args):
        """
        * Creates line aspect with values from Drawer according to keys from DrawerAttribute

        :param theDr:
        :type theDr: Handle_MeshVS_Drawer &
        :param UseDefaults: default value is Standard_True
        :type UseDefaults: bool
        :rtype: Handle_Graphic3d_AspectLine3d

        """
        return _MeshVS.MeshVS_Tool_CreateAspectLine3d(*args)

    CreateAspectLine3d = staticmethod(CreateAspectLine3d)

    def CreateAspectMarker3d(*args):
        """
        * Creates marker aspect with values from Drawer according to keys from DrawerAttribute

        :param theDr:
        :type theDr: Handle_MeshVS_Drawer &
        :param UseDefaults: default value is Standard_True
        :type UseDefaults: bool
        :rtype: Handle_Graphic3d_AspectMarker3d

        """
        return _MeshVS.MeshVS_Tool_CreateAspectMarker3d(*args)

    CreateAspectMarker3d = staticmethod(CreateAspectMarker3d)

    def CreateAspectText3d(*args):
        """
        * Creates text aspect with values from Drawer according to keys from DrawerAttribute

        :param theDr:
        :type theDr: Handle_MeshVS_Drawer &
        :param UseDefaults: default value is Standard_True
        :type UseDefaults: bool
        :rtype: Handle_Graphic3d_AspectText3d

        """
        return _MeshVS.MeshVS_Tool_CreateAspectText3d(*args)

    CreateAspectText3d = staticmethod(CreateAspectText3d)

    def GetNormal(*args):
        """
        * Get one of normals to polygon described by these points. If the polygon isn't planar, function returns false

        :param Nodes:
        :type Nodes: TColStd_Array1OfReal &
        :param Norm:
        :type Norm: gp_Vec
        :rtype: bool

        """
        return _MeshVS.MeshVS_Tool_GetNormal(*args)

    GetNormal = staticmethod(GetNormal)

    def GetAverageNormal(*args):
        """
        * Get an average of normals to non-planar polygon described by these points or compute normal of planar polygon. If the polygon isn't planar, function returns false

        :param Nodes:
        :type Nodes: TColStd_Array1OfReal &
        :param Norm:
        :type Norm: gp_Vec
        :rtype: bool

        """
        return _MeshVS.MeshVS_Tool_GetAverageNormal(*args)

    GetAverageNormal = staticmethod(GetAverageNormal)

    def __init__(self):
        _MeshVS.MeshVS_Tool_swiginit(self, _MeshVS.new_MeshVS_Tool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_Tool._kill_pointed = new_instancemethod(_MeshVS.MeshVS_Tool__kill_pointed, None, MeshVS_Tool)
MeshVS_Tool_swigregister = _MeshVS.MeshVS_Tool_swigregister
MeshVS_Tool_swigregister(MeshVS_Tool)

def MeshVS_Tool_CreateAspectFillArea3d(*args):
    """
    * Creates fill area aspect with values from Drawer according to keys from DrawerAttribute

    :param theDr:
    :type theDr: Handle_MeshVS_Drawer &
    :param UseDefaults: default value is Standard_True
    :type UseDefaults: bool
    :rtype: Handle_Graphic3d_AspectFillArea3d

    * Creates fill aspect with values from Drawer according to keys from DrawerAttribute and specific material aspect

    :param theDr:
    :type theDr: Handle_MeshVS_Drawer &
    :param Mat:
    :type Mat: Graphic3d_MaterialAspect &
    :param UseDefaults: default value is Standard_True
    :type UseDefaults: bool
    :rtype: Handle_Graphic3d_AspectFillArea3d

    """
    return _MeshVS.MeshVS_Tool_CreateAspectFillArea3d(*args)

def MeshVS_Tool_CreateAspectLine3d(*args):
    """
    * Creates line aspect with values from Drawer according to keys from DrawerAttribute

    :param theDr:
    :type theDr: Handle_MeshVS_Drawer &
    :param UseDefaults: default value is Standard_True
    :type UseDefaults: bool
    :rtype: Handle_Graphic3d_AspectLine3d

    """
    return _MeshVS.MeshVS_Tool_CreateAspectLine3d(*args)

def MeshVS_Tool_CreateAspectMarker3d(*args):
    """
    * Creates marker aspect with values from Drawer according to keys from DrawerAttribute

    :param theDr:
    :type theDr: Handle_MeshVS_Drawer &
    :param UseDefaults: default value is Standard_True
    :type UseDefaults: bool
    :rtype: Handle_Graphic3d_AspectMarker3d

    """
    return _MeshVS.MeshVS_Tool_CreateAspectMarker3d(*args)

def MeshVS_Tool_CreateAspectText3d(*args):
    """
    * Creates text aspect with values from Drawer according to keys from DrawerAttribute

    :param theDr:
    :type theDr: Handle_MeshVS_Drawer &
    :param UseDefaults: default value is Standard_True
    :type UseDefaults: bool
    :rtype: Handle_Graphic3d_AspectText3d

    """
    return _MeshVS.MeshVS_Tool_CreateAspectText3d(*args)

def MeshVS_Tool_GetNormal(*args):
    """
    * Get one of normals to polygon described by these points. If the polygon isn't planar, function returns false

    :param Nodes:
    :type Nodes: TColStd_Array1OfReal &
    :param Norm:
    :type Norm: gp_Vec
    :rtype: bool

    """
    return _MeshVS.MeshVS_Tool_GetNormal(*args)

def MeshVS_Tool_GetAverageNormal(*args):
    """
    * Get an average of normals to non-planar polygon described by these points or compute normal of planar polygon. If the polygon isn't planar, function returns false

    :param Nodes:
    :type Nodes: TColStd_Array1OfReal &
    :param Norm:
    :type Norm: gp_Vec
    :rtype: bool

    """
    return _MeshVS.MeshVS_Tool_GetAverageNormal(*args)

class MeshVS_TwoColors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_TwoColors._kill_pointed = new_instancemethod(_MeshVS.MeshVS_TwoColors__kill_pointed, None, MeshVS_TwoColors)
MeshVS_TwoColors_swigregister = _MeshVS.MeshVS_TwoColors_swigregister
MeshVS_TwoColors_swigregister(MeshVS_TwoColors)

class MeshVS_TwoColorsHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: MeshVS_TwoColors &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _MeshVS.MeshVS_TwoColorsHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: MeshVS_TwoColors &
        :param K2:
        :type K2: MeshVS_TwoColors &
        :rtype: bool

        """
        return _MeshVS.MeshVS_TwoColorsHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _MeshVS.MeshVS_TwoColorsHasher_swiginit(self, _MeshVS.new_MeshVS_TwoColorsHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_TwoColorsHasher._kill_pointed = new_instancemethod(_MeshVS.MeshVS_TwoColorsHasher__kill_pointed, None, MeshVS_TwoColorsHasher)
MeshVS_TwoColorsHasher_swigregister = _MeshVS.MeshVS_TwoColorsHasher_swigregister
MeshVS_TwoColorsHasher_swigregister(MeshVS_TwoColorsHasher)

def MeshVS_TwoColorsHasher_HashCode(*args):
    """
    :param K:
    :type K: MeshVS_TwoColors &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _MeshVS.MeshVS_TwoColorsHasher_HashCode(*args)

def MeshVS_TwoColorsHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: MeshVS_TwoColors &
    :param K2:
    :type K2: MeshVS_TwoColors &
    :rtype: bool

    """
    return _MeshVS.MeshVS_TwoColorsHasher_IsEqual(*args)

class MeshVS_TwoNodes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aFirst: default value is 0
        :type aFirst: int
        :param aSecond: default value is 0
        :type aSecond: int
        :rtype: None

        """
        _MeshVS.MeshVS_TwoNodes_swiginit(self, _MeshVS.new_MeshVS_TwoNodes(*args))

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_TwoNodes._kill_pointed = new_instancemethod(_MeshVS.MeshVS_TwoNodes__kill_pointed, None, MeshVS_TwoNodes)
MeshVS_TwoNodes_swigregister = _MeshVS.MeshVS_TwoNodes_swigregister
MeshVS_TwoNodes_swigregister(MeshVS_TwoNodes)

class MeshVS_TwoNodesHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args):
        """
        :param K:
        :type K: MeshVS_TwoNodes &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _MeshVS.MeshVS_TwoNodesHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args):
        """
        :param K1:
        :type K1: MeshVS_TwoNodes &
        :param K2:
        :type K2: MeshVS_TwoNodes &
        :rtype: bool

        """
        return _MeshVS.MeshVS_TwoNodesHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def __init__(self):
        _MeshVS.MeshVS_TwoNodesHasher_swiginit(self, _MeshVS.new_MeshVS_TwoNodesHasher())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_TwoNodesHasher._kill_pointed = new_instancemethod(_MeshVS.MeshVS_TwoNodesHasher__kill_pointed, None, MeshVS_TwoNodesHasher)
MeshVS_TwoNodesHasher_swigregister = _MeshVS.MeshVS_TwoNodesHasher_swigregister
MeshVS_TwoNodesHasher_swigregister(MeshVS_TwoNodesHasher)

def MeshVS_TwoNodesHasher_HashCode(*args):
    """
    :param K:
    :type K: MeshVS_TwoNodes &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _MeshVS.MeshVS_TwoNodesHasher_HashCode(*args)

def MeshVS_TwoNodesHasher_IsEqual(*args):
    """
    :param K1:
    :type K1: MeshVS_TwoNodes &
    :param K2:
    :type K2: MeshVS_TwoNodes &
    :rtype: bool

    """
    return _MeshVS.MeshVS_TwoNodesHasher_IsEqual(*args)

class MeshVS_DataSource3D(MeshVS_DataSource):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPrismTopology(self, *args):
        """
        :param BasePoints:
        :type BasePoints: int
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataSource3D_GetPrismTopology(self, *args)


    def GetPyramidTopology(self, *args):
        """
        :param BasePoints:
        :type BasePoints: int
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataSource3D_GetPyramidTopology(self, *args)


    def CreatePrismTopology(*args):
        """
        :param BasePoints:
        :type BasePoints: int
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataSource3D_CreatePrismTopology(*args)

    CreatePrismTopology = staticmethod(CreatePrismTopology)

    def CreatePyramidTopology(*args):
        """
        :param BasePoints:
        :type BasePoints: int
        :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

        """
        return _MeshVS.MeshVS_DataSource3D_CreatePyramidTopology(*args)

    CreatePyramidTopology = staticmethod(CreatePyramidTopology)

    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DataSource3D self)"""
        return _MeshVS.MeshVS_DataSource3D__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DataSource3D self) -> Handle_MeshVS_DataSource3D"""
        return _MeshVS.MeshVS_DataSource3D_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DataSource3D.GetPrismTopology = new_instancemethod(_MeshVS.MeshVS_DataSource3D_GetPrismTopology, None, MeshVS_DataSource3D)
MeshVS_DataSource3D.GetPyramidTopology = new_instancemethod(_MeshVS.MeshVS_DataSource3D_GetPyramidTopology, None, MeshVS_DataSource3D)
MeshVS_DataSource3D._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DataSource3D__kill_pointed, None, MeshVS_DataSource3D)
MeshVS_DataSource3D.GetHandle = new_instancemethod(_MeshVS.MeshVS_DataSource3D_GetHandle, None, MeshVS_DataSource3D)
MeshVS_DataSource3D_swigregister = _MeshVS.MeshVS_DataSource3D_swigregister
MeshVS_DataSource3D_swigregister(MeshVS_DataSource3D)

def MeshVS_DataSource3D_CreatePrismTopology(*args):
    """
    :param BasePoints:
    :type BasePoints: int
    :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

    """
    return _MeshVS.MeshVS_DataSource3D_CreatePrismTopology(*args)

def MeshVS_DataSource3D_CreatePyramidTopology(*args):
    """
    :param BasePoints:
    :type BasePoints: int
    :rtype: Handle_MeshVS_HArray1OfSequenceOfInteger

    """
    return _MeshVS.MeshVS_DataSource3D_CreatePyramidTopology(*args)

class Handle_MeshVS_DataSource3D(Handle_MeshVS_DataSource):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DataSource3D_swiginit(self, _MeshVS.new_Handle_MeshVS_DataSource3D(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DataSource3D_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DataSource3D.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource3D_Nullify, None, Handle_MeshVS_DataSource3D)
Handle_MeshVS_DataSource3D.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource3D_IsNull, None, Handle_MeshVS_DataSource3D)
Handle_MeshVS_DataSource3D.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource3D_GetObject, None, Handle_MeshVS_DataSource3D)
Handle_MeshVS_DataSource3D._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DataSource3D__kill_pointed, None, Handle_MeshVS_DataSource3D)
Handle_MeshVS_DataSource3D_swigregister = _MeshVS.Handle_MeshVS_DataSource3D_swigregister
Handle_MeshVS_DataSource3D_swigregister(Handle_MeshVS_DataSource3D)

def Handle_MeshVS_DataSource3D_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DataSource3D_DownCast(AnObject)
Handle_MeshVS_DataSource3D_DownCast = _MeshVS.Handle_MeshVS_DataSource3D_DownCast

class MeshVS_DeformedDataSource(MeshVS_DataSource):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor theNonDeformDS is canonical non-deformed data source, by which we are able to calculate deformed mesh geometry theMagnify is coefficient of displacement magnify

        :param theNonDeformDS:
        :type theNonDeformDS: Handle_MeshVS_DataSource &
        :param theMagnify:
        :type theMagnify: float
        :rtype: None

        """
        _MeshVS.MeshVS_DeformedDataSource_swiginit(self, _MeshVS.new_MeshVS_DeformedDataSource(*args))

    def GetVectors(self, *args):
        """
        * This method returns map of nodal displacement vectors

        :rtype: MeshVS_DataMapOfIntegerVector

        """
        return _MeshVS.MeshVS_DeformedDataSource_GetVectors(self, *args)


    def SetVectors(self, *args):
        """
        * This method sets map of nodal displacement vectors (Map).

        :param Map:
        :type Map: MeshVS_DataMapOfIntegerVector &
        :rtype: None

        """
        return _MeshVS.MeshVS_DeformedDataSource_SetVectors(self, *args)


    def GetVector(self, *args):
        """
        * This method returns vector ( Vect ) assigned to node number ID.

        :param ID:
        :type ID: int
        :param Vect:
        :type Vect: gp_Vec
        :rtype: bool

        """
        return _MeshVS.MeshVS_DeformedDataSource_GetVector(self, *args)


    def SetVector(self, *args):
        """
        * This method sets vector ( Vect ) assigned to node number ID.

        :param ID:
        :type ID: int
        :param Vect:
        :type Vect: gp_Vec
        :rtype: None

        """
        return _MeshVS.MeshVS_DeformedDataSource_SetVector(self, *args)


    def SetNonDeformedDataSource(self, *args):
        """
        :param theDS:
        :type theDS: Handle_MeshVS_DataSource &
        :rtype: None

        """
        return _MeshVS.MeshVS_DeformedDataSource_SetNonDeformedDataSource(self, *args)


    def GetNonDeformedDataSource(self, *args):
        """
        * With this methods you can read and change internal canonical data source

        :rtype: Handle_MeshVS_DataSource

        """
        return _MeshVS.MeshVS_DeformedDataSource_GetNonDeformedDataSource(self, *args)


    def SetMagnify(self, *args):
        """
        :param theMagnify:
        :type theMagnify: float
        :rtype: None

        """
        return _MeshVS.MeshVS_DeformedDataSource_SetMagnify(self, *args)


    def GetMagnify(self, *args):
        """
        * With this methods you can read and change magnify coefficient of nodal displacements

        :rtype: float

        """
        return _MeshVS.MeshVS_DeformedDataSource_GetMagnify(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_DeformedDataSource self)"""
        return _MeshVS.MeshVS_DeformedDataSource__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_DeformedDataSource self) -> Handle_MeshVS_DeformedDataSource"""
        return _MeshVS.MeshVS_DeformedDataSource_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_DeformedDataSource.GetVectors = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_GetVectors, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.SetVectors = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_SetVectors, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.GetVector = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_GetVector, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.SetVector = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_SetVector, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.SetNonDeformedDataSource = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_SetNonDeformedDataSource, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.GetNonDeformedDataSource = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_GetNonDeformedDataSource, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.SetMagnify = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_SetMagnify, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.GetMagnify = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_GetMagnify, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource._kill_pointed = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource__kill_pointed, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource.GetHandle = new_instancemethod(_MeshVS.MeshVS_DeformedDataSource_GetHandle, None, MeshVS_DeformedDataSource)
MeshVS_DeformedDataSource_swigregister = _MeshVS.MeshVS_DeformedDataSource_swigregister
MeshVS_DeformedDataSource_swigregister(MeshVS_DeformedDataSource)

class Handle_MeshVS_DeformedDataSource(Handle_MeshVS_DataSource):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_DeformedDataSource_swiginit(self, _MeshVS.new_Handle_MeshVS_DeformedDataSource(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_DeformedDataSource_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_DeformedDataSource.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_DeformedDataSource_Nullify, None, Handle_MeshVS_DeformedDataSource)
Handle_MeshVS_DeformedDataSource.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_DeformedDataSource_IsNull, None, Handle_MeshVS_DeformedDataSource)
Handle_MeshVS_DeformedDataSource.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_DeformedDataSource_GetObject, None, Handle_MeshVS_DeformedDataSource)
Handle_MeshVS_DeformedDataSource._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_DeformedDataSource__kill_pointed, None, Handle_MeshVS_DeformedDataSource)
Handle_MeshVS_DeformedDataSource_swigregister = _MeshVS.Handle_MeshVS_DeformedDataSource_swigregister
Handle_MeshVS_DeformedDataSource_swigregister(Handle_MeshVS_DeformedDataSource)

def Handle_MeshVS_DeformedDataSource_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_DeformedDataSource_DownCast(AnObject)
Handle_MeshVS_DeformedDataSource_DownCast = _MeshVS.Handle_MeshVS_DeformedDataSource_DownCast

class MeshVS_ElementalColorPrsBuilder(MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor

        :param Parent:
        :type Parent: Handle_MeshVS_Mesh &
        :param Flags: default value is MeshVS_DMF_ElementalColorDataPrs
        :type Flags: MeshVS_DisplayModeFlags &
        :param DS: default value is 0
        :type DS: Handle_MeshVS_DataSource &
        :param Id: default value is -1
        :type Id: int
        :param Priority: default value is MeshVS_BP_ElemColor
        :type Priority: MeshVS_BuilderPriority &
        :rtype: None

        """
        _MeshVS.MeshVS_ElementalColorPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_ElementalColorPrsBuilder(*args))

    def GetColors1(self, *args):
        """
        * Returns map of colors same for front and back side of face.

        :rtype: MeshVS_DataMapOfIntegerColor

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_GetColors1(self, *args)


    def SetColors1(self, *args):
        """
        * Sets map of colors same for front and back side of face.

        :param Map:
        :type Map: MeshVS_DataMapOfIntegerColor &
        :rtype: None

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_SetColors1(self, *args)


    def HasColors1(self, *args):
        """
        * Returns true, if map of colors isn't empty

        :rtype: bool

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_HasColors1(self, *args)


    def GetColor1(self, *args):
        """
        * Returns color assigned with element number ID

        :param ID:
        :type ID: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_GetColor1(self, *args)


    def SetColor1(self, *args):
        """
        * Sets color assigned with element number ID

        :param ID:
        :type ID: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: None

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_SetColor1(self, *args)


    def GetColors2(self, *args):
        """
        * Returns map of different colors for front and back side of face

        :rtype: MeshVS_DataMapOfIntegerTwoColors

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_GetColors2(self, *args)


    def SetColors2(self, *args):
        """
        * Sets map of different colors for front and back side of face

        :param Map:
        :type Map: MeshVS_DataMapOfIntegerTwoColors &
        :rtype: None

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_SetColors2(self, *args)


    def HasColors2(self, *args):
        """
        * Returns true, if map isn't empty

        :rtype: bool

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_HasColors2(self, *args)


    def GetColor2(self, *args):
        """
        * Returns colors assigned with element number ID

        :param ID:
        :type ID: int
        :param theColor:
        :type theColor: MeshVS_TwoColors &
        :rtype: bool

        * Returns colors assigned with element number ID theColor1 is the front element color theColor2 is the back element color

        :param ID:
        :type ID: int
        :param theColor1:
        :type theColor1: Quantity_Color &
        :param theColor2:
        :type theColor2: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_GetColor2(self, *args)


    def SetColor2(self, *args):
        """
        * Sets colors assigned with element number ID

        :param ID:
        :type ID: int
        :param theTwoColors:
        :type theTwoColors: MeshVS_TwoColors &
        :rtype: None

        * Sets color assigned with element number ID theColor1 is the front element color theColor2 is the back element color

        :param ID:
        :type ID: int
        :param theColor1:
        :type theColor1: Quantity_Color &
        :param theColor2:
        :type theColor2: Quantity_Color &
        :rtype: None

        """
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_SetColor2(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_ElementalColorPrsBuilder self)"""
        return _MeshVS.MeshVS_ElementalColorPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_ElementalColorPrsBuilder self) -> Handle_MeshVS_ElementalColorPrsBuilder"""
        return _MeshVS.MeshVS_ElementalColorPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_ElementalColorPrsBuilder.GetColors1 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_GetColors1, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.SetColors1 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_SetColors1, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.HasColors1 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_HasColors1, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.GetColor1 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_GetColor1, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.SetColor1 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_SetColor1, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.GetColors2 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_GetColors2, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.SetColors2 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_SetColors2, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.HasColors2 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_HasColors2, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.GetColor2 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_GetColor2, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.SetColor2 = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_SetColor2, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder__kill_pointed, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_ElementalColorPrsBuilder_GetHandle, None, MeshVS_ElementalColorPrsBuilder)
MeshVS_ElementalColorPrsBuilder_swigregister = _MeshVS.MeshVS_ElementalColorPrsBuilder_swigregister
MeshVS_ElementalColorPrsBuilder_swigregister(MeshVS_ElementalColorPrsBuilder)

class Handle_MeshVS_ElementalColorPrsBuilder(Handle_MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_ElementalColorPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_ElementalColorPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_Nullify, None, Handle_MeshVS_ElementalColorPrsBuilder)
Handle_MeshVS_ElementalColorPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_IsNull, None, Handle_MeshVS_ElementalColorPrsBuilder)
Handle_MeshVS_ElementalColorPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_GetObject, None, Handle_MeshVS_ElementalColorPrsBuilder)
Handle_MeshVS_ElementalColorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_ElementalColorPrsBuilder__kill_pointed, None, Handle_MeshVS_ElementalColorPrsBuilder)
Handle_MeshVS_ElementalColorPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_swigregister
Handle_MeshVS_ElementalColorPrsBuilder_swigregister(Handle_MeshVS_ElementalColorPrsBuilder)

def Handle_MeshVS_ElementalColorPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_DownCast(AnObject)
Handle_MeshVS_ElementalColorPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_ElementalColorPrsBuilder_DownCast

class MeshVS_MeshPrsBuilder(MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates builder with certain display mode flags, data source, ID and priority

        :param Parent:
        :type Parent: Handle_MeshVS_Mesh &
        :param Flags: default value is MeshVS_DMF_OCCMask
        :type Flags: MeshVS_DisplayModeFlags &
        :param DS: default value is 0
        :type DS: Handle_MeshVS_DataSource &
        :param Id: default value is -1
        :type Id: int
        :param Priority: default value is MeshVS_BP_Mesh
        :type Priority: MeshVS_BuilderPriority &
        :rtype: None

        """
        _MeshVS.MeshVS_MeshPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_MeshPrsBuilder(*args))

    def BuildNodes(self, *args):
        """
        * Builds nodes presentation

        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param IDs:
        :type IDs: TColStd_PackedMapOfInteger &
        :param IDsToExclude:
        :type IDsToExclude: TColStd_PackedMapOfInteger &
        :param DisplayMode:
        :type DisplayMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshPrsBuilder_BuildNodes(self, *args)


    def BuildElements(self, *args):
        """
        * Builds elements presentation

        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param IDs:
        :type IDs: TColStd_PackedMapOfInteger &
        :param IDsToExclude:
        :type IDsToExclude: TColStd_PackedMapOfInteger &
        :param DisplayMode:
        :type DisplayMode: int
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshPrsBuilder_BuildElements(self, *args)


    def BuildHilightPrs(self, *args):
        """
        * Builds presentation of hilighted entity

        :param Prs:
        :type Prs: Handle_Prs3d_Presentation &
        :param IDs:
        :type IDs: TColStd_PackedMapOfInteger &
        :param IsElement:
        :type IsElement: bool
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshPrsBuilder_BuildHilightPrs(self, *args)


    def AddVolumePrs(*args):
        """
        * Add to array polygons or polylines representing volume

        :param Topo:
        :type Topo: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :param Nodes:
        :type Nodes: TColStd_Array1OfReal &
        :param NbNodes:
        :type NbNodes: int
        :param Array:
        :type Array: Handle_Graphic3d_ArrayOfPrimitives &
        :param IsReflected:
        :type IsReflected: bool
        :param IsShrinked:
        :type IsShrinked: bool
        :param IsSelect:
        :type IsSelect: bool
        :param ShrinkCoef:
        :type ShrinkCoef: float
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshPrsBuilder_AddVolumePrs(*args)

    AddVolumePrs = staticmethod(AddVolumePrs)

    def HowManyPrimitives(*args):
        """
        * Calculate how many polygons or polylines are necessary to draw passed topology

        :param Topo:
        :type Topo: Handle_MeshVS_HArray1OfSequenceOfInteger &
        :param AsPolygons:
        :type AsPolygons: bool
        :param IsSelect:
        :type IsSelect: bool
        :param NbNodes:
        :type NbNodes: int
        :param Vertices:
        :type Vertices: int &
        :param Bounds:
        :type Bounds: int &
        :rtype: void

        """
        return _MeshVS.MeshVS_MeshPrsBuilder_HowManyPrimitives(*args)

    HowManyPrimitives = staticmethod(HowManyPrimitives)

    def _kill_pointed(self):
        """_kill_pointed(MeshVS_MeshPrsBuilder self)"""
        return _MeshVS.MeshVS_MeshPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_MeshPrsBuilder self) -> Handle_MeshVS_MeshPrsBuilder"""
        return _MeshVS.MeshVS_MeshPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_MeshPrsBuilder.BuildNodes = new_instancemethod(_MeshVS.MeshVS_MeshPrsBuilder_BuildNodes, None, MeshVS_MeshPrsBuilder)
MeshVS_MeshPrsBuilder.BuildElements = new_instancemethod(_MeshVS.MeshVS_MeshPrsBuilder_BuildElements, None, MeshVS_MeshPrsBuilder)
MeshVS_MeshPrsBuilder.BuildHilightPrs = new_instancemethod(_MeshVS.MeshVS_MeshPrsBuilder_BuildHilightPrs, None, MeshVS_MeshPrsBuilder)
MeshVS_MeshPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_MeshPrsBuilder__kill_pointed, None, MeshVS_MeshPrsBuilder)
MeshVS_MeshPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_MeshPrsBuilder_GetHandle, None, MeshVS_MeshPrsBuilder)
MeshVS_MeshPrsBuilder_swigregister = _MeshVS.MeshVS_MeshPrsBuilder_swigregister
MeshVS_MeshPrsBuilder_swigregister(MeshVS_MeshPrsBuilder)

def MeshVS_MeshPrsBuilder_AddVolumePrs(*args):
    """
    * Add to array polygons or polylines representing volume

    :param Topo:
    :type Topo: Handle_MeshVS_HArray1OfSequenceOfInteger &
    :param Nodes:
    :type Nodes: TColStd_Array1OfReal &
    :param NbNodes:
    :type NbNodes: int
    :param Array:
    :type Array: Handle_Graphic3d_ArrayOfPrimitives &
    :param IsReflected:
    :type IsReflected: bool
    :param IsShrinked:
    :type IsShrinked: bool
    :param IsSelect:
    :type IsSelect: bool
    :param ShrinkCoef:
    :type ShrinkCoef: float
    :rtype: void

    """
    return _MeshVS.MeshVS_MeshPrsBuilder_AddVolumePrs(*args)

def MeshVS_MeshPrsBuilder_HowManyPrimitives(*args):
    """
    * Calculate how many polygons or polylines are necessary to draw passed topology

    :param Topo:
    :type Topo: Handle_MeshVS_HArray1OfSequenceOfInteger &
    :param AsPolygons:
    :type AsPolygons: bool
    :param IsSelect:
    :type IsSelect: bool
    :param NbNodes:
    :type NbNodes: int
    :param Vertices:
    :type Vertices: int &
    :param Bounds:
    :type Bounds: int &
    :rtype: void

    """
    return _MeshVS.MeshVS_MeshPrsBuilder_HowManyPrimitives(*args)

class Handle_MeshVS_MeshPrsBuilder(Handle_MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_MeshPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_MeshPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_MeshPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_MeshPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_MeshPrsBuilder_Nullify, None, Handle_MeshVS_MeshPrsBuilder)
Handle_MeshVS_MeshPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_MeshPrsBuilder_IsNull, None, Handle_MeshVS_MeshPrsBuilder)
Handle_MeshVS_MeshPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_MeshPrsBuilder_GetObject, None, Handle_MeshVS_MeshPrsBuilder)
Handle_MeshVS_MeshPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_MeshPrsBuilder__kill_pointed, None, Handle_MeshVS_MeshPrsBuilder)
Handle_MeshVS_MeshPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_MeshPrsBuilder_swigregister
Handle_MeshVS_MeshPrsBuilder_swigregister(Handle_MeshVS_MeshPrsBuilder)

def Handle_MeshVS_MeshPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_MeshPrsBuilder_DownCast(AnObject)
Handle_MeshVS_MeshPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_MeshPrsBuilder_DownCast

class MeshVS_NodalColorPrsBuilder(MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Parent:
        :type Parent: Handle_MeshVS_Mesh &
        :param Flags: default value is MeshVS_DMF_NodalColorDataPrs
        :type Flags: MeshVS_DisplayModeFlags &
        :param DS: default value is 0
        :type DS: Handle_MeshVS_DataSource &
        :param Id: default value is -1
        :type Id: int
        :param Priority: default value is MeshVS_BP_NodalColor
        :type Priority: MeshVS_BuilderPriority &
        :rtype: None

        """
        _MeshVS.MeshVS_NodalColorPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_NodalColorPrsBuilder(*args))

    def GetColors(self, *args):
        """
        * Returns map of colors assigned to nodes.

        :rtype: MeshVS_DataMapOfIntegerColor

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetColors(self, *args)


    def SetColors(self, *args):
        """
        * Sets map of colors assigned to nodes.

        :param Map:
        :type Map: MeshVS_DataMapOfIntegerColor &
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetColors(self, *args)


    def HasColors(self, *args):
        """
        * Returns true, if map isn't empty

        :rtype: bool

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_HasColors(self, *args)


    def GetColor(self, *args):
        """
        * Returns color assigned to single node

        :param ID:
        :type ID: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: bool

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetColor(self, *args)


    def SetColor(self, *args):
        """
        * Sets color assigned to single node

        :param ID:
        :type ID: int
        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetColor(self, *args)


    def UseTexture(self, *args):
        """
        * Specify whether texture must be used to build presentation

        :param theToUse:
        :type theToUse: bool
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_UseTexture(self, *args)


    def IsUseTexture(self, *args):
        """
        * Verify whether texture is used to build presentation

        :rtype: bool

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_IsUseTexture(self, *args)


    def SetColorMap(self, *args):
        """
        * Set colors to be used for texrture presentation theColors - colors for valid coordinates (laying in range [0, 1])

        :param theColors:
        :type theColors: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetColorMap(self, *args)


    def GetColorMap(self, *args):
        """
        * Return colors used for texrture presentation

        :rtype: Aspect_SequenceOfColor

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetColorMap(self, *args)


    def SetInvalidColor(self, *args):
        """
        * Set color representing invalid texture coordinate (laying outside range [0, 1])

        :param theInvalidColor:
        :type theInvalidColor: Quantity_Color &
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetInvalidColor(self, *args)


    def GetInvalidColor(self, *args):
        """
        * Return color representing invalid texture coordinate (laying outside range [0, 1])

        :rtype: Quantity_Color

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetInvalidColor(self, *args)


    def SetTextureCoords(self, *args):
        """
        * Specify correspondence between node IDs and texture coordinates (range [0, 1])

        :param theMap:
        :type theMap: TColStd_DataMapOfIntegerReal &
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetTextureCoords(self, *args)


    def GetTextureCoords(self, *args):
        """
        * Get correspondence between node IDs and texture coordinates (range [0, 1])

        :rtype: TColStd_DataMapOfIntegerReal

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetTextureCoords(self, *args)


    def SetTextureCoord(self, *args):
        """
        * Specify correspondence between node ID and texture coordinate (range [0, 1])

        :param theID:
        :type theID: int
        :param theCoord:
        :type theCoord: float
        :rtype: None

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_SetTextureCoord(self, *args)


    def GetTextureCoord(self, *args):
        """
        * Return correspondence between node IDs and texture coordinate (range [0, 1])

        :param theID:
        :type theID: int
        :rtype: float

        """
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetTextureCoord(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_NodalColorPrsBuilder self)"""
        return _MeshVS.MeshVS_NodalColorPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_NodalColorPrsBuilder self) -> Handle_MeshVS_NodalColorPrsBuilder"""
        return _MeshVS.MeshVS_NodalColorPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_NodalColorPrsBuilder.GetColors = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetColors, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetColors = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetColors, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.HasColors = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_HasColors, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetColor = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetColor, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetColor = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetColor, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.UseTexture = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_UseTexture, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.IsUseTexture = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_IsUseTexture, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetColorMap = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetColorMap, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetColorMap = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetColorMap, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetInvalidColor = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetInvalidColor, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetInvalidColor = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetInvalidColor, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetTextureCoords = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetTextureCoords, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetTextureCoords = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetTextureCoords, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.SetTextureCoord = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_SetTextureCoord, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetTextureCoord = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetTextureCoord, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder__kill_pointed, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_NodalColorPrsBuilder_GetHandle, None, MeshVS_NodalColorPrsBuilder)
MeshVS_NodalColorPrsBuilder_swigregister = _MeshVS.MeshVS_NodalColorPrsBuilder_swigregister
MeshVS_NodalColorPrsBuilder_swigregister(MeshVS_NodalColorPrsBuilder)

class Handle_MeshVS_NodalColorPrsBuilder(Handle_MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_NodalColorPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_NodalColorPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_NodalColorPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_NodalColorPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_NodalColorPrsBuilder_Nullify, None, Handle_MeshVS_NodalColorPrsBuilder)
Handle_MeshVS_NodalColorPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_NodalColorPrsBuilder_IsNull, None, Handle_MeshVS_NodalColorPrsBuilder)
Handle_MeshVS_NodalColorPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_NodalColorPrsBuilder_GetObject, None, Handle_MeshVS_NodalColorPrsBuilder)
Handle_MeshVS_NodalColorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_NodalColorPrsBuilder__kill_pointed, None, Handle_MeshVS_NodalColorPrsBuilder)
Handle_MeshVS_NodalColorPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_NodalColorPrsBuilder_swigregister
Handle_MeshVS_NodalColorPrsBuilder_swigregister(Handle_MeshVS_NodalColorPrsBuilder)

def Handle_MeshVS_NodalColorPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_NodalColorPrsBuilder_DownCast(AnObject)
Handle_MeshVS_NodalColorPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_NodalColorPrsBuilder_DownCast

class MeshVS_TextPrsBuilder(MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Parent:
        :type Parent: Handle_MeshVS_Mesh &
        :param Height:
        :type Height: float
        :param Color:
        :type Color: Quantity_Color &
        :param Flags: default value is MeshVS_DMF_TextDataPrs
        :type Flags: MeshVS_DisplayModeFlags &
        :param DS: default value is 0
        :type DS: Handle_MeshVS_DataSource &
        :param Id: default value is -1
        :type Id: int
        :param Priority: default value is MeshVS_BP_Text
        :type Priority: MeshVS_BuilderPriority &
        :rtype: None

        """
        _MeshVS.MeshVS_TextPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_TextPrsBuilder(*args))

    def GetTexts(self, *args):
        """
        * Returns map of text assigned with nodes ( IsElement = False ) or elements ( IsElement = True )

        :param IsElement:
        :type IsElement: bool
        :rtype: MeshVS_DataMapOfIntegerAsciiString

        """
        return _MeshVS.MeshVS_TextPrsBuilder_GetTexts(self, *args)


    def SetTexts(self, *args):
        """
        * Sets map of text assigned with nodes or elements

        :param IsElement:
        :type IsElement: bool
        :param Map:
        :type Map: MeshVS_DataMapOfIntegerAsciiString &
        :rtype: None

        """
        return _MeshVS.MeshVS_TextPrsBuilder_SetTexts(self, *args)


    def HasTexts(self, *args):
        """
        * Returns True if map isn't empty

        :param IsElement:
        :type IsElement: bool
        :rtype: bool

        """
        return _MeshVS.MeshVS_TextPrsBuilder_HasTexts(self, *args)


    def GetText(self, *args):
        """
        * Returns text assigned with single node or element

        :param IsElement:
        :type IsElement: bool
        :param ID:
        :type ID: int
        :param Text:
        :type Text: TCollection_AsciiString &
        :rtype: bool

        """
        return _MeshVS.MeshVS_TextPrsBuilder_GetText(self, *args)


    def SetText(self, *args):
        """
        * Sets text assigned with single node or element

        :param IsElement:
        :type IsElement: bool
        :param ID:
        :type ID: int
        :param Text:
        :type Text: TCollection_AsciiString &
        :rtype: None

        """
        return _MeshVS.MeshVS_TextPrsBuilder_SetText(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_TextPrsBuilder self)"""
        return _MeshVS.MeshVS_TextPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_TextPrsBuilder self) -> Handle_MeshVS_TextPrsBuilder"""
        return _MeshVS.MeshVS_TextPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_TextPrsBuilder.GetTexts = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_GetTexts, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder.SetTexts = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_SetTexts, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder.HasTexts = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_HasTexts, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder.GetText = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_GetText, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder.SetText = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_SetText, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder__kill_pointed, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_TextPrsBuilder_GetHandle, None, MeshVS_TextPrsBuilder)
MeshVS_TextPrsBuilder_swigregister = _MeshVS.MeshVS_TextPrsBuilder_swigregister
MeshVS_TextPrsBuilder_swigregister(MeshVS_TextPrsBuilder)

class Handle_MeshVS_TextPrsBuilder(Handle_MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_TextPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_TextPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_TextPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_TextPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_TextPrsBuilder_Nullify, None, Handle_MeshVS_TextPrsBuilder)
Handle_MeshVS_TextPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_TextPrsBuilder_IsNull, None, Handle_MeshVS_TextPrsBuilder)
Handle_MeshVS_TextPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_TextPrsBuilder_GetObject, None, Handle_MeshVS_TextPrsBuilder)
Handle_MeshVS_TextPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_TextPrsBuilder__kill_pointed, None, Handle_MeshVS_TextPrsBuilder)
Handle_MeshVS_TextPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_TextPrsBuilder_swigregister
Handle_MeshVS_TextPrsBuilder_swigregister(Handle_MeshVS_TextPrsBuilder)

def Handle_MeshVS_TextPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_TextPrsBuilder_DownCast(AnObject)
Handle_MeshVS_TextPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_TextPrsBuilder_DownCast

class MeshVS_VectorPrsBuilder(MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Parent:
        :type Parent: Handle_MeshVS_Mesh &
        :param MaxLength:
        :type MaxLength: float
        :param VectorColor:
        :type VectorColor: Quantity_Color &
        :param Flags: default value is MeshVS_DMF_VectorDataPrs
        :type Flags: MeshVS_DisplayModeFlags &
        :param DS: default value is 0
        :type DS: Handle_MeshVS_DataSource &
        :param Id: default value is -1
        :type Id: int
        :param Priority: default value is MeshVS_BP_Vector
        :type Priority: MeshVS_BuilderPriority &
        :param IsSimplePrs: default value is Standard_False
        :type IsSimplePrs: bool
        :rtype: None

        """
        _MeshVS.MeshVS_VectorPrsBuilder_swiginit(self, _MeshVS.new_MeshVS_VectorPrsBuilder(*args))

    def DrawVector(self, *args):
        """
        * Adds to array of polygons and polylines some primitive representing single vector

        :param theTrsf:
        :type theTrsf: gp_Trsf
        :param Length:
        :type Length: float
        :param MaxLength:
        :type MaxLength: float
        :param ArrowPoints:
        :type ArrowPoints: TColgp_Array1OfPnt
        :param Lines:
        :type Lines: Handle_Graphic3d_ArrayOfPrimitives &
        :param ArrowLines:
        :type ArrowLines: Handle_Graphic3d_ArrayOfPrimitives &
        :param Triangles:
        :type Triangles: Handle_Graphic3d_ArrayOfPrimitives &
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_DrawVector(self, *args)


    def calculateArrow(*args):
        """
        * Calculates points of arrow presentation

        :param Points:
        :type Points: TColgp_Array1OfPnt
        :param Length:
        :type Length: float
        :param ArrowPart:
        :type ArrowPart: float
        :rtype: float

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_calculateArrow(*args)

    calculateArrow = staticmethod(calculateArrow)

    def GetVectors(self, *args):
        """
        * Returns map of vectors assigned with nodes or elements

        :param IsElement:
        :type IsElement: bool
        :rtype: MeshVS_DataMapOfIntegerVector

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_GetVectors(self, *args)


    def SetVectors(self, *args):
        """
        * Sets map of vectors assigned with nodes or elements

        :param IsElement:
        :type IsElement: bool
        :param Map:
        :type Map: MeshVS_DataMapOfIntegerVector &
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_SetVectors(self, *args)


    def HasVectors(self, *args):
        """
        * Returns true, if map isn't empty

        :param IsElement:
        :type IsElement: bool
        :rtype: bool

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_HasVectors(self, *args)


    def GetVector(self, *args):
        """
        * Returns vector assigned with certain node or element

        :param IsElement:
        :type IsElement: bool
        :param ID:
        :type ID: int
        :param Vect:
        :type Vect: gp_Vec
        :rtype: bool

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_GetVector(self, *args)


    def SetVector(self, *args):
        """
        * Sets vector assigned with certain node or element

        :param IsElement:
        :type IsElement: bool
        :param ID:
        :type ID: int
        :param Vect:
        :type Vect: gp_Vec
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_SetVector(self, *args)


    def GetMinMaxVectorValue(self, *args):
        """
        * Calculates minimal and maximal length of vectors in map ( nodal, if IsElement = False or elemental, if IsElement = True )

        :param IsElement:
        :type IsElement: bool
        :param MinValue:
        :type MinValue: float &
        :param MaxValue:
        :type MaxValue: float &
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_GetMinMaxVectorValue(self, *args)


    def SetSimplePrsMode(self, *args):
        """
        * Sets flag that indicates is simple vector arrow mode uses or not default value is False

        :param IsSimpleArrow:
        :type IsSimpleArrow: bool
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_SetSimplePrsMode(self, *args)


    def SetSimplePrsParams(self, *args):
        """
        * Sets parameters of simple vector arrwo presentation theLineWidthParam - coefficient of vector line width (to draw line instead of arrow) theStartParam and theEndParam parameters of start and end of thickened ends position of thickening calculates according to parameters and maximum vector length default values are: theLineWidthParam = 2.5 theStartParam = 0.85 theEndParam = 0.95

        :param theLineWidthParam:
        :type theLineWidthParam: float
        :param theStartParam:
        :type theStartParam: float
        :param theEndParam:
        :type theEndParam: float
        :rtype: None

        """
        return _MeshVS.MeshVS_VectorPrsBuilder_SetSimplePrsParams(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(MeshVS_VectorPrsBuilder self)"""
        return _MeshVS.MeshVS_VectorPrsBuilder__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(MeshVS_VectorPrsBuilder self) -> Handle_MeshVS_VectorPrsBuilder"""
        return _MeshVS.MeshVS_VectorPrsBuilder_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


MeshVS_VectorPrsBuilder.DrawVector = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_DrawVector, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.GetVectors = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_GetVectors, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.SetVectors = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_SetVectors, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.HasVectors = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_HasVectors, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.GetVector = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_GetVector, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.SetVector = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_SetVector, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.GetMinMaxVectorValue = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_GetMinMaxVectorValue, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.SetSimplePrsMode = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_SetSimplePrsMode, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.SetSimplePrsParams = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_SetSimplePrsParams, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder__kill_pointed, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder.GetHandle = new_instancemethod(_MeshVS.MeshVS_VectorPrsBuilder_GetHandle, None, MeshVS_VectorPrsBuilder)
MeshVS_VectorPrsBuilder_swigregister = _MeshVS.MeshVS_VectorPrsBuilder_swigregister
MeshVS_VectorPrsBuilder_swigregister(MeshVS_VectorPrsBuilder)

def MeshVS_VectorPrsBuilder_calculateArrow(*args):
    """
    * Calculates points of arrow presentation

    :param Points:
    :type Points: TColgp_Array1OfPnt
    :param Length:
    :type Length: float
    :param ArrowPart:
    :type ArrowPart: float
    :rtype: float

    """
    return _MeshVS.MeshVS_VectorPrsBuilder_calculateArrow(*args)

class Handle_MeshVS_VectorPrsBuilder(Handle_MeshVS_PrsBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MeshVS.Handle_MeshVS_VectorPrsBuilder_swiginit(self, _MeshVS.new_Handle_MeshVS_VectorPrsBuilder(*args))
    DownCast = staticmethod(_MeshVS.Handle_MeshVS_VectorPrsBuilder_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_MeshVS_VectorPrsBuilder.Nullify = new_instancemethod(_MeshVS.Handle_MeshVS_VectorPrsBuilder_Nullify, None, Handle_MeshVS_VectorPrsBuilder)
Handle_MeshVS_VectorPrsBuilder.IsNull = new_instancemethod(_MeshVS.Handle_MeshVS_VectorPrsBuilder_IsNull, None, Handle_MeshVS_VectorPrsBuilder)
Handle_MeshVS_VectorPrsBuilder.GetObject = new_instancemethod(_MeshVS.Handle_MeshVS_VectorPrsBuilder_GetObject, None, Handle_MeshVS_VectorPrsBuilder)
Handle_MeshVS_VectorPrsBuilder._kill_pointed = new_instancemethod(_MeshVS.Handle_MeshVS_VectorPrsBuilder__kill_pointed, None, Handle_MeshVS_VectorPrsBuilder)
Handle_MeshVS_VectorPrsBuilder_swigregister = _MeshVS.Handle_MeshVS_VectorPrsBuilder_swigregister
Handle_MeshVS_VectorPrsBuilder_swigregister(Handle_MeshVS_VectorPrsBuilder)

def Handle_MeshVS_VectorPrsBuilder_DownCast(AnObject):
    return _MeshVS.Handle_MeshVS_VectorPrsBuilder_DownCast(AnObject)
Handle_MeshVS_VectorPrsBuilder_DownCast = _MeshVS.Handle_MeshVS_VectorPrsBuilder_DownCast



