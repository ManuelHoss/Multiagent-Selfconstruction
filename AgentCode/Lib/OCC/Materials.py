# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Materials.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Materials', [dirname(__file__)])
        except ImportError:
            import _Materials
            return _Materials
        if fp is not None:
            try:
                _mod = imp.load_module('_Materials', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Materials = swig_import_helper()
    del swig_import_helper
else:
    import _Materials
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Materials.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Materials.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Materials.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Materials.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Materials.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Materials.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Materials.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Materials.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Materials.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Materials.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Materials.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Materials.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Materials.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Materials.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Materials.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Materials.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Materials.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Materials.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.Quantity
import OCC.TCollection
import OCC.MMgt
import OCC.Dynamic
class materials(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MaterialFile(*args):
        """
        * Sets the location and the name of the file defining the definition of a material, in term of properties.

        :param afile:
        :type afile: char *
        :rtype: void

        """
        return _Materials.materials_MaterialFile(*args)

    MaterialFile = staticmethod(MaterialFile)

    def MaterialsFile(*args):
        """
        * Sets the location and the name of the file defining the dictionary of materials.

        :param afile:
        :type afile: char *
        :rtype: void

        * Returns the location and the name of the dictionary file of materials.

        :rtype: char *

        """
        return _Materials.materials_MaterialsFile(*args)

    MaterialsFile = staticmethod(MaterialsFile)

    def DictionaryOfMaterials(*args):
        """
        * Returns the dictionary of materials.The dictionary is created at the first call to this method, or if the dictionary is not up to date with respect to the file date.

        :rtype: Handle_Materials_MaterialsDictionary

        """
        return _Materials.materials_DictionaryOfMaterials(*args)

    DictionaryOfMaterials = staticmethod(DictionaryOfMaterials)

    def ExistMaterial(*args):
        """
        * True if the materialofname aName exists ...

        :param aName:
        :type aName: char *
        :rtype: bool

        """
        return _Materials.materials_ExistMaterial(*args)

    ExistMaterial = staticmethod(ExistMaterial)

    def NumberOfMaterials(*args):
        """
        * Returns the number of materials previously stored in the dictionary.

        :rtype: int

        """
        return _Materials.materials_NumberOfMaterials(*args)

    NumberOfMaterials = staticmethod(NumberOfMaterials)

    def Material(*args):
        """
        * Retrieves from the dictionary the object material with <amaterial> as name.

        :param amaterial:
        :type amaterial: char *
        :rtype: Handle_Materials_Material

        * This method used with the previous one, allows the exploration of all the dictionary. It returns a Material instance.

        :param anindex:
        :type anindex: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.materials_Material(*args)

    Material = staticmethod(Material)

    def __init__(self):
        _Materials.materials_swiginit(self, _Materials.new_materials())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


materials._kill_pointed = new_instancemethod(_Materials.materials__kill_pointed, None, materials)
materials_swigregister = _Materials.materials_swigregister
materials_swigregister(materials)

def materials_MaterialFile(*args):
    """
    * Sets the location and the name of the file defining the definition of a material, in term of properties.

    :param afile:
    :type afile: char *
    :rtype: void

    """
    return _Materials.materials_MaterialFile(*args)

def materials_MaterialsFile(*args):
    """
    * Sets the location and the name of the file defining the dictionary of materials.

    :param afile:
    :type afile: char *
    :rtype: void

    * Returns the location and the name of the dictionary file of materials.

    :rtype: char *

    """
    return _Materials.materials_MaterialsFile(*args)

def materials_DictionaryOfMaterials(*args):
    """
    * Returns the dictionary of materials.The dictionary is created at the first call to this method, or if the dictionary is not up to date with respect to the file date.

    :rtype: Handle_Materials_MaterialsDictionary

    """
    return _Materials.materials_DictionaryOfMaterials(*args)

def materials_ExistMaterial(*args):
    """
    * True if the materialofname aName exists ...

    :param aName:
    :type aName: char *
    :rtype: bool

    """
    return _Materials.materials_ExistMaterial(*args)

def materials_NumberOfMaterials(*args):
    """
    * Returns the number of materials previously stored in the dictionary.

    :rtype: int

    """
    return _Materials.materials_NumberOfMaterials(*args)

def materials_Material(*args):
    """
    * Retrieves from the dictionary the object material with <amaterial> as name.

    :param amaterial:
    :type amaterial: char *
    :rtype: Handle_Materials_Material

    * This method used with the previous one, allows the exploration of all the dictionary. It returns a Material instance.

    :param anindex:
    :type anindex: int
    :rtype: Handle_Materials_Material

    """
    return _Materials.materials_Material(*args)

class Materials_Color(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty instance of Color.

        :rtype: None

        * Creates an instance of Color, with <acolor> as color.

        :param acolor:
        :type acolor: Quantity_Color &
        :rtype: None

        """
        _Materials.Materials_Color_swiginit(self, _Materials.new_Materials_Color(*args))

    def Color(self, *args):
        """
        * Sets <acolor> into <self>.

        :param acolor:
        :type acolor: Quantity_Color &
        :rtype: None

        * Returns a Quantity_Color corresponding to <self>.

        :rtype: Quantity_Color

        * Get the values ( RGB or HLS ) between 0.0 and 1.0

        :param aTypeOfColor:
        :type aTypeOfColor: Quantity_TypeOfColor
        :param Reel1:
        :type Reel1: float &
        :param Reel2:
        :type Reel2: float &
        :param Reel3:
        :type Reel3: float &
        :rtype: None

        """
        return _Materials.Materials_Color_Color(self, *args)


    def Color255(self, *args):
        """
        * Get the values ( RGB or HLS ) between 0.0 and 255.0

        :param aTypeOfColor:
        :type aTypeOfColor: Quantity_TypeOfColor
        :param Reel1:
        :type Reel1: float &
        :param Reel2:
        :type Reel2: float &
        :param Reel3:
        :type Reel3: float &
        :rtype: None

        """
        return _Materials.Materials_Color_Color255(self, *args)


    def SetColor(self, *args):
        """
        * Set the values ( RGB or HLS ) between 0.0 and 1.0

        :param aTypeOfColor:
        :type aTypeOfColor: Quantity_TypeOfColor
        :param Reel1:
        :type Reel1: float
        :param Reel2:
        :type Reel2: float
        :param Reel3:
        :type Reel3: float
        :rtype: None

        """
        return _Materials.Materials_Color_SetColor(self, *args)


    def SetColor255(self, *args):
        """
        * Set the values ( RGB or HLS ) between 0.0 and 255.0

        :param aTypeOfColor:
        :type aTypeOfColor: Quantity_TypeOfColor
        :param Reel1:
        :type Reel1: float
        :param Reel2:
        :type Reel2: float
        :param Reel3:
        :type Reel3: float
        :rtype: None

        """
        return _Materials.Materials_Color_SetColor255(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Materials_Color self)"""
        return _Materials.Materials_Color__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_Color self) -> Handle_Materials_Color"""
        return _Materials.Materials_Color_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_Color.Color = new_instancemethod(_Materials.Materials_Color_Color, None, Materials_Color)
Materials_Color.Color255 = new_instancemethod(_Materials.Materials_Color_Color255, None, Materials_Color)
Materials_Color.SetColor = new_instancemethod(_Materials.Materials_Color_SetColor, None, Materials_Color)
Materials_Color.SetColor255 = new_instancemethod(_Materials.Materials_Color_SetColor255, None, Materials_Color)
Materials_Color._kill_pointed = new_instancemethod(_Materials.Materials_Color__kill_pointed, None, Materials_Color)
Materials_Color.GetHandle = new_instancemethod(_Materials.Materials_Color_GetHandle, None, Materials_Color)
Materials_Color_swigregister = _Materials.Materials_Color_swigregister
Materials_Color_swigregister(Materials_Color)

class Handle_Materials_Color(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_Color_swiginit(self, _Materials.new_Handle_Materials_Color(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_Color_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_Color.Nullify = new_instancemethod(_Materials.Handle_Materials_Color_Nullify, None, Handle_Materials_Color)
Handle_Materials_Color.IsNull = new_instancemethod(_Materials.Handle_Materials_Color_IsNull, None, Handle_Materials_Color)
Handle_Materials_Color.GetObject = new_instancemethod(_Materials.Handle_Materials_Color_GetObject, None, Handle_Materials_Color)
Handle_Materials_Color._kill_pointed = new_instancemethod(_Materials.Handle_Materials_Color__kill_pointed, None, Handle_Materials_Color)
Handle_Materials_Color_swigregister = _Materials.Handle_Materials_Color_swigregister
Handle_Materials_Color_swigregister(Handle_Materials_Color)

def Handle_Materials_Color_DownCast(AnObject):
    return _Materials.Handle_Materials_Color_DownCast(AnObject)
Handle_Materials_Color_DownCast = _Materials.Handle_Materials_Color_DownCast

class Materials_FuzzyInstance(OCC.Dynamic.Dynamic_FuzzyClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param atype:
        :type atype: char *
        :rtype: None

        :param afuzzyinstance:
        :type afuzzyinstance: Handle_Materials_FuzzyInstance &
        :rtype: None

        """
        _Materials.Materials_FuzzyInstance_swiginit(self, _Materials.new_Materials_FuzzyInstance(*args))

    def Definition(self, *args):
        """
        :rtype: Handle_Dynamic_FuzzyClass

        """
        return _Materials.Materials_FuzzyInstance_Definition(self, *args)


    def Parameter(self, *args):
        """
        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: bool
        :rtype: void

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int
        :rtype: void

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float
        :rtype: void

        :param aparameter:
        :type aparameter: char *
        :param astring:
        :type astring: char *
        :rtype: void

        :param aparameter:
        :type aparameter: char *
        :param anobject:
        :type anobject: Handle_Standard_Transient &
        :rtype: void

        """
        return _Materials.Materials_FuzzyInstance_Parameter(self, *args)


    def Value(self, *args):
        """
        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: bool
        :rtype: bool

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: int &
        :rtype: bool

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: float &
        :rtype: bool

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: TCollection_AsciiString &
        :rtype: bool

        :param aparameter:
        :type aparameter: char *
        :param avalue:
        :type avalue: Handle_Standard_Transient &
        :rtype: bool

        """
        return _Materials.Materials_FuzzyInstance_Value(self, *args)


    def DumpToString(self):
        """DumpToString(Materials_FuzzyInstance self) -> std::string"""
        return _Materials.Materials_FuzzyInstance_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Materials_FuzzyInstance self)"""
        return _Materials.Materials_FuzzyInstance__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_FuzzyInstance self) -> Handle_Materials_FuzzyInstance"""
        return _Materials.Materials_FuzzyInstance_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_FuzzyInstance.Definition = new_instancemethod(_Materials.Materials_FuzzyInstance_Definition, None, Materials_FuzzyInstance)
Materials_FuzzyInstance.Parameter = new_instancemethod(_Materials.Materials_FuzzyInstance_Parameter, None, Materials_FuzzyInstance)
Materials_FuzzyInstance.Value = new_instancemethod(_Materials.Materials_FuzzyInstance_Value, None, Materials_FuzzyInstance)
Materials_FuzzyInstance.DumpToString = new_instancemethod(_Materials.Materials_FuzzyInstance_DumpToString, None, Materials_FuzzyInstance)
Materials_FuzzyInstance._kill_pointed = new_instancemethod(_Materials.Materials_FuzzyInstance__kill_pointed, None, Materials_FuzzyInstance)
Materials_FuzzyInstance.GetHandle = new_instancemethod(_Materials.Materials_FuzzyInstance_GetHandle, None, Materials_FuzzyInstance)
Materials_FuzzyInstance_swigregister = _Materials.Materials_FuzzyInstance_swigregister
Materials_FuzzyInstance_swigregister(Materials_FuzzyInstance)

class Handle_Materials_FuzzyInstance(OCC.Dynamic.Handle_Dynamic_FuzzyClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_FuzzyInstance_swiginit(self, _Materials.new_Handle_Materials_FuzzyInstance(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_FuzzyInstance_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_FuzzyInstance.Nullify = new_instancemethod(_Materials.Handle_Materials_FuzzyInstance_Nullify, None, Handle_Materials_FuzzyInstance)
Handle_Materials_FuzzyInstance.IsNull = new_instancemethod(_Materials.Handle_Materials_FuzzyInstance_IsNull, None, Handle_Materials_FuzzyInstance)
Handle_Materials_FuzzyInstance.GetObject = new_instancemethod(_Materials.Handle_Materials_FuzzyInstance_GetObject, None, Handle_Materials_FuzzyInstance)
Handle_Materials_FuzzyInstance._kill_pointed = new_instancemethod(_Materials.Handle_Materials_FuzzyInstance__kill_pointed, None, Handle_Materials_FuzzyInstance)
Handle_Materials_FuzzyInstance_swigregister = _Materials.Handle_Materials_FuzzyInstance_swigregister
Handle_Materials_FuzzyInstance_swigregister(Handle_Materials_FuzzyInstance)

def Handle_Materials_FuzzyInstance_DownCast(AnObject):
    return _Materials.Handle_Materials_FuzzyInstance_DownCast(AnObject)
Handle_Materials_FuzzyInstance_DownCast = _Materials.Handle_Materials_FuzzyInstance_DownCast

class Materials_MaterialDefinition(OCC.Dynamic.Dynamic_FuzzyDefinitionsDictionary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the exhaustive definition of a material.

        :rtype: None

        """
        _Materials.Materials_MaterialDefinition_swiginit(self, _Materials.new_Materials_MaterialDefinition(*args))

    def _kill_pointed(self):
        """_kill_pointed(Materials_MaterialDefinition self)"""
        return _Materials.Materials_MaterialDefinition__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_MaterialDefinition self) -> Handle_Materials_MaterialDefinition"""
        return _Materials.Materials_MaterialDefinition_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_MaterialDefinition._kill_pointed = new_instancemethod(_Materials.Materials_MaterialDefinition__kill_pointed, None, Materials_MaterialDefinition)
Materials_MaterialDefinition.GetHandle = new_instancemethod(_Materials.Materials_MaterialDefinition_GetHandle, None, Materials_MaterialDefinition)
Materials_MaterialDefinition_swigregister = _Materials.Materials_MaterialDefinition_swigregister
Materials_MaterialDefinition_swigregister(Materials_MaterialDefinition)

class Handle_Materials_MaterialDefinition(OCC.Dynamic.Handle_Dynamic_FuzzyDefinitionsDictionary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_MaterialDefinition_swiginit(self, _Materials.new_Handle_Materials_MaterialDefinition(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_MaterialDefinition_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_MaterialDefinition.Nullify = new_instancemethod(_Materials.Handle_Materials_MaterialDefinition_Nullify, None, Handle_Materials_MaterialDefinition)
Handle_Materials_MaterialDefinition.IsNull = new_instancemethod(_Materials.Handle_Materials_MaterialDefinition_IsNull, None, Handle_Materials_MaterialDefinition)
Handle_Materials_MaterialDefinition.GetObject = new_instancemethod(_Materials.Handle_Materials_MaterialDefinition_GetObject, None, Handle_Materials_MaterialDefinition)
Handle_Materials_MaterialDefinition._kill_pointed = new_instancemethod(_Materials.Handle_Materials_MaterialDefinition__kill_pointed, None, Handle_Materials_MaterialDefinition)
Handle_Materials_MaterialDefinition_swigregister = _Materials.Handle_Materials_MaterialDefinition_swigregister
Handle_Materials_MaterialDefinition_swigregister(Handle_Materials_MaterialDefinition)

def Handle_Materials_MaterialDefinition_DownCast(AnObject):
    return _Materials.Handle_Materials_MaterialDefinition_DownCast(AnObject)
Handle_Materials_MaterialDefinition_DownCast = _Materials.Handle_Materials_MaterialDefinition_DownCast

class Materials_MaterialsDictionary(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a MaterialsDictionary object which contains the sequence of all the materials the user wants to consider.

        :rtype: None

        """
        _Materials.Materials_MaterialsDictionary_swiginit(self, _Materials.new_Materials_MaterialsDictionary(*args))

    def ExistMaterial(self, *args):
        """
        * True if the materialofname aName exists ...

        :param aName:
        :type aName: char *
        :rtype: bool

        """
        return _Materials.Materials_MaterialsDictionary_ExistMaterial(self, *args)


    def NumberOfMaterials(self, *args):
        """
        * Returns the number of materials previously stored in the dictionary.

        :rtype: int

        """
        return _Materials.Materials_MaterialsDictionary_NumberOfMaterials(self, *args)


    def Material(self, *args):
        """
        * Retrieves from the dictionary the object material with <amaterial> as name. If <amaterial> does not exist in the dictionary an exeption is raised.

        :param amaterial:
        :type amaterial: char *
        :rtype: Handle_Materials_Material

        * This method used with the previous one, allow the exploration of all the dictionary. It returns a Material instance.

        :param anindex:
        :type anindex: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MaterialsDictionary_Material(self, *args)


    def UpToDate(self, *args):
        """
        * Returns true if there has been no modification of the file Materials.dat since the creation of the dictionary object, false otherwise.

        :rtype: bool

        """
        return _Materials.Materials_MaterialsDictionary_UpToDate(self, *args)


    def DumpToString(self):
        """DumpToString(Materials_MaterialsDictionary self) -> std::string"""
        return _Materials.Materials_MaterialsDictionary_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Materials_MaterialsDictionary self)"""
        return _Materials.Materials_MaterialsDictionary__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_MaterialsDictionary self) -> Handle_Materials_MaterialsDictionary"""
        return _Materials.Materials_MaterialsDictionary_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_MaterialsDictionary.ExistMaterial = new_instancemethod(_Materials.Materials_MaterialsDictionary_ExistMaterial, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary.NumberOfMaterials = new_instancemethod(_Materials.Materials_MaterialsDictionary_NumberOfMaterials, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary.Material = new_instancemethod(_Materials.Materials_MaterialsDictionary_Material, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary.UpToDate = new_instancemethod(_Materials.Materials_MaterialsDictionary_UpToDate, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary.DumpToString = new_instancemethod(_Materials.Materials_MaterialsDictionary_DumpToString, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary._kill_pointed = new_instancemethod(_Materials.Materials_MaterialsDictionary__kill_pointed, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary.GetHandle = new_instancemethod(_Materials.Materials_MaterialsDictionary_GetHandle, None, Materials_MaterialsDictionary)
Materials_MaterialsDictionary_swigregister = _Materials.Materials_MaterialsDictionary_swigregister
Materials_MaterialsDictionary_swigregister(Materials_MaterialsDictionary)

class Handle_Materials_MaterialsDictionary(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_MaterialsDictionary_swiginit(self, _Materials.new_Handle_Materials_MaterialsDictionary(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_MaterialsDictionary_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_MaterialsDictionary.Nullify = new_instancemethod(_Materials.Handle_Materials_MaterialsDictionary_Nullify, None, Handle_Materials_MaterialsDictionary)
Handle_Materials_MaterialsDictionary.IsNull = new_instancemethod(_Materials.Handle_Materials_MaterialsDictionary_IsNull, None, Handle_Materials_MaterialsDictionary)
Handle_Materials_MaterialsDictionary.GetObject = new_instancemethod(_Materials.Handle_Materials_MaterialsDictionary_GetObject, None, Handle_Materials_MaterialsDictionary)
Handle_Materials_MaterialsDictionary._kill_pointed = new_instancemethod(_Materials.Handle_Materials_MaterialsDictionary__kill_pointed, None, Handle_Materials_MaterialsDictionary)
Handle_Materials_MaterialsDictionary_swigregister = _Materials.Handle_Materials_MaterialsDictionary_swigregister
Handle_Materials_MaterialsDictionary_swigregister(Handle_Materials_MaterialsDictionary)

def Handle_Materials_MaterialsDictionary_DownCast(AnObject):
    return _Materials.Handle_Materials_MaterialsDictionary_DownCast(AnObject)
Handle_Materials_MaterialsDictionary_DownCast = _Materials.Handle_Materials_MaterialsDictionary_DownCast

class Materials_MaterialsSequence(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Materials.Materials_MaterialsSequence_swiginit(self, _Materials.new_Materials_MaterialsSequence(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Materials.Materials_MaterialsSequence_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Materials.Materials_MaterialsSequence_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Materials_Material &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Materials_MaterialsSequence &
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Materials_Material &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Materials_MaterialsSequence &
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Materials_Material &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Materials_MaterialsSequence &
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Materials_Material &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Materials_MaterialsSequence &
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Materials_MaterialsSequence

        """
        return _Materials.Materials_MaterialsSequence_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Materials_Material &
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MaterialsSequence_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MaterialsSequence_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Materials.Materials_MaterialsSequence_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Materials_MtsSequence

        """
        return _Materials.Materials_MaterialsSequence_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Materials_MtsSequence

        """
        return _Materials.Materials_MaterialsSequence_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Materials_MaterialsSequence

        """
        return _Materials.Materials_MaterialsSequence_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Materials_MaterialsSequence self)"""
        return _Materials.Materials_MaterialsSequence__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_MaterialsSequence self) -> Handle_Materials_MaterialsSequence"""
        return _Materials.Materials_MaterialsSequence_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_MaterialsSequence.IsEmpty = new_instancemethod(_Materials.Materials_MaterialsSequence_IsEmpty, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Length = new_instancemethod(_Materials.Materials_MaterialsSequence_Length, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Clear = new_instancemethod(_Materials.Materials_MaterialsSequence_Clear, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Append = new_instancemethod(_Materials.Materials_MaterialsSequence_Append, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Prepend = new_instancemethod(_Materials.Materials_MaterialsSequence_Prepend, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Reverse = new_instancemethod(_Materials.Materials_MaterialsSequence_Reverse, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.InsertBefore = new_instancemethod(_Materials.Materials_MaterialsSequence_InsertBefore, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.InsertAfter = new_instancemethod(_Materials.Materials_MaterialsSequence_InsertAfter, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Exchange = new_instancemethod(_Materials.Materials_MaterialsSequence_Exchange, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Split = new_instancemethod(_Materials.Materials_MaterialsSequence_Split, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.SetValue = new_instancemethod(_Materials.Materials_MaterialsSequence_SetValue, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Value = new_instancemethod(_Materials.Materials_MaterialsSequence_Value, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.ChangeValue = new_instancemethod(_Materials.Materials_MaterialsSequence_ChangeValue, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Remove = new_instancemethod(_Materials.Materials_MaterialsSequence_Remove, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.Sequence = new_instancemethod(_Materials.Materials_MaterialsSequence_Sequence, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.ChangeSequence = new_instancemethod(_Materials.Materials_MaterialsSequence_ChangeSequence, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.ShallowCopy = new_instancemethod(_Materials.Materials_MaterialsSequence_ShallowCopy, None, Materials_MaterialsSequence)
Materials_MaterialsSequence._kill_pointed = new_instancemethod(_Materials.Materials_MaterialsSequence__kill_pointed, None, Materials_MaterialsSequence)
Materials_MaterialsSequence.GetHandle = new_instancemethod(_Materials.Materials_MaterialsSequence_GetHandle, None, Materials_MaterialsSequence)
Materials_MaterialsSequence_swigregister = _Materials.Materials_MaterialsSequence_swigregister
Materials_MaterialsSequence_swigregister(Materials_MaterialsSequence)

class Handle_Materials_MaterialsSequence(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_MaterialsSequence_swiginit(self, _Materials.new_Handle_Materials_MaterialsSequence(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_MaterialsSequence_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_MaterialsSequence.Nullify = new_instancemethod(_Materials.Handle_Materials_MaterialsSequence_Nullify, None, Handle_Materials_MaterialsSequence)
Handle_Materials_MaterialsSequence.IsNull = new_instancemethod(_Materials.Handle_Materials_MaterialsSequence_IsNull, None, Handle_Materials_MaterialsSequence)
Handle_Materials_MaterialsSequence.GetObject = new_instancemethod(_Materials.Handle_Materials_MaterialsSequence_GetObject, None, Handle_Materials_MaterialsSequence)
Handle_Materials_MaterialsSequence._kill_pointed = new_instancemethod(_Materials.Handle_Materials_MaterialsSequence__kill_pointed, None, Handle_Materials_MaterialsSequence)
Handle_Materials_MaterialsSequence_swigregister = _Materials.Handle_Materials_MaterialsSequence_swigregister
Handle_Materials_MaterialsSequence_swigregister(Handle_Materials_MaterialsSequence)

def Handle_Materials_MaterialsSequence_DownCast(AnObject):
    return _Materials.Handle_Materials_MaterialsSequence_DownCast(AnObject)
Handle_Materials_MaterialsSequence_DownCast = _Materials.Handle_Materials_MaterialsSequence_DownCast

class Materials_MtsSequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Materials.Materials_MtsSequence_swiginit(self, _Materials.new_Materials_MtsSequence(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Materials_MtsSequence &
        :rtype: Materials_MtsSequence

        """
        return _Materials.Materials_MtsSequence_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Materials_MtsSequence &
        :rtype: Materials_MtsSequence

        """
        return _Materials.Materials_MtsSequence_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Materials_Material &
        :rtype: None

        :param S:
        :type S: Materials_MtsSequence &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Materials_Material &
        :rtype: None

        :param S:
        :type S: Materials_MtsSequence &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Materials_Material &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Materials_MtsSequence &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Materials_Material &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Materials_MtsSequence &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MtsSequence_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MtsSequence_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Materials_MtsSequence &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MtsSequence_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Materials_Material &
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_MtsSequence_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Materials.Materials_MtsSequence_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_MtsSequence.Clear = new_instancemethod(_Materials.Materials_MtsSequence_Clear, None, Materials_MtsSequence)
Materials_MtsSequence.Assign = new_instancemethod(_Materials.Materials_MtsSequence_Assign, None, Materials_MtsSequence)
Materials_MtsSequence.Set = new_instancemethod(_Materials.Materials_MtsSequence_Set, None, Materials_MtsSequence)
Materials_MtsSequence.Append = new_instancemethod(_Materials.Materials_MtsSequence_Append, None, Materials_MtsSequence)
Materials_MtsSequence.Prepend = new_instancemethod(_Materials.Materials_MtsSequence_Prepend, None, Materials_MtsSequence)
Materials_MtsSequence.InsertBefore = new_instancemethod(_Materials.Materials_MtsSequence_InsertBefore, None, Materials_MtsSequence)
Materials_MtsSequence.InsertAfter = new_instancemethod(_Materials.Materials_MtsSequence_InsertAfter, None, Materials_MtsSequence)
Materials_MtsSequence.First = new_instancemethod(_Materials.Materials_MtsSequence_First, None, Materials_MtsSequence)
Materials_MtsSequence.Last = new_instancemethod(_Materials.Materials_MtsSequence_Last, None, Materials_MtsSequence)
Materials_MtsSequence.Split = new_instancemethod(_Materials.Materials_MtsSequence_Split, None, Materials_MtsSequence)
Materials_MtsSequence.Value = new_instancemethod(_Materials.Materials_MtsSequence_Value, None, Materials_MtsSequence)
Materials_MtsSequence.SetValue = new_instancemethod(_Materials.Materials_MtsSequence_SetValue, None, Materials_MtsSequence)
Materials_MtsSequence.ChangeValue = new_instancemethod(_Materials.Materials_MtsSequence_ChangeValue, None, Materials_MtsSequence)
Materials_MtsSequence.Remove = new_instancemethod(_Materials.Materials_MtsSequence_Remove, None, Materials_MtsSequence)
Materials_MtsSequence._kill_pointed = new_instancemethod(_Materials.Materials_MtsSequence__kill_pointed, None, Materials_MtsSequence)
Materials_MtsSequence_swigregister = _Materials.Materials_MtsSequence_swigregister
Materials_MtsSequence_swigregister(Materials_MtsSequence)

class Materials_SequenceNodeOfMtsSequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Materials_Material &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Materials.Materials_SequenceNodeOfMtsSequence_swiginit(self, _Materials.new_Materials_SequenceNodeOfMtsSequence(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Materials_Material

        """
        return _Materials.Materials_SequenceNodeOfMtsSequence_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Materials_SequenceNodeOfMtsSequence self)"""
        return _Materials.Materials_SequenceNodeOfMtsSequence__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_SequenceNodeOfMtsSequence self) -> Handle_Materials_SequenceNodeOfMtsSequence"""
        return _Materials.Materials_SequenceNodeOfMtsSequence_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_SequenceNodeOfMtsSequence.Value = new_instancemethod(_Materials.Materials_SequenceNodeOfMtsSequence_Value, None, Materials_SequenceNodeOfMtsSequence)
Materials_SequenceNodeOfMtsSequence._kill_pointed = new_instancemethod(_Materials.Materials_SequenceNodeOfMtsSequence__kill_pointed, None, Materials_SequenceNodeOfMtsSequence)
Materials_SequenceNodeOfMtsSequence.GetHandle = new_instancemethod(_Materials.Materials_SequenceNodeOfMtsSequence_GetHandle, None, Materials_SequenceNodeOfMtsSequence)
Materials_SequenceNodeOfMtsSequence_swigregister = _Materials.Materials_SequenceNodeOfMtsSequence_swigregister
Materials_SequenceNodeOfMtsSequence_swigregister(Materials_SequenceNodeOfMtsSequence)

class Handle_Materials_SequenceNodeOfMtsSequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_SequenceNodeOfMtsSequence_swiginit(self, _Materials.new_Handle_Materials_SequenceNodeOfMtsSequence(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_SequenceNodeOfMtsSequence_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_SequenceNodeOfMtsSequence.Nullify = new_instancemethod(_Materials.Handle_Materials_SequenceNodeOfMtsSequence_Nullify, None, Handle_Materials_SequenceNodeOfMtsSequence)
Handle_Materials_SequenceNodeOfMtsSequence.IsNull = new_instancemethod(_Materials.Handle_Materials_SequenceNodeOfMtsSequence_IsNull, None, Handle_Materials_SequenceNodeOfMtsSequence)
Handle_Materials_SequenceNodeOfMtsSequence.GetObject = new_instancemethod(_Materials.Handle_Materials_SequenceNodeOfMtsSequence_GetObject, None, Handle_Materials_SequenceNodeOfMtsSequence)
Handle_Materials_SequenceNodeOfMtsSequence._kill_pointed = new_instancemethod(_Materials.Handle_Materials_SequenceNodeOfMtsSequence__kill_pointed, None, Handle_Materials_SequenceNodeOfMtsSequence)
Handle_Materials_SequenceNodeOfMtsSequence_swigregister = _Materials.Handle_Materials_SequenceNodeOfMtsSequence_swigregister
Handle_Materials_SequenceNodeOfMtsSequence_swigregister(Handle_Materials_SequenceNodeOfMtsSequence)

def Handle_Materials_SequenceNodeOfMtsSequence_DownCast(AnObject):
    return _Materials.Handle_Materials_SequenceNodeOfMtsSequence_DownCast(AnObject)
Handle_Materials_SequenceNodeOfMtsSequence_DownCast = _Materials.Handle_Materials_SequenceNodeOfMtsSequence_DownCast

class Materials_Material(Materials_FuzzyInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the material <amaterial>.

        :param amaterial:
        :type amaterial: char *
        :rtype: None

        """
        _Materials.Materials_Material_swiginit(self, _Materials.new_Materials_Material(*args))

    def Name(self, *args):
        """
        * Returns the name of the material.

        :rtype: TCollection_AsciiString

        """
        return _Materials.Materials_Material_Name(self, *args)


    def DumpToString(self):
        """DumpToString(Materials_Material self) -> std::string"""
        return _Materials.Materials_Material_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Materials_Material self)"""
        return _Materials.Materials_Material__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Materials_Material self) -> Handle_Materials_Material"""
        return _Materials.Materials_Material_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Materials_Material.Name = new_instancemethod(_Materials.Materials_Material_Name, None, Materials_Material)
Materials_Material.DumpToString = new_instancemethod(_Materials.Materials_Material_DumpToString, None, Materials_Material)
Materials_Material._kill_pointed = new_instancemethod(_Materials.Materials_Material__kill_pointed, None, Materials_Material)
Materials_Material.GetHandle = new_instancemethod(_Materials.Materials_Material_GetHandle, None, Materials_Material)
Materials_Material_swigregister = _Materials.Materials_Material_swigregister
Materials_Material_swigregister(Materials_Material)

class Handle_Materials_Material(Handle_Materials_FuzzyInstance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Materials.Handle_Materials_Material_swiginit(self, _Materials.new_Handle_Materials_Material(*args))
    DownCast = staticmethod(_Materials.Handle_Materials_Material_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Materials_Material.Nullify = new_instancemethod(_Materials.Handle_Materials_Material_Nullify, None, Handle_Materials_Material)
Handle_Materials_Material.IsNull = new_instancemethod(_Materials.Handle_Materials_Material_IsNull, None, Handle_Materials_Material)
Handle_Materials_Material.GetObject = new_instancemethod(_Materials.Handle_Materials_Material_GetObject, None, Handle_Materials_Material)
Handle_Materials_Material._kill_pointed = new_instancemethod(_Materials.Handle_Materials_Material__kill_pointed, None, Handle_Materials_Material)
Handle_Materials_Material_swigregister = _Materials.Handle_Materials_Material_swigregister
Handle_Materials_Material_swigregister(Handle_Materials_Material)

def Handle_Materials_Material_DownCast(AnObject):
    return _Materials.Handle_Materials_Material_DownCast(AnObject)
Handle_Materials_Material_DownCast = _Materials.Handle_Materials_Material_DownCast



