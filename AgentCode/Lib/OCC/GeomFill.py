# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomFill.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomFill', [dirname(__file__)])
        except ImportError:
            import _GeomFill
            return _GeomFill
        if fp is not None:
            try:
                _mod = imp.load_module('_GeomFill', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GeomFill = swig_import_helper()
    del swig_import_helper
else:
    import _GeomFill
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomFill.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomFill.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomFill.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomFill.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomFill.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomFill.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomFill.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomFill.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomFill.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomFill.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomFill.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomFill.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomFill.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomFill.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomFill.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomFill.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomFill.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomFill.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Convert
import OCC.AppBlend
import OCC.Approx
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
import OCC.AppCont
import OCC.AppParCurves
import OCC.Law
import OCC.TColGeom

_GeomFill.GeomFill_Section_swigconstant(_GeomFill)
GeomFill_Section = _GeomFill.GeomFill_Section

_GeomFill.GeomFill_Location_swigconstant(_GeomFill)
GeomFill_Location = _GeomFill.GeomFill_Location

_GeomFill.GeomFill_StretchStyle_swigconstant(_GeomFill)
GeomFill_StretchStyle = _GeomFill.GeomFill_StretchStyle

_GeomFill.GeomFill_CoonsStyle_swigconstant(_GeomFill)
GeomFill_CoonsStyle = _GeomFill.GeomFill_CoonsStyle

_GeomFill.GeomFill_CurvedStyle_swigconstant(_GeomFill)
GeomFill_CurvedStyle = _GeomFill.GeomFill_CurvedStyle

_GeomFill.GeomFill_PipeOk_swigconstant(_GeomFill)
GeomFill_PipeOk = _GeomFill.GeomFill_PipeOk

_GeomFill.GeomFill_PipeNotOk_swigconstant(_GeomFill)
GeomFill_PipeNotOk = _GeomFill.GeomFill_PipeNotOk

_GeomFill.GeomFill_PlaneNotIntersectGuide_swigconstant(_GeomFill)
GeomFill_PlaneNotIntersectGuide = _GeomFill.GeomFill_PlaneNotIntersectGuide

_GeomFill.GeomFill_ImpossibleContact_swigconstant(_GeomFill)
GeomFill_ImpossibleContact = _GeomFill.GeomFill_ImpossibleContact

_GeomFill.GeomFill_IsCorrectedFrenet_swigconstant(_GeomFill)
GeomFill_IsCorrectedFrenet = _GeomFill.GeomFill_IsCorrectedFrenet

_GeomFill.GeomFill_IsFixed_swigconstant(_GeomFill)
GeomFill_IsFixed = _GeomFill.GeomFill_IsFixed

_GeomFill.GeomFill_IsFrenet_swigconstant(_GeomFill)
GeomFill_IsFrenet = _GeomFill.GeomFill_IsFrenet

_GeomFill.GeomFill_IsConstantNormal_swigconstant(_GeomFill)
GeomFill_IsConstantNormal = _GeomFill.GeomFill_IsConstantNormal

_GeomFill.GeomFill_IsDarboux_swigconstant(_GeomFill)
GeomFill_IsDarboux = _GeomFill.GeomFill_IsDarboux

_GeomFill.GeomFill_IsGuideAC_swigconstant(_GeomFill)
GeomFill_IsGuideAC = _GeomFill.GeomFill_IsGuideAC

_GeomFill.GeomFill_IsGuidePlan_swigconstant(_GeomFill)
GeomFill_IsGuidePlan = _GeomFill.GeomFill_IsGuidePlan

_GeomFill.GeomFill_IsGuideACWithContact_swigconstant(_GeomFill)
GeomFill_IsGuideACWithContact = _GeomFill.GeomFill_IsGuideACWithContact

_GeomFill.GeomFill_IsGuidePlanWithContact_swigconstant(_GeomFill)
GeomFill_IsGuidePlanWithContact = _GeomFill.GeomFill_IsGuidePlanWithContact

_GeomFill.GeomFill_IsDiscreteTrihedron_swigconstant(_GeomFill)
GeomFill_IsDiscreteTrihedron = _GeomFill.GeomFill_IsDiscreteTrihedron
class geomfill(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Surface(*args):
        """
        * Builds a ruled surface between the two curves, Curve1 and Curve2.

        :param Curve1:
        :type Curve1: Handle_Geom_Curve &
        :param Curve2:
        :type Curve2: Handle_Geom_Curve &
        :rtype: Handle_Geom_Surface

        """
        return _GeomFill.geomfill_Surface(*args)

    Surface = staticmethod(Surface)

    def GetCircle(*args):
        """
        :param TConv:
        :type TConv: Convert_ParameterisationType
        :param ns1:
        :type ns1: gp_Vec
        :param ns2:
        :type ns2: gp_Vec
        :param nplan:
        :type nplan: gp_Vec
        :param pt1:
        :type pt1: gp_Pnt
        :param pt2:
        :type pt2: gp_Pnt
        :param Rayon:
        :type Rayon: float
        :param Center:
        :type Center: gp_Pnt
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: void

        :param TConv:
        :type TConv: Convert_ParameterisationType
        :param ns1:
        :type ns1: gp_Vec
        :param ns2:
        :type ns2: gp_Vec
        :param dn1w:
        :type dn1w: gp_Vec
        :param dn2w:
        :type dn2w: gp_Vec
        :param nplan:
        :type nplan: gp_Vec
        :param dnplan:
        :type dnplan: gp_Vec
        :param pts1:
        :type pts1: gp_Pnt
        :param pts2:
        :type pts2: gp_Pnt
        :param tang1:
        :type tang1: gp_Vec
        :param tang2:
        :type tang2: gp_Vec
        :param Rayon:
        :type Rayon: float
        :param DRayon:
        :type DRayon: float
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        :param TConv:
        :type TConv: Convert_ParameterisationType
        :param ns1:
        :type ns1: gp_Vec
        :param ns2:
        :type ns2: gp_Vec
        :param dn1w:
        :type dn1w: gp_Vec
        :param dn2w:
        :type dn2w: gp_Vec
        :param d2n1w:
        :type d2n1w: gp_Vec
        :param d2n2w:
        :type d2n2w: gp_Vec
        :param nplan:
        :type nplan: gp_Vec
        :param dnplan:
        :type dnplan: gp_Vec
        :param d2nplan:
        :type d2nplan: gp_Vec
        :param pts1:
        :type pts1: gp_Pnt
        :param pts2:
        :type pts2: gp_Pnt
        :param tang1:
        :type tang1: gp_Vec
        :param tang2:
        :type tang2: gp_Vec
        :param Dtang1:
        :type Dtang1: gp_Vec
        :param Dtang2:
        :type Dtang2: gp_Vec
        :param Rayon:
        :type Rayon: float
        :param DRayon:
        :type DRayon: float
        :param D2Rayon:
        :type D2Rayon: float
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param D2Center:
        :type D2Center: gp_Vec
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _GeomFill.geomfill_GetCircle(*args)

    GetCircle = staticmethod(GetCircle)

    def GetShape(*args):
        """
        :param MaxAng:
        :type MaxAng: float
        :param NbPoles:
        :type NbPoles: int &
        :param NbKnots:
        :type NbKnots: int &
        :param Degree:
        :type Degree: int &
        :param TypeConv:
        :type TypeConv: Convert_ParameterisationType &
        :rtype: void

        """
        return _GeomFill.geomfill_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def Knots(*args):
        """
        :param TypeConv:
        :type TypeConv: Convert_ParameterisationType
        :param TKnots:
        :type TKnots: TColStd_Array1OfReal &
        :rtype: void

        """
        return _GeomFill.geomfill_Knots(*args)

    Knots = staticmethod(Knots)

    def Mults(*args):
        """
        :param TypeConv:
        :type TypeConv: Convert_ParameterisationType
        :param TMults:
        :type TMults: TColStd_Array1OfInteger &
        :rtype: void

        """
        return _GeomFill.geomfill_Mults(*args)

    Mults = staticmethod(Mults)

    def GetMinimalWeights(*args):
        """
        :param TConv:
        :type TConv: Convert_ParameterisationType
        :param AngleMin:
        :type AngleMin: float
        :param AngleMax:
        :type AngleMax: float
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: void

        """
        return _GeomFill.geomfill_GetMinimalWeights(*args)

    GetMinimalWeights = staticmethod(GetMinimalWeights)

    def GetTolerance(*args):
        """
        * Used by the generical classes to determine Tolerance for approximation

        :param TConv:
        :type TConv: Convert_ParameterisationType
        :param AngleMin:
        :type AngleMin: float
        :param Radius:
        :type Radius: float
        :param AngularTol:
        :type AngularTol: float
        :param SpatialTol:
        :type SpatialTol: float
        :rtype: float

        """
        return _GeomFill.geomfill_GetTolerance(*args)

    GetTolerance = staticmethod(GetTolerance)

    def __init__(self):
        _GeomFill.geomfill_swiginit(self, _GeomFill.new_geomfill())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


geomfill._kill_pointed = new_instancemethod(_GeomFill.geomfill__kill_pointed, None, geomfill)
geomfill_swigregister = _GeomFill.geomfill_swigregister
geomfill_swigregister(geomfill)

def geomfill_Surface(*args):
    """
    * Builds a ruled surface between the two curves, Curve1 and Curve2.

    :param Curve1:
    :type Curve1: Handle_Geom_Curve &
    :param Curve2:
    :type Curve2: Handle_Geom_Curve &
    :rtype: Handle_Geom_Surface

    """
    return _GeomFill.geomfill_Surface(*args)

def geomfill_GetCircle(*args):
    """
    :param TConv:
    :type TConv: Convert_ParameterisationType
    :param ns1:
    :type ns1: gp_Vec
    :param ns2:
    :type ns2: gp_Vec
    :param nplan:
    :type nplan: gp_Vec
    :param pt1:
    :type pt1: gp_Pnt
    :param pt2:
    :type pt2: gp_Pnt
    :param Rayon:
    :type Rayon: float
    :param Center:
    :type Center: gp_Pnt
    :param Poles:
    :type Poles: TColgp_Array1OfPnt
    :param Weigths:
    :type Weigths: TColStd_Array1OfReal &
    :rtype: void

    :param TConv:
    :type TConv: Convert_ParameterisationType
    :param ns1:
    :type ns1: gp_Vec
    :param ns2:
    :type ns2: gp_Vec
    :param dn1w:
    :type dn1w: gp_Vec
    :param dn2w:
    :type dn2w: gp_Vec
    :param nplan:
    :type nplan: gp_Vec
    :param dnplan:
    :type dnplan: gp_Vec
    :param pts1:
    :type pts1: gp_Pnt
    :param pts2:
    :type pts2: gp_Pnt
    :param tang1:
    :type tang1: gp_Vec
    :param tang2:
    :type tang2: gp_Vec
    :param Rayon:
    :type Rayon: float
    :param DRayon:
    :type DRayon: float
    :param Center:
    :type Center: gp_Pnt
    :param DCenter:
    :type DCenter: gp_Vec
    :param Poles:
    :type Poles: TColgp_Array1OfPnt
    :param DPoles:
    :type DPoles: TColgp_Array1OfVec
    :param Weigths:
    :type Weigths: TColStd_Array1OfReal &
    :param DWeigths:
    :type DWeigths: TColStd_Array1OfReal &
    :rtype: bool

    :param TConv:
    :type TConv: Convert_ParameterisationType
    :param ns1:
    :type ns1: gp_Vec
    :param ns2:
    :type ns2: gp_Vec
    :param dn1w:
    :type dn1w: gp_Vec
    :param dn2w:
    :type dn2w: gp_Vec
    :param d2n1w:
    :type d2n1w: gp_Vec
    :param d2n2w:
    :type d2n2w: gp_Vec
    :param nplan:
    :type nplan: gp_Vec
    :param dnplan:
    :type dnplan: gp_Vec
    :param d2nplan:
    :type d2nplan: gp_Vec
    :param pts1:
    :type pts1: gp_Pnt
    :param pts2:
    :type pts2: gp_Pnt
    :param tang1:
    :type tang1: gp_Vec
    :param tang2:
    :type tang2: gp_Vec
    :param Dtang1:
    :type Dtang1: gp_Vec
    :param Dtang2:
    :type Dtang2: gp_Vec
    :param Rayon:
    :type Rayon: float
    :param DRayon:
    :type DRayon: float
    :param D2Rayon:
    :type D2Rayon: float
    :param Center:
    :type Center: gp_Pnt
    :param DCenter:
    :type DCenter: gp_Vec
    :param D2Center:
    :type D2Center: gp_Vec
    :param Poles:
    :type Poles: TColgp_Array1OfPnt
    :param DPoles:
    :type DPoles: TColgp_Array1OfVec
    :param D2Poles:
    :type D2Poles: TColgp_Array1OfVec
    :param Weigths:
    :type Weigths: TColStd_Array1OfReal &
    :param DWeigths:
    :type DWeigths: TColStd_Array1OfReal &
    :param D2Weigths:
    :type D2Weigths: TColStd_Array1OfReal &
    :rtype: bool

    """
    return _GeomFill.geomfill_GetCircle(*args)

def geomfill_GetShape(*args):
    """
    :param MaxAng:
    :type MaxAng: float
    :param NbPoles:
    :type NbPoles: int &
    :param NbKnots:
    :type NbKnots: int &
    :param Degree:
    :type Degree: int &
    :param TypeConv:
    :type TypeConv: Convert_ParameterisationType &
    :rtype: void

    """
    return _GeomFill.geomfill_GetShape(*args)

def geomfill_Knots(*args):
    """
    :param TypeConv:
    :type TypeConv: Convert_ParameterisationType
    :param TKnots:
    :type TKnots: TColStd_Array1OfReal &
    :rtype: void

    """
    return _GeomFill.geomfill_Knots(*args)

def geomfill_Mults(*args):
    """
    :param TypeConv:
    :type TypeConv: Convert_ParameterisationType
    :param TMults:
    :type TMults: TColStd_Array1OfInteger &
    :rtype: void

    """
    return _GeomFill.geomfill_Mults(*args)

def geomfill_GetMinimalWeights(*args):
    """
    :param TConv:
    :type TConv: Convert_ParameterisationType
    :param AngleMin:
    :type AngleMin: float
    :param AngleMax:
    :type AngleMax: float
    :param Weigths:
    :type Weigths: TColStd_Array1OfReal &
    :rtype: void

    """
    return _GeomFill.geomfill_GetMinimalWeights(*args)

def geomfill_GetTolerance(*args):
    """
    * Used by the generical classes to determine Tolerance for approximation

    :param TConv:
    :type TConv: Convert_ParameterisationType
    :param AngleMin:
    :type AngleMin: float
    :param Radius:
    :type Radius: float
    :param AngularTol:
    :type AngularTol: float
    :param SpatialTol:
    :type SpatialTol: float
    :rtype: float

    """
    return _GeomFill.geomfill_GetTolerance(*args)

class GeomFill_AppSurf(OCC.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        _GeomFill.GeomFill_AppSurf_swiginit(self, _GeomFill.new_GeomFill_AppSurf(*args))

    def Init(self, *args):
        """
        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_Init(self, *args)


    def SetParType(self, *args):
        """
        :param ParType:
        :type ParType: Approx_ParametrizationType
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_SetParType(self, *args)


    def SetContinuity(self, *args):
        """
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_SetContinuity(self, *args)


    def SetCriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float
        :param W2:
        :type W2: float
        :param W3:
        :type W3: float
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_SetCriteriumWeight(self, *args)


    def ParType(self, *args):
        """
        :rtype: Approx_ParametrizationType

        """
        return _GeomFill.GeomFill_AppSurf_ParType(self, *args)


    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _GeomFill.GeomFill_AppSurf_Continuity(self, *args)


    def CriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float &
        :param W2:
        :type W2: float &
        :param W3:
        :type W3: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_CriteriumWeight(self, *args)


    def PerformSmoothing(self, *args):
        """
        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SectionGenerator &
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_PerformSmoothing(self, *args)


    def Perform(self, *args):
        """
        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SectionGenerator &
        :param SpApprox: default value is Standard_False
        :type SpApprox: bool
        :rtype: None

        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SectionGenerator &
        :param NbMaxP:
        :type NbMaxP: int
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSurf_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_AppSurf.Init = new_instancemethod(_GeomFill.GeomFill_AppSurf_Init, None, GeomFill_AppSurf)
GeomFill_AppSurf.SetParType = new_instancemethod(_GeomFill.GeomFill_AppSurf_SetParType, None, GeomFill_AppSurf)
GeomFill_AppSurf.SetContinuity = new_instancemethod(_GeomFill.GeomFill_AppSurf_SetContinuity, None, GeomFill_AppSurf)
GeomFill_AppSurf.SetCriteriumWeight = new_instancemethod(_GeomFill.GeomFill_AppSurf_SetCriteriumWeight, None, GeomFill_AppSurf)
GeomFill_AppSurf.ParType = new_instancemethod(_GeomFill.GeomFill_AppSurf_ParType, None, GeomFill_AppSurf)
GeomFill_AppSurf.Continuity = new_instancemethod(_GeomFill.GeomFill_AppSurf_Continuity, None, GeomFill_AppSurf)
GeomFill_AppSurf.CriteriumWeight = new_instancemethod(_GeomFill.GeomFill_AppSurf_CriteriumWeight, None, GeomFill_AppSurf)
GeomFill_AppSurf.PerformSmoothing = new_instancemethod(_GeomFill.GeomFill_AppSurf_PerformSmoothing, None, GeomFill_AppSurf)
GeomFill_AppSurf.Perform = new_instancemethod(_GeomFill.GeomFill_AppSurf_Perform, None, GeomFill_AppSurf)
GeomFill_AppSurf._kill_pointed = new_instancemethod(_GeomFill.GeomFill_AppSurf__kill_pointed, None, GeomFill_AppSurf)
GeomFill_AppSurf_swigregister = _GeomFill.GeomFill_AppSurf_swigregister
GeomFill_AppSurf_swigregister(GeomFill_AppSurf)

class GeomFill_AppSweep(OCC.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        _GeomFill.GeomFill_AppSweep_swiginit(self, _GeomFill.new_GeomFill_AppSweep(*args))

    def Init(self, *args):
        """
        :param Degmin:
        :type Degmin: int
        :param Degmax:
        :type Degmax: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIt:
        :type NbIt: int
        :param KnownParameters: default value is Standard_False
        :type KnownParameters: bool
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_Init(self, *args)


    def SetParType(self, *args):
        """
        :param ParType:
        :type ParType: Approx_ParametrizationType
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_SetParType(self, *args)


    def SetContinuity(self, *args):
        """
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_SetContinuity(self, *args)


    def SetCriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float
        :param W2:
        :type W2: float
        :param W3:
        :type W3: float
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_SetCriteriumWeight(self, *args)


    def ParType(self, *args):
        """
        :rtype: Approx_ParametrizationType

        """
        return _GeomFill.GeomFill_AppSweep_ParType(self, *args)


    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        """
        return _GeomFill.GeomFill_AppSweep_Continuity(self, *args)


    def CriteriumWeight(self, *args):
        """
        :param W1:
        :type W1: float &
        :param W2:
        :type W2: float &
        :param W3:
        :type W3: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_CriteriumWeight(self, *args)


    def PerformSmoothing(self, *args):
        """
        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SweepSectionGenerator &
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_PerformSmoothing(self, *args)


    def Perform(self, *args):
        """
        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SweepSectionGenerator &
        :param SpApprox: default value is Standard_False
        :type SpApprox: bool
        :rtype: None

        :param Lin:
        :type Lin: Handle_GeomFill_Line &
        :param SecGen:
        :type SecGen: GeomFill_SweepSectionGenerator &
        :param NbMaxP:
        :type NbMaxP: int
        :rtype: None

        """
        return _GeomFill.GeomFill_AppSweep_Perform(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_AppSweep.Init = new_instancemethod(_GeomFill.GeomFill_AppSweep_Init, None, GeomFill_AppSweep)
GeomFill_AppSweep.SetParType = new_instancemethod(_GeomFill.GeomFill_AppSweep_SetParType, None, GeomFill_AppSweep)
GeomFill_AppSweep.SetContinuity = new_instancemethod(_GeomFill.GeomFill_AppSweep_SetContinuity, None, GeomFill_AppSweep)
GeomFill_AppSweep.SetCriteriumWeight = new_instancemethod(_GeomFill.GeomFill_AppSweep_SetCriteriumWeight, None, GeomFill_AppSweep)
GeomFill_AppSweep.ParType = new_instancemethod(_GeomFill.GeomFill_AppSweep_ParType, None, GeomFill_AppSweep)
GeomFill_AppSweep.Continuity = new_instancemethod(_GeomFill.GeomFill_AppSweep_Continuity, None, GeomFill_AppSweep)
GeomFill_AppSweep.CriteriumWeight = new_instancemethod(_GeomFill.GeomFill_AppSweep_CriteriumWeight, None, GeomFill_AppSweep)
GeomFill_AppSweep.PerformSmoothing = new_instancemethod(_GeomFill.GeomFill_AppSweep_PerformSmoothing, None, GeomFill_AppSweep)
GeomFill_AppSweep.Perform = new_instancemethod(_GeomFill.GeomFill_AppSweep_Perform, None, GeomFill_AppSweep)
GeomFill_AppSweep._kill_pointed = new_instancemethod(_GeomFill.GeomFill_AppSweep__kill_pointed, None, GeomFill_AppSweep)
GeomFill_AppSweep_swigregister = _GeomFill.GeomFill_AppSweep_swigregister
GeomFill_AppSweep_swigregister(GeomFill_AppSweep)

class GeomFill_Array1OfLocationLaw(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_GeomFill_LocationLaw &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _GeomFill.GeomFill_Array1OfLocationLaw_swiginit(self, _GeomFill.new_GeomFill_Array1OfLocationLaw(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: GeomFill_Array1OfLocationLaw &
        :rtype: GeomFill_Array1OfLocationLaw

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: GeomFill_Array1OfLocationLaw &
        :rtype: GeomFill_Array1OfLocationLaw

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _GeomFill.GeomFill_Array1OfLocationLaw_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Array1OfLocationLaw.Init = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Init, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Destroy = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Destroy, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.IsAllocated = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_IsAllocated, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Assign = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Assign, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Set = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Set, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Length = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Length, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Lower = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Lower, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Upper = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Upper, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.SetValue = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_SetValue, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.Value = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_Value, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw.ChangeValue = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw_ChangeValue, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Array1OfLocationLaw__kill_pointed, None, GeomFill_Array1OfLocationLaw)
GeomFill_Array1OfLocationLaw_swigregister = _GeomFill.GeomFill_Array1OfLocationLaw_swigregister
GeomFill_Array1OfLocationLaw_swigregister(GeomFill_Array1OfLocationLaw)

class GeomFill_Array1OfSectionLaw(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_GeomFill_SectionLaw &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _GeomFill.GeomFill_Array1OfSectionLaw_swiginit(self, _GeomFill.new_GeomFill_Array1OfSectionLaw(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_GeomFill_SectionLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: GeomFill_Array1OfSectionLaw &
        :rtype: GeomFill_Array1OfSectionLaw

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: GeomFill_Array1OfSectionLaw &
        :rtype: GeomFill_Array1OfSectionLaw

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_GeomFill_SectionLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _GeomFill.GeomFill_Array1OfSectionLaw_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Array1OfSectionLaw.Init = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Init, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Destroy = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Destroy, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.IsAllocated = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_IsAllocated, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Assign = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Assign, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Set = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Set, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Length = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Length, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Lower = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Lower, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Upper = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Upper, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.SetValue = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_SetValue, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.Value = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_Value, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw.ChangeValue = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw_ChangeValue, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Array1OfSectionLaw__kill_pointed, None, GeomFill_Array1OfSectionLaw)
GeomFill_Array1OfSectionLaw_swigregister = _GeomFill.GeomFill_Array1OfSectionLaw_swigregister
GeomFill_Array1OfSectionLaw_swigregister(GeomFill_Array1OfSectionLaw)

class GeomFill_BSplineCurves(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a default BSpline surface framework.

        :rtype: None

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param C3:
        :type C3: Handle_Geom_BSplineCurve &
        :param C4:
        :type C4: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param C3:
        :type C3: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * Constructs a framework for building a BSpline surface from either - the four contiguous BSpline curves, C1, C2, C3 and C4, or - the three contiguous BSpline curves, C1, C2 and C3, or - the two contiguous BSpline curves, C1 and C2. The type of filling style Type to be used is one of: - GeomFill_Stretch - the style with the flattest patch - GeomFill_Coons - a rounded style of patch with less depth than that of Curved - GeomFill_Curved - the style with the most rounded patch.Constructs a framework for building a BSpline surface common to the two BSpline curves, C1 and C2. Exceptions Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        """
        _GeomFill.GeomFill_BSplineCurves_swiginit(self, _GeomFill.new_GeomFill_BSplineCurves(*args))

    def Init(self, *args):
        """
        * if the curves cannot be joined

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param C3:
        :type C3: Handle_Geom_BSplineCurve &
        :param C4:
        :type C4: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * if the curves cannot be joined

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param C3:
        :type C3: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * Initializes or reinitializes this algorithm with two, three, or four curves - C1, C2, C3, and C4 - and Type, one of the following filling styles: - GeomFill_Stretch - the style with the flattest patch - GeomFill_Coons - a rounded style of patch with less depth than that of Curved - GeomFill_Curved - the style with the most rounded patch. Exceptions Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BSplineCurve &
        :param C2:
        :type C2: Handle_Geom_BSplineCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        """
        return _GeomFill.GeomFill_BSplineCurves_Init(self, *args)


    def Surface(self, *args):
        """
        * Returns the BSpline surface Surface resulting from the computation performed by this algorithm.

        :rtype: Handle_Geom_BSplineSurface

        """
        return _GeomFill.GeomFill_BSplineCurves_Surface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_BSplineCurves.Init = new_instancemethod(_GeomFill.GeomFill_BSplineCurves_Init, None, GeomFill_BSplineCurves)
GeomFill_BSplineCurves.Surface = new_instancemethod(_GeomFill.GeomFill_BSplineCurves_Surface, None, GeomFill_BSplineCurves)
GeomFill_BSplineCurves._kill_pointed = new_instancemethod(_GeomFill.GeomFill_BSplineCurves__kill_pointed, None, GeomFill_BSplineCurves)
GeomFill_BSplineCurves_swigregister = _GeomFill.GeomFill_BSplineCurves_swigregister
GeomFill_BSplineCurves_swigregister(GeomFill_BSplineCurves)

class GeomFill_BezierCurves(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework for building a Bezier surface from contiguous Bezier curves. You use the Init function to define the boundaries of the surface.

        :rtype: None

        * Constructs a framework for building a Bezier surface from the four contiguous Bezier curves, C1, C2, C3 and C4 Raises Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param C3:
        :type C3: Handle_Geom_BezierCurve &
        :param C4:
        :type C4: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * Constructs a framework for building a Bezier surface from the three contiguous Bezier curves, C1, C2 and C3 Raises Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param C3:
        :type C3: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * Constructs a framework for building a Bezier surface from the two contiguous Bezier curves, C1 and C2 Raises Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        """
        _GeomFill.GeomFill_BezierCurves_swiginit(self, _GeomFill.new_GeomFill_BezierCurves(*args))

    def Init(self, *args):
        """
        * if the curves cannot be joined

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param C3:
        :type C3: Handle_Geom_BezierCurve &
        :param C4:
        :type C4: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * if the curves cannot be joined

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param C3:
        :type C3: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        * Initializes or reinitializes this algorithm with two, three, or four curves - C1, C2, C3, and C4 - and Type, one of the following filling styles: - GeomFill_Stretch - the style with the flattest patch - GeomFill_Coons - a rounded style of patch with less depth than that of Curved - GeomFill_Curved - the style with the most rounded patch. Exceptions Standard_ConstructionError if the curves are not contiguous.

        :param C1:
        :type C1: Handle_Geom_BezierCurve &
        :param C2:
        :type C2: Handle_Geom_BezierCurve &
        :param Type:
        :type Type: GeomFill_FillingStyle
        :rtype: None

        """
        return _GeomFill.GeomFill_BezierCurves_Init(self, *args)


    def Surface(self, *args):
        """
        * Returns the Bezier surface resulting from the computation performed by this algorithm.

        :rtype: Handle_Geom_BezierSurface

        """
        return _GeomFill.GeomFill_BezierCurves_Surface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_BezierCurves.Init = new_instancemethod(_GeomFill.GeomFill_BezierCurves_Init, None, GeomFill_BezierCurves)
GeomFill_BezierCurves.Surface = new_instancemethod(_GeomFill.GeomFill_BezierCurves_Surface, None, GeomFill_BezierCurves)
GeomFill_BezierCurves._kill_pointed = new_instancemethod(_GeomFill.GeomFill_BezierCurves__kill_pointed, None, GeomFill_BezierCurves)
GeomFill_BezierCurves_swigregister = _GeomFill.GeomFill_BezierCurves_swigregister
GeomFill_BezierCurves_swigregister(GeomFill_BezierCurves)

class GeomFill_Boundary(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Value(self, *args):
        """
        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _GeomFill.GeomFill_Boundary_Value(self, *args)


    def D1(self, *args):
        """
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: void

        """
        return _GeomFill.GeomFill_Boundary_D1(self, *args)


    def HasNormals(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Boundary_HasNormals(self, *args)


    def Norm(self, *args):
        """
        :param U:
        :type U: float
        :rtype: gp_Vec

        """
        return _GeomFill.GeomFill_Boundary_Norm(self, *args)


    def D1Norm(self, *args):
        """
        :param U:
        :type U: float
        :param N:
        :type N: gp_Vec
        :param DN:
        :type DN: gp_Vec
        :rtype: void

        """
        return _GeomFill.GeomFill_Boundary_D1Norm(self, *args)


    def Reparametrize(self, *args):
        """
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param HasDF:
        :type HasDF: bool
        :param HasDL:
        :type HasDL: bool
        :param DF:
        :type DF: float
        :param DL:
        :type DL: float
        :param Rev:
        :type Rev: bool
        :rtype: void

        """
        return _GeomFill.GeomFill_Boundary_Reparametrize(self, *args)


    def Points(self, *args):
        """
        :param PFirst:
        :type PFirst: gp_Pnt
        :param PLast:
        :type PLast: gp_Pnt
        :rtype: None

        """
        return _GeomFill.GeomFill_Boundary_Points(self, *args)


    def Bounds(self, *args):
        """
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_Boundary_Bounds(self, *args)


    def IsDegenerated(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Boundary_IsDegenerated(self, *args)


    def Tol3d(self, *args):
        """
        :rtype: float

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _GeomFill.GeomFill_Boundary_Tol3d(self, *args)


    def Tolang(self, *args):
        """
        :rtype: float

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _GeomFill.GeomFill_Boundary_Tolang(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_Boundary self)"""
        return _GeomFill.GeomFill_Boundary__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_Boundary self) -> Handle_GeomFill_Boundary"""
        return _GeomFill.GeomFill_Boundary_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Boundary.Value = new_instancemethod(_GeomFill.GeomFill_Boundary_Value, None, GeomFill_Boundary)
GeomFill_Boundary.D1 = new_instancemethod(_GeomFill.GeomFill_Boundary_D1, None, GeomFill_Boundary)
GeomFill_Boundary.HasNormals = new_instancemethod(_GeomFill.GeomFill_Boundary_HasNormals, None, GeomFill_Boundary)
GeomFill_Boundary.Norm = new_instancemethod(_GeomFill.GeomFill_Boundary_Norm, None, GeomFill_Boundary)
GeomFill_Boundary.D1Norm = new_instancemethod(_GeomFill.GeomFill_Boundary_D1Norm, None, GeomFill_Boundary)
GeomFill_Boundary.Reparametrize = new_instancemethod(_GeomFill.GeomFill_Boundary_Reparametrize, None, GeomFill_Boundary)
GeomFill_Boundary.Points = new_instancemethod(_GeomFill.GeomFill_Boundary_Points, None, GeomFill_Boundary)
GeomFill_Boundary.Bounds = new_instancemethod(_GeomFill.GeomFill_Boundary_Bounds, None, GeomFill_Boundary)
GeomFill_Boundary.IsDegenerated = new_instancemethod(_GeomFill.GeomFill_Boundary_IsDegenerated, None, GeomFill_Boundary)
GeomFill_Boundary.Tol3d = new_instancemethod(_GeomFill.GeomFill_Boundary_Tol3d, None, GeomFill_Boundary)
GeomFill_Boundary.Tolang = new_instancemethod(_GeomFill.GeomFill_Boundary_Tolang, None, GeomFill_Boundary)
GeomFill_Boundary._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Boundary__kill_pointed, None, GeomFill_Boundary)
GeomFill_Boundary.GetHandle = new_instancemethod(_GeomFill.GeomFill_Boundary_GetHandle, None, GeomFill_Boundary)
GeomFill_Boundary_swigregister = _GeomFill.GeomFill_Boundary_swigregister
GeomFill_Boundary_swigregister(GeomFill_Boundary)

class Handle_GeomFill_Boundary(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_Boundary_swiginit(self, _GeomFill.new_Handle_GeomFill_Boundary(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_Boundary_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_Boundary.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_Boundary_Nullify, None, Handle_GeomFill_Boundary)
Handle_GeomFill_Boundary.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_Boundary_IsNull, None, Handle_GeomFill_Boundary)
Handle_GeomFill_Boundary.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_Boundary_GetObject, None, Handle_GeomFill_Boundary)
Handle_GeomFill_Boundary._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_Boundary__kill_pointed, None, Handle_GeomFill_Boundary)
Handle_GeomFill_Boundary_swigregister = _GeomFill.Handle_GeomFill_Boundary_swigregister
Handle_GeomFill_Boundary_swigregister(Handle_GeomFill_Boundary)

def Handle_GeomFill_Boundary_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_Boundary_DownCast(AnObject)
Handle_GeomFill_Boundary_DownCast = _GeomFill.Handle_GeomFill_Boundary_DownCast

class GeomFill_CircularBlendFunc(OCC.Approx.Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Blend with a constant radius with 2 guide-line. <FShape> sets the type of fillet surface. The -- default value is Convert_TgtThetaOver2 (classical -- nurbs -- representation of circles). ChFi3d_QuasiAngular -- corresponds to a nurbs representation of circles -- which parameterisation matches the circle one. -- ChFi3d_Polynomial corresponds to a polynomial -- representation of circles.

        :param Path:
        :type Path: Handle_Adaptor3d_HCurve &
        :param Curve1:
        :type Curve1: Handle_Adaptor3d_HCurve &
        :param Curve2:
        :type Curve2: Handle_Adaptor3d_HCurve &
        :param Radius:
        :type Radius: float
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :rtype: None

        """
        _GeomFill.GeomFill_CircularBlendFunc_swiginit(self, _GeomFill.new_GeomFill_CircularBlendFunc(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_CircularBlendFunc self)"""
        return _GeomFill.GeomFill_CircularBlendFunc__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_CircularBlendFunc self) -> Handle_GeomFill_CircularBlendFunc"""
        return _GeomFill.GeomFill_CircularBlendFunc_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_CircularBlendFunc._kill_pointed = new_instancemethod(_GeomFill.GeomFill_CircularBlendFunc__kill_pointed, None, GeomFill_CircularBlendFunc)
GeomFill_CircularBlendFunc.GetHandle = new_instancemethod(_GeomFill.GeomFill_CircularBlendFunc_GetHandle, None, GeomFill_CircularBlendFunc)
GeomFill_CircularBlendFunc_swigregister = _GeomFill.GeomFill_CircularBlendFunc_swigregister
GeomFill_CircularBlendFunc_swigregister(GeomFill_CircularBlendFunc)

class Handle_GeomFill_CircularBlendFunc(OCC.Approx.Handle_Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_CircularBlendFunc_swiginit(self, _GeomFill.new_Handle_GeomFill_CircularBlendFunc(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_CircularBlendFunc_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_CircularBlendFunc.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_CircularBlendFunc_Nullify, None, Handle_GeomFill_CircularBlendFunc)
Handle_GeomFill_CircularBlendFunc.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_CircularBlendFunc_IsNull, None, Handle_GeomFill_CircularBlendFunc)
Handle_GeomFill_CircularBlendFunc.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_CircularBlendFunc_GetObject, None, Handle_GeomFill_CircularBlendFunc)
Handle_GeomFill_CircularBlendFunc._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_CircularBlendFunc__kill_pointed, None, Handle_GeomFill_CircularBlendFunc)
Handle_GeomFill_CircularBlendFunc_swigregister = _GeomFill.Handle_GeomFill_CircularBlendFunc_swigregister
Handle_GeomFill_CircularBlendFunc_swigregister(Handle_GeomFill_CircularBlendFunc)

def Handle_GeomFill_CircularBlendFunc_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_CircularBlendFunc_DownCast(AnObject)
Handle_GeomFill_CircularBlendFunc_DownCast = _GeomFill.Handle_GeomFill_CircularBlendFunc_DownCast

class GeomFill_ConstrainedFilling(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework for filling a surface from boundaries. The boundaries of the surface will be defined, and the surface will be built by using the function Init. The surface will respect the following constraints: - its degree will not be greater than MaxDeg - the maximum number of segments MaxSeg which BSpline surfaces can have.

        :param MaxDeg:
        :type MaxDeg: int
        :param MaxSeg:
        :type MaxSeg: int
        :rtype: None

        """
        _GeomFill.GeomFill_ConstrainedFilling_swiginit(self, _GeomFill.new_GeomFill_ConstrainedFilling(*args))

    def Init(self, *args):
        """
        :param B1:
        :type B1: Handle_GeomFill_Boundary &
        :param B2:
        :type B2: Handle_GeomFill_Boundary &
        :param B3:
        :type B3: Handle_GeomFill_Boundary &
        :param NoCheck: default value is Standard_False
        :type NoCheck: bool
        :rtype: None

        * Constructs a BSpline surface filled from the series of boundaries B1, B2, B3 and, if need be, B4, which serve: - as path constraints - and optionally, as tangency constraints if they are GeomFill_BoundWithSurf curves. The boundaries may be given in any order: they are classified and if necessary, reversed and reparameterized. The surface will also respect the following constraints: - its degree will not be greater than the maximum degree defined at the time of construction of this framework, and - the maximum number of segments MaxSeg which BSpline surfaces can have

        :param B1:
        :type B1: Handle_GeomFill_Boundary &
        :param B2:
        :type B2: Handle_GeomFill_Boundary &
        :param B3:
        :type B3: Handle_GeomFill_Boundary &
        :param B4:
        :type B4: Handle_GeomFill_Boundary &
        :param NoCheck: default value is Standard_False
        :type NoCheck: bool
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_Init(self, *args)


    def SetDomain(self, *args):
        """
        * Allows to modify domain on witch the blending function associated to the constrained boundary B will propag the influence of the field of tangency. Can be usefull to reduce influence of boundaries on whitch the Coons compatibility conditions are not respected. l is a relative value of the parametric range of B. Default value for l is 1 (used in Init). Warning: Must be called after Init with a constrained boundary used in the call to Init.

        :param l:
        :type l: float
        :param B:
        :type B: Handle_GeomFill_BoundWithSurf &
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_SetDomain(self, *args)


    def ReBuild(self, *args):
        """
        * Computes the new poles of the surface using the new blending functions set by several calls to SetDomain.

        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_ReBuild(self, *args)


    def Boundary(self, *args):
        """
        * Returns the bound of index i after sort.

        :param I:
        :type I: int
        :rtype: Handle_GeomFill_Boundary

        """
        return _GeomFill.GeomFill_ConstrainedFilling_Boundary(self, *args)


    def Surface(self, *args):
        """
        * Returns the BSpline surface after computation of the fill by this framework.

        :rtype: Handle_Geom_BSplineSurface

        """
        return _GeomFill.GeomFill_ConstrainedFilling_Surface(self, *args)


    def Eval(self, *args):
        """
        * Internal use for Advmath approximation call.

        :param W:
        :type W: float
        :param Ord:
        :type Ord: int
        :param Result:
        :type Result: float &
        :rtype: int

        """
        return _GeomFill.GeomFill_ConstrainedFilling_Eval(self, *args)


    def CheckCoonsAlgPatch(self, *args):
        """
        * Computes the fields of tangents on 30 points along the bound I, these are not the constraint tangents but gives an idea of the coonsAlgPatch regularity.

        :param I:
        :type I: int
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_CheckCoonsAlgPatch(self, *args)


    def CheckTgteField(self, *args):
        """
        * Computes the fields of tangents and normals on 30 points along the bound I, draw them, and computes the max dot product that must be near than 0.

        :param I:
        :type I: int
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_CheckTgteField(self, *args)


    def CheckApprox(self, *args):
        """
        * Computes values and normals along the bound I and compare them to the approx result curves (bound and tgte field) , draw the normals and tangents.

        :param I:
        :type I: int
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_CheckApprox(self, *args)


    def CheckResult(self, *args):
        """
        * Computes values and normals along the bound I on both constraint surface and result surface, draw the normals, and computes the max distance between values and the max angle between normals.

        :param I:
        :type I: int
        :rtype: None

        """
        return _GeomFill.GeomFill_ConstrainedFilling_CheckResult(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_ConstrainedFilling.Init = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_Init, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.SetDomain = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_SetDomain, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.ReBuild = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_ReBuild, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.Boundary = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_Boundary, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.Surface = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_Surface, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.Eval = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_Eval, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.CheckCoonsAlgPatch = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_CheckCoonsAlgPatch, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.CheckTgteField = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_CheckTgteField, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.CheckApprox = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_CheckApprox, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling.CheckResult = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling_CheckResult, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling._kill_pointed = new_instancemethod(_GeomFill.GeomFill_ConstrainedFilling__kill_pointed, None, GeomFill_ConstrainedFilling)
GeomFill_ConstrainedFilling_swigregister = _GeomFill.GeomFill_ConstrainedFilling_swigregister
GeomFill_ConstrainedFilling_swigregister(GeomFill_ConstrainedFilling)

class GeomFill_CoonsAlgPatch(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the algorithmic patch. By Default the constructed blending functions are linear. Warning: No control is done on the bounds. B1/B3 and B2/B4 must be same range and well oriented.

        :param B1:
        :type B1: Handle_GeomFill_Boundary &
        :param B2:
        :type B2: Handle_GeomFill_Boundary &
        :param B3:
        :type B3: Handle_GeomFill_Boundary &
        :param B4:
        :type B4: Handle_GeomFill_Boundary &
        :rtype: None

        """
        _GeomFill.GeomFill_CoonsAlgPatch_swiginit(self, _GeomFill.new_GeomFill_CoonsAlgPatch(*args))

    def SetFunc(self, *args):
        """
        * Set the blending functions.

        :param f1:
        :type f1: Handle_Law_Function &
        :param f2:
        :type f2: Handle_Law_Function &
        :rtype: None

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_SetFunc(self, *args)


    def Value(self, *args):
        """
        * Computes the value on the algorithmic patch at parameters U and V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Pnt

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_Value(self, *args)


    def D1U(self, *args):
        """
        * Computes the d/dU partial derivative on the algorithmic patch at parameters U and V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Vec

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_D1U(self, *args)


    def D1V(self, *args):
        """
        * Computes the d/dV partial derivative on the algorithmic patch at parameters U and V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Vec

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_D1V(self, *args)


    def DUV(self, *args):
        """
        * Computes the d2/dUdV partial derivative on the algorithmic patch made with linear blending functions at parameter U and V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Vec

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_DUV(self, *args)


    def Corner(self, *args):
        """
        :param I:
        :type I: int
        :rtype: gp_Pnt

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_Corner(self, *args)


    def Bound(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Handle_GeomFill_Boundary

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_Bound(self, *args)


    def Func(self, *args):
        """
        * Give the blending functions.

        :param f1:
        :type f1: Handle_Law_Function &
        :param f2:
        :type f2: Handle_Law_Function &
        :rtype: None

        :param I:
        :type I: int
        :rtype: Handle_Law_Function

        """
        return _GeomFill.GeomFill_CoonsAlgPatch_Func(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_CoonsAlgPatch self)"""
        return _GeomFill.GeomFill_CoonsAlgPatch__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_CoonsAlgPatch self) -> Handle_GeomFill_CoonsAlgPatch"""
        return _GeomFill.GeomFill_CoonsAlgPatch_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_CoonsAlgPatch.SetFunc = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_SetFunc, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.Value = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_Value, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.D1U = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_D1U, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.D1V = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_D1V, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.DUV = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_DUV, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.Corner = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_Corner, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.Bound = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_Bound, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.Func = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_Func, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch._kill_pointed = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch__kill_pointed, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch.GetHandle = new_instancemethod(_GeomFill.GeomFill_CoonsAlgPatch_GetHandle, None, GeomFill_CoonsAlgPatch)
GeomFill_CoonsAlgPatch_swigregister = _GeomFill.GeomFill_CoonsAlgPatch_swigregister
GeomFill_CoonsAlgPatch_swigregister(GeomFill_CoonsAlgPatch)

class Handle_GeomFill_CoonsAlgPatch(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_CoonsAlgPatch_swiginit(self, _GeomFill.new_Handle_GeomFill_CoonsAlgPatch(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_CoonsAlgPatch_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_CoonsAlgPatch.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_CoonsAlgPatch_Nullify, None, Handle_GeomFill_CoonsAlgPatch)
Handle_GeomFill_CoonsAlgPatch.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_CoonsAlgPatch_IsNull, None, Handle_GeomFill_CoonsAlgPatch)
Handle_GeomFill_CoonsAlgPatch.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_CoonsAlgPatch_GetObject, None, Handle_GeomFill_CoonsAlgPatch)
Handle_GeomFill_CoonsAlgPatch._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_CoonsAlgPatch__kill_pointed, None, Handle_GeomFill_CoonsAlgPatch)
Handle_GeomFill_CoonsAlgPatch_swigregister = _GeomFill.Handle_GeomFill_CoonsAlgPatch_swigregister
Handle_GeomFill_CoonsAlgPatch_swigregister(Handle_GeomFill_CoonsAlgPatch)

def Handle_GeomFill_CoonsAlgPatch_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_CoonsAlgPatch_DownCast(AnObject)
Handle_GeomFill_CoonsAlgPatch_DownCast = _GeomFill.Handle_GeomFill_CoonsAlgPatch_DownCast

class GeomFill_CornerState(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_CornerState_swiginit(self, _GeomFill.new_GeomFill_CornerState(*args))

    def Gap(self, *args):
        """
        :rtype: float

        :param G:
        :type G: float
        :rtype: None

        """
        return _GeomFill.GeomFill_CornerState_Gap(self, *args)


    def TgtAng(self, *args):
        """
        :rtype: float

        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _GeomFill.GeomFill_CornerState_TgtAng(self, *args)


    def HasConstraint(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_CornerState_HasConstraint(self, *args)


    def Constraint(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_CornerState_Constraint(self, *args)


    def NorAng(self, *args):
        """
        :rtype: float

        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _GeomFill.GeomFill_CornerState_NorAng(self, *args)


    def IsToKill(self, *args):
        """
        :param Scal:
        :type Scal: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_CornerState_IsToKill(self, *args)


    def DoKill(self, *args):
        """
        :param Scal:
        :type Scal: float
        :rtype: None

        """
        return _GeomFill.GeomFill_CornerState_DoKill(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_CornerState.Gap = new_instancemethod(_GeomFill.GeomFill_CornerState_Gap, None, GeomFill_CornerState)
GeomFill_CornerState.TgtAng = new_instancemethod(_GeomFill.GeomFill_CornerState_TgtAng, None, GeomFill_CornerState)
GeomFill_CornerState.HasConstraint = new_instancemethod(_GeomFill.GeomFill_CornerState_HasConstraint, None, GeomFill_CornerState)
GeomFill_CornerState.Constraint = new_instancemethod(_GeomFill.GeomFill_CornerState_Constraint, None, GeomFill_CornerState)
GeomFill_CornerState.NorAng = new_instancemethod(_GeomFill.GeomFill_CornerState_NorAng, None, GeomFill_CornerState)
GeomFill_CornerState.IsToKill = new_instancemethod(_GeomFill.GeomFill_CornerState_IsToKill, None, GeomFill_CornerState)
GeomFill_CornerState.DoKill = new_instancemethod(_GeomFill.GeomFill_CornerState_DoKill, None, GeomFill_CornerState)
GeomFill_CornerState._kill_pointed = new_instancemethod(_GeomFill.GeomFill_CornerState__kill_pointed, None, GeomFill_CornerState)
GeomFill_CornerState_swigregister = _GeomFill.GeomFill_CornerState_swigregister
GeomFill_CornerState_swigregister(GeomFill_CornerState)

class GeomFill_Filling(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_Filling_swiginit(self, _GeomFill.new_GeomFill_Filling(*args))

    def NbUPoles(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Filling_NbUPoles(self, *args)


    def NbVPoles(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Filling_NbVPoles(self, *args)


    def Poles(self, *args):
        """
        :param Poles:
        :type Poles: TColgp_Array2OfPnt
        :rtype: None

        """
        return _GeomFill.GeomFill_Filling_Poles(self, *args)


    def isRational(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Filling_isRational(self, *args)


    def Weights(self, *args):
        """
        :param Weights:
        :type Weights: TColStd_Array2OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_Filling_Weights(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Filling.NbUPoles = new_instancemethod(_GeomFill.GeomFill_Filling_NbUPoles, None, GeomFill_Filling)
GeomFill_Filling.NbVPoles = new_instancemethod(_GeomFill.GeomFill_Filling_NbVPoles, None, GeomFill_Filling)
GeomFill_Filling.Poles = new_instancemethod(_GeomFill.GeomFill_Filling_Poles, None, GeomFill_Filling)
GeomFill_Filling.isRational = new_instancemethod(_GeomFill.GeomFill_Filling_isRational, None, GeomFill_Filling)
GeomFill_Filling.Weights = new_instancemethod(_GeomFill.GeomFill_Filling_Weights, None, GeomFill_Filling)
GeomFill_Filling._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Filling__kill_pointed, None, GeomFill_Filling)
GeomFill_Filling_swigregister = _GeomFill.GeomFill_Filling_swigregister
GeomFill_Filling_swigregister(GeomFill_Filling)

class GeomFill_FunctionDraft(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _GeomFill.GeomFill_FunctionDraft_swiginit(self, _GeomFill.new_GeomFill_FunctionDraft(*args))

    def NbVariables(self, *args):
        """
        * returns the number of variables of the function.

        :rtype: int

        """
        return _GeomFill.GeomFill_FunctionDraft_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        * returns the number of equations of the function.

        :rtype: int

        """
        return _GeomFill.GeomFill_FunctionDraft_NbEquations(self, *args)


    def Value(self, *args):
        """
        * computes the values <F> of the Functions for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_Value(self, *args)


    def Derivatives(self, *args):
        """
        * returns the values <D> of the derivatives for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_Derivatives(self, *args)


    def Values(self, *args):
        """
        * returns the values <F> of the functions and the derivatives <D> for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_Values(self, *args)


    def DerivT(self, *args):
        """
        * returns the values <F> of the T derivatives for the parameter Param .

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param Param:
        :type Param: float
        :param W:
        :type W: float
        :param dN:
        :type dN: gp_Vec
        :param teta:
        :type teta: float
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_DerivT(self, *args)


    def Deriv2T(self, *args):
        """
        * returns the values <F> of the T2 derivatives for the parameter Param .

        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :param Param:
        :type Param: float
        :param W:
        :type W: float
        :param d2N:
        :type d2N: gp_Vec
        :param teta:
        :type teta: float
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_Deriv2T(self, *args)


    def DerivTX(self, *args):
        """
        * returns the values <D> of the TX derivatives for the parameter Param .

        :param dN:
        :type dN: gp_Vec
        :param teta:
        :type teta: float
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_DerivTX(self, *args)


    def Deriv2X(self, *args):
        """
        * returns the values <T> of the X2 derivatives for the parameter Param .

        :param X:
        :type X: math_Vector &
        :param T:
        :type T: GeomFill_Tensor &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionDraft_Deriv2X(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_FunctionDraft.NbVariables = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_NbVariables, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.NbEquations = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_NbEquations, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.Value = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_Value, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.Derivatives = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_Derivatives, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.Values = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_Values, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.DerivT = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_DerivT, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.Deriv2T = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_Deriv2T, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.DerivTX = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_DerivTX, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft.Deriv2X = new_instancemethod(_GeomFill.GeomFill_FunctionDraft_Deriv2X, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft._kill_pointed = new_instancemethod(_GeomFill.GeomFill_FunctionDraft__kill_pointed, None, GeomFill_FunctionDraft)
GeomFill_FunctionDraft_swigregister = _GeomFill.GeomFill_FunctionDraft_swigregister
GeomFill_FunctionDraft_swigregister(GeomFill_FunctionDraft)

class GeomFill_FunctionGuide(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        :type S: Handle_GeomFill_SectionLaw &
        :param Guide:
        :type Guide: Handle_Adaptor3d_HCurve &
        :param ParamOnLaw: default value is 0.0
        :type ParamOnLaw: float
        :rtype: None

        """
        _GeomFill.GeomFill_FunctionGuide_swiginit(self, _GeomFill.new_GeomFill_FunctionGuide(*args))

    def SetParam(self, *args):
        """
        :param Param:
        :type Param: float
        :param Centre:
        :type Centre: gp_Pnt
        :param Dir:
        :type Dir: gp_XYZ
        :param XDir:
        :type XDir: gp_XYZ
        :rtype: None

        """
        return _GeomFill.GeomFill_FunctionGuide_SetParam(self, *args)


    def NbVariables(self, *args):
        """
        * returns the number of variables of the function.

        :rtype: int

        """
        return _GeomFill.GeomFill_FunctionGuide_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        * returns the number of equations of the function.

        :rtype: int

        """
        return _GeomFill.GeomFill_FunctionGuide_NbEquations(self, *args)


    def Value(self, *args):
        """
        * computes the values <F> of the Functions for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionGuide_Value(self, *args)


    def Derivatives(self, *args):
        """
        * returns the values <D> of the derivatives for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionGuide_Derivatives(self, *args)


    def Values(self, *args):
        """
        * returns the values <F> of the functions and the derivatives <D> for the variable <X>. Returns True if the computation was done successfully, False otherwise.

        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionGuide_Values(self, *args)


    def DerivT(self, *args):
        """
        * returns the values <F> of the T derivatives for the parameter Param .

        :param X:
        :type X: math_Vector &
        :param DCentre:
        :type DCentre: gp_XYZ
        :param DDir:
        :type DDir: gp_XYZ
        :param DFDT:
        :type DFDT: math_Vector &
        :rtype: bool

        """
        return _GeomFill.GeomFill_FunctionGuide_DerivT(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_FunctionGuide.SetParam = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_SetParam, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.NbVariables = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_NbVariables, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.NbEquations = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_NbEquations, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.Value = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_Value, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.Derivatives = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_Derivatives, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.Values = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_Values, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide.DerivT = new_instancemethod(_GeomFill.GeomFill_FunctionGuide_DerivT, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide._kill_pointed = new_instancemethod(_GeomFill.GeomFill_FunctionGuide__kill_pointed, None, GeomFill_FunctionGuide)
GeomFill_FunctionGuide_swigregister = _GeomFill.GeomFill_FunctionGuide_swigregister
GeomFill_FunctionGuide_swigregister(GeomFill_FunctionGuide)

class GeomFill_HArray1OfLocationLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        _GeomFill.GeomFill_HArray1OfLocationLaw_swiginit(self, _GeomFill.new_GeomFill_HArray1OfLocationLaw(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: GeomFill_Array1OfLocationLaw

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: GeomFill_Array1OfLocationLaw

        """
        return _GeomFill.GeomFill_HArray1OfLocationLaw_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_HArray1OfLocationLaw self)"""
        return _GeomFill.GeomFill_HArray1OfLocationLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_HArray1OfLocationLaw self) -> Handle_GeomFill_HArray1OfLocationLaw"""
        return _GeomFill.GeomFill_HArray1OfLocationLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_HArray1OfLocationLaw.Init = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Init, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.Length = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Length, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.Lower = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Lower, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.Upper = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Upper, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.SetValue = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_SetValue, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.Value = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Value, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.ChangeValue = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_ChangeValue, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.Array1 = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_Array1, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.ChangeArray1 = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_ChangeArray1, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw__kill_pointed, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw.GetHandle = new_instancemethod(_GeomFill.GeomFill_HArray1OfLocationLaw_GetHandle, None, GeomFill_HArray1OfLocationLaw)
GeomFill_HArray1OfLocationLaw_swigregister = _GeomFill.GeomFill_HArray1OfLocationLaw_swigregister
GeomFill_HArray1OfLocationLaw_swigregister(GeomFill_HArray1OfLocationLaw)

class Handle_GeomFill_HArray1OfLocationLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_HArray1OfLocationLaw_swiginit(self, _GeomFill.new_Handle_GeomFill_HArray1OfLocationLaw(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_HArray1OfLocationLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_HArray1OfLocationLaw.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfLocationLaw_Nullify, None, Handle_GeomFill_HArray1OfLocationLaw)
Handle_GeomFill_HArray1OfLocationLaw.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfLocationLaw_IsNull, None, Handle_GeomFill_HArray1OfLocationLaw)
Handle_GeomFill_HArray1OfLocationLaw.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfLocationLaw_GetObject, None, Handle_GeomFill_HArray1OfLocationLaw)
Handle_GeomFill_HArray1OfLocationLaw._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfLocationLaw__kill_pointed, None, Handle_GeomFill_HArray1OfLocationLaw)
Handle_GeomFill_HArray1OfLocationLaw_swigregister = _GeomFill.Handle_GeomFill_HArray1OfLocationLaw_swigregister
Handle_GeomFill_HArray1OfLocationLaw_swigregister(Handle_GeomFill_HArray1OfLocationLaw)

def Handle_GeomFill_HArray1OfLocationLaw_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_HArray1OfLocationLaw_DownCast(AnObject)
Handle_GeomFill_HArray1OfLocationLaw_DownCast = _GeomFill.Handle_GeomFill_HArray1OfLocationLaw_DownCast

class GeomFill_HArray1OfSectionLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_GeomFill_SectionLaw &
        :rtype: None

        """
        _GeomFill.GeomFill_HArray1OfSectionLaw_swiginit(self, _GeomFill.new_GeomFill_HArray1OfSectionLaw(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Handle_GeomFill_SectionLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Init(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_GeomFill_SectionLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_GeomFill_SectionLaw

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_ChangeValue(self, *args)


    def Array1(self, *args):
        """
        :rtype: GeomFill_Array1OfSectionLaw

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_Array1(self, *args)


    def ChangeArray1(self, *args):
        """
        :rtype: GeomFill_Array1OfSectionLaw

        """
        return _GeomFill.GeomFill_HArray1OfSectionLaw_ChangeArray1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_HArray1OfSectionLaw self)"""
        return _GeomFill.GeomFill_HArray1OfSectionLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_HArray1OfSectionLaw self) -> Handle_GeomFill_HArray1OfSectionLaw"""
        return _GeomFill.GeomFill_HArray1OfSectionLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_HArray1OfSectionLaw.Init = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Init, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.Length = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Length, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.Lower = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Lower, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.Upper = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Upper, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.SetValue = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_SetValue, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.Value = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Value, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.ChangeValue = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_ChangeValue, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.Array1 = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_Array1, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.ChangeArray1 = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_ChangeArray1, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw__kill_pointed, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw.GetHandle = new_instancemethod(_GeomFill.GeomFill_HArray1OfSectionLaw_GetHandle, None, GeomFill_HArray1OfSectionLaw)
GeomFill_HArray1OfSectionLaw_swigregister = _GeomFill.GeomFill_HArray1OfSectionLaw_swigregister
GeomFill_HArray1OfSectionLaw_swigregister(GeomFill_HArray1OfSectionLaw)

class Handle_GeomFill_HArray1OfSectionLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_HArray1OfSectionLaw_swiginit(self, _GeomFill.new_Handle_GeomFill_HArray1OfSectionLaw(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_HArray1OfSectionLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_HArray1OfSectionLaw.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfSectionLaw_Nullify, None, Handle_GeomFill_HArray1OfSectionLaw)
Handle_GeomFill_HArray1OfSectionLaw.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfSectionLaw_IsNull, None, Handle_GeomFill_HArray1OfSectionLaw)
Handle_GeomFill_HArray1OfSectionLaw.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfSectionLaw_GetObject, None, Handle_GeomFill_HArray1OfSectionLaw)
Handle_GeomFill_HArray1OfSectionLaw._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_HArray1OfSectionLaw__kill_pointed, None, Handle_GeomFill_HArray1OfSectionLaw)
Handle_GeomFill_HArray1OfSectionLaw_swigregister = _GeomFill.Handle_GeomFill_HArray1OfSectionLaw_swigregister
Handle_GeomFill_HArray1OfSectionLaw_swigregister(Handle_GeomFill_HArray1OfSectionLaw)

def Handle_GeomFill_HArray1OfSectionLaw_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_HArray1OfSectionLaw_DownCast(AnObject)
Handle_GeomFill_HArray1OfSectionLaw_DownCast = _GeomFill.Handle_GeomFill_HArray1OfSectionLaw_DownCast

class GeomFill_HSequenceOfAx2(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_HSequenceOfAx2_swiginit(self, _GeomFill.new_GeomFill_HSequenceOfAx2(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: gp_Ax2
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_GeomFill_HSequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: gp_Ax2
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_GeomFill_HSequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: gp_Ax2
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_GeomFill_HSequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: gp_Ax2
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_GeomFill_HSequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_GeomFill_HSequenceOfAx2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: gp_Ax2
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: GeomFill_SequenceOfAx2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: GeomFill_SequenceOfAx2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_GeomFill_HSequenceOfAx2

        """
        return _GeomFill.GeomFill_HSequenceOfAx2_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_HSequenceOfAx2 self)"""
        return _GeomFill.GeomFill_HSequenceOfAx2__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_HSequenceOfAx2 self) -> Handle_GeomFill_HSequenceOfAx2"""
        return _GeomFill.GeomFill_HSequenceOfAx2_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_HSequenceOfAx2.IsEmpty = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_IsEmpty, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Length = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Length, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Clear = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Clear, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Append = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Append, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Prepend = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Prepend, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Reverse = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Reverse, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.InsertBefore = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_InsertBefore, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.InsertAfter = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_InsertAfter, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Exchange = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Exchange, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Split = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Split, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.SetValue = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_SetValue, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Value = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Value, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.ChangeValue = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_ChangeValue, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Remove = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Remove, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.Sequence = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_Sequence, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.ChangeSequence = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_ChangeSequence, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.ShallowCopy = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_ShallowCopy, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2._kill_pointed = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2__kill_pointed, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2.GetHandle = new_instancemethod(_GeomFill.GeomFill_HSequenceOfAx2_GetHandle, None, GeomFill_HSequenceOfAx2)
GeomFill_HSequenceOfAx2_swigregister = _GeomFill.GeomFill_HSequenceOfAx2_swigregister
GeomFill_HSequenceOfAx2_swigregister(GeomFill_HSequenceOfAx2)

class Handle_GeomFill_HSequenceOfAx2(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_HSequenceOfAx2_swiginit(self, _GeomFill.new_Handle_GeomFill_HSequenceOfAx2(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_HSequenceOfAx2_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_HSequenceOfAx2.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_HSequenceOfAx2_Nullify, None, Handle_GeomFill_HSequenceOfAx2)
Handle_GeomFill_HSequenceOfAx2.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_HSequenceOfAx2_IsNull, None, Handle_GeomFill_HSequenceOfAx2)
Handle_GeomFill_HSequenceOfAx2.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_HSequenceOfAx2_GetObject, None, Handle_GeomFill_HSequenceOfAx2)
Handle_GeomFill_HSequenceOfAx2._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_HSequenceOfAx2__kill_pointed, None, Handle_GeomFill_HSequenceOfAx2)
Handle_GeomFill_HSequenceOfAx2_swigregister = _GeomFill.Handle_GeomFill_HSequenceOfAx2_swigregister
Handle_GeomFill_HSequenceOfAx2_swigregister(Handle_GeomFill_HSequenceOfAx2)

def Handle_GeomFill_HSequenceOfAx2_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_HSequenceOfAx2_DownCast(AnObject)
Handle_GeomFill_HSequenceOfAx2_DownCast = _GeomFill.Handle_GeomFill_HSequenceOfAx2_DownCast

class GeomFill_Line(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param NbPoints:
        :type NbPoints: int
        :rtype: None

        """
        _GeomFill.GeomFill_Line_swiginit(self, _GeomFill.new_GeomFill_Line(*args))

    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Line_NbPoints(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _GeomFill.GeomFill_Line_Point(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_Line self)"""
        return _GeomFill.GeomFill_Line__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_Line self) -> Handle_GeomFill_Line"""
        return _GeomFill.GeomFill_Line_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Line.NbPoints = new_instancemethod(_GeomFill.GeomFill_Line_NbPoints, None, GeomFill_Line)
GeomFill_Line.Point = new_instancemethod(_GeomFill.GeomFill_Line_Point, None, GeomFill_Line)
GeomFill_Line._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Line__kill_pointed, None, GeomFill_Line)
GeomFill_Line.GetHandle = new_instancemethod(_GeomFill.GeomFill_Line_GetHandle, None, GeomFill_Line)
GeomFill_Line_swigregister = _GeomFill.GeomFill_Line_swigregister
GeomFill_Line_swigregister(GeomFill_Line)

class Handle_GeomFill_Line(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_Line_swiginit(self, _GeomFill.new_Handle_GeomFill_Line(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_Line_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_Line.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_Line_Nullify, None, Handle_GeomFill_Line)
Handle_GeomFill_Line.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_Line_IsNull, None, Handle_GeomFill_Line)
Handle_GeomFill_Line.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_Line_GetObject, None, Handle_GeomFill_Line)
Handle_GeomFill_Line._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_Line__kill_pointed, None, Handle_GeomFill_Line)
Handle_GeomFill_Line_swigregister = _GeomFill.Handle_GeomFill_Line_swigregister
Handle_GeomFill_Line_swigregister(Handle_GeomFill_Line)

def Handle_GeomFill_Line_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_Line_DownCast(AnObject)
Handle_GeomFill_Line_DownCast = _GeomFill.Handle_GeomFill_Line_DownCast

class GeomFill_LocFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Law:
        :type Law: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        _GeomFill.GeomFill_LocFunction_swiginit(self, _GeomFill.new_GeomFill_LocFunction(*args))

    def D0(self, *args):
        """
        * compute the section for v = param

        :param Param:
        :type Param: float
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocFunction_D0(self, *args)


    def D1(self, *args):
        """
        * compute the first derivative in v direction of the section for v = param

        :param Param:
        :type Param: float
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocFunction_D1(self, *args)


    def D2(self, *args):
        """
        * compute the second derivative in v direction of the section for v = param

        :param Param:
        :type Param: float
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocFunction_D2(self, *args)


    def DN(self, *args):
        """
        :param Param:
        :type Param: float
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Order:
        :type Order: int
        :param Result:
        :type Result: float &
        :param Ier:
        :type Ier: int &
        :rtype: None

        """
        return _GeomFill.GeomFill_LocFunction_DN(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_LocFunction.D0 = new_instancemethod(_GeomFill.GeomFill_LocFunction_D0, None, GeomFill_LocFunction)
GeomFill_LocFunction.D1 = new_instancemethod(_GeomFill.GeomFill_LocFunction_D1, None, GeomFill_LocFunction)
GeomFill_LocFunction.D2 = new_instancemethod(_GeomFill.GeomFill_LocFunction_D2, None, GeomFill_LocFunction)
GeomFill_LocFunction.DN = new_instancemethod(_GeomFill.GeomFill_LocFunction_DN, None, GeomFill_LocFunction)
GeomFill_LocFunction._kill_pointed = new_instancemethod(_GeomFill.GeomFill_LocFunction__kill_pointed, None, GeomFill_LocFunction)
GeomFill_LocFunction_swigregister = _GeomFill.GeomFill_LocFunction_swigregister
GeomFill_LocFunction_swigregister(GeomFill_LocFunction)

class GeomFill_LocationLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetCurve(self, *args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_SetCurve(self, *args)


    def GetCurve(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _GeomFill.GeomFill_LocationLaw_GetCurve(self, *args)


    def SetTrsf(self, *args):
        """
        * Set a transformation Matrix like the law M(t) become Mat * M(t)

        :param Transfo:
        :type Transfo: gp_Mat
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_SetTrsf(self, *args)


    def Copy(self, *args):
        """
        :rtype: Handle_GeomFill_LocationLaw

        """
        return _GeomFill.GeomFill_LocationLaw_Copy(self, *args)


    def D0(self, *args):
        """
        * compute Location

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :rtype: bool

        * compute Location and 2d points

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_D0(self, *args)


    def D1(self, *args):
        """
        * compute location 2d points and associated first derivatives. Warning : It used only for C1 or C2 aproximation

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param DM:
        :type DM: gp_Mat
        :param DV:
        :type DV: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_D1(self, *args)


    def D2(self, *args):
        """
        * compute location 2d points and associated first and seconde derivatives. Warning : It used only for C2 aproximation

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param DM:
        :type DM: gp_Mat
        :param DV:
        :type DV: gp_Vec
        :param D2M:
        :type D2M: gp_Mat
        :param D2V:
        :type D2V: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param D2Poles2d:
        :type D2Poles2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_D2(self, *args)


    def Nb2dCurves(self, *args):
        """
        * get the number of 2d curves (Restrictions + Traces)  to approximate.

        :rtype: int

        """
        return _GeomFill.GeomFill_LocationLaw_Nb2dCurves(self, *args)


    def HasFirstRestriction(self, *args):
        """
        * Say if the first restriction is defined in this class. If it is true the first element of poles array in D0,D1,D2... Correspond to this restriction. Returns Standard_False (default implementation)

        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_HasFirstRestriction(self, *args)


    def HasLastRestriction(self, *args):
        """
        * Say if the last restriction is defined in this class. If it is true the last element of poles array in D0,D1,D2... Correspond to this restriction. Returns Standard_False (default implementation)

        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_HasLastRestriction(self, *args)


    def TraceNumber(self, *args):
        """
        * Give the number of trace (Curves 2d wich are not restriction) Returns 0 (default implementation)

        :rtype: int

        """
        return _GeomFill.GeomFill_LocationLaw_TraceNumber(self, *args)


    def ErrorStatus(self, *args):
        """
        * //!Give a status to the Law Returns PipeOk (default implementation)

        :rtype: GeomFill_PipeError

        """
        return _GeomFill.GeomFill_LocationLaw_ErrorStatus(self, *args)


    def NbIntervals(self, *args):
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _GeomFill.GeomFill_LocationLaw_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.  The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_Intervals(self, *args)


    def SetInterval(self, *args):
        """
        * Sets the bounds of the parametric interval on the function This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_SetInterval(self, *args)


    def GetInterval(self, *args):
        """
        * Gets the bounds of the parametric interval on the function

        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_GetInterval(self, *args)


    def GetDomain(self, *args):
        """
        * Gets the bounds of the function parametric domain. Warning: This domain it is not modified by the SetValue method

        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_GetDomain(self, *args)


    def Resolution(self, *args):
        """
        * Returns the resolutions in the sub-space 2d <Index> This information is usfull to find an good tolerance in 2d approximation.

        :param Index:
        :type Index: int
        :param Tol:
        :type Tol: float
        :param TolU:
        :type TolU: float &
        :param TolV:
        :type TolV: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_Resolution(self, *args)


    def SetTolerance(self, *args):
        """
        * Is usefull, if (me) have to run numerical algorithm to perform D0, D1 or D2 The default implementation make nothing.

        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_SetTolerance(self, *args)


    def GetMaximalNorm(self, *args):
        """
        * Get the maximum Norm of the matrix-location part. It is usful to find an good Tolerance to approx M(t).

        :rtype: float

        """
        return _GeomFill.GeomFill_LocationLaw_GetMaximalNorm(self, *args)


    def GetAverageLaw(self, *args):
        """
        * Get average value of M(t) and V(t) it is usfull to make fast approximation of rational surfaces.

        :param AM:
        :type AM: gp_Mat
        :param AV:
        :type AV: gp_Vec
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_GetAverageLaw(self, *args)


    def IsTranslation(self, *args):
        """
        * Say if the Location Law, is an translation of Location The default implementation is ' returns False '.

        :param Error:
        :type Error: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_IsTranslation(self, *args)


    def IsRotation(self, *args):
        """
        * Say if the Location Law, is a rotation of Location The default implementation is ' returns False '.

        :param Error:
        :type Error: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationLaw_IsRotation(self, *args)


    def Rotation(self, *args):
        """
        :param Center:
        :type Center: gp_Pnt
        :rtype: void

        """
        return _GeomFill.GeomFill_LocationLaw_Rotation(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_LocationLaw self)"""
        return _GeomFill.GeomFill_LocationLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_LocationLaw self) -> Handle_GeomFill_LocationLaw"""
        return _GeomFill.GeomFill_LocationLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_LocationLaw.SetCurve = new_instancemethod(_GeomFill.GeomFill_LocationLaw_SetCurve, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetCurve = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetCurve, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.SetTrsf = new_instancemethod(_GeomFill.GeomFill_LocationLaw_SetTrsf, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.Copy = new_instancemethod(_GeomFill.GeomFill_LocationLaw_Copy, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.D0 = new_instancemethod(_GeomFill.GeomFill_LocationLaw_D0, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.D1 = new_instancemethod(_GeomFill.GeomFill_LocationLaw_D1, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.D2 = new_instancemethod(_GeomFill.GeomFill_LocationLaw_D2, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.Nb2dCurves = new_instancemethod(_GeomFill.GeomFill_LocationLaw_Nb2dCurves, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.HasFirstRestriction = new_instancemethod(_GeomFill.GeomFill_LocationLaw_HasFirstRestriction, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.HasLastRestriction = new_instancemethod(_GeomFill.GeomFill_LocationLaw_HasLastRestriction, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.TraceNumber = new_instancemethod(_GeomFill.GeomFill_LocationLaw_TraceNumber, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.ErrorStatus = new_instancemethod(_GeomFill.GeomFill_LocationLaw_ErrorStatus, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.NbIntervals = new_instancemethod(_GeomFill.GeomFill_LocationLaw_NbIntervals, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.Intervals = new_instancemethod(_GeomFill.GeomFill_LocationLaw_Intervals, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.SetInterval = new_instancemethod(_GeomFill.GeomFill_LocationLaw_SetInterval, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetInterval = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetInterval, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetDomain = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetDomain, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.Resolution = new_instancemethod(_GeomFill.GeomFill_LocationLaw_Resolution, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.SetTolerance = new_instancemethod(_GeomFill.GeomFill_LocationLaw_SetTolerance, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetMaximalNorm = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetMaximalNorm, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetAverageLaw = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetAverageLaw, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.IsTranslation = new_instancemethod(_GeomFill.GeomFill_LocationLaw_IsTranslation, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.IsRotation = new_instancemethod(_GeomFill.GeomFill_LocationLaw_IsRotation, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.Rotation = new_instancemethod(_GeomFill.GeomFill_LocationLaw_Rotation, None, GeomFill_LocationLaw)
GeomFill_LocationLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_LocationLaw__kill_pointed, None, GeomFill_LocationLaw)
GeomFill_LocationLaw.GetHandle = new_instancemethod(_GeomFill.GeomFill_LocationLaw_GetHandle, None, GeomFill_LocationLaw)
GeomFill_LocationLaw_swigregister = _GeomFill.GeomFill_LocationLaw_swigregister
GeomFill_LocationLaw_swigregister(GeomFill_LocationLaw)

class Handle_GeomFill_LocationLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_LocationLaw_swiginit(self, _GeomFill.new_Handle_GeomFill_LocationLaw(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_LocationLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_LocationLaw.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_LocationLaw_Nullify, None, Handle_GeomFill_LocationLaw)
Handle_GeomFill_LocationLaw.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_LocationLaw_IsNull, None, Handle_GeomFill_LocationLaw)
Handle_GeomFill_LocationLaw.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_LocationLaw_GetObject, None, Handle_GeomFill_LocationLaw)
Handle_GeomFill_LocationLaw._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_LocationLaw__kill_pointed, None, Handle_GeomFill_LocationLaw)
Handle_GeomFill_LocationLaw_swigregister = _GeomFill.Handle_GeomFill_LocationLaw_swigregister
Handle_GeomFill_LocationLaw_swigregister(Handle_GeomFill_LocationLaw)

def Handle_GeomFill_LocationLaw_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_LocationLaw_DownCast(AnObject)
Handle_GeomFill_LocationLaw_DownCast = _GeomFill.Handle_GeomFill_LocationLaw_DownCast

class GeomFill_Pipe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty algorithm for building pipes. Use the function Init to initialize it.

        :rtype: None

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param Radius:
        :type Radius: float
        :rtype: None

        * Create a pipe with a constant section (<FirstSection>) and a path (<Path>) Option can be - GeomFill_IsCorrectedFrenet - GeomFill_IsFrenet - GeomFill_IsConstant

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param Option: default value is GeomFill_IsCorrectedFrenet
        :type Option: GeomFill_Trihedron
        :rtype: None

        * Create a pipe with a constant section (<FirstSection>) and a path defined by <Path> and <Support>

        :param Path:
        :type Path: Handle_Geom2d_Curve &
        :param Support:
        :type Support: Handle_Geom_Surface &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :rtype: None

        * Create a pipe with a constant section (<FirstSection>) and a path <Path> and a fixed binormal direction <Dir>

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param Dir:
        :type Dir: gp_Dir
        :rtype: None

        * Create a pipe with an evolving section The section evoluate from First to Last Section

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param LastSect:
        :type LastSect: Handle_Geom_Curve &
        :rtype: None

        * Create a pipe with N sections The section evoluate from First to Last Section

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param NSections:
        :type NSections: TColGeom_SequenceOfCurve &
        :rtype: None

        * Create a pipe with a constant radius with 2 guide-line.

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param Curve1:
        :type Curve1: Handle_Geom_Curve &
        :param Curve2:
        :type Curve2: Handle_Geom_Curve &
        :param Radius:
        :type Radius: float
        :rtype: None

        * Create a pipe with a constant radius with 2 guide-line.

        :param Path:
        :type Path: Handle_Adaptor3d_HCurve &
        :param Curve1:
        :type Curve1: Handle_Adaptor3d_HCurve &
        :param Curve2:
        :type Curve2: Handle_Adaptor3d_HCurve &
        :param Radius:
        :type Radius: float
        :rtype: None

        * Create a pipe with a constant section and with 1 guide-line. Use the function Perform to build the surface. All standard specific cases are detected in order to construct, according to the respective geometric nature of Path and the sections, a planar, cylindrical, conical, spherical or toroidal surface, a surface of linear extrusion or a surface of revolution. In the general case, the result is a BSpline surface (NURBS) built by approximation of a series of sections where: - the number of sections N is chosen automatically by the algorithm according to the respective geometries of Path and the sections. N is greater than or equal to 2; - N points Pi (with i in the range [ 1,N ]) are defined at regular intervals along the curve Path from its first point to its end point. At each point Pi, a coordinate system Ti is computed with Pi as origin, and with the tangential and normal vectors to Path defining two of its coordinate axes. In the case of a pipe with a constant circular section, the first section is a circle of radius Radius centered on the origin of Path and whose 'Z Axis' is aligned along the vector tangential to the origin of Path. In the case of a pipe with a constant section, the first section is the curve FirstSect. In these two cases, the ith section (for values of i greater than 1) is obtained by applying to a copy of this first section the geometric transformation which transforms coordinate system T1 into coordinate system Ti. In the case of an evolving section, N-2 intermediate curves Si are first computed (if N is greater than 2, and with i in the range [ 2,N-1 ]) whose geometry evolves regularly from the curve S1=FirstSect to the curve SN=LastSect. The first section is FirstSect, and the ith section (for values of i greater than 1) is obtained by applying to the curve Si the geometric transformation which transforms coordinate system T1 into coordinate system Ti.

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param Guide:
        :type Guide: Handle_Adaptor3d_HCurve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param ByACR:
        :type ByACR: bool
        :param rotat:
        :type rotat: bool
        :rtype: None

        """
        _GeomFill.GeomFill_Pipe_swiginit(self, _GeomFill.new_GeomFill_Pipe(*args))

    def Init(self, *args):
        """
        :param Path:
        :type Path: Handle_Geom_Curve &
        :param Radius:
        :type Radius: float
        :rtype: None

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param Option: default value is GeomFill_IsCorrectedFrenet
        :type Option: GeomFill_Trihedron
        :rtype: None

        :param Path:
        :type Path: Handle_Geom2d_Curve &
        :param Support:
        :type Support: Handle_Geom_Surface &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :rtype: None

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param Dir:
        :type Dir: gp_Dir
        :rtype: None

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param LastSect:
        :type LastSect: Handle_Geom_Curve &
        :rtype: None

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param NSections:
        :type NSections: TColGeom_SequenceOfCurve &
        :rtype: None

        * Create a pipe with a constant radius with 2 guide-line.

        :param Path:
        :type Path: Handle_Adaptor3d_HCurve &
        :param Curve1:
        :type Curve1: Handle_Adaptor3d_HCurve &
        :param Curve2:
        :type Curve2: Handle_Adaptor3d_HCurve &
        :param Radius:
        :type Radius: float
        :rtype: None

        * Initializes this pipe algorithm to build the following surface: - a pipe with a constant circular section of radius Radius along the path Path, or - a pipe with constant section FirstSect along the path Path, or - a pipe where the section evolves from FirstSect to LastSect along the path Path. Use the function Perform to build the surface. Note: a description of the resulting surface is given under Constructors.

        :param Path:
        :type Path: Handle_Geom_Curve &
        :param Guide:
        :type Guide: Handle_Adaptor3d_HCurve &
        :param FirstSect:
        :type FirstSect: Handle_Geom_Curve &
        :param ByACR:
        :type ByACR: bool
        :param rotat:
        :type rotat: bool
        :rtype: None

        """
        return _GeomFill.GeomFill_Pipe_Init(self, *args)


    def Perform(self, *args):
        """
        * Builds the pipe defined at the time of initialization of this algorithm. A description of the resulting surface is given under Constructors. If WithParameters (defaulted to false) is set to true, the approximation algorithm (used only in the general case of construction of a BSpline surface) builds the surface with a u parameter corresponding to the one of the path. Exceptions Standard_ConstructionError if a surface cannot be constructed from the data. Warning: It is the old Perform method, the next methode is recommended.

        :param WithParameters: default value is Standard_False
        :type WithParameters: bool
        :param myPolynomial: default value is Standard_False
        :type myPolynomial: bool
        :rtype: None

        * detects the particular cases. And compute the surface. if none particular case is detected we make an approximation with respect of the Tolerance <Tol>, the continuty <Conti>, the maximum degree <MaxDegree>, the maximum number of span <NbMaxSegment> and the spine parametrization. If we can't create a surface with the data

        :param Tol:
        :type Tol: float
        :param Polynomial:
        :type Polynomial: bool
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :param MaxDegree: default value is 11
        :type MaxDegree: int
        :param NbMaxSegment: default value is 30
        :type NbMaxSegment: int
        :rtype: None

        """
        return _GeomFill.GeomFill_Pipe_Perform(self, *args)


    def Surface(self, *args):
        """
        * Returns the surface built by this algorithm. Warning Do not use this function before the surface is built (in this case the function will return a null handle).

        :rtype: Handle_Geom_Surface

        """
        return _GeomFill.GeomFill_Pipe_Surface(self, *args)


    def ExchangeUV(self, *args):
        """
        * The u parametric direction of the surface constructed by this algorithm usually corresponds to the evolution along the path and the v parametric direction corresponds to the evolution along the section(s). However, this rule is not respected when constructing certain specific Geom surfaces (typically cylindrical surfaces, surfaces of revolution, etc.) for which the parameterization is inversed. The ExchangeUV function checks for this, and returns true in all these specific cases. Warning Do not use this function before the surface is built.

        :rtype: bool

        """
        return _GeomFill.GeomFill_Pipe_ExchangeUV(self, *args)


    def GenerateParticularCase(self, *args):
        """
        * Sets a flag to try to create as many planes, cylinder,... as possible. Default value is <Standard_False>.

        :param B:
        :type B: bool
        :rtype: None

        * Returns the flag.

        :rtype: bool

        """
        return _GeomFill.GeomFill_Pipe_GenerateParticularCase(self, *args)


    def ErrorOnSurf(self, *args):
        """
        * Returns the approximation's error. if the Surface is plane, cylinder ... this error can be 0.

        :rtype: float

        """
        return _GeomFill.GeomFill_Pipe_ErrorOnSurf(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Pipe.Init = new_instancemethod(_GeomFill.GeomFill_Pipe_Init, None, GeomFill_Pipe)
GeomFill_Pipe.Perform = new_instancemethod(_GeomFill.GeomFill_Pipe_Perform, None, GeomFill_Pipe)
GeomFill_Pipe.Surface = new_instancemethod(_GeomFill.GeomFill_Pipe_Surface, None, GeomFill_Pipe)
GeomFill_Pipe.ExchangeUV = new_instancemethod(_GeomFill.GeomFill_Pipe_ExchangeUV, None, GeomFill_Pipe)
GeomFill_Pipe.GenerateParticularCase = new_instancemethod(_GeomFill.GeomFill_Pipe_GenerateParticularCase, None, GeomFill_Pipe)
GeomFill_Pipe.ErrorOnSurf = new_instancemethod(_GeomFill.GeomFill_Pipe_ErrorOnSurf, None, GeomFill_Pipe)
GeomFill_Pipe._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Pipe__kill_pointed, None, GeomFill_Pipe)
GeomFill_Pipe_swigregister = _GeomFill.GeomFill_Pipe_swigregister
GeomFill_Pipe_swigregister(GeomFill_Pipe)

class GeomFill_PlanFunc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _GeomFill.GeomFill_PlanFunc_swiginit(self, _GeomFill.new_GeomFill_PlanFunc(*args))

    def Value(self, *args):
        """
        * computes the value <F>of the function for the variable <X>. Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_PlanFunc_Value(self, *args)


    def Derivative(self, *args):
        """
        * computes the derivative <D> of the function for the variable <X>. Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_PlanFunc_Derivative(self, *args)


    def Values(self, *args):
        """
        * computes the value <F> and the derivative <D> of the function for the variable <X>. Returns True if the calculation were successfully done, False otherwise.

        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_PlanFunc_Values(self, *args)


    def D2(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D1:
        :type D1: float &
        :param D2:
        :type D2: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_PlanFunc_D2(self, *args)


    def DEDT(self, *args):
        """
        :param X:
        :type X: float
        :param DP:
        :type DP: gp_Vec
        :param DV:
        :type DV: gp_Vec
        :param DF:
        :type DF: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_PlanFunc_DEDT(self, *args)


    def D2E(self, *args):
        """
        :param X:
        :type X: float
        :param DP:
        :type DP: gp_Vec
        :param D2P:
        :type D2P: gp_Vec
        :param DV:
        :type DV: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param DFDT:
        :type DFDT: float &
        :param D2FDT2:
        :type D2FDT2: float &
        :param D2FDTDX:
        :type D2FDTDX: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_PlanFunc_D2E(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_PlanFunc.Value = new_instancemethod(_GeomFill.GeomFill_PlanFunc_Value, None, GeomFill_PlanFunc)
GeomFill_PlanFunc.Derivative = new_instancemethod(_GeomFill.GeomFill_PlanFunc_Derivative, None, GeomFill_PlanFunc)
GeomFill_PlanFunc.Values = new_instancemethod(_GeomFill.GeomFill_PlanFunc_Values, None, GeomFill_PlanFunc)
GeomFill_PlanFunc.D2 = new_instancemethod(_GeomFill.GeomFill_PlanFunc_D2, None, GeomFill_PlanFunc)
GeomFill_PlanFunc.DEDT = new_instancemethod(_GeomFill.GeomFill_PlanFunc_DEDT, None, GeomFill_PlanFunc)
GeomFill_PlanFunc.D2E = new_instancemethod(_GeomFill.GeomFill_PlanFunc_D2E, None, GeomFill_PlanFunc)
GeomFill_PlanFunc._kill_pointed = new_instancemethod(_GeomFill.GeomFill_PlanFunc__kill_pointed, None, GeomFill_PlanFunc)
GeomFill_PlanFunc_swigregister = _GeomFill.GeomFill_PlanFunc_swigregister
GeomFill_PlanFunc_swigregister(GeomFill_PlanFunc)

class GeomFill_PolynomialConvertor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_PolynomialConvertor_swiginit(self, _GeomFill.new_GeomFill_PolynomialConvertor(*args))

    def Initialized(self, *args):
        """
        * say if <self> is Initialized

        :rtype: bool

        """
        return _GeomFill.GeomFill_PolynomialConvertor_Initialized(self, *args)


    def Init(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_PolynomialConvertor_Init(self, *args)


    def Section(self, *args):
        """
        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param Center:
        :type Center: gp_Pnt
        :param Dir:
        :type Dir: gp_Vec
        :param Angle:
        :type Angle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :rtype: None

        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param DFirstPnt:
        :type DFirstPnt: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param Dir:
        :type Dir: gp_Vec
        :param DDir:
        :type DDir: gp_Vec
        :param Angle:
        :type Angle: float
        :param DAngle:
        :type DAngle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :rtype: None

        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param DFirstPnt:
        :type DFirstPnt: gp_Vec
        :param D2FirstPnt:
        :type D2FirstPnt: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param D2Center:
        :type D2Center: gp_Vec
        :param Dir:
        :type Dir: gp_Vec
        :param DDir:
        :type DDir: gp_Vec
        :param D2Dir:
        :type D2Dir: gp_Vec
        :param Angle:
        :type Angle: float
        :param DAngle:
        :type DAngle: float
        :param D2Angle:
        :type D2Angle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :rtype: None

        """
        return _GeomFill.GeomFill_PolynomialConvertor_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_PolynomialConvertor.Initialized = new_instancemethod(_GeomFill.GeomFill_PolynomialConvertor_Initialized, None, GeomFill_PolynomialConvertor)
GeomFill_PolynomialConvertor.Init = new_instancemethod(_GeomFill.GeomFill_PolynomialConvertor_Init, None, GeomFill_PolynomialConvertor)
GeomFill_PolynomialConvertor.Section = new_instancemethod(_GeomFill.GeomFill_PolynomialConvertor_Section, None, GeomFill_PolynomialConvertor)
GeomFill_PolynomialConvertor._kill_pointed = new_instancemethod(_GeomFill.GeomFill_PolynomialConvertor__kill_pointed, None, GeomFill_PolynomialConvertor)
GeomFill_PolynomialConvertor_swigregister = _GeomFill.GeomFill_PolynomialConvertor_swigregister
GeomFill_PolynomialConvertor_swigregister(GeomFill_PolynomialConvertor)

class GeomFill_Profiler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_Profiler_swiginit(self, _GeomFill.new_GeomFill_Profiler(*args))

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _GeomFill.GeomFill_Profiler_Delete(self, *args)


    def AddCurve(self, *args):
        """
        :param Curve:
        :type Curve: Handle_Geom_Curve &
        :rtype: None

        """
        return _GeomFill.GeomFill_Profiler_AddCurve(self, *args)


    def Perform(self, *args):
        """
        * Converts all curves to BSplineCurves. Set them to the common profile. <PTol> is used to compare 2 knots.

        :param PTol:
        :type PTol: float
        :rtype: void

        """
        return _GeomFill.GeomFill_Profiler_Perform(self, *args)


    def Degree(self, *args):
        """
        * Raises if not yet perform

        :rtype: int

        """
        return _GeomFill.GeomFill_Profiler_Degree(self, *args)


    def IsPeriodic(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_Profiler_IsPeriodic(self, *args)


    def NbPoles(self, *args):
        """
        * Raises if not yet perform

        :rtype: int

        """
        return _GeomFill.GeomFill_Profiler_NbPoles(self, *args)


    def Poles(self, *args):
        """
        * returns in <Poles> the poles of the BSplineCurve from index <Index> adjusting to the current profile. Raises if not yet perform Raises if <Index> not in the range [1,NbCurves] if the length of <Poles> is not equal to NbPoles().

        :param Index:
        :type Index: int
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :rtype: None

        """
        return _GeomFill.GeomFill_Profiler_Poles(self, *args)


    def Weights(self, *args):
        """
        * returns in <Weights> the weights of the BSplineCurve from index <Index> adjusting to the current profile. Raises if not yet perform Raises if <Index> not in the range [1,NbCurves] or if the length of <Weights> is not equal to NbPoles().

        :param Index:
        :type Index: int
        :param Weights:
        :type Weights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_Profiler_Weights(self, *args)


    def NbKnots(self, *args):
        """
        * Raises if not yet perform

        :rtype: int

        """
        return _GeomFill.GeomFill_Profiler_NbKnots(self, *args)


    def KnotsAndMults(self, *args):
        """
        * Raises if not yet perform Raises if the lengthes of <Knots> and <Mults> are not equal to NbKnots().

        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _GeomFill.GeomFill_Profiler_KnotsAndMults(self, *args)


    def Curve(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_Profiler_Curve(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Profiler.Delete = new_instancemethod(_GeomFill.GeomFill_Profiler_Delete, None, GeomFill_Profiler)
GeomFill_Profiler.AddCurve = new_instancemethod(_GeomFill.GeomFill_Profiler_AddCurve, None, GeomFill_Profiler)
GeomFill_Profiler.Perform = new_instancemethod(_GeomFill.GeomFill_Profiler_Perform, None, GeomFill_Profiler)
GeomFill_Profiler.Degree = new_instancemethod(_GeomFill.GeomFill_Profiler_Degree, None, GeomFill_Profiler)
GeomFill_Profiler.IsPeriodic = new_instancemethod(_GeomFill.GeomFill_Profiler_IsPeriodic, None, GeomFill_Profiler)
GeomFill_Profiler.NbPoles = new_instancemethod(_GeomFill.GeomFill_Profiler_NbPoles, None, GeomFill_Profiler)
GeomFill_Profiler.Poles = new_instancemethod(_GeomFill.GeomFill_Profiler_Poles, None, GeomFill_Profiler)
GeomFill_Profiler.Weights = new_instancemethod(_GeomFill.GeomFill_Profiler_Weights, None, GeomFill_Profiler)
GeomFill_Profiler.NbKnots = new_instancemethod(_GeomFill.GeomFill_Profiler_NbKnots, None, GeomFill_Profiler)
GeomFill_Profiler.KnotsAndMults = new_instancemethod(_GeomFill.GeomFill_Profiler_KnotsAndMults, None, GeomFill_Profiler)
GeomFill_Profiler.Curve = new_instancemethod(_GeomFill.GeomFill_Profiler_Curve, None, GeomFill_Profiler)
GeomFill_Profiler._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Profiler__kill_pointed, None, GeomFill_Profiler)
GeomFill_Profiler_swigregister = _GeomFill.GeomFill_Profiler_swigregister
GeomFill_Profiler_swigregister(GeomFill_Profiler)

class GeomFill_QuasiAngularConvertor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_QuasiAngularConvertor_swiginit(self, _GeomFill.new_GeomFill_QuasiAngularConvertor(*args))

    def Initialized(self, *args):
        """
        * say if <self> is Initialized

        :rtype: bool

        """
        return _GeomFill.GeomFill_QuasiAngularConvertor_Initialized(self, *args)


    def Init(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_QuasiAngularConvertor_Init(self, *args)


    def Section(self, *args):
        """
        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param Center:
        :type Center: gp_Pnt
        :param Dir:
        :type Dir: gp_Vec
        :param Angle:
        :type Angle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Weights:
        :type Weights: TColStd_Array1OfReal &
        :rtype: None

        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param DFirstPnt:
        :type DFirstPnt: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param Dir:
        :type Dir: gp_Vec
        :param DDir:
        :type DDir: gp_Vec
        :param Angle:
        :type Angle: float
        :param DAngle:
        :type DAngle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Weights:
        :type Weights: TColStd_Array1OfReal &
        :param DWeights:
        :type DWeights: TColStd_Array1OfReal &
        :rtype: None

        :param FirstPnt:
        :type FirstPnt: gp_Pnt
        :param DFirstPnt:
        :type DFirstPnt: gp_Vec
        :param D2FirstPnt:
        :type D2FirstPnt: gp_Vec
        :param Center:
        :type Center: gp_Pnt
        :param DCenter:
        :type DCenter: gp_Vec
        :param D2Center:
        :type D2Center: gp_Vec
        :param Dir:
        :type Dir: gp_Vec
        :param DDir:
        :type DDir: gp_Vec
        :param D2Dir:
        :type D2Dir: gp_Vec
        :param Angle:
        :type Angle: float
        :param DAngle:
        :type DAngle: float
        :param D2Angle:
        :type D2Angle: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Weights:
        :type Weights: TColStd_Array1OfReal &
        :param DWeights:
        :type DWeights: TColStd_Array1OfReal &
        :param D2Weights:
        :type D2Weights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_QuasiAngularConvertor_Section(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_QuasiAngularConvertor.Initialized = new_instancemethod(_GeomFill.GeomFill_QuasiAngularConvertor_Initialized, None, GeomFill_QuasiAngularConvertor)
GeomFill_QuasiAngularConvertor.Init = new_instancemethod(_GeomFill.GeomFill_QuasiAngularConvertor_Init, None, GeomFill_QuasiAngularConvertor)
GeomFill_QuasiAngularConvertor.Section = new_instancemethod(_GeomFill.GeomFill_QuasiAngularConvertor_Section, None, GeomFill_QuasiAngularConvertor)
GeomFill_QuasiAngularConvertor._kill_pointed = new_instancemethod(_GeomFill.GeomFill_QuasiAngularConvertor__kill_pointed, None, GeomFill_QuasiAngularConvertor)
GeomFill_QuasiAngularConvertor_swigregister = _GeomFill.GeomFill_QuasiAngularConvertor_swigregister
GeomFill_QuasiAngularConvertor_swigregister(GeomFill_QuasiAngularConvertor)

class GeomFill_SectionLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args):
        """
        * compute the section for v = param

        :param Param:
        :type Param: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_D0(self, *args)


    def D1(self, *args):
        """
        * compute the first derivative in v direction of the section for v = param Warning : It used only for C1 or C2 aproximation

        :param Param:
        :type Param: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_D1(self, *args)


    def D2(self, *args):
        """
        * compute the second derivative in v direction of the section for v = param Warning : It used only for C2 aproximation

        :param Param:
        :type Param: float
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param D2Poles:
        :type D2Poles: TColgp_Array1OfVec
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :param D2Weigths:
        :type D2Weigths: TColStd_Array1OfReal &
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_D2(self, *args)


    def BSplineSurface(self, *args):
        """
        * give if possible an bspline Surface, like iso-v are the section. If it is not possible this methode have to get an Null Surface. It is the default implementation.

        :rtype: Handle_Geom_BSplineSurface

        """
        return _GeomFill.GeomFill_SectionLaw_BSplineSurface(self, *args)


    def SectionShape(self, *args):
        """
        * get the format of an section

        :param NbPoles:
        :type NbPoles: int &
        :param NbKnots:
        :type NbKnots: int &
        :param Degree:
        :type Degree: int &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_SectionShape(self, *args)


    def Knots(self, *args):
        """
        * get the Knots of the section

        :param TKnots:
        :type TKnots: TColStd_Array1OfReal &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_Knots(self, *args)


    def Mults(self, *args):
        """
        * get the Multplicities of the section

        :param TMults:
        :type TMults: TColStd_Array1OfInteger &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_Mults(self, *args)


    def IsRational(self, *args):
        """
        * Returns if the sections are rationnal or not

        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_IsRational(self, *args)


    def IsUPeriodic(self, *args):
        """
        * Returns if the sections are periodic or not

        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_IsUPeriodic(self, *args)


    def IsVPeriodic(self, *args):
        """
        * Returns if law is periodic or not

        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_IsVPeriodic(self, *args)


    def NbIntervals(self, *args):
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _GeomFill.GeomFill_SectionLaw_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.  The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_Intervals(self, *args)


    def SetInterval(self, *args):
        """
        * Sets the bounds of the parametric interval on the function This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_SetInterval(self, *args)


    def GetInterval(self, *args):
        """
        * Gets the bounds of the parametric interval on the function

        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_GetInterval(self, *args)


    def GetDomain(self, *args):
        """
        * Gets the bounds of the function parametric domain. Warning: This domain it is not modified by the SetValue method

        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_GetDomain(self, *args)


    def GetTolerance(self, *args):
        """
        * Returns the tolerances associated at each poles to reach in approximation, to satisfy: BoundTol error at the Boundary AngleTol tangent error at the Boundary (in radian) SurfTol error inside the surface.

        :param BoundTol:
        :type BoundTol: float
        :param SurfTol:
        :type SurfTol: float
        :param AngleTol:
        :type AngleTol: float
        :param Tol3d:
        :type Tol3d: TColStd_Array1OfReal &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_GetTolerance(self, *args)


    def SetTolerance(self, *args):
        """
        * Is usefull, if (me) have to run numerical algorithm to perform D0, D1 or D2 The default implementation make nothing.

        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_SetTolerance(self, *args)


    def BarycentreOfSurf(self, *args):
        """
        * Get the barycentre of Surface. An very poor estimation is sufficent. This information is usefull to perform well conditioned rational approximation. Warning: Used only if <self> IsRational

        :rtype: gp_Pnt

        """
        return _GeomFill.GeomFill_SectionLaw_BarycentreOfSurf(self, *args)


    def MaximalSection(self, *args):
        """
        * Returns the length of the greater section. This information is usefull to G1's control. Warning: With an little value, approximation can be slower.

        :rtype: float

        """
        return _GeomFill.GeomFill_SectionLaw_MaximalSection(self, *args)


    def GetMinimalWeight(self, *args):
        """
        * Compute the minimal value of weight for each poles in all sections. This information is usefull to control error in rational approximation. Warning: Used only if <self> IsRational

        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: void

        """
        return _GeomFill.GeomFill_SectionLaw_GetMinimalWeight(self, *args)


    def IsConstant(self, *args):
        """
        * Say if all sections are equals

        :param Error:
        :type Error: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_IsConstant(self, *args)


    def ConstantSection(self, *args):
        """
        * Return a copy of the constant Section, if me IsConstant

        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_SectionLaw_ConstantSection(self, *args)


    def IsConicalLaw(self, *args):
        """
        * Returns True if all section are circle, with same plane,same center and linear radius evolution Return False by Default.

        :param Error:
        :type Error: float &
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionLaw_IsConicalLaw(self, *args)


    def CirclSection(self, *args):
        """
        * Return the circle section at parameter <Param>, if <self> a IsConicalLaw

        :param Param:
        :type Param: float
        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_SectionLaw_CirclSection(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_SectionLaw self)"""
        return _GeomFill.GeomFill_SectionLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_SectionLaw self) -> Handle_GeomFill_SectionLaw"""
        return _GeomFill.GeomFill_SectionLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SectionLaw.D0 = new_instancemethod(_GeomFill.GeomFill_SectionLaw_D0, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.D1 = new_instancemethod(_GeomFill.GeomFill_SectionLaw_D1, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.D2 = new_instancemethod(_GeomFill.GeomFill_SectionLaw_D2, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.BSplineSurface = new_instancemethod(_GeomFill.GeomFill_SectionLaw_BSplineSurface, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.SectionShape = new_instancemethod(_GeomFill.GeomFill_SectionLaw_SectionShape, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.Knots = new_instancemethod(_GeomFill.GeomFill_SectionLaw_Knots, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.Mults = new_instancemethod(_GeomFill.GeomFill_SectionLaw_Mults, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.IsRational = new_instancemethod(_GeomFill.GeomFill_SectionLaw_IsRational, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.IsUPeriodic = new_instancemethod(_GeomFill.GeomFill_SectionLaw_IsUPeriodic, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.IsVPeriodic = new_instancemethod(_GeomFill.GeomFill_SectionLaw_IsVPeriodic, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.NbIntervals = new_instancemethod(_GeomFill.GeomFill_SectionLaw_NbIntervals, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.Intervals = new_instancemethod(_GeomFill.GeomFill_SectionLaw_Intervals, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.SetInterval = new_instancemethod(_GeomFill.GeomFill_SectionLaw_SetInterval, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.GetInterval = new_instancemethod(_GeomFill.GeomFill_SectionLaw_GetInterval, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.GetDomain = new_instancemethod(_GeomFill.GeomFill_SectionLaw_GetDomain, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.GetTolerance = new_instancemethod(_GeomFill.GeomFill_SectionLaw_GetTolerance, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.SetTolerance = new_instancemethod(_GeomFill.GeomFill_SectionLaw_SetTolerance, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.BarycentreOfSurf = new_instancemethod(_GeomFill.GeomFill_SectionLaw_BarycentreOfSurf, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.MaximalSection = new_instancemethod(_GeomFill.GeomFill_SectionLaw_MaximalSection, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.GetMinimalWeight = new_instancemethod(_GeomFill.GeomFill_SectionLaw_GetMinimalWeight, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.IsConstant = new_instancemethod(_GeomFill.GeomFill_SectionLaw_IsConstant, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.ConstantSection = new_instancemethod(_GeomFill.GeomFill_SectionLaw_ConstantSection, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.IsConicalLaw = new_instancemethod(_GeomFill.GeomFill_SectionLaw_IsConicalLaw, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.CirclSection = new_instancemethod(_GeomFill.GeomFill_SectionLaw_CirclSection, None, GeomFill_SectionLaw)
GeomFill_SectionLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SectionLaw__kill_pointed, None, GeomFill_SectionLaw)
GeomFill_SectionLaw.GetHandle = new_instancemethod(_GeomFill.GeomFill_SectionLaw_GetHandle, None, GeomFill_SectionLaw)
GeomFill_SectionLaw_swigregister = _GeomFill.GeomFill_SectionLaw_swigregister
GeomFill_SectionLaw_swigregister(GeomFill_SectionLaw)

class Handle_GeomFill_SectionLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_SectionLaw_swiginit(self, _GeomFill.new_Handle_GeomFill_SectionLaw(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_SectionLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_SectionLaw.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_SectionLaw_Nullify, None, Handle_GeomFill_SectionLaw)
Handle_GeomFill_SectionLaw.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_SectionLaw_IsNull, None, Handle_GeomFill_SectionLaw)
Handle_GeomFill_SectionLaw.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_SectionLaw_GetObject, None, Handle_GeomFill_SectionLaw)
Handle_GeomFill_SectionLaw._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_SectionLaw__kill_pointed, None, Handle_GeomFill_SectionLaw)
Handle_GeomFill_SectionLaw_swigregister = _GeomFill.Handle_GeomFill_SectionLaw_swigregister
Handle_GeomFill_SectionLaw_swigregister(Handle_GeomFill_SectionLaw)

def Handle_GeomFill_SectionLaw_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_SectionLaw_DownCast(AnObject)
Handle_GeomFill_SectionLaw_DownCast = _GeomFill.Handle_GeomFill_SectionLaw_DownCast

class GeomFill_SectionPlacement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param L:
        :type L: Handle_GeomFill_LocationLaw &
        :param Section:
        :type Section: Handle_Geom_Geometry &
        :rtype: None

        """
        _GeomFill.GeomFill_SectionPlacement_swiginit(self, _GeomFill.new_GeomFill_SectionPlacement(*args))

    def SetLocation(self, *args):
        """
        * To change the section Law

        :param L:
        :type L: Handle_GeomFill_LocationLaw &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionPlacement_SetLocation(self, *args)


    def Perform(self, *args):
        """
        :param Tol:
        :type Tol: float
        :rtype: None

        :param Path:
        :type Path: Handle_Adaptor3d_HCurve &
        :param Tol:
        :type Tol: float
        :rtype: None

        :param ParamOnPath:
        :type ParamOnPath: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionPlacement_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_SectionPlacement_IsDone(self, *args)


    def ParameterOnPath(self, *args):
        """
        :rtype: float

        """
        return _GeomFill.GeomFill_SectionPlacement_ParameterOnPath(self, *args)


    def ParameterOnSection(self, *args):
        """
        :rtype: float

        """
        return _GeomFill.GeomFill_SectionPlacement_ParameterOnSection(self, *args)


    def Distance(self, *args):
        """
        :rtype: float

        """
        return _GeomFill.GeomFill_SectionPlacement_Distance(self, *args)


    def Angle(self, *args):
        """
        :rtype: float

        """
        return _GeomFill.GeomFill_SectionPlacement_Angle(self, *args)


    def Transformation(self, *args):
        """
        :param WithTranslation:
        :type WithTranslation: bool
        :param WithCorrection: default value is Standard_False
        :type WithCorrection: bool
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SectionPlacement_Transformation(self, *args)


    def Section(self, *args):
        """
        * Compute the Section, in the coordinate syteme given by the Location Law. If <WithTranslation> contact beetween <Section> and <Path> is forced.

        :param WithTranslation:
        :type WithTranslation: bool
        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_SectionPlacement_Section(self, *args)


    def ModifiedSection(self, *args):
        """
        * Compute the Section, in the coordinate syteme given by the Location Law. To have the Normal to section equal to the Location Law Normal. If <WithTranslation> contact beetween <Section> and <Path> is forced.

        :param WithTranslation:
        :type WithTranslation: bool
        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_SectionPlacement_ModifiedSection(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SectionPlacement.SetLocation = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_SetLocation, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.Perform = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_Perform, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.IsDone = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_IsDone, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.ParameterOnPath = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_ParameterOnPath, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.ParameterOnSection = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_ParameterOnSection, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.Distance = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_Distance, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.Angle = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_Angle, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.Transformation = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_Transformation, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.Section = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_Section, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement.ModifiedSection = new_instancemethod(_GeomFill.GeomFill_SectionPlacement_ModifiedSection, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SectionPlacement__kill_pointed, None, GeomFill_SectionPlacement)
GeomFill_SectionPlacement_swigregister = _GeomFill.GeomFill_SectionPlacement_swigregister
GeomFill_SectionPlacement_swigregister(GeomFill_SectionPlacement)

class GeomFill_SequenceNodeOfSequenceOfAx2(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: gp_Ax2
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_swiginit(self, _GeomFill.new_GeomFill_SequenceNodeOfSequenceOfAx2(*args))

    def Value(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_SequenceNodeOfSequenceOfAx2 self)"""
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_SequenceNodeOfSequenceOfAx2 self) -> Handle_GeomFill_SequenceNodeOfSequenceOfAx2"""
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SequenceNodeOfSequenceOfAx2.Value = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_Value, None, GeomFill_SequenceNodeOfSequenceOfAx2)
GeomFill_SequenceNodeOfSequenceOfAx2._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2__kill_pointed, None, GeomFill_SequenceNodeOfSequenceOfAx2)
GeomFill_SequenceNodeOfSequenceOfAx2.GetHandle = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_GetHandle, None, GeomFill_SequenceNodeOfSequenceOfAx2)
GeomFill_SequenceNodeOfSequenceOfAx2_swigregister = _GeomFill.GeomFill_SequenceNodeOfSequenceOfAx2_swigregister
GeomFill_SequenceNodeOfSequenceOfAx2_swigregister(GeomFill_SequenceNodeOfSequenceOfAx2)

class Handle_GeomFill_SequenceNodeOfSequenceOfAx2(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_swiginit(self, _GeomFill.new_Handle_GeomFill_SequenceNodeOfSequenceOfAx2(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_SequenceNodeOfSequenceOfAx2.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_Nullify, None, Handle_GeomFill_SequenceNodeOfSequenceOfAx2)
Handle_GeomFill_SequenceNodeOfSequenceOfAx2.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_IsNull, None, Handle_GeomFill_SequenceNodeOfSequenceOfAx2)
Handle_GeomFill_SequenceNodeOfSequenceOfAx2.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_GetObject, None, Handle_GeomFill_SequenceNodeOfSequenceOfAx2)
Handle_GeomFill_SequenceNodeOfSequenceOfAx2._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2__kill_pointed, None, Handle_GeomFill_SequenceNodeOfSequenceOfAx2)
Handle_GeomFill_SequenceNodeOfSequenceOfAx2_swigregister = _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_swigregister
Handle_GeomFill_SequenceNodeOfSequenceOfAx2_swigregister(Handle_GeomFill_SequenceNodeOfSequenceOfAx2)

def Handle_GeomFill_SequenceNodeOfSequenceOfAx2_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_DownCast(AnObject)
Handle_GeomFill_SequenceNodeOfSequenceOfAx2_DownCast = _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfAx2_DownCast

class GeomFill_SequenceNodeOfSequenceOfTrsf(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: gp_Trsf
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_swiginit(self, _GeomFill.new_GeomFill_SequenceNodeOfSequenceOfTrsf(*args))

    def Value(self, *args):
        """
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_SequenceNodeOfSequenceOfTrsf self)"""
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_SequenceNodeOfSequenceOfTrsf self) -> Handle_GeomFill_SequenceNodeOfSequenceOfTrsf"""
        return _GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SequenceNodeOfSequenceOfTrsf.Value = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_Value, None, GeomFill_SequenceNodeOfSequenceOfTrsf)
GeomFill_SequenceNodeOfSequenceOfTrsf._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf__kill_pointed, None, GeomFill_SequenceNodeOfSequenceOfTrsf)
GeomFill_SequenceNodeOfSequenceOfTrsf.GetHandle = new_instancemethod(_GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_GetHandle, None, GeomFill_SequenceNodeOfSequenceOfTrsf)
GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister = _GeomFill.GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister
GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister(GeomFill_SequenceNodeOfSequenceOfTrsf)

class Handle_GeomFill_SequenceNodeOfSequenceOfTrsf(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_swiginit(self, _GeomFill.new_Handle_GeomFill_SequenceNodeOfSequenceOfTrsf(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_SequenceNodeOfSequenceOfTrsf.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_Nullify, None, Handle_GeomFill_SequenceNodeOfSequenceOfTrsf)
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_IsNull, None, Handle_GeomFill_SequenceNodeOfSequenceOfTrsf)
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_GetObject, None, Handle_GeomFill_SequenceNodeOfSequenceOfTrsf)
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf__kill_pointed, None, Handle_GeomFill_SequenceNodeOfSequenceOfTrsf)
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister = _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_swigregister(Handle_GeomFill_SequenceNodeOfSequenceOfTrsf)

def Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_DownCast(AnObject)
Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_DownCast = _GeomFill.Handle_GeomFill_SequenceNodeOfSequenceOfTrsf_DownCast

class GeomFill_SequenceOfAx2(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_SequenceOfAx2_swiginit(self, _GeomFill.new_GeomFill_SequenceOfAx2(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: GeomFill_SequenceOfAx2 &
        :rtype: GeomFill_SequenceOfAx2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: GeomFill_SequenceOfAx2 &
        :rtype: GeomFill_SequenceOfAx2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: gp_Ax2
        :rtype: None

        :param S:
        :type S: GeomFill_SequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: gp_Ax2
        :rtype: None

        :param S:
        :type S: GeomFill_SequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Ax2
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomFill_SequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Ax2
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomFill_SequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_First(self, *args)


    def Last(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: GeomFill_SequenceOfAx2 &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: gp_Ax2
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Ax2

        """
        return _GeomFill.GeomFill_SequenceOfAx2_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfAx2_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SequenceOfAx2.Clear = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Clear, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Assign = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Assign, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Set = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Set, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Append = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Append, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Prepend = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Prepend, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.InsertBefore = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_InsertBefore, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.InsertAfter = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_InsertAfter, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.First = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_First, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Last = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Last, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Split = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Split, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Value = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Value, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.SetValue = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_SetValue, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.ChangeValue = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_ChangeValue, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2.Remove = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2_Remove, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SequenceOfAx2__kill_pointed, None, GeomFill_SequenceOfAx2)
GeomFill_SequenceOfAx2_swigregister = _GeomFill.GeomFill_SequenceOfAx2_swigregister
GeomFill_SequenceOfAx2_swigregister(GeomFill_SequenceOfAx2)

class GeomFill_SequenceOfTrsf(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_SequenceOfTrsf_swiginit(self, _GeomFill.new_GeomFill_SequenceOfTrsf(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: GeomFill_SequenceOfTrsf &
        :rtype: GeomFill_SequenceOfTrsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: GeomFill_SequenceOfTrsf &
        :rtype: GeomFill_SequenceOfTrsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        :param S:
        :type S: GeomFill_SequenceOfTrsf &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        :param S:
        :type S: GeomFill_SequenceOfTrsf &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Trsf
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomFill_SequenceOfTrsf &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: gp_Trsf
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomFill_SequenceOfTrsf &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_First(self, *args)


    def Last(self, *args):
        """
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: GeomFill_SequenceOfTrsf &
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: gp_Trsf
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Trsf

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _GeomFill.GeomFill_SequenceOfTrsf_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SequenceOfTrsf.Clear = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Clear, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Assign = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Assign, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Set = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Set, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Append = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Append, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Prepend = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Prepend, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.InsertBefore = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_InsertBefore, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.InsertAfter = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_InsertAfter, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.First = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_First, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Last = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Last, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Split = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Split, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Value = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Value, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.SetValue = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_SetValue, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.ChangeValue = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_ChangeValue, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf.Remove = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf_Remove, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SequenceOfTrsf__kill_pointed, None, GeomFill_SequenceOfTrsf)
GeomFill_SequenceOfTrsf_swigregister = _GeomFill.GeomFill_SequenceOfTrsf_swigregister
GeomFill_SequenceOfTrsf_swigregister(GeomFill_SequenceOfTrsf)

class GeomFill_SnglrFunc(OCC.Adaptor3d.Adaptor3d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param HC:
        :type HC: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _GeomFill.GeomFill_SnglrFunc_swiginit(self, _GeomFill.new_GeomFill_SnglrFunc(*args))

    def SetRatio(self, *args):
        """
        :param Ratio:
        :type Ratio: float
        :rtype: None

        """
        return _GeomFill.GeomFill_SnglrFunc_SetRatio(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SnglrFunc.SetRatio = new_instancemethod(_GeomFill.GeomFill_SnglrFunc_SetRatio, None, GeomFill_SnglrFunc)
GeomFill_SnglrFunc._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SnglrFunc__kill_pointed, None, GeomFill_SnglrFunc)
GeomFill_SnglrFunc_swigregister = _GeomFill.GeomFill_SnglrFunc_swigregister
GeomFill_SnglrFunc_swigregister(GeomFill_SnglrFunc)

class GeomFill_Sweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Location:
        :type Location: Handle_GeomFill_LocationLaw &
        :param WithKpart: default value is Standard_True
        :type WithKpart: bool
        :rtype: None

        """
        _GeomFill.GeomFill_Sweep_swiginit(self, _GeomFill.new_GeomFill_Sweep(*args))

    def SetDomain(self, *args):
        """
        * Set parametric information [<First>, <Last>] Sets the parametric bound of the  sweeping surface to build. <SectionFirst>, <SectionLast> gives coresponding bounds parameter on the section law of <First> and <Last> V-Iso on Sweeping Surface S(u,v) is defined by Location(v) and Section(w) where w = SectionFirst + (v - First) / (Last-First) * (SectionLast - SectionFirst) By default w = v, and First and Last are given by First and Last parameter stored in LocationLaw.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param SectionFirst:
        :type SectionFirst: float
        :param SectionLast:
        :type SectionLast: float
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_SetDomain(self, *args)


    def SetTolerance(self, *args):
        """
        * Set Approximation Tolerance Tol3d : Tolerance to surface approximation Tol2d : Tolerance used to perform curve approximation  Normaly the 2d curve are approximated with a  tolerance given by the resolution method define in  <LocationLaw> but if this tolerance is too large Tol2d  is used. TolAngular : Tolerance (in radian) to control the angle  beetween tangents on the section law and  tangent of iso-v on approximed surface

        :param Tol3d:
        :type Tol3d: float
        :param BoundTol: default value is 1.0
        :type BoundTol: float
        :param Tol2d: default value is 1.0e-5
        :type Tol2d: float
        :param TolAngular: default value is 1.0
        :type TolAngular: float
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_SetTolerance(self, *args)


    def SetForceApproxC1(self, *args):
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0.

        :param ForceApproxC1:
        :type ForceApproxC1: bool
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_SetForceApproxC1(self, *args)


    def ExchangeUV(self, *args):
        """
        * returns true if sections are U-Iso This can be produce in some cases when <WithKpart> is True.

        :rtype: bool

        """
        return _GeomFill.GeomFill_Sweep_ExchangeUV(self, *args)


    def UReversed(self, *args):
        """
        * returns true if Parametrisation sens in U is inverse of parametrisation sens of section (or of path if ExchangeUV)

        :rtype: bool

        """
        return _GeomFill.GeomFill_Sweep_UReversed(self, *args)


    def VReversed(self, *args):
        """
        * returns true if Parametrisation sens in V is inverse of parametrisation sens of path (or of section if ExchangeUV)

        :rtype: bool

        """
        return _GeomFill.GeomFill_Sweep_VReversed(self, *args)


    def Build(self, *args):
        """
        * Build the Sweeep Surface ApproxStyle defines Approximation Strategy - GeomFill_Section : The composed Function : Location X Section  is directly approximed. - GeomFill_Location : The location law is approximed, and the  SweepSurface is build algebric composition  of approximed location law and section law  This option is Ok, if Section.Surface() methode  is effective. Continuity : The continuity in v waiting on the surface Degmax : The maximum degree in v requiered on the surface Segmax : The maximum number of span in v requiered on  the surface raise If Domain are infinite or Profile not Setted.

        :param Section:
        :type Section: Handle_GeomFill_SectionLaw &
        :param Methode: default value is GeomFill_Location
        :type Methode: GeomFill_ApproxStyle
        :param Continuity: default value is GeomAbs_C2
        :type Continuity: GeomAbs_Shape
        :param Degmax: default value is 10
        :type Degmax: int
        :param Segmax: default value is 30
        :type Segmax: int
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_Build(self, *args)


    def IsDone(self, *args):
        """
        * Tells if the Surface is Buildt.

        :rtype: bool

        """
        return _GeomFill.GeomFill_Sweep_IsDone(self, *args)


    def ErrorOnSurface(self, *args):
        """
        * Gets the Approximation error.

        :rtype: float

        """
        return _GeomFill.GeomFill_Sweep_ErrorOnSurface(self, *args)


    def ErrorOnRestriction(self, *args):
        """
        * Gets the Approximation error.

        :param IsFirst:
        :type IsFirst: bool
        :param UError:
        :type UError: float &
        :param VError:
        :type VError: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_ErrorOnRestriction(self, *args)


    def ErrorOnTrace(self, *args):
        """
        * Gets the Approximation error.

        :param IndexOfTrace:
        :type IndexOfTrace: int
        :param UError:
        :type UError: float &
        :param VError:
        :type VError: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_Sweep_ErrorOnTrace(self, *args)


    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _GeomFill.GeomFill_Sweep_Surface(self, *args)


    def Restriction(self, *args):
        """
        :param IsFirst:
        :type IsFirst: bool
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomFill.GeomFill_Sweep_Restriction(self, *args)


    def NumberOfTrace(self, *args):
        """
        :rtype: int

        """
        return _GeomFill.GeomFill_Sweep_NumberOfTrace(self, *args)


    def Trace(self, *args):
        """
        :param IndexOfTrace:
        :type IndexOfTrace: int
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomFill.GeomFill_Sweep_Trace(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Sweep.SetDomain = new_instancemethod(_GeomFill.GeomFill_Sweep_SetDomain, None, GeomFill_Sweep)
GeomFill_Sweep.SetTolerance = new_instancemethod(_GeomFill.GeomFill_Sweep_SetTolerance, None, GeomFill_Sweep)
GeomFill_Sweep.SetForceApproxC1 = new_instancemethod(_GeomFill.GeomFill_Sweep_SetForceApproxC1, None, GeomFill_Sweep)
GeomFill_Sweep.ExchangeUV = new_instancemethod(_GeomFill.GeomFill_Sweep_ExchangeUV, None, GeomFill_Sweep)
GeomFill_Sweep.UReversed = new_instancemethod(_GeomFill.GeomFill_Sweep_UReversed, None, GeomFill_Sweep)
GeomFill_Sweep.VReversed = new_instancemethod(_GeomFill.GeomFill_Sweep_VReversed, None, GeomFill_Sweep)
GeomFill_Sweep.Build = new_instancemethod(_GeomFill.GeomFill_Sweep_Build, None, GeomFill_Sweep)
GeomFill_Sweep.IsDone = new_instancemethod(_GeomFill.GeomFill_Sweep_IsDone, None, GeomFill_Sweep)
GeomFill_Sweep.ErrorOnSurface = new_instancemethod(_GeomFill.GeomFill_Sweep_ErrorOnSurface, None, GeomFill_Sweep)
GeomFill_Sweep.ErrorOnRestriction = new_instancemethod(_GeomFill.GeomFill_Sweep_ErrorOnRestriction, None, GeomFill_Sweep)
GeomFill_Sweep.ErrorOnTrace = new_instancemethod(_GeomFill.GeomFill_Sweep_ErrorOnTrace, None, GeomFill_Sweep)
GeomFill_Sweep.Surface = new_instancemethod(_GeomFill.GeomFill_Sweep_Surface, None, GeomFill_Sweep)
GeomFill_Sweep.Restriction = new_instancemethod(_GeomFill.GeomFill_Sweep_Restriction, None, GeomFill_Sweep)
GeomFill_Sweep.NumberOfTrace = new_instancemethod(_GeomFill.GeomFill_Sweep_NumberOfTrace, None, GeomFill_Sweep)
GeomFill_Sweep.Trace = new_instancemethod(_GeomFill.GeomFill_Sweep_Trace, None, GeomFill_Sweep)
GeomFill_Sweep._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Sweep__kill_pointed, None, GeomFill_Sweep)
GeomFill_Sweep_swigregister = _GeomFill.GeomFill_Sweep_swigregister
GeomFill_Sweep_swigregister(GeomFill_Sweep)

class GeomFill_SweepFunction(OCC.Approx.Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Section:
        :type Section: Handle_GeomFill_SectionLaw &
        :param Location:
        :type Location: Handle_GeomFill_LocationLaw &
        :param FirstParameter:
        :type FirstParameter: float
        :param FirstParameterOnS:
        :type FirstParameterOnS: float
        :param RatioParameterOnS:
        :type RatioParameterOnS: float
        :rtype: None

        """
        _GeomFill.GeomFill_SweepFunction_swiginit(self, _GeomFill.new_GeomFill_SweepFunction(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_SweepFunction self)"""
        return _GeomFill.GeomFill_SweepFunction__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_SweepFunction self) -> Handle_GeomFill_SweepFunction"""
        return _GeomFill.GeomFill_SweepFunction_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SweepFunction._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SweepFunction__kill_pointed, None, GeomFill_SweepFunction)
GeomFill_SweepFunction.GetHandle = new_instancemethod(_GeomFill.GeomFill_SweepFunction_GetHandle, None, GeomFill_SweepFunction)
GeomFill_SweepFunction_swigregister = _GeomFill.GeomFill_SweepFunction_swigregister
GeomFill_SweepFunction_swigregister(GeomFill_SweepFunction)

class Handle_GeomFill_SweepFunction(OCC.Approx.Handle_Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_SweepFunction_swiginit(self, _GeomFill.new_Handle_GeomFill_SweepFunction(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_SweepFunction_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_SweepFunction.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_SweepFunction_Nullify, None, Handle_GeomFill_SweepFunction)
Handle_GeomFill_SweepFunction.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_SweepFunction_IsNull, None, Handle_GeomFill_SweepFunction)
Handle_GeomFill_SweepFunction.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_SweepFunction_GetObject, None, Handle_GeomFill_SweepFunction)
Handle_GeomFill_SweepFunction._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_SweepFunction__kill_pointed, None, Handle_GeomFill_SweepFunction)
Handle_GeomFill_SweepFunction_swigregister = _GeomFill.Handle_GeomFill_SweepFunction_swigregister
Handle_GeomFill_SweepFunction_swigregister(Handle_GeomFill_SweepFunction)

def Handle_GeomFill_SweepFunction_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_SweepFunction_DownCast(AnObject)
Handle_GeomFill_SweepFunction_DownCast = _GeomFill.Handle_GeomFill_SweepFunction_DownCast

class GeomFill_Tensor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbRow:
        :type NbRow: int
        :param NbCol:
        :type NbCol: int
        :param NbMat:
        :type NbMat: int
        :rtype: None

        """
        _GeomFill.GeomFill_Tensor_swiginit(self, _GeomFill.new_GeomFill_Tensor(*args))

    def Init(self, *args):
        """
        * //!Initialize all the elements of a Tensor to InitialValue.

        :param InitialValue:
        :type InitialValue: float
        :rtype: None

        """
        return _GeomFill.GeomFill_Tensor_Init(self, *args)


    def Value(self, *args):
        """
        * accesses (in read or write mode) the value of index <Row>, <Col> and <Mat> of a Tensor. An exception is raised if <Row>, <Col> or <Mat> are not in the correct range.

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Mat:
        :type Mat: int
        :rtype: float

        """
        return _GeomFill.GeomFill_Tensor_Value(self, *args)


    def ChangeValue(self, *args):
        """
        * accesses (in read or write mode) the value of index <Row>, <Col> and <Mat> of a Tensor. An exception is raised if <Row>, <Col> or <Mat> are not in the correct range.

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Mat:
        :type Mat: int
        :rtype: float

        """
        return _GeomFill.GeomFill_Tensor_ChangeValue(self, *args)


    def Multiply(self, *args):
        """
        :param Right:
        :type Right: math_Vector &
        :param Product:
        :type Product: math_Matrix &
        :rtype: None

        """
        return _GeomFill.GeomFill_Tensor_Multiply(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Tensor.Init = new_instancemethod(_GeomFill.GeomFill_Tensor_Init, None, GeomFill_Tensor)
GeomFill_Tensor.Value = new_instancemethod(_GeomFill.GeomFill_Tensor_Value, None, GeomFill_Tensor)
GeomFill_Tensor.ChangeValue = new_instancemethod(_GeomFill.GeomFill_Tensor_ChangeValue, None, GeomFill_Tensor)
GeomFill_Tensor.Multiply = new_instancemethod(_GeomFill.GeomFill_Tensor_Multiply, None, GeomFill_Tensor)
GeomFill_Tensor._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Tensor__kill_pointed, None, GeomFill_Tensor)
GeomFill_Tensor_swigregister = _GeomFill.GeomFill_Tensor_swigregister
GeomFill_Tensor_swigregister(GeomFill_Tensor)

class GeomFill_TgtField(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsScalable(self, *args):
        """
        :rtype: bool

        """
        return _GeomFill.GeomFill_TgtField_IsScalable(self, *args)


    def Scale(self, *args):
        """
        :param Func:
        :type Func: Handle_Law_BSpline &
        :rtype: void

        """
        return _GeomFill.GeomFill_TgtField_Scale(self, *args)


    def Value(self, *args):
        """
        * Computes the value of the field of tangency at parameter W.

        :param W:
        :type W: float
        :rtype: gp_Vec

        """
        return _GeomFill.GeomFill_TgtField_Value(self, *args)


    def D1(self, *args):
        """
        * Computes the derivative of the field of tangency at parameter W.

        :param W:
        :type W: float
        :rtype: gp_Vec

        * Computes the value and the derivative of the field of tangency at parameter W.

        :param W:
        :type W: float
        :param V:
        :type V: gp_Vec
        :param DV:
        :type DV: gp_Vec
        :rtype: void

        """
        return _GeomFill.GeomFill_TgtField_D1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_TgtField self)"""
        return _GeomFill.GeomFill_TgtField__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_TgtField self) -> Handle_GeomFill_TgtField"""
        return _GeomFill.GeomFill_TgtField_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_TgtField.IsScalable = new_instancemethod(_GeomFill.GeomFill_TgtField_IsScalable, None, GeomFill_TgtField)
GeomFill_TgtField.Scale = new_instancemethod(_GeomFill.GeomFill_TgtField_Scale, None, GeomFill_TgtField)
GeomFill_TgtField.Value = new_instancemethod(_GeomFill.GeomFill_TgtField_Value, None, GeomFill_TgtField)
GeomFill_TgtField.D1 = new_instancemethod(_GeomFill.GeomFill_TgtField_D1, None, GeomFill_TgtField)
GeomFill_TgtField._kill_pointed = new_instancemethod(_GeomFill.GeomFill_TgtField__kill_pointed, None, GeomFill_TgtField)
GeomFill_TgtField.GetHandle = new_instancemethod(_GeomFill.GeomFill_TgtField_GetHandle, None, GeomFill_TgtField)
GeomFill_TgtField_swigregister = _GeomFill.GeomFill_TgtField_swigregister
GeomFill_TgtField_swigregister(GeomFill_TgtField)

class Handle_GeomFill_TgtField(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_TgtField_swiginit(self, _GeomFill.new_Handle_GeomFill_TgtField(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_TgtField_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_TgtField.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_TgtField_Nullify, None, Handle_GeomFill_TgtField)
Handle_GeomFill_TgtField.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_TgtField_IsNull, None, Handle_GeomFill_TgtField)
Handle_GeomFill_TgtField.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_TgtField_GetObject, None, Handle_GeomFill_TgtField)
Handle_GeomFill_TgtField._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_TgtField__kill_pointed, None, Handle_GeomFill_TgtField)
Handle_GeomFill_TgtField_swigregister = _GeomFill.Handle_GeomFill_TgtField_swigregister
Handle_GeomFill_TgtField_swigregister(Handle_GeomFill_TgtField)

def Handle_GeomFill_TgtField_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_TgtField_DownCast(AnObject)
Handle_GeomFill_TgtField_DownCast = _GeomFill.Handle_GeomFill_TgtField_DownCast

class GeomFill_TrihedronLaw(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetCurve(self, *args):
        """
        :param C:
        :type C: Handle_Adaptor3d_HCurve &
        :rtype: void

        """
        return _GeomFill.GeomFill_TrihedronLaw_SetCurve(self, *args)


    def Copy(self, *args):
        """
        :rtype: Handle_GeomFill_TrihedronLaw

        """
        return _GeomFill.GeomFill_TrihedronLaw_Copy(self, *args)


    def ErrorStatus(self, *args):
        """
        * //!Give a status to the Law  Returns PipeOk (default implementation)

        :rtype: GeomFill_PipeError

        """
        return _GeomFill.GeomFill_TrihedronLaw_ErrorStatus(self, *args)


    def D0(self, *args):
        """
        * compute Triedrhon on curve at parameter <Param>

        :param Param:
        :type Param: float
        :param Tangent:
        :type Tangent: gp_Vec
        :param Normal:
        :type Normal: gp_Vec
        :param BiNormal:
        :type BiNormal: gp_Vec
        :rtype: bool

        """
        return _GeomFill.GeomFill_TrihedronLaw_D0(self, *args)


    def D1(self, *args):
        """
        * compute Triedrhon and derivative Trihedron on curve at parameter <Param> Warning : It used only for C1 or C2 aproximation

        :param Param:
        :type Param: float
        :param Tangent:
        :type Tangent: gp_Vec
        :param DTangent:
        :type DTangent: gp_Vec
        :param Normal:
        :type Normal: gp_Vec
        :param DNormal:
        :type DNormal: gp_Vec
        :param BiNormal:
        :type BiNormal: gp_Vec
        :param DBiNormal:
        :type DBiNormal: gp_Vec
        :rtype: bool

        """
        return _GeomFill.GeomFill_TrihedronLaw_D1(self, *args)


    def D2(self, *args):
        """
        * compute Trihedron on curve first and seconde derivatives. Warning : It used only for C2 aproximation

        :param Param:
        :type Param: float
        :param Tangent:
        :type Tangent: gp_Vec
        :param DTangent:
        :type DTangent: gp_Vec
        :param D2Tangent:
        :type D2Tangent: gp_Vec
        :param Normal:
        :type Normal: gp_Vec
        :param DNormal:
        :type DNormal: gp_Vec
        :param D2Normal:
        :type D2Normal: gp_Vec
        :param BiNormal:
        :type BiNormal: gp_Vec
        :param DBiNormal:
        :type DBiNormal: gp_Vec
        :param D2BiNormal:
        :type D2BiNormal: gp_Vec
        :rtype: bool

        """
        return _GeomFill.GeomFill_TrihedronLaw_D2(self, *args)


    def NbIntervals(self, *args):
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>

        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _GeomFill.GeomFill_TrihedronLaw_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.  The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()

        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _GeomFill.GeomFill_TrihedronLaw_Intervals(self, *args)


    def SetInterval(self, *args):
        """
        * Sets the bounds of the parametric interval on the function This determines the derivatives in these values if the function is not Cn.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: void

        """
        return _GeomFill.GeomFill_TrihedronLaw_SetInterval(self, *args)


    def GetInterval(self, *args):
        """
        * Gets the bounds of the parametric interval on the function

        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_TrihedronLaw_GetInterval(self, *args)


    def GetAverageLaw(self, *args):
        """
        * Get average value of M(t) and V(t) it is usfull to make fast approximation of rational surfaces.

        :param ATangent:
        :type ATangent: gp_Vec
        :param ANormal:
        :type ANormal: gp_Vec
        :param ABiNormal:
        :type ABiNormal: gp_Vec
        :rtype: void

        """
        return _GeomFill.GeomFill_TrihedronLaw_GetAverageLaw(self, *args)


    def IsConstant(self, *args):
        """
        * Say if the law is Constant

        :rtype: bool

        """
        return _GeomFill.GeomFill_TrihedronLaw_IsConstant(self, *args)


    def IsOnlyBy3dCurve(self, *args):
        """
        * Say if the law is defined, only by the 3d Geometry of the setted Curve Return False by Default.

        :rtype: bool

        """
        return _GeomFill.GeomFill_TrihedronLaw_IsOnlyBy3dCurve(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_TrihedronLaw self)"""
        return _GeomFill.GeomFill_TrihedronLaw__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_TrihedronLaw self) -> Handle_GeomFill_TrihedronLaw"""
        return _GeomFill.GeomFill_TrihedronLaw_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_TrihedronLaw.SetCurve = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_SetCurve, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.Copy = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_Copy, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.ErrorStatus = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_ErrorStatus, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.D0 = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_D0, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.D1 = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_D1, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.D2 = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_D2, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.NbIntervals = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_NbIntervals, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.Intervals = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_Intervals, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.SetInterval = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_SetInterval, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.GetInterval = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_GetInterval, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.GetAverageLaw = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_GetAverageLaw, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.IsConstant = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_IsConstant, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.IsOnlyBy3dCurve = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_IsOnlyBy3dCurve, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw._kill_pointed = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw__kill_pointed, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw.GetHandle = new_instancemethod(_GeomFill.GeomFill_TrihedronLaw_GetHandle, None, GeomFill_TrihedronLaw)
GeomFill_TrihedronLaw_swigregister = _GeomFill.GeomFill_TrihedronLaw_swigregister
GeomFill_TrihedronLaw_swigregister(GeomFill_TrihedronLaw)

class Handle_GeomFill_TrihedronLaw(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_TrihedronLaw_swiginit(self, _GeomFill.new_Handle_GeomFill_TrihedronLaw(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_TrihedronLaw_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_TrihedronLaw.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronLaw_Nullify, None, Handle_GeomFill_TrihedronLaw)
Handle_GeomFill_TrihedronLaw.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronLaw_IsNull, None, Handle_GeomFill_TrihedronLaw)
Handle_GeomFill_TrihedronLaw.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronLaw_GetObject, None, Handle_GeomFill_TrihedronLaw)
Handle_GeomFill_TrihedronLaw._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronLaw__kill_pointed, None, Handle_GeomFill_TrihedronLaw)
Handle_GeomFill_TrihedronLaw_swigregister = _GeomFill.Handle_GeomFill_TrihedronLaw_swigregister
Handle_GeomFill_TrihedronLaw_swigregister(Handle_GeomFill_TrihedronLaw)

def Handle_GeomFill_TrihedronLaw_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_TrihedronLaw_DownCast(AnObject)
Handle_GeomFill_TrihedronLaw_DownCast = _GeomFill.Handle_GeomFill_TrihedronLaw_DownCast

class GeomFill_BoundWithSurf(GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a boundary object defined by the 3d curve CurveOnSurf. The surface to be filled along this boundary will be in the tolerance range defined by Tol3d. What's more, at each point of CurveOnSurf, the angle between the normal to the surface to be filled along this boundary, and the normal to the surface on which CurveOnSurf lies, must not be greater than TolAng. This object is to be used as a boundary for a GeomFill_ConstrainedFilling framework. Warning CurveOnSurf is an adapted curve, that is, an object which is an interface between: - the services provided by a curve lying on a surface from the package Geom - and those required of the curve by the computation algorithm which uses it. The adapted curve is created in the following way: Handle_Geom_Surface mySurface = ... ; Handle_Geom2d_Curve myParamCurve = ... ; // where myParamCurve is a 2D curve in the parametric space of the surface mySurface Handle_GeomAdaptor_HSurface Surface = new GeomAdaptor_HSurface(mySurface); Handle_Geom2dAdaptor_HCurve ParamCurve = new Geom2dAdaptor_HCurve(myParamCurve); CurveOnSurf = Adaptor3d_CurveOnSurface(ParamCurve,Surface); The boundary is then constructed with the CurveOnSurf object: Standard_Real Tol = ... ; Standard_Real TolAng = ... ; myBoundary = GeomFill_BoundWithSurf ( CurveOnSurf, Tol, TolAng );

        :param CurveOnSurf:
        :type CurveOnSurf: Adaptor3d_CurveOnSurface &
        :param Tol3d:
        :type Tol3d: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        """
        _GeomFill.GeomFill_BoundWithSurf_swiginit(self, _GeomFill.new_GeomFill_BoundWithSurf(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_BoundWithSurf self)"""
        return _GeomFill.GeomFill_BoundWithSurf__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_BoundWithSurf self) -> Handle_GeomFill_BoundWithSurf"""
        return _GeomFill.GeomFill_BoundWithSurf_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_BoundWithSurf._kill_pointed = new_instancemethod(_GeomFill.GeomFill_BoundWithSurf__kill_pointed, None, GeomFill_BoundWithSurf)
GeomFill_BoundWithSurf.GetHandle = new_instancemethod(_GeomFill.GeomFill_BoundWithSurf_GetHandle, None, GeomFill_BoundWithSurf)
GeomFill_BoundWithSurf_swigregister = _GeomFill.GeomFill_BoundWithSurf_swigregister
GeomFill_BoundWithSurf_swigregister(GeomFill_BoundWithSurf)

class Handle_GeomFill_BoundWithSurf(Handle_GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_BoundWithSurf_swiginit(self, _GeomFill.new_Handle_GeomFill_BoundWithSurf(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_BoundWithSurf_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_BoundWithSurf.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_BoundWithSurf_Nullify, None, Handle_GeomFill_BoundWithSurf)
Handle_GeomFill_BoundWithSurf.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_BoundWithSurf_IsNull, None, Handle_GeomFill_BoundWithSurf)
Handle_GeomFill_BoundWithSurf.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_BoundWithSurf_GetObject, None, Handle_GeomFill_BoundWithSurf)
Handle_GeomFill_BoundWithSurf._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_BoundWithSurf__kill_pointed, None, Handle_GeomFill_BoundWithSurf)
Handle_GeomFill_BoundWithSurf_swigregister = _GeomFill.Handle_GeomFill_BoundWithSurf_swigregister
Handle_GeomFill_BoundWithSurf_swigregister(Handle_GeomFill_BoundWithSurf)

def Handle_GeomFill_BoundWithSurf_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_BoundWithSurf_DownCast(AnObject)
Handle_GeomFill_BoundWithSurf_DownCast = _GeomFill.Handle_GeomFill_BoundWithSurf_DownCast

class GeomFill_ConstantBiNormal(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param BiNormal:
        :type BiNormal: gp_Dir
        :rtype: None

        """
        _GeomFill.GeomFill_ConstantBiNormal_swiginit(self, _GeomFill.new_GeomFill_ConstantBiNormal(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_ConstantBiNormal self)"""
        return _GeomFill.GeomFill_ConstantBiNormal__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_ConstantBiNormal self) -> Handle_GeomFill_ConstantBiNormal"""
        return _GeomFill.GeomFill_ConstantBiNormal_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_ConstantBiNormal._kill_pointed = new_instancemethod(_GeomFill.GeomFill_ConstantBiNormal__kill_pointed, None, GeomFill_ConstantBiNormal)
GeomFill_ConstantBiNormal.GetHandle = new_instancemethod(_GeomFill.GeomFill_ConstantBiNormal_GetHandle, None, GeomFill_ConstantBiNormal)
GeomFill_ConstantBiNormal_swigregister = _GeomFill.GeomFill_ConstantBiNormal_swigregister
GeomFill_ConstantBiNormal_swigregister(GeomFill_ConstantBiNormal)

class Handle_GeomFill_ConstantBiNormal(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_ConstantBiNormal_swiginit(self, _GeomFill.new_Handle_GeomFill_ConstantBiNormal(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_ConstantBiNormal_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_ConstantBiNormal.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_ConstantBiNormal_Nullify, None, Handle_GeomFill_ConstantBiNormal)
Handle_GeomFill_ConstantBiNormal.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_ConstantBiNormal_IsNull, None, Handle_GeomFill_ConstantBiNormal)
Handle_GeomFill_ConstantBiNormal.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_ConstantBiNormal_GetObject, None, Handle_GeomFill_ConstantBiNormal)
Handle_GeomFill_ConstantBiNormal._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_ConstantBiNormal__kill_pointed, None, Handle_GeomFill_ConstantBiNormal)
Handle_GeomFill_ConstantBiNormal_swigregister = _GeomFill.Handle_GeomFill_ConstantBiNormal_swigregister
Handle_GeomFill_ConstantBiNormal_swigregister(Handle_GeomFill_ConstantBiNormal)

def Handle_GeomFill_ConstantBiNormal_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_ConstantBiNormal_DownCast(AnObject)
Handle_GeomFill_ConstantBiNormal_DownCast = _GeomFill.Handle_GeomFill_ConstantBiNormal_DownCast

class GeomFill_Coons(GeomFill_Filling):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        """
        _GeomFill.GeomFill_Coons_swiginit(self, _GeomFill.new_GeomFill_Coons(*args))

    def Init(self, *args):
        """
        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_Coons_Init(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Coons.Init = new_instancemethod(_GeomFill.GeomFill_Coons_Init, None, GeomFill_Coons)
GeomFill_Coons._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Coons__kill_pointed, None, GeomFill_Coons)
GeomFill_Coons_swigregister = _GeomFill.GeomFill_Coons_swigregister
GeomFill_Coons_swigregister(GeomFill_Coons)

class GeomFill_CorrectedFrenet(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param ForEvaluation:
        :type ForEvaluation: bool
        :rtype: None

        """
        _GeomFill.GeomFill_CorrectedFrenet_swiginit(self, _GeomFill.new_GeomFill_CorrectedFrenet(*args))

    def EvaluateBestMode(self, *args):
        """
        * Tries to define the best trihedron mode for the curve. It can be: - Frenet - CorrectedFrenet - DiscreteTrihedron Warning: the CorrectedFrenet must be constructed with option ForEvaluation = True, the curve must be set by method SetCurve.

        :rtype: GeomFill_Trihedron

        """
        return _GeomFill.GeomFill_CorrectedFrenet_EvaluateBestMode(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_CorrectedFrenet self)"""
        return _GeomFill.GeomFill_CorrectedFrenet__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_CorrectedFrenet self) -> Handle_GeomFill_CorrectedFrenet"""
        return _GeomFill.GeomFill_CorrectedFrenet_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_CorrectedFrenet.EvaluateBestMode = new_instancemethod(_GeomFill.GeomFill_CorrectedFrenet_EvaluateBestMode, None, GeomFill_CorrectedFrenet)
GeomFill_CorrectedFrenet._kill_pointed = new_instancemethod(_GeomFill.GeomFill_CorrectedFrenet__kill_pointed, None, GeomFill_CorrectedFrenet)
GeomFill_CorrectedFrenet.GetHandle = new_instancemethod(_GeomFill.GeomFill_CorrectedFrenet_GetHandle, None, GeomFill_CorrectedFrenet)
GeomFill_CorrectedFrenet_swigregister = _GeomFill.GeomFill_CorrectedFrenet_swigregister
GeomFill_CorrectedFrenet_swigregister(GeomFill_CorrectedFrenet)

class Handle_GeomFill_CorrectedFrenet(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_CorrectedFrenet_swiginit(self, _GeomFill.new_Handle_GeomFill_CorrectedFrenet(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_CorrectedFrenet_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_CorrectedFrenet.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_CorrectedFrenet_Nullify, None, Handle_GeomFill_CorrectedFrenet)
Handle_GeomFill_CorrectedFrenet.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_CorrectedFrenet_IsNull, None, Handle_GeomFill_CorrectedFrenet)
Handle_GeomFill_CorrectedFrenet.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_CorrectedFrenet_GetObject, None, Handle_GeomFill_CorrectedFrenet)
Handle_GeomFill_CorrectedFrenet._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_CorrectedFrenet__kill_pointed, None, Handle_GeomFill_CorrectedFrenet)
Handle_GeomFill_CorrectedFrenet_swigregister = _GeomFill.Handle_GeomFill_CorrectedFrenet_swigregister
Handle_GeomFill_CorrectedFrenet_swigregister(Handle_GeomFill_CorrectedFrenet)

def Handle_GeomFill_CorrectedFrenet_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_CorrectedFrenet_DownCast(AnObject)
Handle_GeomFill_CorrectedFrenet_DownCast = _GeomFill.Handle_GeomFill_CorrectedFrenet_DownCast

class GeomFill_CurveAndTrihedron(GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Trihedron:
        :type Trihedron: Handle_GeomFill_TrihedronLaw &
        :rtype: None

        """
        _GeomFill.GeomFill_CurveAndTrihedron_swiginit(self, _GeomFill.new_GeomFill_CurveAndTrihedron(*args))

    def D0(self, *args):
        """
        * compute Location and 2d points

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :rtype: bool

        * compute Location and 2d points

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_CurveAndTrihedron_D0(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_CurveAndTrihedron self)"""
        return _GeomFill.GeomFill_CurveAndTrihedron__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_CurveAndTrihedron self) -> Handle_GeomFill_CurveAndTrihedron"""
        return _GeomFill.GeomFill_CurveAndTrihedron_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_CurveAndTrihedron.D0 = new_instancemethod(_GeomFill.GeomFill_CurveAndTrihedron_D0, None, GeomFill_CurveAndTrihedron)
GeomFill_CurveAndTrihedron._kill_pointed = new_instancemethod(_GeomFill.GeomFill_CurveAndTrihedron__kill_pointed, None, GeomFill_CurveAndTrihedron)
GeomFill_CurveAndTrihedron.GetHandle = new_instancemethod(_GeomFill.GeomFill_CurveAndTrihedron_GetHandle, None, GeomFill_CurveAndTrihedron)
GeomFill_CurveAndTrihedron_swigregister = _GeomFill.GeomFill_CurveAndTrihedron_swigregister
GeomFill_CurveAndTrihedron_swigregister(GeomFill_CurveAndTrihedron)

class Handle_GeomFill_CurveAndTrihedron(Handle_GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_CurveAndTrihedron_swiginit(self, _GeomFill.new_Handle_GeomFill_CurveAndTrihedron(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_CurveAndTrihedron_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_CurveAndTrihedron.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_CurveAndTrihedron_Nullify, None, Handle_GeomFill_CurveAndTrihedron)
Handle_GeomFill_CurveAndTrihedron.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_CurveAndTrihedron_IsNull, None, Handle_GeomFill_CurveAndTrihedron)
Handle_GeomFill_CurveAndTrihedron.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_CurveAndTrihedron_GetObject, None, Handle_GeomFill_CurveAndTrihedron)
Handle_GeomFill_CurveAndTrihedron._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_CurveAndTrihedron__kill_pointed, None, Handle_GeomFill_CurveAndTrihedron)
Handle_GeomFill_CurveAndTrihedron_swigregister = _GeomFill.Handle_GeomFill_CurveAndTrihedron_swigregister
Handle_GeomFill_CurveAndTrihedron_swigregister(Handle_GeomFill_CurveAndTrihedron)

def Handle_GeomFill_CurveAndTrihedron_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_CurveAndTrihedron_DownCast(AnObject)
Handle_GeomFill_CurveAndTrihedron_DownCast = _GeomFill.Handle_GeomFill_CurveAndTrihedron_DownCast

class GeomFill_Curved(GeomFill_Filling):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :rtype: None

        """
        _GeomFill.GeomFill_Curved_swiginit(self, _GeomFill.new_GeomFill_Curved(*args))

    def Init(self, *args):
        """
        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_Curved_Init(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Curved.Init = new_instancemethod(_GeomFill.GeomFill_Curved_Init, None, GeomFill_Curved)
GeomFill_Curved._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Curved__kill_pointed, None, GeomFill_Curved)
GeomFill_Curved_swigregister = _GeomFill.GeomFill_Curved_swigregister
GeomFill_Curved_swigregister(GeomFill_Curved)

class GeomFill_Darboux(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_Darboux_swiginit(self, _GeomFill.new_GeomFill_Darboux(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_Darboux self)"""
        return _GeomFill.GeomFill_Darboux__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_Darboux self) -> Handle_GeomFill_Darboux"""
        return _GeomFill.GeomFill_Darboux_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Darboux._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Darboux__kill_pointed, None, GeomFill_Darboux)
GeomFill_Darboux.GetHandle = new_instancemethod(_GeomFill.GeomFill_Darboux_GetHandle, None, GeomFill_Darboux)
GeomFill_Darboux_swigregister = _GeomFill.GeomFill_Darboux_swigregister
GeomFill_Darboux_swigregister(GeomFill_Darboux)

class Handle_GeomFill_Darboux(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_Darboux_swiginit(self, _GeomFill.new_Handle_GeomFill_Darboux(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_Darboux_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_Darboux.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_Darboux_Nullify, None, Handle_GeomFill_Darboux)
Handle_GeomFill_Darboux.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_Darboux_IsNull, None, Handle_GeomFill_Darboux)
Handle_GeomFill_Darboux.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_Darboux_GetObject, None, Handle_GeomFill_Darboux)
Handle_GeomFill_Darboux._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_Darboux__kill_pointed, None, Handle_GeomFill_Darboux)
Handle_GeomFill_Darboux_swigregister = _GeomFill.Handle_GeomFill_Darboux_swigregister
Handle_GeomFill_Darboux_swigregister(Handle_GeomFill_Darboux)

def Handle_GeomFill_Darboux_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_Darboux_DownCast(AnObject)
Handle_GeomFill_Darboux_DownCast = _GeomFill.Handle_GeomFill_Darboux_DownCast

class GeomFill_DegeneratedBound(GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Point:
        :type Point: gp_Pnt
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Tol3d:
        :type Tol3d: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        """
        _GeomFill.GeomFill_DegeneratedBound_swiginit(self, _GeomFill.new_GeomFill_DegeneratedBound(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_DegeneratedBound self)"""
        return _GeomFill.GeomFill_DegeneratedBound__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_DegeneratedBound self) -> Handle_GeomFill_DegeneratedBound"""
        return _GeomFill.GeomFill_DegeneratedBound_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_DegeneratedBound._kill_pointed = new_instancemethod(_GeomFill.GeomFill_DegeneratedBound__kill_pointed, None, GeomFill_DegeneratedBound)
GeomFill_DegeneratedBound.GetHandle = new_instancemethod(_GeomFill.GeomFill_DegeneratedBound_GetHandle, None, GeomFill_DegeneratedBound)
GeomFill_DegeneratedBound_swigregister = _GeomFill.GeomFill_DegeneratedBound_swigregister
GeomFill_DegeneratedBound_swigregister(GeomFill_DegeneratedBound)

class Handle_GeomFill_DegeneratedBound(Handle_GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_DegeneratedBound_swiginit(self, _GeomFill.new_Handle_GeomFill_DegeneratedBound(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_DegeneratedBound_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_DegeneratedBound.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_DegeneratedBound_Nullify, None, Handle_GeomFill_DegeneratedBound)
Handle_GeomFill_DegeneratedBound.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_DegeneratedBound_IsNull, None, Handle_GeomFill_DegeneratedBound)
Handle_GeomFill_DegeneratedBound.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_DegeneratedBound_GetObject, None, Handle_GeomFill_DegeneratedBound)
Handle_GeomFill_DegeneratedBound._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_DegeneratedBound__kill_pointed, None, Handle_GeomFill_DegeneratedBound)
Handle_GeomFill_DegeneratedBound_swigregister = _GeomFill.Handle_GeomFill_DegeneratedBound_swigregister
Handle_GeomFill_DegeneratedBound_swigregister(Handle_GeomFill_DegeneratedBound)

def Handle_GeomFill_DegeneratedBound_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_DegeneratedBound_DownCast(AnObject)
Handle_GeomFill_DegeneratedBound_DownCast = _GeomFill.Handle_GeomFill_DegeneratedBound_DownCast

class GeomFill_DiscreteTrihedron(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_DiscreteTrihedron_swiginit(self, _GeomFill.new_GeomFill_DiscreteTrihedron(*args))

    def Init(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_DiscreteTrihedron_Init(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_DiscreteTrihedron self)"""
        return _GeomFill.GeomFill_DiscreteTrihedron__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_DiscreteTrihedron self) -> Handle_GeomFill_DiscreteTrihedron"""
        return _GeomFill.GeomFill_DiscreteTrihedron_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_DiscreteTrihedron.Init = new_instancemethod(_GeomFill.GeomFill_DiscreteTrihedron_Init, None, GeomFill_DiscreteTrihedron)
GeomFill_DiscreteTrihedron._kill_pointed = new_instancemethod(_GeomFill.GeomFill_DiscreteTrihedron__kill_pointed, None, GeomFill_DiscreteTrihedron)
GeomFill_DiscreteTrihedron.GetHandle = new_instancemethod(_GeomFill.GeomFill_DiscreteTrihedron_GetHandle, None, GeomFill_DiscreteTrihedron)
GeomFill_DiscreteTrihedron_swigregister = _GeomFill.GeomFill_DiscreteTrihedron_swigregister
GeomFill_DiscreteTrihedron_swigregister(GeomFill_DiscreteTrihedron)

class Handle_GeomFill_DiscreteTrihedron(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_DiscreteTrihedron_swiginit(self, _GeomFill.new_Handle_GeomFill_DiscreteTrihedron(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_DiscreteTrihedron_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_DiscreteTrihedron.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_DiscreteTrihedron_Nullify, None, Handle_GeomFill_DiscreteTrihedron)
Handle_GeomFill_DiscreteTrihedron.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_DiscreteTrihedron_IsNull, None, Handle_GeomFill_DiscreteTrihedron)
Handle_GeomFill_DiscreteTrihedron.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_DiscreteTrihedron_GetObject, None, Handle_GeomFill_DiscreteTrihedron)
Handle_GeomFill_DiscreteTrihedron._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_DiscreteTrihedron__kill_pointed, None, Handle_GeomFill_DiscreteTrihedron)
Handle_GeomFill_DiscreteTrihedron_swigregister = _GeomFill.Handle_GeomFill_DiscreteTrihedron_swigregister
Handle_GeomFill_DiscreteTrihedron_swigregister(Handle_GeomFill_DiscreteTrihedron)

def Handle_GeomFill_DiscreteTrihedron_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_DiscreteTrihedron_DownCast(AnObject)
Handle_GeomFill_DiscreteTrihedron_DownCast = _GeomFill.Handle_GeomFill_DiscreteTrihedron_DownCast

class GeomFill_DraftTrihedron(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param BiNormal:
        :type BiNormal: gp_Vec
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _GeomFill.GeomFill_DraftTrihedron_swiginit(self, _GeomFill.new_GeomFill_DraftTrihedron(*args))

    def SetAngle(self, *args):
        """
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        return _GeomFill.GeomFill_DraftTrihedron_SetAngle(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_DraftTrihedron self)"""
        return _GeomFill.GeomFill_DraftTrihedron__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_DraftTrihedron self) -> Handle_GeomFill_DraftTrihedron"""
        return _GeomFill.GeomFill_DraftTrihedron_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_DraftTrihedron.SetAngle = new_instancemethod(_GeomFill.GeomFill_DraftTrihedron_SetAngle, None, GeomFill_DraftTrihedron)
GeomFill_DraftTrihedron._kill_pointed = new_instancemethod(_GeomFill.GeomFill_DraftTrihedron__kill_pointed, None, GeomFill_DraftTrihedron)
GeomFill_DraftTrihedron.GetHandle = new_instancemethod(_GeomFill.GeomFill_DraftTrihedron_GetHandle, None, GeomFill_DraftTrihedron)
GeomFill_DraftTrihedron_swigregister = _GeomFill.GeomFill_DraftTrihedron_swigregister
GeomFill_DraftTrihedron_swigregister(GeomFill_DraftTrihedron)

class Handle_GeomFill_DraftTrihedron(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_DraftTrihedron_swiginit(self, _GeomFill.new_Handle_GeomFill_DraftTrihedron(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_DraftTrihedron_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_DraftTrihedron.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_DraftTrihedron_Nullify, None, Handle_GeomFill_DraftTrihedron)
Handle_GeomFill_DraftTrihedron.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_DraftTrihedron_IsNull, None, Handle_GeomFill_DraftTrihedron)
Handle_GeomFill_DraftTrihedron.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_DraftTrihedron_GetObject, None, Handle_GeomFill_DraftTrihedron)
Handle_GeomFill_DraftTrihedron._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_DraftTrihedron__kill_pointed, None, Handle_GeomFill_DraftTrihedron)
Handle_GeomFill_DraftTrihedron_swigregister = _GeomFill.Handle_GeomFill_DraftTrihedron_swigregister
Handle_GeomFill_DraftTrihedron_swigregister(Handle_GeomFill_DraftTrihedron)

def Handle_GeomFill_DraftTrihedron_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_DraftTrihedron_DownCast(AnObject)
Handle_GeomFill_DraftTrihedron_DownCast = _GeomFill.Handle_GeomFill_DraftTrihedron_DownCast

class GeomFill_EvolvedSection(GeomFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make an SectionLaw with a Curve and a real Law.

        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: Handle_Law_Function &
        :rtype: None

        """
        _GeomFill.GeomFill_EvolvedSection_swiginit(self, _GeomFill.new_GeomFill_EvolvedSection(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_EvolvedSection self)"""
        return _GeomFill.GeomFill_EvolvedSection__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_EvolvedSection self) -> Handle_GeomFill_EvolvedSection"""
        return _GeomFill.GeomFill_EvolvedSection_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_EvolvedSection._kill_pointed = new_instancemethod(_GeomFill.GeomFill_EvolvedSection__kill_pointed, None, GeomFill_EvolvedSection)
GeomFill_EvolvedSection.GetHandle = new_instancemethod(_GeomFill.GeomFill_EvolvedSection_GetHandle, None, GeomFill_EvolvedSection)
GeomFill_EvolvedSection_swigregister = _GeomFill.GeomFill_EvolvedSection_swigregister
GeomFill_EvolvedSection_swigregister(GeomFill_EvolvedSection)

class Handle_GeomFill_EvolvedSection(Handle_GeomFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_EvolvedSection_swiginit(self, _GeomFill.new_Handle_GeomFill_EvolvedSection(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_EvolvedSection_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_EvolvedSection.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_EvolvedSection_Nullify, None, Handle_GeomFill_EvolvedSection)
Handle_GeomFill_EvolvedSection.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_EvolvedSection_IsNull, None, Handle_GeomFill_EvolvedSection)
Handle_GeomFill_EvolvedSection.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_EvolvedSection_GetObject, None, Handle_GeomFill_EvolvedSection)
Handle_GeomFill_EvolvedSection._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_EvolvedSection__kill_pointed, None, Handle_GeomFill_EvolvedSection)
Handle_GeomFill_EvolvedSection_swigregister = _GeomFill.Handle_GeomFill_EvolvedSection_swigregister
Handle_GeomFill_EvolvedSection_swigregister(Handle_GeomFill_EvolvedSection)

def Handle_GeomFill_EvolvedSection_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_EvolvedSection_DownCast(AnObject)
Handle_GeomFill_EvolvedSection_DownCast = _GeomFill.Handle_GeomFill_EvolvedSection_DownCast

class GeomFill_Fixed(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Tangent:
        :type Tangent: gp_Vec
        :param Normal:
        :type Normal: gp_Vec
        :rtype: None

        """
        _GeomFill.GeomFill_Fixed_swiginit(self, _GeomFill.new_GeomFill_Fixed(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_Fixed self)"""
        return _GeomFill.GeomFill_Fixed__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_Fixed self) -> Handle_GeomFill_Fixed"""
        return _GeomFill.GeomFill_Fixed_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Fixed._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Fixed__kill_pointed, None, GeomFill_Fixed)
GeomFill_Fixed.GetHandle = new_instancemethod(_GeomFill.GeomFill_Fixed_GetHandle, None, GeomFill_Fixed)
GeomFill_Fixed_swigregister = _GeomFill.GeomFill_Fixed_swigregister
GeomFill_Fixed_swigregister(GeomFill_Fixed)

class Handle_GeomFill_Fixed(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_Fixed_swiginit(self, _GeomFill.new_Handle_GeomFill_Fixed(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_Fixed_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_Fixed.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_Fixed_Nullify, None, Handle_GeomFill_Fixed)
Handle_GeomFill_Fixed.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_Fixed_IsNull, None, Handle_GeomFill_Fixed)
Handle_GeomFill_Fixed.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_Fixed_GetObject, None, Handle_GeomFill_Fixed)
Handle_GeomFill_Fixed._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_Fixed__kill_pointed, None, Handle_GeomFill_Fixed)
Handle_GeomFill_Fixed_swigregister = _GeomFill.Handle_GeomFill_Fixed_swigregister
Handle_GeomFill_Fixed_swigregister(Handle_GeomFill_Fixed)

def Handle_GeomFill_Fixed_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_Fixed_DownCast(AnObject)
Handle_GeomFill_Fixed_DownCast = _GeomFill.Handle_GeomFill_Fixed_DownCast

class GeomFill_Frenet(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_Frenet_swiginit(self, _GeomFill.new_GeomFill_Frenet(*args))

    def Init(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_Frenet_Init(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_Frenet self)"""
        return _GeomFill.GeomFill_Frenet__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_Frenet self) -> Handle_GeomFill_Frenet"""
        return _GeomFill.GeomFill_Frenet_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Frenet.Init = new_instancemethod(_GeomFill.GeomFill_Frenet_Init, None, GeomFill_Frenet)
GeomFill_Frenet._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Frenet__kill_pointed, None, GeomFill_Frenet)
GeomFill_Frenet.GetHandle = new_instancemethod(_GeomFill.GeomFill_Frenet_GetHandle, None, GeomFill_Frenet)
GeomFill_Frenet_swigregister = _GeomFill.GeomFill_Frenet_swigregister
GeomFill_Frenet_swigregister(GeomFill_Frenet)

class Handle_GeomFill_Frenet(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_Frenet_swiginit(self, _GeomFill.new_Handle_GeomFill_Frenet(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_Frenet_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_Frenet.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_Frenet_Nullify, None, Handle_GeomFill_Frenet)
Handle_GeomFill_Frenet.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_Frenet_IsNull, None, Handle_GeomFill_Frenet)
Handle_GeomFill_Frenet.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_Frenet_GetObject, None, Handle_GeomFill_Frenet)
Handle_GeomFill_Frenet._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_Frenet__kill_pointed, None, Handle_GeomFill_Frenet)
Handle_GeomFill_Frenet_swigregister = _GeomFill.Handle_GeomFill_Frenet_swigregister
Handle_GeomFill_Frenet_swigregister(Handle_GeomFill_Frenet)

def Handle_GeomFill_Frenet_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_Frenet_DownCast(AnObject)
Handle_GeomFill_Frenet_DownCast = _GeomFill.Handle_GeomFill_Frenet_DownCast

class GeomFill_Generator(GeomFill_Profiler):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_Generator_swiginit(self, _GeomFill.new_GeomFill_Generator(*args))

    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _GeomFill.GeomFill_Generator_Surface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Generator.Surface = new_instancemethod(_GeomFill.GeomFill_Generator_Surface, None, GeomFill_Generator)
GeomFill_Generator._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Generator__kill_pointed, None, GeomFill_Generator)
GeomFill_Generator_swigregister = _GeomFill.GeomFill_Generator_swigregister
GeomFill_Generator_swigregister(GeomFill_Generator)

class GeomFill_LocationDraft(GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Direction:
        :type Direction: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _GeomFill.GeomFill_LocationDraft_swiginit(self, _GeomFill.new_GeomFill_LocationDraft(*args))

    def SetStopSurf(self, *args):
        """
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        return _GeomFill.GeomFill_LocationDraft_SetStopSurf(self, *args)


    def SetAngle(self, *args):
        """
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        return _GeomFill.GeomFill_LocationDraft_SetAngle(self, *args)


    def D0(self, *args):
        """
        * compute Location

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :rtype: bool

        * compute Location and 2d points

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationDraft_D0(self, *args)


    def IsIntersec(self, *args):
        """
        * Say if the generatrice interset the surface

        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationDraft_IsIntersec(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _GeomFill.GeomFill_LocationDraft_Direction(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_LocationDraft self)"""
        return _GeomFill.GeomFill_LocationDraft__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_LocationDraft self) -> Handle_GeomFill_LocationDraft"""
        return _GeomFill.GeomFill_LocationDraft_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_LocationDraft.SetStopSurf = new_instancemethod(_GeomFill.GeomFill_LocationDraft_SetStopSurf, None, GeomFill_LocationDraft)
GeomFill_LocationDraft.SetAngle = new_instancemethod(_GeomFill.GeomFill_LocationDraft_SetAngle, None, GeomFill_LocationDraft)
GeomFill_LocationDraft.D0 = new_instancemethod(_GeomFill.GeomFill_LocationDraft_D0, None, GeomFill_LocationDraft)
GeomFill_LocationDraft.IsIntersec = new_instancemethod(_GeomFill.GeomFill_LocationDraft_IsIntersec, None, GeomFill_LocationDraft)
GeomFill_LocationDraft.Direction = new_instancemethod(_GeomFill.GeomFill_LocationDraft_Direction, None, GeomFill_LocationDraft)
GeomFill_LocationDraft._kill_pointed = new_instancemethod(_GeomFill.GeomFill_LocationDraft__kill_pointed, None, GeomFill_LocationDraft)
GeomFill_LocationDraft.GetHandle = new_instancemethod(_GeomFill.GeomFill_LocationDraft_GetHandle, None, GeomFill_LocationDraft)
GeomFill_LocationDraft_swigregister = _GeomFill.GeomFill_LocationDraft_swigregister
GeomFill_LocationDraft_swigregister(GeomFill_LocationDraft)

class Handle_GeomFill_LocationDraft(Handle_GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_LocationDraft_swiginit(self, _GeomFill.new_Handle_GeomFill_LocationDraft(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_LocationDraft_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_LocationDraft.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_LocationDraft_Nullify, None, Handle_GeomFill_LocationDraft)
Handle_GeomFill_LocationDraft.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_LocationDraft_IsNull, None, Handle_GeomFill_LocationDraft)
Handle_GeomFill_LocationDraft.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_LocationDraft_GetObject, None, Handle_GeomFill_LocationDraft)
Handle_GeomFill_LocationDraft._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_LocationDraft__kill_pointed, None, Handle_GeomFill_LocationDraft)
Handle_GeomFill_LocationDraft_swigregister = _GeomFill.Handle_GeomFill_LocationDraft_swigregister
Handle_GeomFill_LocationDraft_swigregister(Handle_GeomFill_LocationDraft)

def Handle_GeomFill_LocationDraft_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_LocationDraft_DownCast(AnObject)
Handle_GeomFill_LocationDraft_DownCast = _GeomFill.Handle_GeomFill_LocationDraft_DownCast

class GeomFill_LocationGuide(GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Triedre:
        :type Triedre: Handle_GeomFill_TrihedronWithGuide &
        :rtype: None

        """
        _GeomFill.GeomFill_LocationGuide_swiginit(self, _GeomFill.new_GeomFill_LocationGuide(*args))

    def Set(self, *args):
        """
        :param Section:
        :type Section: Handle_GeomFill_SectionLaw &
        :param rotat:
        :type rotat: bool
        :param SFirst:
        :type SFirst: float
        :param SLast:
        :type SLast: float
        :param PrecAngle:
        :type PrecAngle: float
        :param LastAngle:
        :type LastAngle: float &
        :rtype: None

        """
        return _GeomFill.GeomFill_LocationGuide_Set(self, *args)


    def EraseRotation(self, *args):
        """
        :rtype: None

        """
        return _GeomFill.GeomFill_LocationGuide_EraseRotation(self, *args)


    def D0(self, *args):
        """
        * compute Location

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :rtype: bool

        * compute Location and 2d points

        :param Param:
        :type Param: float
        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_Vec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :rtype: bool

        """
        return _GeomFill.GeomFill_LocationGuide_D0(self, *args)


    def Section(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _GeomFill.GeomFill_LocationGuide_Section(self, *args)


    def Guide(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _GeomFill.GeomFill_LocationGuide_Guide(self, *args)


    def SetOrigine(self, *args):
        """
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :rtype: None

        """
        return _GeomFill.GeomFill_LocationGuide_SetOrigine(self, *args)


    def ComputeAutomaticLaw(self, *args):
        """
        :param ParAndRad:
        :type ParAndRad: Handle_TColgp_HArray1OfPnt2d
        :rtype: GeomFill_PipeError

        """
        return _GeomFill.GeomFill_LocationGuide_ComputeAutomaticLaw(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_LocationGuide self)"""
        return _GeomFill.GeomFill_LocationGuide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_LocationGuide self) -> Handle_GeomFill_LocationGuide"""
        return _GeomFill.GeomFill_LocationGuide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_LocationGuide.Set = new_instancemethod(_GeomFill.GeomFill_LocationGuide_Set, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.EraseRotation = new_instancemethod(_GeomFill.GeomFill_LocationGuide_EraseRotation, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.D0 = new_instancemethod(_GeomFill.GeomFill_LocationGuide_D0, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.Section = new_instancemethod(_GeomFill.GeomFill_LocationGuide_Section, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.Guide = new_instancemethod(_GeomFill.GeomFill_LocationGuide_Guide, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.SetOrigine = new_instancemethod(_GeomFill.GeomFill_LocationGuide_SetOrigine, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.ComputeAutomaticLaw = new_instancemethod(_GeomFill.GeomFill_LocationGuide_ComputeAutomaticLaw, None, GeomFill_LocationGuide)
GeomFill_LocationGuide._kill_pointed = new_instancemethod(_GeomFill.GeomFill_LocationGuide__kill_pointed, None, GeomFill_LocationGuide)
GeomFill_LocationGuide.GetHandle = new_instancemethod(_GeomFill.GeomFill_LocationGuide_GetHandle, None, GeomFill_LocationGuide)
GeomFill_LocationGuide_swigregister = _GeomFill.GeomFill_LocationGuide_swigregister
GeomFill_LocationGuide_swigregister(GeomFill_LocationGuide)

class Handle_GeomFill_LocationGuide(Handle_GeomFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_LocationGuide_swiginit(self, _GeomFill.new_Handle_GeomFill_LocationGuide(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_LocationGuide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_LocationGuide.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_LocationGuide_Nullify, None, Handle_GeomFill_LocationGuide)
Handle_GeomFill_LocationGuide.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_LocationGuide_IsNull, None, Handle_GeomFill_LocationGuide)
Handle_GeomFill_LocationGuide.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_LocationGuide_GetObject, None, Handle_GeomFill_LocationGuide)
Handle_GeomFill_LocationGuide._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_LocationGuide__kill_pointed, None, Handle_GeomFill_LocationGuide)
Handle_GeomFill_LocationGuide_swigregister = _GeomFill.Handle_GeomFill_LocationGuide_swigregister
Handle_GeomFill_LocationGuide_swigregister(Handle_GeomFill_LocationGuide)

def Handle_GeomFill_LocationGuide_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_LocationGuide_DownCast(AnObject)
Handle_GeomFill_LocationGuide_DownCast = _GeomFill.Handle_GeomFill_LocationGuide_DownCast

class GeomFill_SectionGenerator(GeomFill_Profiler):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomFill.GeomFill_SectionGenerator_swiginit(self, _GeomFill.new_GeomFill_SectionGenerator(*args))

    def SetParam(self, *args):
        """
        :param Params:
        :type Params: Handle_TColStd_HArray1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionGenerator_SetParam(self, *args)


    def GetShape(self, *args):
        """
        :param NbPoles:
        :type NbPoles: int &
        :param NbKnots:
        :type NbKnots: int &
        :param Degree:
        :type Degree: int &
        :param NbPoles2d:
        :type NbPoles2d: int &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionGenerator_GetShape(self, *args)


    def Knots(self, *args):
        """
        :param TKnots:
        :type TKnots: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionGenerator_Knots(self, *args)


    def Mults(self, *args):
        """
        :param TMults:
        :type TMults: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionGenerator_Mults(self, *args)


    def Section(self, *args):
        """
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.

        :param P:
        :type P: int
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param DPoles:
        :type DPoles: TColgp_Array1OfVec
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param DPoles2d:
        :type DPoles2d: TColgp_Array1OfVec2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :param DWeigths:
        :type DWeigths: TColStd_Array1OfReal &
        :rtype: bool

        :param P:
        :type P: int
        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Poles2d:
        :type Poles2d: TColgp_Array1OfPnt2d
        :param Weigths:
        :type Weigths: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_SectionGenerator_Section(self, *args)


    def Parameter(self, *args):
        """
        * Returns the parameter of Section<P>, to impose it for the approximation.

        :param P:
        :type P: int
        :rtype: float

        """
        return _GeomFill.GeomFill_SectionGenerator_Parameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SectionGenerator.SetParam = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_SetParam, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator.GetShape = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_GetShape, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator.Knots = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_Knots, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator.Mults = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_Mults, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator.Section = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_Section, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator.Parameter = new_instancemethod(_GeomFill.GeomFill_SectionGenerator_Parameter, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SectionGenerator__kill_pointed, None, GeomFill_SectionGenerator)
GeomFill_SectionGenerator_swigregister = _GeomFill.GeomFill_SectionGenerator_swigregister
GeomFill_SectionGenerator_swigregister(GeomFill_SectionGenerator)

class GeomFill_SimpleBound(GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the boundary object defined by the 3d curve. The surface to be built along this boundary will be in the tolerance range defined by Tol3d. This object is to be used as a boundary for a GeomFill_ConstrainedFilling framework. Dummy is initialized but has no function in this class. Warning Curve is an adapted curve, that is, an object which is an interface between: - the services provided by a 3D curve from the package Geom - and those required of the curve by the computation algorithm which uses it. The adapted curve is created in one of the following ways: - First sequence: Handle_Geom_Curve myCurve = ... ; Handle_GeomAdaptor_HCurve Curve = new GeomAdaptor_HCurve(myCurve); - Second sequence: // Step 1 Handle_Geom_Curve myCurve = ... ; GeomAdaptor_Curve Crv (myCurve); // Step 2 Handle_GeomAdaptor_HCurve Curve = new GeomAdaptor_HCurve(Crv); You use the second part of this sequence if you already have the adapted curve Crv. The boundary is then constructed with the Curve object: Standard_Real Tol = ... ; Standard_Real dummy = 0. ; myBoundary = GeomFill_SimpleBound (Curve,Tol,dummy);

        :param Curve:
        :type Curve: Handle_Adaptor3d_HCurve &
        :param Tol3d:
        :type Tol3d: float
        :param Tolang:
        :type Tolang: float
        :rtype: None

        """
        _GeomFill.GeomFill_SimpleBound_swiginit(self, _GeomFill.new_GeomFill_SimpleBound(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_SimpleBound self)"""
        return _GeomFill.GeomFill_SimpleBound__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_SimpleBound self) -> Handle_GeomFill_SimpleBound"""
        return _GeomFill.GeomFill_SimpleBound_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_SimpleBound._kill_pointed = new_instancemethod(_GeomFill.GeomFill_SimpleBound__kill_pointed, None, GeomFill_SimpleBound)
GeomFill_SimpleBound.GetHandle = new_instancemethod(_GeomFill.GeomFill_SimpleBound_GetHandle, None, GeomFill_SimpleBound)
GeomFill_SimpleBound_swigregister = _GeomFill.GeomFill_SimpleBound_swigregister
GeomFill_SimpleBound_swigregister(GeomFill_SimpleBound)

class Handle_GeomFill_SimpleBound(Handle_GeomFill_Boundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_SimpleBound_swiginit(self, _GeomFill.new_Handle_GeomFill_SimpleBound(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_SimpleBound_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_SimpleBound.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_SimpleBound_Nullify, None, Handle_GeomFill_SimpleBound)
Handle_GeomFill_SimpleBound.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_SimpleBound_IsNull, None, Handle_GeomFill_SimpleBound)
Handle_GeomFill_SimpleBound.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_SimpleBound_GetObject, None, Handle_GeomFill_SimpleBound)
Handle_GeomFill_SimpleBound._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_SimpleBound__kill_pointed, None, Handle_GeomFill_SimpleBound)
Handle_GeomFill_SimpleBound_swigregister = _GeomFill.Handle_GeomFill_SimpleBound_swigregister
Handle_GeomFill_SimpleBound_swigregister(Handle_GeomFill_SimpleBound)

def Handle_GeomFill_SimpleBound_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_SimpleBound_DownCast(AnObject)
Handle_GeomFill_SimpleBound_DownCast = _GeomFill.Handle_GeomFill_SimpleBound_DownCast

class GeomFill_Stretch(GeomFill_Filling):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        """
        _GeomFill.GeomFill_Stretch_swiginit(self, _GeomFill.new_GeomFill_Stretch(*args))

    def Init(self, *args):
        """
        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :rtype: None

        :param P1:
        :type P1: TColgp_Array1OfPnt
        :param P2:
        :type P2: TColgp_Array1OfPnt
        :param P3:
        :type P3: TColgp_Array1OfPnt
        :param P4:
        :type P4: TColgp_Array1OfPnt
        :param W1:
        :type W1: TColStd_Array1OfReal &
        :param W2:
        :type W2: TColStd_Array1OfReal &
        :param W3:
        :type W3: TColStd_Array1OfReal &
        :param W4:
        :type W4: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomFill.GeomFill_Stretch_Init(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_Stretch.Init = new_instancemethod(_GeomFill.GeomFill_Stretch_Init, None, GeomFill_Stretch)
GeomFill_Stretch._kill_pointed = new_instancemethod(_GeomFill.GeomFill_Stretch__kill_pointed, None, GeomFill_Stretch)
GeomFill_Stretch_swigregister = _GeomFill.GeomFill_Stretch_swigregister
GeomFill_Stretch_swigregister(GeomFill_Stretch)

class GeomFill_TgtOnCoons(GeomFill_TgtField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_GeomFill_CoonsAlgPatch &
        :param I:
        :type I: int
        :rtype: None

        """
        _GeomFill.GeomFill_TgtOnCoons_swiginit(self, _GeomFill.new_GeomFill_TgtOnCoons(*args))

    def D1(self, *args):
        """
        * Computes the derivative of the field of tangency at parameter W.

        :param W:
        :type W: float
        :rtype: gp_Vec

        * Computes the value and the derivative of the field of tangency at parameter W.

        :param W:
        :type W: float
        :param T:
        :type T: gp_Vec
        :param DT:
        :type DT: gp_Vec
        :rtype: None

        """
        return _GeomFill.GeomFill_TgtOnCoons_D1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_TgtOnCoons self)"""
        return _GeomFill.GeomFill_TgtOnCoons__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_TgtOnCoons self) -> Handle_GeomFill_TgtOnCoons"""
        return _GeomFill.GeomFill_TgtOnCoons_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_TgtOnCoons.D1 = new_instancemethod(_GeomFill.GeomFill_TgtOnCoons_D1, None, GeomFill_TgtOnCoons)
GeomFill_TgtOnCoons._kill_pointed = new_instancemethod(_GeomFill.GeomFill_TgtOnCoons__kill_pointed, None, GeomFill_TgtOnCoons)
GeomFill_TgtOnCoons.GetHandle = new_instancemethod(_GeomFill.GeomFill_TgtOnCoons_GetHandle, None, GeomFill_TgtOnCoons)
GeomFill_TgtOnCoons_swigregister = _GeomFill.GeomFill_TgtOnCoons_swigregister
GeomFill_TgtOnCoons_swigregister(GeomFill_TgtOnCoons)

class Handle_GeomFill_TgtOnCoons(Handle_GeomFill_TgtField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_TgtOnCoons_swiginit(self, _GeomFill.new_Handle_GeomFill_TgtOnCoons(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_TgtOnCoons_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_TgtOnCoons.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_TgtOnCoons_Nullify, None, Handle_GeomFill_TgtOnCoons)
Handle_GeomFill_TgtOnCoons.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_TgtOnCoons_IsNull, None, Handle_GeomFill_TgtOnCoons)
Handle_GeomFill_TgtOnCoons.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_TgtOnCoons_GetObject, None, Handle_GeomFill_TgtOnCoons)
Handle_GeomFill_TgtOnCoons._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_TgtOnCoons__kill_pointed, None, Handle_GeomFill_TgtOnCoons)
Handle_GeomFill_TgtOnCoons_swigregister = _GeomFill.Handle_GeomFill_TgtOnCoons_swigregister
Handle_GeomFill_TgtOnCoons_swigregister(Handle_GeomFill_TgtOnCoons)

def Handle_GeomFill_TgtOnCoons_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_TgtOnCoons_DownCast(AnObject)
Handle_GeomFill_TgtOnCoons_DownCast = _GeomFill.Handle_GeomFill_TgtOnCoons_DownCast

class GeomFill_TrihedronWithGuide(GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Guide(self, *args):
        """
        :rtype: Handle_Adaptor3d_HCurve

        """
        return _GeomFill.GeomFill_TrihedronWithGuide_Guide(self, *args)


    def Origine(self, *args):
        """
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :rtype: void

        """
        return _GeomFill.GeomFill_TrihedronWithGuide_Origine(self, *args)


    def CurrentPointOnGuide(self, *args):
        """
        * Returns the current point on guide found by D0, D1 or D2.

        :rtype: gp_Pnt

        """
        return _GeomFill.GeomFill_TrihedronWithGuide_CurrentPointOnGuide(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(GeomFill_TrihedronWithGuide self)"""
        return _GeomFill.GeomFill_TrihedronWithGuide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_TrihedronWithGuide self) -> Handle_GeomFill_TrihedronWithGuide"""
        return _GeomFill.GeomFill_TrihedronWithGuide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_TrihedronWithGuide.Guide = new_instancemethod(_GeomFill.GeomFill_TrihedronWithGuide_Guide, None, GeomFill_TrihedronWithGuide)
GeomFill_TrihedronWithGuide.Origine = new_instancemethod(_GeomFill.GeomFill_TrihedronWithGuide_Origine, None, GeomFill_TrihedronWithGuide)
GeomFill_TrihedronWithGuide.CurrentPointOnGuide = new_instancemethod(_GeomFill.GeomFill_TrihedronWithGuide_CurrentPointOnGuide, None, GeomFill_TrihedronWithGuide)
GeomFill_TrihedronWithGuide._kill_pointed = new_instancemethod(_GeomFill.GeomFill_TrihedronWithGuide__kill_pointed, None, GeomFill_TrihedronWithGuide)
GeomFill_TrihedronWithGuide.GetHandle = new_instancemethod(_GeomFill.GeomFill_TrihedronWithGuide_GetHandle, None, GeomFill_TrihedronWithGuide)
GeomFill_TrihedronWithGuide_swigregister = _GeomFill.GeomFill_TrihedronWithGuide_swigregister
GeomFill_TrihedronWithGuide_swigregister(GeomFill_TrihedronWithGuide)

class Handle_GeomFill_TrihedronWithGuide(Handle_GeomFill_TrihedronLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_TrihedronWithGuide_swiginit(self, _GeomFill.new_Handle_GeomFill_TrihedronWithGuide(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_TrihedronWithGuide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_TrihedronWithGuide.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronWithGuide_Nullify, None, Handle_GeomFill_TrihedronWithGuide)
Handle_GeomFill_TrihedronWithGuide.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronWithGuide_IsNull, None, Handle_GeomFill_TrihedronWithGuide)
Handle_GeomFill_TrihedronWithGuide.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronWithGuide_GetObject, None, Handle_GeomFill_TrihedronWithGuide)
Handle_GeomFill_TrihedronWithGuide._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_TrihedronWithGuide__kill_pointed, None, Handle_GeomFill_TrihedronWithGuide)
Handle_GeomFill_TrihedronWithGuide_swigregister = _GeomFill.Handle_GeomFill_TrihedronWithGuide_swigregister
Handle_GeomFill_TrihedronWithGuide_swigregister(Handle_GeomFill_TrihedronWithGuide)

def Handle_GeomFill_TrihedronWithGuide_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_TrihedronWithGuide_DownCast(AnObject)
Handle_GeomFill_TrihedronWithGuide_DownCast = _GeomFill.Handle_GeomFill_TrihedronWithGuide_DownCast

class GeomFill_UniformSection(GeomFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Make an constant Law with C. [First, Last] define law definition domain

        :param C:
        :type C: Handle_Geom_Curve &
        :param FirstParameter: default value is 0.0
        :type FirstParameter: float
        :param LastParameter: default value is 1.0
        :type LastParameter: float
        :rtype: None

        """
        _GeomFill.GeomFill_UniformSection_swiginit(self, _GeomFill.new_GeomFill_UniformSection(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_UniformSection self)"""
        return _GeomFill.GeomFill_UniformSection__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_UniformSection self) -> Handle_GeomFill_UniformSection"""
        return _GeomFill.GeomFill_UniformSection_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_UniformSection._kill_pointed = new_instancemethod(_GeomFill.GeomFill_UniformSection__kill_pointed, None, GeomFill_UniformSection)
GeomFill_UniformSection.GetHandle = new_instancemethod(_GeomFill.GeomFill_UniformSection_GetHandle, None, GeomFill_UniformSection)
GeomFill_UniformSection_swigregister = _GeomFill.GeomFill_UniformSection_swigregister
GeomFill_UniformSection_swigregister(GeomFill_UniformSection)

class Handle_GeomFill_UniformSection(Handle_GeomFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_UniformSection_swiginit(self, _GeomFill.new_Handle_GeomFill_UniformSection(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_UniformSection_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_UniformSection.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_UniformSection_Nullify, None, Handle_GeomFill_UniformSection)
Handle_GeomFill_UniformSection.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_UniformSection_IsNull, None, Handle_GeomFill_UniformSection)
Handle_GeomFill_UniformSection.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_UniformSection_GetObject, None, Handle_GeomFill_UniformSection)
Handle_GeomFill_UniformSection._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_UniformSection__kill_pointed, None, Handle_GeomFill_UniformSection)
Handle_GeomFill_UniformSection_swigregister = _GeomFill.Handle_GeomFill_UniformSection_swigregister
Handle_GeomFill_UniformSection_swigregister(Handle_GeomFill_UniformSection)

def Handle_GeomFill_UniformSection_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_UniformSection_DownCast(AnObject)
Handle_GeomFill_UniformSection_DownCast = _GeomFill.Handle_GeomFill_UniformSection_DownCast

class GeomFill_GuideTrihedronAC(GeomFill_TrihedronWithGuide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param guide:
        :type guide: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _GeomFill.GeomFill_GuideTrihedronAC_swiginit(self, _GeomFill.new_GeomFill_GuideTrihedronAC(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_GuideTrihedronAC self)"""
        return _GeomFill.GeomFill_GuideTrihedronAC__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_GuideTrihedronAC self) -> Handle_GeomFill_GuideTrihedronAC"""
        return _GeomFill.GeomFill_GuideTrihedronAC_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_GuideTrihedronAC._kill_pointed = new_instancemethod(_GeomFill.GeomFill_GuideTrihedronAC__kill_pointed, None, GeomFill_GuideTrihedronAC)
GeomFill_GuideTrihedronAC.GetHandle = new_instancemethod(_GeomFill.GeomFill_GuideTrihedronAC_GetHandle, None, GeomFill_GuideTrihedronAC)
GeomFill_GuideTrihedronAC_swigregister = _GeomFill.GeomFill_GuideTrihedronAC_swigregister
GeomFill_GuideTrihedronAC_swigregister(GeomFill_GuideTrihedronAC)

class Handle_GeomFill_GuideTrihedronAC(Handle_GeomFill_TrihedronWithGuide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_GuideTrihedronAC_swiginit(self, _GeomFill.new_Handle_GeomFill_GuideTrihedronAC(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_GuideTrihedronAC_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_GuideTrihedronAC.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronAC_Nullify, None, Handle_GeomFill_GuideTrihedronAC)
Handle_GeomFill_GuideTrihedronAC.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronAC_IsNull, None, Handle_GeomFill_GuideTrihedronAC)
Handle_GeomFill_GuideTrihedronAC.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronAC_GetObject, None, Handle_GeomFill_GuideTrihedronAC)
Handle_GeomFill_GuideTrihedronAC._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronAC__kill_pointed, None, Handle_GeomFill_GuideTrihedronAC)
Handle_GeomFill_GuideTrihedronAC_swigregister = _GeomFill.Handle_GeomFill_GuideTrihedronAC_swigregister
Handle_GeomFill_GuideTrihedronAC_swigregister(Handle_GeomFill_GuideTrihedronAC)

def Handle_GeomFill_GuideTrihedronAC_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_GuideTrihedronAC_DownCast(AnObject)
Handle_GeomFill_GuideTrihedronAC_DownCast = _GeomFill.Handle_GeomFill_GuideTrihedronAC_DownCast

class GeomFill_GuideTrihedronPlan(GeomFill_TrihedronWithGuide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theGuide:
        :type theGuide: Handle_Adaptor3d_HCurve &
        :rtype: None

        """
        _GeomFill.GeomFill_GuideTrihedronPlan_swiginit(self, _GeomFill.new_GeomFill_GuideTrihedronPlan(*args))

    def _kill_pointed(self):
        """_kill_pointed(GeomFill_GuideTrihedronPlan self)"""
        return _GeomFill.GeomFill_GuideTrihedronPlan__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(GeomFill_GuideTrihedronPlan self) -> Handle_GeomFill_GuideTrihedronPlan"""
        return _GeomFill.GeomFill_GuideTrihedronPlan_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


GeomFill_GuideTrihedronPlan._kill_pointed = new_instancemethod(_GeomFill.GeomFill_GuideTrihedronPlan__kill_pointed, None, GeomFill_GuideTrihedronPlan)
GeomFill_GuideTrihedronPlan.GetHandle = new_instancemethod(_GeomFill.GeomFill_GuideTrihedronPlan_GetHandle, None, GeomFill_GuideTrihedronPlan)
GeomFill_GuideTrihedronPlan_swigregister = _GeomFill.GeomFill_GuideTrihedronPlan_swigregister
GeomFill_GuideTrihedronPlan_swigregister(GeomFill_GuideTrihedronPlan)

class Handle_GeomFill_GuideTrihedronPlan(Handle_GeomFill_TrihedronWithGuide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomFill.Handle_GeomFill_GuideTrihedronPlan_swiginit(self, _GeomFill.new_Handle_GeomFill_GuideTrihedronPlan(*args))
    DownCast = staticmethod(_GeomFill.Handle_GeomFill_GuideTrihedronPlan_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_GeomFill_GuideTrihedronPlan.Nullify = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronPlan_Nullify, None, Handle_GeomFill_GuideTrihedronPlan)
Handle_GeomFill_GuideTrihedronPlan.IsNull = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronPlan_IsNull, None, Handle_GeomFill_GuideTrihedronPlan)
Handle_GeomFill_GuideTrihedronPlan.GetObject = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronPlan_GetObject, None, Handle_GeomFill_GuideTrihedronPlan)
Handle_GeomFill_GuideTrihedronPlan._kill_pointed = new_instancemethod(_GeomFill.Handle_GeomFill_GuideTrihedronPlan__kill_pointed, None, Handle_GeomFill_GuideTrihedronPlan)
Handle_GeomFill_GuideTrihedronPlan_swigregister = _GeomFill.Handle_GeomFill_GuideTrihedronPlan_swigregister
Handle_GeomFill_GuideTrihedronPlan_swigregister(Handle_GeomFill_GuideTrihedronPlan)

def Handle_GeomFill_GuideTrihedronPlan_DownCast(AnObject):
    return _GeomFill.Handle_GeomFill_GuideTrihedronPlan_DownCast(AnObject)
Handle_GeomFill_GuideTrihedronPlan_DownCast = _GeomFill.Handle_GeomFill_GuideTrihedronPlan_DownCast



