# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _BRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRep', [dirname(__file__)])
        except ImportError:
            import _BRep
            return _BRep
        if fp is not None:
            try:
                _mod = imp.load_module('_BRep', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRep = swig_import_helper()
    del swig_import_helper
else:
    import _BRep
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRep.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_BRep.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRep.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRep.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRep.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRep.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRep.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRep.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRep.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRep.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRep.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRep.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRep.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRep.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRep.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRep.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRep.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _BRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
class BRep_Builder(OCC.TopoDS.TopoDS_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MakeFace(self, *args):
        """
        * Makes an undefined Face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Makes a Face with a surface.

        :param F:
        :type F: TopoDS_Face &
        :param S:
        :type S: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Makes a Face with a surface and a location.

        :param F:
        :type F: TopoDS_Face &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Makes a Face with a triangulation. The triangulation is in the same reference system than the TFace.

        :param F:
        :type F: TopoDS_Face &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        """
        return _BRep.BRep_Builder_MakeFace(self, *args)

    def UpdateFace(self, *args):
        """
        * Updates the face F using the tolerance value Tol, surface S and location Location.

        :param F:
        :type F: TopoDS_Face &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Changes a face triangulation.  A null Triangulation removes the triangulation.

        :param F:
        :type F: TopoDS_Face &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        * Updates the face Tolerance.

        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRep.BRep_Builder_UpdateFace(self, *args)

    def NaturalRestriction(self, *args):
        """
        * Sets the NaturalRestriction flag of the face.

        :param F:
        :type F: TopoDS_Face &
        :param N:
        :type N: bool
        :rtype: None

        """
        return _BRep.BRep_Builder_NaturalRestriction(self, *args)

    def MakeEdge(self, *args):
        """
        * Makes an undefined Edge (no geometry).

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        * Makes an Edge with a curve.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom_Curve &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Makes an Edge with a curve and a location.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Makes an Edge with a polygon 3d.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_Polygon3D &
        :rtype: None

        * makes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N:
        :type N: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        * makes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N:
        :type N: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        return _BRep.BRep_Builder_MakeEdge(self, *args)

    def UpdateEdge(self, *args):
        """
        * Sets a 3D curve for the edge. If <C> is a null handle, remove any existing 3d curve.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom_Curve &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets a 3D curve for the edge. If <C> is a null handle, remove any existing 3d curve.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets pcurves for the edge on the closed face. If <C1> or <C2> is a null handle, remove any existing pcurve.

        :param E:
        :type E: TopoDS_Edge &
        :param C1:
        :type C1: Handle_Geom2d_Curve &
        :param C2:
        :type C2: Handle_Geom2d_Curve &
        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve. Sets UV bounds for curve repsentation

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :param Pf:
        :type Pf: gp_Pnt2d
        :param Pl:
        :type Pl: gp_Pnt2d
        :rtype: None

        * Sets pcurves for the edge on the closed surface. <C1> or <C2> is a null handle, remove any existing pcurve.

        :param E:
        :type E: TopoDS_Edge &
        :param C1:
        :type C1: Handle_Geom2d_Curve &
        :param C2:
        :type C2: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets pcurves for the edge on the closed surface. <C1> or <C2> is a null handle, remove any existing pcurve. Sets UV bounds for curve repsentation

        :param E:
        :type E: TopoDS_Edge &
        :param C1:
        :type C1: Handle_Geom2d_Curve &
        :param C2:
        :type C2: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :param Pf:
        :type Pf: gp_Pnt2d
        :param Pl:
        :type Pl: gp_Pnt2d
        :rtype: None

        * Changes an Edge 3D polygon. A null Polygon removes the 3d Polygon.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_Polygon3D &
        :rtype: None

        * Changes an Edge 3D polygon. A null Polygon removes the 3d Polygon.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_Polygon3D &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        * Changes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N:
        :type N: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        * Changes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N:
        :type N: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        * Changes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N1:
        :type N1: Handle_Poly_PolygonOnTriangulation &
        :param N2:
        :type N2: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        * Changes an Edge polygon on Triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param N1:
        :type N1: Handle_Poly_PolygonOnTriangulation &
        :param N2:
        :type N2: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        * Changes Edge polygon on a face.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_Polygon2D &
        :param S:
        :type S: TopoDS_Face &
        :rtype: None

        * Changes Edge polygon on a face.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param T:
        :type T: TopLoc_Location &
        :rtype: None

        * Changes Edge polygons on a face.  A null Polygon removes the 2d Polygon.

        :param E:
        :type E: TopoDS_Edge &
        :param P1:
        :type P1: Handle_Poly_Polygon2D &
        :param P2:
        :type P2: Handle_Poly_Polygon2D &
        :param S:
        :type S: TopoDS_Face &
        :rtype: None

        * Changes Edge polygons on a face.  A null Polygon removes the 2d Polygon.

        :param E:
        :type E: TopoDS_Edge &
        :param P1:
        :type P1: Handle_Poly_Polygon2D &
        :param P2:
        :type P2: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        * Updates the edge tolerance.

        :param E:
        :type E: TopoDS_Edge &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRep.BRep_Builder_UpdateEdge(self, *args)

    def Continuity(self, *args):
        """
        * Sets the geometric continuity on the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        * Sets the geometric continuity on the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        return _BRep.BRep_Builder_Continuity(self, *args)

    def SameParameter(self, *args):
        """
        * Sets the same parameter flag for the edge <E>.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: bool
        :rtype: None

        """
        return _BRep.BRep_Builder_SameParameter(self, *args)

    def SameRange(self, *args):
        """
        * Sets the same range flag for the edge <E>.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: bool
        :rtype: None

        """
        return _BRep.BRep_Builder_SameRange(self, *args)

    def Degenerated(self, *args):
        """
        * Sets the degenerated flag for the edge <E>.

        :param E:
        :type E: TopoDS_Edge &
        :param D:
        :type D: bool
        :rtype: None

        """
        return _BRep.BRep_Builder_Degenerated(self, *args)

    def Range(self, *args):
        """
        * Sets the range of the 3d curve if Only3d=True, otherwise sets the range to all the representations

        :param E:
        :type E: TopoDS_Edge &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :param Only3d: default value is Standard_False
        :type Only3d: bool
        :rtype: None

        * Sets the range of the edge on the pcurve on the surface.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        * Sets the range of the edge on the pcurve on the face.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        """
        return _BRep.BRep_Builder_Range(self, *args)

    def MakeVertex(self, *args):
        """
        * Makes an udefined vertex without geometry.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: None

        * Makes a vertex from a 3D point.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRep.BRep_Builder_MakeVertex(self, *args)

    def UpdateVertex(self, *args):
        """
        * Sets a 3D point on the vertex.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets the parameter for the vertex on the edge curves.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :param E:
        :type E: TopoDS_Edge &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets the parameter for the vertex on the edge pcurve on the face.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets the parameter for the vertex on the edge pcurve on the surface.

        :param V:
        :type V: TopoDS_Vertex &
        :param P:
        :type P: float
        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Sets the parameters for the vertex on the face.

        :param Ve:
        :type Ve: TopoDS_Vertex &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param F:
        :type F: TopoDS_Face &
        :param Tol:
        :type Tol: float
        :rtype: None

        * Updates the vertex tolerance.

        :param V:
        :type V: TopoDS_Vertex &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _BRep.BRep_Builder_UpdateVertex(self, *args)

    def Transfert(self, *args):
        """
        * Add to <Eout> the geometric representations of <Ein>.

        :param Ein:
        :type Ein: TopoDS_Edge &
        :param Eout:
        :type Eout: TopoDS_Edge &
        :rtype: None

        * Transfert the parameters of Vin on Ein as the parameter of Vout on Eout.

        :param Ein:
        :type Ein: TopoDS_Edge &
        :param Eout:
        :type Eout: TopoDS_Edge &
        :param Vin:
        :type Vin: TopoDS_Vertex &
        :param Vout:
        :type Vout: TopoDS_Vertex &
        :rtype: None

        """
        return _BRep.BRep_Builder_Transfert(self, *args)

    def __init__(self): 
        _BRep.BRep_Builder_swiginit(self,_BRep.new_BRep_Builder())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_Builder.MakeFace = new_instancemethod(_BRep.BRep_Builder_MakeFace,None,BRep_Builder)
BRep_Builder.UpdateFace = new_instancemethod(_BRep.BRep_Builder_UpdateFace,None,BRep_Builder)
BRep_Builder.NaturalRestriction = new_instancemethod(_BRep.BRep_Builder_NaturalRestriction,None,BRep_Builder)
BRep_Builder.MakeEdge = new_instancemethod(_BRep.BRep_Builder_MakeEdge,None,BRep_Builder)
BRep_Builder.UpdateEdge = new_instancemethod(_BRep.BRep_Builder_UpdateEdge,None,BRep_Builder)
BRep_Builder.Continuity = new_instancemethod(_BRep.BRep_Builder_Continuity,None,BRep_Builder)
BRep_Builder.SameParameter = new_instancemethod(_BRep.BRep_Builder_SameParameter,None,BRep_Builder)
BRep_Builder.SameRange = new_instancemethod(_BRep.BRep_Builder_SameRange,None,BRep_Builder)
BRep_Builder.Degenerated = new_instancemethod(_BRep.BRep_Builder_Degenerated,None,BRep_Builder)
BRep_Builder.Range = new_instancemethod(_BRep.BRep_Builder_Range,None,BRep_Builder)
BRep_Builder.MakeVertex = new_instancemethod(_BRep.BRep_Builder_MakeVertex,None,BRep_Builder)
BRep_Builder.UpdateVertex = new_instancemethod(_BRep.BRep_Builder_UpdateVertex,None,BRep_Builder)
BRep_Builder.Transfert = new_instancemethod(_BRep.BRep_Builder_Transfert,None,BRep_Builder)
BRep_Builder._kill_pointed = new_instancemethod(_BRep.BRep_Builder__kill_pointed,None,BRep_Builder)
BRep_Builder_swigregister = _BRep.BRep_Builder_swigregister
BRep_Builder_swigregister(BRep_Builder)

class BRep_CurveRepresentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def IsCurve3D(self, *args):
        """
        * A 3D curve representation.

        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurve3D(self, *args)

    def IsCurveOnClosedSurface(self, *args):
        """
        * A curve with two parametric curves on the same surface.

        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnClosedSurface(self, *args)

    def IsCurveOnSurface(self, *args):
        """
        * A curve in the parametric space of a surface.

        :rtype: bool

        * Is it a curve in the parametric space of <S> with location <L>.

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnSurface(self, *args)

    def IsRegularity(self, *args):
        """
        * A continuity between two surfaces.

        :rtype: bool

        * Is it a regularity between <S1> and <S2> with location <L1> and <L2>.

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsRegularity(self, *args)

    def IsPolygon3D(self, *args):
        """
        * A 3D polygon representation.

        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygon3D(self, *args)

    def IsPolygonOnTriangulation(self, *args):
        """
        * A representation by an array of nodes on a triangulation.

        :rtype: bool

        * Is it a polygon in the definition of <T> with location <L>.

        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnTriangulation(self, *args)

    def IsPolygonOnClosedTriangulation(self, *args):
        """
        * A representation by two arrays of nodes on a triangulation.

        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedTriangulation(self, *args)

    def IsPolygonOnSurface(self, *args):
        """
        * A polygon in the parametric space of a surface.

        :rtype: bool

        * Is it a polygon in the parametric space of <S> with location <L>.

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnSurface(self, *args)

    def IsPolygonOnClosedSurface(self, *args):
        """
        * Two 2D polygon representations in the parametric space of a surface.

        :rtype: bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedSurface(self, *args)

    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        return _BRep.BRep_CurveRepresentation_Location(self, *args)

    def Curve3D(self, *args):
        """
        :rtype: Handle_Geom_Curve

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_Curve3D(self, *args)

    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _BRep.BRep_CurveRepresentation_Surface(self, *args)

    def PCurve(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_PCurve(self, *args)

    def PCurve2(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_PCurve2(self, *args)

    def Polygon3D(self, *args):
        """
        :rtype: Handle_Poly_Polygon3D

        :param P:
        :type P: Handle_Poly_Polygon3D &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_Polygon3D(self, *args)

    def Polygon(self, *args):
        """
        :rtype: Handle_Poly_Polygon2D

        :param P:
        :type P: Handle_Poly_Polygon2D &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_Polygon(self, *args)

    def Polygon2(self, *args):
        """
        :rtype: Handle_Poly_Polygon2D

        :param P:
        :type P: Handle_Poly_Polygon2D &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_Polygon2(self, *args)

    def Triangulation(self, *args):
        """
        :rtype: Handle_Poly_Triangulation

        """
        return _BRep.BRep_CurveRepresentation_Triangulation(self, *args)

    def PolygonOnTriangulation(self, *args):
        """
        :rtype: Handle_Poly_PolygonOnTriangulation

        :param P:
        :type P: Handle_Poly_PolygonOnTriangulation &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation(self, *args)

    def PolygonOnTriangulation2(self, *args):
        """
        :rtype: Handle_Poly_PolygonOnTriangulation

        :param P2:
        :type P2: Handle_Poly_PolygonOnTriangulation &
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation2(self, *args)

    def Surface2(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _BRep.BRep_CurveRepresentation_Surface2(self, *args)

    def Location2(self, *args):
        """
        :rtype: TopLoc_Location

        """
        return _BRep.BRep_CurveRepresentation_Location2(self, *args)

    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        :param C:
        :type C: GeomAbs_Shape
        :rtype: void

        """
        return _BRep.BRep_CurveRepresentation_Continuity(self, *args)

    def Copy(self, *args):
        """
        * Return a copy of this representation.

        :rtype: Handle_BRep_CurveRepresentation

        """
        return _BRep.BRep_CurveRepresentation_Copy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_CurveRepresentation self)"""
        return _BRep.BRep_CurveRepresentation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_CurveRepresentation self) -> Handle_BRep_CurveRepresentation"""
        return _BRep.BRep_CurveRepresentation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_CurveRepresentation.IsCurve3D = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurve3D,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsCurveOnClosedSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurveOnClosedSurface,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsCurveOnSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurveOnSurface,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsRegularity = new_instancemethod(_BRep.BRep_CurveRepresentation_IsRegularity,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygon3D = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygon3D,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnTriangulation,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnClosedTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnClosedTriangulation,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnSurface,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnClosedSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnClosedSurface,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Location = new_instancemethod(_BRep.BRep_CurveRepresentation_Location,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Curve3D = new_instancemethod(_BRep.BRep_CurveRepresentation_Curve3D,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Surface = new_instancemethod(_BRep.BRep_CurveRepresentation_Surface,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.PCurve = new_instancemethod(_BRep.BRep_CurveRepresentation_PCurve,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.PCurve2 = new_instancemethod(_BRep.BRep_CurveRepresentation_PCurve2,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon3D = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon3D,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon2,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Triangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_Triangulation,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.PolygonOnTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_PolygonOnTriangulation,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.PolygonOnTriangulation2 = new_instancemethod(_BRep.BRep_CurveRepresentation_PolygonOnTriangulation2,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Surface2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Surface2,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Location2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Location2,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Continuity = new_instancemethod(_BRep.BRep_CurveRepresentation_Continuity,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.Copy = new_instancemethod(_BRep.BRep_CurveRepresentation_Copy,None,BRep_CurveRepresentation)
BRep_CurveRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_CurveRepresentation__kill_pointed,None,BRep_CurveRepresentation)
BRep_CurveRepresentation.GetHandle = new_instancemethod(_BRep.BRep_CurveRepresentation_GetHandle,None,BRep_CurveRepresentation)
BRep_CurveRepresentation_swigregister = _BRep.BRep_CurveRepresentation_swigregister
BRep_CurveRepresentation_swigregister(BRep_CurveRepresentation)

class Handle_BRep_CurveRepresentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_CurveRepresentation_swiginit(self,_BRep.new_Handle_BRep_CurveRepresentation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_CurveRepresentation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_CurveRepresentation.Nullify = new_instancemethod(_BRep.Handle_BRep_CurveRepresentation_Nullify,None,Handle_BRep_CurveRepresentation)
Handle_BRep_CurveRepresentation.IsNull = new_instancemethod(_BRep.Handle_BRep_CurveRepresentation_IsNull,None,Handle_BRep_CurveRepresentation)
Handle_BRep_CurveRepresentation.GetObject = new_instancemethod(_BRep.Handle_BRep_CurveRepresentation_GetObject,None,Handle_BRep_CurveRepresentation)
Handle_BRep_CurveRepresentation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_CurveRepresentation__kill_pointed,None,Handle_BRep_CurveRepresentation)
Handle_BRep_CurveRepresentation_swigregister = _BRep.Handle_BRep_CurveRepresentation_swigregister
Handle_BRep_CurveRepresentation_swigregister(Handle_BRep_CurveRepresentation)

def Handle_BRep_CurveRepresentation_DownCast(*args):
  return _BRep.Handle_BRep_CurveRepresentation_DownCast(*args)
Handle_BRep_CurveRepresentation_DownCast = _BRep.Handle_BRep_CurveRepresentation_DownCast

class BRep_ListIteratorOfListOfCurveRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        _BRep.BRep_ListIteratorOfListOfCurveRepresentation_swiginit(self,_BRep.new_BRep_ListIteratorOfListOfCurveRepresentation(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_BRep_CurveRepresentation

        """
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListIteratorOfListOfCurveRepresentation.Initialize = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_Initialize,None,BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.More = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_More,None,BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.Next = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_Next,None,BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.Value = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_Value,None,BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation__kill_pointed,None,BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfCurveRepresentation_swigregister
BRep_ListIteratorOfListOfCurveRepresentation_swigregister(BRep_ListIteratorOfListOfCurveRepresentation)

class BRep_ListIteratorOfListOfPointRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        _BRep.BRep_ListIteratorOfListOfPointRepresentation_swiginit(self,_BRep.new_BRep_ListIteratorOfListOfPointRepresentation(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_BRep_PointRepresentation

        """
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListIteratorOfListOfPointRepresentation.Initialize = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_Initialize,None,BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.More = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_More,None,BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.Next = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_Next,None,BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.Value = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_Value,None,BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation__kill_pointed,None,BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfPointRepresentation_swigregister
BRep_ListIteratorOfListOfPointRepresentation_swigregister(BRep_ListIteratorOfListOfPointRepresentation)

class BRep_ListNodeOfListOfCurveRepresentation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRep.BRep_ListNodeOfListOfCurveRepresentation_swiginit(self,_BRep.new_BRep_ListNodeOfListOfCurveRepresentation(*args))
    def Value(self, *args):
        """
        :rtype: Handle_BRep_CurveRepresentation

        """
        return _BRep.BRep_ListNodeOfListOfCurveRepresentation_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_ListNodeOfListOfCurveRepresentation self)"""
        return _BRep.BRep_ListNodeOfListOfCurveRepresentation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_ListNodeOfListOfCurveRepresentation self) -> Handle_BRep_ListNodeOfListOfCurveRepresentation"""
        return _BRep.BRep_ListNodeOfListOfCurveRepresentation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListNodeOfListOfCurveRepresentation.Value = new_instancemethod(_BRep.BRep_ListNodeOfListOfCurveRepresentation_Value,None,BRep_ListNodeOfListOfCurveRepresentation)
BRep_ListNodeOfListOfCurveRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListNodeOfListOfCurveRepresentation__kill_pointed,None,BRep_ListNodeOfListOfCurveRepresentation)
BRep_ListNodeOfListOfCurveRepresentation.GetHandle = new_instancemethod(_BRep.BRep_ListNodeOfListOfCurveRepresentation_GetHandle,None,BRep_ListNodeOfListOfCurveRepresentation)
BRep_ListNodeOfListOfCurveRepresentation_swigregister = _BRep.BRep_ListNodeOfListOfCurveRepresentation_swigregister
BRep_ListNodeOfListOfCurveRepresentation_swigregister(BRep_ListNodeOfListOfCurveRepresentation)

class Handle_BRep_ListNodeOfListOfCurveRepresentation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_swiginit(self,_BRep.new_Handle_BRep_ListNodeOfListOfCurveRepresentation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_ListNodeOfListOfCurveRepresentation.Nullify = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_Nullify,None,Handle_BRep_ListNodeOfListOfCurveRepresentation)
Handle_BRep_ListNodeOfListOfCurveRepresentation.IsNull = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_IsNull,None,Handle_BRep_ListNodeOfListOfCurveRepresentation)
Handle_BRep_ListNodeOfListOfCurveRepresentation.GetObject = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_GetObject,None,Handle_BRep_ListNodeOfListOfCurveRepresentation)
Handle_BRep_ListNodeOfListOfCurveRepresentation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation__kill_pointed,None,Handle_BRep_ListNodeOfListOfCurveRepresentation)
Handle_BRep_ListNodeOfListOfCurveRepresentation_swigregister = _BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_swigregister
Handle_BRep_ListNodeOfListOfCurveRepresentation_swigregister(Handle_BRep_ListNodeOfListOfCurveRepresentation)

def Handle_BRep_ListNodeOfListOfCurveRepresentation_DownCast(*args):
  return _BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_DownCast(*args)
Handle_BRep_ListNodeOfListOfCurveRepresentation_DownCast = _BRep.Handle_BRep_ListNodeOfListOfCurveRepresentation_DownCast

class BRep_ListNodeOfListOfPointRepresentation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRep.BRep_ListNodeOfListOfPointRepresentation_swiginit(self,_BRep.new_BRep_ListNodeOfListOfPointRepresentation(*args))
    def Value(self, *args):
        """
        :rtype: Handle_BRep_PointRepresentation

        """
        return _BRep.BRep_ListNodeOfListOfPointRepresentation_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_ListNodeOfListOfPointRepresentation self)"""
        return _BRep.BRep_ListNodeOfListOfPointRepresentation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_ListNodeOfListOfPointRepresentation self) -> Handle_BRep_ListNodeOfListOfPointRepresentation"""
        return _BRep.BRep_ListNodeOfListOfPointRepresentation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListNodeOfListOfPointRepresentation.Value = new_instancemethod(_BRep.BRep_ListNodeOfListOfPointRepresentation_Value,None,BRep_ListNodeOfListOfPointRepresentation)
BRep_ListNodeOfListOfPointRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListNodeOfListOfPointRepresentation__kill_pointed,None,BRep_ListNodeOfListOfPointRepresentation)
BRep_ListNodeOfListOfPointRepresentation.GetHandle = new_instancemethod(_BRep.BRep_ListNodeOfListOfPointRepresentation_GetHandle,None,BRep_ListNodeOfListOfPointRepresentation)
BRep_ListNodeOfListOfPointRepresentation_swigregister = _BRep.BRep_ListNodeOfListOfPointRepresentation_swigregister
BRep_ListNodeOfListOfPointRepresentation_swigregister(BRep_ListNodeOfListOfPointRepresentation)

class Handle_BRep_ListNodeOfListOfPointRepresentation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_swiginit(self,_BRep.new_Handle_BRep_ListNodeOfListOfPointRepresentation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_ListNodeOfListOfPointRepresentation.Nullify = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_Nullify,None,Handle_BRep_ListNodeOfListOfPointRepresentation)
Handle_BRep_ListNodeOfListOfPointRepresentation.IsNull = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_IsNull,None,Handle_BRep_ListNodeOfListOfPointRepresentation)
Handle_BRep_ListNodeOfListOfPointRepresentation.GetObject = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_GetObject,None,Handle_BRep_ListNodeOfListOfPointRepresentation)
Handle_BRep_ListNodeOfListOfPointRepresentation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_ListNodeOfListOfPointRepresentation__kill_pointed,None,Handle_BRep_ListNodeOfListOfPointRepresentation)
Handle_BRep_ListNodeOfListOfPointRepresentation_swigregister = _BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_swigregister
Handle_BRep_ListNodeOfListOfPointRepresentation_swigregister(Handle_BRep_ListNodeOfListOfPointRepresentation)

def Handle_BRep_ListNodeOfListOfPointRepresentation_DownCast(*args):
  return _BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_DownCast(*args)
Handle_BRep_ListNodeOfListOfPointRepresentation_DownCast = _BRep.Handle_BRep_ListNodeOfListOfPointRepresentation_DownCast

class BRep_ListOfCurveRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _BRep.BRep_ListOfCurveRepresentation_swiginit(self,_BRep.new_BRep_ListOfCurveRepresentation(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _BRep.BRep_ListOfCurveRepresentation_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRep.BRep_ListOfCurveRepresentation_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :rtype: None

        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :param theIt:
        :type theIt: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :rtype: None

        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :param theIt:
        :type theIt: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_BRep_CurveRepresentation

        """
        return _BRep.BRep_ListOfCurveRepresentation_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_BRep_CurveRepresentation

        """
        return _BRep.BRep_ListOfCurveRepresentation_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_BRep_CurveRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfCurveRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfCurveRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfCurveRepresentation_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListOfCurveRepresentation.Assign = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Assign,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Set = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Set,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Extent = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Extent,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Clear = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Clear,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.IsEmpty = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_IsEmpty,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Prepend = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Prepend,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Append = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Append,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.First = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_First,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Last = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Last,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.RemoveFirst = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_RemoveFirst,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Remove = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Remove,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.InsertBefore = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_InsertBefore,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.InsertAfter = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_InsertAfter,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation__kill_pointed,None,BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation_swigregister = _BRep.BRep_ListOfCurveRepresentation_swigregister
BRep_ListOfCurveRepresentation_swigregister(BRep_ListOfCurveRepresentation)

class BRep_ListOfPointRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _BRep.BRep_ListOfPointRepresentation_swiginit(self,_BRep.new_BRep_ListOfPointRepresentation(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _BRep.BRep_ListOfPointRepresentation_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _BRep.BRep_ListOfPointRepresentation_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :rtype: None

        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :param theIt:
        :type theIt: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :rtype: None

        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :param theIt:
        :type theIt: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_BRep_PointRepresentation

        """
        return _BRep.BRep_ListOfPointRepresentation_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_BRep_PointRepresentation

        """
        return _BRep.BRep_ListOfPointRepresentation_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_BRep_PointRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        :param Other:
        :type Other: BRep_ListOfPointRepresentation &
        :param It:
        :type It: BRep_ListIteratorOfListOfPointRepresentation &
        :rtype: None

        """
        return _BRep.BRep_ListOfPointRepresentation_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_ListOfPointRepresentation.Assign = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Assign,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Set = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Set,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Extent = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Extent,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Clear = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Clear,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.IsEmpty = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_IsEmpty,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Prepend = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Prepend,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Append = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Append,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.First = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_First,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Last = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Last,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.RemoveFirst = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_RemoveFirst,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Remove = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Remove,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.InsertBefore = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_InsertBefore,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.InsertAfter = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_InsertAfter,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_ListOfPointRepresentation__kill_pointed,None,BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation_swigregister = _BRep.BRep_ListOfPointRepresentation_swigregister
BRep_ListOfPointRepresentation_swigregister(BRep_ListOfPointRepresentation)

class BRep_PointRepresentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def IsPointOnCurve(self, *args):
        """
        * A point on a 3d curve.

        :rtype: bool

        * A point on the curve <C>.

        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurve(self, *args)

    def IsPointOnCurveOnSurface(self, *args):
        """
        * A point on a 2d curve on a surface.

        :rtype: bool

        * A point on the 2d curve <PC> on the surface <S>.

        :param PC:
        :type PC: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurveOnSurface(self, *args)

    def IsPointOnSurface(self, *args):
        """
        * A point on a surface.

        :rtype: bool

        * A point on the surface <S>.

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnSurface(self, *args)

    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        return _BRep.BRep_PointRepresentation_Location(self, *args)

    def Parameter(self, *args):
        """
        :rtype: float

        :param P:
        :type P: float
        :rtype: None

        """
        return _BRep.BRep_PointRepresentation_Parameter(self, *args)

    def Parameter2(self, *args):
        """
        :rtype: float

        :param P:
        :type P: float
        :rtype: void

        """
        return _BRep.BRep_PointRepresentation_Parameter2(self, *args)

    def Curve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: void

        """
        return _BRep.BRep_PointRepresentation_Curve(self, *args)

    def PCurve(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_PointRepresentation_PCurve(self, *args)

    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: void

        """
        return _BRep.BRep_PointRepresentation_Surface(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PointRepresentation self)"""
        return _BRep.BRep_PointRepresentation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PointRepresentation self) -> Handle_BRep_PointRepresentation"""
        return _BRep.BRep_PointRepresentation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PointRepresentation.IsPointOnCurve = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnCurve,None,BRep_PointRepresentation)
BRep_PointRepresentation.IsPointOnCurveOnSurface = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnCurveOnSurface,None,BRep_PointRepresentation)
BRep_PointRepresentation.IsPointOnSurface = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnSurface,None,BRep_PointRepresentation)
BRep_PointRepresentation.Location = new_instancemethod(_BRep.BRep_PointRepresentation_Location,None,BRep_PointRepresentation)
BRep_PointRepresentation.Parameter = new_instancemethod(_BRep.BRep_PointRepresentation_Parameter,None,BRep_PointRepresentation)
BRep_PointRepresentation.Parameter2 = new_instancemethod(_BRep.BRep_PointRepresentation_Parameter2,None,BRep_PointRepresentation)
BRep_PointRepresentation.Curve = new_instancemethod(_BRep.BRep_PointRepresentation_Curve,None,BRep_PointRepresentation)
BRep_PointRepresentation.PCurve = new_instancemethod(_BRep.BRep_PointRepresentation_PCurve,None,BRep_PointRepresentation)
BRep_PointRepresentation.Surface = new_instancemethod(_BRep.BRep_PointRepresentation_Surface,None,BRep_PointRepresentation)
BRep_PointRepresentation._kill_pointed = new_instancemethod(_BRep.BRep_PointRepresentation__kill_pointed,None,BRep_PointRepresentation)
BRep_PointRepresentation.GetHandle = new_instancemethod(_BRep.BRep_PointRepresentation_GetHandle,None,BRep_PointRepresentation)
BRep_PointRepresentation_swigregister = _BRep.BRep_PointRepresentation_swigregister
BRep_PointRepresentation_swigregister(BRep_PointRepresentation)

class Handle_BRep_PointRepresentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PointRepresentation_swiginit(self,_BRep.new_Handle_BRep_PointRepresentation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PointRepresentation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PointRepresentation.Nullify = new_instancemethod(_BRep.Handle_BRep_PointRepresentation_Nullify,None,Handle_BRep_PointRepresentation)
Handle_BRep_PointRepresentation.IsNull = new_instancemethod(_BRep.Handle_BRep_PointRepresentation_IsNull,None,Handle_BRep_PointRepresentation)
Handle_BRep_PointRepresentation.GetObject = new_instancemethod(_BRep.Handle_BRep_PointRepresentation_GetObject,None,Handle_BRep_PointRepresentation)
Handle_BRep_PointRepresentation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PointRepresentation__kill_pointed,None,Handle_BRep_PointRepresentation)
Handle_BRep_PointRepresentation_swigregister = _BRep.Handle_BRep_PointRepresentation_swigregister
Handle_BRep_PointRepresentation_swigregister(Handle_BRep_PointRepresentation)

def Handle_BRep_PointRepresentation_DownCast(*args):
  return _BRep.Handle_BRep_PointRepresentation_DownCast(*args)
Handle_BRep_PointRepresentation_DownCast = _BRep.Handle_BRep_PointRepresentation_DownCast

class BRep_TEdge(OCC.TopoDS.TopoDS_TEdge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TEdge.

        :rtype: None

        """
        _BRep.BRep_TEdge_swiginit(self,_BRep.new_BRep_TEdge(*args))
    def Tolerance(self, *args):
        """
        :rtype: float

        :param T:
        :type T: float
        :rtype: None

        """
        return _BRep.BRep_TEdge_Tolerance(self, *args)

    def UpdateTolerance(self, *args):
        """
        * Sets the tolerance to the max of <T> and the current tolerance.

        :param T:
        :type T: float
        :rtype: None

        """
        return _BRep.BRep_TEdge_UpdateTolerance(self, *args)

    def SameParameter(self, *args):
        """
        :rtype: bool

        :param S:
        :type S: bool
        :rtype: None

        """
        return _BRep.BRep_TEdge_SameParameter(self, *args)

    def SameRange(self, *args):
        """
        :rtype: bool

        :param S:
        :type S: bool
        :rtype: None

        """
        return _BRep.BRep_TEdge_SameRange(self, *args)

    def Degenerated(self, *args):
        """
        :rtype: bool

        :param S:
        :type S: bool
        :rtype: None

        """
        return _BRep.BRep_TEdge_Degenerated(self, *args)

    def Curves(self, *args):
        """
        :rtype: BRep_ListOfCurveRepresentation

        """
        return _BRep.BRep_TEdge_Curves(self, *args)

    def ChangeCurves(self, *args):
        """
        :rtype: BRep_ListOfCurveRepresentation

        """
        return _BRep.BRep_TEdge_ChangeCurves(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_TEdge self)"""
        return _BRep.BRep_TEdge__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_TEdge self) -> Handle_BRep_TEdge"""
        return _BRep.BRep_TEdge_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_TEdge.Tolerance = new_instancemethod(_BRep.BRep_TEdge_Tolerance,None,BRep_TEdge)
BRep_TEdge.UpdateTolerance = new_instancemethod(_BRep.BRep_TEdge_UpdateTolerance,None,BRep_TEdge)
BRep_TEdge.SameParameter = new_instancemethod(_BRep.BRep_TEdge_SameParameter,None,BRep_TEdge)
BRep_TEdge.SameRange = new_instancemethod(_BRep.BRep_TEdge_SameRange,None,BRep_TEdge)
BRep_TEdge.Degenerated = new_instancemethod(_BRep.BRep_TEdge_Degenerated,None,BRep_TEdge)
BRep_TEdge.Curves = new_instancemethod(_BRep.BRep_TEdge_Curves,None,BRep_TEdge)
BRep_TEdge.ChangeCurves = new_instancemethod(_BRep.BRep_TEdge_ChangeCurves,None,BRep_TEdge)
BRep_TEdge._kill_pointed = new_instancemethod(_BRep.BRep_TEdge__kill_pointed,None,BRep_TEdge)
BRep_TEdge.GetHandle = new_instancemethod(_BRep.BRep_TEdge_GetHandle,None,BRep_TEdge)
BRep_TEdge_swigregister = _BRep.BRep_TEdge_swigregister
BRep_TEdge_swigregister(BRep_TEdge)

class Handle_BRep_TEdge(OCC.TopoDS.Handle_TopoDS_TEdge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_TEdge_swiginit(self,_BRep.new_Handle_BRep_TEdge(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_TEdge_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_TEdge.Nullify = new_instancemethod(_BRep.Handle_BRep_TEdge_Nullify,None,Handle_BRep_TEdge)
Handle_BRep_TEdge.IsNull = new_instancemethod(_BRep.Handle_BRep_TEdge_IsNull,None,Handle_BRep_TEdge)
Handle_BRep_TEdge.GetObject = new_instancemethod(_BRep.Handle_BRep_TEdge_GetObject,None,Handle_BRep_TEdge)
Handle_BRep_TEdge._kill_pointed = new_instancemethod(_BRep.Handle_BRep_TEdge__kill_pointed,None,Handle_BRep_TEdge)
Handle_BRep_TEdge_swigregister = _BRep.Handle_BRep_TEdge_swigregister
Handle_BRep_TEdge_swigregister(Handle_BRep_TEdge)

def Handle_BRep_TEdge_DownCast(*args):
  return _BRep.Handle_BRep_TEdge_DownCast(*args)
Handle_BRep_TEdge_DownCast = _BRep.Handle_BRep_TEdge_DownCast

class BRep_TFace(OCC.TopoDS.TopoDS_TFace):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TFace.

        :rtype: None

        """
        _BRep.BRep_TFace_swiginit(self,_BRep.new_BRep_TFace(*args))
    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        """
        return _BRep.BRep_TFace_Surface(self, *args)

    def Triangulation(self, *args):
        """
        :rtype: Handle_Poly_Triangulation

        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: None

        """
        return _BRep.BRep_TFace_Triangulation(self, *args)

    def Location(self, *args):
        """
        :rtype: TopLoc_Location

        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        return _BRep.BRep_TFace_Location(self, *args)

    def Tolerance(self, *args):
        """
        :rtype: float

        :param T:
        :type T: float
        :rtype: None

        """
        return _BRep.BRep_TFace_Tolerance(self, *args)

    def NaturalRestriction(self, *args):
        """
        :rtype: bool

        :param N:
        :type N: bool
        :rtype: None

        """
        return _BRep.BRep_TFace_NaturalRestriction(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_TFace self)"""
        return _BRep.BRep_TFace__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_TFace self) -> Handle_BRep_TFace"""
        return _BRep.BRep_TFace_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_TFace.Surface = new_instancemethod(_BRep.BRep_TFace_Surface,None,BRep_TFace)
BRep_TFace.Triangulation = new_instancemethod(_BRep.BRep_TFace_Triangulation,None,BRep_TFace)
BRep_TFace.Location = new_instancemethod(_BRep.BRep_TFace_Location,None,BRep_TFace)
BRep_TFace.Tolerance = new_instancemethod(_BRep.BRep_TFace_Tolerance,None,BRep_TFace)
BRep_TFace.NaturalRestriction = new_instancemethod(_BRep.BRep_TFace_NaturalRestriction,None,BRep_TFace)
BRep_TFace._kill_pointed = new_instancemethod(_BRep.BRep_TFace__kill_pointed,None,BRep_TFace)
BRep_TFace.GetHandle = new_instancemethod(_BRep.BRep_TFace_GetHandle,None,BRep_TFace)
BRep_TFace_swigregister = _BRep.BRep_TFace_swigregister
BRep_TFace_swigregister(BRep_TFace)

class Handle_BRep_TFace(OCC.TopoDS.Handle_TopoDS_TFace):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_TFace_swiginit(self,_BRep.new_Handle_BRep_TFace(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_TFace_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_TFace.Nullify = new_instancemethod(_BRep.Handle_BRep_TFace_Nullify,None,Handle_BRep_TFace)
Handle_BRep_TFace.IsNull = new_instancemethod(_BRep.Handle_BRep_TFace_IsNull,None,Handle_BRep_TFace)
Handle_BRep_TFace.GetObject = new_instancemethod(_BRep.Handle_BRep_TFace_GetObject,None,Handle_BRep_TFace)
Handle_BRep_TFace._kill_pointed = new_instancemethod(_BRep.Handle_BRep_TFace__kill_pointed,None,Handle_BRep_TFace)
Handle_BRep_TFace_swigregister = _BRep.Handle_BRep_TFace_swigregister
Handle_BRep_TFace_swigregister(Handle_BRep_TFace)

def Handle_BRep_TFace_DownCast(*args):
  return _BRep.Handle_BRep_TFace_DownCast(*args)
Handle_BRep_TFace_DownCast = _BRep.Handle_BRep_TFace_DownCast

class BRep_TVertex(OCC.TopoDS.TopoDS_TVertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _BRep.BRep_TVertex_swiginit(self,_BRep.new_BRep_TVertex(*args))
    def Tolerance(self, *args):
        """
        :rtype: float

        :param T:
        :type T: float
        :rtype: None

        """
        return _BRep.BRep_TVertex_Tolerance(self, *args)

    def UpdateTolerance(self, *args):
        """
        * Sets the tolerance to the max of <T> and the current tolerance.

        :param T:
        :type T: float
        :rtype: None

        """
        return _BRep.BRep_TVertex_UpdateTolerance(self, *args)

    def Pnt(self, *args):
        """
        :rtype: gp_Pnt

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRep.BRep_TVertex_Pnt(self, *args)

    def Points(self, *args):
        """
        :rtype: BRep_ListOfPointRepresentation

        """
        return _BRep.BRep_TVertex_Points(self, *args)

    def ChangePoints(self, *args):
        """
        :rtype: BRep_ListOfPointRepresentation

        """
        return _BRep.BRep_TVertex_ChangePoints(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_TVertex self)"""
        return _BRep.BRep_TVertex__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_TVertex self) -> Handle_BRep_TVertex"""
        return _BRep.BRep_TVertex_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_TVertex.Tolerance = new_instancemethod(_BRep.BRep_TVertex_Tolerance,None,BRep_TVertex)
BRep_TVertex.UpdateTolerance = new_instancemethod(_BRep.BRep_TVertex_UpdateTolerance,None,BRep_TVertex)
BRep_TVertex.Pnt = new_instancemethod(_BRep.BRep_TVertex_Pnt,None,BRep_TVertex)
BRep_TVertex.Points = new_instancemethod(_BRep.BRep_TVertex_Points,None,BRep_TVertex)
BRep_TVertex.ChangePoints = new_instancemethod(_BRep.BRep_TVertex_ChangePoints,None,BRep_TVertex)
BRep_TVertex._kill_pointed = new_instancemethod(_BRep.BRep_TVertex__kill_pointed,None,BRep_TVertex)
BRep_TVertex.GetHandle = new_instancemethod(_BRep.BRep_TVertex_GetHandle,None,BRep_TVertex)
BRep_TVertex_swigregister = _BRep.BRep_TVertex_swigregister
BRep_TVertex_swigregister(BRep_TVertex)

class Handle_BRep_TVertex(OCC.TopoDS.Handle_TopoDS_TVertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_TVertex_swiginit(self,_BRep.new_Handle_BRep_TVertex(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_TVertex_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_TVertex.Nullify = new_instancemethod(_BRep.Handle_BRep_TVertex_Nullify,None,Handle_BRep_TVertex)
Handle_BRep_TVertex.IsNull = new_instancemethod(_BRep.Handle_BRep_TVertex_IsNull,None,Handle_BRep_TVertex)
Handle_BRep_TVertex.GetObject = new_instancemethod(_BRep.Handle_BRep_TVertex_GetObject,None,Handle_BRep_TVertex)
Handle_BRep_TVertex._kill_pointed = new_instancemethod(_BRep.Handle_BRep_TVertex__kill_pointed,None,Handle_BRep_TVertex)
Handle_BRep_TVertex_swigregister = _BRep.Handle_BRep_TVertex_swigregister
Handle_BRep_TVertex_swigregister(Handle_BRep_TVertex)

def Handle_BRep_TVertex_DownCast(*args):
  return _BRep.Handle_BRep_TVertex_DownCast(*args)
Handle_BRep_TVertex_DownCast = _BRep.Handle_BRep_TVertex_DownCast

class BRep_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Surface(*args):
        """
        * Returns the geometric surface of the face. Returns in <L> the location for the surface.

        :param F:
        :type F: TopoDS_Face &
        :param L:
        :type L: TopLoc_Location &
        :rtype: Handle_Geom_Surface

        * Returns the geometric surface of the face. It can be a copy if there is a Location.

        :param F:
        :type F: TopoDS_Face &
        :rtype: Handle_Geom_Surface

        """
        return _BRep.BRep_Tool_Surface(*args)

    Surface = staticmethod(Surface)
    def Triangulation(*args):
        """
        * Returns the Triangulation of the face. It is a null handle if there is no triangulation.

        :param F:
        :type F: TopoDS_Face &
        :param L:
        :type L: TopLoc_Location &
        :rtype: Handle_Poly_Triangulation

        """
        return _BRep.BRep_Tool_Triangulation(*args)

    Triangulation = staticmethod(Triangulation)
    def NaturalRestriction(*args):
        """
        * Returns the NaturalRestriction flag of the face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: bool

        """
        return _BRep.BRep_Tool_NaturalRestriction(*args)

    NaturalRestriction = staticmethod(NaturalRestriction)
    def IsGeometric(*args):
        """
        * Returns True if <E> is a 3d curve or a curve on surface.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRep.BRep_Tool_IsGeometric(*args)

    IsGeometric = staticmethod(IsGeometric)
    def Curve(*args):
        """
        * Returns the 3D curve of the edge. May be a Null handle. Returns in <L> the location for the curve. In <First> and <Last> the parameter range.

        :param E:
        :type E: TopoDS_Edge &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: Handle_Geom_Curve

        * Returns the 3D curve of the edge. May be a Null handle. In <First> and <Last> the parameter range. It can be a copy if there is a Location.

        :param E:
        :type E: TopoDS_Edge &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: Handle_Geom_Curve

        """
        return _BRep.BRep_Tool_Curve(*args)

    Curve = staticmethod(Curve)
    def Polygon3D(*args):
        """
        * Returns the 3D polygon of the edge. May be a Null handle. Returns in <L> the location for the polygon.

        :param E:
        :type E: TopoDS_Edge &
        :param L:
        :type L: TopLoc_Location &
        :rtype: Handle_Poly_Polygon3D

        """
        return _BRep.BRep_Tool_Polygon3D(*args)

    Polygon3D = staticmethod(Polygon3D)
    def CurveOnSurface(*args):
        """
        * Returns the curve associated to the edge in the parametric space of the face. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: Handle_Geom2d_Curve

        * Returns the curve associated to the edge in the parametric space of the surface. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: Handle_Geom2d_Curve

        * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no curve on surface. Returns in <First> and <Last> the parameter range.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range. Returns in <First> and <Last> the parameter range.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :param Index:
        :type Index: int
        :rtype: void

        """
        return _BRep.BRep_Tool_CurveOnSurface(*args)

    CurveOnSurface = staticmethod(CurveOnSurface)
    def PolygonOnSurface(*args):
        """
        * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: Handle_Poly_Polygon2D

        * Returns the polygon associated to the edge in the parametric space of the surface. Returns a NULL handle if this polygon does not exist.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: Handle_Poly_Polygon2D

        * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no polygon on surface.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: void

        * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range.

        :param E:
        :type E: TopoDS_Edge &
        :param C:
        :type C: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param Index:
        :type Index: int
        :rtype: void

        """
        return _BRep.BRep_Tool_PolygonOnSurface(*args)

    PolygonOnSurface = staticmethod(PolygonOnSurface)
    def PolygonOnTriangulation(*args):
        """
        * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.

        :param E:
        :type E: TopoDS_Edge &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: Handle_Poly_PolygonOnTriangulation

        * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E>. <P> and <T> are null if the edge has no polygon on triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: void

        * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E> for the range index. <C> and <S> are null if the edge has no polygon on triangulation.

        :param E:
        :type E: TopoDS_Edge &
        :param P:
        :type P: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :param Index:
        :type Index: int
        :rtype: void

        """
        return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

    PolygonOnTriangulation = staticmethod(PolygonOnTriangulation)
    def IsClosed(*args):
        """
        * Returns <True> if S if flaged Closed, if S is a Solid,Shell or Compound returns <True> is S has no free boundaries.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        * Returns True if <E> has two PCurves in the parametric space of <F>. i.e. <F> is on a closed surface and <E> is on the closing curve.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: bool

        * Returns True if <E> has two PCurves in the parametric space of <S>. i.e. <S> is a closed surface and <E> is on the closing curve.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        * Returns True if <E> has two arrays of indices in the triangulation <T>.

        :param E:
        :type E: TopoDS_Edge &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :rtype: bool

        """
        return _BRep.BRep_Tool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)
    def SameParameter(*args):
        """
        * Returns the SameParameter flag for the edge.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRep.BRep_Tool_SameParameter(*args)

    SameParameter = staticmethod(SameParameter)
    def SameRange(*args):
        """
        * Returns the SameRange flag for the edge.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRep.BRep_Tool_SameRange(*args)

    SameRange = staticmethod(SameRange)
    def Degenerated(*args):
        """
        * Returns True if the edge is degenerated.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRep.BRep_Tool_Degenerated(*args)

    Degenerated = staticmethod(Degenerated)
    def Range(*args):
        """
        * Gets the range of the 3d curve.

        :param E:
        :type E: TopoDS_Edge &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        * Gets the range of the edge on the pcurve on the surface.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        * Gets the range of the edge on the pcurve on the face.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: void

        """
        return _BRep.BRep_Tool_Range(*args)

    Range = staticmethod(Range)
    def UVPoints(*args):
        """
        * Gets the UV locations of the extremities of the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param PFirst:
        :type PFirst: gp_Pnt2d
        :param PLast:
        :type PLast: gp_Pnt2d
        :rtype: void

        * Gets the UV locations of the extremities of the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param PFirst:
        :type PFirst: gp_Pnt2d
        :param PLast:
        :type PLast: gp_Pnt2d
        :rtype: void

        """
        return _BRep.BRep_Tool_UVPoints(*args)

    UVPoints = staticmethod(UVPoints)
    def SetUVPoints(*args):
        """
        * Sets the UV locations of the extremities of the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param PFirst:
        :type PFirst: gp_Pnt2d
        :param PLast:
        :type PLast: gp_Pnt2d
        :rtype: void

        * Sets the UV locations of the extremities of the edge.

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :param PFirst:
        :type PFirst: gp_Pnt2d
        :param PLast:
        :type PLast: gp_Pnt2d
        :rtype: void

        """
        return _BRep.BRep_Tool_SetUVPoints(*args)

    SetUVPoints = staticmethod(SetUVPoints)
    def Continuity(*args):
        """
        * Returns the continuity.

        :param E:
        :type E: TopoDS_Edge &
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: GeomAbs_Shape

        * Returns the continuity.

        :param E:
        :type E: TopoDS_Edge &
        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :rtype: GeomAbs_Shape

        """
        return _BRep.BRep_Tool_Continuity(*args)

    Continuity = staticmethod(Continuity)
    def HasContinuity(*args):
        """
        * Returns True if the edge is on the surfaces of the two faces.

        :param E:
        :type E: TopoDS_Edge &
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: bool

        * Returns True if the edge is on the surfaces.

        :param E:
        :type E: TopoDS_Edge &
        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :rtype: bool

        * Returns True if the edge has regularity on some two surfaces

        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _BRep.BRep_Tool_HasContinuity(*args)

    HasContinuity = staticmethod(HasContinuity)
    def Pnt(*args):
        """
        * Returns the 3d point.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: gp_Pnt

        """
        return _BRep.BRep_Tool_Pnt(*args)

    Pnt = staticmethod(Pnt)
    def Tolerance(*args):
        """
        * Returns the tolerance of the face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: float

        * Returns the tolerance for <E>.

        :param E:
        :type E: TopoDS_Edge &
        :rtype: float

        * Returns the tolerance.

        :param V:
        :type V: TopoDS_Vertex &
        :rtype: float

        """
        return _BRep.BRep_Tool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)
    def Parameter(*args):
        """
        * Returns the parameter of <V> on <E>.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :rtype: float

        * Returns the parameters of the vertex on the pcurve of the edge on the face.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: float

        * Returns the parameters of the vertex on the pcurve of the edge on the surface.

        :param V:
        :type V: TopoDS_Vertex &
        :param E:
        :type E: TopoDS_Edge &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: float

        """
        return _BRep.BRep_Tool_Parameter(*args)

    Parameter = staticmethod(Parameter)
    def Parameters(*args):
        """
        * Returns the parameters of the vertex on the face.

        :param V:
        :type V: TopoDS_Vertex &
        :param F:
        :type F: TopoDS_Face &
        :rtype: gp_Pnt2d

        """
        return _BRep.BRep_Tool_Parameters(*args)

    Parameters = staticmethod(Parameters)
    def __init__(self): 
        _BRep.BRep_Tool_swiginit(self,_BRep.new_BRep_Tool())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_Tool._kill_pointed = new_instancemethod(_BRep.BRep_Tool__kill_pointed,None,BRep_Tool)
BRep_Tool_swigregister = _BRep.BRep_Tool_swigregister
BRep_Tool_swigregister(BRep_Tool)

def BRep_Tool_Surface(*args):
  """
    * Returns the geometric surface of the face. Returns in <L> the location for the surface.

    :param F:
    :type F: TopoDS_Face &
    :param L:
    :type L: TopLoc_Location &
    :rtype: Handle_Geom_Surface

    * Returns the geometric surface of the face. It can be a copy if there is a Location.

    :param F:
    :type F: TopoDS_Face &
    :rtype: Handle_Geom_Surface

    """
  return _BRep.BRep_Tool_Surface(*args)

def BRep_Tool_Triangulation(*args):
  """
    * Returns the Triangulation of the face. It is a null handle if there is no triangulation.

    :param F:
    :type F: TopoDS_Face &
    :param L:
    :type L: TopLoc_Location &
    :rtype: Handle_Poly_Triangulation

    """
  return _BRep.BRep_Tool_Triangulation(*args)

def BRep_Tool_NaturalRestriction(*args):
  """
    * Returns the NaturalRestriction flag of the face.

    :param F:
    :type F: TopoDS_Face &
    :rtype: bool

    """
  return _BRep.BRep_Tool_NaturalRestriction(*args)

def BRep_Tool_IsGeometric(*args):
  """
    * Returns True if <E> is a 3d curve or a curve on surface.

    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
  return _BRep.BRep_Tool_IsGeometric(*args)

def BRep_Tool_Curve(*args):
  """
    * Returns the 3D curve of the edge. May be a Null handle. Returns in <L> the location for the curve. In <First> and <Last> the parameter range.

    :param E:
    :type E: TopoDS_Edge &
    :param L:
    :type L: TopLoc_Location &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: Handle_Geom_Curve

    * Returns the 3D curve of the edge. May be a Null handle. In <First> and <Last> the parameter range. It can be a copy if there is a Location.

    :param E:
    :type E: TopoDS_Edge &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: Handle_Geom_Curve

    """
  return _BRep.BRep_Tool_Curve(*args)

def BRep_Tool_Polygon3D(*args):
  """
    * Returns the 3D polygon of the edge. May be a Null handle. Returns in <L> the location for the polygon.

    :param E:
    :type E: TopoDS_Edge &
    :param L:
    :type L: TopLoc_Location &
    :rtype: Handle_Poly_Polygon3D

    """
  return _BRep.BRep_Tool_Polygon3D(*args)

def BRep_Tool_CurveOnSurface(*args):
  """
    * Returns the curve associated to the edge in the parametric space of the face. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: Handle_Geom2d_Curve

    * Returns the curve associated to the edge in the parametric space of the surface. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: Handle_Geom2d_Curve

    * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no curve on surface. Returns in <First> and <Last> the parameter range.

    :param E:
    :type E: TopoDS_Edge &
    :param C:
    :type C: Handle_Geom2d_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: void

    * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range. Returns in <First> and <Last> the parameter range.

    :param E:
    :type E: TopoDS_Edge &
    :param C:
    :type C: Handle_Geom2d_Curve &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :param Index:
    :type Index: int
    :rtype: void

    """
  return _BRep.BRep_Tool_CurveOnSurface(*args)

def BRep_Tool_PolygonOnSurface(*args):
  """
    * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :rtype: Handle_Poly_Polygon2D

    * Returns the polygon associated to the edge in the parametric space of the surface. Returns a NULL handle if this polygon does not exist.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :rtype: Handle_Poly_Polygon2D

    * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no polygon on surface.

    :param E:
    :type E: TopoDS_Edge &
    :param C:
    :type C: Handle_Poly_Polygon2D &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :rtype: void

    * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range.

    :param E:
    :type E: TopoDS_Edge &
    :param C:
    :type C: Handle_Poly_Polygon2D &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param Index:
    :type Index: int
    :rtype: void

    """
  return _BRep.BRep_Tool_PolygonOnSurface(*args)

def BRep_Tool_PolygonOnTriangulation(*args):
  """
    * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.

    :param E:
    :type E: TopoDS_Edge &
    :param T:
    :type T: Handle_Poly_Triangulation &
    :param L:
    :type L: TopLoc_Location &
    :rtype: Handle_Poly_PolygonOnTriangulation

    * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E>. <P> and <T> are null if the edge has no polygon on triangulation.

    :param E:
    :type E: TopoDS_Edge &
    :param P:
    :type P: Handle_Poly_PolygonOnTriangulation &
    :param T:
    :type T: Handle_Poly_Triangulation &
    :param L:
    :type L: TopLoc_Location &
    :rtype: void

    * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E> for the range index. <C> and <S> are null if the edge has no polygon on triangulation.

    :param E:
    :type E: TopoDS_Edge &
    :param P:
    :type P: Handle_Poly_PolygonOnTriangulation &
    :param T:
    :type T: Handle_Poly_Triangulation &
    :param L:
    :type L: TopLoc_Location &
    :param Index:
    :type Index: int
    :rtype: void

    """
  return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

def BRep_Tool_IsClosed(*args):
  """
    * Returns <True> if S if flaged Closed, if S is a Solid,Shell or Compound returns <True> is S has no free boundaries.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: bool

    * Returns True if <E> has two PCurves in the parametric space of <F>. i.e. <F> is on a closed surface and <E> is on the closing curve.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :rtype: bool

    * Returns True if <E> has two PCurves in the parametric space of <S>. i.e. <S> is a closed surface and <E> is on the closing curve.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :rtype: bool

    * Returns True if <E> has two arrays of indices in the triangulation <T>.

    :param E:
    :type E: TopoDS_Edge &
    :param T:
    :type T: Handle_Poly_Triangulation &
    :rtype: bool

    """
  return _BRep.BRep_Tool_IsClosed(*args)

def BRep_Tool_SameParameter(*args):
  """
    * Returns the SameParameter flag for the edge.

    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
  return _BRep.BRep_Tool_SameParameter(*args)

def BRep_Tool_SameRange(*args):
  """
    * Returns the SameRange flag for the edge.

    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
  return _BRep.BRep_Tool_SameRange(*args)

def BRep_Tool_Degenerated(*args):
  """
    * Returns True if the edge is degenerated.

    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
  return _BRep.BRep_Tool_Degenerated(*args)

def BRep_Tool_Range(*args):
  """
    * Gets the range of the 3d curve.

    :param E:
    :type E: TopoDS_Edge &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: void

    * Gets the range of the edge on the pcurve on the surface.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: void

    * Gets the range of the edge on the pcurve on the face.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param First:
    :type First: float &
    :param Last:
    :type Last: float &
    :rtype: void

    """
  return _BRep.BRep_Tool_Range(*args)

def BRep_Tool_UVPoints(*args):
  """
    * Gets the UV locations of the extremities of the edge.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param PFirst:
    :type PFirst: gp_Pnt2d
    :param PLast:
    :type PLast: gp_Pnt2d
    :rtype: void

    * Gets the UV locations of the extremities of the edge.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param PFirst:
    :type PFirst: gp_Pnt2d
    :param PLast:
    :type PLast: gp_Pnt2d
    :rtype: void

    """
  return _BRep.BRep_Tool_UVPoints(*args)

def BRep_Tool_SetUVPoints(*args):
  """
    * Sets the UV locations of the extremities of the edge.

    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :param PFirst:
    :type PFirst: gp_Pnt2d
    :param PLast:
    :type PLast: gp_Pnt2d
    :rtype: void

    * Sets the UV locations of the extremities of the edge.

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :param PFirst:
    :type PFirst: gp_Pnt2d
    :param PLast:
    :type PLast: gp_Pnt2d
    :rtype: void

    """
  return _BRep.BRep_Tool_SetUVPoints(*args)

def BRep_Tool_Continuity(*args):
  """
    * Returns the continuity.

    :param E:
    :type E: TopoDS_Edge &
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :rtype: GeomAbs_Shape

    * Returns the continuity.

    :param E:
    :type E: TopoDS_Edge &
    :param S1:
    :type S1: Handle_Geom_Surface &
    :param S2:
    :type S2: Handle_Geom_Surface &
    :param L1:
    :type L1: TopLoc_Location &
    :param L2:
    :type L2: TopLoc_Location &
    :rtype: GeomAbs_Shape

    """
  return _BRep.BRep_Tool_Continuity(*args)

def BRep_Tool_HasContinuity(*args):
  """
    * Returns True if the edge is on the surfaces of the two faces.

    :param E:
    :type E: TopoDS_Edge &
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :rtype: bool

    * Returns True if the edge is on the surfaces.

    :param E:
    :type E: TopoDS_Edge &
    :param S1:
    :type S1: Handle_Geom_Surface &
    :param S2:
    :type S2: Handle_Geom_Surface &
    :param L1:
    :type L1: TopLoc_Location &
    :param L2:
    :type L2: TopLoc_Location &
    :rtype: bool

    * Returns True if the edge has regularity on some two surfaces

    :param E:
    :type E: TopoDS_Edge &
    :rtype: bool

    """
  return _BRep.BRep_Tool_HasContinuity(*args)

def BRep_Tool_Pnt(*args):
  """
    * Returns the 3d point.

    :param V:
    :type V: TopoDS_Vertex &
    :rtype: gp_Pnt

    """
  return _BRep.BRep_Tool_Pnt(*args)

def BRep_Tool_Tolerance(*args):
  """
    * Returns the tolerance of the face.

    :param F:
    :type F: TopoDS_Face &
    :rtype: float

    * Returns the tolerance for <E>.

    :param E:
    :type E: TopoDS_Edge &
    :rtype: float

    * Returns the tolerance.

    :param V:
    :type V: TopoDS_Vertex &
    :rtype: float

    """
  return _BRep.BRep_Tool_Tolerance(*args)

def BRep_Tool_Parameter(*args):
  """
    * Returns the parameter of <V> on <E>.

    :param V:
    :type V: TopoDS_Vertex &
    :param E:
    :type E: TopoDS_Edge &
    :rtype: float

    * Returns the parameters of the vertex on the pcurve of the edge on the face.

    :param V:
    :type V: TopoDS_Vertex &
    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :rtype: float

    * Returns the parameters of the vertex on the pcurve of the edge on the surface.

    :param V:
    :type V: TopoDS_Vertex &
    :param E:
    :type E: TopoDS_Edge &
    :param S:
    :type S: Handle_Geom_Surface &
    :param L:
    :type L: TopLoc_Location &
    :rtype: float

    """
  return _BRep.BRep_Tool_Parameter(*args)

def BRep_Tool_Parameters(*args):
  """
    * Returns the parameters of the vertex on the face.

    :param V:
    :type V: TopoDS_Vertex &
    :param F:
    :type F: TopoDS_Face &
    :rtype: gp_Pnt2d

    """
  return _BRep.BRep_Tool_Parameters(*args)

class BRep_CurveOn2Surfaces(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        _BRep.BRep_CurveOn2Surfaces_swiginit(self,_BRep.new_BRep_CurveOn2Surfaces(*args))
    def IsRegularity(self, *args):
        """
        * Returns True.

        :rtype: bool

        * A curve on two surfaces (continuity).

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveOn2Surfaces_IsRegularity(self, *args)

    def D0(self, *args):
        """
        * Raises an error.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _BRep.BRep_CurveOn2Surfaces_D0(self, *args)

    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        :param C:
        :type C: GeomAbs_Shape
        :rtype: void

        """
        return _BRep.BRep_CurveOn2Surfaces_Continuity(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_CurveOn2Surfaces self)"""
        return _BRep.BRep_CurveOn2Surfaces__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_CurveOn2Surfaces self) -> Handle_BRep_CurveOn2Surfaces"""
        return _BRep.BRep_CurveOn2Surfaces_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_CurveOn2Surfaces.IsRegularity = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_IsRegularity,None,BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces.D0 = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_D0,None,BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces.Continuity = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_Continuity,None,BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces._kill_pointed = new_instancemethod(_BRep.BRep_CurveOn2Surfaces__kill_pointed,None,BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces.GetHandle = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_GetHandle,None,BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces_swigregister = _BRep.BRep_CurveOn2Surfaces_swigregister
BRep_CurveOn2Surfaces_swigregister(BRep_CurveOn2Surfaces)

class Handle_BRep_CurveOn2Surfaces(Handle_BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_CurveOn2Surfaces_swiginit(self,_BRep.new_Handle_BRep_CurveOn2Surfaces(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_CurveOn2Surfaces_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_CurveOn2Surfaces.Nullify = new_instancemethod(_BRep.Handle_BRep_CurveOn2Surfaces_Nullify,None,Handle_BRep_CurveOn2Surfaces)
Handle_BRep_CurveOn2Surfaces.IsNull = new_instancemethod(_BRep.Handle_BRep_CurveOn2Surfaces_IsNull,None,Handle_BRep_CurveOn2Surfaces)
Handle_BRep_CurveOn2Surfaces.GetObject = new_instancemethod(_BRep.Handle_BRep_CurveOn2Surfaces_GetObject,None,Handle_BRep_CurveOn2Surfaces)
Handle_BRep_CurveOn2Surfaces._kill_pointed = new_instancemethod(_BRep.Handle_BRep_CurveOn2Surfaces__kill_pointed,None,Handle_BRep_CurveOn2Surfaces)
Handle_BRep_CurveOn2Surfaces_swigregister = _BRep.Handle_BRep_CurveOn2Surfaces_swigregister
Handle_BRep_CurveOn2Surfaces_swigregister(Handle_BRep_CurveOn2Surfaces)

def Handle_BRep_CurveOn2Surfaces_DownCast(*args):
  return _BRep.Handle_BRep_CurveOn2Surfaces_DownCast(*args)
Handle_BRep_CurveOn2Surfaces_DownCast = _BRep.Handle_BRep_CurveOn2Surfaces_DownCast

class BRep_GCurve(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def SetRange(self, *args):
        """
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        """
        return _BRep.BRep_GCurve_SetRange(self, *args)

    def Range(self, *args):
        """
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: None

        """
        return _BRep.BRep_GCurve_Range(self, *args)

    def First(self, *args):
        """
        :rtype: float

        :param F:
        :type F: float
        :rtype: None

        """
        return _BRep.BRep_GCurve_First(self, *args)

    def Last(self, *args):
        """
        :rtype: float

        :param L:
        :type L: float
        :rtype: None

        """
        return _BRep.BRep_GCurve_Last(self, *args)

    def D0(self, *args):
        """
        * Computes the point at parameter U.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _BRep.BRep_GCurve_D0(self, *args)

    def Update(self, *args):
        """
        * Recomputes any derived data after a modification. This is called when the range is modified.

        :rtype: void

        """
        return _BRep.BRep_GCurve_Update(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_GCurve self)"""
        return _BRep.BRep_GCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_GCurve self) -> Handle_BRep_GCurve"""
        return _BRep.BRep_GCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_GCurve.SetRange = new_instancemethod(_BRep.BRep_GCurve_SetRange,None,BRep_GCurve)
BRep_GCurve.Range = new_instancemethod(_BRep.BRep_GCurve_Range,None,BRep_GCurve)
BRep_GCurve.First = new_instancemethod(_BRep.BRep_GCurve_First,None,BRep_GCurve)
BRep_GCurve.Last = new_instancemethod(_BRep.BRep_GCurve_Last,None,BRep_GCurve)
BRep_GCurve.D0 = new_instancemethod(_BRep.BRep_GCurve_D0,None,BRep_GCurve)
BRep_GCurve.Update = new_instancemethod(_BRep.BRep_GCurve_Update,None,BRep_GCurve)
BRep_GCurve._kill_pointed = new_instancemethod(_BRep.BRep_GCurve__kill_pointed,None,BRep_GCurve)
BRep_GCurve.GetHandle = new_instancemethod(_BRep.BRep_GCurve_GetHandle,None,BRep_GCurve)
BRep_GCurve_swigregister = _BRep.BRep_GCurve_swigregister
BRep_GCurve_swigregister(BRep_GCurve)

class Handle_BRep_GCurve(Handle_BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_GCurve_swiginit(self,_BRep.new_Handle_BRep_GCurve(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_GCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_GCurve.Nullify = new_instancemethod(_BRep.Handle_BRep_GCurve_Nullify,None,Handle_BRep_GCurve)
Handle_BRep_GCurve.IsNull = new_instancemethod(_BRep.Handle_BRep_GCurve_IsNull,None,Handle_BRep_GCurve)
Handle_BRep_GCurve.GetObject = new_instancemethod(_BRep.Handle_BRep_GCurve_GetObject,None,Handle_BRep_GCurve)
Handle_BRep_GCurve._kill_pointed = new_instancemethod(_BRep.Handle_BRep_GCurve__kill_pointed,None,Handle_BRep_GCurve)
Handle_BRep_GCurve_swigregister = _BRep.Handle_BRep_GCurve_swigregister
Handle_BRep_GCurve_swigregister(Handle_BRep_GCurve)

def Handle_BRep_GCurve_DownCast(*args):
  return _BRep.Handle_BRep_GCurve_DownCast(*args)
Handle_BRep_GCurve_DownCast = _BRep.Handle_BRep_GCurve_DownCast

class BRep_PointOnCurve(BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P:
        :type P: float
        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PointOnCurve_swiginit(self,_BRep.new_BRep_PointOnCurve(*args))
    def IsPointOnCurve(self, *args):
        """
        * Returns True

        :rtype: bool

        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointOnCurve_IsPointOnCurve(self, *args)

    def Curve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: void

        """
        return _BRep.BRep_PointOnCurve_Curve(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PointOnCurve self)"""
        return _BRep.BRep_PointOnCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PointOnCurve self) -> Handle_BRep_PointOnCurve"""
        return _BRep.BRep_PointOnCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PointOnCurve.IsPointOnCurve = new_instancemethod(_BRep.BRep_PointOnCurve_IsPointOnCurve,None,BRep_PointOnCurve)
BRep_PointOnCurve.Curve = new_instancemethod(_BRep.BRep_PointOnCurve_Curve,None,BRep_PointOnCurve)
BRep_PointOnCurve._kill_pointed = new_instancemethod(_BRep.BRep_PointOnCurve__kill_pointed,None,BRep_PointOnCurve)
BRep_PointOnCurve.GetHandle = new_instancemethod(_BRep.BRep_PointOnCurve_GetHandle,None,BRep_PointOnCurve)
BRep_PointOnCurve_swigregister = _BRep.BRep_PointOnCurve_swigregister
BRep_PointOnCurve_swigregister(BRep_PointOnCurve)

class Handle_BRep_PointOnCurve(Handle_BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PointOnCurve_swiginit(self,_BRep.new_Handle_BRep_PointOnCurve(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PointOnCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PointOnCurve.Nullify = new_instancemethod(_BRep.Handle_BRep_PointOnCurve_Nullify,None,Handle_BRep_PointOnCurve)
Handle_BRep_PointOnCurve.IsNull = new_instancemethod(_BRep.Handle_BRep_PointOnCurve_IsNull,None,Handle_BRep_PointOnCurve)
Handle_BRep_PointOnCurve.GetObject = new_instancemethod(_BRep.Handle_BRep_PointOnCurve_GetObject,None,Handle_BRep_PointOnCurve)
Handle_BRep_PointOnCurve._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PointOnCurve__kill_pointed,None,Handle_BRep_PointOnCurve)
Handle_BRep_PointOnCurve_swigregister = _BRep.Handle_BRep_PointOnCurve_swigregister
Handle_BRep_PointOnCurve_swigregister(Handle_BRep_PointOnCurve)

def Handle_BRep_PointOnCurve_DownCast(*args):
  return _BRep.Handle_BRep_PointOnCurve_DownCast(*args)
Handle_BRep_PointOnCurve_DownCast = _BRep.Handle_BRep_PointOnCurve_DownCast

class BRep_PointsOnSurface(BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Surface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: void

        """
        return _BRep.BRep_PointsOnSurface_Surface(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PointsOnSurface self)"""
        return _BRep.BRep_PointsOnSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PointsOnSurface self) -> Handle_BRep_PointsOnSurface"""
        return _BRep.BRep_PointsOnSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PointsOnSurface.Surface = new_instancemethod(_BRep.BRep_PointsOnSurface_Surface,None,BRep_PointsOnSurface)
BRep_PointsOnSurface._kill_pointed = new_instancemethod(_BRep.BRep_PointsOnSurface__kill_pointed,None,BRep_PointsOnSurface)
BRep_PointsOnSurface.GetHandle = new_instancemethod(_BRep.BRep_PointsOnSurface_GetHandle,None,BRep_PointsOnSurface)
BRep_PointsOnSurface_swigregister = _BRep.BRep_PointsOnSurface_swigregister
BRep_PointsOnSurface_swigregister(BRep_PointsOnSurface)

class Handle_BRep_PointsOnSurface(Handle_BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PointsOnSurface_swiginit(self,_BRep.new_Handle_BRep_PointsOnSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PointsOnSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PointsOnSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_PointsOnSurface_Nullify,None,Handle_BRep_PointsOnSurface)
Handle_BRep_PointsOnSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_PointsOnSurface_IsNull,None,Handle_BRep_PointsOnSurface)
Handle_BRep_PointsOnSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_PointsOnSurface_GetObject,None,Handle_BRep_PointsOnSurface)
Handle_BRep_PointsOnSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PointsOnSurface__kill_pointed,None,Handle_BRep_PointsOnSurface)
Handle_BRep_PointsOnSurface_swigregister = _BRep.Handle_BRep_PointsOnSurface_swigregister
Handle_BRep_PointsOnSurface_swigregister(Handle_BRep_PointsOnSurface)

def Handle_BRep_PointsOnSurface_DownCast(*args):
  return _BRep.Handle_BRep_PointsOnSurface_DownCast(*args)
Handle_BRep_PointsOnSurface_DownCast = _BRep.Handle_BRep_PointsOnSurface_DownCast

class BRep_Polygon3D(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P:
        :type P: Handle_Poly_Polygon3D &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_Polygon3D_swiginit(self,_BRep.new_BRep_Polygon3D(*args))
    def Polygon3D(self, *args):
        """
        :rtype: Handle_Poly_Polygon3D

        :param P:
        :type P: Handle_Poly_Polygon3D &
        :rtype: void

        """
        return _BRep.BRep_Polygon3D_Polygon3D(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_Polygon3D self)"""
        return _BRep.BRep_Polygon3D__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_Polygon3D self) -> Handle_BRep_Polygon3D"""
        return _BRep.BRep_Polygon3D_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_Polygon3D.Polygon3D = new_instancemethod(_BRep.BRep_Polygon3D_Polygon3D,None,BRep_Polygon3D)
BRep_Polygon3D._kill_pointed = new_instancemethod(_BRep.BRep_Polygon3D__kill_pointed,None,BRep_Polygon3D)
BRep_Polygon3D.GetHandle = new_instancemethod(_BRep.BRep_Polygon3D_GetHandle,None,BRep_Polygon3D)
BRep_Polygon3D_swigregister = _BRep.BRep_Polygon3D_swigregister
BRep_Polygon3D_swigregister(BRep_Polygon3D)

class Handle_BRep_Polygon3D(Handle_BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_Polygon3D_swiginit(self,_BRep.new_Handle_BRep_Polygon3D(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_Polygon3D_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_Polygon3D.Nullify = new_instancemethod(_BRep.Handle_BRep_Polygon3D_Nullify,None,Handle_BRep_Polygon3D)
Handle_BRep_Polygon3D.IsNull = new_instancemethod(_BRep.Handle_BRep_Polygon3D_IsNull,None,Handle_BRep_Polygon3D)
Handle_BRep_Polygon3D.GetObject = new_instancemethod(_BRep.Handle_BRep_Polygon3D_GetObject,None,Handle_BRep_Polygon3D)
Handle_BRep_Polygon3D._kill_pointed = new_instancemethod(_BRep.Handle_BRep_Polygon3D__kill_pointed,None,Handle_BRep_Polygon3D)
Handle_BRep_Polygon3D_swigregister = _BRep.Handle_BRep_Polygon3D_swigregister
Handle_BRep_Polygon3D_swigregister(Handle_BRep_Polygon3D)

def Handle_BRep_Polygon3D_DownCast(*args):
  return _BRep.Handle_BRep_Polygon3D_DownCast(*args)
Handle_BRep_Polygon3D_DownCast = _BRep.Handle_BRep_Polygon3D_DownCast

class BRep_PolygonOnSurface(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P:
        :type P: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PolygonOnSurface_swiginit(self,_BRep.new_BRep_PolygonOnSurface(*args))
    def IsPolygonOnSurface(self, *args):
        """
        * A 2D polygon representation in the parametric space of a surface.

        :rtype: bool

        * A 2D polygon representation in the parametric space of a surface.

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PolygonOnSurface_IsPolygonOnSurface(self, *args)

    def Polygon(self, *args):
        """
        :rtype: Handle_Poly_Polygon2D

        :param P:
        :type P: Handle_Poly_Polygon2D &
        :rtype: void

        """
        return _BRep.BRep_PolygonOnSurface_Polygon(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PolygonOnSurface self)"""
        return _BRep.BRep_PolygonOnSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PolygonOnSurface self) -> Handle_BRep_PolygonOnSurface"""
        return _BRep.BRep_PolygonOnSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PolygonOnSurface.IsPolygonOnSurface = new_instancemethod(_BRep.BRep_PolygonOnSurface_IsPolygonOnSurface,None,BRep_PolygonOnSurface)
BRep_PolygonOnSurface.Polygon = new_instancemethod(_BRep.BRep_PolygonOnSurface_Polygon,None,BRep_PolygonOnSurface)
BRep_PolygonOnSurface._kill_pointed = new_instancemethod(_BRep.BRep_PolygonOnSurface__kill_pointed,None,BRep_PolygonOnSurface)
BRep_PolygonOnSurface.GetHandle = new_instancemethod(_BRep.BRep_PolygonOnSurface_GetHandle,None,BRep_PolygonOnSurface)
BRep_PolygonOnSurface_swigregister = _BRep.BRep_PolygonOnSurface_swigregister
BRep_PolygonOnSurface_swigregister(BRep_PolygonOnSurface)

class Handle_BRep_PolygonOnSurface(Handle_BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PolygonOnSurface_swiginit(self,_BRep.new_Handle_BRep_PolygonOnSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PolygonOnSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PolygonOnSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_PolygonOnSurface_Nullify,None,Handle_BRep_PolygonOnSurface)
Handle_BRep_PolygonOnSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_PolygonOnSurface_IsNull,None,Handle_BRep_PolygonOnSurface)
Handle_BRep_PolygonOnSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_PolygonOnSurface_GetObject,None,Handle_BRep_PolygonOnSurface)
Handle_BRep_PolygonOnSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PolygonOnSurface__kill_pointed,None,Handle_BRep_PolygonOnSurface)
Handle_BRep_PolygonOnSurface_swigregister = _BRep.Handle_BRep_PolygonOnSurface_swigregister
Handle_BRep_PolygonOnSurface_swigregister(Handle_BRep_PolygonOnSurface)

def Handle_BRep_PolygonOnSurface_DownCast(*args):
  return _BRep.Handle_BRep_PolygonOnSurface_DownCast(*args)
Handle_BRep_PolygonOnSurface_DownCast = _BRep.Handle_BRep_PolygonOnSurface_DownCast

class BRep_PolygonOnTriangulation(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P:
        :type P: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PolygonOnTriangulation_swiginit(self,_BRep.new_BRep_PolygonOnTriangulation(*args))
    def IsPolygonOnTriangulation(self, *args):
        """
        * returns True.

        :rtype: bool

        * Is it a polygon in the definition of <T> with location <L>.

        :param T:
        :type T: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PolygonOnTriangulation_IsPolygonOnTriangulation(self, *args)

    def PolygonOnTriangulation(self, *args):
        """
        * returns True.

        :param P:
        :type P: Handle_Poly_PolygonOnTriangulation &
        :rtype: void

        :rtype: Handle_Poly_PolygonOnTriangulation

        """
        return _BRep.BRep_PolygonOnTriangulation_PolygonOnTriangulation(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PolygonOnTriangulation self)"""
        return _BRep.BRep_PolygonOnTriangulation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PolygonOnTriangulation self) -> Handle_BRep_PolygonOnTriangulation"""
        return _BRep.BRep_PolygonOnTriangulation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PolygonOnTriangulation.IsPolygonOnTriangulation = new_instancemethod(_BRep.BRep_PolygonOnTriangulation_IsPolygonOnTriangulation,None,BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation.PolygonOnTriangulation = new_instancemethod(_BRep.BRep_PolygonOnTriangulation_PolygonOnTriangulation,None,BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation._kill_pointed = new_instancemethod(_BRep.BRep_PolygonOnTriangulation__kill_pointed,None,BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation.GetHandle = new_instancemethod(_BRep.BRep_PolygonOnTriangulation_GetHandle,None,BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation_swigregister = _BRep.BRep_PolygonOnTriangulation_swigregister
BRep_PolygonOnTriangulation_swigregister(BRep_PolygonOnTriangulation)

class Handle_BRep_PolygonOnTriangulation(Handle_BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PolygonOnTriangulation_swiginit(self,_BRep.new_Handle_BRep_PolygonOnTriangulation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PolygonOnTriangulation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PolygonOnTriangulation.Nullify = new_instancemethod(_BRep.Handle_BRep_PolygonOnTriangulation_Nullify,None,Handle_BRep_PolygonOnTriangulation)
Handle_BRep_PolygonOnTriangulation.IsNull = new_instancemethod(_BRep.Handle_BRep_PolygonOnTriangulation_IsNull,None,Handle_BRep_PolygonOnTriangulation)
Handle_BRep_PolygonOnTriangulation.GetObject = new_instancemethod(_BRep.Handle_BRep_PolygonOnTriangulation_GetObject,None,Handle_BRep_PolygonOnTriangulation)
Handle_BRep_PolygonOnTriangulation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PolygonOnTriangulation__kill_pointed,None,Handle_BRep_PolygonOnTriangulation)
Handle_BRep_PolygonOnTriangulation_swigregister = _BRep.Handle_BRep_PolygonOnTriangulation_swigregister
Handle_BRep_PolygonOnTriangulation_swigregister(Handle_BRep_PolygonOnTriangulation)

def Handle_BRep_PolygonOnTriangulation_DownCast(*args):
  return _BRep.Handle_BRep_PolygonOnTriangulation_DownCast(*args)
Handle_BRep_PolygonOnTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnTriangulation_DownCast

class BRep_Curve3D(BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param C:
        :type C: Handle_Geom_Curve &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_Curve3D_swiginit(self,_BRep.new_BRep_Curve3D(*args))
    def Curve3D(self, *args):
        """
        :rtype: Handle_Geom_Curve

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: void

        """
        return _BRep.BRep_Curve3D_Curve3D(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_Curve3D self)"""
        return _BRep.BRep_Curve3D__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_Curve3D self) -> Handle_BRep_Curve3D"""
        return _BRep.BRep_Curve3D_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_Curve3D.Curve3D = new_instancemethod(_BRep.BRep_Curve3D_Curve3D,None,BRep_Curve3D)
BRep_Curve3D._kill_pointed = new_instancemethod(_BRep.BRep_Curve3D__kill_pointed,None,BRep_Curve3D)
BRep_Curve3D.GetHandle = new_instancemethod(_BRep.BRep_Curve3D_GetHandle,None,BRep_Curve3D)
BRep_Curve3D_swigregister = _BRep.BRep_Curve3D_swigregister
BRep_Curve3D_swigregister(BRep_Curve3D)

class Handle_BRep_Curve3D(Handle_BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_Curve3D_swiginit(self,_BRep.new_Handle_BRep_Curve3D(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_Curve3D_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_Curve3D.Nullify = new_instancemethod(_BRep.Handle_BRep_Curve3D_Nullify,None,Handle_BRep_Curve3D)
Handle_BRep_Curve3D.IsNull = new_instancemethod(_BRep.Handle_BRep_Curve3D_IsNull,None,Handle_BRep_Curve3D)
Handle_BRep_Curve3D.GetObject = new_instancemethod(_BRep.Handle_BRep_Curve3D_GetObject,None,Handle_BRep_Curve3D)
Handle_BRep_Curve3D._kill_pointed = new_instancemethod(_BRep.Handle_BRep_Curve3D__kill_pointed,None,Handle_BRep_Curve3D)
Handle_BRep_Curve3D_swigregister = _BRep.Handle_BRep_Curve3D_swigregister
Handle_BRep_Curve3D_swigregister(Handle_BRep_Curve3D)

def Handle_BRep_Curve3D_DownCast(*args):
  return _BRep.Handle_BRep_Curve3D_DownCast(*args)
Handle_BRep_Curve3D_DownCast = _BRep.Handle_BRep_Curve3D_DownCast

class BRep_CurveOnSurface(BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param PC:
        :type PC: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_CurveOnSurface_swiginit(self,_BRep.new_BRep_CurveOnSurface(*args))
    def SetUVPoints(self, *args):
        """
        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _BRep.BRep_CurveOnSurface_SetUVPoints(self, *args)

    def UVPoints(self, *args):
        """
        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _BRep.BRep_CurveOnSurface_UVPoints(self, *args)

    def IsCurveOnSurface(self, *args):
        """
        * Returns True.

        :rtype: bool

        * A curve in the parametric space of a surface.

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveOnSurface_IsCurveOnSurface(self, *args)

    def PCurve(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_CurveOnSurface_PCurve(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_CurveOnSurface self)"""
        return _BRep.BRep_CurveOnSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_CurveOnSurface self) -> Handle_BRep_CurveOnSurface"""
        return _BRep.BRep_CurveOnSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_CurveOnSurface.SetUVPoints = new_instancemethod(_BRep.BRep_CurveOnSurface_SetUVPoints,None,BRep_CurveOnSurface)
BRep_CurveOnSurface.UVPoints = new_instancemethod(_BRep.BRep_CurveOnSurface_UVPoints,None,BRep_CurveOnSurface)
BRep_CurveOnSurface.IsCurveOnSurface = new_instancemethod(_BRep.BRep_CurveOnSurface_IsCurveOnSurface,None,BRep_CurveOnSurface)
BRep_CurveOnSurface.PCurve = new_instancemethod(_BRep.BRep_CurveOnSurface_PCurve,None,BRep_CurveOnSurface)
BRep_CurveOnSurface._kill_pointed = new_instancemethod(_BRep.BRep_CurveOnSurface__kill_pointed,None,BRep_CurveOnSurface)
BRep_CurveOnSurface.GetHandle = new_instancemethod(_BRep.BRep_CurveOnSurface_GetHandle,None,BRep_CurveOnSurface)
BRep_CurveOnSurface_swigregister = _BRep.BRep_CurveOnSurface_swigregister
BRep_CurveOnSurface_swigregister(BRep_CurveOnSurface)

class Handle_BRep_CurveOnSurface(Handle_BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_CurveOnSurface_swiginit(self,_BRep.new_Handle_BRep_CurveOnSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_CurveOnSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_CurveOnSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_CurveOnSurface_Nullify,None,Handle_BRep_CurveOnSurface)
Handle_BRep_CurveOnSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_CurveOnSurface_IsNull,None,Handle_BRep_CurveOnSurface)
Handle_BRep_CurveOnSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_CurveOnSurface_GetObject,None,Handle_BRep_CurveOnSurface)
Handle_BRep_CurveOnSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_CurveOnSurface__kill_pointed,None,Handle_BRep_CurveOnSurface)
Handle_BRep_CurveOnSurface_swigregister = _BRep.Handle_BRep_CurveOnSurface_swigregister
Handle_BRep_CurveOnSurface_swigregister(Handle_BRep_CurveOnSurface)

def Handle_BRep_CurveOnSurface_DownCast(*args):
  return _BRep.Handle_BRep_CurveOnSurface_DownCast(*args)
Handle_BRep_CurveOnSurface_DownCast = _BRep.Handle_BRep_CurveOnSurface_DownCast

class BRep_PointOnCurveOnSurface(BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P:
        :type P: float
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PointOnCurveOnSurface_swiginit(self,_BRep.new_BRep_PointOnCurveOnSurface(*args))
    def IsPointOnCurveOnSurface(self, *args):
        """
        * Returns True

        :rtype: bool

        :param PC:
        :type PC: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointOnCurveOnSurface_IsPointOnCurveOnSurface(self, *args)

    def PCurve(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_PointOnCurveOnSurface_PCurve(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PointOnCurveOnSurface self)"""
        return _BRep.BRep_PointOnCurveOnSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PointOnCurveOnSurface self) -> Handle_BRep_PointOnCurveOnSurface"""
        return _BRep.BRep_PointOnCurveOnSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PointOnCurveOnSurface.IsPointOnCurveOnSurface = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface_IsPointOnCurveOnSurface,None,BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface.PCurve = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface_PCurve,None,BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface._kill_pointed = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface__kill_pointed,None,BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface.GetHandle = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface_GetHandle,None,BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface_swigregister = _BRep.BRep_PointOnCurveOnSurface_swigregister
BRep_PointOnCurveOnSurface_swigregister(BRep_PointOnCurveOnSurface)

class Handle_BRep_PointOnCurveOnSurface(Handle_BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PointOnCurveOnSurface_swiginit(self,_BRep.new_Handle_BRep_PointOnCurveOnSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PointOnCurveOnSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PointOnCurveOnSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_PointOnCurveOnSurface_Nullify,None,Handle_BRep_PointOnCurveOnSurface)
Handle_BRep_PointOnCurveOnSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_PointOnCurveOnSurface_IsNull,None,Handle_BRep_PointOnCurveOnSurface)
Handle_BRep_PointOnCurveOnSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_PointOnCurveOnSurface_GetObject,None,Handle_BRep_PointOnCurveOnSurface)
Handle_BRep_PointOnCurveOnSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PointOnCurveOnSurface__kill_pointed,None,Handle_BRep_PointOnCurveOnSurface)
Handle_BRep_PointOnCurveOnSurface_swigregister = _BRep.Handle_BRep_PointOnCurveOnSurface_swigregister
Handle_BRep_PointOnCurveOnSurface_swigregister(Handle_BRep_PointOnCurveOnSurface)

def Handle_BRep_PointOnCurveOnSurface_DownCast(*args):
  return _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast(*args)
Handle_BRep_PointOnCurveOnSurface_DownCast = _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast

class BRep_PointOnSurface(BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P1:
        :type P1: float
        :param P2:
        :type P2: float
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PointOnSurface_swiginit(self,_BRep.new_BRep_PointOnSurface(*args))
    def IsPointOnSurface(self, *args):
        """
        :rtype: bool

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_PointOnSurface_IsPointOnSurface(self, *args)

    def Parameter2(self, *args):
        """
        :rtype: float

        :param P:
        :type P: float
        :rtype: void

        """
        return _BRep.BRep_PointOnSurface_Parameter2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PointOnSurface self)"""
        return _BRep.BRep_PointOnSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PointOnSurface self) -> Handle_BRep_PointOnSurface"""
        return _BRep.BRep_PointOnSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PointOnSurface.IsPointOnSurface = new_instancemethod(_BRep.BRep_PointOnSurface_IsPointOnSurface,None,BRep_PointOnSurface)
BRep_PointOnSurface.Parameter2 = new_instancemethod(_BRep.BRep_PointOnSurface_Parameter2,None,BRep_PointOnSurface)
BRep_PointOnSurface._kill_pointed = new_instancemethod(_BRep.BRep_PointOnSurface__kill_pointed,None,BRep_PointOnSurface)
BRep_PointOnSurface.GetHandle = new_instancemethod(_BRep.BRep_PointOnSurface_GetHandle,None,BRep_PointOnSurface)
BRep_PointOnSurface_swigregister = _BRep.BRep_PointOnSurface_swigregister
BRep_PointOnSurface_swigregister(BRep_PointOnSurface)

class Handle_BRep_PointOnSurface(Handle_BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PointOnSurface_swiginit(self,_BRep.new_Handle_BRep_PointOnSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PointOnSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PointOnSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_PointOnSurface_Nullify,None,Handle_BRep_PointOnSurface)
Handle_BRep_PointOnSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_PointOnSurface_IsNull,None,Handle_BRep_PointOnSurface)
Handle_BRep_PointOnSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_PointOnSurface_GetObject,None,Handle_BRep_PointOnSurface)
Handle_BRep_PointOnSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PointOnSurface__kill_pointed,None,Handle_BRep_PointOnSurface)
Handle_BRep_PointOnSurface_swigregister = _BRep.Handle_BRep_PointOnSurface_swigregister
Handle_BRep_PointOnSurface_swigregister(Handle_BRep_PointOnSurface)

def Handle_BRep_PointOnSurface_DownCast(*args):
  return _BRep.Handle_BRep_PointOnSurface_DownCast(*args)
Handle_BRep_PointOnSurface_DownCast = _BRep.Handle_BRep_PointOnSurface_DownCast

class BRep_PolygonOnClosedSurface(BRep_PolygonOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P1:
        :type P1: Handle_Poly_Polygon2D &
        :param P2:
        :type P2: Handle_Poly_Polygon2D &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PolygonOnClosedSurface_swiginit(self,_BRep.new_BRep_PolygonOnClosedSurface(*args))
    def Polygon2(self, *args):
        """
        :rtype: Handle_Poly_Polygon2D

        :param P:
        :type P: Handle_Poly_Polygon2D &
        :rtype: void

        """
        return _BRep.BRep_PolygonOnClosedSurface_Polygon2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PolygonOnClosedSurface self)"""
        return _BRep.BRep_PolygonOnClosedSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PolygonOnClosedSurface self) -> Handle_BRep_PolygonOnClosedSurface"""
        return _BRep.BRep_PolygonOnClosedSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PolygonOnClosedSurface.Polygon2 = new_instancemethod(_BRep.BRep_PolygonOnClosedSurface_Polygon2,None,BRep_PolygonOnClosedSurface)
BRep_PolygonOnClosedSurface._kill_pointed = new_instancemethod(_BRep.BRep_PolygonOnClosedSurface__kill_pointed,None,BRep_PolygonOnClosedSurface)
BRep_PolygonOnClosedSurface.GetHandle = new_instancemethod(_BRep.BRep_PolygonOnClosedSurface_GetHandle,None,BRep_PolygonOnClosedSurface)
BRep_PolygonOnClosedSurface_swigregister = _BRep.BRep_PolygonOnClosedSurface_swigregister
BRep_PolygonOnClosedSurface_swigregister(BRep_PolygonOnClosedSurface)

class Handle_BRep_PolygonOnClosedSurface(Handle_BRep_PolygonOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PolygonOnClosedSurface_swiginit(self,_BRep.new_Handle_BRep_PolygonOnClosedSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PolygonOnClosedSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PolygonOnClosedSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedSurface_Nullify,None,Handle_BRep_PolygonOnClosedSurface)
Handle_BRep_PolygonOnClosedSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedSurface_IsNull,None,Handle_BRep_PolygonOnClosedSurface)
Handle_BRep_PolygonOnClosedSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedSurface_GetObject,None,Handle_BRep_PolygonOnClosedSurface)
Handle_BRep_PolygonOnClosedSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedSurface__kill_pointed,None,Handle_BRep_PolygonOnClosedSurface)
Handle_BRep_PolygonOnClosedSurface_swigregister = _BRep.Handle_BRep_PolygonOnClosedSurface_swigregister
Handle_BRep_PolygonOnClosedSurface_swigregister(Handle_BRep_PolygonOnClosedSurface)

def Handle_BRep_PolygonOnClosedSurface_DownCast(*args):
  return _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast(*args)
Handle_BRep_PolygonOnClosedSurface_DownCast = _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast

class BRep_PolygonOnClosedTriangulation(BRep_PolygonOnTriangulation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param P1:
        :type P1: Handle_Poly_PolygonOnTriangulation &
        :param P2:
        :type P2: Handle_Poly_PolygonOnTriangulation &
        :param Tr:
        :type Tr: Handle_Poly_Triangulation &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        _BRep.BRep_PolygonOnClosedTriangulation_swiginit(self,_BRep.new_BRep_PolygonOnClosedTriangulation(*args))
    def PolygonOnTriangulation2(self, *args):
        """
        :param P2:
        :type P2: Handle_Poly_PolygonOnTriangulation &
        :rtype: void

        :rtype: Handle_Poly_PolygonOnTriangulation

        """
        return _BRep.BRep_PolygonOnClosedTriangulation_PolygonOnTriangulation2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_PolygonOnClosedTriangulation self)"""
        return _BRep.BRep_PolygonOnClosedTriangulation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_PolygonOnClosedTriangulation self) -> Handle_BRep_PolygonOnClosedTriangulation"""
        return _BRep.BRep_PolygonOnClosedTriangulation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_PolygonOnClosedTriangulation.PolygonOnTriangulation2 = new_instancemethod(_BRep.BRep_PolygonOnClosedTriangulation_PolygonOnTriangulation2,None,BRep_PolygonOnClosedTriangulation)
BRep_PolygonOnClosedTriangulation._kill_pointed = new_instancemethod(_BRep.BRep_PolygonOnClosedTriangulation__kill_pointed,None,BRep_PolygonOnClosedTriangulation)
BRep_PolygonOnClosedTriangulation.GetHandle = new_instancemethod(_BRep.BRep_PolygonOnClosedTriangulation_GetHandle,None,BRep_PolygonOnClosedTriangulation)
BRep_PolygonOnClosedTriangulation_swigregister = _BRep.BRep_PolygonOnClosedTriangulation_swigregister
BRep_PolygonOnClosedTriangulation_swigregister(BRep_PolygonOnClosedTriangulation)

class Handle_BRep_PolygonOnClosedTriangulation(Handle_BRep_PolygonOnTriangulation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_PolygonOnClosedTriangulation_swiginit(self,_BRep.new_Handle_BRep_PolygonOnClosedTriangulation(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_PolygonOnClosedTriangulation.Nullify = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedTriangulation_Nullify,None,Handle_BRep_PolygonOnClosedTriangulation)
Handle_BRep_PolygonOnClosedTriangulation.IsNull = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedTriangulation_IsNull,None,Handle_BRep_PolygonOnClosedTriangulation)
Handle_BRep_PolygonOnClosedTriangulation.GetObject = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedTriangulation_GetObject,None,Handle_BRep_PolygonOnClosedTriangulation)
Handle_BRep_PolygonOnClosedTriangulation._kill_pointed = new_instancemethod(_BRep.Handle_BRep_PolygonOnClosedTriangulation__kill_pointed,None,Handle_BRep_PolygonOnClosedTriangulation)
Handle_BRep_PolygonOnClosedTriangulation_swigregister = _BRep.Handle_BRep_PolygonOnClosedTriangulation_swigregister
Handle_BRep_PolygonOnClosedTriangulation_swigregister(Handle_BRep_PolygonOnClosedTriangulation)

def Handle_BRep_PolygonOnClosedTriangulation_DownCast(*args):
  return _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast(*args)
Handle_BRep_PolygonOnClosedTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast

class BRep_CurveOnClosedSurface(BRep_CurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param PC1:
        :type PC1: Handle_Geom2d_Curve &
        :param PC2:
        :type PC2: Handle_Geom2d_Curve &
        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :param C:
        :type C: GeomAbs_Shape
        :rtype: None

        """
        _BRep.BRep_CurveOnClosedSurface_swiginit(self,_BRep.new_BRep_CurveOnClosedSurface(*args))
    def SetUVPoints2(self, *args):
        """
        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _BRep.BRep_CurveOnClosedSurface_SetUVPoints2(self, *args)

    def UVPoints2(self, *args):
        """
        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _BRep.BRep_CurveOnClosedSurface_UVPoints2(self, *args)

    def IsRegularity(self, *args):
        """
        * Returns True

        :rtype: bool

        * A curve on two surfaces (continuity).

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param L1:
        :type L1: TopLoc_Location &
        :param L2:
        :type L2: TopLoc_Location &
        :rtype: bool

        """
        return _BRep.BRep_CurveOnClosedSurface_IsRegularity(self, *args)

    def Continuity(self, *args):
        """
        :rtype: GeomAbs_Shape

        :param C:
        :type C: GeomAbs_Shape
        :rtype: void

        """
        return _BRep.BRep_CurveOnClosedSurface_Continuity(self, *args)

    def PCurve2(self, *args):
        """
        :rtype: Handle_Geom2d_Curve

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: void

        """
        return _BRep.BRep_CurveOnClosedSurface_PCurve2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRep_CurveOnClosedSurface self)"""
        return _BRep.BRep_CurveOnClosedSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRep_CurveOnClosedSurface self) -> Handle_BRep_CurveOnClosedSurface"""
        return _BRep.BRep_CurveOnClosedSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRep_CurveOnClosedSurface.SetUVPoints2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_SetUVPoints2,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.UVPoints2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_UVPoints2,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.IsRegularity = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_IsRegularity,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.Continuity = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_Continuity,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.PCurve2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_PCurve2,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface._kill_pointed = new_instancemethod(_BRep.BRep_CurveOnClosedSurface__kill_pointed,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.GetHandle = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_GetHandle,None,BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface_swigregister = _BRep.BRep_CurveOnClosedSurface_swigregister
BRep_CurveOnClosedSurface_swigregister(BRep_CurveOnClosedSurface)

class Handle_BRep_CurveOnClosedSurface(Handle_BRep_CurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRep.Handle_BRep_CurveOnClosedSurface_swiginit(self,_BRep.new_Handle_BRep_CurveOnClosedSurface(*args))
    DownCast = staticmethod(_BRep.Handle_BRep_CurveOnClosedSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRep_CurveOnClosedSurface.Nullify = new_instancemethod(_BRep.Handle_BRep_CurveOnClosedSurface_Nullify,None,Handle_BRep_CurveOnClosedSurface)
Handle_BRep_CurveOnClosedSurface.IsNull = new_instancemethod(_BRep.Handle_BRep_CurveOnClosedSurface_IsNull,None,Handle_BRep_CurveOnClosedSurface)
Handle_BRep_CurveOnClosedSurface.GetObject = new_instancemethod(_BRep.Handle_BRep_CurveOnClosedSurface_GetObject,None,Handle_BRep_CurveOnClosedSurface)
Handle_BRep_CurveOnClosedSurface._kill_pointed = new_instancemethod(_BRep.Handle_BRep_CurveOnClosedSurface__kill_pointed,None,Handle_BRep_CurveOnClosedSurface)
Handle_BRep_CurveOnClosedSurface_swigregister = _BRep.Handle_BRep_CurveOnClosedSurface_swigregister
Handle_BRep_CurveOnClosedSurface_swigregister(Handle_BRep_CurveOnClosedSurface)

def Handle_BRep_CurveOnClosedSurface_DownCast(*args):
  return _BRep.Handle_BRep_CurveOnClosedSurface_DownCast(*args)
Handle_BRep_CurveOnClosedSurface_DownCast = _BRep.Handle_BRep_CurveOnClosedSurface_DownCast



