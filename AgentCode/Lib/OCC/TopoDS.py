# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _TopoDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopoDS', [dirname(__file__)])
        except ImportError:
            import _TopoDS
            return _TopoDS
        if fp is not None:
            try:
                _mod = imp.load_module('_TopoDS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _TopoDS
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDS.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_TopoDS.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopoDS.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopoDS.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopoDS.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopoDS.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopoDS.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopoDS.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopoDS.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopoDS.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopoDS.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopoDS.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopoDS.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopoDS.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopoDS.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopoDS.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopoDS.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _TopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
class topods(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Vertex(*args):
        """
        * Basic tool to access the data structure. Casts shape S to the more specialized return type, Vertex. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Vertex

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Vertex

        """
        return _TopoDS.topods_Vertex(*args)

    Vertex = staticmethod(Vertex)
    def Edge(*args):
        """
        * Casts shape S to the more specialized return type, Edge Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Edge

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Edge

        """
        return _TopoDS.topods_Edge(*args)

    Edge = staticmethod(Edge)
    def Wire(*args):
        """
        * Casts shape S to the more specialized return type, Wire. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Wire

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Wire

        """
        return _TopoDS.topods_Wire(*args)

    Wire = staticmethod(Wire)
    def Face(*args):
        """
        * Casts shape S to the more specialized return type, Face. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Face

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Face

        """
        return _TopoDS.topods_Face(*args)

    Face = staticmethod(Face)
    def Shell(*args):
        """
        * Casts shape S to the more specialized return type, Shell. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Shell

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Shell

        """
        return _TopoDS.topods_Shell(*args)

    Shell = staticmethod(Shell)
    def Solid(*args):
        """
        * Casts shape S to the more specialized return type, Solid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Solid

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Solid

        """
        return _TopoDS.topods_Solid(*args)

    Solid = staticmethod(Solid)
    def CompSolid(*args):
        """
        * Casts shape S to the more specialized return type, CompSolid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_CompSolid

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_CompSolid

        """
        return _TopoDS.topods_CompSolid(*args)

    CompSolid = staticmethod(CompSolid)
    def Compound(*args):
        """
        * Casts shape S to the more specialized return type, Compound. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopoDS_Compound

        :param &:
        :type &: TopoDS_Shape
        :rtype: inline TopoDS_Compound

        """
        return _TopoDS.topods_Compound(*args)

    Compound = staticmethod(Compound)
    def __init__(self): 
        _TopoDS.topods_swiginit(self,_TopoDS.new_topods())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


topods._kill_pointed = new_instancemethod(_TopoDS.topods__kill_pointed,None,topods)
topods_swigregister = _TopoDS.topods_swigregister
topods_swigregister(topods)

def topods_Vertex(*args):
  """
    * Basic tool to access the data structure. Casts shape S to the more specialized return type, Vertex. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Vertex

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Vertex

    """
  return _TopoDS.topods_Vertex(*args)

def topods_Edge(*args):
  """
    * Casts shape S to the more specialized return type, Edge Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Edge

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Edge

    """
  return _TopoDS.topods_Edge(*args)

def topods_Wire(*args):
  """
    * Casts shape S to the more specialized return type, Wire. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Wire

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Wire

    """
  return _TopoDS.topods_Wire(*args)

def topods_Face(*args):
  """
    * Casts shape S to the more specialized return type, Face. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Face

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Face

    """
  return _TopoDS.topods_Face(*args)

def topods_Shell(*args):
  """
    * Casts shape S to the more specialized return type, Shell. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Shell

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Shell

    """
  return _TopoDS.topods_Shell(*args)

def topods_Solid(*args):
  """
    * Casts shape S to the more specialized return type, Solid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Solid

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Solid

    """
  return _TopoDS.topods_Solid(*args)

def topods_CompSolid(*args):
  """
    * Casts shape S to the more specialized return type, CompSolid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_CompSolid

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_CompSolid

    """
  return _TopoDS.topods_CompSolid(*args)

def topods_Compound(*args):
  """
    * Casts shape S to the more specialized return type, Compound. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.

    :param S:
    :type S: TopoDS_Shape &
    :rtype: TopoDS_Compound

    :param &:
    :type &: TopoDS_Shape
    :rtype: inline TopoDS_Compound

    """
  return _TopoDS.topods_Compound(*args)

class TopoDS_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MakeWire(self, *args):
        """
        * Make an empty Wire.

        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_MakeWire(self, *args)

    def MakeShell(self, *args):
        """
        * Make an empty Shell.

        :param S:
        :type S: TopoDS_Shell &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_MakeShell(self, *args)

    def MakeSolid(self, *args):
        """
        * Make a Solid covering the whole 3D space.

        :param S:
        :type S: TopoDS_Solid &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_MakeSolid(self, *args)

    def MakeCompSolid(self, *args):
        """
        * Make an empty Composite Solid.

        :param C:
        :type C: TopoDS_CompSolid &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_MakeCompSolid(self, *args)

    def MakeCompound(self, *args):
        """
        * Make an empty Compound.

        :param C:
        :type C: TopoDS_Compound &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_MakeCompound(self, *args)

    def Add(self, *args):
        """
        * Add the Shape C in the Shape S. Exceptions - TopoDS_FrozenShape if S is not free and cannot be modified. - TopoDS__UnCompatibleShapes if S and C are not compatible.

        :param S:
        :type S: TopoDS_Shape &
        :param C:
        :type C: TopoDS_Shape &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_Add(self, *args)

    def Remove(self, *args):
        """
        * Remove the Shape C from the Shape S. Exceptions TopoDS_FrozenShape if S is frozen and cannot be modified.

        :param S:
        :type S: TopoDS_Shape &
        :param C:
        :type C: TopoDS_Shape &
        :rtype: None

        """
        return _TopoDS.TopoDS_Builder_Remove(self, *args)

    def __init__(self): 
        _TopoDS.TopoDS_Builder_swiginit(self,_TopoDS.new_TopoDS_Builder())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Builder.MakeWire = new_instancemethod(_TopoDS.TopoDS_Builder_MakeWire,None,TopoDS_Builder)
TopoDS_Builder.MakeShell = new_instancemethod(_TopoDS.TopoDS_Builder_MakeShell,None,TopoDS_Builder)
TopoDS_Builder.MakeSolid = new_instancemethod(_TopoDS.TopoDS_Builder_MakeSolid,None,TopoDS_Builder)
TopoDS_Builder.MakeCompSolid = new_instancemethod(_TopoDS.TopoDS_Builder_MakeCompSolid,None,TopoDS_Builder)
TopoDS_Builder.MakeCompound = new_instancemethod(_TopoDS.TopoDS_Builder_MakeCompound,None,TopoDS_Builder)
TopoDS_Builder.Add = new_instancemethod(_TopoDS.TopoDS_Builder_Add,None,TopoDS_Builder)
TopoDS_Builder.Remove = new_instancemethod(_TopoDS.TopoDS_Builder_Remove,None,TopoDS_Builder)
TopoDS_Builder._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Builder__kill_pointed,None,TopoDS_Builder)
TopoDS_Builder_swigregister = _TopoDS.TopoDS_Builder_swigregister
TopoDS_Builder_swigregister(TopoDS_Builder)

class TopoDS_HShape(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an empty shape object

        :rtype: None

        * Constructs a shape object defined by the shape aShape.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: None

        """
        _TopoDS.TopoDS_HShape_swiginit(self,_TopoDS.new_TopoDS_HShape(*args))
    def Shape(self, *args):
        """
        * Loads this shape with the shape aShape

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: None

        * Returns a reference to a constant TopoDS_Shape based on this shape.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_HShape_Shape(self, *args)

    def ChangeShape(self, *args):
        """
        * Exchanges the TopoDS_Shape object defining this shape for another one referencing the same underlying shape Accesses the list of shapes within the underlying shape referenced by the TopoDS_Shape object. Returns a reference to a TopoDS_Shape based on this shape. The TopoDS_Shape can be modified.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_HShape_ChangeShape(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopoDS_HShape self)"""
        return _TopoDS.TopoDS_HShape__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_HShape self) -> Handle_TopoDS_HShape"""
        return _TopoDS.TopoDS_HShape_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_HShape.Shape = new_instancemethod(_TopoDS.TopoDS_HShape_Shape,None,TopoDS_HShape)
TopoDS_HShape.ChangeShape = new_instancemethod(_TopoDS.TopoDS_HShape_ChangeShape,None,TopoDS_HShape)
TopoDS_HShape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_HShape__kill_pointed,None,TopoDS_HShape)
TopoDS_HShape.GetHandle = new_instancemethod(_TopoDS.TopoDS_HShape_GetHandle,None,TopoDS_HShape)
TopoDS_HShape_swigregister = _TopoDS.TopoDS_HShape_swigregister
TopoDS_HShape_swigregister(TopoDS_HShape)

class Handle_TopoDS_HShape(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_HShape_swiginit(self,_TopoDS.new_Handle_TopoDS_HShape(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_HShape_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_HShape.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_HShape_Nullify,None,Handle_TopoDS_HShape)
Handle_TopoDS_HShape.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_HShape_IsNull,None,Handle_TopoDS_HShape)
Handle_TopoDS_HShape.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_HShape_GetObject,None,Handle_TopoDS_HShape)
Handle_TopoDS_HShape._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_HShape__kill_pointed,None,Handle_TopoDS_HShape)
Handle_TopoDS_HShape_swigregister = _TopoDS.Handle_TopoDS_HShape_swigregister
Handle_TopoDS_HShape_swigregister(Handle_TopoDS_HShape)

def Handle_TopoDS_HShape_DownCast(*args):
  return _TopoDS.Handle_TopoDS_HShape_DownCast(*args)
Handle_TopoDS_HShape_DownCast = _TopoDS.Handle_TopoDS_HShape_DownCast

class TopoDS_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty Iterator.

        :rtype: None

        * Creates an Iterator on <S> sub-shapes. Note: - If cumOri is true, the function composes all sub-shapes with the orientation of S. - If cumLoc is true, the function multiplies all sub-shapes by the location of S, i.e. it applies to each sub-shape the transformation that is associated with S.

        :param S:
        :type S: TopoDS_Shape &
        :param cumOri: default value is Standard_True
        :type cumOri: bool
        :param cumLoc: default value is Standard_True
        :type cumLoc: bool
        :rtype: None

        """
        _TopoDS.TopoDS_Iterator_swiginit(self,_TopoDS.new_TopoDS_Iterator(*args))
    def Initialize(self, *args):
        """
        * Initializes this iterator with shape S. Note: - If cumOri is true, the function composes all sub-shapes with the orientation of S. - If cumLoc is true, the function multiplies all sub-shapes by the location of S, i.e. it applies to each sub-shape the transformation that is associated with S.

        :param S:
        :type S: TopoDS_Shape &
        :param cumOri: default value is Standard_True
        :type cumOri: bool
        :param cumLoc: default value is Standard_True
        :type cumLoc: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Iterator_Initialize(self, *args)

    def More(self, *args):
        """
        * Returns true if there is another sub-shape in the shape which this iterator is scanning.

        :rtype: bool

        """
        return _TopoDS.TopoDS_Iterator_More(self, *args)

    def Next(self, *args):
        """
        * Moves on to the next sub-shape in the shape which this iterator is scanning. Exceptions Standard_NoMoreObject if there are no more sub-shapes in the shape.

        :rtype: None

        """
        return _TopoDS.TopoDS_Iterator_Next(self, *args)

    def Value(self, *args):
        """
        * Returns the current sub-shape in the shape which this iterator is scanning. Exceptions Standard_NoSuchObject if there is no current sub-shape.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Iterator_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Iterator.Initialize = new_instancemethod(_TopoDS.TopoDS_Iterator_Initialize,None,TopoDS_Iterator)
TopoDS_Iterator.More = new_instancemethod(_TopoDS.TopoDS_Iterator_More,None,TopoDS_Iterator)
TopoDS_Iterator.Next = new_instancemethod(_TopoDS.TopoDS_Iterator_Next,None,TopoDS_Iterator)
TopoDS_Iterator.Value = new_instancemethod(_TopoDS.TopoDS_Iterator_Value,None,TopoDS_Iterator)
TopoDS_Iterator._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Iterator__kill_pointed,None,TopoDS_Iterator)
TopoDS_Iterator_swigregister = _TopoDS.TopoDS_Iterator_swigregister
TopoDS_Iterator_swigregister(TopoDS_Iterator)

class TopoDS_ListIteratorOfListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TopoDS_ListOfShape &
        :rtype: None

        """
        _TopoDS.TopoDS_ListIteratorOfListOfShape_swiginit(self,_TopoDS.new_TopoDS_ListIteratorOfListOfShape(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TopoDS_ListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_ListIteratorOfListOfShape.Initialize = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_Initialize,None,TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.More = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_More,None,TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.Next = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_Next,None,TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.Value = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_Value,None,TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape__kill_pointed,None,TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape_swigregister = _TopoDS.TopoDS_ListIteratorOfListOfShape_swigregister
TopoDS_ListIteratorOfListOfShape_swigregister(TopoDS_ListIteratorOfListOfShape)

class TopoDS_ListNodeOfListOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TopoDS.TopoDS_ListNodeOfListOfShape_swiginit(self,_TopoDS.new_TopoDS_ListNodeOfListOfShape(*args))
    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_ListNodeOfListOfShape_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopoDS_ListNodeOfListOfShape self)"""
        return _TopoDS.TopoDS_ListNodeOfListOfShape__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_ListNodeOfListOfShape self) -> Handle_TopoDS_ListNodeOfListOfShape"""
        return _TopoDS.TopoDS_ListNodeOfListOfShape_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_ListNodeOfListOfShape.Value = new_instancemethod(_TopoDS.TopoDS_ListNodeOfListOfShape_Value,None,TopoDS_ListNodeOfListOfShape)
TopoDS_ListNodeOfListOfShape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_ListNodeOfListOfShape__kill_pointed,None,TopoDS_ListNodeOfListOfShape)
TopoDS_ListNodeOfListOfShape.GetHandle = new_instancemethod(_TopoDS.TopoDS_ListNodeOfListOfShape_GetHandle,None,TopoDS_ListNodeOfListOfShape)
TopoDS_ListNodeOfListOfShape_swigregister = _TopoDS.TopoDS_ListNodeOfListOfShape_swigregister
TopoDS_ListNodeOfListOfShape_swigregister(TopoDS_ListNodeOfListOfShape)

class Handle_TopoDS_ListNodeOfListOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_ListNodeOfListOfShape_swiginit(self,_TopoDS.new_Handle_TopoDS_ListNodeOfListOfShape(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_ListNodeOfListOfShape_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_ListNodeOfListOfShape.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_ListNodeOfListOfShape_Nullify,None,Handle_TopoDS_ListNodeOfListOfShape)
Handle_TopoDS_ListNodeOfListOfShape.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_ListNodeOfListOfShape_IsNull,None,Handle_TopoDS_ListNodeOfListOfShape)
Handle_TopoDS_ListNodeOfListOfShape.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_ListNodeOfListOfShape_GetObject,None,Handle_TopoDS_ListNodeOfListOfShape)
Handle_TopoDS_ListNodeOfListOfShape._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_ListNodeOfListOfShape__kill_pointed,None,Handle_TopoDS_ListNodeOfListOfShape)
Handle_TopoDS_ListNodeOfListOfShape_swigregister = _TopoDS.Handle_TopoDS_ListNodeOfListOfShape_swigregister
Handle_TopoDS_ListNodeOfListOfShape_swigregister(Handle_TopoDS_ListNodeOfListOfShape)

def Handle_TopoDS_ListNodeOfListOfShape_DownCast(*args):
  return _TopoDS.Handle_TopoDS_ListNodeOfListOfShape_DownCast(*args)
Handle_TopoDS_ListNodeOfListOfShape_DownCast = _TopoDS.Handle_TopoDS_ListNodeOfListOfShape_DownCast

class TopoDS_ListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TopoDS.TopoDS_ListOfShape_swiginit(self,_TopoDS.new_TopoDS_ListOfShape(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TopoDS_ListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TopoDS_ListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TopoDS.TopoDS_ListOfShape_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TopoDS.TopoDS_ListOfShape_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: TopoDS_Shape &
        :rtype: None

        :param I:
        :type I: TopoDS_Shape &
        :param theIt:
        :type theIt: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        :param Other:
        :type Other: TopoDS_ListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: TopoDS_Shape &
        :rtype: None

        :param I:
        :type I: TopoDS_Shape &
        :param theIt:
        :type theIt: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        :param Other:
        :type Other: TopoDS_ListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Append(self, *args)

    def First(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_ListOfShape_First(self, *args)

    def Last(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_ListOfShape_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: TopoDS_Shape &
        :param It:
        :type It: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        :param Other:
        :type Other: TopoDS_ListOfShape &
        :param It:
        :type It: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: TopoDS_Shape &
        :param It:
        :type It: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        :param Other:
        :type Other: TopoDS_ListOfShape &
        :param It:
        :type It: TopoDS_ListIteratorOfListOfShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_ListOfShape_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_ListOfShape.Assign = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Assign,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Set = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Set,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Extent = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Extent,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Clear = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Clear,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.IsEmpty = new_instancemethod(_TopoDS.TopoDS_ListOfShape_IsEmpty,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Prepend = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Prepend,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Append = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Append,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.First = new_instancemethod(_TopoDS.TopoDS_ListOfShape_First,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Last = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Last,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.RemoveFirst = new_instancemethod(_TopoDS.TopoDS_ListOfShape_RemoveFirst,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.Remove = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Remove,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.InsertBefore = new_instancemethod(_TopoDS.TopoDS_ListOfShape_InsertBefore,None,TopoDS_ListOfShape)
TopoDS_ListOfShape.InsertAfter = new_instancemethod(_TopoDS.TopoDS_ListOfShape_InsertAfter,None,TopoDS_ListOfShape)
TopoDS_ListOfShape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_ListOfShape__kill_pointed,None,TopoDS_ListOfShape)
TopoDS_ListOfShape_swigregister = _TopoDS.TopoDS_ListOfShape_swigregister
TopoDS_ListOfShape_swigregister(TopoDS_ListOfShape)

class TopoDS_Shape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TopoDS_Shape self, TopoDS_Shape arg0) -> TopoDS_Shape
        	* Creates a NULL Shape referring to nothing.

        	:rtype: None

        """
        _TopoDS.TopoDS_Shape_swiginit(self,_TopoDS.new_TopoDS_Shape(*args))
    def IsNull(self, *args):
        """
        * Returns true if this shape is null. In other words, it references no underlying shape with the potential to be given a location and an orientation.

        :rtype: bool

        """
        return _TopoDS.TopoDS_Shape_IsNull(self, *args)

    def Nullify(self, *args):
        """
        * Destroys the reference to the underlying shape stored in this shape. As a result, this shape becomes null.

        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Nullify(self, *args)

    def Location(self, *args):
        """
        * Returns the shape local coordinate system.

        :rtype: TopLoc_Location

        * Sets the shape local coordinate system.

        :param Loc:
        :type Loc: TopLoc_Location &
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Location(self, *args)

    def Located(self, *args):
        """
        * Returns a shape similar to <self> with the local coordinate system set to <Loc>.

        :param Loc:
        :type Loc: TopLoc_Location &
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Located(self, *args)

    def Orientation(self, *args):
        """
        * Returns the shape orientation.

        :rtype: TopAbs_Orientation

        * Sets the shape orientation.

        :param Orient:
        :type Orient: TopAbs_Orientation
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Orientation(self, *args)

    def Oriented(self, *args):
        """
        * Returns a shape similar to <self> with the orientation set to <Or>.

        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Oriented(self, *args)

    def ShapeType(self, *args):
        """
        * Returns the value of the TopAbs_ShapeEnum enumeration that corresponds to this shape, for example VERTEX, EDGE, and so on. Exceptions Standard_NullObject if this shape is null.

        :rtype: TopAbs_ShapeEnum

        """
        return _TopoDS.TopoDS_Shape_ShapeType(self, *args)

    def Free(self, *args):
        """
        * Returns the free flag.

        :rtype: bool

        * Sets the free flag.

        :param F:
        :type F: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Free(self, *args)

    def Modified(self, *args):
        """
        * Returns the modification flag.

        :rtype: bool

        * Sets the modification flag.

        :param M:
        :type M: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Modified(self, *args)

    def Checked(self, *args):
        """
        * Returns the checked flag.

        :rtype: bool

        * Sets the checked flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Checked(self, *args)

    def Orientable(self, *args):
        """
        * Returns the orientability flag.

        :rtype: bool

        * Sets the orientability flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Orientable(self, *args)

    def Closed(self, *args):
        """
        * Returns the closedness flag.

        :rtype: bool

        * Sets the closedness flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Closed(self, *args)

    def Infinite(self, *args):
        """
        * Returns the infinity flag.

        :rtype: bool

        * Sets the infinity flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Infinite(self, *args)

    def Convex(self, *args):
        """
        * Returns the convexness flag.

        :rtype: bool

        * Sets the convexness flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Convex(self, *args)

    def Move(self, *args):
        """
        * Multiplies the Shape location by <position>.

        :param position:
        :type position: TopLoc_Location &
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Move(self, *args)

    def Moved(self, *args):
        """
        * Returns a shape similar to <self> with a location multiplied by <position>.

        :param position:
        :type position: TopLoc_Location &
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Moved(self, *args)

    def Reverse(self, *args):
        """
        * Reverses the orientation, using the Reverse method from the TopAbs package.

        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Returns a shape similar to <self> with the orientation reversed, using the Reverse method from the TopAbs package.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Reversed(self, *args)

    def Complement(self, *args):
        """
        * Complements the orientation, using the Complement method from the TopAbs package.

        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Complement(self, *args)

    def Complemented(self, *args):
        """
        * Returns a shape similar to <self> with the orientation complemented, using the Complement method from the TopAbs package.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Complemented(self, *args)

    def Compose(self, *args):
        """
        * Updates the Shape Orientation by composition with <Orient>, using the Compose method from the TopAbs package.

        :param Orient:
        :type Orient: TopAbs_Orientation
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_Compose(self, *args)

    def Composed(self, *args):
        """
        * Returns a shape similar to <self> with the orientation composed with <Orient>, using the Compose method from the TopAbs package.

        :param Orient:
        :type Orient: TopAbs_Orientation
        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Composed(self, *args)

    def IsPartner(self, *args):
        """
        * Returns True if two shapes are partners, i.e. if they share the same TShape. Locations and Orientations may differ.

        :param other:
        :type other: TopoDS_Shape &
        :rtype: bool

        """
        return _TopoDS.TopoDS_Shape_IsPartner(self, *args)

    def IsSame(self, *args):
        """
        * Returns True if two shapes are same, i.e. if they share the same TShape with the same Locations. Orientations may differ.

        :param other:
        :type other: TopoDS_Shape &
        :rtype: bool

        """
        return _TopoDS.TopoDS_Shape_IsSame(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if two shapes are equal, i.e. if they share the same TShape with the same Locations and Orientations.

        :param other:
        :type other: TopoDS_Shape &
        :rtype: bool

        """
        return _TopoDS.TopoDS_Shape_IsEqual(self, *args)

    def __eq_wrapper__(self, *args):
        """__eq_wrapper__(TopoDS_Shape self, TopoDS_Shape other) -> bool"""
        return _TopoDS.TopoDS_Shape___eq_wrapper__(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsNotEqual(self, *args):
        """
        * Negation of the IsEqual method.

        :param other:
        :type other: TopoDS_Shape &
        :rtype: bool

        """
        return _TopoDS.TopoDS_Shape_IsNotEqual(self, *args)

    def __ne_wrapper__(self, *args):
        """__ne_wrapper__(TopoDS_Shape self, TopoDS_Shape other) -> bool"""
        return _TopoDS.TopoDS_Shape___ne_wrapper__(self, *args)

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def HashCode(self, *args):
        """
        * Returns a hashed value denoting <self>. This value is in the range 1..<Upper>. It is computed from the TShape and the Location. The Orientation is not used.

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TopoDS.TopoDS_Shape_HashCode(self, *args)

    def __hash__(self):
        """__hash__(TopoDS_Shape self) -> Standard_Integer"""
        return _TopoDS.TopoDS_Shape___hash__(self)

    def EmptyCopy(self, *args):
        """
        * Replace <self> by a new Shape with the same Orientation and Location and a new TShape with the same geometry and no sub-shapes.

        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_EmptyCopy(self, *args)

    def EmptyCopied(self, *args):
        """
        * Returns a new Shape with the same Orientation and Location and a new TShape with the same geometry and no sub-shapes.

        :rtype: TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_EmptyCopied(self, *args)

    def TShape(self, *args):
        """
        :rtype: Handle_TopoDS_TShape

        :param T:
        :type T: Handle_TopoDS_TShape &
        :rtype: None

        """
        return _TopoDS.TopoDS_Shape_TShape(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Shape self)"""
        return _TopoDS.TopoDS_Shape__kill_pointed(self)

    def __getstate__(self):
    	from .BRepTools import BRepTools_ShapeSet
    	ss = BRepTools_ShapeSet()
    	ss.Add(self)
    	str_shape = ss.WriteToString()
    	indx = ss.Locations().Index(self.Location())
    	return str_shape, indx
    def __setstate__(self, state):
    	from .BRepTools import BRepTools_ShapeSet
    	topods_str, indx = state
    	ss = BRepTools_ShapeSet()
    	ss.ReadFromString(topods_str)
    	the_shape = ss.Shape(ss.NbShapes())
    	location = ss.Locations().Location(indx)
    	the_shape.Location(location)
    	self.this = the_shape.this

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Shape.IsNull = new_instancemethod(_TopoDS.TopoDS_Shape_IsNull,None,TopoDS_Shape)
TopoDS_Shape.Nullify = new_instancemethod(_TopoDS.TopoDS_Shape_Nullify,None,TopoDS_Shape)
TopoDS_Shape.Location = new_instancemethod(_TopoDS.TopoDS_Shape_Location,None,TopoDS_Shape)
TopoDS_Shape.Located = new_instancemethod(_TopoDS.TopoDS_Shape_Located,None,TopoDS_Shape)
TopoDS_Shape.Orientation = new_instancemethod(_TopoDS.TopoDS_Shape_Orientation,None,TopoDS_Shape)
TopoDS_Shape.Oriented = new_instancemethod(_TopoDS.TopoDS_Shape_Oriented,None,TopoDS_Shape)
TopoDS_Shape.ShapeType = new_instancemethod(_TopoDS.TopoDS_Shape_ShapeType,None,TopoDS_Shape)
TopoDS_Shape.Free = new_instancemethod(_TopoDS.TopoDS_Shape_Free,None,TopoDS_Shape)
TopoDS_Shape.Modified = new_instancemethod(_TopoDS.TopoDS_Shape_Modified,None,TopoDS_Shape)
TopoDS_Shape.Checked = new_instancemethod(_TopoDS.TopoDS_Shape_Checked,None,TopoDS_Shape)
TopoDS_Shape.Orientable = new_instancemethod(_TopoDS.TopoDS_Shape_Orientable,None,TopoDS_Shape)
TopoDS_Shape.Closed = new_instancemethod(_TopoDS.TopoDS_Shape_Closed,None,TopoDS_Shape)
TopoDS_Shape.Infinite = new_instancemethod(_TopoDS.TopoDS_Shape_Infinite,None,TopoDS_Shape)
TopoDS_Shape.Convex = new_instancemethod(_TopoDS.TopoDS_Shape_Convex,None,TopoDS_Shape)
TopoDS_Shape.Move = new_instancemethod(_TopoDS.TopoDS_Shape_Move,None,TopoDS_Shape)
TopoDS_Shape.Moved = new_instancemethod(_TopoDS.TopoDS_Shape_Moved,None,TopoDS_Shape)
TopoDS_Shape.Reverse = new_instancemethod(_TopoDS.TopoDS_Shape_Reverse,None,TopoDS_Shape)
TopoDS_Shape.Reversed = new_instancemethod(_TopoDS.TopoDS_Shape_Reversed,None,TopoDS_Shape)
TopoDS_Shape.Complement = new_instancemethod(_TopoDS.TopoDS_Shape_Complement,None,TopoDS_Shape)
TopoDS_Shape.Complemented = new_instancemethod(_TopoDS.TopoDS_Shape_Complemented,None,TopoDS_Shape)
TopoDS_Shape.Compose = new_instancemethod(_TopoDS.TopoDS_Shape_Compose,None,TopoDS_Shape)
TopoDS_Shape.Composed = new_instancemethod(_TopoDS.TopoDS_Shape_Composed,None,TopoDS_Shape)
TopoDS_Shape.IsPartner = new_instancemethod(_TopoDS.TopoDS_Shape_IsPartner,None,TopoDS_Shape)
TopoDS_Shape.IsSame = new_instancemethod(_TopoDS.TopoDS_Shape_IsSame,None,TopoDS_Shape)
TopoDS_Shape.IsEqual = new_instancemethod(_TopoDS.TopoDS_Shape_IsEqual,None,TopoDS_Shape)
TopoDS_Shape.__eq_wrapper__ = new_instancemethod(_TopoDS.TopoDS_Shape___eq_wrapper__,None,TopoDS_Shape)
TopoDS_Shape.IsNotEqual = new_instancemethod(_TopoDS.TopoDS_Shape_IsNotEqual,None,TopoDS_Shape)
TopoDS_Shape.__ne_wrapper__ = new_instancemethod(_TopoDS.TopoDS_Shape___ne_wrapper__,None,TopoDS_Shape)
TopoDS_Shape.HashCode = new_instancemethod(_TopoDS.TopoDS_Shape_HashCode,None,TopoDS_Shape)
TopoDS_Shape.__hash__ = new_instancemethod(_TopoDS.TopoDS_Shape___hash__,None,TopoDS_Shape)
TopoDS_Shape.EmptyCopy = new_instancemethod(_TopoDS.TopoDS_Shape_EmptyCopy,None,TopoDS_Shape)
TopoDS_Shape.EmptyCopied = new_instancemethod(_TopoDS.TopoDS_Shape_EmptyCopied,None,TopoDS_Shape)
TopoDS_Shape.TShape = new_instancemethod(_TopoDS.TopoDS_Shape_TShape,None,TopoDS_Shape)
TopoDS_Shape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Shape__kill_pointed,None,TopoDS_Shape)
TopoDS_Shape_swigregister = _TopoDS.TopoDS_Shape_swigregister
TopoDS_Shape_swigregister(TopoDS_Shape)

class TopoDS_TShape(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Free(self, *args):
        """
        * Returns the free flag.

        :rtype: bool

        * Sets the free flag.

        :param F:
        :type F: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Free(self, *args)

    def Modified(self, *args):
        """
        * Returns the modification flag.

        :rtype: bool

        * Sets the modification flag.

        :param M:
        :type M: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Modified(self, *args)

    def Checked(self, *args):
        """
        * Returns the checked flag.

        :rtype: bool

        * Sets the checked flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Checked(self, *args)

    def Orientable(self, *args):
        """
        * Returns the orientability flag.

        :rtype: bool

        * Sets the orientability flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Orientable(self, *args)

    def Closed(self, *args):
        """
        * Returns the closedness flag.

        :rtype: bool

        * Sets the closedness flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Closed(self, *args)

    def Infinite(self, *args):
        """
        * Returns the infinity flag.

        :rtype: bool

        * Sets the infinity flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Infinite(self, *args)

    def Convex(self, *args):
        """
        * Returns the convexness flag.

        :rtype: bool

        * Sets the convexness flag.

        :param C:
        :type C: bool
        :rtype: None

        """
        return _TopoDS.TopoDS_TShape_Convex(self, *args)

    def ShapeType(self, *args):
        """
        * Returns the type as a term of the ShapeEnum enum : VERTEX, EDGE, WIRE, FACE, ....

        :rtype: TopAbs_ShapeEnum

        """
        return _TopoDS.TopoDS_TShape_ShapeType(self, *args)

    def EmptyCopy(self, *args):
        """
        * Returns a copy of the TShape with no sub-shapes.

        :rtype: Handle_TopoDS_TShape

        """
        return _TopoDS.TopoDS_TShape_EmptyCopy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TShape self)"""
        return _TopoDS.TopoDS_TShape__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TShape self) -> Handle_TopoDS_TShape"""
        return _TopoDS.TopoDS_TShape_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TShape.Free = new_instancemethod(_TopoDS.TopoDS_TShape_Free,None,TopoDS_TShape)
TopoDS_TShape.Modified = new_instancemethod(_TopoDS.TopoDS_TShape_Modified,None,TopoDS_TShape)
TopoDS_TShape.Checked = new_instancemethod(_TopoDS.TopoDS_TShape_Checked,None,TopoDS_TShape)
TopoDS_TShape.Orientable = new_instancemethod(_TopoDS.TopoDS_TShape_Orientable,None,TopoDS_TShape)
TopoDS_TShape.Closed = new_instancemethod(_TopoDS.TopoDS_TShape_Closed,None,TopoDS_TShape)
TopoDS_TShape.Infinite = new_instancemethod(_TopoDS.TopoDS_TShape_Infinite,None,TopoDS_TShape)
TopoDS_TShape.Convex = new_instancemethod(_TopoDS.TopoDS_TShape_Convex,None,TopoDS_TShape)
TopoDS_TShape.ShapeType = new_instancemethod(_TopoDS.TopoDS_TShape_ShapeType,None,TopoDS_TShape)
TopoDS_TShape.EmptyCopy = new_instancemethod(_TopoDS.TopoDS_TShape_EmptyCopy,None,TopoDS_TShape)
TopoDS_TShape._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TShape__kill_pointed,None,TopoDS_TShape)
TopoDS_TShape.GetHandle = new_instancemethod(_TopoDS.TopoDS_TShape_GetHandle,None,TopoDS_TShape)
TopoDS_TShape_swigregister = _TopoDS.TopoDS_TShape_swigregister
TopoDS_TShape_swigregister(TopoDS_TShape)

class Handle_TopoDS_TShape(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TShape_swiginit(self,_TopoDS.new_Handle_TopoDS_TShape(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TShape_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TShape.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TShape_Nullify,None,Handle_TopoDS_TShape)
Handle_TopoDS_TShape.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TShape_IsNull,None,Handle_TopoDS_TShape)
Handle_TopoDS_TShape.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TShape_GetObject,None,Handle_TopoDS_TShape)
Handle_TopoDS_TShape._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TShape__kill_pointed,None,Handle_TopoDS_TShape)
Handle_TopoDS_TShape_swigregister = _TopoDS.Handle_TopoDS_TShape_swigregister
Handle_TopoDS_TShape_swigregister(Handle_TopoDS_TShape)

def Handle_TopoDS_TShape_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TShape_DownCast(*args)
Handle_TopoDS_TShape_DownCast = _TopoDS.Handle_TopoDS_TShape_DownCast

class TopoDS_CompSolid(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an Undefined CompSolid.

        :rtype: None

        """
        _TopoDS.TopoDS_CompSolid_swiginit(self,_TopoDS.new_TopoDS_CompSolid(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_CompSolid self)"""
        return _TopoDS.TopoDS_CompSolid__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_CompSolid._kill_pointed = new_instancemethod(_TopoDS.TopoDS_CompSolid__kill_pointed,None,TopoDS_CompSolid)
TopoDS_CompSolid_swigregister = _TopoDS.TopoDS_CompSolid_swigregister
TopoDS_CompSolid_swigregister(TopoDS_CompSolid)

class TopoDS_Compound(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an Undefined Compound.

        :rtype: None

        """
        _TopoDS.TopoDS_Compound_swiginit(self,_TopoDS.new_TopoDS_Compound(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Compound self)"""
        return _TopoDS.TopoDS_Compound__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Compound._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Compound__kill_pointed,None,TopoDS_Compound)
TopoDS_Compound_swigregister = _TopoDS.TopoDS_Compound_swigregister
TopoDS_Compound_swigregister(TopoDS_Compound)

class TopoDS_Edge(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Undefined Edge.

        :rtype: None

        """
        _TopoDS.TopoDS_Edge_swiginit(self,_TopoDS.new_TopoDS_Edge(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Edge self)"""
        return _TopoDS.TopoDS_Edge__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Edge._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Edge__kill_pointed,None,TopoDS_Edge)
TopoDS_Edge_swigregister = _TopoDS.TopoDS_Edge_swigregister
TopoDS_Edge_swigregister(TopoDS_Edge)

class TopoDS_Face(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Undefined Face.

        :rtype: None

        """
        _TopoDS.TopoDS_Face_swiginit(self,_TopoDS.new_TopoDS_Face(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Face self)"""
        return _TopoDS.TopoDS_Face__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Face._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Face__kill_pointed,None,TopoDS_Face)
TopoDS_Face_swigregister = _TopoDS.TopoDS_Face_swigregister
TopoDS_Face_swigregister(TopoDS_Face)

class TopoDS_Shell(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an Undefined Shell.

        :rtype: None

        """
        _TopoDS.TopoDS_Shell_swiginit(self,_TopoDS.new_TopoDS_Shell(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Shell self)"""
        return _TopoDS.TopoDS_Shell__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Shell._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Shell__kill_pointed,None,TopoDS_Shell)
TopoDS_Shell_swigregister = _TopoDS.TopoDS_Shell_swigregister
TopoDS_Shell_swigregister(TopoDS_Shell)

class TopoDS_Solid(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an Undefined Solid.

        :rtype: None

        """
        _TopoDS.TopoDS_Solid_swiginit(self,_TopoDS.new_TopoDS_Solid(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Solid self)"""
        return _TopoDS.TopoDS_Solid__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Solid._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Solid__kill_pointed,None,TopoDS_Solid)
TopoDS_Solid_swigregister = _TopoDS.TopoDS_Solid_swigregister
TopoDS_Solid_swigregister(TopoDS_Solid)

class TopoDS_TCompSolid(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TCompSolid.

        :rtype: None

        """
        _TopoDS.TopoDS_TCompSolid_swiginit(self,_TopoDS.new_TopoDS_TCompSolid(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TCompSolid self)"""
        return _TopoDS.TopoDS_TCompSolid__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TCompSolid self) -> Handle_TopoDS_TCompSolid"""
        return _TopoDS.TopoDS_TCompSolid_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TCompSolid._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TCompSolid__kill_pointed,None,TopoDS_TCompSolid)
TopoDS_TCompSolid.GetHandle = new_instancemethod(_TopoDS.TopoDS_TCompSolid_GetHandle,None,TopoDS_TCompSolid)
TopoDS_TCompSolid_swigregister = _TopoDS.TopoDS_TCompSolid_swigregister
TopoDS_TCompSolid_swigregister(TopoDS_TCompSolid)

class Handle_TopoDS_TCompSolid(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TCompSolid_swiginit(self,_TopoDS.new_Handle_TopoDS_TCompSolid(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TCompSolid_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TCompSolid.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TCompSolid_Nullify,None,Handle_TopoDS_TCompSolid)
Handle_TopoDS_TCompSolid.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TCompSolid_IsNull,None,Handle_TopoDS_TCompSolid)
Handle_TopoDS_TCompSolid.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TCompSolid_GetObject,None,Handle_TopoDS_TCompSolid)
Handle_TopoDS_TCompSolid._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TCompSolid__kill_pointed,None,Handle_TopoDS_TCompSolid)
Handle_TopoDS_TCompSolid_swigregister = _TopoDS.Handle_TopoDS_TCompSolid_swigregister
Handle_TopoDS_TCompSolid_swigregister(Handle_TopoDS_TCompSolid)

def Handle_TopoDS_TCompSolid_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TCompSolid_DownCast(*args)
Handle_TopoDS_TCompSolid_DownCast = _TopoDS.Handle_TopoDS_TCompSolid_DownCast

class TopoDS_TCompound(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TCompound.

        :rtype: None

        """
        _TopoDS.TopoDS_TCompound_swiginit(self,_TopoDS.new_TopoDS_TCompound(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TCompound self)"""
        return _TopoDS.TopoDS_TCompound__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TCompound self) -> Handle_TopoDS_TCompound"""
        return _TopoDS.TopoDS_TCompound_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TCompound._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TCompound__kill_pointed,None,TopoDS_TCompound)
TopoDS_TCompound.GetHandle = new_instancemethod(_TopoDS.TopoDS_TCompound_GetHandle,None,TopoDS_TCompound)
TopoDS_TCompound_swigregister = _TopoDS.TopoDS_TCompound_swigregister
TopoDS_TCompound_swigregister(TopoDS_TCompound)

class Handle_TopoDS_TCompound(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TCompound_swiginit(self,_TopoDS.new_Handle_TopoDS_TCompound(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TCompound_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TCompound.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TCompound_Nullify,None,Handle_TopoDS_TCompound)
Handle_TopoDS_TCompound.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TCompound_IsNull,None,Handle_TopoDS_TCompound)
Handle_TopoDS_TCompound.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TCompound_GetObject,None,Handle_TopoDS_TCompound)
Handle_TopoDS_TCompound._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TCompound__kill_pointed,None,Handle_TopoDS_TCompound)
Handle_TopoDS_TCompound_swigregister = _TopoDS.Handle_TopoDS_TCompound_swigregister
Handle_TopoDS_TCompound_swigregister(Handle_TopoDS_TCompound)

def Handle_TopoDS_TCompound_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TCompound_DownCast(*args)
Handle_TopoDS_TCompound_DownCast = _TopoDS.Handle_TopoDS_TCompound_DownCast

class TopoDS_TEdge(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TEdge self)"""
        return _TopoDS.TopoDS_TEdge__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TEdge self) -> Handle_TopoDS_TEdge"""
        return _TopoDS.TopoDS_TEdge_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TEdge._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TEdge__kill_pointed,None,TopoDS_TEdge)
TopoDS_TEdge.GetHandle = new_instancemethod(_TopoDS.TopoDS_TEdge_GetHandle,None,TopoDS_TEdge)
TopoDS_TEdge_swigregister = _TopoDS.TopoDS_TEdge_swigregister
TopoDS_TEdge_swigregister(TopoDS_TEdge)

class Handle_TopoDS_TEdge(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TEdge_swiginit(self,_TopoDS.new_Handle_TopoDS_TEdge(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TEdge_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TEdge.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TEdge_Nullify,None,Handle_TopoDS_TEdge)
Handle_TopoDS_TEdge.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TEdge_IsNull,None,Handle_TopoDS_TEdge)
Handle_TopoDS_TEdge.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TEdge_GetObject,None,Handle_TopoDS_TEdge)
Handle_TopoDS_TEdge._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TEdge__kill_pointed,None,Handle_TopoDS_TEdge)
Handle_TopoDS_TEdge_swigregister = _TopoDS.Handle_TopoDS_TEdge_swigregister
Handle_TopoDS_TEdge_swigregister(Handle_TopoDS_TEdge)

def Handle_TopoDS_TEdge_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TEdge_DownCast(*args)
Handle_TopoDS_TEdge_DownCast = _TopoDS.Handle_TopoDS_TEdge_DownCast

class TopoDS_TFace(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TFace.

        :rtype: None

        """
        _TopoDS.TopoDS_TFace_swiginit(self,_TopoDS.new_TopoDS_TFace(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TFace self)"""
        return _TopoDS.TopoDS_TFace__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TFace self) -> Handle_TopoDS_TFace"""
        return _TopoDS.TopoDS_TFace_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TFace._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TFace__kill_pointed,None,TopoDS_TFace)
TopoDS_TFace.GetHandle = new_instancemethod(_TopoDS.TopoDS_TFace_GetHandle,None,TopoDS_TFace)
TopoDS_TFace_swigregister = _TopoDS.TopoDS_TFace_swigregister
TopoDS_TFace_swigregister(TopoDS_TFace)

class Handle_TopoDS_TFace(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TFace_swiginit(self,_TopoDS.new_Handle_TopoDS_TFace(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TFace_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TFace.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TFace_Nullify,None,Handle_TopoDS_TFace)
Handle_TopoDS_TFace.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TFace_IsNull,None,Handle_TopoDS_TFace)
Handle_TopoDS_TFace.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TFace_GetObject,None,Handle_TopoDS_TFace)
Handle_TopoDS_TFace._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TFace__kill_pointed,None,Handle_TopoDS_TFace)
Handle_TopoDS_TFace_swigregister = _TopoDS.Handle_TopoDS_TFace_swigregister
Handle_TopoDS_TFace_swigregister(Handle_TopoDS_TFace)

def Handle_TopoDS_TFace_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TFace_DownCast(*args)
Handle_TopoDS_TFace_DownCast = _TopoDS.Handle_TopoDS_TFace_DownCast

class TopoDS_TShell(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TShell.

        :rtype: None

        """
        _TopoDS.TopoDS_TShell_swiginit(self,_TopoDS.new_TopoDS_TShell(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TShell self)"""
        return _TopoDS.TopoDS_TShell__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TShell self) -> Handle_TopoDS_TShell"""
        return _TopoDS.TopoDS_TShell_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TShell._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TShell__kill_pointed,None,TopoDS_TShell)
TopoDS_TShell.GetHandle = new_instancemethod(_TopoDS.TopoDS_TShell_GetHandle,None,TopoDS_TShell)
TopoDS_TShell_swigregister = _TopoDS.TopoDS_TShell_swigregister
TopoDS_TShell_swigregister(TopoDS_TShell)

class Handle_TopoDS_TShell(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TShell_swiginit(self,_TopoDS.new_Handle_TopoDS_TShell(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TShell_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TShell.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TShell_Nullify,None,Handle_TopoDS_TShell)
Handle_TopoDS_TShell.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TShell_IsNull,None,Handle_TopoDS_TShell)
Handle_TopoDS_TShell.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TShell_GetObject,None,Handle_TopoDS_TShell)
Handle_TopoDS_TShell._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TShell__kill_pointed,None,Handle_TopoDS_TShell)
Handle_TopoDS_TShell_swigregister = _TopoDS.Handle_TopoDS_TShell_swigregister
Handle_TopoDS_TShell_swigregister(Handle_TopoDS_TShell)

def Handle_TopoDS_TShell_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TShell_DownCast(*args)
Handle_TopoDS_TShell_DownCast = _TopoDS.Handle_TopoDS_TShell_DownCast

class TopoDS_TSolid(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TSolid.

        :rtype: None

        """
        _TopoDS.TopoDS_TSolid_swiginit(self,_TopoDS.new_TopoDS_TSolid(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TSolid self)"""
        return _TopoDS.TopoDS_TSolid__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TSolid self) -> Handle_TopoDS_TSolid"""
        return _TopoDS.TopoDS_TSolid_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TSolid._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TSolid__kill_pointed,None,TopoDS_TSolid)
TopoDS_TSolid.GetHandle = new_instancemethod(_TopoDS.TopoDS_TSolid_GetHandle,None,TopoDS_TSolid)
TopoDS_TSolid_swigregister = _TopoDS.TopoDS_TSolid_swigregister
TopoDS_TSolid_swigregister(TopoDS_TSolid)

class Handle_TopoDS_TSolid(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TSolid_swiginit(self,_TopoDS.new_Handle_TopoDS_TSolid(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TSolid_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TSolid.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TSolid_Nullify,None,Handle_TopoDS_TSolid)
Handle_TopoDS_TSolid.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TSolid_IsNull,None,Handle_TopoDS_TSolid)
Handle_TopoDS_TSolid.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TSolid_GetObject,None,Handle_TopoDS_TSolid)
Handle_TopoDS_TSolid._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TSolid__kill_pointed,None,Handle_TopoDS_TSolid)
Handle_TopoDS_TSolid_swigregister = _TopoDS.Handle_TopoDS_TSolid_swigregister
Handle_TopoDS_TSolid_swigregister(Handle_TopoDS_TSolid)

def Handle_TopoDS_TSolid_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TSolid_DownCast(*args)
Handle_TopoDS_TSolid_DownCast = _TopoDS.Handle_TopoDS_TSolid_DownCast

class TopoDS_TVertex(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TVertex self)"""
        return _TopoDS.TopoDS_TVertex__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TVertex self) -> Handle_TopoDS_TVertex"""
        return _TopoDS.TopoDS_TVertex_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TVertex._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TVertex__kill_pointed,None,TopoDS_TVertex)
TopoDS_TVertex.GetHandle = new_instancemethod(_TopoDS.TopoDS_TVertex_GetHandle,None,TopoDS_TVertex)
TopoDS_TVertex_swigregister = _TopoDS.TopoDS_TVertex_swigregister
TopoDS_TVertex_swigregister(TopoDS_TVertex)

class Handle_TopoDS_TVertex(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TVertex_swiginit(self,_TopoDS.new_Handle_TopoDS_TVertex(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TVertex_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TVertex.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TVertex_Nullify,None,Handle_TopoDS_TVertex)
Handle_TopoDS_TVertex.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TVertex_IsNull,None,Handle_TopoDS_TVertex)
Handle_TopoDS_TVertex.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TVertex_GetObject,None,Handle_TopoDS_TVertex)
Handle_TopoDS_TVertex._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TVertex__kill_pointed,None,Handle_TopoDS_TVertex)
Handle_TopoDS_TVertex_swigregister = _TopoDS.Handle_TopoDS_TVertex_swigregister
Handle_TopoDS_TVertex_swigregister(Handle_TopoDS_TVertex)

def Handle_TopoDS_TVertex_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TVertex_DownCast(*args)
Handle_TopoDS_TVertex_DownCast = _TopoDS.Handle_TopoDS_TVertex_DownCast

class TopoDS_TWire(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty TWire.

        :rtype: None

        """
        _TopoDS.TopoDS_TWire_swiginit(self,_TopoDS.new_TopoDS_TWire(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_TWire self)"""
        return _TopoDS.TopoDS_TWire__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TopoDS_TWire self) -> Handle_TopoDS_TWire"""
        return _TopoDS.TopoDS_TWire_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_TWire._kill_pointed = new_instancemethod(_TopoDS.TopoDS_TWire__kill_pointed,None,TopoDS_TWire)
TopoDS_TWire.GetHandle = new_instancemethod(_TopoDS.TopoDS_TWire_GetHandle,None,TopoDS_TWire)
TopoDS_TWire_swigregister = _TopoDS.TopoDS_TWire_swigregister
TopoDS_TWire_swigregister(TopoDS_TWire)

class Handle_TopoDS_TWire(Handle_TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TopoDS.Handle_TopoDS_TWire_swiginit(self,_TopoDS.new_Handle_TopoDS_TWire(*args))
    DownCast = staticmethod(_TopoDS.Handle_TopoDS_TWire_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TopoDS_TWire.Nullify = new_instancemethod(_TopoDS.Handle_TopoDS_TWire_Nullify,None,Handle_TopoDS_TWire)
Handle_TopoDS_TWire.IsNull = new_instancemethod(_TopoDS.Handle_TopoDS_TWire_IsNull,None,Handle_TopoDS_TWire)
Handle_TopoDS_TWire.GetObject = new_instancemethod(_TopoDS.Handle_TopoDS_TWire_GetObject,None,Handle_TopoDS_TWire)
Handle_TopoDS_TWire._kill_pointed = new_instancemethod(_TopoDS.Handle_TopoDS_TWire__kill_pointed,None,Handle_TopoDS_TWire)
Handle_TopoDS_TWire_swigregister = _TopoDS.Handle_TopoDS_TWire_swigregister
Handle_TopoDS_TWire_swigregister(Handle_TopoDS_TWire)

def Handle_TopoDS_TWire_DownCast(*args):
  return _TopoDS.Handle_TopoDS_TWire_DownCast(*args)
Handle_TopoDS_TWire_DownCast = _TopoDS.Handle_TopoDS_TWire_DownCast

class TopoDS_Vertex(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TopoDS_Vertex self, TopoDS_Vertex arg0) -> TopoDS_Vertex
        	* Undefined Vertex.

        	:rtype: None

        """
        _TopoDS.TopoDS_Vertex_swiginit(self,_TopoDS.new_TopoDS_Vertex(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Vertex self)"""
        return _TopoDS.TopoDS_Vertex__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Vertex._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Vertex__kill_pointed,None,TopoDS_Vertex)
TopoDS_Vertex_swigregister = _TopoDS.TopoDS_Vertex_swigregister
TopoDS_Vertex_swigregister(TopoDS_Vertex)

class TopoDS_Wire(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Undefined Wire.

        :rtype: None

        """
        _TopoDS.TopoDS_Wire_swiginit(self,_TopoDS.new_TopoDS_Wire(*args))
    def _kill_pointed(self):
        """_kill_pointed(TopoDS_Wire self)"""
        return _TopoDS.TopoDS_Wire__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TopoDS_Wire._kill_pointed = new_instancemethod(_TopoDS.TopoDS_Wire__kill_pointed,None,TopoDS_Wire)
TopoDS_Wire_swigregister = _TopoDS.TopoDS_Wire_swigregister
TopoDS_Wire_swigregister(TopoDS_Wire)



