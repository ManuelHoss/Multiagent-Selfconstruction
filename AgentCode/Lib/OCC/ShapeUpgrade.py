# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeUpgrade.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeUpgrade', [dirname(__file__)])
        except ImportError:
            import _ShapeUpgrade
            return _ShapeUpgrade
        if fp is not None:
            try:
                _mod = imp.load_module('_ShapeUpgrade', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ShapeUpgrade = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeUpgrade
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeUpgrade.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeUpgrade.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeUpgrade.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeUpgrade.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeUpgrade.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeUpgrade.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeUpgrade.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeUpgrade.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeUpgrade.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeUpgrade.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeUpgrade.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.TColGeom
import OCC.Geom2d
import OCC.TColGeom2d
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.ShapeBuild
import OCC.BRepTools
import OCC.Bnd
import OCC.TopTools
import OCC.Message
import OCC.BRep
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.ShapeExtend
import OCC.ShapeAnalysis
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.GeomAdaptor
import OCC.IntRes2d
class shapeupgrade(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def C0BSplineToSequenceOfC1BSplineCurve(*args):
        """
        * Unifies same domain faces and edges of specified shape

        :param BS:
        :type BS: Handle_Geom_BSplineCurve &
        :param seqBS:
        :type seqBS: Handle_TColGeom_HSequenceOfBoundedCurve &
        :rtype: bool

        * Converts C0 B-Spline curve into sequence of C1 B-Spline curves. This method splits B-Spline at the knots with multiplicities equal to degree, i.e. unlike method GeomConvert::C0BSplineToArrayOfC1BSplineCurve this one does not use any tolerance and therefore does not change the geometry of B-Spline. Returns True if C0 B-Spline was successfully splitted, else returns False (if BS is C1 B-Spline).

        :param BS:
        :type BS: Handle_Geom2d_BSplineCurve &
        :param seqBS:
        :type seqBS: Handle_TColGeom2d_HSequenceOfBoundedCurve &
        :rtype: bool

        """
        return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

    C0BSplineToSequenceOfC1BSplineCurve = staticmethod(C0BSplineToSequenceOfC1BSplineCurve)

    def __init__(self):
        _ShapeUpgrade.shapeupgrade_swiginit(self, _ShapeUpgrade.new_shapeupgrade())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


shapeupgrade._kill_pointed = new_instancemethod(_ShapeUpgrade.shapeupgrade__kill_pointed, None, shapeupgrade)
shapeupgrade_swigregister = _ShapeUpgrade.shapeupgrade_swigregister
shapeupgrade_swigregister(shapeupgrade)

def shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args):
    """
    * Unifies same domain faces and edges of specified shape

    :param BS:
    :type BS: Handle_Geom_BSplineCurve &
    :param seqBS:
    :type seqBS: Handle_TColGeom_HSequenceOfBoundedCurve &
    :rtype: bool

    * Converts C0 B-Spline curve into sequence of C1 B-Spline curves. This method splits B-Spline at the knots with multiplicities equal to degree, i.e. unlike method GeomConvert::C0BSplineToArrayOfC1BSplineCurve this one does not use any tolerance and therefore does not change the geometry of B-Spline. Returns True if C0 B-Spline was successfully splitted, else returns False (if BS is C1 B-Spline).

    :param BS:
    :type BS: Handle_Geom2d_BSplineCurve &
    :param seqBS:
    :type seqBS: Handle_TColGeom2d_HSequenceOfBoundedCurve &
    :rtype: bool

    """
    return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

class ShapeUpgrade_RemoveLocations(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * //!Empy constructor

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_RemoveLocations_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_RemoveLocations(*args))

    def Remove(self, *args):
        """
        * //!Removes all location correspodingly to RemoveLevel.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_Remove(self, *args)


    def GetResult(self, *args):
        """
        * //!Returns shape with removed locatins.

        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetResult(self, *args)


    def SetRemoveLevel(self, *args):
        """
        * //!sets level starting with that location will be removed,  by default TopAbs_SHAPE. In this case locations will be kept for specified shape  and if specified shape is TopAbs_COMPOUND for sub-shapes of first level.

        :param theLevel:
        :type theLevel: TopAbs_ShapeEnum
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_SetRemoveLevel(self, *args)


    def RemoveLevel(self, *args):
        """
        * //!sets level starting with that location will be removed.Value of level can be set to  TopAbs_SHAPE,TopAbs_COMPOUND,TopAbs_SOLID,TopAbs_SHELL,TopAbs_FACE.By default TopAbs_SHAPE.  In this case location will be removed for all shape types for exception of compound.

        :rtype: TopAbs_ShapeEnum

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_RemoveLevel(self, *args)


    def ModifiedShape(self, *args):
        """
        * Returns modified shape obtained from initial shape.

        :param theInitShape:
        :type theInitShape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_ModifiedShape(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_RemoveLocations self)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_RemoveLocations self) -> Handle_ShapeUpgrade_RemoveLocations"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_RemoveLocations.Remove = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_Remove, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.GetResult = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetResult, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.SetRemoveLevel = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_SetRemoveLevel, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.RemoveLevel = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_RemoveLevel, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.ModifiedShape = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_ModifiedShape, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations__kill_pointed, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetHandle, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveLocations_swigregister
ShapeUpgrade_RemoveLocations_swigregister(ShapeUpgrade_RemoveLocations)

class Handle_ShapeUpgrade_RemoveLocations(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_RemoveLocations(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_RemoveLocations.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_Nullify, None, Handle_ShapeUpgrade_RemoveLocations)
Handle_ShapeUpgrade_RemoveLocations.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_IsNull, None, Handle_ShapeUpgrade_RemoveLocations)
Handle_ShapeUpgrade_RemoveLocations.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_GetObject, None, Handle_ShapeUpgrade_RemoveLocations)
Handle_ShapeUpgrade_RemoveLocations._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations__kill_pointed, None, Handle_ShapeUpgrade_RemoveLocations)
Handle_ShapeUpgrade_RemoveLocations_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_swigregister
Handle_ShapeUpgrade_RemoveLocations_swigregister(Handle_ShapeUpgrade_RemoveLocations)

def Handle_ShapeUpgrade_RemoveLocations_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast(AnObject)
Handle_ShapeUpgrade_RemoveLocations_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast

class ShapeUpgrade_ShapeDivide(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Initialize by a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivide(*args))

    def Init(self, *args):
        """
        * Initialize by a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Init(self, *args)


    def Delete(self, *args):
        """
        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Delete(self, *args)


    def SetPrecision(self, *args):
        """
        * Defines the spatial precision used for splitting

        :param Prec:
        :type Prec: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetPrecision(self, *args)


    def SetMaxTolerance(self, *args):
        """
        * Sets maximal allowed tolerance

        :param maxtol:
        :type maxtol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args):
        """
        * Sets minimal allowed tolerance

        :param mintol:
        :type mintol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMinTolerance(self, *args)


    def SetSurfaceSegmentMode(self, *args):
        """
        * Purpose sets mode for trimming (segment) surface by wire UV bounds.

        :param Segment:
        :type Segment: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSurfaceSegmentMode(self, *args)


    def Perform(self, *args):
        """
        * Performs splitting and computes the resulting shape If newContext is True (default), the internal context will be cleared at start, else previous substitutions will be acting.

        :param newContext: default value is Standard_True
        :type newContext: bool
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Perform(self, *args)


    def Result(self, *args):
        """
        * Gives the resulting Shape, or Null shape if not done.

        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Result(self, *args)


    def GetContext(self, *args):
        """
        * Returns context with all the modifications made during last call(s) to Perform() recorded

        :rtype: Handle_ShapeBuild_ReShape

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_GetContext(self, *args)


    def SetContext(self, *args):
        """
        * Sets context with recorded modifications to be applied during next call(s) to Perform(shape,Standard_False)

        :param context:
        :type context: Handle_ShapeBuild_ReShape &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetContext(self, *args)


    def Status(self, *args):
        """
        * Queries the status of last call to Perform OK : no splitting was done (or no call to Perform) DONE1: some edges were splitted DONE2: surface was splitted FAIL1: some errors occured

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Status(self, *args)


    def SetSplitFaceTool(self, *args):
        """
        * Sets the tool for splitting faces.

        :param splitFaceTool:
        :type splitFaceTool: Handle_ShapeUpgrade_FaceDivide &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSplitFaceTool(self, *args)


    def SetEdgeMode(self, *args):
        """
        * //!Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.

        :param aEdgeMode:
        :type aEdgeMode: int
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetEdgeMode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Init, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Delete = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Delete, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetPrecision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetPrecision, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetMaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMaxTolerance, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetMinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMinTolerance, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetSurfaceSegmentMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSurfaceSegmentMode, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Perform, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Result = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Result, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.GetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_GetContext, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetContext, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Status, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetSplitFaceTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSplitFaceTool, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetEdgeMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetEdgeMode, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide__kill_pointed, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivide_swigregister
ShapeUpgrade_ShapeDivide_swigregister(ShapeUpgrade_ShapeDivide)

class ShapeUpgrade_ShellSewing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a ShellSewing, empty

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShellSewing_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShellSewing(*args))

    def ApplySewing(self, *args):
        """
        * Builds a new shape from a former one, by calling Sewing from BRepOffsetAPI. Rebuilt solids are oriented to be 'not infinite'  If <tol> is not given (i.e. value 0. by default), it is computed as the mean tolerance recorded in <shape>  If no shell has been sewed, this method returns the input shape

        :param shape:
        :type shape: TopoDS_Shape &
        :param tol: default value is 0.0
        :type tol: float
        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_ShellSewing_ApplySewing(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShellSewing.ApplySewing = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShellSewing_ApplySewing, None, ShapeUpgrade_ShellSewing)
ShapeUpgrade_ShellSewing._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShellSewing__kill_pointed, None, ShapeUpgrade_ShellSewing)
ShapeUpgrade_ShellSewing_swigregister = _ShapeUpgrade.ShapeUpgrade_ShellSewing_swigregister
ShapeUpgrade_ShellSewing_swigregister(ShapeUpgrade_ShellSewing)

class ShapeUpgrade_SplitCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve(*args))

    def Init(self, *args):
        """
        * Initializes with curve first and last parameters.

        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Init(self, *args)


    def SetSplitValues(self, *args):
        """
        * Sets the parameters where splitting has to be done.

        :param SplitValues:
        :type SplitValues: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SetSplitValues(self, *args)


    def Build(self, *args):
        """
        * If Segment is True, the result is composed with segments of the curve bounded by the SplitValues. If Segment is False, the result is composed with trimmed Curves all based on the same complete curve.

        :param Segment:
        :type Segment: bool
        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Build(self, *args)


    def SplitValues(self, *args):
        """
        * returns all the splitting values including the First and Last parameters of the input curve Merges input split values and new ones into myGlobalKnots

        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SplitValues(self, *args)


    def Compute(self, *args):
        """
        * Calculates points for correction/splitting of the curve

        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Compute(self, *args)


    def Perform(self, *args):
        """
        * Performs correction/splitting of the curve.  First defines splitting values by method Compute(), then calls method Build().

        :param Segment: default value is Standard_True
        :type Segment: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Perform(self, *args)


    def Status(self, *args):
        """
        * Returns the status OK - no splitting is needed DONE1 - splitting required and gives more than one segment DONE2 - splitting is required, but gives only one segment (initial) DONE3 - geometric form of the curve or parametrisation is modified

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Status(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitCurve self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitCurve self) -> Handle_ShapeUpgrade_SplitCurve"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitCurve.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Init, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.SetSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_SetSplitValues, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Build, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.SplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_SplitValues, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Compute, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Perform, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Status, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve__kill_pointed, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_GetHandle, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve_swigregister
ShapeUpgrade_SplitCurve_swigregister(ShapeUpgrade_SplitCurve)

class Handle_ShapeUpgrade_SplitCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitCurve(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitCurve.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_Nullify, None, Handle_ShapeUpgrade_SplitCurve)
Handle_ShapeUpgrade_SplitCurve.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_IsNull, None, Handle_ShapeUpgrade_SplitCurve)
Handle_ShapeUpgrade_SplitCurve.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_GetObject, None, Handle_ShapeUpgrade_SplitCurve)
Handle_ShapeUpgrade_SplitCurve._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve__kill_pointed, None, Handle_ShapeUpgrade_SplitCurve)
Handle_ShapeUpgrade_SplitCurve_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_swigregister
Handle_ShapeUpgrade_SplitCurve_swigregister(Handle_ShapeUpgrade_SplitCurve)

def Handle_ShapeUpgrade_SplitCurve_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast(AnObject)
Handle_ShapeUpgrade_SplitCurve_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast

class ShapeUpgrade_SplitSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurface_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurface(*args))

    def Init(self, *args):
        """
        * Initializes with single supporting surface.

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        * Initializes with single supporting surface with bounding parameters.

        :param S:
        :type S: Handle_Geom_Surface &
        :param UFirst:
        :type UFirst: float
        :param ULast:
        :type ULast: float
        :param VFirst:
        :type VFirst: float
        :param VLast:
        :type VLast: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Init(self, *args)


    def SetUSplitValues(self, *args):
        """
        * Sets U parameters where splitting has to be done

        :param UValues:
        :type UValues: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetUSplitValues(self, *args)


    def SetVSplitValues(self, *args):
        """
        * Sets V parameters where splitting has to be done

        :param VValues:
        :type VValues: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetVSplitValues(self, *args)


    def Build(self, *args):
        """
        * Performs splitting of the supporting surface. If resulting surface is B-Spline and Segment is True, the result is composed with segments of the surface bounded by the U and V SplitValues (method Geom_BSplineSurface::Segment is used). If Segment is False, the result is composed with Geom_RectangularTrimmedSurface all based on the same complete surface. Fields myNbResultingRow and myNbResultingCol must be set to specify the size of resulting grid of surfaces.

        :param Segment:
        :type Segment: bool
        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Build(self, *args)


    def Compute(self, *args):
        """
        * Calculates points for correction/splitting of the surface.

        :param Segment: default value is Standard_True
        :type Segment: bool
        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Compute(self, *args)


    def Perform(self, *args):
        """
        * Performs correction/splitting of the surface. First defines splitting values by method Compute(), then calls method Build().

        :param Segment: default value is Standard_True
        :type Segment: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Perform(self, *args)


    def USplitValues(self, *args):
        """
        * returns all the U splitting values including the First and Last parameters of the input surface

        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_USplitValues(self, *args)


    def VSplitValues(self, *args):
        """
        * returns all the splitting V values including the First and Last parameters of the input surface

        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_VSplitValues(self, *args)


    def Status(self, *args):
        """
        * Returns the status OK - no splitting is needed DONE1 - splitting required and gives more than one patch DONE2 - splitting is required, but gives only single patch (initial) DONE3 - geometric form of the surface or parametrisation is modified

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Status(self, *args)


    def ResSurfaces(self, *args):
        """
        * Returns obtained surfaces after splitting as CompositeSurface

        :rtype: Handle_ShapeExtend_CompositeSurface

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_ResSurfaces(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitSurface self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitSurface self) -> Handle_ShapeUpgrade_SplitSurface"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitSurface.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Init, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.SetUSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_SetUSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.SetVSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_SetVSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Build, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Compute, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Perform, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.USplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_USplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.VSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_VSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Status, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.ResSurfaces = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_ResSurfaces, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface__kill_pointed, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_GetHandle, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurface_swigregister
ShapeUpgrade_SplitSurface_swigregister(ShapeUpgrade_SplitSurface)

class Handle_ShapeUpgrade_SplitSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitSurface(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitSurface.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_Nullify, None, Handle_ShapeUpgrade_SplitSurface)
Handle_ShapeUpgrade_SplitSurface.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_IsNull, None, Handle_ShapeUpgrade_SplitSurface)
Handle_ShapeUpgrade_SplitSurface.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_GetObject, None, Handle_ShapeUpgrade_SplitSurface)
Handle_ShapeUpgrade_SplitSurface._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface__kill_pointed, None, Handle_ShapeUpgrade_SplitSurface)
Handle_ShapeUpgrade_SplitSurface_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_swigregister
Handle_ShapeUpgrade_SplitSurface_swigregister(Handle_ShapeUpgrade_SplitSurface)

def Handle_ShapeUpgrade_SplitSurface_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast(AnObject)
Handle_ShapeUpgrade_SplitSurface_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast

class ShapeUpgrade_Tool(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_Tool_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_Tool(*args))

    def Set(self, *args):
        """
        * Copy all fields from another Root object

        :param tool:
        :type tool: Handle_ShapeUpgrade_Tool &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Set(self, *args)


    def SetContext(self, *args):
        """
        * Sets context

        :param context:
        :type context: Handle_ShapeBuild_ReShape &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetContext(self, *args)


    def Context(self, *args):
        """
        * Returns context

        :rtype: Handle_ShapeBuild_ReShape

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Context(self, *args)


    def SetPrecision(self, *args):
        """
        * Sets basic precision value

        :param preci:
        :type preci: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetPrecision(self, *args)


    def Precision(self, *args):
        """
        * Returns basic precision value

        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Precision(self, *args)


    def SetMinTolerance(self, *args):
        """
        * Sets minimal allowed tolerance

        :param mintol:
        :type mintol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMinTolerance(self, *args)


    def MinTolerance(self, *args):
        """
        * Returns minimal allowed tolerance

        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MinTolerance(self, *args)


    def SetMaxTolerance(self, *args):
        """
        * Sets maximal allowed tolerance

        :param maxtol:
        :type maxtol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMaxTolerance(self, *args)


    def MaxTolerance(self, *args):
        """
        * Returns maximal allowed tolerance

        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MaxTolerance(self, *args)


    def LimitTolerance(self, *args):
        """
        * Returns tolerance limited by [myMinTol,myMaxTol]

        :param toler:
        :type toler: float
        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_LimitTolerance(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_Tool self)"""
        return _ShapeUpgrade.ShapeUpgrade_Tool__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_Tool self) -> Handle_ShapeUpgrade_Tool"""
        return _ShapeUpgrade.ShapeUpgrade_Tool_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_Tool.Set = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Set, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetContext, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.Context = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Context, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetPrecision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetPrecision, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.Precision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Precision, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetMinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetMinTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.MinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_MinTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetMaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetMaxTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.MaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_MaxTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.LimitTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_LimitTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool__kill_pointed, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_GetHandle, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool_swigregister = _ShapeUpgrade.ShapeUpgrade_Tool_swigregister
ShapeUpgrade_Tool_swigregister(ShapeUpgrade_Tool)

class Handle_ShapeUpgrade_Tool(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_Tool_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_Tool(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_Tool.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_Tool_Nullify, None, Handle_ShapeUpgrade_Tool)
Handle_ShapeUpgrade_Tool.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_Tool_IsNull, None, Handle_ShapeUpgrade_Tool)
Handle_ShapeUpgrade_Tool.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_Tool_GetObject, None, Handle_ShapeUpgrade_Tool)
Handle_ShapeUpgrade_Tool._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_Tool__kill_pointed, None, Handle_ShapeUpgrade_Tool)
Handle_ShapeUpgrade_Tool_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_swigregister
Handle_ShapeUpgrade_Tool_swigregister(Handle_ShapeUpgrade_Tool)

def Handle_ShapeUpgrade_Tool_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast(AnObject)
Handle_ShapeUpgrade_Tool_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast

class ShapeUpgrade_UnifySameDomain(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param UnifyEdges: default value is Standard_True
        :type UnifyEdges: bool
        :param UnifyFaces: default value is Standard_True
        :type UnifyFaces: bool
        :param ConcatBSplines: default value is Standard_False
        :type ConcatBSplines: bool
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_UnifySameDomain(*args))

    def Initialize(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param UnifyEdges: default value is Standard_True
        :type UnifyEdges: bool
        :param UnifyFaces: default value is Standard_True
        :type UnifyFaces: bool
        :param ConcatBSplines: default value is Standard_False
        :type ConcatBSplines: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Initialize(self, *args)


    def Build(self, *args):
        """
        * Builds the resulting shape

        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Build(self, *args)


    def Shape(self, *args):
        """
        * Gives the resulting shape

        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Shape(self, *args)


    def Generated(self, *args):
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Generated(self, *args)


    def UnifyFaces(self, *args):
        """
        * this method makes if possible a common face from each group of faces lying on coincident surfaces

        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyFaces(self, *args)


    def UnifyEdges(self, *args):
        """
        * this method makes if possible a common edge from each group of edges connecting common couple of faces

        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyEdges(self, *args)


    def UnifyFacesAndEdges(self, *args):
        """
        * this method unifies same domain faces and edges

        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyFacesAndEdges(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_UnifySameDomain self)"""
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_UnifySameDomain self) -> Handle_ShapeUpgrade_UnifySameDomain"""
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_UnifySameDomain.Initialize = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Initialize, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Build, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Shape = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Shape, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Generated = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Generated, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.UnifyFaces = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyFaces, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.UnifyEdges = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyEdges, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.UnifyFacesAndEdges = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_UnifyFacesAndEdges, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain__kill_pointed, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_GetHandle, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain_swigregister = _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_swigregister
ShapeUpgrade_UnifySameDomain_swigregister(ShapeUpgrade_UnifySameDomain)

class Handle_ShapeUpgrade_UnifySameDomain(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_UnifySameDomain(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_UnifySameDomain.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_Nullify, None, Handle_ShapeUpgrade_UnifySameDomain)
Handle_ShapeUpgrade_UnifySameDomain.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_IsNull, None, Handle_ShapeUpgrade_UnifySameDomain)
Handle_ShapeUpgrade_UnifySameDomain.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_GetObject, None, Handle_ShapeUpgrade_UnifySameDomain)
Handle_ShapeUpgrade_UnifySameDomain._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain__kill_pointed, None, Handle_ShapeUpgrade_UnifySameDomain)
Handle_ShapeUpgrade_UnifySameDomain_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_swigregister
Handle_ShapeUpgrade_UnifySameDomain_swigregister(Handle_ShapeUpgrade_UnifySameDomain)

def Handle_ShapeUpgrade_UnifySameDomain_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast(AnObject)
Handle_ShapeUpgrade_UnifySameDomain_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast

class ShapeUpgrade_ConvertSurfaceToBezierBasis(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertSurfaceToBezierBasis(*args))

    def Segments(self, *args):
        """
        * Returns the grid of bezier based surfaces correspondent to original surface.

        :rtype: Handle_ShapeExtend_CompositeSurface

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_Segments(self, *args)


    def SetPlaneMode(self, *args):
        """
        * Sets mode for conversion Geom_Plane to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetPlaneMode(self, *args)


    def GetPlaneMode(self, *args):
        """
        * Returns the Geom_Pline conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args):
        """
        * Sets mode for conversion Geom_SurfaceOfRevolution to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetRevolutionMode(self, *args)


    def GetRevolutionMode(self, *args):
        """
        * Returns the Geom_SurfaceOfRevolution conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetRevolutionMode(self, *args)


    def SetExtrusionMode(self, *args):
        """
        * Sets mode for conversion Geom_SurfaceOfLinearExtrusion to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetExtrusionMode(self, *args)


    def GetExtrusionMode(self, *args):
        """
        * Returns the Geom_SurfaceOfLinearExtrusion conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetExtrusionMode(self, *args)


    def SetBSplineMode(self, *args):
        """
        * Sets mode for conversion Geom_BSplineSurface to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetBSplineMode(self, *args)


    def GetBSplineMode(self, *args):
        """
        * Returns the Geom_BSplineSurface conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetBSplineMode(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ConvertSurfaceToBezierBasis self)"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_ConvertSurfaceToBezierBasis self) -> Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ConvertSurfaceToBezierBasis.Segments = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_Segments, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetPlaneMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetPlaneMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetRevolutionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetRevolutionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetExtrusionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetExtrusionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetBSplineMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetBSplineMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis__kill_pointed, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetHandle, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister(ShapeUpgrade_ConvertSurfaceToBezierBasis)

class Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis(Handle_ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Nullify, None, Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull, None, Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_GetObject, None, Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis__kill_pointed, None, Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister(Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis)

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(AnObject)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast

class ShapeUpgrade_EdgeDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_EdgeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_EdgeDivide(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Clear(self, *args)


    def SetFace(self, *args):
        """
        * Sets supporting surface by face

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetFace(self, *args)


    def Compute(self, *args):
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Compute(self, *args)


    def HasCurve2d(self, *args):
        """
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve2d(self, *args)


    def HasCurve3d(self, *args):
        """
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve3d(self, *args)


    def Knots2d(self, *args):
        """
        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots2d(self, *args)


    def Knots3d(self, *args):
        """
        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots3d(self, *args)


    def SetSplitCurve2dTool(self, *args):
        """
        * Sets the tool for splitting pcurves.

        :param splitCurve2dTool:
        :type splitCurve2dTool: Handle_ShapeUpgrade_SplitCurve2d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args):
        """
        * Sets the tool for splitting 3D curves.

        :param splitCurve3dTool:
        :type splitCurve3dTool: Handle_ShapeUpgrade_SplitCurve3d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve3dTool(self, *args)


    def GetSplitCurve2dTool(self, *args):
        """
        * Returns the tool for splitting pcurves.

        :rtype: Handle_ShapeUpgrade_SplitCurve2d

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve2dTool(self, *args)


    def GetSplitCurve3dTool(self, *args):
        """
        * Returns the tool for splitting 3D curves.

        :rtype: Handle_ShapeUpgrade_SplitCurve3d

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve3dTool(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_EdgeDivide self)"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_EdgeDivide self) -> Handle_ShapeUpgrade_EdgeDivide"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_EdgeDivide.Clear = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Clear, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetFace = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetFace, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Compute, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.HasCurve2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve2d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.HasCurve3d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve3d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Knots2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots2d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Knots3d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots3d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve2dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve3dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.GetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve2dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.GetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve3dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide__kill_pointed, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetHandle, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_EdgeDivide_swigregister
ShapeUpgrade_EdgeDivide_swigregister(ShapeUpgrade_EdgeDivide)

class Handle_ShapeUpgrade_EdgeDivide(Handle_ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_EdgeDivide(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_EdgeDivide.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_Nullify, None, Handle_ShapeUpgrade_EdgeDivide)
Handle_ShapeUpgrade_EdgeDivide.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_IsNull, None, Handle_ShapeUpgrade_EdgeDivide)
Handle_ShapeUpgrade_EdgeDivide.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_GetObject, None, Handle_ShapeUpgrade_EdgeDivide)
Handle_ShapeUpgrade_EdgeDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide__kill_pointed, None, Handle_ShapeUpgrade_EdgeDivide)
Handle_ShapeUpgrade_EdgeDivide_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_swigregister
Handle_ShapeUpgrade_EdgeDivide_swigregister(Handle_ShapeUpgrade_EdgeDivide)

def Handle_ShapeUpgrade_EdgeDivide_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast(AnObject)
Handle_ShapeUpgrade_EdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast

class ShapeUpgrade_FaceDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty constructor.

        :rtype: None

        * Initialize by a Face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_FaceDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FaceDivide(*args))

    def Init(self, *args):
        """
        * Initialize by a Face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Init(self, *args)


    def SetSurfaceSegmentMode(self, *args):
        """
        * Purpose sets mode for trimming (segment) surface by wire UV bounds.

        :param Segment:
        :type Segment: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSurfaceSegmentMode(self, *args)


    def Perform(self, *args):
        """
        * Performs splitting and computes the resulting shell The context is used to keep track of former splittings in order to keep sharings. It is updated according to modifications made.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Perform(self, *args)


    def SplitSurface(self, *args):
        """
        * Performs splitting of surface and computes the shell from source face.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitSurface(self, *args)


    def SplitCurves(self, *args):
        """
        * Performs splitting of curves of all the edges in the shape and divides these edges.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitCurves(self, *args)


    def Result(self, *args):
        """
        * Gives the resulting Shell, or Face, or Null shape if not done.

        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Result(self, *args)


    def Status(self, *args):
        """
        * Queries the status of last call to Perform OK : no splitting was done (or no call to Perform) DONE1: some edges were splitted DONE2: surface was splitted DONE3: surface was modified without splitting FAIL1: some fails encountered during splitting wires FAIL2: face cannot be splitted

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Status(self, *args)


    def SetSplitSurfaceTool(self, *args):
        """
        * Sets the tool for splitting surfaces.

        :param splitSurfaceTool:
        :type splitSurfaceTool: Handle_ShapeUpgrade_SplitSurface &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSplitSurfaceTool(self, *args)


    def SetWireDivideTool(self, *args):
        """
        * Sets the tool for dividing edges on Face.

        :param wireDivideTool:
        :type wireDivideTool: Handle_ShapeUpgrade_WireDivide &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetWireDivideTool(self, *args)


    def GetWireDivideTool(self, *args):
        """
        * Returns the tool for dividing edges on Face. This tool must be already initialized.

        :rtype: Handle_ShapeUpgrade_WireDivide

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetWireDivideTool(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_FaceDivide self)"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_FaceDivide self) -> Handle_ShapeUpgrade_FaceDivide"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_FaceDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Init, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetSurfaceSegmentMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSurfaceSegmentMode, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Perform, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SplitSurface = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitSurface, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SplitCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitCurves, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Result = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Result, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Status, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetSplitSurfaceTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSplitSurfaceTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetWireDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetWireDivideTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.GetWireDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_GetWireDivideTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide__kill_pointed, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_GetHandle, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivide_swigregister
ShapeUpgrade_FaceDivide_swigregister(ShapeUpgrade_FaceDivide)

class Handle_ShapeUpgrade_FaceDivide(Handle_ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_FaceDivide(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_FaceDivide.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_Nullify, None, Handle_ShapeUpgrade_FaceDivide)
Handle_ShapeUpgrade_FaceDivide.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_IsNull, None, Handle_ShapeUpgrade_FaceDivide)
Handle_ShapeUpgrade_FaceDivide.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_GetObject, None, Handle_ShapeUpgrade_FaceDivide)
Handle_ShapeUpgrade_FaceDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide__kill_pointed, None, Handle_ShapeUpgrade_FaceDivide)
Handle_ShapeUpgrade_FaceDivide_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_swigregister
Handle_ShapeUpgrade_FaceDivide_swigregister(Handle_ShapeUpgrade_FaceDivide)

def Handle_ShapeUpgrade_FaceDivide_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast(AnObject)
Handle_ShapeUpgrade_FaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast

class ShapeUpgrade_FixSmallCurves(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FixSmallCurves(*args))

    def Init(self, *args):
        """
        :param theEdge:
        :type theEdge: TopoDS_Edge &
        :param theFace:
        :type theFace: TopoDS_Face &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Init(self, *args)


    def Approx(self, *args):
        """
        :param Curve3d:
        :type Curve3d: Handle_Geom_Curve &
        :param Curve2d:
        :type Curve2d: Handle_Geom2d_Curve &
        :param Curve2dR:
        :type Curve2dR: Handle_Geom2d_Curve &
        :param First:
        :type First: float &
        :param Last:
        :type Last: float &
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Approx(self, *args)


    def SetSplitCurve3dTool(self, *args):
        """
        * Sets the tool for splitting 3D curves.

        :param splitCurve3dTool:
        :type splitCurve3dTool: Handle_ShapeUpgrade_SplitCurve3d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve3dTool(self, *args)


    def SetSplitCurve2dTool(self, *args):
        """
        * Sets the tool for splitting pcurves.

        :param splitCurve2dTool:
        :type splitCurve2dTool: Handle_ShapeUpgrade_SplitCurve2d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve2dTool(self, *args)


    def Status(self, *args):
        """
        * Queries the status of last call to Perform OK : DONE1: DONE2: FAIL1:

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Status(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_FixSmallCurves self)"""
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_FixSmallCurves self) -> Handle_ShapeUpgrade_FixSmallCurves"""
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_FixSmallCurves.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Init, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.Approx = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Approx, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve3dTool, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve2dTool, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Status, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves__kill_pointed, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_GetHandle, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_swigregister
ShapeUpgrade_FixSmallCurves_swigregister(ShapeUpgrade_FixSmallCurves)

class Handle_ShapeUpgrade_FixSmallCurves(Handle_ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_FixSmallCurves(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_FixSmallCurves.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_Nullify, None, Handle_ShapeUpgrade_FixSmallCurves)
Handle_ShapeUpgrade_FixSmallCurves.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_IsNull, None, Handle_ShapeUpgrade_FixSmallCurves)
Handle_ShapeUpgrade_FixSmallCurves.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_GetObject, None, Handle_ShapeUpgrade_FixSmallCurves)
Handle_ShapeUpgrade_FixSmallCurves._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves__kill_pointed, None, Handle_ShapeUpgrade_FixSmallCurves)
Handle_ShapeUpgrade_FixSmallCurves_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_swigregister
Handle_ShapeUpgrade_FixSmallCurves_swigregister(Handle_ShapeUpgrade_FixSmallCurves)

def Handle_ShapeUpgrade_FixSmallCurves_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast(AnObject)
Handle_ShapeUpgrade_FixSmallCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast

class ShapeUpgrade_RemoveInternalWires(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty constructor.

        :rtype: None

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_RemoveInternalWires(*args))

    def Init(self, *args):
        """
        * Initialize by a Shape.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Init(self, *args)


    def Perform(self, *args):
        """
        * //!Removes all internal wires having area less than area specified as minimal allowed area

        :rtype: bool

        * //!If specified sequence of shape contains - //!	 1.wires then these wires will be removed if they have area less than allowed min area.  2.faces than internal wires from these faces will be removed if they have area less than allowed min area.

        :param theSeqShapes:
        :type theSeqShapes: TopTools_SequenceOfShape &
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Perform(self, *args)


    def GetResult(self, *args):
        """
        * //!Get result shape

        :rtype: TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetResult(self, *args)


    def GetMinArea(self):
        """GetMinArea(ShapeUpgrade_RemoveInternalWires self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetMinArea(self)


    def SetMinArea(self, value):
        """SetMinArea(ShapeUpgrade_RemoveInternalWires self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetMinArea(self, value)


    def GetRemoveFaceMode(self):
        """GetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self) -> Standard_Boolean"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetRemoveFaceMode(self)


    def SetRemoveFaceMode(self, value):
        """SetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self, Standard_Boolean value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetRemoveFaceMode(self, value)


    def RemovedFaces(self, *args):
        """
        * //!Returns sequence of removed faces.

        :rtype: TopTools_SequenceOfShape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedFaces(self, *args)


    def RemovedWires(self, *args):
        """
        * //!Returns sequence of removed faces.

        :rtype: TopTools_SequenceOfShape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedWires(self, *args)


    def Status(self, *args):
        """
        * //!Queries status of last call to Perform() : OK - nothing was done :DONE1 - internal wires were removed :DONE2 - small faces were removed. :FAIL1 - initial shape is not specified :FAIL2 - specified sub-shape is not belonged to inotial shape.

        :param theStatus:
        :type theStatus: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Status(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_RemoveInternalWires self)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_RemoveInternalWires self) -> Handle_ShapeUpgrade_RemoveInternalWires"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_RemoveInternalWires.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Init, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Perform, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetResult = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetResult, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetMinArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetMinArea, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.SetMinArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetMinArea, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetRemoveFaceMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetRemoveFaceMode, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.SetRemoveFaceMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetRemoveFaceMode, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.RemovedFaces = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedFaces, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.RemovedWires = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedWires, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Status, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires__kill_pointed, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetHandle, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_swigregister
ShapeUpgrade_RemoveInternalWires_swigregister(ShapeUpgrade_RemoveInternalWires)

class Handle_ShapeUpgrade_RemoveInternalWires(Handle_ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_RemoveInternalWires(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_RemoveInternalWires.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_Nullify, None, Handle_ShapeUpgrade_RemoveInternalWires)
Handle_ShapeUpgrade_RemoveInternalWires.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_IsNull, None, Handle_ShapeUpgrade_RemoveInternalWires)
Handle_ShapeUpgrade_RemoveInternalWires.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_GetObject, None, Handle_ShapeUpgrade_RemoveInternalWires)
Handle_ShapeUpgrade_RemoveInternalWires._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires__kill_pointed, None, Handle_ShapeUpgrade_RemoveInternalWires)
Handle_ShapeUpgrade_RemoveInternalWires_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_swigregister
Handle_ShapeUpgrade_RemoveInternalWires_swigregister(Handle_ShapeUpgrade_RemoveInternalWires)

def Handle_ShapeUpgrade_RemoveInternalWires_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast(AnObject)
Handle_ShapeUpgrade_RemoveInternalWires_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast

class ShapeUpgrade_ShapeConvertToBezier(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        * Initialize by a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeConvertToBezier(*args))

    def Set2dConversion(self, *args):
        """
        * Sets mode for conversion 2D curves to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set2dConversion(self, *args)


    def Get2dConversion(self, *args):
        """
        * Returns the 2D conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get2dConversion(self, *args)


    def Set3dConversion(self, *args):
        """
        * Sets mode for conversion 3d curves to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConversion(self, *args)


    def Get3dConversion(self, *args):
        """
        * Returns the 3D conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConversion(self, *args)


    def SetSurfaceConversion(self, *args):
        """
        * Sets mode for conversion surfaces curves to bezier basis.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetSurfaceConversion(self, *args)


    def GetSurfaceConversion(self, *args):
        """
        * Returns the surface conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetSurfaceConversion(self, *args)


    def Set3dLineConversion(self, *args):
        """
        * Sets mode for conversion Geom_Line to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dLineConversion(self, *args)


    def Get3dLineConversion(self, *args):
        """
        * Returns the Geom_Line conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dLineConversion(self, *args)


    def Set3dCircleConversion(self, *args):
        """
        * Sets mode for conversion Geom_Circle to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dCircleConversion(self, *args)


    def Get3dCircleConversion(self, *args):
        """
        * Returns the Geom_Circle conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dCircleConversion(self, *args)


    def Set3dConicConversion(self, *args):
        """
        * Sets mode for conversion Geom_Conic to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConicConversion(self, *args)


    def Get3dConicConversion(self, *args):
        """
        * Returns the Geom_Conic conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConicConversion(self, *args)


    def SetPlaneMode(self, *args):
        """
        * Sets mode for conversion Geom_Plane to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetPlaneMode(self, *args)


    def GetPlaneMode(self, *args):
        """
        * Returns the Geom_Pline conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args):
        """
        * Sets mode for conversion Geom_SurfaceOfRevolution to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetRevolutionMode(self, *args)


    def GetRevolutionMode(self, *args):
        """
        * Returns the Geom_SurfaceOfRevolution conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetRevolutionMode(self, *args)


    def SetExtrusionMode(self, *args):
        """
        * Sets mode for conversion Geom_SurfaceOfLinearExtrusion to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetExtrusionMode(self, *args)


    def GetExtrusionMode(self, *args):
        """
        * Returns the Geom_SurfaceOfLinearExtrusion conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetExtrusionMode(self, *args)


    def SetBSplineMode(self, *args):
        """
        * Sets mode for conversion Geom_BSplineSurface to Bezier

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetBSplineMode(self, *args)


    def GetBSplineMode(self, *args):
        """
        * Returns the Geom_BSplineSurface conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetBSplineMode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeConvertToBezier.Set2dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set2dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get2dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get2dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetSurfaceConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetSurfaceConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetSurfaceConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetSurfaceConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dLineConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dLineConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dLineConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dLineConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dCircleConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dCircleConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dCircleConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dCircleConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dConicConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConicConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dConicConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConicConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetPlaneMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetPlaneMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetRevolutionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetRevolutionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetExtrusionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetExtrusionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetBSplineMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetBSplineMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier__kill_pointed, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_swigregister
ShapeUpgrade_ShapeConvertToBezier_swigregister(ShapeUpgrade_ShapeConvertToBezier)

class ShapeUpgrade_ShapeDivideAngle(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :param MaxAngle:
        :type MaxAngle: float
        :rtype: None

        * Initialize by a Shape.

        :param MaxAngle:
        :type MaxAngle: float
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideAngle(*args))

    def InitTool(self, *args):
        """
        * Resets tool for splitting face with given angle

        :param MaxAngle:
        :type MaxAngle: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_InitTool(self, *args)


    def SetMaxAngle(self, *args):
        """
        * Set maximal angle (calls InitTool)

        :param MaxAngle:
        :type MaxAngle: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_SetMaxAngle(self, *args)


    def MaxAngle(self, *args):
        """
        * Returns maximal angle

        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_MaxAngle(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivideAngle.InitTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_InitTool, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle.SetMaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_SetMaxAngle, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle.MaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_MaxAngle, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle__kill_pointed, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_swigregister
ShapeUpgrade_ShapeDivideAngle_swigregister(ShapeUpgrade_ShapeDivideAngle)

class ShapeUpgrade_ShapeDivideArea(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Initialize by a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideArea(*args))

    def GetMaxArea(self):
        """GetMaxArea(ShapeUpgrade_ShapeDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value):
        """SetMaxArea(ShapeUpgrade_ShapeDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_SetMaxArea(self, value)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ShapeDivideArea self)"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivideArea.GetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_GetMaxArea, None, ShapeUpgrade_ShapeDivideArea)
ShapeUpgrade_ShapeDivideArea.SetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_SetMaxArea, None, ShapeUpgrade_ShapeDivideArea)
ShapeUpgrade_ShapeDivideArea._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideArea__kill_pointed, None, ShapeUpgrade_ShapeDivideArea)
ShapeUpgrade_ShapeDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_swigregister
ShapeUpgrade_ShapeDivideArea_swigregister(ShapeUpgrade_ShapeDivideArea)

class ShapeUpgrade_ShapeDivideClosed(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initialises tool with shape and default parameter.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosed(*args))

    def SetNbSplitPoints(self, *args):
        """
        * Sets the number of cuts applied to divide closed faces. The number of resulting faces will be num+1.

        :param num:
        :type num: int
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_SetNbSplitPoints(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivideClosed.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_SetNbSplitPoints, None, ShapeUpgrade_ShapeDivideClosed)
ShapeUpgrade_ShapeDivideClosed._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed__kill_pointed, None, ShapeUpgrade_ShapeDivideClosed)
ShapeUpgrade_ShapeDivideClosed_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_swigregister
ShapeUpgrade_ShapeDivideClosed_swigregister(ShapeUpgrade_ShapeDivideClosed)

class ShapeUpgrade_ShapeDivideClosedEdges(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initialises tool with shape and default parameter.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosedEdges(*args))

    def SetNbSplitPoints(self, *args):
        """
        * Sets the number of cuts applied to divide closed edges. The number of resulting faces will be num+1.

        :param num:
        :type num: int
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_SetNbSplitPoints(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivideClosedEdges.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_SetNbSplitPoints, None, ShapeUpgrade_ShapeDivideClosedEdges)
ShapeUpgrade_ShapeDivideClosedEdges._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges__kill_pointed, None, ShapeUpgrade_ShapeDivideClosedEdges)
ShapeUpgrade_ShapeDivideClosedEdges_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_swigregister
ShapeUpgrade_ShapeDivideClosedEdges_swigregister(ShapeUpgrade_ShapeDivideClosedEdges)

class ShapeUpgrade_ShapeDivideContinuity(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Initialize by a Shape.

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideContinuity(*args))

    def SetTolerance(self, *args):
        """
        * Sets tolerance.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance(self, *args)


    def SetTolerance2d(self, *args):
        """
        * Sets tolerance.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance2d(self, *args)


    def SetBoundaryCriterion(self, *args):
        """
        * Defines a criterion of continuity for the boundary (all the Wires) The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.

        :param Criterion: default value is GeomAbs_C1
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetBoundaryCriterion(self, *args)


    def SetPCurveCriterion(self, *args):
        """
        * Defines a criterion of continuity for the boundary (all the pcurves of Wires) The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.

        :param Criterion: default value is GeomAbs_C1
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetPCurveCriterion(self, *args)


    def SetSurfaceCriterion(self, *args):
        """
        * Defines a criterion of continuity for the boundary (all the Wires) The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.

        :param Criterion: default value is GeomAbs_C1
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetSurfaceCriterion(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ShapeDivideContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetTolerance2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance2d, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetBoundaryCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetBoundaryCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetPCurveCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetPCurveCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetSurfaceCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetSurfaceCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity__kill_pointed, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_swigregister
ShapeUpgrade_ShapeDivideContinuity_swigregister(ShapeUpgrade_ShapeDivideContinuity)

class ShapeUpgrade_SplitCurve2d(ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2d(*args))

    def Init(self, *args):
        """
        * Initializes with pcurve with its first and last parameters.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: None

        * Initializes with pcurve with its parameters.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_Init(self, *args)


    def GetCurves(self, *args):
        """
        :rtype: Handle_TColGeom2d_HArray1OfCurve

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetCurves(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitCurve2d self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitCurve2d self) -> Handle_ShapeUpgrade_SplitCurve2d"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitCurve2d.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d_Init, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d.GetCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetCurves, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d__kill_pointed, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetHandle, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_swigregister
ShapeUpgrade_SplitCurve2d_swigregister(ShapeUpgrade_SplitCurve2d)

class Handle_ShapeUpgrade_SplitCurve2d(Handle_ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitCurve2d(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitCurve2d.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_Nullify, None, Handle_ShapeUpgrade_SplitCurve2d)
Handle_ShapeUpgrade_SplitCurve2d.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_IsNull, None, Handle_ShapeUpgrade_SplitCurve2d)
Handle_ShapeUpgrade_SplitCurve2d.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_GetObject, None, Handle_ShapeUpgrade_SplitCurve2d)
Handle_ShapeUpgrade_SplitCurve2d._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d__kill_pointed, None, Handle_ShapeUpgrade_SplitCurve2d)
Handle_ShapeUpgrade_SplitCurve2d_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_swigregister
Handle_ShapeUpgrade_SplitCurve2d_swigregister(Handle_ShapeUpgrade_SplitCurve2d)

def Handle_ShapeUpgrade_SplitCurve2d_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast(AnObject)
Handle_ShapeUpgrade_SplitCurve2d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast

class ShapeUpgrade_SplitCurve3d(ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3d(*args))

    def Init(self, *args):
        """
        * Initializes with curve with its first and last parameters.

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: None

        * Initializes with curve with its parameters.

        :param C:
        :type C: Handle_Geom_Curve &
        :param First:
        :type First: float
        :param Last:
        :type Last: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_Init(self, *args)


    def GetCurves(self, *args):
        """
        :rtype: Handle_TColGeom_HArray1OfCurve

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetCurves(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitCurve3d self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitCurve3d self) -> Handle_ShapeUpgrade_SplitCurve3d"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitCurve3d.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d_Init, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d.GetCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetCurves, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d__kill_pointed, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetHandle, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_swigregister
ShapeUpgrade_SplitCurve3d_swigregister(ShapeUpgrade_SplitCurve3d)

class Handle_ShapeUpgrade_SplitCurve3d(Handle_ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitCurve3d(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitCurve3d.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_Nullify, None, Handle_ShapeUpgrade_SplitCurve3d)
Handle_ShapeUpgrade_SplitCurve3d.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_IsNull, None, Handle_ShapeUpgrade_SplitCurve3d)
Handle_ShapeUpgrade_SplitCurve3d.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_GetObject, None, Handle_ShapeUpgrade_SplitCurve3d)
Handle_ShapeUpgrade_SplitCurve3d._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d__kill_pointed, None, Handle_ShapeUpgrade_SplitCurve3d)
Handle_ShapeUpgrade_SplitCurve3d_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_swigregister
Handle_ShapeUpgrade_SplitCurve3d_swigregister(Handle_ShapeUpgrade_SplitCurve3d)

def Handle_ShapeUpgrade_SplitCurve3d_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast(AnObject)
Handle_ShapeUpgrade_SplitCurve3d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast

class ShapeUpgrade_SplitSurfaceAngle(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :param MaxAngle:
        :type MaxAngle: float
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceAngle(*args))

    def SetMaxAngle(self, *args):
        """
        * Set maximal angle

        :param MaxAngle:
        :type MaxAngle: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_SetMaxAngle(self, *args)


    def MaxAngle(self, *args):
        """
        * Returns maximal angle

        :rtype: float

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_MaxAngle(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitSurfaceAngle self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitSurfaceAngle self) -> Handle_ShapeUpgrade_SplitSurfaceAngle"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitSurfaceAngle.SetMaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_SetMaxAngle, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle.MaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_MaxAngle, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle__kill_pointed, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_GetHandle, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_swigregister
ShapeUpgrade_SplitSurfaceAngle_swigregister(ShapeUpgrade_SplitSurfaceAngle)

class Handle_ShapeUpgrade_SplitSurfaceAngle(Handle_ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitSurfaceAngle(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitSurfaceAngle.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_Nullify, None, Handle_ShapeUpgrade_SplitSurfaceAngle)
Handle_ShapeUpgrade_SplitSurfaceAngle.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull, None, Handle_ShapeUpgrade_SplitSurfaceAngle)
Handle_ShapeUpgrade_SplitSurfaceAngle.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_GetObject, None, Handle_ShapeUpgrade_SplitSurfaceAngle)
Handle_ShapeUpgrade_SplitSurfaceAngle._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle__kill_pointed, None, Handle_ShapeUpgrade_SplitSurfaceAngle)
Handle_ShapeUpgrade_SplitSurfaceAngle_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_swigregister
Handle_ShapeUpgrade_SplitSurfaceAngle_swigregister(Handle_ShapeUpgrade_SplitSurfaceAngle)

def Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(AnObject)
Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast

class ShapeUpgrade_SplitSurfaceArea(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceArea(*args))

    def GetNbParts(self):
        """GetNbParts(ShapeUpgrade_SplitSurfaceArea self) -> Standard_Integer"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetNbParts(self)


    def SetNbParts(self, value):
        """SetNbParts(ShapeUpgrade_SplitSurfaceArea self, Standard_Integer value)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_SetNbParts(self, value)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitSurfaceArea self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitSurfaceArea self) -> Handle_ShapeUpgrade_SplitSurfaceArea"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitSurfaceArea.GetNbParts = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetNbParts, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea.SetNbParts = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_SetNbParts, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea__kill_pointed, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetHandle, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_swigregister
ShapeUpgrade_SplitSurfaceArea_swigregister(ShapeUpgrade_SplitSurfaceArea)

class Handle_ShapeUpgrade_SplitSurfaceArea(Handle_ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitSurfaceArea(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitSurfaceArea.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_Nullify, None, Handle_ShapeUpgrade_SplitSurfaceArea)
Handle_ShapeUpgrade_SplitSurfaceArea.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_IsNull, None, Handle_ShapeUpgrade_SplitSurfaceArea)
Handle_ShapeUpgrade_SplitSurfaceArea.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_GetObject, None, Handle_ShapeUpgrade_SplitSurfaceArea)
Handle_ShapeUpgrade_SplitSurfaceArea._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea__kill_pointed, None, Handle_ShapeUpgrade_SplitSurfaceArea)
Handle_ShapeUpgrade_SplitSurfaceArea_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_swigregister
Handle_ShapeUpgrade_SplitSurfaceArea_swigregister(Handle_ShapeUpgrade_SplitSurfaceArea)

def Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(AnObject)
Handle_ShapeUpgrade_SplitSurfaceArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast

class ShapeUpgrade_SplitSurfaceContinuity(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceContinuity(*args))

    def SetCriterion(self, *args):
        """
        * Sets criterion for splitting.

        :param Criterion:
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args):
        """
        * Sets tolerance.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetTolerance(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitSurfaceContinuity self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitSurfaceContinuity self) -> Handle_ShapeUpgrade_SplitSurfaceContinuity"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitSurfaceContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetCriterion, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetTolerance, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity__kill_pointed, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_GetHandle, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_swigregister
ShapeUpgrade_SplitSurfaceContinuity_swigregister(ShapeUpgrade_SplitSurfaceContinuity)

class Handle_ShapeUpgrade_SplitSurfaceContinuity(Handle_ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitSurfaceContinuity(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitSurfaceContinuity.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_Nullify, None, Handle_ShapeUpgrade_SplitSurfaceContinuity)
Handle_ShapeUpgrade_SplitSurfaceContinuity.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull, None, Handle_ShapeUpgrade_SplitSurfaceContinuity)
Handle_ShapeUpgrade_SplitSurfaceContinuity.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_GetObject, None, Handle_ShapeUpgrade_SplitSurfaceContinuity)
Handle_ShapeUpgrade_SplitSurfaceContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity__kill_pointed, None, Handle_ShapeUpgrade_SplitSurfaceContinuity)
Handle_ShapeUpgrade_SplitSurfaceContinuity_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_swigregister
Handle_ShapeUpgrade_SplitSurfaceContinuity_swigregister(Handle_ShapeUpgrade_SplitSurfaceContinuity)

def Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(AnObject)
Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast

class ShapeUpgrade_WireDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_WireDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_WireDivide(*args))

    def Init(self, *args):
        """
        * Initializes by wire and face

        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        * Initializes by wire and surface

        :param W:
        :type W: TopoDS_Wire &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Init(self, *args)


    def Load(self, *args):
        """
        * Loads working wire

        :param W:
        :type W: TopoDS_Wire &
        :rtype: None

        * Creates wire of one edge and calls Load for wire

        :param E:
        :type E: TopoDS_Edge &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Load(self, *args)


    def SetFace(self, *args):
        """
        * Sets supporting surface by face

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFace(self, *args)


    def SetSurface(self, *args):
        """
        * Sets supporting surface

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        * Sets supporting surface with location

        :param S:
        :type S: Handle_Geom_Surface &
        :param L:
        :type L: TopLoc_Location &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSurface(self, *args)


    def Perform(self, *args):
        """
        * Computes the resulting wire by splitting all the edges according to splitting criteria. All the modifications made are recorded in context (ShapeBuild_ReShape). This tool is applied to all edges before splitting them in order to keep sharings. If no supporting face or surface is defined, only 3d splitting criteria are used.

        :rtype: void

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Perform(self, *args)


    def Wire(self, *args):
        """
        * Gives the resulting Wire (equal to initial one if not done or Null if not loaded)

        :rtype: TopoDS_Wire

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Wire(self, *args)


    def Status(self, *args):
        """
        * Queries status of last call to Perform() OK - no edges were splitted, wire left untouched DONE1 - some edges were splitted FAIL1 - some edges have no 3d curve (skipped) FAIL2 - some edges have no pcurve (skipped)

        :param status:
        :type status: ShapeExtend_Status
        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Status(self, *args)


    def SetSplitCurve3dTool(self, *args):
        """
        * Sets the tool for splitting 3D curves.

        :param splitCurve3dTool:
        :type splitCurve3dTool: Handle_ShapeUpgrade_SplitCurve3d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve3dTool(self, *args)


    def SetSplitCurve2dTool(self, *args):
        """
        * Sets the tool for splitting pcurves.

        :param splitCurve2dTool:
        :type splitCurve2dTool: Handle_ShapeUpgrade_SplitCurve2d &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve2dTool(self, *args)


    def SetTransferParamTool(self, *args):
        """
        * Sets the tool for Transfer parameters between curves and pcurves.

        :param TransferParam:
        :type TransferParam: Handle_ShapeAnalysis_TransferParameters &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetTransferParamTool(self, *args)


    def SetEdgeDivideTool(self, *args):
        """
        * Sets tool for splitting edge

        :param edgeDivideTool:
        :type edgeDivideTool: Handle_ShapeUpgrade_EdgeDivide &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeDivideTool(self, *args)


    def GetEdgeDivideTool(self, *args):
        """
        * returns tool for splitting edges

        :rtype: Handle_ShapeUpgrade_EdgeDivide

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetEdgeDivideTool(self, *args)


    def GetTransferParamTool(self, *args):
        """
        * Returns the tool for Transfer of parameters.

        :rtype: Handle_ShapeAnalysis_TransferParameters

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetTransferParamTool(self, *args)


    def SetEdgeMode(self, *args):
        """
        * //!Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.

        :param EdgeMode:
        :type EdgeMode: int
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeMode(self, *args)


    def SetFixSmallCurveTool(self, *args):
        """
        * //!Sets tool for fixing small curves with specified min tolerance;

        :param FixSmallCurvesTool:
        :type FixSmallCurvesTool: Handle_ShapeUpgrade_FixSmallCurves &
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFixSmallCurveTool(self, *args)


    def GetFixSmallCurveTool(self, *args):
        """
        * //!Returns tool for fixing small curves

        :rtype: Handle_ShapeUpgrade_FixSmallCurves

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetFixSmallCurveTool(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_WireDivide self)"""
        return _ShapeUpgrade.ShapeUpgrade_WireDivide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_WireDivide self) -> Handle_ShapeUpgrade_WireDivide"""
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_WireDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Init, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Load = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Load, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetFace = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetFace, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSurface = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSurface, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Perform, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Wire = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Wire, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Status, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve3dTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve2dTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetTransferParamTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetTransferParamTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetEdgeDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeDivideTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetEdgeDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetEdgeDivideTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetTransferParamTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetTransferParamTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetEdgeMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeMode, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetFixSmallCurveTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetFixSmallCurveTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetFixSmallCurveTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetFixSmallCurveTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide__kill_pointed, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetHandle, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_WireDivide_swigregister
ShapeUpgrade_WireDivide_swigregister(ShapeUpgrade_WireDivide)

class Handle_ShapeUpgrade_WireDivide(Handle_ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_WireDivide(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_WireDivide.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_Nullify, None, Handle_ShapeUpgrade_WireDivide)
Handle_ShapeUpgrade_WireDivide.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_IsNull, None, Handle_ShapeUpgrade_WireDivide)
Handle_ShapeUpgrade_WireDivide.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_GetObject, None, Handle_ShapeUpgrade_WireDivide)
Handle_ShapeUpgrade_WireDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_WireDivide__kill_pointed, None, Handle_ShapeUpgrade_WireDivide)
Handle_ShapeUpgrade_WireDivide_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_swigregister
Handle_ShapeUpgrade_WireDivide_swigregister(Handle_ShapeUpgrade_WireDivide)

def Handle_ShapeUpgrade_WireDivide_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast(AnObject)
Handle_ShapeUpgrade_WireDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast

class ShapeUpgrade_ClosedEdgeDivide(ShapeUpgrade_EdgeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ClosedEdgeDivide(*args))

    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ClosedEdgeDivide self)"""
        return _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_ClosedEdgeDivide self) -> Handle_ShapeUpgrade_ClosedEdgeDivide"""
        return _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ClosedEdgeDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide__kill_pointed, None, ShapeUpgrade_ClosedEdgeDivide)
ShapeUpgrade_ClosedEdgeDivide.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_GetHandle, None, ShapeUpgrade_ClosedEdgeDivide)
ShapeUpgrade_ClosedEdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_swigregister
ShapeUpgrade_ClosedEdgeDivide_swigregister(ShapeUpgrade_ClosedEdgeDivide)

class Handle_ShapeUpgrade_ClosedEdgeDivide(Handle_ShapeUpgrade_EdgeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_ClosedEdgeDivide(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_ClosedEdgeDivide.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_Nullify, None, Handle_ShapeUpgrade_ClosedEdgeDivide)
Handle_ShapeUpgrade_ClosedEdgeDivide.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull, None, Handle_ShapeUpgrade_ClosedEdgeDivide)
Handle_ShapeUpgrade_ClosedEdgeDivide.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_GetObject, None, Handle_ShapeUpgrade_ClosedEdgeDivide)
Handle_ShapeUpgrade_ClosedEdgeDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide__kill_pointed, None, Handle_ShapeUpgrade_ClosedEdgeDivide)
Handle_ShapeUpgrade_ClosedEdgeDivide_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_swigregister
Handle_ShapeUpgrade_ClosedEdgeDivide_swigregister(Handle_ShapeUpgrade_ClosedEdgeDivide)

def Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(AnObject)
Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast

class ShapeUpgrade_ClosedFaceDivide(ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty constructor.

        :rtype: None

        * Initialize by a Face.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ClosedFaceDivide(*args))

    def SetNbSplitPoints(self, *args):
        """
        * Sets the number of cutting lines by which closed face will be splitted. The resulting faces will be num+1.

        :param num:
        :type num: int
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_SetNbSplitPoints(self, *args)


    def GetNbSplitPoints(self, *args):
        """
        * Returns the number of splitting points

        :rtype: int

        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetNbSplitPoints(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ClosedFaceDivide self)"""
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_ClosedFaceDivide self) -> Handle_ShapeUpgrade_ClosedFaceDivide"""
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ClosedFaceDivide.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_SetNbSplitPoints, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide.GetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetNbSplitPoints, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide__kill_pointed, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetHandle, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_swigregister
ShapeUpgrade_ClosedFaceDivide_swigregister(ShapeUpgrade_ClosedFaceDivide)

class Handle_ShapeUpgrade_ClosedFaceDivide(Handle_ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_ClosedFaceDivide(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_ClosedFaceDivide.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_Nullify, None, Handle_ShapeUpgrade_ClosedFaceDivide)
Handle_ShapeUpgrade_ClosedFaceDivide.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_IsNull, None, Handle_ShapeUpgrade_ClosedFaceDivide)
Handle_ShapeUpgrade_ClosedFaceDivide.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_GetObject, None, Handle_ShapeUpgrade_ClosedFaceDivide)
Handle_ShapeUpgrade_ClosedFaceDivide._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide__kill_pointed, None, Handle_ShapeUpgrade_ClosedFaceDivide)
Handle_ShapeUpgrade_ClosedFaceDivide_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_swigregister
Handle_ShapeUpgrade_ClosedFaceDivide_swigregister(Handle_ShapeUpgrade_ClosedFaceDivide)

def Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(AnObject)
Handle_ShapeUpgrade_ClosedFaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast

class ShapeUpgrade_ConvertCurve2dToBezier(ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve2dToBezier(*args))

    def SplitParams(self, *args):
        """
        * Returns the list of splitted parameters in original curve parametrisation.

        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_SplitParams(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ConvertCurve2dToBezier self)"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_ConvertCurve2dToBezier self) -> Handle_ShapeUpgrade_ConvertCurve2dToBezier"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ConvertCurve2dToBezier.SplitParams = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_SplitParams, None, ShapeUpgrade_ConvertCurve2dToBezier)
ShapeUpgrade_ConvertCurve2dToBezier._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier__kill_pointed, None, ShapeUpgrade_ConvertCurve2dToBezier)
ShapeUpgrade_ConvertCurve2dToBezier.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_GetHandle, None, ShapeUpgrade_ConvertCurve2dToBezier)
ShapeUpgrade_ConvertCurve2dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_swigregister
ShapeUpgrade_ConvertCurve2dToBezier_swigregister(ShapeUpgrade_ConvertCurve2dToBezier)

class Handle_ShapeUpgrade_ConvertCurve2dToBezier(Handle_ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_ConvertCurve2dToBezier(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_ConvertCurve2dToBezier.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_Nullify, None, Handle_ShapeUpgrade_ConvertCurve2dToBezier)
Handle_ShapeUpgrade_ConvertCurve2dToBezier.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull, None, Handle_ShapeUpgrade_ConvertCurve2dToBezier)
Handle_ShapeUpgrade_ConvertCurve2dToBezier.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_GetObject, None, Handle_ShapeUpgrade_ConvertCurve2dToBezier)
Handle_ShapeUpgrade_ConvertCurve2dToBezier._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier__kill_pointed, None, Handle_ShapeUpgrade_ConvertCurve2dToBezier)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_swigregister
Handle_ShapeUpgrade_ConvertCurve2dToBezier_swigregister(Handle_ShapeUpgrade_ConvertCurve2dToBezier)

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(AnObject)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast

class ShapeUpgrade_ConvertCurve3dToBezier(ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve3dToBezier(*args))

    def SetLineMode(self, *args):
        """
        * Sets mode for conversion Geom_Line to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetLineMode(self, *args)


    def GetLineMode(self, *args):
        """
        * Returns the Geom_Line conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetLineMode(self, *args)


    def SetCircleMode(self, *args):
        """
        * Sets mode for conversion Geom_Circle to bezier.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetCircleMode(self, *args)


    def GetCircleMode(self, *args):
        """
        * Returns the Geom_Circle conversion mode.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetCircleMode(self, *args)


    def SetConicMode(self, *args):
        """
        * Returns the Geom_Conic conversion mode.

        :param mode:
        :type mode: bool
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetConicMode(self, *args)


    def GetConicMode(self, *args):
        """
        * Performs converting and computes the resulting shape.

        :rtype: bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetConicMode(self, *args)


    def SplitParams(self, *args):
        """
        * Returns the list of splitted parameters in original curve parametrisation.

        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SplitParams(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_ConvertCurve3dToBezier self)"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_ConvertCurve3dToBezier self) -> Handle_ShapeUpgrade_ConvertCurve3dToBezier"""
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_ConvertCurve3dToBezier.SetLineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetLineMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetLineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetLineMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SetCircleMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetCircleMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetCircleMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetCircleMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SetConicMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetConicMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetConicMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetConicMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SplitParams = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SplitParams, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier__kill_pointed, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetHandle, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_swigregister
ShapeUpgrade_ConvertCurve3dToBezier_swigregister(ShapeUpgrade_ConvertCurve3dToBezier)

class Handle_ShapeUpgrade_ConvertCurve3dToBezier(Handle_ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_ConvertCurve3dToBezier(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_ConvertCurve3dToBezier.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_Nullify, None, Handle_ShapeUpgrade_ConvertCurve3dToBezier)
Handle_ShapeUpgrade_ConvertCurve3dToBezier.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull, None, Handle_ShapeUpgrade_ConvertCurve3dToBezier)
Handle_ShapeUpgrade_ConvertCurve3dToBezier.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_GetObject, None, Handle_ShapeUpgrade_ConvertCurve3dToBezier)
Handle_ShapeUpgrade_ConvertCurve3dToBezier._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier__kill_pointed, None, Handle_ShapeUpgrade_ConvertCurve3dToBezier)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_swigregister
Handle_ShapeUpgrade_ConvertCurve3dToBezier_swigregister(Handle_ShapeUpgrade_ConvertCurve3dToBezier)

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(AnObject)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast

class ShapeUpgrade_FaceDivideArea(ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty constructor.

        :rtype: None

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FaceDivideArea(*args))

    def GetMaxArea(self):
        """GetMaxArea(ShapeUpgrade_FaceDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value):
        """SetMaxArea(ShapeUpgrade_FaceDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_SetMaxArea(self, value)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_FaceDivideArea self)"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_FaceDivideArea self) -> Handle_ShapeUpgrade_FaceDivideArea"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_FaceDivideArea.GetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetMaxArea, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea.SetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea_SetMaxArea, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea__kill_pointed, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetHandle, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_swigregister
ShapeUpgrade_FaceDivideArea_swigregister(ShapeUpgrade_FaceDivideArea)

class Handle_ShapeUpgrade_FaceDivideArea(Handle_ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_FaceDivideArea(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_FaceDivideArea.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_Nullify, None, Handle_ShapeUpgrade_FaceDivideArea)
Handle_ShapeUpgrade_FaceDivideArea.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_IsNull, None, Handle_ShapeUpgrade_FaceDivideArea)
Handle_ShapeUpgrade_FaceDivideArea.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_GetObject, None, Handle_ShapeUpgrade_FaceDivideArea)
Handle_ShapeUpgrade_FaceDivideArea._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea__kill_pointed, None, Handle_ShapeUpgrade_FaceDivideArea)
Handle_ShapeUpgrade_FaceDivideArea_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_swigregister
Handle_ShapeUpgrade_FaceDivideArea_swigregister(Handle_ShapeUpgrade_FaceDivideArea)

def Handle_ShapeUpgrade_FaceDivideArea_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast(AnObject)
Handle_ShapeUpgrade_FaceDivideArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast

class ShapeUpgrade_FixSmallBezierCurves(ShapeUpgrade_FixSmallCurves):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FixSmallBezierCurves(*args))

    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_FixSmallBezierCurves self)"""
        return _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_FixSmallBezierCurves self) -> Handle_ShapeUpgrade_FixSmallBezierCurves"""
        return _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_FixSmallBezierCurves._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves__kill_pointed, None, ShapeUpgrade_FixSmallBezierCurves)
ShapeUpgrade_FixSmallBezierCurves.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_GetHandle, None, ShapeUpgrade_FixSmallBezierCurves)
ShapeUpgrade_FixSmallBezierCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_swigregister
ShapeUpgrade_FixSmallBezierCurves_swigregister(ShapeUpgrade_FixSmallBezierCurves)

class Handle_ShapeUpgrade_FixSmallBezierCurves(Handle_ShapeUpgrade_FixSmallCurves):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_FixSmallBezierCurves(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_FixSmallBezierCurves.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_Nullify, None, Handle_ShapeUpgrade_FixSmallBezierCurves)
Handle_ShapeUpgrade_FixSmallBezierCurves.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull, None, Handle_ShapeUpgrade_FixSmallBezierCurves)
Handle_ShapeUpgrade_FixSmallBezierCurves.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_GetObject, None, Handle_ShapeUpgrade_FixSmallBezierCurves)
Handle_ShapeUpgrade_FixSmallBezierCurves._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves__kill_pointed, None, Handle_ShapeUpgrade_FixSmallBezierCurves)
Handle_ShapeUpgrade_FixSmallBezierCurves_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_swigregister
Handle_ShapeUpgrade_FixSmallBezierCurves_swigregister(Handle_ShapeUpgrade_FixSmallBezierCurves)

def Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(AnObject)
Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast

class ShapeUpgrade_SplitCurve2dContinuity(ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2dContinuity(*args))

    def SetCriterion(self, *args):
        """
        * Sets criterion for splitting.

        :param Criterion:
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args):
        """
        * Sets tolerance.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetTolerance(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitCurve2dContinuity self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitCurve2dContinuity self) -> Handle_ShapeUpgrade_SplitCurve2dContinuity"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitCurve2dContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetCriterion, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetTolerance, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity__kill_pointed, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_GetHandle, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_swigregister
ShapeUpgrade_SplitCurve2dContinuity_swigregister(ShapeUpgrade_SplitCurve2dContinuity)

class Handle_ShapeUpgrade_SplitCurve2dContinuity(Handle_ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitCurve2dContinuity(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitCurve2dContinuity.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_Nullify, None, Handle_ShapeUpgrade_SplitCurve2dContinuity)
Handle_ShapeUpgrade_SplitCurve2dContinuity.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull, None, Handle_ShapeUpgrade_SplitCurve2dContinuity)
Handle_ShapeUpgrade_SplitCurve2dContinuity.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_GetObject, None, Handle_ShapeUpgrade_SplitCurve2dContinuity)
Handle_ShapeUpgrade_SplitCurve2dContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity__kill_pointed, None, Handle_ShapeUpgrade_SplitCurve2dContinuity)
Handle_ShapeUpgrade_SplitCurve2dContinuity_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_swigregister
Handle_ShapeUpgrade_SplitCurve2dContinuity_swigregister(Handle_ShapeUpgrade_SplitCurve2dContinuity)

def Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(AnObject)
Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast

class ShapeUpgrade_SplitCurve3dContinuity(ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3dContinuity(*args))

    def SetCriterion(self, *args):
        """
        * Sets criterion for splitting.

        :param Criterion:
        :type Criterion: GeomAbs_Shape
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args):
        """
        * Sets tolerance.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetTolerance(self, *args)


    def GetCurve(self, *args):
        """
        :rtype: Handle_Geom_Curve

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetCurve(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(ShapeUpgrade_SplitCurve3dContinuity self)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(ShapeUpgrade_SplitCurve3dContinuity self) -> Handle_ShapeUpgrade_SplitCurve3dContinuity"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


ShapeUpgrade_SplitCurve3dContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetCriterion, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetTolerance, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity.GetCurve = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetCurve, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity__kill_pointed, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity.GetHandle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetHandle, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_swigregister
ShapeUpgrade_SplitCurve3dContinuity_swigregister(ShapeUpgrade_SplitCurve3dContinuity)

class Handle_ShapeUpgrade_SplitCurve3dContinuity(Handle_ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_swiginit(self, _ShapeUpgrade.new_Handle_ShapeUpgrade_SplitCurve3dContinuity(*args))
    DownCast = staticmethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_ShapeUpgrade_SplitCurve3dContinuity.Nullify = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_Nullify, None, Handle_ShapeUpgrade_SplitCurve3dContinuity)
Handle_ShapeUpgrade_SplitCurve3dContinuity.IsNull = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull, None, Handle_ShapeUpgrade_SplitCurve3dContinuity)
Handle_ShapeUpgrade_SplitCurve3dContinuity.GetObject = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_GetObject, None, Handle_ShapeUpgrade_SplitCurve3dContinuity)
Handle_ShapeUpgrade_SplitCurve3dContinuity._kill_pointed = new_instancemethod(_ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity__kill_pointed, None, Handle_ShapeUpgrade_SplitCurve3dContinuity)
Handle_ShapeUpgrade_SplitCurve3dContinuity_swigregister = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_swigregister
Handle_ShapeUpgrade_SplitCurve3dContinuity_swigregister(Handle_ShapeUpgrade_SplitCurve3dContinuity)

def Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(AnObject):
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(AnObject)
Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast



