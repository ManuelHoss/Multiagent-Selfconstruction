# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _XCAFDoc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFDoc', [dirname(__file__)])
        except ImportError:
            import _XCAFDoc
            return _XCAFDoc
        if fp is not None:
            try:
                _mod = imp.load_module('_XCAFDoc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XCAFDoc = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFDoc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFDoc.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_XCAFDoc.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XCAFDoc.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XCAFDoc.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XCAFDoc.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XCAFDoc.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XCAFDoc.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XCAFDoc.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XCAFDoc.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XCAFDoc.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XCAFDoc.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XCAFDoc.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XCAFDoc.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XCAFDoc.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XCAFDoc.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XCAFDoc.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XCAFDoc.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _XCAFDoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TDF
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.gp
import OCC.Quantity
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.TDocStd
import OCC.Resource
import OCC.TopTools
import OCC.Message
XCAFDoc_ColorGen = _XCAFDoc.XCAFDoc_ColorGen
XCAFDoc_ColorSurf = _XCAFDoc.XCAFDoc_ColorSurf
XCAFDoc_ColorCurv = _XCAFDoc.XCAFDoc_ColorCurv
class xcafdoc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def AssemblyGUID(*args):
        """
        * Returns GUID for UAttribute identifying assembly

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_AssemblyGUID(*args)

    AssemblyGUID = staticmethod(AssemblyGUID)
    def ShapeRefGUID(*args):
        """
        * Returns GUID for TreeNode representing assembly link

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_ShapeRefGUID(*args)

    ShapeRefGUID = staticmethod(ShapeRefGUID)
    def ColorRefGUID(*args):
        """
        * Return GUIDs for TreeNode representing specified types of colors

        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_ColorRefGUID(*args)

    ColorRefGUID = staticmethod(ColorRefGUID)
    def DimTolRefGUID(*args):
        """
        * Return GUIDs for TreeNode representing specified types of DGT

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_DimTolRefGUID(*args)

    DimTolRefGUID = staticmethod(DimTolRefGUID)
    def DatumRefGUID(*args):
        """
        * Return GUIDs for TreeNode representing specified types of datum

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_DatumRefGUID(*args)

    DatumRefGUID = staticmethod(DatumRefGUID)
    def DatumTolRefGUID(*args):
        """
        * Return GUIDs for TreeNode representing connections Datum-Toler

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_DatumTolRefGUID(*args)

    DatumTolRefGUID = staticmethod(DatumTolRefGUID)
    def LayerRefGUID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_LayerRefGUID(*args)

    LayerRefGUID = staticmethod(LayerRefGUID)
    def MaterialRefGUID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_MaterialRefGUID(*args)

    MaterialRefGUID = staticmethod(MaterialRefGUID)
    def InvisibleGUID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_InvisibleGUID(*args)

    InvisibleGUID = staticmethod(InvisibleGUID)
    def ExternRefGUID(*args):
        """
        * Returns GUID for UAttribute identifying external reference on no-step file

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_ExternRefGUID(*args)

    ExternRefGUID = staticmethod(ExternRefGUID)
    def SHUORefGUID(*args):
        """
        * Returns GUID for UAttribute identifying specified higher usage occurrence

        :rtype: Standard_GUID

        """
        return _XCAFDoc.xcafdoc_SHUORefGUID(*args)

    SHUORefGUID = staticmethod(SHUORefGUID)
    def __init__(self): 
        _XCAFDoc.xcafdoc_swiginit(self,_XCAFDoc.new_xcafdoc())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


xcafdoc._kill_pointed = new_instancemethod(_XCAFDoc.xcafdoc__kill_pointed,None,xcafdoc)
xcafdoc_swigregister = _XCAFDoc.xcafdoc_swigregister
xcafdoc_swigregister(xcafdoc)

def xcafdoc_AssemblyGUID(*args):
  """
    * Returns GUID for UAttribute identifying assembly

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_AssemblyGUID(*args)

def xcafdoc_ShapeRefGUID(*args):
  """
    * Returns GUID for TreeNode representing assembly link

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_ShapeRefGUID(*args)

def xcafdoc_ColorRefGUID(*args):
  """
    * Return GUIDs for TreeNode representing specified types of colors

    :param type:
    :type type: XCAFDoc_ColorType
    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_ColorRefGUID(*args)

def xcafdoc_DimTolRefGUID(*args):
  """
    * Return GUIDs for TreeNode representing specified types of DGT

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_DimTolRefGUID(*args)

def xcafdoc_DatumRefGUID(*args):
  """
    * Return GUIDs for TreeNode representing specified types of datum

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_DatumRefGUID(*args)

def xcafdoc_DatumTolRefGUID(*args):
  """
    * Return GUIDs for TreeNode representing connections Datum-Toler

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_DatumTolRefGUID(*args)

def xcafdoc_LayerRefGUID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_LayerRefGUID(*args)

def xcafdoc_MaterialRefGUID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_MaterialRefGUID(*args)

def xcafdoc_InvisibleGUID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_InvisibleGUID(*args)

def xcafdoc_ExternRefGUID(*args):
  """
    * Returns GUID for UAttribute identifying external reference on no-step file

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_ExternRefGUID(*args)

def xcafdoc_SHUORefGUID(*args):
  """
    * Returns GUID for UAttribute identifying specified higher usage occurrence

    :rtype: Standard_GUID

    """
  return _XCAFDoc.xcafdoc_SHUORefGUID(*args)

class XCAFDoc_Area(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * class methods =============

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Area_swiginit(self,_XCAFDoc.new_XCAFDoc_Area(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Area_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Sets a value of volume

        :param vol:
        :type vol: float
        :rtype: None

        * Find, or create, an Area attribute and set its value

        :param label:
        :type label: TDF_Label &
        :param area:
        :type area: float
        :rtype: Handle_XCAFDoc_Area

        """
        return _XCAFDoc.XCAFDoc_Area_Set(*args)

    Set = staticmethod(Set)
    def Get(*args):
        """
        :rtype: float

        * Returns volume of area as argument and succes status returns false if no such attribute at the <label>

        :param label:
        :type label: TDF_Label &
        :param area:
        :type area: float &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_Area_Get(*args)

    Get = staticmethod(Get)
    def DumpToString(self):
        """DumpToString(XCAFDoc_Area self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Area_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Area self)"""
        return _XCAFDoc.XCAFDoc_Area__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Area self) -> Handle_XCAFDoc_Area"""
        return _XCAFDoc.XCAFDoc_Area_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Area.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Area_DumpToString,None,XCAFDoc_Area)
XCAFDoc_Area._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Area__kill_pointed,None,XCAFDoc_Area)
XCAFDoc_Area.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Area_GetHandle,None,XCAFDoc_Area)
XCAFDoc_Area_swigregister = _XCAFDoc.XCAFDoc_Area_swigregister
XCAFDoc_Area_swigregister(XCAFDoc_Area)

def XCAFDoc_Area_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Area_GetID(*args)

def XCAFDoc_Area_Set(*args):
  """
    * Sets a value of volume

    :param vol:
    :type vol: float
    :rtype: None

    * Find, or create, an Area attribute and set its value

    :param label:
    :type label: TDF_Label &
    :param area:
    :type area: float
    :rtype: Handle_XCAFDoc_Area

    """
  return _XCAFDoc.XCAFDoc_Area_Set(*args)

def XCAFDoc_Area_Get(*args):
  """
    :rtype: float

    * Returns volume of area as argument and succes status returns false if no such attribute at the <label>

    :param label:
    :type label: TDF_Label &
    :param area:
    :type area: float &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_Area_Get(*args)

class Handle_XCAFDoc_Area(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Area_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Area(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Area_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Area.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Area_Nullify,None,Handle_XCAFDoc_Area)
Handle_XCAFDoc_Area.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Area_IsNull,None,Handle_XCAFDoc_Area)
Handle_XCAFDoc_Area.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Area_GetObject,None,Handle_XCAFDoc_Area)
Handle_XCAFDoc_Area._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Area__kill_pointed,None,Handle_XCAFDoc_Area)
Handle_XCAFDoc_Area_swigregister = _XCAFDoc.Handle_XCAFDoc_Area_swigregister
Handle_XCAFDoc_Area_swigregister(Handle_XCAFDoc_Area)

def Handle_XCAFDoc_Area_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Area_DownCast(*args)
Handle_XCAFDoc_Area_DownCast = _XCAFDoc.Handle_XCAFDoc_Area_DownCast

class XCAFDoc_Centroid(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * class methods =============

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Centroid_swiginit(self,_XCAFDoc.new_XCAFDoc_Centroid(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        * Find, or create, a Location attribute and set it's value the Location attribute is returned. Location methods ===============

        :param label:
        :type label: TDF_Label &
        :param pnt:
        :type pnt: gp_Pnt
        :rtype: Handle_XCAFDoc_Centroid

        :param pnt:
        :type pnt: gp_Pnt
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Centroid_Set(self, *args)

    def Get(*args):
        """
        :rtype: gp_Pnt

        * Returns point as argument returns false if no such attribute at the <label>

        :param label:
        :type label: TDF_Label &
        :param pnt:
        :type pnt: gp_Pnt
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

    Get = staticmethod(Get)
    def DumpToString(self):
        """DumpToString(XCAFDoc_Centroid self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Centroid_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Centroid self)"""
        return _XCAFDoc.XCAFDoc_Centroid__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Centroid self) -> Handle_XCAFDoc_Centroid"""
        return _XCAFDoc.XCAFDoc_Centroid_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Centroid.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid_Set,None,XCAFDoc_Centroid)
XCAFDoc_Centroid.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid_DumpToString,None,XCAFDoc_Centroid)
XCAFDoc_Centroid._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid__kill_pointed,None,XCAFDoc_Centroid)
XCAFDoc_Centroid.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid_GetHandle,None,XCAFDoc_Centroid)
XCAFDoc_Centroid_swigregister = _XCAFDoc.XCAFDoc_Centroid_swigregister
XCAFDoc_Centroid_swigregister(XCAFDoc_Centroid)

def XCAFDoc_Centroid_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

def XCAFDoc_Centroid_Get(*args):
  """
    :rtype: gp_Pnt

    * Returns point as argument returns false if no such attribute at the <label>

    :param label:
    :type label: TDF_Label &
    :param pnt:
    :type pnt: gp_Pnt
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

class Handle_XCAFDoc_Centroid(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Centroid_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Centroid(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Centroid_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Centroid.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Centroid_Nullify,None,Handle_XCAFDoc_Centroid)
Handle_XCAFDoc_Centroid.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Centroid_IsNull,None,Handle_XCAFDoc_Centroid)
Handle_XCAFDoc_Centroid.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Centroid_GetObject,None,Handle_XCAFDoc_Centroid)
Handle_XCAFDoc_Centroid._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Centroid__kill_pointed,None,Handle_XCAFDoc_Centroid)
Handle_XCAFDoc_Centroid_swigregister = _XCAFDoc.Handle_XCAFDoc_Centroid_swigregister
Handle_XCAFDoc_Centroid_swigregister(Handle_XCAFDoc_Centroid)

def Handle_XCAFDoc_Centroid_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast(*args)
Handle_XCAFDoc_Centroid_DownCast = _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast

class XCAFDoc_Color(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Color_swiginit(self,_XCAFDoc.new_XCAFDoc_Color(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Color_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        :param label:
        :type label: TDF_Label &
        :param C:
        :type C: Quantity_Color &
        :rtype: Handle_XCAFDoc_Color

        :param label:
        :type label: TDF_Label &
        :param C:
        :type C: Quantity_NameOfColor
        :rtype: Handle_XCAFDoc_Color

        * Find, or create, a Color attribute and set it's value the Color attribute is returned.

        :param label:
        :type label: TDF_Label &
        :param R:
        :type R: float
        :param G:
        :type G: float
        :param B:
        :type B: float
        :rtype: Handle_XCAFDoc_Color

        :param C:
        :type C: Quantity_Color &
        :rtype: None

        :param C:
        :type C: Quantity_NameOfColor
        :rtype: None

        :param R:
        :type R: float
        :param G:
        :type G: float
        :param B:
        :type B: float
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Color_Set(self, *args)

    def GetColor(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _XCAFDoc.XCAFDoc_Color_GetColor(self, *args)

    def GetNOC(self, *args):
        """
        :rtype: Quantity_NameOfColor

        """
        return _XCAFDoc.XCAFDoc_Color_GetNOC(self, *args)

    def GetRGB(self, *args):
        """
        * Returns True if there is a reference on the same label

        :param R:
        :type R: float &
        :param G:
        :type G: float &
        :param B:
        :type B: float &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Color_GetRGB(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Color self)"""
        return _XCAFDoc.XCAFDoc_Color__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Color self) -> Handle_XCAFDoc_Color"""
        return _XCAFDoc.XCAFDoc_Color_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Color.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Color_Set,None,XCAFDoc_Color)
XCAFDoc_Color.GetColor = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetColor,None,XCAFDoc_Color)
XCAFDoc_Color.GetNOC = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetNOC,None,XCAFDoc_Color)
XCAFDoc_Color.GetRGB = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetRGB,None,XCAFDoc_Color)
XCAFDoc_Color._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Color__kill_pointed,None,XCAFDoc_Color)
XCAFDoc_Color.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetHandle,None,XCAFDoc_Color)
XCAFDoc_Color_swigregister = _XCAFDoc.XCAFDoc_Color_swigregister
XCAFDoc_Color_swigregister(XCAFDoc_Color)

def XCAFDoc_Color_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Color_GetID(*args)

class Handle_XCAFDoc_Color(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Color_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Color(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Color_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Color.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Color_Nullify,None,Handle_XCAFDoc_Color)
Handle_XCAFDoc_Color.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Color_IsNull,None,Handle_XCAFDoc_Color)
Handle_XCAFDoc_Color.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Color_GetObject,None,Handle_XCAFDoc_Color)
Handle_XCAFDoc_Color._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Color__kill_pointed,None,Handle_XCAFDoc_Color)
Handle_XCAFDoc_Color_swigregister = _XCAFDoc.Handle_XCAFDoc_Color_swigregister
Handle_XCAFDoc_Color_swigregister(Handle_XCAFDoc_Color)

def Handle_XCAFDoc_Color_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Color_DownCast(*args)
Handle_XCAFDoc_Color_DownCast = _XCAFDoc.Handle_XCAFDoc_Color_DownCast

class XCAFDoc_ColorTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_ColorTool_swiginit(self,_XCAFDoc.new_XCAFDoc_ColorTool(*args))
    def Set(*args):
        """
        * Creates (if not exist) ColorTool.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

    Set = staticmethod(Set)
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

    GetID = staticmethod(GetID)
    def BaseLabel(self, *args):
        """
        * returns the label under which colors are stored

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_BaseLabel(self, *args)

    def ShapeTool(self, *args):
        """
        * Returns internal XCAFDoc_ShapeTool tool

        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_ShapeTool(self, *args)

    def IsColor(self, *args):
        """
        * Returns True if label belongs to a colortable and is a color definition

        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsColor(self, *args)

    def FindColor(self, *args):
        """
        * Finds a color definition in a colortable and returns its label if found Returns False if color is not found in colortable

        :param col:
        :type col: Quantity_Color &
        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        * Finds a color definition in a colortable and returns its label if found (or Null label else)

        :param col:
        :type col: Quantity_Color &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_FindColor(self, *args)

    def AddColor(self, *args):
        """
        * Adds a color definition to a colortable and returns its label (returns existing label if the same color is already defined)

        :param col:
        :type col: Quantity_Color &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_AddColor(self, *args)

    def RemoveColor(self, *args):
        """
        * Removes color from the colortable

        :param lab:
        :type lab: TDF_Label &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ColorTool_RemoveColor(self, *args)

    def GetColors(self, *args):
        """
        * Returns a sequence of colors currently stored in the colortable

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColors(self, *args)

    def SetColor(self, *args):
        """
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color defined by <colorL>. Color of shape is defined following way in dependance with type of color. If type of color is XCAFDoc_ColorGen - then this color defines default color for surfaces and curves. If for shape color with types XCAFDoc_ColorSurf or XCAFDoc_ColorCurv is specified then such color overrides generic color.

        :param L:
        :type L: TDF_Label &
        :param colorL:
        :type colorL: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: None

        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary

        :param L:
        :type L: TDF_Label &
        :param Color:
        :type Color: Quantity_Color &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: None

        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color defined by <colorL> Returns False if cannot find a label for shape S

        :param S:
        :type S: TopoDS_Shape &
        :param colorL:
        :type colorL: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: bool

        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary Returns False if cannot find a label for shape S

        :param S:
        :type S: TopoDS_Shape &
        :param Color:
        :type Color: Quantity_Color &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetColor(self, *args)

    def UnSetColor(self, *args):
        """
        * Removes a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color

        :param L:
        :type L: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: None

        * Removes a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color Returns True if such link existed

        :param S:
        :type S: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_UnSetColor(self, *args)

    def IsSet(self, *args):
        """
        * Returns True if label <L> has a color assignment of the type <type>

        :param L:
        :type L: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: bool

        * Returns True if label <L> has a color assignment of the type <type>

        :param S:
        :type S: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsSet(self, *args)

    def GetColor(self, *args):
        """
        * Returns color defined by label lab Returns False if the label is not in colortable or does not define a color

        :param lab:
        :type lab: TDF_Label &
        :param col:
        :type col: Quantity_Color &
        :rtype: bool

        * Returns label with color assigned to <L> as <type> Returns False if no such color is assigned

        :param L:
        :type L: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :param colorL:
        :type colorL: TDF_Label &
        :rtype: bool

        * Returns color assigned to <L> as <type> Returns False if no such color is assigned

        :param L:
        :type L: TDF_Label &
        :param type:
        :type type: XCAFDoc_ColorType
        :param color:
        :type color: Quantity_Color &
        :rtype: bool

        * Returns label with color assigned to <L> as <type> Returns False if no such color is assigned

        :param S:
        :type S: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :param colorL:
        :type colorL: TDF_Label &
        :rtype: bool

        * Returns color assigned to <L> as <type> Returns False if no such color is assigned

        :param S:
        :type S: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :param color:
        :type color: Quantity_Color &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColor(self, *args)

    def IsVisible(self, *args):
        """
        * Return True if object on this label is visible, False if invisible.

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsVisible(self, *args)

    def SetVisibility(self, *args):
        """
        * Set the visibility of object on label. Do nothing if there no any object. Set UAttribute with corresponding GUID.

        :param shapeLabel:
        :type shapeLabel: TDF_Label &
        :param isvisible: default value is Standard_True
        :type isvisible: bool
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetVisibility(self, *args)

    def SetInstanceColor(self, *args):
        """
        * Sets the color of component that styled with SHUO structure Returns False if no sush component found NOTE: create SHUO structeure if it is necessary and if <isCreateSHUO>

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :param color:
        :type color: Quantity_Color &
        :param isCreateSHUO: default value is Standard_True
        :type isCreateSHUO: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetInstanceColor(self, *args)

    def GetInstanceColor(self, *args):
        """
        * Gets the color of component that styled with SHUO structure Returns False if no sush component or color type

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param type:
        :type type: XCAFDoc_ColorType
        :param color:
        :type color: Quantity_Color &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetInstanceColor(self, *args)

    def IsInstanceVisible(self, *args):
        """
        * Gets the visibility status of component that styled with SHUO structure Returns False if no sush component

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsInstanceVisible(self, *args)

    def ReverseChainsOfTreeNodes(self, *args):
        """
        * Reverses order in chains of TreeNodes (from Last to First) under each Color Label since we became to use function ::Prepend() instead of ::Append() in method SetColor() for acceleration

        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_ReverseChainsOfTreeNodes(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_ColorTool self)"""
        return _XCAFDoc.XCAFDoc_ColorTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_ColorTool self) -> Handle_XCAFDoc_ColorTool"""
        return _XCAFDoc.XCAFDoc_ColorTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_ColorTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_BaseLabel,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_ShapeTool,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.FindColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_FindColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.AddColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_AddColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.RemoveColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_RemoveColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetColors = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetColors,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.UnSetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_UnSetColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsSet = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsSet,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsVisible = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsVisible,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetVisibility = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetVisibility,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetInstanceColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetInstanceColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetInstanceColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetInstanceColor,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsInstanceVisible = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsInstanceVisible,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.ReverseChainsOfTreeNodes = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_ReverseChainsOfTreeNodes,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool__kill_pointed,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetHandle,None,XCAFDoc_ColorTool)
XCAFDoc_ColorTool_swigregister = _XCAFDoc.XCAFDoc_ColorTool_swigregister
XCAFDoc_ColorTool_swigregister(XCAFDoc_ColorTool)

def XCAFDoc_ColorTool_Set(*args):
  """
    * Creates (if not exist) ColorTool.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_ColorTool

    """
  return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

def XCAFDoc_ColorTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

class Handle_XCAFDoc_ColorTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_ColorTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_ColorTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_ColorTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ColorTool_Nullify,None,Handle_XCAFDoc_ColorTool)
Handle_XCAFDoc_ColorTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ColorTool_IsNull,None,Handle_XCAFDoc_ColorTool)
Handle_XCAFDoc_ColorTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ColorTool_GetObject,None,Handle_XCAFDoc_ColorTool)
Handle_XCAFDoc_ColorTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ColorTool__kill_pointed,None,Handle_XCAFDoc_ColorTool)
Handle_XCAFDoc_ColorTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ColorTool_swigregister
Handle_XCAFDoc_ColorTool_swigregister(Handle_XCAFDoc_ColorTool)

def Handle_XCAFDoc_ColorTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast(*args)
Handle_XCAFDoc_ColorTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast

class XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: XCAFDoc_DataMapOfShapeLabel &
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_swiginit(self,_XCAFDoc.new_XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: XCAFDoc_DataMapOfShapeLabel &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel.Initialize = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Initialize,None,XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel)
XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel.Key = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Key,None,XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel)
XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel.Value = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_Value,None,XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel)
XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel__kill_pointed,None,XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel)
XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_swigregister = _XCAFDoc.XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_swigregister
XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel_swigregister(XCAFDoc_DataMapIteratorOfDataMapOfShapeLabel)

class XCAFDoc_DataMapNodeOfDataMapOfShapeLabel(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TDF_Label &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swiginit(self,_XCAFDoc.new_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel(*args))
    def Key(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_DataMapNodeOfDataMapOfShapeLabel self)"""
        return _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_DataMapNodeOfDataMapOfShapeLabel self) -> Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel"""
        return _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.Key = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_Key,None,XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.Value = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_Value,None,XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
XCAFDoc_DataMapNodeOfDataMapOfShapeLabel._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel__kill_pointed,None,XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_GetHandle,None,XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister = _XCAFDoc.XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister
XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister(XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)

class Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_Nullify,None,Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_IsNull,None,Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_GetObject,None,Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel__kill_pointed,None,Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister = _XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_swigregister(Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel)

def Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_DownCast(*args)
Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_DownCast = _XCAFDoc.Handle_XCAFDoc_DataMapNodeOfDataMapOfShapeLabel_DownCast

class XCAFDoc_DataMapOfShapeLabel(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_swiginit(self,_XCAFDoc.new_XCAFDoc_DataMapOfShapeLabel(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: XCAFDoc_DataMapOfShapeLabel &
        :rtype: XCAFDoc_DataMapOfShapeLabel

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: XCAFDoc_DataMapOfShapeLabel &
        :rtype: XCAFDoc_DataMapOfShapeLabel

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_DataMapOfShapeLabel self)"""
        return _XCAFDoc.XCAFDoc_DataMapOfShapeLabel__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DataMapOfShapeLabel.Assign = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Assign,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Set = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Set,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ReSize = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ReSize,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Clear = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Clear,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Bind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Bind,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.IsBound = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_IsBound,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.UnBind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_UnBind,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Find = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Find,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ChangeFind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeFind,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Find1 = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Find1,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ChangeFind1 = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeFind1,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel__kill_pointed,None,XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel_swigregister = _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_swigregister
XCAFDoc_DataMapOfShapeLabel_swigregister(XCAFDoc_DataMapOfShapeLabel)

class XCAFDoc_Datum(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Datum_swiginit(self,_XCAFDoc.new_XCAFDoc_Datum(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        :param label:
        :type label: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :rtype: Handle_XCAFDoc_Datum

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Datum_Set(self, *args)

    def GetName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetName(self, *args)

    def GetDescription(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetDescription(self, *args)

    def GetIdentification(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetIdentification(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Datum self)"""
        return _XCAFDoc.XCAFDoc_Datum__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Datum self) -> Handle_XCAFDoc_Datum"""
        return _XCAFDoc.XCAFDoc_Datum_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Datum.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_Set,None,XCAFDoc_Datum)
XCAFDoc_Datum.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetName,None,XCAFDoc_Datum)
XCAFDoc_Datum.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetDescription,None,XCAFDoc_Datum)
XCAFDoc_Datum.GetIdentification = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetIdentification,None,XCAFDoc_Datum)
XCAFDoc_Datum._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Datum__kill_pointed,None,XCAFDoc_Datum)
XCAFDoc_Datum.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetHandle,None,XCAFDoc_Datum)
XCAFDoc_Datum_swigregister = _XCAFDoc.XCAFDoc_Datum_swigregister
XCAFDoc_Datum_swigregister(XCAFDoc_Datum)

def XCAFDoc_Datum_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

class Handle_XCAFDoc_Datum(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Datum_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Datum(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Datum_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Datum.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Datum_Nullify,None,Handle_XCAFDoc_Datum)
Handle_XCAFDoc_Datum.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Datum_IsNull,None,Handle_XCAFDoc_Datum)
Handle_XCAFDoc_Datum.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Datum_GetObject,None,Handle_XCAFDoc_Datum)
Handle_XCAFDoc_Datum._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Datum__kill_pointed,None,Handle_XCAFDoc_Datum)
Handle_XCAFDoc_Datum_swigregister = _XCAFDoc.Handle_XCAFDoc_Datum_swigregister
Handle_XCAFDoc_Datum_swigregister(Handle_XCAFDoc_Datum)

def Handle_XCAFDoc_Datum_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Datum_DownCast(*args)
Handle_XCAFDoc_Datum_DownCast = _XCAFDoc.Handle_XCAFDoc_Datum_DownCast

class XCAFDoc_DimTol(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DimTol_swiginit(self,_XCAFDoc.new_XCAFDoc_DimTol(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        :param label:
        :type label: TDF_Label &
        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: Handle_XCAFDoc_DimTol

        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DimTol_Set(self, *args)

    def GetKind(self, *args):
        """
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetKind(self, *args)

    def GetVal(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetVal(self, *args)

    def GetName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetName(self, *args)

    def GetDescription(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetDescription(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_DimTol self)"""
        return _XCAFDoc.XCAFDoc_DimTol__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_DimTol self) -> Handle_XCAFDoc_DimTol"""
        return _XCAFDoc.XCAFDoc_DimTol_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DimTol.Set = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_Set,None,XCAFDoc_DimTol)
XCAFDoc_DimTol.GetKind = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetKind,None,XCAFDoc_DimTol)
XCAFDoc_DimTol.GetVal = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetVal,None,XCAFDoc_DimTol)
XCAFDoc_DimTol.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetName,None,XCAFDoc_DimTol)
XCAFDoc_DimTol.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetDescription,None,XCAFDoc_DimTol)
XCAFDoc_DimTol._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol__kill_pointed,None,XCAFDoc_DimTol)
XCAFDoc_DimTol.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetHandle,None,XCAFDoc_DimTol)
XCAFDoc_DimTol_swigregister = _XCAFDoc.XCAFDoc_DimTol_swigregister
XCAFDoc_DimTol_swigregister(XCAFDoc_DimTol)

def XCAFDoc_DimTol_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

class Handle_XCAFDoc_DimTol(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_DimTol_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_DimTol(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DimTol_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_DimTol.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTol_Nullify,None,Handle_XCAFDoc_DimTol)
Handle_XCAFDoc_DimTol.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTol_IsNull,None,Handle_XCAFDoc_DimTol)
Handle_XCAFDoc_DimTol.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTol_GetObject,None,Handle_XCAFDoc_DimTol)
Handle_XCAFDoc_DimTol._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTol__kill_pointed,None,Handle_XCAFDoc_DimTol)
Handle_XCAFDoc_DimTol_swigregister = _XCAFDoc.Handle_XCAFDoc_DimTol_swigregister
Handle_XCAFDoc_DimTol_swigregister(Handle_XCAFDoc_DimTol)

def Handle_XCAFDoc_DimTol_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast(*args)
Handle_XCAFDoc_DimTol_DownCast = _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast

class XCAFDoc_DimTolTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DimTolTool_swiginit(self,_XCAFDoc.new_XCAFDoc_DimTolTool(*args))
    def Set(*args):
        """
        * Creates (if not exist) DimTolTool.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Set(*args)

    Set = staticmethod(Set)
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetID(*args)

    GetID = staticmethod(GetID)
    def BaseLabel(self, *args):
        """
        * returns the label under which colors are stored

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_BaseLabel(self, *args)

    def ShapeTool(self, *args):
        """
        * Returns internal XCAFDoc_ShapeTool tool

        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_ShapeTool(self, *args)

    def IsDimTol(self, *args):
        """
        * Returns True if label belongs to a dimtoltable and is a DimTol definition

        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsDimTol(self, *args)

    def GetDimTolLabels(self, *args):
        """
        * Returns a sequence of D&GTs currently stored in the DGTtable

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDimTolLabels(self, *args)

    def FindDimTol(self, *args):
        """
        * Finds a dimtol definition in a DGTtable and returns its label if found Returns False if dimtol is not found in DGTtable

        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        * Finds a dimtol definition in a DGTtable and returns its label if found (or Null label else)

        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_FindDimTol(self, *args)

    def AddDimTol(self, *args):
        """
        * Adds a dimtol definition to a DGTtable and returns its label

        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddDimTol(self, *args)

    def SetDimTol(self, *args):
        """
        * Sets a link with GUID

        :param L:
        :type L: TDF_Label &
        :param DimTolL:
        :type DimTolL: TDF_Label &
        :rtype: None

        * Sets a link with GUID Adds a DimTol as necessary

        :param L:
        :type L: TDF_Label &
        :param kind:
        :type kind: int
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDimTol(self, *args)

    def GetRefShapeLabel(self, *args):
        """
        * Returns ShapeL defined for label DimTolL Returns False if the DimTolL is not in DGTtable

        :param DimTolL:
        :type DimTolL: TDF_Label &
        :param ShapeL:
        :type ShapeL: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefShapeLabel(self, *args)

    def GetRefDGTLabels(self, *args):
        """
        * Returns all DimTol labels defined for label ShapeL

        :param ShapeL:
        :type ShapeL: TDF_Label &
        :param DimTols:
        :type DimTols: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefDGTLabels(self, *args)

    def GetDimTol(self, *args):
        """
        * Returns dimtol assigned to <DimTolL> Returns False if no such dimtol is assigned

        :param DimTolL:
        :type DimTolL: TDF_Label &
        :param kind:
        :type kind: int &
        :param aVal:
        :type aVal: Handle_TColStd_HArray1OfReal &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDimTol(self, *args)

    def IsDatum(self, *args):
        """
        * Returns True if label belongs to a dimtoltable and is a Datum definition

        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsDatum(self, *args)

    def GetDatumLabels(self, *args):
        """
        * Returns a sequence of Datumss currently stored in the DGTtable

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatumLabels(self, *args)

    def FindDatum(self, *args):
        """
        * Finds a datum and returns its label if found

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_FindDatum(self, *args)

    def AddDatum(self, *args):
        """
        * Adds a datum definition to a DGTtable and returns its label

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddDatum(self, *args)

    def SetDatum(self, *args):
        """
        * Sets a link with GUID

        :param L:
        :type L: TDF_Label &
        :param DatumL:
        :type DatumL: TDF_Label &
        :rtype: None

        * Sets a link with GUID for Datum Adds a Datum as necessary Sets connection between Datum and Tolerance

        :param L:
        :type L: TDF_Label &
        :param TolerL:
        :type TolerL: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDatum(self, *args)

    def GetDatum(self, *args):
        """
        * Returns datum assigned to <DatumL> Returns False if no such datum is assigned

        :param DatumL:
        :type DatumL: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param anIdentification:
        :type anIdentification: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatum(self, *args)

    def GetDatumTolerLabels(self, *args):
        """
        * Returns all Datum labels defined for label DimTolL

        :param DimTolL:
        :type DimTolL: TDF_Label &
        :param Datums:
        :type Datums: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatumTolerLabels(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_DimTolTool self)"""
        return _XCAFDoc.XCAFDoc_DimTolTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_DimTolTool self) -> Handle_XCAFDoc_DimTolTool"""
        return _XCAFDoc.XCAFDoc_DimTolTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DimTolTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_BaseLabel,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_ShapeTool,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.IsDimTol = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_IsDimTol,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetDimTolLabels = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetDimTolLabels,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.FindDimTol = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_FindDimTol,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.AddDimTol = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_AddDimTol,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.SetDimTol = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_SetDimTol,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetRefShapeLabel = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetRefShapeLabel,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetRefDGTLabels = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetRefDGTLabels,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetDimTol = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetDimTol,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.IsDatum = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_IsDatum,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetDatumLabels = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetDatumLabels,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.FindDatum = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_FindDatum,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.AddDatum = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_AddDatum,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.SetDatum = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_SetDatum,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetDatum = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetDatum,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetDatumTolerLabels = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetDatumTolerLabels,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool__kill_pointed,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_DimTolTool_GetHandle,None,XCAFDoc_DimTolTool)
XCAFDoc_DimTolTool_swigregister = _XCAFDoc.XCAFDoc_DimTolTool_swigregister
XCAFDoc_DimTolTool_swigregister(XCAFDoc_DimTolTool)

def XCAFDoc_DimTolTool_Set(*args):
  """
    * Creates (if not exist) DimTolTool.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_DimTolTool

    """
  return _XCAFDoc.XCAFDoc_DimTolTool_Set(*args)

def XCAFDoc_DimTolTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_DimTolTool_GetID(*args)

class Handle_XCAFDoc_DimTolTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_DimTolTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_DimTolTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_DimTolTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool_Nullify,None,Handle_XCAFDoc_DimTolTool)
Handle_XCAFDoc_DimTolTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool_IsNull,None,Handle_XCAFDoc_DimTolTool)
Handle_XCAFDoc_DimTolTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool_GetObject,None,Handle_XCAFDoc_DimTolTool)
Handle_XCAFDoc_DimTolTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool__kill_pointed,None,Handle_XCAFDoc_DimTolTool)
Handle_XCAFDoc_DimTolTool_swigregister = _XCAFDoc.Handle_XCAFDoc_DimTolTool_swigregister
Handle_XCAFDoc_DimTolTool_swigregister(Handle_XCAFDoc_DimTolTool)

def Handle_XCAFDoc_DimTolTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast(*args)
Handle_XCAFDoc_DimTolTool_DownCast = _XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast

class XCAFDoc_DocumentTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Create (if not exist) DocumentTool attribute on 0.1 label if <IsAcces> is true, else on <L> label. This label will be returned by DocLabel(); If the attribute is already set it won't be reset on <L> even if <IsAcces> is false. ColorTool and ShapeTool attributes are also set by this method.

        :param L:
        :type L: TDF_Label &
        :param IsAcces: default value is Standard_True
        :type IsAcces: bool
        :rtype: Handle_XCAFDoc_DocumentTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

    Set = staticmethod(Set)
    def IsXCAFDocument(*args):
        """
        :param Doc:
        :type Doc: Handle_TDocStd_Document &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

    IsXCAFDocument = staticmethod(IsXCAFDocument)
    def DocLabel(*args):
        """
        * Returns label where the DocumentTool attribute is or 0.1 if DocumentTool is not yet set.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

    DocLabel = staticmethod(DocLabel)
    def ShapesLabel(*args):
        """
        * Returns sub-label of DocLabel() with tag 1.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

    ShapesLabel = staticmethod(ShapesLabel)
    def ColorsLabel(*args):
        """
        * Returns sub-label of DocLabel() with tag 2.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

    ColorsLabel = staticmethod(ColorsLabel)
    def LayersLabel(*args):
        """
        * Returns sub-label of DocLabel() with tag 3.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

    LayersLabel = staticmethod(LayersLabel)
    def DGTsLabel(*args):
        """
        * Returns sub-label of DocLabel() with tag 4.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

    DGTsLabel = staticmethod(DGTsLabel)
    def MaterialsLabel(*args):
        """
        * Returns sub-label of DocLabel() with tag 5.

        :param acces:
        :type acces: TDF_Label &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

    MaterialsLabel = staticmethod(MaterialsLabel)
    def ShapeTool(*args):
        """
        * Creates (if it does not exist) ShapeTool attribute on ShapesLabel().

        :param acces:
        :type acces: TDF_Label &
        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

    ShapeTool = staticmethod(ShapeTool)
    def ColorTool(*args):
        """
        * Creates (if it does not exist) ColorTool attribute on ColorsLabel().

        :param acces:
        :type acces: TDF_Label &
        :rtype: Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

    ColorTool = staticmethod(ColorTool)
    def LayerTool(*args):
        """
        * Creates (if it does not exist) LayerTool attribute on LayersLabel().

        :param acces:
        :type acces: TDF_Label &
        :rtype: Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

    LayerTool = staticmethod(LayerTool)
    def DimTolTool(*args):
        """
        * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :param acces:
        :type acces: TDF_Label &
        :rtype: Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

    DimTolTool = staticmethod(DimTolTool)
    def MaterialTool(*args):
        """
        * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :param acces:
        :type acces: TDF_Label &
        :rtype: Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

    MaterialTool = staticmethod(MaterialTool)
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_DocumentTool_swiginit(self,_XCAFDoc.new_XCAFDoc_DocumentTool(*args))
    def Init(self, *args):
        """
        * to be called when reading this attribute from file

        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Init(self, *args)

    def Destroy(self, *args):
        """
        * Unregisters the document holding this attribute from an internal global map of XDE documents.

        :rtype: void

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Destroy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_DocumentTool self)"""
        return _XCAFDoc.XCAFDoc_DocumentTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_DocumentTool self) -> Handle_XCAFDoc_DocumentTool"""
        return _XCAFDoc.XCAFDoc_DocumentTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_DocumentTool.Init = new_instancemethod(_XCAFDoc.XCAFDoc_DocumentTool_Init,None,XCAFDoc_DocumentTool)
XCAFDoc_DocumentTool.Destroy = new_instancemethod(_XCAFDoc.XCAFDoc_DocumentTool_Destroy,None,XCAFDoc_DocumentTool)
XCAFDoc_DocumentTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_DocumentTool__kill_pointed,None,XCAFDoc_DocumentTool)
XCAFDoc_DocumentTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_DocumentTool_GetHandle,None,XCAFDoc_DocumentTool)
XCAFDoc_DocumentTool_swigregister = _XCAFDoc.XCAFDoc_DocumentTool_swigregister
XCAFDoc_DocumentTool_swigregister(XCAFDoc_DocumentTool)

def XCAFDoc_DocumentTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

def XCAFDoc_DocumentTool_Set(*args):
  """
    * Create (if not exist) DocumentTool attribute on 0.1 label if <IsAcces> is true, else on <L> label. This label will be returned by DocLabel(); If the attribute is already set it won't be reset on <L> even if <IsAcces> is false. ColorTool and ShapeTool attributes are also set by this method.

    :param L:
    :type L: TDF_Label &
    :param IsAcces: default value is Standard_True
    :type IsAcces: bool
    :rtype: Handle_XCAFDoc_DocumentTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

def XCAFDoc_DocumentTool_IsXCAFDocument(*args):
  """
    :param Doc:
    :type Doc: Handle_TDocStd_Document &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

def XCAFDoc_DocumentTool_DocLabel(*args):
  """
    * Returns label where the DocumentTool attribute is or 0.1 if DocumentTool is not yet set.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

def XCAFDoc_DocumentTool_ShapesLabel(*args):
  """
    * Returns sub-label of DocLabel() with tag 1.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

def XCAFDoc_DocumentTool_ColorsLabel(*args):
  """
    * Returns sub-label of DocLabel() with tag 2.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

def XCAFDoc_DocumentTool_LayersLabel(*args):
  """
    * Returns sub-label of DocLabel() with tag 3.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

def XCAFDoc_DocumentTool_DGTsLabel(*args):
  """
    * Returns sub-label of DocLabel() with tag 4.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

def XCAFDoc_DocumentTool_MaterialsLabel(*args):
  """
    * Returns sub-label of DocLabel() with tag 5.

    :param acces:
    :type acces: TDF_Label &
    :rtype: TDF_Label

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

def XCAFDoc_DocumentTool_ShapeTool(*args):
  """
    * Creates (if it does not exist) ShapeTool attribute on ShapesLabel().

    :param acces:
    :type acces: TDF_Label &
    :rtype: Handle_XCAFDoc_ShapeTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

def XCAFDoc_DocumentTool_ColorTool(*args):
  """
    * Creates (if it does not exist) ColorTool attribute on ColorsLabel().

    :param acces:
    :type acces: TDF_Label &
    :rtype: Handle_XCAFDoc_ColorTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

def XCAFDoc_DocumentTool_LayerTool(*args):
  """
    * Creates (if it does not exist) LayerTool attribute on LayersLabel().

    :param acces:
    :type acces: TDF_Label &
    :rtype: Handle_XCAFDoc_LayerTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

def XCAFDoc_DocumentTool_DimTolTool(*args):
  """
    * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

    :param acces:
    :type acces: TDF_Label &
    :rtype: Handle_XCAFDoc_DimTolTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

def XCAFDoc_DocumentTool_MaterialTool(*args):
  """
    * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

    :param acces:
    :type acces: TDF_Label &
    :rtype: Handle_XCAFDoc_MaterialTool

    """
  return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

class Handle_XCAFDoc_DocumentTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_DocumentTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_DocumentTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_DocumentTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool_Nullify,None,Handle_XCAFDoc_DocumentTool)
Handle_XCAFDoc_DocumentTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool_IsNull,None,Handle_XCAFDoc_DocumentTool)
Handle_XCAFDoc_DocumentTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool_GetObject,None,Handle_XCAFDoc_DocumentTool)
Handle_XCAFDoc_DocumentTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool__kill_pointed,None,Handle_XCAFDoc_DocumentTool)
Handle_XCAFDoc_DocumentTool_swigregister = _XCAFDoc.Handle_XCAFDoc_DocumentTool_swigregister
Handle_XCAFDoc_DocumentTool_swigregister(Handle_XCAFDoc_DocumentTool)

def Handle_XCAFDoc_DocumentTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast(*args)
Handle_XCAFDoc_DocumentTool_DownCast = _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast

class XCAFDoc_GraphNode(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Find(*args):
        """
        * class methods working on the node =================================== Shortcut to search a Graph node attribute with default GraphID. Returns true if found.

        :param L:
        :type L: TDF_Label &
        :param G:
        :type G: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

    Find = staticmethod(Find)
    def Set(*args):
        """
        * Finds or Creates a GraphNode attribute on the label <L> with the default Graph ID, returned by the method <GetDefaultGraphID>. Returns the created/found GraphNode attribute.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_GraphNode

        * Finds or Creates a GraphNode attribute on the label <L>, with an explicit tree ID. <ExplicitGraphID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created GraphNode attribute.

        :param L:
        :type L: TDF_Label &
        :param ExplicitGraphID:
        :type ExplicitGraphID: Standard_GUID &
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

    Set = staticmethod(Set)
    def GetDefaultGraphID(*args):
        """
        * returns a default Graph ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================

        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

    GetDefaultGraphID = staticmethod(GetDefaultGraphID)
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_GraphNode_swiginit(self,_XCAFDoc.new_XCAFDoc_GraphNode(*args))
    def SetGraphID(self, *args):
        """
        :param explicitID:
        :type explicitID: Standard_GUID &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetGraphID(self, *args)

    def SetFather(self, *args):
        """
        * Set GraphNode <F> as father of me and returns index of <F> in Sequence that containing Fathers GraphNodes. return index of <F> from GraphNodeSequnece

        :param F:
        :type F: Handle_XCAFDoc_GraphNode &
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetFather(self, *args)

    def SetChild(self, *args):
        """
        * Set GraphNode <Ch> as child of me and returns index of <Ch> in Sequence that containing Children GraphNodes. return index of <Ch> from GraphNodeSequnece

        :param Ch:
        :type Ch: Handle_XCAFDoc_GraphNode &
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetChild(self, *args)

    def UnSetFather(self, *args):
        """
        * Remove <F> from Fathers GraphNodeSequence. and remove link between father and child.

        :param F:
        :type F: Handle_XCAFDoc_GraphNode &
        :rtype: None

        * Remove Father GraphNode by index from Fathers GraphNodeSequence. and remove link between father and child.

        :param Findex:
        :type Findex: int
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetFather(self, *args)

    def UnSetChild(self, *args):
        """
        * Remove <Ch> from GraphNodeSequence. and remove link between father and child.

        :param Ch:
        :type Ch: Handle_XCAFDoc_GraphNode &
        :rtype: None

        * Remove Child GraphNode by index from Children GraphNodeSequence. and remove link between father and child.

        :param Chindex:
        :type Chindex: int
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetChild(self, *args)

    def GetFather(self, *args):
        """
        * Return GraphNode by index from GraphNodeSequence.

        :param Findex:
        :type Findex: int
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetFather(self, *args)

    def GetChild(self, *args):
        """
        * Return GraphNode by index from GraphNodeSequence.

        :param Chindex:
        :type Chindex: int
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetChild(self, *args)

    def FatherIndex(self, *args):
        """
        * Return index of <F>, or zero if there is no such Graphnode.

        :param F:
        :type F: Handle_XCAFDoc_GraphNode &
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_FatherIndex(self, *args)

    def ChildIndex(self, *args):
        """
        * Return index of <Ch>, or zero if there is no such Graphnode.

        :param Ch:
        :type Ch: Handle_XCAFDoc_GraphNode &
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_ChildIndex(self, *args)

    def IsFather(self, *args):
        """
        * returns True if <self> is father of <Ch>.

        :param Ch:
        :type Ch: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsFather(self, *args)

    def IsChild(self, *args):
        """
        * returns True if <self> is child of <F>.

        :param F:
        :type F: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsChild(self, *args)

    def NbFathers(self, *args):
        """
        * return Number of Fathers GraphNodes.

        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbFathers(self, *args)

    def NbChildren(self, *args):
        """
        * return Number of Childrens GraphNodes. Implementation of Attribute methods: ===================================

        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbChildren(self, *args)

    def DumpToString(self):
        """DumpToString(XCAFDoc_GraphNode self) -> std::string"""
        return _XCAFDoc.XCAFDoc_GraphNode_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_GraphNode self)"""
        return _XCAFDoc.XCAFDoc_GraphNode__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_GraphNode self) -> Handle_XCAFDoc_GraphNode"""
        return _XCAFDoc.XCAFDoc_GraphNode_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_GraphNode.SetGraphID = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetGraphID,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.SetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetFather,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.SetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetChild,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.UnSetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_UnSetFather,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.UnSetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_UnSetChild,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.GetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_GetFather,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.GetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_GetChild,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.FatherIndex = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_FatherIndex,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.ChildIndex = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_ChildIndex,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.IsFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_IsFather,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.IsChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_IsChild,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.NbFathers = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_NbFathers,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.NbChildren = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_NbChildren,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_DumpToString,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode__kill_pointed,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_GetHandle,None,XCAFDoc_GraphNode)
XCAFDoc_GraphNode_swigregister = _XCAFDoc.XCAFDoc_GraphNode_swigregister
XCAFDoc_GraphNode_swigregister(XCAFDoc_GraphNode)

def XCAFDoc_GraphNode_Find(*args):
  """
    * class methods working on the node =================================== Shortcut to search a Graph node attribute with default GraphID. Returns true if found.

    :param L:
    :type L: TDF_Label &
    :param G:
    :type G: Handle_XCAFDoc_GraphNode &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

def XCAFDoc_GraphNode_Set(*args):
  """
    * Finds or Creates a GraphNode attribute on the label <L> with the default Graph ID, returned by the method <GetDefaultGraphID>. Returns the created/found GraphNode attribute.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_GraphNode

    * Finds or Creates a GraphNode attribute on the label <L>, with an explicit tree ID. <ExplicitGraphID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created GraphNode attribute.

    :param L:
    :type L: TDF_Label &
    :param ExplicitGraphID:
    :type ExplicitGraphID: Standard_GUID &
    :rtype: Handle_XCAFDoc_GraphNode

    """
  return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

def XCAFDoc_GraphNode_GetDefaultGraphID(*args):
  """
    * returns a default Graph ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================

    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

class Handle_XCAFDoc_GraphNode(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_GraphNode_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_GraphNode(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_GraphNode.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_GraphNode_Nullify,None,Handle_XCAFDoc_GraphNode)
Handle_XCAFDoc_GraphNode.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_GraphNode_IsNull,None,Handle_XCAFDoc_GraphNode)
Handle_XCAFDoc_GraphNode.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_GraphNode_GetObject,None,Handle_XCAFDoc_GraphNode)
Handle_XCAFDoc_GraphNode._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_GraphNode__kill_pointed,None,Handle_XCAFDoc_GraphNode)
Handle_XCAFDoc_GraphNode_swigregister = _XCAFDoc.Handle_XCAFDoc_GraphNode_swigregister
Handle_XCAFDoc_GraphNode_swigregister(Handle_XCAFDoc_GraphNode)

def Handle_XCAFDoc_GraphNode_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast(*args)
Handle_XCAFDoc_GraphNode_DownCast = _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast

class XCAFDoc_GraphNodeSequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_GraphNodeSequence_swiginit(self,_XCAFDoc.new_XCAFDoc_GraphNodeSequence(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: XCAFDoc_GraphNodeSequence &
        :rtype: XCAFDoc_GraphNodeSequence

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: XCAFDoc_GraphNodeSequence &
        :rtype: XCAFDoc_GraphNodeSequence

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_XCAFDoc_GraphNode &
        :rtype: None

        :param S:
        :type S: XCAFDoc_GraphNodeSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_XCAFDoc_GraphNode &
        :rtype: None

        :param S:
        :type S: XCAFDoc_GraphNodeSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_XCAFDoc_GraphNode &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: XCAFDoc_GraphNodeSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_XCAFDoc_GraphNode &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: XCAFDoc_GraphNodeSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: XCAFDoc_GraphNodeSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_XCAFDoc_GraphNode &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_GraphNodeSequence_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_GraphNodeSequence.Clear = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Clear,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Assign = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Assign,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Set = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Set,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Append = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Append,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Prepend = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Prepend,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.InsertBefore = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_InsertBefore,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.InsertAfter = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_InsertAfter,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.First = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_First,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Last = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Last,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Split = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Split,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Value = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Value,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.SetValue = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_SetValue,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.ChangeValue = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_ChangeValue,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Remove = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Remove,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence__kill_pointed,None,XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence_swigregister = _XCAFDoc.XCAFDoc_GraphNodeSequence_swigregister
XCAFDoc_GraphNodeSequence_swigregister(XCAFDoc_GraphNodeSequence)

class XCAFDoc_LayerTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_LayerTool_swiginit(self,_XCAFDoc.new_XCAFDoc_LayerTool(*args))
    def Set(*args):
        """
        * Creates (if not exist) LayerTool.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

    Set = staticmethod(Set)
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

    GetID = staticmethod(GetID)
    def BaseLabel(self, *args):
        """
        * returns the label under which Layers are stored

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_BaseLabel(self, *args)

    def ShapeTool(self, *args):
        """
        * Returns internal XCAFDoc_ShapeTool tool

        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_ShapeTool(self, *args)

    def IsLayer(self, *args):
        """
        * Returns True if label belongs to a Layertable and is a Layer definition

        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsLayer(self, *args)

    def GetLayer(self, *args):
        """
        * Returns Layer defined by label lab Returns False if the label is not in Layertable or does not define a Layer

        :param lab:
        :type lab: TDF_Label &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayer(self, *args)

    def FindLayer(self, *args):
        """
        * Finds a Layer definition in a Layertable and returns its label if found Returns False if Layer is not found in Layertable

        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        * Finds a Layer definition in a Layertable and returns its label if found (or Null label else)

        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_FindLayer(self, *args)

    def AddLayer(self, *args):
        """
        * Adds a Layer definition to a Layertable and returns its label (returns existing label if the same Layer is already defined)

        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_AddLayer(self, *args)

    def RemoveLayer(self, *args):
        """
        * Removes Layer from the Layertable

        :param lab:
        :type lab: TDF_Label &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_LayerTool_RemoveLayer(self, *args)

    def GetLayerLabels(self, *args):
        """
        * Returns a sequence of Layers currently stored in the Layertable

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayerLabels(self, *args)

    def GetShapesOfLayer(self, *args):
        """
        * Return sequanese of shape labels that assigned with layers to <ShLabels>.

        :param layerL:
        :type layerL: TDF_Label &
        :param ShLabels:
        :type ShLabels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetShapesOfLayer(self, *args)

    def IsVisible(self, *args):
        """
        * Return True if layer is visible, False if invisible.

        :param layerL:
        :type layerL: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsVisible(self, *args)

    def SetVisibility(self, *args):
        """
        * Set the visibility of layer. If layer is invisible when on it's layer will set UAttribute with corresponding GUID.

        :param layerL:
        :type layerL: TDF_Label &
        :param isvisible: default value is Standard_True
        :type isvisible: bool
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetVisibility(self, *args)

    def SetLayer(self, *args):
        """
        * Sets a link from label <L> to Layer defined by <LayerL> optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one.

        :param L:
        :type L: TDF_Label &
        :param LayerL:
        :type LayerL: TDF_Label &
        :param shapeInOneLayer: default value is Standard_False
        :type shapeInOneLayer: bool
        :rtype: None

        * Sets a link from label <L> to Layer <aLayer> in the Layertable Adds a Layer as necessary optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one.

        :param L:
        :type L: TDF_Label &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :param shapeInOneLayer: default value is Standard_False
        :type shapeInOneLayer: bool
        :rtype: None

        * Sets a link from label that containig shape <Sh> with layer that situated at label <LayerL>. optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one. return False if no such shape <Sh> or label <LayerL>

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param LayerL:
        :type LayerL: TDF_Label &
        :param shapeInOneLayer: default value is Standard_False
        :type shapeInOneLayer: bool
        :rtype: bool

        * Sets a link from label that containig shape <Sh> with layer <aLayer>. Add <aLayer> to LayerTable if nessesery. optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one. return False if no such shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :param shapeInOneLayer: default value is Standard_False
        :type shapeInOneLayer: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetLayer(self, *args)

    def UnSetLayers(self, *args):
        """
        * Removes a link from label <L> to all layers

        :param L:
        :type L: TDF_Label &
        :rtype: None

        * Remove link between shape <Sh> and all Layers at LayerTable. return False if no such shape <Sh> in XCAF Document.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetLayers(self, *args)

    def UnSetOneLayer(self, *args):
        """
        * Remove link from label <L> and Layer <aLayer>. returns False if no such layer.

        :param L:
        :type L: TDF_Label &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: bool

        * Remove link from label <L> and Layer <aLayerL>. returns False if <aLayerL> is not a layer label.

        :param L:
        :type L: TDF_Label &
        :param aLayerL:
        :type aLayerL: TDF_Label &
        :rtype: bool

        * Remove link between shape <Sh> and layer <aLayer>. returns False if no such layer <aLayer> or shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: bool

        * Remove link between shape <Sh> and layer <aLayerL>. returns False if no such layer <aLayerL> or shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayerL:
        :type aLayerL: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetOneLayer(self, *args)

    def IsSet(self, *args):
        """
        * Returns True if label <L> has a Layer assosiated with the <aLayer>.

        :param L:
        :type L: TDF_Label &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: bool

        * Returns True if label <L> has a Layer assosiated with the <aLayerL> label.

        :param L:
        :type L: TDF_Label &
        :param aLayerL:
        :type aLayerL: TDF_Label &
        :rtype: bool

        * Returns True if shape <Sh> has a Layer assosiated with the <aLayer>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayer:
        :type aLayer: TCollection_ExtendedString &
        :rtype: bool

        * Returns True if shape <Sh> has a Layer assosiated with the <aLayerL>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayerL:
        :type aLayerL: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsSet(self, *args)

    def GetLayers(self, *args):
        """
        * Return sequence of strings <aLayerS> that assosiated with label <L>.

        :param L:
        :type L: TDF_Label &
        :param aLayerS:
        :type aLayerS: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: bool

        * Return sequence of labels <aLayerSL> that assosiated with label <L>.

        :param L:
        :type L: TDF_Label &
        :param aLayerLS:
        :type aLayerLS: TDF_LabelSequence &
        :rtype: bool

        * Return sequence of strings that assosiated with label <L>.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_TColStd_HSequenceOfExtendedString

        * Return sequence of strings <aLayerS> that assosiated with shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayerS:
        :type aLayerS: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: bool

        * Return sequence of labels <aLayerLS> that assosiated with shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :param aLayerLS:
        :type aLayerLS: TDF_LabelSequence &
        :rtype: bool

        * Return sequence of strings that assosiated with shape <Sh>.

        :param Sh:
        :type Sh: TopoDS_Shape &
        :rtype: Handle_TColStd_HSequenceOfExtendedString

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayers(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_LayerTool self)"""
        return _XCAFDoc.XCAFDoc_LayerTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_LayerTool self) -> Handle_XCAFDoc_LayerTool"""
        return _XCAFDoc.XCAFDoc_LayerTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_LayerTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_BaseLabel,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_ShapeTool,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.FindLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_FindLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.AddLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_AddLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.RemoveLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_RemoveLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayerLabels = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayerLabels,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetShapesOfLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetShapesOfLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsVisible = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsVisible,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.SetVisibility = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_SetVisibility,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.SetLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_SetLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.UnSetLayers = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_UnSetLayers,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.UnSetOneLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_UnSetOneLayer,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsSet = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsSet,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayers = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayers,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool__kill_pointed,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetHandle,None,XCAFDoc_LayerTool)
XCAFDoc_LayerTool_swigregister = _XCAFDoc.XCAFDoc_LayerTool_swigregister
XCAFDoc_LayerTool_swigregister(XCAFDoc_LayerTool)

def XCAFDoc_LayerTool_Set(*args):
  """
    * Creates (if not exist) LayerTool.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_LayerTool

    """
  return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

def XCAFDoc_LayerTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

class Handle_XCAFDoc_LayerTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_LayerTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_LayerTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_LayerTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_LayerTool_Nullify,None,Handle_XCAFDoc_LayerTool)
Handle_XCAFDoc_LayerTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_LayerTool_IsNull,None,Handle_XCAFDoc_LayerTool)
Handle_XCAFDoc_LayerTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_LayerTool_GetObject,None,Handle_XCAFDoc_LayerTool)
Handle_XCAFDoc_LayerTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_LayerTool__kill_pointed,None,Handle_XCAFDoc_LayerTool)
Handle_XCAFDoc_LayerTool_swigregister = _XCAFDoc.Handle_XCAFDoc_LayerTool_swigregister
Handle_XCAFDoc_LayerTool_swigregister(Handle_XCAFDoc_LayerTool)

def Handle_XCAFDoc_LayerTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast(*args)
Handle_XCAFDoc_LayerTool_DownCast = _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast

class XCAFDoc_Location(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * class methods =============

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Location_swiginit(self,_XCAFDoc.new_XCAFDoc_Location(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Location_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        * Find, or create, a Location attribute and set it's value the Location attribute is returned. Location methods ===============

        :param label:
        :type label: TDF_Label &
        :param Loc:
        :type Loc: TopLoc_Location &
        :rtype: Handle_XCAFDoc_Location

        :param Loc:
        :type Loc: TopLoc_Location &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Location_Set(self, *args)

    def Get(self, *args):
        """
        * Returns True if there is a reference on the same label

        :rtype: TopLoc_Location

        """
        return _XCAFDoc.XCAFDoc_Location_Get(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Location self)"""
        return _XCAFDoc.XCAFDoc_Location__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Location self) -> Handle_XCAFDoc_Location"""
        return _XCAFDoc.XCAFDoc_Location_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Location.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Location_Set,None,XCAFDoc_Location)
XCAFDoc_Location.Get = new_instancemethod(_XCAFDoc.XCAFDoc_Location_Get,None,XCAFDoc_Location)
XCAFDoc_Location._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Location__kill_pointed,None,XCAFDoc_Location)
XCAFDoc_Location.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Location_GetHandle,None,XCAFDoc_Location)
XCAFDoc_Location_swigregister = _XCAFDoc.XCAFDoc_Location_swigregister
XCAFDoc_Location_swigregister(XCAFDoc_Location)

def XCAFDoc_Location_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Location_GetID(*args)

class Handle_XCAFDoc_Location(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Location_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Location(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Location_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Location.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Location_Nullify,None,Handle_XCAFDoc_Location)
Handle_XCAFDoc_Location.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Location_IsNull,None,Handle_XCAFDoc_Location)
Handle_XCAFDoc_Location.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Location_GetObject,None,Handle_XCAFDoc_Location)
Handle_XCAFDoc_Location._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Location__kill_pointed,None,Handle_XCAFDoc_Location)
Handle_XCAFDoc_Location_swigregister = _XCAFDoc.Handle_XCAFDoc_Location_swigregister
Handle_XCAFDoc_Location_swigregister(Handle_XCAFDoc_Location)

def Handle_XCAFDoc_Location_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Location_DownCast(*args)
Handle_XCAFDoc_Location_DownCast = _XCAFDoc.Handle_XCAFDoc_Location_DownCast

class XCAFDoc_Material(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Material_swiginit(self,_XCAFDoc.new_XCAFDoc_Material(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Material_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        :param label:
        :type label: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aDensity:
        :type aDensity: float
        :param aDensName:
        :type aDensName: Handle_TCollection_HAsciiString &
        :param aDensValType:
        :type aDensValType: Handle_TCollection_HAsciiString &
        :rtype: Handle_XCAFDoc_Material

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aDensity:
        :type aDensity: float
        :param aDensName:
        :type aDensName: Handle_TCollection_HAsciiString &
        :param aDensValType:
        :type aDensValType: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_Material_Set(self, *args)

    def GetName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetName(self, *args)

    def GetDescription(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDescription(self, *args)

    def GetDensity(self, *args):
        """
        :rtype: float

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensity(self, *args)

    def GetDensName(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensName(self, *args)

    def GetDensValType(self, *args):
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensValType(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Material self)"""
        return _XCAFDoc.XCAFDoc_Material__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Material self) -> Handle_XCAFDoc_Material"""
        return _XCAFDoc.XCAFDoc_Material_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Material.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Material_Set,None,XCAFDoc_Material)
XCAFDoc_Material.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetName,None,XCAFDoc_Material)
XCAFDoc_Material.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDescription,None,XCAFDoc_Material)
XCAFDoc_Material.GetDensity = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensity,None,XCAFDoc_Material)
XCAFDoc_Material.GetDensName = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensName,None,XCAFDoc_Material)
XCAFDoc_Material.GetDensValType = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensValType,None,XCAFDoc_Material)
XCAFDoc_Material._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Material__kill_pointed,None,XCAFDoc_Material)
XCAFDoc_Material.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetHandle,None,XCAFDoc_Material)
XCAFDoc_Material_swigregister = _XCAFDoc.XCAFDoc_Material_swigregister
XCAFDoc_Material_swigregister(XCAFDoc_Material)

def XCAFDoc_Material_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Material_GetID(*args)

class Handle_XCAFDoc_Material(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Material_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Material(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Material_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Material.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Material_Nullify,None,Handle_XCAFDoc_Material)
Handle_XCAFDoc_Material.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Material_IsNull,None,Handle_XCAFDoc_Material)
Handle_XCAFDoc_Material.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Material_GetObject,None,Handle_XCAFDoc_Material)
Handle_XCAFDoc_Material._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Material__kill_pointed,None,Handle_XCAFDoc_Material)
Handle_XCAFDoc_Material_swigregister = _XCAFDoc.Handle_XCAFDoc_Material_swigregister
Handle_XCAFDoc_Material_swigregister(Handle_XCAFDoc_Material)

def Handle_XCAFDoc_Material_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Material_DownCast(*args)
Handle_XCAFDoc_Material_DownCast = _XCAFDoc.Handle_XCAFDoc_Material_DownCast

class XCAFDoc_MaterialTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_MaterialTool_swiginit(self,_XCAFDoc.new_XCAFDoc_MaterialTool(*args))
    def Set(*args):
        """
        * Creates (if not exist) MaterialTool.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

    Set = staticmethod(Set)
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

    GetID = staticmethod(GetID)
    def BaseLabel(self, *args):
        """
        * returns the label under which colors are stored

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_BaseLabel(self, *args)

    def ShapeTool(self, *args):
        """
        * Returns internal XCAFDoc_ShapeTool tool

        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_ShapeTool(self, *args)

    def IsMaterial(self, *args):
        """
        * Returns True if label belongs to a material table and is a Material definition

        :param lab:
        :type lab: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_IsMaterial(self, *args)

    def GetMaterialLabels(self, *args):
        """
        * Returns a sequence of materials currently stored in the material table

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterialLabels(self, *args)

    def AddMaterial(self, *args):
        """
        * Adds a Material definition to a table and returns its label

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aDensity:
        :type aDensity: float
        :param aDensName:
        :type aDensName: Handle_TCollection_HAsciiString &
        :param aDensValType:
        :type aDensValType: Handle_TCollection_HAsciiString &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_AddMaterial(self, *args)

    def SetMaterial(self, *args):
        """
        * Sets a link with GUID

        :param L:
        :type L: TDF_Label &
        :param MatL:
        :type MatL: TDF_Label &
        :rtype: None

        * Sets a link with GUID Adds a Material as necessary

        :param L:
        :type L: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aDensity:
        :type aDensity: float
        :param aDensName:
        :type aDensName: Handle_TCollection_HAsciiString &
        :param aDensValType:
        :type aDensValType: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_SetMaterial(self, *args)

    def GetMaterial(self, *args):
        """
        * Returns Material assigned to <MatL> Returns False if no such Material is assigned

        :param MatL:
        :type MatL: TDF_Label &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aDescription:
        :type aDescription: Handle_TCollection_HAsciiString &
        :param aDensity:
        :type aDensity: float &
        :param aDensName:
        :type aDensName: Handle_TCollection_HAsciiString &
        :param aDensValType:
        :type aDensValType: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterial(self, *args)

    def GetDensityForShape(*args):
        """
        * Find referred material and return density from it if no material --> return 0

        :param ShapeL:
        :type ShapeL: TDF_Label &
        :rtype: float

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

    GetDensityForShape = staticmethod(GetDensityForShape)
    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_MaterialTool self)"""
        return _XCAFDoc.XCAFDoc_MaterialTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_MaterialTool self) -> Handle_XCAFDoc_MaterialTool"""
        return _XCAFDoc.XCAFDoc_MaterialTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_MaterialTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_BaseLabel,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_ShapeTool,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.IsMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_IsMaterial,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.GetMaterialLabels = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_GetMaterialLabels,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.AddMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_AddMaterial,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.SetMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_SetMaterial,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.GetMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_GetMaterial,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool__kill_pointed,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_GetHandle,None,XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool_swigregister = _XCAFDoc.XCAFDoc_MaterialTool_swigregister
XCAFDoc_MaterialTool_swigregister(XCAFDoc_MaterialTool)

def XCAFDoc_MaterialTool_Set(*args):
  """
    * Creates (if not exist) MaterialTool.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_MaterialTool

    """
  return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

def XCAFDoc_MaterialTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

def XCAFDoc_MaterialTool_GetDensityForShape(*args):
  """
    * Find referred material and return density from it if no material --> return 0

    :param ShapeL:
    :type ShapeL: TDF_Label &
    :rtype: float

    """
  return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

class Handle_XCAFDoc_MaterialTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_MaterialTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_MaterialTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_MaterialTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool_Nullify,None,Handle_XCAFDoc_MaterialTool)
Handle_XCAFDoc_MaterialTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool_IsNull,None,Handle_XCAFDoc_MaterialTool)
Handle_XCAFDoc_MaterialTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool_GetObject,None,Handle_XCAFDoc_MaterialTool)
Handle_XCAFDoc_MaterialTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool__kill_pointed,None,Handle_XCAFDoc_MaterialTool)
Handle_XCAFDoc_MaterialTool_swigregister = _XCAFDoc.Handle_XCAFDoc_MaterialTool_swigregister
Handle_XCAFDoc_MaterialTool_swigregister(Handle_XCAFDoc_MaterialTool)

def Handle_XCAFDoc_MaterialTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast(*args)
Handle_XCAFDoc_MaterialTool_DownCast = _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast

class XCAFDoc_SequenceNodeOfGraphNodeSequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_XCAFDoc_GraphNode &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_swiginit(self,_XCAFDoc.new_XCAFDoc_SequenceNodeOfGraphNodeSequence(*args))
    def Value(self, *args):
        """
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_SequenceNodeOfGraphNodeSequence self)"""
        return _XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_SequenceNodeOfGraphNodeSequence self) -> Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence"""
        return _XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_SequenceNodeOfGraphNodeSequence.Value = new_instancemethod(_XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_Value,None,XCAFDoc_SequenceNodeOfGraphNodeSequence)
XCAFDoc_SequenceNodeOfGraphNodeSequence._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence__kill_pointed,None,XCAFDoc_SequenceNodeOfGraphNodeSequence)
XCAFDoc_SequenceNodeOfGraphNodeSequence.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_GetHandle,None,XCAFDoc_SequenceNodeOfGraphNodeSequence)
XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister = _XCAFDoc.XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister
XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister(XCAFDoc_SequenceNodeOfGraphNodeSequence)

class Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_Nullify,None,Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence)
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_IsNull,None,Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence)
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_GetObject,None,Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence)
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence__kill_pointed,None,Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence)
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister = _XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_swigregister(Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence)

def Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_DownCast(*args)
Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_DownCast = _XCAFDoc.Handle_XCAFDoc_SequenceNodeOfGraphNodeSequence_DownCast

class XCAFDoc_ShapeMapTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_ShapeMapTool

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

    Set = staticmethod(Set)
    def __init__(self, *args): 
        """
        * Creates an empty tool

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_ShapeMapTool_swiginit(self,_XCAFDoc.new_XCAFDoc_ShapeMapTool(*args))
    def IsSubShape(self, *args):
        """
        * Checks whether shape <sub> is subshape of shape stored on label shapeL

        :param sub:
        :type sub: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_IsSubShape(self, *args)

    def SetShape(self, *args):
        """
        * Sets representation (TopoDS_Shape) for top-level shape

        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_SetShape(self, *args)

    def GetMap(self, *args):
        """
        :rtype: TopTools_IndexedMapOfShape

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetMap(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_ShapeMapTool self)"""
        return _XCAFDoc.XCAFDoc_ShapeMapTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_ShapeMapTool self) -> Handle_XCAFDoc_ShapeMapTool"""
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_ShapeMapTool.IsSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_IsSubShape,None,XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool.SetShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_SetShape,None,XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool.GetMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_GetMap,None,XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool__kill_pointed,None,XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_GetHandle,None,XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool_swigregister = _XCAFDoc.XCAFDoc_ShapeMapTool_swigregister
XCAFDoc_ShapeMapTool_swigregister(XCAFDoc_ShapeMapTool)

def XCAFDoc_ShapeMapTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

def XCAFDoc_ShapeMapTool_Set(*args):
  """
    * Create (if not exist) ShapeTool from XCAFDoc on <L>.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_ShapeMapTool

    """
  return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

class Handle_XCAFDoc_ShapeMapTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_ShapeMapTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_ShapeMapTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Nullify,None,Handle_XCAFDoc_ShapeMapTool)
Handle_XCAFDoc_ShapeMapTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsNull,None,Handle_XCAFDoc_ShapeMapTool)
Handle_XCAFDoc_ShapeMapTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool_GetObject,None,Handle_XCAFDoc_ShapeMapTool)
Handle_XCAFDoc_ShapeMapTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool__kill_pointed,None,Handle_XCAFDoc_ShapeMapTool)
Handle_XCAFDoc_ShapeMapTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_swigregister
Handle_XCAFDoc_ShapeMapTool_swigregister(Handle_XCAFDoc_ShapeMapTool)

def Handle_XCAFDoc_ShapeMapTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast(*args)
Handle_XCAFDoc_ShapeMapTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast

class XCAFDoc_ShapeTool(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :param L:
        :type L: TDF_Label &
        :rtype: Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

    Set = staticmethod(Set)
    def __init__(self, *args): 
        """
        * Creates an empty tool Creates a tool to work with a document <Doc> Attaches to label XCAFDoc::LabelShapes()

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_ShapeTool_swiginit(self,_XCAFDoc.new_XCAFDoc_ShapeTool(*args))
    def IsTopLevel(self, *args):
        """
        * Returns True if the label is a label of top-level shape, as opposed to component of assembly or subshape

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsTopLevel(self, *args)

    def IsFree(*args):
        """
        * Returns True if the label is not used by any assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True 	 	 (There is no Father TreeNode on this <L>)

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

    IsFree = staticmethod(IsFree)
    def IsShape(*args):
        """
        * Returns True if the label represents a shape (simple shape, assembly or reference)

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

    IsShape = staticmethod(IsShape)
    def IsSimpleShape(*args):
        """
        * Returns True if the label is a label of simple shape

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

    IsSimpleShape = staticmethod(IsSimpleShape)
    def IsReference(*args):
        """
        * Return true if <L> is a located instance of other shape i.e. reference

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

    IsReference = staticmethod(IsReference)
    def IsAssembly(*args):
        """
        * Returns True if the label is a label of assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

    IsAssembly = staticmethod(IsAssembly)
    def IsComponent(*args):
        """
        * Return true if <L> is reference serving as component of assembly

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

    IsComponent = staticmethod(IsComponent)
    def IsCompound(*args):
        """
        * Returns True if the label is a label of compound, i.e. contains some sublabels This is relevant only if IsShape() is True

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

    IsCompound = staticmethod(IsCompound)
    def IsSubShape(self, *args):
        """
        * Return true if <L> is subshape of the top-level shape

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        * Checks whether shape <sub> is subshape of shape stored on label shapeL

        :param shapeL:
        :type shapeL: TDF_Label &
        :param sub:
        :type sub: TopoDS_Shape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSubShape(self, *args)

    def SearchUsingMap(self, *args):
        """
        :param S:
        :type S: TopoDS_Shape &
        :param L:
        :type L: TDF_Label &
        :param findWithoutLoc:
        :type findWithoutLoc: bool
        :param findSubshape:
        :type findSubshape: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SearchUsingMap(self, *args)

    def Search(self, *args):
        """
        * General tool to find a (sub) shape in the document * If findInstance is True, and S has a non-null location, first tries to find the shape among the top-level shapes with this location * If not found, and findComponent is True, tries to find the shape among the components of assemblies * If not found, tries to find the shape without location among top-level shapes * If not found and findSubshape is True, tries to find a shape as a subshape of top-level simple shapes Returns False if nothing is found

        :param S:
        :type S: TopoDS_Shape &
        :param L:
        :type L: TDF_Label &
        :param findInstance: default value is Standard_True
        :type findInstance: bool
        :param findComponent: default value is Standard_True
        :type findComponent: bool
        :param findSubshape: default value is Standard_True
        :type findSubshape: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Search(self, *args)

    def FindShape(self, *args):
        """
        * Returns the label corresponding to shape S (searches among top-level shapes, not including subcomponents of assemblies) If findInstance is False (default), searches for the non-located shape (i.e. among original shapes) If findInstance is True, searches for the shape with the same location, including shape instances Return True if <S> is found.

        :param S:
        :type S: TopoDS_Shape &
        :param L:
        :type L: TDF_Label &
        :param findInstance: default value is Standard_False
        :type findInstance: bool
        :rtype: bool

        * Does the same as previous method Returns Null label if not found

        :param S:
        :type S: TopoDS_Shape &
        :param findInstance: default value is Standard_False
        :type findInstance: bool
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindShape(self, *args)

    def GetShape(*args):
        """
        * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns False if label does not contain shape

        :param L:
        :type L: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns Null shape if label does not contain shape

        :param L:
        :type L: TDF_Label &
        :rtype: TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

    GetShape = staticmethod(GetShape)
    def NewShape(self, *args):
        """
        * Creates new (empty) top-level shape. Initially it holds empty TopoDS_Compound

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NewShape(self, *args)

    def SetShape(self, *args):
        """
        * Sets representation (TopoDS_Shape) for top-level shape

        :param L:
        :type L: TDF_Label &
        :param S:
        :type S: TopoDS_Shape &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetShape(self, *args)

    def AddShape(self, *args):
        """
        * Adds a new top-level (creates and returns a new label) If makeAssembly is True, treats TopAbs_COMPOUND shapes as assemblies (creates assembly structure). NOTE: <makePrepare> replace components without location in assmebly by located components to avoid some problems. If AutoNaming() is True then automatically attaches names.

        :param S:
        :type S: TopoDS_Shape &
        :param makeAssembly: default value is Standard_True
        :type makeAssembly: bool
        :param makePrepare: default value is Standard_True
        :type makePrepare: bool
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddShape(self, *args)

    def RemoveShape(self, *args):
        """
        * Removes shape (whole label and all its sublabels) If removeCompletely is true, removes complete shape If removeCompletely is false, removes instance(location) only Returns False (and does nothing) if shape is not free or is not top-level shape

        :param L:
        :type L: TDF_Label &
        :param removeCompletely: default value is Standard_True
        :type removeCompletely: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveShape(self, *args)

    def Init(self, *args):
        """
        * set hasComponents into false

        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Init(self, *args)

    def SetAutoNaming(*args):
        """
        * Sets auto-naming mode to <V>. If True then for added shapes, links, assemblies and SHUO's, the TDataStd_Name attribute is automatically added. For shapes it contains a shape type (e.g. 'SOLID', 'SHELL', etc); for links it has a form '=>[0:1:1:2]' (where a tag is a label containing a shape without a location); for assemblies it is 'ASSEMBLY', and 'SHUO' for SHUO's. This setting is global; it cannot be made a member function as it is used by static methods as well. By default, auto-naming is enabled. See also AutoNaming().

        :param V:
        :type V: bool
        :rtype: void

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

    SetAutoNaming = staticmethod(SetAutoNaming)
    def AutoNaming(*args):
        """
        * Returns current auto-naming mode. See SetAutoNaming() for description.

        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

    AutoNaming = staticmethod(AutoNaming)
    def ComputeShapes(self, *args):
        """
        * recursive

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeShapes(self, *args)

    def ComputeSimpleShapes(self, *args):
        """
        * Compute a sequence of simple shapes

        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeSimpleShapes(self, *args)

    def GetShapes(self, *args):
        """
        * Returns a sequence of all top-level shapes

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShapes(self, *args)

    def GetFreeShapes(self, *args):
        """
        * Returns a sequence of all top-level shapes which are free (i.e. not referred by any other)

        :param FreeLabels:
        :type FreeLabels: TDF_LabelSequence &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetFreeShapes(self, *args)

    def GetUsers(*args):
        """
        * Returns list of labels which refer shape L as component Returns number of users (0 if shape is free)

        :param L:
        :type L: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :param getsubchilds: default value is Standard_False
        :type getsubchilds: bool
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

    GetUsers = staticmethod(GetUsers)
    def GetLocation(*args):
        """
        * Returns location of instance

        :param L:
        :type L: TDF_Label &
        :rtype: TopLoc_Location

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

    GetLocation = staticmethod(GetLocation)
    def GetReferredShape(*args):
        """
        * Returns label which corresponds to a shape referred by L Returns False if label is not reference

        :param L:
        :type L: TDF_Label &
        :param Label:
        :type Label: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

    GetReferredShape = staticmethod(GetReferredShape)
    def NbComponents(*args):
        """
        * Returns number of Assembles components

        :param L:
        :type L: TDF_Label &
        :param getsubchilds: default value is Standard_False
        :type getsubchilds: bool
        :rtype: int

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

    NbComponents = staticmethod(NbComponents)
    def GetComponents(*args):
        """
        * Returns list of components of assembly Returns False if label is not assembly

        :param L:
        :type L: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :param getsubchilds: default value is Standard_False
        :type getsubchilds: bool
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

    GetComponents = staticmethod(GetComponents)
    def AddComponent(self, *args):
        """
        * Adds a component given by its label and location to the assembly Note: assembly must be IsAssembly() or IsSimpleShape()

        :param assembly:
        :type assembly: TDF_Label &
        :param comp:
        :type comp: TDF_Label &
        :param Loc:
        :type Loc: TopLoc_Location &
        :rtype: TDF_Label

        * Adds a shape (located) as a component to the assembly If necessary, creates an additional top-level shape for component and return the Label of component. If expand is True and component is Compound, it will be created as assembly also Note: assembly must be IsAssembly() or IsSimpleShape()

        :param assembly:
        :type assembly: TDF_Label &
        :param comp:
        :type comp: TopoDS_Shape &
        :param expand: default value is Standard_False
        :type expand: bool
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddComponent(self, *args)

    def RemoveComponent(self, *args):
        """
        * Removes a component from its assembly

        :param comp:
        :type comp: TDF_Label &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveComponent(self, *args)

    def UpdateAssembly(self, *args):
        """
        * Update an assembly at label <L>

        :param L:
        :type L: TDF_Label &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_UpdateAssembly(self, *args)

    def FindSubShape(self, *args):
        """
        * Finds a label for subshape <sub> of shape stored on label shapeL Returns Null label if it is not found

        :param shapeL:
        :type shapeL: TDF_Label &
        :param sub:
        :type sub: TopoDS_Shape &
        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSubShape(self, *args)

    def AddSubShape(self, *args):
        """
        * Adds a label for subshape <sub> of shape stored on label shapeL Returns Null label if it is not subshape

        :param shapeL:
        :type shapeL: TDF_Label &
        :param sub:
        :type sub: TopoDS_Shape &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddSubShape(self, *args)

    def FindMainShapeUsingMap(self, *args):
        """
        :param sub:
        :type sub: TopoDS_Shape &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShapeUsingMap(self, *args)

    def FindMainShape(self, *args):
        """
        * Performs a search among top-level shapes to find the shape containing <sub> as subshape Checks only simple shapes, and returns the first found label (which should be the only one for valid model)

        :param sub:
        :type sub: TopoDS_Shape &
        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShape(self, *args)

    def GetSubShapes(*args):
        """
        * Returns list of labels identifying subshapes of the given shape Returns False if no subshapes are placed on that label

        :param L:
        :type L: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

    GetSubShapes = staticmethod(GetSubShapes)
    def BaseLabel(self, *args):
        """
        * returns the label under which shapes are stored

        :rtype: TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_BaseLabel(self, *args)

    def Dump(self, *args):
        """
        :param deep: default value is Standard_False
        :type deep: bool
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Dump(self, *args)

    def DumpShape(*args):
        """
        * Print in cout type of shape found on <L> label and the entry of <L>, with <level> tabs before. If <deep>, print also TShape and Location addresses

        :param L:
        :type L: TDF_Label &
        :param level: default value is 0
        :type level: int
        :param deep: default value is Standard_False
        :type deep: bool
        :rtype: void

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

    DumpShape = staticmethod(DumpShape)
    def IsExternRef(*args):
        """
        * Returns True if the label is a label of external references, i.e. there are some reference on the no-step files, which are described in document only their names

        :param L:
        :type L: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

    IsExternRef = staticmethod(IsExternRef)
    def SetExternRefs(self, *args):
        """
        * Sets the names of references on the no-step files

        :param SHAS:
        :type SHAS: TColStd_SequenceOfHAsciiString &
        :rtype: TDF_Label

        * Sets the names of references on the no-step files

        :param L:
        :type L: TDF_Label &
        :param SHAS:
        :type SHAS: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetExternRefs(self, *args)

    def GetExternRefs(*args):
        """
        * Gets the names of references on the no-step files

        :param L:
        :type L: TDF_Label &
        :param SHAS:
        :type SHAS: TColStd_SequenceOfHAsciiString &
        :rtype: void

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

    GetExternRefs = staticmethod(GetExternRefs)
    def SetSHUO(self, *args):
        """
        * Sets the SHUO structure between upper_usage and next_usage create multy-level (if number of labels > 2) SHUO from first to last Initialise out <MainSHUOAttr> by main upper_usage SHUO attribute. Returns False if some of labels in not component label

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :param MainSHUOAttr:
        :type MainSHUOAttr: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetSHUO(self, *args)

    def GetSHUO(*args):
        """
        * Returns founded SHUO GraphNode attribute <aSHUOAttr> Returns false in other case

        :param SHUOLabel:
        :type SHUOLabel: TDF_Label &
        :param aSHUOAttr:
        :type aSHUOAttr: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

    GetSHUO = staticmethod(GetSHUO)
    def GetAllComponentSHUO(*args):
        """
        * Returns founded SHUO GraphNodes of indicated component Returns false in other case

        :param CompLabel:
        :type CompLabel: TDF_Label &
        :param SHUOAttrs:
        :type SHUOAttrs: TDF_AttributeSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

    GetAllComponentSHUO = staticmethod(GetAllComponentSHUO)
    def GetSHUOUpperUsage(*args):
        """
        * Returns the sequence of labels of SHUO attributes, which is upper_usage for this next_usage SHUO attribute   (that indicated by label) NOTE: returns upper_usages only on one level (not recurse) NOTE: do not clear the sequence before filling

        :param NextUsageL:
        :type NextUsageL: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

    GetSHUOUpperUsage = staticmethod(GetSHUOUpperUsage)
    def GetSHUONextUsage(*args):
        """
        * Returns the sequence of labels of SHUO attributes, which is next_usage for this upper_usage SHUO attribute   (that indicated by label) NOTE: returns next_usages only on one level (not recurse) NOTE: do not clear the sequence before filling

        :param UpperUsageL:
        :type UpperUsageL: TDF_Label &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

    GetSHUONextUsage = staticmethod(GetSHUONextUsage)
    def RemoveSHUO(self, *args):
        """
        * Remove SHUO from component sublabel,  remove all dependencies on other SHUO. Returns False if cannot remove SHUO dependencies. NOTE: remove any styles that associated with this SHUO.

        :param SHUOLabel:
        :type SHUOLabel: TDF_Label &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveSHUO(self, *args)

    def FindComponent(self, *args):
        """
        * Serach the path of labels in the document, that corresponds the component from any assembly Try to search the sequence of labels with location that produce this shape as component of any assembly NOTE: Clear sequence of labels before filling

        :param theShape:
        :type theShape: TopoDS_Shape &
        :param Labels:
        :type Labels: TDF_LabelSequence &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindComponent(self, *args)

    def GetSHUOInstance(self, *args):
        """
        * Search for the component shape that styled by shuo Returns null shape if no any shape is found.

        :param theSHUO:
        :type theSHUO: Handle_XCAFDoc_GraphNode &
        :rtype: TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOInstance(self, *args)

    def SetInstanceSHUO(self, *args):
        """
        * Search for the component shape by labelks path and set SHUO structure for founded label structure Returns null attribute if no component in any assembly found.

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetInstanceSHUO(self, *args)

    def GetAllSHUOInstances(self, *args):
        """
        * Seaching for component shapes that styled by shuo Returns empty sequence of shape if no any shape is found.

        :param theSHUO:
        :type theSHUO: Handle_XCAFDoc_GraphNode &
        :param theSHUOShapeSeq:
        :type theSHUOShapeSeq: TopTools_SequenceOfShape &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllSHUOInstances(self, *args)

    def FindSHUO(*args):
        """
        * Searchs the SHUO by labels of components from upper_usage componet to next_usage Returns null attribute if no SHUO found

        :param Labels:
        :type Labels: TDF_LabelSequence &
        :param theSHUOAttr:
        :type theSHUOAttr: Handle_XCAFDoc_GraphNode &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

    FindSHUO = staticmethod(FindSHUO)
    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_ShapeTool self)"""
        return _XCAFDoc.XCAFDoc_ShapeTool__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_ShapeTool self) -> Handle_XCAFDoc_ShapeTool"""
        return _XCAFDoc.XCAFDoc_ShapeTool_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_ShapeTool.IsTopLevel = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_IsTopLevel,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.IsSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_IsSubShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SearchUsingMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SearchUsingMap,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Search = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Search,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.NewShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_NewShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.AddShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Init = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Init,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.ComputeShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_ComputeShapes,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.ComputeSimpleShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_ComputeSimpleShapes,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetShapes,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetFreeShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetFreeShapes,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.AddComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddComponent,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveComponent,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.UpdateAssembly = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_UpdateAssembly,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindSubShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.AddSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddSubShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindMainShapeUsingMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindMainShapeUsingMap,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindMainShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindMainShape,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_BaseLabel,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Dump = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Dump,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetExternRefs = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetExternRefs,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetSHUO,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveSHUO,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindComponent,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetSHUOInstance = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetSHUOInstance,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetInstanceSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetInstanceSHUO,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetAllSHUOInstances = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetAllSHUOInstances,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool__kill_pointed,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetHandle,None,XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool_swigregister = _XCAFDoc.XCAFDoc_ShapeTool_swigregister
XCAFDoc_ShapeTool_swigregister(XCAFDoc_ShapeTool)

def XCAFDoc_ShapeTool_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

def XCAFDoc_ShapeTool_Set(*args):
  """
    * Create (if not exist) ShapeTool from XCAFDoc on <L>.

    :param L:
    :type L: TDF_Label &
    :rtype: Handle_XCAFDoc_ShapeTool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

def XCAFDoc_ShapeTool_IsFree(*args):
  """
    * Returns True if the label is not used by any assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True 	 	 (There is no Father TreeNode on this <L>)

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

def XCAFDoc_ShapeTool_IsShape(*args):
  """
    * Returns True if the label represents a shape (simple shape, assembly or reference)

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

def XCAFDoc_ShapeTool_IsSimpleShape(*args):
  """
    * Returns True if the label is a label of simple shape

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

def XCAFDoc_ShapeTool_IsReference(*args):
  """
    * Return true if <L> is a located instance of other shape i.e. reference

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

def XCAFDoc_ShapeTool_IsAssembly(*args):
  """
    * Returns True if the label is a label of assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

def XCAFDoc_ShapeTool_IsComponent(*args):
  """
    * Return true if <L> is reference serving as component of assembly

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

def XCAFDoc_ShapeTool_IsCompound(*args):
  """
    * Returns True if the label is a label of compound, i.e. contains some sublabels This is relevant only if IsShape() is True

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

def XCAFDoc_ShapeTool_GetShape(*args):
  """
    * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns False if label does not contain shape

    :param L:
    :type L: TDF_Label &
    :param S:
    :type S: TopoDS_Shape &
    :rtype: bool

    * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns Null shape if label does not contain shape

    :param L:
    :type L: TDF_Label &
    :rtype: TopoDS_Shape

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

def XCAFDoc_ShapeTool_SetAutoNaming(*args):
  """
    * Sets auto-naming mode to <V>. If True then for added shapes, links, assemblies and SHUO's, the TDataStd_Name attribute is automatically added. For shapes it contains a shape type (e.g. 'SOLID', 'SHELL', etc); for links it has a form '=>[0:1:1:2]' (where a tag is a label containing a shape without a location); for assemblies it is 'ASSEMBLY', and 'SHUO' for SHUO's. This setting is global; it cannot be made a member function as it is used by static methods as well. By default, auto-naming is enabled. See also AutoNaming().

    :param V:
    :type V: bool
    :rtype: void

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

def XCAFDoc_ShapeTool_AutoNaming(*args):
  """
    * Returns current auto-naming mode. See SetAutoNaming() for description.

    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

def XCAFDoc_ShapeTool_GetUsers(*args):
  """
    * Returns list of labels which refer shape L as component Returns number of users (0 if shape is free)

    :param L:
    :type L: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelSequence &
    :param getsubchilds: default value is Standard_False
    :type getsubchilds: bool
    :rtype: int

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

def XCAFDoc_ShapeTool_GetLocation(*args):
  """
    * Returns location of instance

    :param L:
    :type L: TDF_Label &
    :rtype: TopLoc_Location

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

def XCAFDoc_ShapeTool_GetReferredShape(*args):
  """
    * Returns label which corresponds to a shape referred by L Returns False if label is not reference

    :param L:
    :type L: TDF_Label &
    :param Label:
    :type Label: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

def XCAFDoc_ShapeTool_NbComponents(*args):
  """
    * Returns number of Assembles components

    :param L:
    :type L: TDF_Label &
    :param getsubchilds: default value is Standard_False
    :type getsubchilds: bool
    :rtype: int

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

def XCAFDoc_ShapeTool_GetComponents(*args):
  """
    * Returns list of components of assembly Returns False if label is not assembly

    :param L:
    :type L: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelSequence &
    :param getsubchilds: default value is Standard_False
    :type getsubchilds: bool
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

def XCAFDoc_ShapeTool_GetSubShapes(*args):
  """
    * Returns list of labels identifying subshapes of the given shape Returns False if no subshapes are placed on that label

    :param L:
    :type L: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelSequence &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

def XCAFDoc_ShapeTool_DumpShape(*args):
  """
    * Print in cout type of shape found on <L> label and the entry of <L>, with <level> tabs before. If <deep>, print also TShape and Location addresses

    :param L:
    :type L: TDF_Label &
    :param level: default value is 0
    :type level: int
    :param deep: default value is Standard_False
    :type deep: bool
    :rtype: void

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

def XCAFDoc_ShapeTool_IsExternRef(*args):
  """
    * Returns True if the label is a label of external references, i.e. there are some reference on the no-step files, which are described in document only their names

    :param L:
    :type L: TDF_Label &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

def XCAFDoc_ShapeTool_GetExternRefs(*args):
  """
    * Gets the names of references on the no-step files

    :param L:
    :type L: TDF_Label &
    :param SHAS:
    :type SHAS: TColStd_SequenceOfHAsciiString &
    :rtype: void

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

def XCAFDoc_ShapeTool_GetSHUO(*args):
  """
    * Returns founded SHUO GraphNode attribute <aSHUOAttr> Returns false in other case

    :param SHUOLabel:
    :type SHUOLabel: TDF_Label &
    :param aSHUOAttr:
    :type aSHUOAttr: Handle_XCAFDoc_GraphNode &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

def XCAFDoc_ShapeTool_GetAllComponentSHUO(*args):
  """
    * Returns founded SHUO GraphNodes of indicated component Returns false in other case

    :param CompLabel:
    :type CompLabel: TDF_Label &
    :param SHUOAttrs:
    :type SHUOAttrs: TDF_AttributeSequence &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

def XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args):
  """
    * Returns the sequence of labels of SHUO attributes, which is upper_usage for this next_usage SHUO attribute   (that indicated by label) NOTE: returns upper_usages only on one level (not recurse) NOTE: do not clear the sequence before filling

    :param NextUsageL:
    :type NextUsageL: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelSequence &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

def XCAFDoc_ShapeTool_GetSHUONextUsage(*args):
  """
    * Returns the sequence of labels of SHUO attributes, which is next_usage for this upper_usage SHUO attribute   (that indicated by label) NOTE: returns next_usages only on one level (not recurse) NOTE: do not clear the sequence before filling

    :param UpperUsageL:
    :type UpperUsageL: TDF_Label &
    :param Labels:
    :type Labels: TDF_LabelSequence &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

def XCAFDoc_ShapeTool_FindSHUO(*args):
  """
    * Searchs the SHUO by labels of components from upper_usage componet to next_usage Returns null attribute if no SHUO found

    :param Labels:
    :type Labels: TDF_LabelSequence &
    :param theSHUOAttr:
    :type theSHUOAttr: Handle_XCAFDoc_GraphNode &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

class Handle_XCAFDoc_ShapeTool(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_ShapeTool_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_ShapeTool(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_ShapeTool.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool_Nullify,None,Handle_XCAFDoc_ShapeTool)
Handle_XCAFDoc_ShapeTool.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool_IsNull,None,Handle_XCAFDoc_ShapeTool)
Handle_XCAFDoc_ShapeTool.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool_GetObject,None,Handle_XCAFDoc_ShapeTool)
Handle_XCAFDoc_ShapeTool._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool__kill_pointed,None,Handle_XCAFDoc_ShapeTool)
Handle_XCAFDoc_ShapeTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ShapeTool_swigregister
Handle_XCAFDoc_ShapeTool_swigregister(Handle_XCAFDoc_ShapeTool)

def Handle_XCAFDoc_ShapeTool_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast(*args)
Handle_XCAFDoc_ShapeTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast

class XCAFDoc_Volume(OCC.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * class methods =============

        :rtype: None

        """
        _XCAFDoc.XCAFDoc_Volume_swiginit(self,_XCAFDoc.new_XCAFDoc_Volume(*args))
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(*args):
        """
        * Sets a value of volume

        :param vol:
        :type vol: float
        :rtype: None

        * Find, or create, an Volume attribute and set its value

        :param label:
        :type label: TDF_Label &
        :param vol:
        :type vol: float
        :rtype: Handle_XCAFDoc_Volume

        """
        return _XCAFDoc.XCAFDoc_Volume_Set(*args)

    Set = staticmethod(Set)
    def Get(*args):
        """
        :rtype: float

        * Returns volume as argument returns false if no such attribute at the <label>

        :param label:
        :type label: TDF_Label &
        :param vol:
        :type vol: float &
        :rtype: bool

        """
        return _XCAFDoc.XCAFDoc_Volume_Get(*args)

    Get = staticmethod(Get)
    def DumpToString(self):
        """DumpToString(XCAFDoc_Volume self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Volume_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(XCAFDoc_Volume self)"""
        return _XCAFDoc.XCAFDoc_Volume__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(XCAFDoc_Volume self) -> Handle_XCAFDoc_Volume"""
        return _XCAFDoc.XCAFDoc_Volume_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


XCAFDoc_Volume.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Volume_DumpToString,None,XCAFDoc_Volume)
XCAFDoc_Volume._kill_pointed = new_instancemethod(_XCAFDoc.XCAFDoc_Volume__kill_pointed,None,XCAFDoc_Volume)
XCAFDoc_Volume.GetHandle = new_instancemethod(_XCAFDoc.XCAFDoc_Volume_GetHandle,None,XCAFDoc_Volume)
XCAFDoc_Volume_swigregister = _XCAFDoc.XCAFDoc_Volume_swigregister
XCAFDoc_Volume_swigregister(XCAFDoc_Volume)

def XCAFDoc_Volume_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

def XCAFDoc_Volume_Set(*args):
  """
    * Sets a value of volume

    :param vol:
    :type vol: float
    :rtype: None

    * Find, or create, an Volume attribute and set its value

    :param label:
    :type label: TDF_Label &
    :param vol:
    :type vol: float
    :rtype: Handle_XCAFDoc_Volume

    """
  return _XCAFDoc.XCAFDoc_Volume_Set(*args)

def XCAFDoc_Volume_Get(*args):
  """
    :rtype: float

    * Returns volume as argument returns false if no such attribute at the <label>

    :param label:
    :type label: TDF_Label &
    :param vol:
    :type vol: float &
    :rtype: bool

    """
  return _XCAFDoc.XCAFDoc_Volume_Get(*args)

class Handle_XCAFDoc_Volume(OCC.TDF.Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _XCAFDoc.Handle_XCAFDoc_Volume_swiginit(self,_XCAFDoc.new_Handle_XCAFDoc_Volume(*args))
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Volume_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_XCAFDoc_Volume.Nullify = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Volume_Nullify,None,Handle_XCAFDoc_Volume)
Handle_XCAFDoc_Volume.IsNull = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Volume_IsNull,None,Handle_XCAFDoc_Volume)
Handle_XCAFDoc_Volume.GetObject = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Volume_GetObject,None,Handle_XCAFDoc_Volume)
Handle_XCAFDoc_Volume._kill_pointed = new_instancemethod(_XCAFDoc.Handle_XCAFDoc_Volume__kill_pointed,None,Handle_XCAFDoc_Volume)
Handle_XCAFDoc_Volume_swigregister = _XCAFDoc.Handle_XCAFDoc_Volume_swigregister
Handle_XCAFDoc_Volume_swigregister(Handle_XCAFDoc_Volume)

def Handle_XCAFDoc_Volume_DownCast(*args):
  return _XCAFDoc.Handle_XCAFDoc_Volume_DownCast(*args)
Handle_XCAFDoc_Volume_DownCast = _XCAFDoc.Handle_XCAFDoc_Volume_DownCast



