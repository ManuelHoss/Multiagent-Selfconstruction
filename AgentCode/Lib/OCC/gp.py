# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _gp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gp', [dirname(__file__)])
        except ImportError:
            import _gp
            return _gp
        if fp is not None:
            try:
                _mod = imp.load_module('_gp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gp = swig_import_helper()
    del swig_import_helper
else:
    import _gp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gp.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_gp.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_gp.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_gp.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_gp.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_gp.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_gp.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_gp.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_gp.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_gp.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_gp.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_gp.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_gp.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_gp.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_gp.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_gp.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_gp.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _gp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
gp_EulerAngles = _gp.gp_EulerAngles
gp_YawPitchRoll = _gp.gp_YawPitchRoll
gp_Extrinsic_XYZ = _gp.gp_Extrinsic_XYZ
gp_Extrinsic_XZY = _gp.gp_Extrinsic_XZY
gp_Extrinsic_YZX = _gp.gp_Extrinsic_YZX
gp_Extrinsic_YXZ = _gp.gp_Extrinsic_YXZ
gp_Extrinsic_ZXY = _gp.gp_Extrinsic_ZXY
gp_Extrinsic_ZYX = _gp.gp_Extrinsic_ZYX
gp_Intrinsic_XYZ = _gp.gp_Intrinsic_XYZ
gp_Intrinsic_XZY = _gp.gp_Intrinsic_XZY
gp_Intrinsic_YZX = _gp.gp_Intrinsic_YZX
gp_Intrinsic_YXZ = _gp.gp_Intrinsic_YXZ
gp_Intrinsic_ZXY = _gp.gp_Intrinsic_ZXY
gp_Intrinsic_ZYX = _gp.gp_Intrinsic_ZYX
gp_Extrinsic_XYX = _gp.gp_Extrinsic_XYX
gp_Extrinsic_XZX = _gp.gp_Extrinsic_XZX
gp_Extrinsic_YZY = _gp.gp_Extrinsic_YZY
gp_Extrinsic_YXY = _gp.gp_Extrinsic_YXY
gp_Extrinsic_ZYZ = _gp.gp_Extrinsic_ZYZ
gp_Extrinsic_ZXZ = _gp.gp_Extrinsic_ZXZ
gp_Intrinsic_XYX = _gp.gp_Intrinsic_XYX
gp_Intrinsic_XZX = _gp.gp_Intrinsic_XZX
gp_Intrinsic_YZY = _gp.gp_Intrinsic_YZY
gp_Intrinsic_YXY = _gp.gp_Intrinsic_YXY
gp_Intrinsic_ZXZ = _gp.gp_Intrinsic_ZXZ
gp_Intrinsic_ZYZ = _gp.gp_Intrinsic_ZYZ
gp_Identity = _gp.gp_Identity
gp_Rotation = _gp.gp_Rotation
gp_Translation = _gp.gp_Translation
gp_PntMirror = _gp.gp_PntMirror
gp_Ax1Mirror = _gp.gp_Ax1Mirror
gp_Ax2Mirror = _gp.gp_Ax2Mirror
gp_Scale = _gp.gp_Scale
gp_CompoundTrsf = _gp.gp_CompoundTrsf
gp_Other = _gp.gp_Other
class gp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Resolution(*args):
        """
        * Parabola. Method of package gp In geometric computations, defines the tolerance criterion used to determine when two numbers can be considered equal. Many class functions use this tolerance criterion, for example, to avoid division by zero in geometric computations. In the documentation, tolerance criterion is always referred to as gp::Resolution().

        :rtype: float

        """
        return _gp.gp_Resolution(*args)

    Resolution = staticmethod(Resolution)
    def Origin(*args):
        """
        * Identifies a Cartesian point with coordinates X = Y = Z = 0.0.0

        :rtype: gp_Pnt

        """
        return _gp.gp_Origin(*args)

    Origin = staticmethod(Origin)
    def DX(*args):
        """
        * Returns a unit vector with the combination (1,0,0)

        :rtype: gp_Dir

        """
        return _gp.gp_DX(*args)

    DX = staticmethod(DX)
    def DY(*args):
        """
        * Returns a unit vector with the combination (0,1,0)

        :rtype: gp_Dir

        """
        return _gp.gp_DY(*args)

    DY = staticmethod(DY)
    def DZ(*args):
        """
        * Returns a unit vector with the combination (0,0,1)

        :rtype: gp_Dir

        """
        return _gp.gp_DZ(*args)

    DZ = staticmethod(DZ)
    def OX(*args):
        """
        * //!Identifies an axis where its origin is Origin and its unit vector coordinates X = 1.0, Y = Z = 0.0

        :rtype: gp_Ax1

        """
        return _gp.gp_OX(*args)

    OX = staticmethod(OX)
    def OY(*args):
        """
        * //!Identifies an axis where its origin is Origin and its unit vector coordinates Y = 1.0, X = Z = 0.0

        :rtype: gp_Ax1

        """
        return _gp.gp_OY(*args)

    OY = staticmethod(OY)
    def OZ(*args):
        """
        * //!Identifies an axis where its origin is Origin and its unit vector coordinates Z = 1.0, Y = X = 0.0

        :rtype: gp_Ax1

        """
        return _gp.gp_OZ(*args)

    OZ = staticmethod(OZ)
    def XOY(*args):
        """
        * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates Z = 1.0, X = Y =0.0 and X direction coordinates X = 1.0, Y = Z = 0.0

        :rtype: gp_Ax2

        """
        return _gp.gp_XOY(*args)

    XOY = staticmethod(XOY)
    def ZOX(*args):
        """
        * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates Y = 1.0, X = Z =0.0 and X direction coordinates Z = 1.0, X = Y = 0.0

        :rtype: gp_Ax2

        """
        return _gp.gp_ZOX(*args)

    ZOX = staticmethod(ZOX)
    def YOZ(*args):
        """
        * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates X = 1.0, Z = Y =0.0 and X direction coordinates Y = 1.0, X = Z = 0.0 In 2D space

        :rtype: gp_Ax2

        """
        return _gp.gp_YOZ(*args)

    YOZ = staticmethod(YOZ)
    def Origin2d(*args):
        """
        * Identifies a Cartesian point with coordinates X = Y = 0.0

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Origin2d(*args)

    Origin2d = staticmethod(Origin2d)
    def DX2d(*args):
        """
        * Returns a unit vector with the combinations (1,0)

        :rtype: gp_Dir2d

        """
        return _gp.gp_DX2d(*args)

    DX2d = staticmethod(DX2d)
    def DY2d(*args):
        """
        * Returns a unit vector with the combinations (0,1)

        :rtype: gp_Dir2d

        """
        return _gp.gp_DY2d(*args)

    DY2d = staticmethod(DY2d)
    def OX2d(*args):
        """
        * Identifies an axis where its origin is Origin2d and its unit vector coordinates are: X = 1.0, Y = 0.0

        :rtype: gp_Ax2d

        """
        return _gp.gp_OX2d(*args)

    OX2d = staticmethod(OX2d)
    def OY2d(*args):
        """
        * Identifies an axis where its origin is Origin2d and its unit vector coordinates are Y = 1.0, X = 0.0

        :rtype: gp_Ax2d

        """
        return _gp.gp_OY2d(*args)

    OY2d = staticmethod(OY2d)
    def __init__(self): 
        _gp.gp_swiginit(self,_gp.new_gp())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp._kill_pointed = new_instancemethod(_gp.gp__kill_pointed,None,gp)
gp_swigregister = _gp.gp_swigregister
gp_swigregister(gp)

def gp_Resolution(*args):
  """
    * Parabola. Method of package gp In geometric computations, defines the tolerance criterion used to determine when two numbers can be considered equal. Many class functions use this tolerance criterion, for example, to avoid division by zero in geometric computations. In the documentation, tolerance criterion is always referred to as gp::Resolution().

    :rtype: float

    """
  return _gp.gp_Resolution(*args)

def gp_Origin(*args):
  """
    * Identifies a Cartesian point with coordinates X = Y = Z = 0.0.0

    :rtype: gp_Pnt

    """
  return _gp.gp_Origin(*args)

def gp_DX(*args):
  """
    * Returns a unit vector with the combination (1,0,0)

    :rtype: gp_Dir

    """
  return _gp.gp_DX(*args)

def gp_DY(*args):
  """
    * Returns a unit vector with the combination (0,1,0)

    :rtype: gp_Dir

    """
  return _gp.gp_DY(*args)

def gp_DZ(*args):
  """
    * Returns a unit vector with the combination (0,0,1)

    :rtype: gp_Dir

    """
  return _gp.gp_DZ(*args)

def gp_OX(*args):
  """
    * //!Identifies an axis where its origin is Origin and its unit vector coordinates X = 1.0, Y = Z = 0.0

    :rtype: gp_Ax1

    """
  return _gp.gp_OX(*args)

def gp_OY(*args):
  """
    * //!Identifies an axis where its origin is Origin and its unit vector coordinates Y = 1.0, X = Z = 0.0

    :rtype: gp_Ax1

    """
  return _gp.gp_OY(*args)

def gp_OZ(*args):
  """
    * //!Identifies an axis where its origin is Origin and its unit vector coordinates Z = 1.0, Y = X = 0.0

    :rtype: gp_Ax1

    """
  return _gp.gp_OZ(*args)

def gp_XOY(*args):
  """
    * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates Z = 1.0, X = Y =0.0 and X direction coordinates X = 1.0, Y = Z = 0.0

    :rtype: gp_Ax2

    """
  return _gp.gp_XOY(*args)

def gp_ZOX(*args):
  """
    * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates Y = 1.0, X = Z =0.0 and X direction coordinates Z = 1.0, X = Y = 0.0

    :rtype: gp_Ax2

    """
  return _gp.gp_ZOX(*args)

def gp_YOZ(*args):
  """
    * //!Identifies a coordinate system where its origin is Origin, and its 'main Direction' and 'X Direction' coordinates X = 1.0, Z = Y =0.0 and X direction coordinates Y = 1.0, X = Z = 0.0 In 2D space

    :rtype: gp_Ax2

    """
  return _gp.gp_YOZ(*args)

def gp_Origin2d(*args):
  """
    * Identifies a Cartesian point with coordinates X = Y = 0.0

    :rtype: gp_Pnt2d

    """
  return _gp.gp_Origin2d(*args)

def gp_DX2d(*args):
  """
    * Returns a unit vector with the combinations (1,0)

    :rtype: gp_Dir2d

    """
  return _gp.gp_DX2d(*args)

def gp_DY2d(*args):
  """
    * Returns a unit vector with the combinations (0,1)

    :rtype: gp_Dir2d

    """
  return _gp.gp_DY2d(*args)

def gp_OX2d(*args):
  """
    * Identifies an axis where its origin is Origin2d and its unit vector coordinates are: X = 1.0, Y = 0.0

    :rtype: gp_Ax2d

    """
  return _gp.gp_OX2d(*args)

def gp_OY2d(*args):
  """
    * Identifies an axis where its origin is Origin2d and its unit vector coordinates are Y = 1.0, X = 0.0

    :rtype: gp_Ax2d

    """
  return _gp.gp_OY2d(*args)

class gp_Ax1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an axis object representing Z axis of  the reference co-ordinate system.

        :rtype: None

        * P is the location point and V is the direction of <self>.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _gp.gp_Ax1_swiginit(self,_gp.new_gp_Ax1(*args))
    def SetDirection(self, *args):
        """
        * Assigns V as the 'Direction' of this axis.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax1_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Assigns P as the origin of this axis.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax1_SetLocation(self, *args)

    def Direction(self, *args):
        """
        * Returns the direction of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax1_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of <self>.

        :rtype: gp_Pnt

        """
        return _gp.gp_Ax1_Location(self, *args)

    def IsCoaxial(self, *args):
        """
        * Returns True if : . the angle between <self> and <Other> is lower or equal to <AngularTolerance> and . the distance between <self>.Location() and <Other> is lower or equal to <LinearTolerance> and . the distance between <Other>.Location() and <self> is lower or equal to LinearTolerance.

        :param Other:
        :type Other: gp_Ax1
        :param AngularTolerance:
        :type AngularTolerance: float
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax1_IsCoaxial(self, *args)

    def IsNormal(self, *args):
        """
        * Returns True if the direction of the <self> and <Other> are normal to each other. That is, if the angle between the two axes is equal to Pi/2. Note: the tolerance criterion is given by AngularTolerance..

        :param Other:
        :type Other: gp_Ax1
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax1_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns True if the direction of <self> and <Other> are parallel with opposite orientation. That is, if the angle between the two axes is equal to Pi. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Ax1
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax1_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * Returns True if the direction of <self> and <Other> are parallel with same orientation or opposite orientation. That is, if the angle between the two axes is equal to 0 or Pi. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Ax1
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax1_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value, in radians, between <self>.Direction() and <Other>.Direction(). Returns the angle between 0 and 2*PI radians.

        :param Other:
        :type Other: gp_Ax1
        :rtype: float

        """
        return _gp.gp_Ax1_Angle(self, *args)

    def Reverse(self, *args):
        """
        * Reverses the unit vector of this axis. and assigns the result to this axis.

        :rtype: None

        """
        return _gp.gp_Ax1_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the unit vector of this axis and creates a new one.

        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Reversed(self, *args)

    def Mirror(self, *args):
        """
        * Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry and assigns the result to this axis.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry and assigns the result to this axis.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection) and assigns the result to this axis.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Ax1_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry and creates a new axis.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Ax1

        * Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry and creates a new axis.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Ax1

        * Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection) and creates a new axis.

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        * Rotates this axis at an angle Ang (in radians) about the axis A1 and assigns the result to this axis.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Ax1_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates this axis at an angle Ang (in radians) about the axis A1 and creates a new one.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Rotated(self, *args)

    def Scale(self, *args):
        """
        * Applies a scaling transformation to this axis with: - scale factor S, and - center P and assigns the result to this axis.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Ax1_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Applies a scaling transformation to this axis with: - scale factor S, and - center P and creates a new axis.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Scaled(self, *args)

    def Transform(self, *args):
        """
        * Applies the transformation T to this axis. and assigns the result to this axis.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Ax1_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Applies the transformation T to this axis and creates a new one. Translates an axis plaxement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Transformed(self, *args)

    def Translate(self, *args):
        """
        * Translates this axis by the vector V, and assigns the result to this axis.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Translates this axis by: the vector (P1, P2) defined from point P1 to point P2. and assigns the result to this axis.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax1_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates this axis by the vector V, and creates a new one.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Ax1

        * Translates this axis by: the vector (P1, P2) defined from point P1 to point P2. and creates a new one.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax1_Translated(self, *args)

    def _CSFDB_Getgp_Ax1loc(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _gp.gp_Ax1__CSFDB_Getgp_Ax1loc(self, *args)

    def _CSFDB_Getgp_Ax1vdir(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Ax1__CSFDB_Getgp_Ax1vdir(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Ax1.SetDirection = new_instancemethod(_gp.gp_Ax1_SetDirection,None,gp_Ax1)
gp_Ax1.SetLocation = new_instancemethod(_gp.gp_Ax1_SetLocation,None,gp_Ax1)
gp_Ax1.Direction = new_instancemethod(_gp.gp_Ax1_Direction,None,gp_Ax1)
gp_Ax1.Location = new_instancemethod(_gp.gp_Ax1_Location,None,gp_Ax1)
gp_Ax1.IsCoaxial = new_instancemethod(_gp.gp_Ax1_IsCoaxial,None,gp_Ax1)
gp_Ax1.IsNormal = new_instancemethod(_gp.gp_Ax1_IsNormal,None,gp_Ax1)
gp_Ax1.IsOpposite = new_instancemethod(_gp.gp_Ax1_IsOpposite,None,gp_Ax1)
gp_Ax1.IsParallel = new_instancemethod(_gp.gp_Ax1_IsParallel,None,gp_Ax1)
gp_Ax1.Angle = new_instancemethod(_gp.gp_Ax1_Angle,None,gp_Ax1)
gp_Ax1.Reverse = new_instancemethod(_gp.gp_Ax1_Reverse,None,gp_Ax1)
gp_Ax1.Reversed = new_instancemethod(_gp.gp_Ax1_Reversed,None,gp_Ax1)
gp_Ax1.Mirror = new_instancemethod(_gp.gp_Ax1_Mirror,None,gp_Ax1)
gp_Ax1.Mirrored = new_instancemethod(_gp.gp_Ax1_Mirrored,None,gp_Ax1)
gp_Ax1.Rotate = new_instancemethod(_gp.gp_Ax1_Rotate,None,gp_Ax1)
gp_Ax1.Rotated = new_instancemethod(_gp.gp_Ax1_Rotated,None,gp_Ax1)
gp_Ax1.Scale = new_instancemethod(_gp.gp_Ax1_Scale,None,gp_Ax1)
gp_Ax1.Scaled = new_instancemethod(_gp.gp_Ax1_Scaled,None,gp_Ax1)
gp_Ax1.Transform = new_instancemethod(_gp.gp_Ax1_Transform,None,gp_Ax1)
gp_Ax1.Transformed = new_instancemethod(_gp.gp_Ax1_Transformed,None,gp_Ax1)
gp_Ax1.Translate = new_instancemethod(_gp.gp_Ax1_Translate,None,gp_Ax1)
gp_Ax1.Translated = new_instancemethod(_gp.gp_Ax1_Translated,None,gp_Ax1)
gp_Ax1._CSFDB_Getgp_Ax1loc = new_instancemethod(_gp.gp_Ax1__CSFDB_Getgp_Ax1loc,None,gp_Ax1)
gp_Ax1._CSFDB_Getgp_Ax1vdir = new_instancemethod(_gp.gp_Ax1__CSFDB_Getgp_Ax1vdir,None,gp_Ax1)
gp_Ax1._kill_pointed = new_instancemethod(_gp.gp_Ax1__kill_pointed,None,gp_Ax1)
gp_Ax1_swigregister = _gp.gp_Ax1_swigregister
gp_Ax1_swigregister(gp_Ax1)

class gp_Ax2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an object corresponding to the reference  coordinate system (OXYZ).

        :rtype: None

        * Creates an axis placement with an origin P such that: - N is the Direction, and - the 'X Direction' is normal to N, in the plane defined by the vectors (N, Vx): 'X Direction' = (N ^ Vx) ^ N, Exception: raises ConstructionError if N and Vx are parallel (same or opposite orientation).

        :param P:
        :type P: gp_Pnt
        :param N:
        :type N: gp_Dir
        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        * Creates - a coordinate system with an origin P, where V gives the 'main Direction' (here, 'X Direction' and 'Y Direction' are defined automatically).

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _gp.gp_Ax2_swiginit(self,_gp.new_gp_Ax2(*args))
    def SetAxis(self, *args):
        """
        * Assigns the origin and 'main Direction' of the axis A1 to this coordinate system, then recomputes its 'X Direction' and 'Y Direction'. Note: The new 'X Direction' is computed as follows: new 'X Direction' = V1 ^(previous 'X Direction' ^ V) where V is the 'Direction' of A1. Exceptions Standard_ConstructionError if A1 is parallel to the 'X Direction' of this coordinate system.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Ax2_SetAxis(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the 'main Direction' of this coordinate system, then recomputes its 'X Direction' and 'Y Direction'. Note: the new 'X Direction' is computed as follows: new 'X Direction' = V ^ (previous 'X Direction' ^ V) Exceptions Standard_ConstructionError if V is parallel to the 'X Direction' of this coordinate system.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax2_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the 'Location' point (origin) of <self>.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax2_SetLocation(self, *args)

    def SetXDirection(self, *args):
        """
        * Changes the 'Xdirection' of <self>. The main direction 'Direction' is not modified, the 'Ydirection' is modified. If <Vx> is not normal to the main direction then <XDirection> is computed as follows XDirection = Direction ^ (Vx ^ Direction). Exceptions Standard_ConstructionError if Vx or Vy is parallel to the 'main Direction' of this coordinate system.

        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax2_SetXDirection(self, *args)

    def SetYDirection(self, *args):
        """
        * Changes the 'Ydirection' of <self>. The main direction is not modified but the 'Xdirection' is changed. If <Vy> is not normal to the main direction then 'YDirection' is computed as follows YDirection = Direction ^ (<Vy> ^ Direction). Exceptions Standard_ConstructionError if Vx or Vy is parallel to the 'main Direction' of this coordinate system.

        :param Vy:
        :type Vy: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax2_SetYDirection(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value, in radians, between the main direction of <self> and the main direction of <Other>. Returns the angle between 0 and PI in radians.

        :param Other:
        :type Other: gp_Ax2
        :rtype: float

        """
        return _gp.gp_Ax2_Angle(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of <self>. It is the 'Location' point and the main 'Direction'.

        :rtype: gp_Ax1

        """
        return _gp.gp_Ax2_Axis(self, *args)

    def Direction(self, *args):
        """
        * Returns the main direction of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax2_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the 'Location' point (origin) of <self>.

        :rtype: gp_Pnt

        """
        return _gp.gp_Ax2_Location(self, *args)

    def XDirection(self, *args):
        """
        * Returns the 'XDirection' of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax2_XDirection(self, *args)

    def YDirection(self, *args):
        """
        * Returns the 'YDirection' of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax2_YDirection(self, *args)

    def IsCoplanar(self, *args):
        """
        :param Other:
        :type Other: gp_Ax2
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        * Returns True if . the distance between <self> and the 'Location' point of A1 is lower of equal to LinearTolerance and . the main direction of <self> and the direction of A1 are normal. Note: the tolerance criterion for angular equality is given by AngularTolerance.

        :param A1:
        :type A1: gp_Ax1
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax2_IsCoplanar(self, *args)

    def Mirror(self, *args):
        """
        * Performs a symmetrical transformation of this coordinate system with respect to: - the point P, and assigns the result to this coordinate system. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Performs a symmetrical transformation of this coordinate system with respect to: - the axis A1, and assigns the result to this coordinate systeme. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Performs a symmetrical transformation of this coordinate system with respect to: - the plane defined by the origin, 'X Direction' and 'Y Direction' of coordinate system A2 and assigns the result to this coordinate systeme. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Ax2_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs a symmetrical transformation of this coordinate system with respect to: - the point P, and creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Ax2

        * Performs a symmetrical transformation of this coordinate system with respect to: - the axis A1, and creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Ax2

        * Performs a symmetrical transformation of this coordinate system with respect to: - the plane defined by the origin, 'X Direction' and 'Y Direction' of coordinate system A2 and creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the 'X Direction' and the 'Y Direction' are simply reversed In case of a reflection with respect to an axis or a plane: - the transformation is applied to the 'X Direction' and the 'Y Direction', then - the 'main Direction' is recomputed as the cross product 'X Direction' ^ 'Y Direction'. This maintains the right-handed property of the coordinate system.

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Ax2

        """
        return _gp.gp_Ax2_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Ax2_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an axis placement. <A1> is the axis of the rotation . Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Ax2

        """
        return _gp.gp_Ax2_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Ax2_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Applies a scaling transformation on the axis placement. The 'Location' point of the axisplacement is modified. Warnings : If the scale <S> is negative : . the main direction of the axis placement is not changed. . The 'XDirection' and the 'YDirection' are reversed. So the axis placement stay right handed.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Ax2

        """
        return _gp.gp_Ax2_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Ax2_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an axis placement with a Trsf. The 'Location' point, the 'XDirection' and the 'YDirection' are transformed with T. The resulting main 'Direction' of <self> is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Ax2

        """
        return _gp.gp_Ax2_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax2_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an axis plaxement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Ax2

        * Translates an axis placement from the point <P1> to the point <P2>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Ax2

        """
        return _gp.gp_Ax2_Translated(self, *args)

    def _CSFDB_Getgp_Ax2axis(self, *args):
        """
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax2__CSFDB_Getgp_Ax2axis(self, *args)

    def _CSFDB_Getgp_Ax2vydir(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Ax2__CSFDB_Getgp_Ax2vydir(self, *args)

    def _CSFDB_Getgp_Ax2vxdir(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Ax2__CSFDB_Getgp_Ax2vxdir(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Ax2.SetAxis = new_instancemethod(_gp.gp_Ax2_SetAxis,None,gp_Ax2)
gp_Ax2.SetDirection = new_instancemethod(_gp.gp_Ax2_SetDirection,None,gp_Ax2)
gp_Ax2.SetLocation = new_instancemethod(_gp.gp_Ax2_SetLocation,None,gp_Ax2)
gp_Ax2.SetXDirection = new_instancemethod(_gp.gp_Ax2_SetXDirection,None,gp_Ax2)
gp_Ax2.SetYDirection = new_instancemethod(_gp.gp_Ax2_SetYDirection,None,gp_Ax2)
gp_Ax2.Angle = new_instancemethod(_gp.gp_Ax2_Angle,None,gp_Ax2)
gp_Ax2.Axis = new_instancemethod(_gp.gp_Ax2_Axis,None,gp_Ax2)
gp_Ax2.Direction = new_instancemethod(_gp.gp_Ax2_Direction,None,gp_Ax2)
gp_Ax2.Location = new_instancemethod(_gp.gp_Ax2_Location,None,gp_Ax2)
gp_Ax2.XDirection = new_instancemethod(_gp.gp_Ax2_XDirection,None,gp_Ax2)
gp_Ax2.YDirection = new_instancemethod(_gp.gp_Ax2_YDirection,None,gp_Ax2)
gp_Ax2.IsCoplanar = new_instancemethod(_gp.gp_Ax2_IsCoplanar,None,gp_Ax2)
gp_Ax2.Mirror = new_instancemethod(_gp.gp_Ax2_Mirror,None,gp_Ax2)
gp_Ax2.Mirrored = new_instancemethod(_gp.gp_Ax2_Mirrored,None,gp_Ax2)
gp_Ax2.Rotate = new_instancemethod(_gp.gp_Ax2_Rotate,None,gp_Ax2)
gp_Ax2.Rotated = new_instancemethod(_gp.gp_Ax2_Rotated,None,gp_Ax2)
gp_Ax2.Scale = new_instancemethod(_gp.gp_Ax2_Scale,None,gp_Ax2)
gp_Ax2.Scaled = new_instancemethod(_gp.gp_Ax2_Scaled,None,gp_Ax2)
gp_Ax2.Transform = new_instancemethod(_gp.gp_Ax2_Transform,None,gp_Ax2)
gp_Ax2.Transformed = new_instancemethod(_gp.gp_Ax2_Transformed,None,gp_Ax2)
gp_Ax2.Translate = new_instancemethod(_gp.gp_Ax2_Translate,None,gp_Ax2)
gp_Ax2.Translated = new_instancemethod(_gp.gp_Ax2_Translated,None,gp_Ax2)
gp_Ax2._CSFDB_Getgp_Ax2axis = new_instancemethod(_gp.gp_Ax2__CSFDB_Getgp_Ax2axis,None,gp_Ax2)
gp_Ax2._CSFDB_Getgp_Ax2vydir = new_instancemethod(_gp.gp_Ax2__CSFDB_Getgp_Ax2vydir,None,gp_Ax2)
gp_Ax2._CSFDB_Getgp_Ax2vxdir = new_instancemethod(_gp.gp_Ax2__CSFDB_Getgp_Ax2vxdir,None,gp_Ax2)
gp_Ax2._kill_pointed = new_instancemethod(_gp.gp_Ax2__kill_pointed,None,gp_Ax2)
gp_Ax2_swigregister = _gp.gp_Ax2_swigregister
gp_Ax2_swigregister(gp_Ax2)

class gp_Ax22d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an object representing the reference  co-ordinate system (OXY).

        :rtype: None

        * Creates a coordinate system with origin P and where: - Vx is the 'X Direction', and - the 'Y Direction' is orthogonal to Vx and oriented so that the cross products Vx^'Y Direction' and Vx^Vy have the same sign. Raises ConstructionError if Vx and Vy are parallel (same or opposite orientation).

        :param P:
        :type P: gp_Pnt2d
        :param Vx:
        :type Vx: gp_Dir2d
        :param Vy:
        :type Vy: gp_Dir2d
        :rtype: None

        * Creates - a coordinate system with origin P and 'X Direction' V, which is: - right-handed if Sense is true (default value), or - left-handed if Sense is false

        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Dir2d
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * Creates - a coordinate system where its origin is the origin of A and its 'X Direction' is the unit vector of A, which is: - right-handed if Sense is true (default value), or - left-handed if Sense is false.

        :param A:
        :type A: gp_Ax2d
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        """
        _gp.gp_Ax22d_swiginit(self,_gp.new_gp_Ax22d(*args))
    def SetAxis(self, *args):
        """
        * Assigns the origin and the two unit vectors of the coordinate system A1 to this coordinate system.

        :param A1:
        :type A1: gp_Ax22d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetAxis(self, *args)

    def SetXAxis(self, *args):
        """
        * Changes the XAxis and YAxis ('Location' point and 'Direction') of <self>. The 'YDirection' is recomputed in the same sense as before.

        :param A1:
        :type A1: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        """
        * Changes the XAxis and YAxis ('Location' point and 'Direction') of <self>. The 'XDirection' is recomputed in the same sense as before.

        :param A1:
        :type A1: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetYAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the 'Location' point (origin) of <self>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetLocation(self, *args)

    def SetXDirection(self, *args):
        """
        * Assigns Vx to the 'X Direction' of this coordinate system. The other unit vector of this coordinate system is recomputed, normal to Vx , without modifying the orientation (right-handed or left-handed) of this coordinate system.

        :param Vx:
        :type Vx: gp_Dir2d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetXDirection(self, *args)

    def SetYDirection(self, *args):
        """
        * Assignsr Vy to the 'Y Direction' of this coordinate system. The other unit vector of this coordinate system is recomputed, normal to Vy, without modifying the orientation (right-handed or left-handed) of this coordinate system.

        :param Vy:
        :type Vy: gp_Dir2d
        :rtype: None

        """
        return _gp.gp_Ax22d_SetYDirection(self, *args)

    def XAxis(self, *args):
        """
        * Returns an axis, for which - the origin is that of this coordinate system, and - the unit vector is either the 'X Direction' of this coordinate system. Note: the result is the 'X Axis' of this coordinate system.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax22d_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns an axis, for which - the origin is that of this coordinate system, and - the unit vector is either the 'Y Direction' of this coordinate system. Note: the result is the 'Y Axis' of this coordinate system.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax22d_YAxis(self, *args)

    def Location(self, *args):
        """
        * Returns the 'Location' point (origin) of <self>.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Ax22d_Location(self, *args)

    def XDirection(self, *args):
        """
        * Returns the 'XDirection' of <self>.

        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax22d_XDirection(self, *args)

    def YDirection(self, *args):
        """
        * Returns the 'YDirection' of <self>.

        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax22d_YDirection(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Ax22d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry. Warnings : The main direction of the axis placement is not changed. The 'XDirection' and the 'YDirection' are reversed. So the axis placement stay right handed.

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Ax22d

        * Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry. The transformation is performed on the 'Location' point, on the 'XDirection' and 'YDirection'. The resulting main 'Direction' is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Ax22d

        """
        return _gp.gp_Ax22d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Ax22d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an axis placement. <A1> is the axis of the rotation . Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Ax22d

        """
        return _gp.gp_Ax22d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Ax22d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Applies a scaling transformation on the axis placement. The 'Location' point of the axisplacement is modified. Warnings : If the scale <S> is negative : . the main direction of the axis placement is not changed. . The 'XDirection' and the 'YDirection' are reversed. So the axis placement stay right handed.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Ax22d

        """
        return _gp.gp_Ax22d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Ax22d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an axis placement with a Trsf. The 'Location' point, the 'XDirection' and the 'YDirection' are transformed with T. The resulting main 'Direction' of <self> is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Ax22d

        """
        return _gp.gp_Ax22d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Ax22d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an axis plaxement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Ax22d

        * Translates an axis placement from the point <P1> to the point <P2>.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Ax22d

        """
        return _gp.gp_Ax22d_Translated(self, *args)

    def _CSFDB_Getgp_Ax22dpoint(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Ax22d__CSFDB_Getgp_Ax22dpoint(self, *args)

    def _CSFDB_Getgp_Ax22dvydir(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax22d__CSFDB_Getgp_Ax22dvydir(self, *args)

    def _CSFDB_Getgp_Ax22dvxdir(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax22d__CSFDB_Getgp_Ax22dvxdir(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Ax22d.SetAxis = new_instancemethod(_gp.gp_Ax22d_SetAxis,None,gp_Ax22d)
gp_Ax22d.SetXAxis = new_instancemethod(_gp.gp_Ax22d_SetXAxis,None,gp_Ax22d)
gp_Ax22d.SetYAxis = new_instancemethod(_gp.gp_Ax22d_SetYAxis,None,gp_Ax22d)
gp_Ax22d.SetLocation = new_instancemethod(_gp.gp_Ax22d_SetLocation,None,gp_Ax22d)
gp_Ax22d.SetXDirection = new_instancemethod(_gp.gp_Ax22d_SetXDirection,None,gp_Ax22d)
gp_Ax22d.SetYDirection = new_instancemethod(_gp.gp_Ax22d_SetYDirection,None,gp_Ax22d)
gp_Ax22d.XAxis = new_instancemethod(_gp.gp_Ax22d_XAxis,None,gp_Ax22d)
gp_Ax22d.YAxis = new_instancemethod(_gp.gp_Ax22d_YAxis,None,gp_Ax22d)
gp_Ax22d.Location = new_instancemethod(_gp.gp_Ax22d_Location,None,gp_Ax22d)
gp_Ax22d.XDirection = new_instancemethod(_gp.gp_Ax22d_XDirection,None,gp_Ax22d)
gp_Ax22d.YDirection = new_instancemethod(_gp.gp_Ax22d_YDirection,None,gp_Ax22d)
gp_Ax22d.Mirror = new_instancemethod(_gp.gp_Ax22d_Mirror,None,gp_Ax22d)
gp_Ax22d.Mirrored = new_instancemethod(_gp.gp_Ax22d_Mirrored,None,gp_Ax22d)
gp_Ax22d.Rotate = new_instancemethod(_gp.gp_Ax22d_Rotate,None,gp_Ax22d)
gp_Ax22d.Rotated = new_instancemethod(_gp.gp_Ax22d_Rotated,None,gp_Ax22d)
gp_Ax22d.Scale = new_instancemethod(_gp.gp_Ax22d_Scale,None,gp_Ax22d)
gp_Ax22d.Scaled = new_instancemethod(_gp.gp_Ax22d_Scaled,None,gp_Ax22d)
gp_Ax22d.Transform = new_instancemethod(_gp.gp_Ax22d_Transform,None,gp_Ax22d)
gp_Ax22d.Transformed = new_instancemethod(_gp.gp_Ax22d_Transformed,None,gp_Ax22d)
gp_Ax22d.Translate = new_instancemethod(_gp.gp_Ax22d_Translate,None,gp_Ax22d)
gp_Ax22d.Translated = new_instancemethod(_gp.gp_Ax22d_Translated,None,gp_Ax22d)
gp_Ax22d._CSFDB_Getgp_Ax22dpoint = new_instancemethod(_gp.gp_Ax22d__CSFDB_Getgp_Ax22dpoint,None,gp_Ax22d)
gp_Ax22d._CSFDB_Getgp_Ax22dvydir = new_instancemethod(_gp.gp_Ax22d__CSFDB_Getgp_Ax22dvydir,None,gp_Ax22d)
gp_Ax22d._CSFDB_Getgp_Ax22dvxdir = new_instancemethod(_gp.gp_Ax22d__CSFDB_Getgp_Ax22dvxdir,None,gp_Ax22d)
gp_Ax22d._kill_pointed = new_instancemethod(_gp.gp_Ax22d__kill_pointed,None,gp_Ax22d)
gp_Ax22d_swigregister = _gp.gp_Ax22d_swigregister
gp_Ax22d_swigregister(gp_Ax22d)

class gp_Ax2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an axis object representing X axis of  the reference co-ordinate system.

        :rtype: None

        * Creates an Ax2d. <P> is the 'Location' point of the axis placement and V is the 'Direction' of the axis placement.

        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Dir2d
        :rtype: None

        """
        _gp.gp_Ax2d_swiginit(self,_gp.new_gp_Ax2d(*args))
    def SetLocation(self, *args):
        """
        * Changes the 'Location' point (origin) of <self>.

        :param Locat:
        :type Locat: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Ax2d_SetLocation(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the direction of <self>.

        :param V:
        :type V: gp_Dir2d
        :rtype: None

        """
        return _gp.gp_Ax2d_SetDirection(self, *args)

    def Location(self, *args):
        """
        * Returns the origin of <self>.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Ax2d_Location(self, *args)

    def Direction(self, *args):
        """
        * Returns the direction of <self>.

        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax2d_Direction(self, *args)

    def IsCoaxial(self, *args):
        """
        * Returns True if : . the angle between <self> and <Other> is lower or equal to <AngularTolerance> and . the distance between <self>.Location() and <Other> is lower or equal to <LinearTolerance> and . the distance between <Other>.Location() and <self> is lower or equal to LinearTolerance.

        :param Other:
        :type Other: gp_Ax2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax2d_IsCoaxial(self, *args)

    def IsNormal(self, *args):
        """
        * Returns true if this axis and the axis Other are normal to each other. That is, if the angle between the two axes is equal to Pi/2 or -Pi/2. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Ax2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax2d_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns true if this axis and the axis Other are parallel, and have opposite orientations. That is, if the angle between the two axes is equal to Pi or -Pi. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Ax2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax2d_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * Returns true if this axis and the axis Other are parallel, and have either the same or opposite orientations. That is, if the angle between the two axes is equal to 0, Pi or -Pi. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Ax2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax2d_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angle, in radians, between this axis and the axis Other. The value of the angle is between -Pi and Pi.

        :param Other:
        :type Other: gp_Ax2d
        :rtype: float

        """
        return _gp.gp_Ax2d_Angle(self, *args)

    def Reverse(self, *args):
        """
        * Reverses the direction of <self> and assigns the result to this axis.

        :rtype: None

        """
        return _gp.gp_Ax2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Computes a new axis placement with a direction opposite to the direction of <self>.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Reversed(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Ax2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Ax2d

        * Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Ax2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an axis placement. <P> is the center of the rotation . Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Ax2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Applies a scaling transformation on the axis placement. The 'Location' point of the axisplacement is modified. The 'Direction' is reversed if the scale is negative.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Ax2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an axis placement with a Trsf.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Ax2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an axis placement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Ax2d

        * Translates an axis placement from the point <P1> to the point <P2>.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Ax2d

        """
        return _gp.gp_Ax2d_Translated(self, *args)

    def _CSFDB_Getgp_Ax2dloc(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Ax2d__CSFDB_Getgp_Ax2dloc(self, *args)

    def _CSFDB_Getgp_Ax2dvdir(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _gp.gp_Ax2d__CSFDB_Getgp_Ax2dvdir(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Ax2d.SetLocation = new_instancemethod(_gp.gp_Ax2d_SetLocation,None,gp_Ax2d)
gp_Ax2d.SetDirection = new_instancemethod(_gp.gp_Ax2d_SetDirection,None,gp_Ax2d)
gp_Ax2d.Location = new_instancemethod(_gp.gp_Ax2d_Location,None,gp_Ax2d)
gp_Ax2d.Direction = new_instancemethod(_gp.gp_Ax2d_Direction,None,gp_Ax2d)
gp_Ax2d.IsCoaxial = new_instancemethod(_gp.gp_Ax2d_IsCoaxial,None,gp_Ax2d)
gp_Ax2d.IsNormal = new_instancemethod(_gp.gp_Ax2d_IsNormal,None,gp_Ax2d)
gp_Ax2d.IsOpposite = new_instancemethod(_gp.gp_Ax2d_IsOpposite,None,gp_Ax2d)
gp_Ax2d.IsParallel = new_instancemethod(_gp.gp_Ax2d_IsParallel,None,gp_Ax2d)
gp_Ax2d.Angle = new_instancemethod(_gp.gp_Ax2d_Angle,None,gp_Ax2d)
gp_Ax2d.Reverse = new_instancemethod(_gp.gp_Ax2d_Reverse,None,gp_Ax2d)
gp_Ax2d.Reversed = new_instancemethod(_gp.gp_Ax2d_Reversed,None,gp_Ax2d)
gp_Ax2d.Mirror = new_instancemethod(_gp.gp_Ax2d_Mirror,None,gp_Ax2d)
gp_Ax2d.Mirrored = new_instancemethod(_gp.gp_Ax2d_Mirrored,None,gp_Ax2d)
gp_Ax2d.Rotate = new_instancemethod(_gp.gp_Ax2d_Rotate,None,gp_Ax2d)
gp_Ax2d.Rotated = new_instancemethod(_gp.gp_Ax2d_Rotated,None,gp_Ax2d)
gp_Ax2d.Scale = new_instancemethod(_gp.gp_Ax2d_Scale,None,gp_Ax2d)
gp_Ax2d.Scaled = new_instancemethod(_gp.gp_Ax2d_Scaled,None,gp_Ax2d)
gp_Ax2d.Transform = new_instancemethod(_gp.gp_Ax2d_Transform,None,gp_Ax2d)
gp_Ax2d.Transformed = new_instancemethod(_gp.gp_Ax2d_Transformed,None,gp_Ax2d)
gp_Ax2d.Translate = new_instancemethod(_gp.gp_Ax2d_Translate,None,gp_Ax2d)
gp_Ax2d.Translated = new_instancemethod(_gp.gp_Ax2d_Translated,None,gp_Ax2d)
gp_Ax2d._CSFDB_Getgp_Ax2dloc = new_instancemethod(_gp.gp_Ax2d__CSFDB_Getgp_Ax2dloc,None,gp_Ax2d)
gp_Ax2d._CSFDB_Getgp_Ax2dvdir = new_instancemethod(_gp.gp_Ax2d__CSFDB_Getgp_Ax2dvdir,None,gp_Ax2d)
gp_Ax2d._kill_pointed = new_instancemethod(_gp.gp_Ax2d__kill_pointed,None,gp_Ax2d)
gp_Ax2d_swigregister = _gp.gp_Ax2d_swigregister
gp_Ax2d_swigregister(gp_Ax2d)

class gp_Ax3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an object corresponding to the reference  coordinate system (OXYZ).

        :rtype: None

        * Creates a coordinate system from a right-handed coordinate system.

        :param A:
        :type A: gp_Ax2
        :rtype: None

        * Creates a right handed axis placement with the 'Location' point P and two directions, N gives the 'Direction' and Vx gives the 'XDirection'. Raises ConstructionError if N and Vx are parallel (same or opposite orientation).

        :param P:
        :type P: gp_Pnt
        :param N:
        :type N: gp_Dir
        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        * Creates an axis placement with the 'Location' point <P> and the normal direction <V>.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _gp.gp_Ax3_swiginit(self,_gp.new_gp_Ax3(*args))
    def XReverse(self, *args):
        """
        * Reverses the X direction of <self>.

        :rtype: None

        """
        return _gp.gp_Ax3_XReverse(self, *args)

    def YReverse(self, *args):
        """
        * Reverses the Y direction of <self>.

        :rtype: None

        """
        return _gp.gp_Ax3_YReverse(self, *args)

    def ZReverse(self, *args):
        """
        * Reverses the Z direction of <self>.

        :rtype: None

        """
        return _gp.gp_Ax3_ZReverse(self, *args)

    def SetAxis(self, *args):
        """
        * Assigns the origin and 'main Direction' of the axis A1 to this coordinate system, then recomputes its 'X Direction' and 'Y Direction'. Note: - The new 'X Direction' is computed as follows: new 'X Direction' = V1 ^(previous 'X Direction' ^ V) where V is the 'Direction' of A1. - The orientation of this coordinate system (right-handed or left-handed) is not modified. Raises ConstructionError if the 'Direction' of <A1> and the 'XDirection' of <self> are parallel (same or opposite orientation) because it is impossible to calculate the new 'XDirection' and the new 'YDirection'.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Ax3_SetAxis(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the main direction of this coordinate system, then recomputes its 'X Direction' and 'Y Direction'. Note: - The new 'X Direction' is computed as follows: new 'X Direction' = V ^ (previous 'X Direction' ^ V). - The orientation of this coordinate system (left- or right-handed) is not modified. Raises ConstructionError if <V< and the previous 'XDirection' are parallel because it is impossible to calculate the new 'XDirection' and the new 'YDirection'.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax3_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the 'Location' point (origin) of <self>.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax3_SetLocation(self, *args)

    def SetXDirection(self, *args):
        """
        * Changes the 'Xdirection' of <self>. The main direction 'Direction' is not modified, the 'Ydirection' is modified. If <Vx> is not normal to the main direction then <XDirection> is computed as follows XDirection = Direction ^ (Vx ^ Direction). Raises ConstructionError if <Vx> is parallel (same or opposite orientation) to the main direction of <self>

        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax3_SetXDirection(self, *args)

    def SetYDirection(self, *args):
        """
        * Changes the 'Ydirection' of <self>. The main direction is not modified but the 'Xdirection' is changed. If <Vy> is not normal to the main direction then 'YDirection' is computed as follows YDirection = Direction ^ (<Vy> ^ Direction). Raises ConstructionError if <Vy> is parallel to the main direction of <self>

        :param Vy:
        :type Vy: gp_Dir
        :rtype: None

        """
        return _gp.gp_Ax3_SetYDirection(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value between the main direction of <self> and the main direction of <Other>. Returns the angle between 0 and PI in radians.

        :param Other:
        :type Other: gp_Ax3
        :rtype: float

        """
        return _gp.gp_Ax3_Angle(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of <self>. It is the 'Location' point and the main 'Direction'.

        :rtype: gp_Ax1

        """
        return _gp.gp_Ax3_Axis(self, *args)

    def Ax2(self, *args):
        """
        * Computes a right-handed coordinate system with the same 'X Direction' and 'Y Direction' as those of this coordinate system, then recomputes the 'main Direction'. If this coordinate system is right-handed, the result returned is the same coordinate system. If this coordinate system is left-handed, the result is reversed.

        :rtype: gp_Ax2

        """
        return _gp.gp_Ax3_Ax2(self, *args)

    def Direction(self, *args):
        """
        * Returns the main direction of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax3_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the 'Location' point (origin) of <self>.

        :rtype: gp_Pnt

        """
        return _gp.gp_Ax3_Location(self, *args)

    def XDirection(self, *args):
        """
        * Returns the 'XDirection' of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax3_XDirection(self, *args)

    def YDirection(self, *args):
        """
        * Returns the 'YDirection' of <self>.

        :rtype: gp_Dir

        """
        return _gp.gp_Ax3_YDirection(self, *args)

    def Direct(self, *args):
        """
        * Returns True if the coordinate system is right-handed. i.e. XDirection().Crossed(YDirection()).Dot(Direction()) > 0

        :rtype: bool

        """
        return _gp.gp_Ax3_Direct(self, *args)

    def IsCoplanar(self, *args):
        """
        * Returns True if . the distance between the 'Location' point of <self> and <Other> is lower or equal to LinearTolerance and . the distance between the 'Location' point of <Other> and <self> is lower or equal to LinearTolerance and . the main direction of <self> and the main direction of <Other> are parallel (same or opposite orientation).

        :param Other:
        :type Other: gp_Ax3
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        * Returns True if . the distance between <self> and the 'Location' point of A1 is lower of equal to LinearTolerance and . the distance between A1 and the 'Location' point of <self> is lower or equal to LinearTolerance and . the main direction of <self> and the direction of A1 are normal.

        :param A1:
        :type A1: gp_Ax1
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Ax3_IsCoplanar(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Ax3_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry. Warnings : The main direction of the axis placement is not changed. The 'XDirection' and the 'YDirection' are reversed. So the axis placement stay right handed.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Ax3

        * Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry. The transformation is performed on the 'Location' point, on the 'XDirection' and 'YDirection'. The resulting main 'Direction' is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Ax3

        * Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection). The transformation is performed on the 'Location' point, on the 'XDirection' and 'YDirection'. The resulting main 'Direction' is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Ax3

        """
        return _gp.gp_Ax3_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Ax3_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an axis placement. <A1> is the axis of the rotation . Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Ax3

        """
        return _gp.gp_Ax3_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Ax3_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Applies a scaling transformation on the axis placement. The 'Location' point of the axisplacement is modified. Warnings : If the scale <S> is negative : . the main direction of the axis placement is not changed. . The 'XDirection' and the 'YDirection' are reversed. So the axis placement stay right handed.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Ax3

        """
        return _gp.gp_Ax3_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Ax3_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an axis placement with a Trsf. The 'Location' point, the 'XDirection' and the 'YDirection' are transformed with T. The resulting main 'Direction' of <self> is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Ax3

        """
        return _gp.gp_Ax3_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Ax3_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an axis plaxement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Ax3

        * Translates an axis placement from the point <P1> to the point <P2>.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Ax3

        """
        return _gp.gp_Ax3_Translated(self, *args)

    def _CSFDB_Getgp_Ax3axis(self, *args):
        """
        :rtype: gp_Ax1

        """
        return _gp.gp_Ax3__CSFDB_Getgp_Ax3axis(self, *args)

    def _CSFDB_Getgp_Ax3vydir(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Ax3__CSFDB_Getgp_Ax3vydir(self, *args)

    def _CSFDB_Getgp_Ax3vxdir(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Ax3__CSFDB_Getgp_Ax3vxdir(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Ax3.XReverse = new_instancemethod(_gp.gp_Ax3_XReverse,None,gp_Ax3)
gp_Ax3.YReverse = new_instancemethod(_gp.gp_Ax3_YReverse,None,gp_Ax3)
gp_Ax3.ZReverse = new_instancemethod(_gp.gp_Ax3_ZReverse,None,gp_Ax3)
gp_Ax3.SetAxis = new_instancemethod(_gp.gp_Ax3_SetAxis,None,gp_Ax3)
gp_Ax3.SetDirection = new_instancemethod(_gp.gp_Ax3_SetDirection,None,gp_Ax3)
gp_Ax3.SetLocation = new_instancemethod(_gp.gp_Ax3_SetLocation,None,gp_Ax3)
gp_Ax3.SetXDirection = new_instancemethod(_gp.gp_Ax3_SetXDirection,None,gp_Ax3)
gp_Ax3.SetYDirection = new_instancemethod(_gp.gp_Ax3_SetYDirection,None,gp_Ax3)
gp_Ax3.Angle = new_instancemethod(_gp.gp_Ax3_Angle,None,gp_Ax3)
gp_Ax3.Axis = new_instancemethod(_gp.gp_Ax3_Axis,None,gp_Ax3)
gp_Ax3.Ax2 = new_instancemethod(_gp.gp_Ax3_Ax2,None,gp_Ax3)
gp_Ax3.Direction = new_instancemethod(_gp.gp_Ax3_Direction,None,gp_Ax3)
gp_Ax3.Location = new_instancemethod(_gp.gp_Ax3_Location,None,gp_Ax3)
gp_Ax3.XDirection = new_instancemethod(_gp.gp_Ax3_XDirection,None,gp_Ax3)
gp_Ax3.YDirection = new_instancemethod(_gp.gp_Ax3_YDirection,None,gp_Ax3)
gp_Ax3.Direct = new_instancemethod(_gp.gp_Ax3_Direct,None,gp_Ax3)
gp_Ax3.IsCoplanar = new_instancemethod(_gp.gp_Ax3_IsCoplanar,None,gp_Ax3)
gp_Ax3.Mirror = new_instancemethod(_gp.gp_Ax3_Mirror,None,gp_Ax3)
gp_Ax3.Mirrored = new_instancemethod(_gp.gp_Ax3_Mirrored,None,gp_Ax3)
gp_Ax3.Rotate = new_instancemethod(_gp.gp_Ax3_Rotate,None,gp_Ax3)
gp_Ax3.Rotated = new_instancemethod(_gp.gp_Ax3_Rotated,None,gp_Ax3)
gp_Ax3.Scale = new_instancemethod(_gp.gp_Ax3_Scale,None,gp_Ax3)
gp_Ax3.Scaled = new_instancemethod(_gp.gp_Ax3_Scaled,None,gp_Ax3)
gp_Ax3.Transform = new_instancemethod(_gp.gp_Ax3_Transform,None,gp_Ax3)
gp_Ax3.Transformed = new_instancemethod(_gp.gp_Ax3_Transformed,None,gp_Ax3)
gp_Ax3.Translate = new_instancemethod(_gp.gp_Ax3_Translate,None,gp_Ax3)
gp_Ax3.Translated = new_instancemethod(_gp.gp_Ax3_Translated,None,gp_Ax3)
gp_Ax3._CSFDB_Getgp_Ax3axis = new_instancemethod(_gp.gp_Ax3__CSFDB_Getgp_Ax3axis,None,gp_Ax3)
gp_Ax3._CSFDB_Getgp_Ax3vydir = new_instancemethod(_gp.gp_Ax3__CSFDB_Getgp_Ax3vydir,None,gp_Ax3)
gp_Ax3._CSFDB_Getgp_Ax3vxdir = new_instancemethod(_gp.gp_Ax3__CSFDB_Getgp_Ax3vxdir,None,gp_Ax3)
gp_Ax3._kill_pointed = new_instancemethod(_gp.gp_Ax3__kill_pointed,None,gp_Ax3)
gp_Ax3_swigregister = _gp.gp_Ax3_swigregister
gp_Ax3_swigregister(gp_Ax3)

class gp_Circ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite circle.

        :rtype: None

        * A2 locates the circle and gives its orientation in 3D space. Warnings : It is not forbidden to create a circle with Radius = 0.0 Raises ConstructionError if Radius < 0.0

        :param A2:
        :type A2: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _gp.gp_Circ_swiginit(self,_gp.new_gp_Circ(*args))
    def SetAxis(self, *args):
        """
        * Changes the main axis of the circle. It is the axis perpendicular to the plane of the circle. Raises ConstructionError if the direction of A1 is parallel to the 'XAxis' of the circle.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Circ_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the 'Location' point (center) of the circle.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Circ_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the position of the circle.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Circ_SetPosition(self, *args)

    def SetRadius(self, *args):
        """
        * Modifies the radius of this circle. Warning. This class does not prevent the creation of a circle where Radius is null. Exceptions Standard_ConstructionError if Radius is negative.

        :param Radius:
        :type Radius: float
        :rtype: None

        """
        return _gp.gp_Circ_SetRadius(self, *args)

    def Area(self, *args):
        """
        * Computes the area of the circle.

        :rtype: float

        """
        return _gp.gp_Circ_Area(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of the circle. It is the axis perpendicular to the plane of the circle, passing through the 'Location' point (center) of the circle.

        :rtype: gp_Ax1

        """
        return _gp.gp_Circ_Axis(self, *args)

    def Length(self, *args):
        """
        * Computes the circumference of the circle.

        :rtype: float

        """
        return _gp.gp_Circ_Length(self, *args)

    def Location(self, *args):
        """
        * Returns the center of the circle. It is the 'Location' point of the local coordinate system of the circle

        :rtype: gp_Pnt

        """
        return _gp.gp_Circ_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the position of the circle. It is the local coordinate system of the circle.

        :rtype: gp_Ax2

        """
        return _gp.gp_Circ_Position(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius of this circle.

        :rtype: float

        """
        return _gp.gp_Circ_Radius(self, *args)

    def XAxis(self, *args):
        """
        * Returns the 'XAxis' of the circle. This axis is perpendicular to the axis of the conic. This axis and the 'Yaxis' define the plane of the conic.

        :rtype: gp_Ax1

        """
        return _gp.gp_Circ_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the 'YAxis' of the circle. This axis and the 'Xaxis' define the plane of the conic. The 'YAxis' is perpendicular to the 'Xaxis'.

        :rtype: gp_Ax1

        """
        return _gp.gp_Circ_YAxis(self, *args)

    def Distance(self, *args):
        """
        * Computes the minimum of distance between the point P and any point on the circumference of the circle.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        """
        return _gp.gp_Circ_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and the point P.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        """
        return _gp.gp_Circ_SquareDistance(self, *args)

    def Contains(self, *args):
        """
        * Returns True if the point P is on the circumference. The distance between <self> and <P> must be lower or equal to LinearTolerance.

        :param P:
        :type P: gp_Pnt
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Circ_Contains(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Circ_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a circle with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Circ

        * Performs the symmetrical transformation of a circle with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Circ

        * Performs the symmetrical transformation of a circle with respect to a plane. The axis placement A2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Circ

        """
        return _gp.gp_Circ_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Circ_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a circle. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Circ

        """
        return _gp.gp_Circ_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Circ_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a circle. S is the scaling value. Warnings : If S is negative the radius stay positive but the 'XAxis' and the 'YAxis' are reversed as for an ellipse.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Circ

        """
        return _gp.gp_Circ_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Circ_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a circle with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Circ

        """
        return _gp.gp_Circ_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Circ_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a circle in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Circ

        * Translates a circle from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Circ

        """
        return _gp.gp_Circ_Translated(self, *args)

    def _CSFDB_Getgp_Circpos(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _gp.gp_Circ__CSFDB_Getgp_Circpos(self, *args)

    def _CSFDB_Getgp_Circradius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Circ__CSFDB_Getgp_Circradius(self, *args)

    def _CSFDB_Setgp_Circradius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Circ__CSFDB_Setgp_Circradius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Circ.SetAxis = new_instancemethod(_gp.gp_Circ_SetAxis,None,gp_Circ)
gp_Circ.SetLocation = new_instancemethod(_gp.gp_Circ_SetLocation,None,gp_Circ)
gp_Circ.SetPosition = new_instancemethod(_gp.gp_Circ_SetPosition,None,gp_Circ)
gp_Circ.SetRadius = new_instancemethod(_gp.gp_Circ_SetRadius,None,gp_Circ)
gp_Circ.Area = new_instancemethod(_gp.gp_Circ_Area,None,gp_Circ)
gp_Circ.Axis = new_instancemethod(_gp.gp_Circ_Axis,None,gp_Circ)
gp_Circ.Length = new_instancemethod(_gp.gp_Circ_Length,None,gp_Circ)
gp_Circ.Location = new_instancemethod(_gp.gp_Circ_Location,None,gp_Circ)
gp_Circ.Position = new_instancemethod(_gp.gp_Circ_Position,None,gp_Circ)
gp_Circ.Radius = new_instancemethod(_gp.gp_Circ_Radius,None,gp_Circ)
gp_Circ.XAxis = new_instancemethod(_gp.gp_Circ_XAxis,None,gp_Circ)
gp_Circ.YAxis = new_instancemethod(_gp.gp_Circ_YAxis,None,gp_Circ)
gp_Circ.Distance = new_instancemethod(_gp.gp_Circ_Distance,None,gp_Circ)
gp_Circ.SquareDistance = new_instancemethod(_gp.gp_Circ_SquareDistance,None,gp_Circ)
gp_Circ.Contains = new_instancemethod(_gp.gp_Circ_Contains,None,gp_Circ)
gp_Circ.Mirror = new_instancemethod(_gp.gp_Circ_Mirror,None,gp_Circ)
gp_Circ.Mirrored = new_instancemethod(_gp.gp_Circ_Mirrored,None,gp_Circ)
gp_Circ.Rotate = new_instancemethod(_gp.gp_Circ_Rotate,None,gp_Circ)
gp_Circ.Rotated = new_instancemethod(_gp.gp_Circ_Rotated,None,gp_Circ)
gp_Circ.Scale = new_instancemethod(_gp.gp_Circ_Scale,None,gp_Circ)
gp_Circ.Scaled = new_instancemethod(_gp.gp_Circ_Scaled,None,gp_Circ)
gp_Circ.Transform = new_instancemethod(_gp.gp_Circ_Transform,None,gp_Circ)
gp_Circ.Transformed = new_instancemethod(_gp.gp_Circ_Transformed,None,gp_Circ)
gp_Circ.Translate = new_instancemethod(_gp.gp_Circ_Translate,None,gp_Circ)
gp_Circ.Translated = new_instancemethod(_gp.gp_Circ_Translated,None,gp_Circ)
gp_Circ._CSFDB_Getgp_Circpos = new_instancemethod(_gp.gp_Circ__CSFDB_Getgp_Circpos,None,gp_Circ)
gp_Circ._CSFDB_Getgp_Circradius = new_instancemethod(_gp.gp_Circ__CSFDB_Getgp_Circradius,None,gp_Circ)
gp_Circ._CSFDB_Setgp_Circradius = new_instancemethod(_gp.gp_Circ__CSFDB_Setgp_Circradius,None,gp_Circ)
gp_Circ._kill_pointed = new_instancemethod(_gp.gp_Circ__kill_pointed,None,gp_Circ)
gp_Circ_swigregister = _gp.gp_Circ_swigregister
gp_Circ_swigregister(gp_Circ)

class gp_Circ2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * creates an indefinite circle.

        :rtype: None

        * The location point of XAxis is the center of the circle. Warnings : It is not forbidden to create a circle with Radius = 0.0 Raises ConstructionError if Radius < 0.0. Raised if Radius < 0.0.

        :param XAxis:
        :type XAxis: gp_Ax2d
        :param Radius:
        :type Radius: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * Axis defines the Xaxis and Yaxis of the circle which defines the origin and the sense of parametrization. The location point of Axis is the center of the circle. Warnings : It is not forbidden to create a circle with Radius = 0.0 Raises ConstructionError if Radius < 0.0. Raised if Radius < 0.0.

        :param Axis:
        :type Axis: gp_Ax22d
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _gp.gp_Circ2d_swiginit(self,_gp.new_gp_Circ2d(*args))
    def SetLocation(self, *args):
        """
        * Changes the location point (center) of the circle.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Circ2d_SetLocation(self, *args)

    def SetXAxis(self, *args):
        """
        * Changes the X axis of the circle.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Circ2d_SetXAxis(self, *args)

    def SetAxis(self, *args):
        """
        * Changes the X axis of the circle.

        :param A:
        :type A: gp_Ax22d
        :rtype: None

        """
        return _gp.gp_Circ2d_SetAxis(self, *args)

    def SetYAxis(self, *args):
        """
        * Changes the Y axis of the circle.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Circ2d_SetYAxis(self, *args)

    def SetRadius(self, *args):
        """
        * Modifies the radius of this circle. This class does not prevent the creation of a circle where Radius is null. Exceptions Standard_ConstructionError if Radius is negative.

        :param Radius:
        :type Radius: float
        :rtype: None

        """
        return _gp.gp_Circ2d_SetRadius(self, *args)

    def Area(self, *args):
        """
        * Computes the area of the circle.

        :rtype: float

        """
        return _gp.gp_Circ2d_Area(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the normalized coefficients from the implicit equation of the circle : A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0.0

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :param E:
        :type E: float
        :param F:
        :type F: float
        :rtype: None

        """
        return _gp.gp_Circ2d_Coefficients(self, *args)

    def Contains(self, *args):
        """
        * Does <self> contain P ? Returns True if the distance between P and any point on the circumference of the circle is lower of equal to <LinearTolerance>.

        :param P:
        :type P: gp_Pnt2d
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Circ2d_Contains(self, *args)

    def Distance(self, *args):
        """
        * Computes the minimum of distance between the point P and any point on the circumference of the circle.

        :param P:
        :type P: gp_Pnt2d
        :rtype: float

        """
        return _gp.gp_Circ2d_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and the point P.

        :param P:
        :type P: gp_Pnt2d
        :rtype: float

        """
        return _gp.gp_Circ2d_SquareDistance(self, *args)

    def Length(self, *args):
        """
        * computes the circumference of the circle.

        :rtype: float

        """
        return _gp.gp_Circ2d_Length(self, *args)

    def Location(self, *args):
        """
        * Returns the location point (center) of the circle.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Circ2d_Location(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius value of the circle.

        :rtype: float

        """
        return _gp.gp_Circ2d_Radius(self, *args)

    def Axis(self, *args):
        """
        * returns the position of the circle.

        :rtype: gp_Ax22d

        """
        return _gp.gp_Circ2d_Axis(self, *args)

    def Position(self, *args):
        """
        * returns the position of the circle. Idem Axis(me).

        :rtype: gp_Ax22d

        """
        return _gp.gp_Circ2d_Position(self, *args)

    def XAxis(self, *args):
        """
        * returns the X axis of the circle.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Circ2d_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the Y axis of the circle. Reverses the direction of the circle.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Circ2d_YAxis(self, *args)

    def Reverse(self, *args):
        """
        * Reverses the orientation of the local coordinate system of this circle (the 'Y Direction' is reversed) and therefore changes the implicit orientation of this circle. Reverse assigns the result to this circle,

        :rtype: None

        """
        return _gp.gp_Circ2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the orientation of the local coordinate system of this circle (the 'Y Direction' is reversed) and therefore changes the implicit orientation of this circle. Reversed creates a new circle.

        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Reversed(self, *args)

    def IsDirect(self, *args):
        """
        * Returns true if the local coordinate system is direct and false in the other case.

        :rtype: bool

        """
        return _gp.gp_Circ2d_IsDirect(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Circ2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a circle with respect to the point P which is the center of the symmetry

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Circ2d

        * Performs the symmetrical transformation of a circle with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Circ2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a circle. P is the center of the rotation. Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Circ2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a circle. S is the scaling value. Warnings : If S is negative the radius stay positive but the 'XAxis' and the 'YAxis' are reversed as for an ellipse.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Circ2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a circle with the transformation T from class Trsf2d.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Circ2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a circle in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Circ2d

        * Translates a circle from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Circ2d

        """
        return _gp.gp_Circ2d_Translated(self, *args)

    def _CSFDB_Getgp_Circ2dpos(self, *args):
        """
        :rtype: gp_Ax22d

        """
        return _gp.gp_Circ2d__CSFDB_Getgp_Circ2dpos(self, *args)

    def _CSFDB_Getgp_Circ2dradius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Circ2d__CSFDB_Getgp_Circ2dradius(self, *args)

    def _CSFDB_Setgp_Circ2dradius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Circ2d__CSFDB_Setgp_Circ2dradius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Circ2d.SetLocation = new_instancemethod(_gp.gp_Circ2d_SetLocation,None,gp_Circ2d)
gp_Circ2d.SetXAxis = new_instancemethod(_gp.gp_Circ2d_SetXAxis,None,gp_Circ2d)
gp_Circ2d.SetAxis = new_instancemethod(_gp.gp_Circ2d_SetAxis,None,gp_Circ2d)
gp_Circ2d.SetYAxis = new_instancemethod(_gp.gp_Circ2d_SetYAxis,None,gp_Circ2d)
gp_Circ2d.SetRadius = new_instancemethod(_gp.gp_Circ2d_SetRadius,None,gp_Circ2d)
gp_Circ2d.Area = new_instancemethod(_gp.gp_Circ2d_Area,None,gp_Circ2d)
gp_Circ2d.Coefficients = new_instancemethod(_gp.gp_Circ2d_Coefficients,None,gp_Circ2d)
gp_Circ2d.Contains = new_instancemethod(_gp.gp_Circ2d_Contains,None,gp_Circ2d)
gp_Circ2d.Distance = new_instancemethod(_gp.gp_Circ2d_Distance,None,gp_Circ2d)
gp_Circ2d.SquareDistance = new_instancemethod(_gp.gp_Circ2d_SquareDistance,None,gp_Circ2d)
gp_Circ2d.Length = new_instancemethod(_gp.gp_Circ2d_Length,None,gp_Circ2d)
gp_Circ2d.Location = new_instancemethod(_gp.gp_Circ2d_Location,None,gp_Circ2d)
gp_Circ2d.Radius = new_instancemethod(_gp.gp_Circ2d_Radius,None,gp_Circ2d)
gp_Circ2d.Axis = new_instancemethod(_gp.gp_Circ2d_Axis,None,gp_Circ2d)
gp_Circ2d.Position = new_instancemethod(_gp.gp_Circ2d_Position,None,gp_Circ2d)
gp_Circ2d.XAxis = new_instancemethod(_gp.gp_Circ2d_XAxis,None,gp_Circ2d)
gp_Circ2d.YAxis = new_instancemethod(_gp.gp_Circ2d_YAxis,None,gp_Circ2d)
gp_Circ2d.Reverse = new_instancemethod(_gp.gp_Circ2d_Reverse,None,gp_Circ2d)
gp_Circ2d.Reversed = new_instancemethod(_gp.gp_Circ2d_Reversed,None,gp_Circ2d)
gp_Circ2d.IsDirect = new_instancemethod(_gp.gp_Circ2d_IsDirect,None,gp_Circ2d)
gp_Circ2d.Mirror = new_instancemethod(_gp.gp_Circ2d_Mirror,None,gp_Circ2d)
gp_Circ2d.Mirrored = new_instancemethod(_gp.gp_Circ2d_Mirrored,None,gp_Circ2d)
gp_Circ2d.Rotate = new_instancemethod(_gp.gp_Circ2d_Rotate,None,gp_Circ2d)
gp_Circ2d.Rotated = new_instancemethod(_gp.gp_Circ2d_Rotated,None,gp_Circ2d)
gp_Circ2d.Scale = new_instancemethod(_gp.gp_Circ2d_Scale,None,gp_Circ2d)
gp_Circ2d.Scaled = new_instancemethod(_gp.gp_Circ2d_Scaled,None,gp_Circ2d)
gp_Circ2d.Transform = new_instancemethod(_gp.gp_Circ2d_Transform,None,gp_Circ2d)
gp_Circ2d.Transformed = new_instancemethod(_gp.gp_Circ2d_Transformed,None,gp_Circ2d)
gp_Circ2d.Translate = new_instancemethod(_gp.gp_Circ2d_Translate,None,gp_Circ2d)
gp_Circ2d.Translated = new_instancemethod(_gp.gp_Circ2d_Translated,None,gp_Circ2d)
gp_Circ2d._CSFDB_Getgp_Circ2dpos = new_instancemethod(_gp.gp_Circ2d__CSFDB_Getgp_Circ2dpos,None,gp_Circ2d)
gp_Circ2d._CSFDB_Getgp_Circ2dradius = new_instancemethod(_gp.gp_Circ2d__CSFDB_Getgp_Circ2dradius,None,gp_Circ2d)
gp_Circ2d._CSFDB_Setgp_Circ2dradius = new_instancemethod(_gp.gp_Circ2d__CSFDB_Setgp_Circ2dradius,None,gp_Circ2d)
gp_Circ2d._kill_pointed = new_instancemethod(_gp.gp_Circ2d__kill_pointed,None,gp_Circ2d)
gp_Circ2d_swigregister = _gp.gp_Circ2d_swigregister
gp_Circ2d_swigregister(gp_Circ2d)

class gp_Cone(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite Cone.

        :rtype: None

        * Creates an infinite conical surface. A3 locates the cone in the space and defines the reference plane of the surface. Ang is the conical surface semi-angle between 0 and PI/2 radians. Radius is the radius of the circle in the reference plane of the cone. Raises ConstructionError . if Radius is lower than 0.0 . Ang < Resolution from gp or Ang >= (PI/2) - Resolution.

        :param A3:
        :type A3: gp_Ax3
        :param Ang:
        :type Ang: float
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _gp.gp_Cone_swiginit(self,_gp.new_gp_Cone(*args))
    def SetAxis(self, *args):
        """
        * Changes the symmetry axis of the cone. Raises ConstructionError the direction of A1 is parallel to the 'XDirection' of the coordinate system of the cone.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Cone_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location of the cone.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Cone_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinate system of the cone. This coordinate system defines the reference plane of the cone.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Cone_SetPosition(self, *args)

    def SetRadius(self, *args):
        """
        * Changes the radius of the cone in the reference plane of the cone. Raised if R < 0.0

        :param R:
        :type R: float
        :rtype: None

        """
        return _gp.gp_Cone_SetRadius(self, *args)

    def SetSemiAngle(self, *args):
        """
        * Changes the semi-angle of the cone. Ang is the conical surface semi-angle ]0,PI/2[. Raises ConstructionError if Ang < Resolution from gp or Ang >= PI/2 - Resolution

        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Cone_SetSemiAngle(self, *args)

    def Apex(self, *args):
        """
        * Computes the cone's top. The Apex of the cone is on the negative side of the symmetry axis of the cone.

        :rtype: gp_Pnt

        """
        return _gp.gp_Cone_Apex(self, *args)

    def UReverse(self, *args):
        """
        * Reverses the U parametrization of the cone reversing the YAxis.

        :rtype: None

        """
        return _gp.gp_Cone_UReverse(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V parametrization of the cone reversing the ZAxis.

        :rtype: None

        """
        return _gp.gp_Cone_VReverse(self, *args)

    def Direct(self, *args):
        """
        * Returns true if the local coordinate system of this cone is right-handed.

        :rtype: bool

        """
        return _gp.gp_Cone_Direct(self, *args)

    def Axis(self, *args):
        """
        * returns the symmetry axis of the cone.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cone_Axis(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinates system : A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float
        :param A2:
        :type A2: float
        :param A3:
        :type A3: float
        :param B1:
        :type B1: float
        :param B2:
        :type B2: float
        :param B3:
        :type B3: float
        :param C1:
        :type C1: float
        :param C2:
        :type C2: float
        :param C3:
        :type C3: float
        :param D:
        :type D: float
        :rtype: None

        """
        return _gp.gp_Cone_Coefficients(self, *args)

    def Location(self, *args):
        """
        * returns the 'Location' point of the cone.

        :rtype: gp_Pnt

        """
        return _gp.gp_Cone_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinates system of the cone.

        :rtype: gp_Ax3

        """
        return _gp.gp_Cone_Position(self, *args)

    def RefRadius(self, *args):
        """
        * Returns the radius of the cone in the reference plane.

        :rtype: float

        """
        return _gp.gp_Cone_RefRadius(self, *args)

    def SemiAngle(self, *args):
        """
        * Returns the half-angle at the apex of this cone.

        :rtype: float

        """
        return _gp.gp_Cone_SemiAngle(self, *args)

    def XAxis(self, *args):
        """
        * Returns the XAxis of the reference plane.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cone_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the YAxis of the reference plane.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cone_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Cone_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a cone with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Cone

        * Performs the symmetrical transformation of a cone with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Cone

        * Performs the symmetrical transformation of a cone with respect to a plane. The axis placement A2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Cone

        """
        return _gp.gp_Cone_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Cone_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a cone. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Cone

        """
        return _gp.gp_Cone_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Cone_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a cone. S is the scaling value. The absolute value of S is used to scale the cone

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Cone

        """
        return _gp.gp_Cone_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Cone_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a cone with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Cone

        """
        return _gp.gp_Cone_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Cone_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a cone in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Cone

        * Translates a cone from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Cone

        """
        return _gp.gp_Cone_Translated(self, *args)

    def _CSFDB_Getgp_Conepos(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _gp.gp_Cone__CSFDB_Getgp_Conepos(self, *args)

    def _CSFDB_Getgp_Coneradius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Cone__CSFDB_Getgp_Coneradius(self, *args)

    def _CSFDB_Setgp_Coneradius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Cone__CSFDB_Setgp_Coneradius(self, *args)

    def _CSFDB_Getgp_ConesemiAngle(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Cone__CSFDB_Getgp_ConesemiAngle(self, *args)

    def _CSFDB_Setgp_ConesemiAngle(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Cone__CSFDB_Setgp_ConesemiAngle(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Cone.SetAxis = new_instancemethod(_gp.gp_Cone_SetAxis,None,gp_Cone)
gp_Cone.SetLocation = new_instancemethod(_gp.gp_Cone_SetLocation,None,gp_Cone)
gp_Cone.SetPosition = new_instancemethod(_gp.gp_Cone_SetPosition,None,gp_Cone)
gp_Cone.SetRadius = new_instancemethod(_gp.gp_Cone_SetRadius,None,gp_Cone)
gp_Cone.SetSemiAngle = new_instancemethod(_gp.gp_Cone_SetSemiAngle,None,gp_Cone)
gp_Cone.Apex = new_instancemethod(_gp.gp_Cone_Apex,None,gp_Cone)
gp_Cone.UReverse = new_instancemethod(_gp.gp_Cone_UReverse,None,gp_Cone)
gp_Cone.VReverse = new_instancemethod(_gp.gp_Cone_VReverse,None,gp_Cone)
gp_Cone.Direct = new_instancemethod(_gp.gp_Cone_Direct,None,gp_Cone)
gp_Cone.Axis = new_instancemethod(_gp.gp_Cone_Axis,None,gp_Cone)
gp_Cone.Coefficients = new_instancemethod(_gp.gp_Cone_Coefficients,None,gp_Cone)
gp_Cone.Location = new_instancemethod(_gp.gp_Cone_Location,None,gp_Cone)
gp_Cone.Position = new_instancemethod(_gp.gp_Cone_Position,None,gp_Cone)
gp_Cone.RefRadius = new_instancemethod(_gp.gp_Cone_RefRadius,None,gp_Cone)
gp_Cone.SemiAngle = new_instancemethod(_gp.gp_Cone_SemiAngle,None,gp_Cone)
gp_Cone.XAxis = new_instancemethod(_gp.gp_Cone_XAxis,None,gp_Cone)
gp_Cone.YAxis = new_instancemethod(_gp.gp_Cone_YAxis,None,gp_Cone)
gp_Cone.Mirror = new_instancemethod(_gp.gp_Cone_Mirror,None,gp_Cone)
gp_Cone.Mirrored = new_instancemethod(_gp.gp_Cone_Mirrored,None,gp_Cone)
gp_Cone.Rotate = new_instancemethod(_gp.gp_Cone_Rotate,None,gp_Cone)
gp_Cone.Rotated = new_instancemethod(_gp.gp_Cone_Rotated,None,gp_Cone)
gp_Cone.Scale = new_instancemethod(_gp.gp_Cone_Scale,None,gp_Cone)
gp_Cone.Scaled = new_instancemethod(_gp.gp_Cone_Scaled,None,gp_Cone)
gp_Cone.Transform = new_instancemethod(_gp.gp_Cone_Transform,None,gp_Cone)
gp_Cone.Transformed = new_instancemethod(_gp.gp_Cone_Transformed,None,gp_Cone)
gp_Cone.Translate = new_instancemethod(_gp.gp_Cone_Translate,None,gp_Cone)
gp_Cone.Translated = new_instancemethod(_gp.gp_Cone_Translated,None,gp_Cone)
gp_Cone._CSFDB_Getgp_Conepos = new_instancemethod(_gp.gp_Cone__CSFDB_Getgp_Conepos,None,gp_Cone)
gp_Cone._CSFDB_Getgp_Coneradius = new_instancemethod(_gp.gp_Cone__CSFDB_Getgp_Coneradius,None,gp_Cone)
gp_Cone._CSFDB_Setgp_Coneradius = new_instancemethod(_gp.gp_Cone__CSFDB_Setgp_Coneradius,None,gp_Cone)
gp_Cone._CSFDB_Getgp_ConesemiAngle = new_instancemethod(_gp.gp_Cone__CSFDB_Getgp_ConesemiAngle,None,gp_Cone)
gp_Cone._CSFDB_Setgp_ConesemiAngle = new_instancemethod(_gp.gp_Cone__CSFDB_Setgp_ConesemiAngle,None,gp_Cone)
gp_Cone._kill_pointed = new_instancemethod(_gp.gp_Cone__kill_pointed,None,gp_Cone)
gp_Cone_swigregister = _gp.gp_Cone_swigregister
gp_Cone_swigregister(gp_Cone)

class gp_Cylinder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a indefinite cylinder.

        :rtype: None

        * Creates a cylinder of radius Radius, whose axis is the 'main Axis' of A3. A3 is the local coordinate system of the cylinder. Raises ConstructionErrord if R < 0.0

        :param A3:
        :type A3: gp_Ax3
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _gp.gp_Cylinder_swiginit(self,_gp.new_gp_Cylinder(*args))
    def SetAxis(self, *args):
        """
        * Changes the symmetry axis of the cylinder. Raises ConstructionError if the direction of A1 is parallel to the 'XDirection' of the coordinate system of the cylinder.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Cylinder_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location of the surface.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Cylinder_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Change the local coordinate system of the surface.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Cylinder_SetPosition(self, *args)

    def SetRadius(self, *args):
        """
        * Modifies the radius of this cylinder. Exceptions Standard_ConstructionError if R is negative.

        :param R:
        :type R: float
        :rtype: None

        """
        return _gp.gp_Cylinder_SetRadius(self, *args)

    def UReverse(self, *args):
        """
        * Reverses the U parametrization of the cylinder reversing the YAxis.

        :rtype: None

        """
        return _gp.gp_Cylinder_UReverse(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V parametrization of the plane reversing the Axis.

        :rtype: None

        """
        return _gp.gp_Cylinder_VReverse(self, *args)

    def Direct(self, *args):
        """
        * Returns true if the local coordinate system of this cylinder is right-handed.

        :rtype: bool

        """
        return _gp.gp_Cylinder_Direct(self, *args)

    def Axis(self, *args):
        """
        * Returns the symmetry axis of the cylinder.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cylinder_Axis(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinate system : A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float
        :param A2:
        :type A2: float
        :param A3:
        :type A3: float
        :param B1:
        :type B1: float
        :param B2:
        :type B2: float
        :param B3:
        :type B3: float
        :param C1:
        :type C1: float
        :param C2:
        :type C2: float
        :param C3:
        :type C3: float
        :param D:
        :type D: float
        :rtype: None

        """
        return _gp.gp_Cylinder_Coefficients(self, *args)

    def Location(self, *args):
        """
        * Returns the 'Location' point of the cylinder.

        :rtype: gp_Pnt

        """
        return _gp.gp_Cylinder_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinate system of the cylinder.

        :rtype: gp_Ax3

        """
        return _gp.gp_Cylinder_Position(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius of the cylinder.

        :rtype: float

        """
        return _gp.gp_Cylinder_Radius(self, *args)

    def XAxis(self, *args):
        """
        * Returns the axis X of the cylinder.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cylinder_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the axis Y of the cylinder.

        :rtype: gp_Ax1

        """
        return _gp.gp_Cylinder_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Cylinder_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a cylinder with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Cylinder

        * Performs the symmetrical transformation of a cylinder with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Cylinder

        * Performs the symmetrical transformation of a cylinder with respect to a plane. The axis placement A2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Cylinder

        """
        return _gp.gp_Cylinder_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Cylinder_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a cylinder. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Cylinder

        """
        return _gp.gp_Cylinder_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Cylinder_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a cylinder. S is the scaling value. The absolute value of S is used to scale the cylinder

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Cylinder

        """
        return _gp.gp_Cylinder_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Cylinder_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a cylinder with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Cylinder

        """
        return _gp.gp_Cylinder_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Cylinder_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a cylinder in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Cylinder

        * Translates a cylinder from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Cylinder

        """
        return _gp.gp_Cylinder_Translated(self, *args)

    def _CSFDB_Getgp_Cylinderpos(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _gp.gp_Cylinder__CSFDB_Getgp_Cylinderpos(self, *args)

    def _CSFDB_Getgp_Cylinderradius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Cylinder__CSFDB_Getgp_Cylinderradius(self, *args)

    def _CSFDB_Setgp_Cylinderradius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Cylinder__CSFDB_Setgp_Cylinderradius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Cylinder.SetAxis = new_instancemethod(_gp.gp_Cylinder_SetAxis,None,gp_Cylinder)
gp_Cylinder.SetLocation = new_instancemethod(_gp.gp_Cylinder_SetLocation,None,gp_Cylinder)
gp_Cylinder.SetPosition = new_instancemethod(_gp.gp_Cylinder_SetPosition,None,gp_Cylinder)
gp_Cylinder.SetRadius = new_instancemethod(_gp.gp_Cylinder_SetRadius,None,gp_Cylinder)
gp_Cylinder.UReverse = new_instancemethod(_gp.gp_Cylinder_UReverse,None,gp_Cylinder)
gp_Cylinder.VReverse = new_instancemethod(_gp.gp_Cylinder_VReverse,None,gp_Cylinder)
gp_Cylinder.Direct = new_instancemethod(_gp.gp_Cylinder_Direct,None,gp_Cylinder)
gp_Cylinder.Axis = new_instancemethod(_gp.gp_Cylinder_Axis,None,gp_Cylinder)
gp_Cylinder.Coefficients = new_instancemethod(_gp.gp_Cylinder_Coefficients,None,gp_Cylinder)
gp_Cylinder.Location = new_instancemethod(_gp.gp_Cylinder_Location,None,gp_Cylinder)
gp_Cylinder.Position = new_instancemethod(_gp.gp_Cylinder_Position,None,gp_Cylinder)
gp_Cylinder.Radius = new_instancemethod(_gp.gp_Cylinder_Radius,None,gp_Cylinder)
gp_Cylinder.XAxis = new_instancemethod(_gp.gp_Cylinder_XAxis,None,gp_Cylinder)
gp_Cylinder.YAxis = new_instancemethod(_gp.gp_Cylinder_YAxis,None,gp_Cylinder)
gp_Cylinder.Mirror = new_instancemethod(_gp.gp_Cylinder_Mirror,None,gp_Cylinder)
gp_Cylinder.Mirrored = new_instancemethod(_gp.gp_Cylinder_Mirrored,None,gp_Cylinder)
gp_Cylinder.Rotate = new_instancemethod(_gp.gp_Cylinder_Rotate,None,gp_Cylinder)
gp_Cylinder.Rotated = new_instancemethod(_gp.gp_Cylinder_Rotated,None,gp_Cylinder)
gp_Cylinder.Scale = new_instancemethod(_gp.gp_Cylinder_Scale,None,gp_Cylinder)
gp_Cylinder.Scaled = new_instancemethod(_gp.gp_Cylinder_Scaled,None,gp_Cylinder)
gp_Cylinder.Transform = new_instancemethod(_gp.gp_Cylinder_Transform,None,gp_Cylinder)
gp_Cylinder.Transformed = new_instancemethod(_gp.gp_Cylinder_Transformed,None,gp_Cylinder)
gp_Cylinder.Translate = new_instancemethod(_gp.gp_Cylinder_Translate,None,gp_Cylinder)
gp_Cylinder.Translated = new_instancemethod(_gp.gp_Cylinder_Translated,None,gp_Cylinder)
gp_Cylinder._CSFDB_Getgp_Cylinderpos = new_instancemethod(_gp.gp_Cylinder__CSFDB_Getgp_Cylinderpos,None,gp_Cylinder)
gp_Cylinder._CSFDB_Getgp_Cylinderradius = new_instancemethod(_gp.gp_Cylinder__CSFDB_Getgp_Cylinderradius,None,gp_Cylinder)
gp_Cylinder._CSFDB_Setgp_Cylinderradius = new_instancemethod(_gp.gp_Cylinder__CSFDB_Setgp_Cylinderradius,None,gp_Cylinder)
gp_Cylinder._kill_pointed = new_instancemethod(_gp.gp_Cylinder__kill_pointed,None,gp_Cylinder)
gp_Cylinder_swigregister = _gp.gp_Cylinder_swigregister
gp_Cylinder_swigregister(gp_Cylinder)

class gp_Dir(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a direction corresponding to X axis.

        :rtype: None

        * Normalizes the vector V and creates a direction. Raises ConstructionError if V.Magnitude() <= Resolution.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Creates a direction from a triplet of coordinates. Raises ConstructionError if Coord.Modulus() <= Resolution from gp.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        * Creates a direction with its 3 cartesian coordinates. Raises ConstructionError if Sqrt(Xv*Xv + Yv*Yv + Zv*Zv) <= Resolution Modification of the direction's coordinates If Sqrt (X*X + Y*Y + Z*Z) <= Resolution from gp where X, Y ,Z are the new coordinates it is not possible to construct the direction and the method raises the exception ConstructionError.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        """
        _gp.gp_Dir_swiginit(self,_gp.new_gp_Dir(*args))
    def SetCoord(self, *args):
        """
        * For this unit vector, assigns the value Xi to: - the X coordinate if Index is 1, or - the Y coordinate if Index is 2, or - the Z coordinate if Index is 3, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if Index is not 1, 2, or 3. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - Sqrt(Xv*Xv + Yv*Yv + Zv*Zv), or - the modulus of the number triple formed by the new value Xi and the two other coordinates of this vector that were not directly modified.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this unit vector, assigns the values Xv, Yv and Zv to its three coordinates. Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        """
        return _gp.gp_Dir_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this unit vector.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Dir_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this unit vector.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Dir_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Assigns the given value to the Z coordinate of this unit vector.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_Dir_SetZ(self, *args)

    def SetXYZ(self, *args):
        """
        * Assigns the three coordinates of Coord to this unit vector.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Dir_SetXYZ(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Index = 3 => Z is returned Exceptions Standard_OutOfRange if Index is not 1, 2, or 3.

        :param Index:
        :type Index: int
        :rtype: float

        * Returns for the unit vector its three coordinates Xv, Yv, and Zv.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        """
        return _gp.gp_Dir_Coord(self, *args)

    def X(self, *args):
        """
        * Returns the X coordinate for a unit vector.

        :rtype: float

        """
        return _gp.gp_Dir_X(self, *args)

    def Y(self, *args):
        """
        * Returns the Y coordinate for a unit vector.

        :rtype: float

        """
        return _gp.gp_Dir_Y(self, *args)

    def Z(self, *args):
        """
        * Returns the Z coordinate for a unit vector.

        :rtype: float

        """
        return _gp.gp_Dir_Z(self, *args)

    def XYZ(self, *args):
        """
        * for this unit vector, returns its three coordinates as a number triplea.

        :rtype: gp_XYZ

        """
        return _gp.gp_Dir_XYZ(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if the angle between the two directions is lower or equal to AngularTolerance.

        :param Other:
        :type Other: gp_Dir
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir_IsEqual(self, *args)

    def IsNormal(self, *args):
        """
        * Returns True if the angle between this unit vector and the unit vector Other is equal to Pi/2 (normal).

        :param Other:
        :type Other: gp_Dir
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns True if the angle between this unit vector and the unit vector Other is equal to Pi (opposite).

        :param Other:
        :type Other: gp_Dir
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * Returns true if the angle between this unit vector and the unit vector Other is equal to 0 or to Pi. Note: the tolerance criterion is given by AngularTolerance.

        :param Other:
        :type Other: gp_Dir
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value in radians between <self> and <Other>. This value is always positive in 3D space. Returns the angle in the range [0, PI]

        :param Other:
        :type Other: gp_Dir
        :rtype: float

        """
        return _gp.gp_Dir_Angle(self, *args)

    def AngleWithRef(self, *args):
        """
        * Computes the angular value between <self> and <Other>. <VRef> is the direction of reference normal to <self> and <Other> and its orientation gives the positive sense of rotation. If the cross product <self> ^ <Other> has the same orientation as <VRef> the angular value is positive else negative. Returns the angular value in the range -PI and PI (in radians). Raises DomainError if <self> and <Other> are not parallel this exception is raised when <VRef> is in the same plane as <self> and <Other> The tolerance criterion is Resolution from package gp.

        :param Other:
        :type Other: gp_Dir
        :param VRef:
        :type VRef: gp_Dir
        :rtype: float

        """
        return _gp.gp_Dir_AngleWithRef(self, *args)

    def Cross(self, *args):
        """
        * Computes the cross product between two directions Raises the exception ConstructionError if the two directions are parallel because the computed vector cannot be normalized to create a direction.

        :param Right:
        :type Right: gp_Dir
        :rtype: None

        """
        return _gp.gp_Dir_Cross(self, *args)

    def __ixor__(self, *args):
        """
        :param Right:
        :type Right: gp_Dir
        :rtype: None

        """
        return _gp.gp_Dir___ixor__(self, *args)

    def Crossed(self, *args):
        """
        * Computes the triple vector product. <self> ^ (V1 ^ V2) Raises the exception ConstructionError if V1 and V2 are parallel or <self> and (V1^V2) are parallel because the computed vector can't be normalized to create a direction.

        :param Right:
        :type Right: gp_Dir
        :rtype: gp_Dir

        """
        return _gp.gp_Dir_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_Dir
        :rtype: gp_Dir

        """
        return _gp.gp_Dir___xor__(self, *args)

    def CrossCross(self, *args):
        """
        :param V1:
        :type V1: gp_Dir
        :param V2:
        :type V2: gp_Dir
        :rtype: None

        """
        return _gp.gp_Dir_CrossCross(self, *args)

    def CrossCrossed(self, *args):
        """
        * Computes the double vector product this ^ (V1 ^ V2). - CrossCrossed creates a new unit vector. Exceptions Standard_ConstructionError if: - V1 and V2 are parallel, or - this unit vector and (V1 ^ V2) are parallel. This is because, in these conditions, the computed vector is null and cannot be normalized.

        :param V1:
        :type V1: gp_Dir
        :param V2:
        :type V2: gp_Dir
        :rtype: gp_Dir

        """
        return _gp.gp_Dir_CrossCrossed(self, *args)

    def Dot(self, *args):
        """
        * Computes the scalar product

        :param Other:
        :type Other: gp_Dir
        :rtype: float

        """
        return _gp.gp_Dir_Dot(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_Dir
        :rtype: float

        """
        return _gp.gp_Dir___mul__(self, *args)

    def DotCross(self, *args):
        """
        * Computes the triple scalar product <self> * (V1 ^ V2). Warnings : The computed vector V1' = V1 ^ V2 is not normalized to create a unitary vector. So this method never raises an exception even if V1 and V2 are parallel.

        :param V1:
        :type V1: gp_Dir
        :param V2:
        :type V2: gp_Dir
        :rtype: float

        """
        return _gp.gp_Dir_DotCross(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Dir_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the orientation of a direction geometric transformations Performs the symmetrical transformation of a direction with respect to the direction V which is the center of the symmetry.]

        :rtype: gp_Dir

        """
        return _gp.gp_Dir_Reversed(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_Dir

        """
        return _gp.gp_Dir___neg__(self, *args)

    def Mirror(self, *args):
        """
        :param V:
        :type V: gp_Dir
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Dir_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a direction with respect to the direction V which is the center of the symmetry.

        :param V:
        :type V: gp_Dir
        :rtype: gp_Dir

        * Performs the symmetrical transformation of a direction with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Dir

        * Performs the symmetrical transformation of a direction with respect to a plane. The axis placement A2 locates the plane of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Dir

        """
        return _gp.gp_Dir_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Dir_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a direction. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Dir

        """
        return _gp.gp_Dir_Rotated(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Dir_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a direction with a 'Trsf' from gp. Warnings : If the scale factor of the 'Trsf' T is negative then the direction <self> is reversed.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Dir

        """
        return _gp.gp_Dir_Transformed(self, *args)

    def _CSFDB_Getgp_Dircoord(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _gp.gp_Dir__CSFDB_Getgp_Dircoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Dir.SetCoord = new_instancemethod(_gp.gp_Dir_SetCoord,None,gp_Dir)
gp_Dir.SetX = new_instancemethod(_gp.gp_Dir_SetX,None,gp_Dir)
gp_Dir.SetY = new_instancemethod(_gp.gp_Dir_SetY,None,gp_Dir)
gp_Dir.SetZ = new_instancemethod(_gp.gp_Dir_SetZ,None,gp_Dir)
gp_Dir.SetXYZ = new_instancemethod(_gp.gp_Dir_SetXYZ,None,gp_Dir)
gp_Dir.Coord = new_instancemethod(_gp.gp_Dir_Coord,None,gp_Dir)
gp_Dir.X = new_instancemethod(_gp.gp_Dir_X,None,gp_Dir)
gp_Dir.Y = new_instancemethod(_gp.gp_Dir_Y,None,gp_Dir)
gp_Dir.Z = new_instancemethod(_gp.gp_Dir_Z,None,gp_Dir)
gp_Dir.XYZ = new_instancemethod(_gp.gp_Dir_XYZ,None,gp_Dir)
gp_Dir.IsEqual = new_instancemethod(_gp.gp_Dir_IsEqual,None,gp_Dir)
gp_Dir.IsNormal = new_instancemethod(_gp.gp_Dir_IsNormal,None,gp_Dir)
gp_Dir.IsOpposite = new_instancemethod(_gp.gp_Dir_IsOpposite,None,gp_Dir)
gp_Dir.IsParallel = new_instancemethod(_gp.gp_Dir_IsParallel,None,gp_Dir)
gp_Dir.Angle = new_instancemethod(_gp.gp_Dir_Angle,None,gp_Dir)
gp_Dir.AngleWithRef = new_instancemethod(_gp.gp_Dir_AngleWithRef,None,gp_Dir)
gp_Dir.Cross = new_instancemethod(_gp.gp_Dir_Cross,None,gp_Dir)
gp_Dir.__ixor__ = new_instancemethod(_gp.gp_Dir___ixor__,None,gp_Dir)
gp_Dir.Crossed = new_instancemethod(_gp.gp_Dir_Crossed,None,gp_Dir)
gp_Dir.__xor__ = new_instancemethod(_gp.gp_Dir___xor__,None,gp_Dir)
gp_Dir.CrossCross = new_instancemethod(_gp.gp_Dir_CrossCross,None,gp_Dir)
gp_Dir.CrossCrossed = new_instancemethod(_gp.gp_Dir_CrossCrossed,None,gp_Dir)
gp_Dir.Dot = new_instancemethod(_gp.gp_Dir_Dot,None,gp_Dir)
gp_Dir.__mul__ = new_instancemethod(_gp.gp_Dir___mul__,None,gp_Dir)
gp_Dir.DotCross = new_instancemethod(_gp.gp_Dir_DotCross,None,gp_Dir)
gp_Dir.Reverse = new_instancemethod(_gp.gp_Dir_Reverse,None,gp_Dir)
gp_Dir.Reversed = new_instancemethod(_gp.gp_Dir_Reversed,None,gp_Dir)
gp_Dir.__neg__ = new_instancemethod(_gp.gp_Dir___neg__,None,gp_Dir)
gp_Dir.Mirror = new_instancemethod(_gp.gp_Dir_Mirror,None,gp_Dir)
gp_Dir.Mirrored = new_instancemethod(_gp.gp_Dir_Mirrored,None,gp_Dir)
gp_Dir.Rotate = new_instancemethod(_gp.gp_Dir_Rotate,None,gp_Dir)
gp_Dir.Rotated = new_instancemethod(_gp.gp_Dir_Rotated,None,gp_Dir)
gp_Dir.Transform = new_instancemethod(_gp.gp_Dir_Transform,None,gp_Dir)
gp_Dir.Transformed = new_instancemethod(_gp.gp_Dir_Transformed,None,gp_Dir)
gp_Dir._CSFDB_Getgp_Dircoord = new_instancemethod(_gp.gp_Dir__CSFDB_Getgp_Dircoord,None,gp_Dir)
gp_Dir._kill_pointed = new_instancemethod(_gp.gp_Dir__kill_pointed,None,gp_Dir)
gp_Dir_swigregister = _gp.gp_Dir_swigregister
gp_Dir_swigregister(gp_Dir)

class gp_Dir2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a direction corresponding to X axis.

        :rtype: None

        * Normalizes the vector V and creates a Direction. Raises ConstructionError if V.Magnitude() <= Resolution from gp.

        :param V:
        :type V: gp_Vec2d
        :rtype: None

        * Creates a Direction from a doublet of coordinates. Raises ConstructionError if Coord.Modulus() <= Resolution from gp.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        * Creates a Direction with its 2 cartesian coordinates. Raises ConstructionError if Sqrt(Xv*Xv + Yv*Yv) <= Resolution from gp.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        """
        _gp.gp_Dir2d_swiginit(self,_gp.new_gp_Dir2d(*args))
    def SetCoord(self, *args):
        """
        * For this unit vector, assigns: the value Xi to: - the X coordinate if Index is 1, or - the Y coordinate if Index is 2, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if Index is not 1 or 2. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - Sqrt(Xv*Xv + Yv*Yv), or - the modulus of the number pair formed by the new value Xi and the other coordinate of this vector that was not directly modified. Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this unit vector, assigns: - the values Xv and Yv to its two coordinates, Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if Index is not 1 or 2. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - Sqrt(Xv*Xv + Yv*Yv), or - the modulus of the number pair formed by the new value Xi and the other coordinate of this vector that was not directly modified. Raises OutOfRange if Index != {1, 2}.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        """
        return _gp.gp_Dir2d_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this unit vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - the modulus of Coord, or - the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Dir2d_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this unit vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - the modulus of Coord, or - the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Dir2d_SetY(self, *args)

    def SetXY(self, *args):
        """
        * Assigns: - the two coordinates of Coord to this unit vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): - the modulus of Coord, or - the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        """
        return _gp.gp_Dir2d_SetXY(self, *args)

    def Coord(self, *args):
        """
        * For this unit vector returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this unit vector returns its two coordinates Xv and Yv. Raises OutOfRange if Index != {1, 2}.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        """
        return _gp.gp_Dir2d_Coord(self, *args)

    def X(self, *args):
        """
        * For this unit vector, returns its X coordinate.

        :rtype: float

        """
        return _gp.gp_Dir2d_X(self, *args)

    def Y(self, *args):
        """
        * For this unit vector, returns its Y coordinate.

        :rtype: float

        """
        return _gp.gp_Dir2d_Y(self, *args)

    def XY(self, *args):
        """
        * For this unit vector, returns its two coordinates as a number pair. Comparison between Directions The precision value is an input data.

        :rtype: gp_XY

        """
        return _gp.gp_Dir2d_XY(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if the two vectors have the same direction i.e. the angle between this unit vector and the unit vector Other is less than or equal to AngularTolerance.

        :param Other:
        :type Other: gp_Dir2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir2d_IsEqual(self, *args)

    def IsNormal(self, *args):
        """
        * Returns True if the angle between this unit vector and the unit vector Other is equal to Pi/2 or -Pi/2 (normal) i.e. Abs(Abs(<self>.Angle(Other)) - PI/2.) <= AngularTolerance

        :param Other:
        :type Other: gp_Dir2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir2d_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns True if the angle between this unit vector and the unit vector Other is equal to Pi or -Pi (opposite). i.e. PI - Abs(<self>.Angle(Other)) <= AngularTolerance

        :param Other:
        :type Other: gp_Dir2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir2d_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * returns true if if the angle between this unit vector and unit vector Other is equal to 0, Pi or -Pi. i.e. Abs(Angle(<self>, Other)) <= AngularTolerance or PI - Abs(Angle(<self>, Other)) <= AngularTolerance

        :param Other:
        :type Other: gp_Dir2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Dir2d_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value in radians between <self> and <Other>. Returns the angle in the range [-PI, PI].

        :param Other:
        :type Other: gp_Dir2d
        :rtype: float

        """
        return _gp.gp_Dir2d_Angle(self, *args)

    def Crossed(self, *args):
        """
        * Computes the cross product between two directions.

        :param Right:
        :type Right: gp_Dir2d
        :rtype: float

        """
        return _gp.gp_Dir2d_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_Dir2d
        :rtype: float

        """
        return _gp.gp_Dir2d___xor__(self, *args)

    def Dot(self, *args):
        """
        * Computes the scalar product

        :param Other:
        :type Other: gp_Dir2d
        :rtype: float

        """
        return _gp.gp_Dir2d_Dot(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_Dir2d
        :rtype: float

        """
        return _gp.gp_Dir2d___mul__(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Dir2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the orientation of a direction

        :rtype: gp_Dir2d

        """
        return _gp.gp_Dir2d_Reversed(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _gp.gp_Dir2d___neg__(self, *args)

    def Mirror(self, *args):
        """
        :param V:
        :type V: gp_Dir2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Dir2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a direction with respect to the direction V which is the center of the symmetry.

        :param V:
        :type V: gp_Dir2d
        :rtype: gp_Dir2d

        * Performs the symmetrical transformation of a direction with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Dir2d

        """
        return _gp.gp_Dir2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Dir2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a direction. Ang is the angular value of the rotation in radians.

        :param Ang:
        :type Ang: float
        :rtype: gp_Dir2d

        """
        return _gp.gp_Dir2d_Rotated(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Dir2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a direction with the 'Trsf' T. Warnings : If the scale factor of the 'Trsf' T is negative then the direction <self> is reversed.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Dir2d

        """
        return _gp.gp_Dir2d_Transformed(self, *args)

    def _CSFDB_Getgp_Dir2dcoord(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_Dir2d__CSFDB_Getgp_Dir2dcoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Dir2d.SetCoord = new_instancemethod(_gp.gp_Dir2d_SetCoord,None,gp_Dir2d)
gp_Dir2d.SetX = new_instancemethod(_gp.gp_Dir2d_SetX,None,gp_Dir2d)
gp_Dir2d.SetY = new_instancemethod(_gp.gp_Dir2d_SetY,None,gp_Dir2d)
gp_Dir2d.SetXY = new_instancemethod(_gp.gp_Dir2d_SetXY,None,gp_Dir2d)
gp_Dir2d.Coord = new_instancemethod(_gp.gp_Dir2d_Coord,None,gp_Dir2d)
gp_Dir2d.X = new_instancemethod(_gp.gp_Dir2d_X,None,gp_Dir2d)
gp_Dir2d.Y = new_instancemethod(_gp.gp_Dir2d_Y,None,gp_Dir2d)
gp_Dir2d.XY = new_instancemethod(_gp.gp_Dir2d_XY,None,gp_Dir2d)
gp_Dir2d.IsEqual = new_instancemethod(_gp.gp_Dir2d_IsEqual,None,gp_Dir2d)
gp_Dir2d.IsNormal = new_instancemethod(_gp.gp_Dir2d_IsNormal,None,gp_Dir2d)
gp_Dir2d.IsOpposite = new_instancemethod(_gp.gp_Dir2d_IsOpposite,None,gp_Dir2d)
gp_Dir2d.IsParallel = new_instancemethod(_gp.gp_Dir2d_IsParallel,None,gp_Dir2d)
gp_Dir2d.Angle = new_instancemethod(_gp.gp_Dir2d_Angle,None,gp_Dir2d)
gp_Dir2d.Crossed = new_instancemethod(_gp.gp_Dir2d_Crossed,None,gp_Dir2d)
gp_Dir2d.__xor__ = new_instancemethod(_gp.gp_Dir2d___xor__,None,gp_Dir2d)
gp_Dir2d.Dot = new_instancemethod(_gp.gp_Dir2d_Dot,None,gp_Dir2d)
gp_Dir2d.__mul__ = new_instancemethod(_gp.gp_Dir2d___mul__,None,gp_Dir2d)
gp_Dir2d.Reverse = new_instancemethod(_gp.gp_Dir2d_Reverse,None,gp_Dir2d)
gp_Dir2d.Reversed = new_instancemethod(_gp.gp_Dir2d_Reversed,None,gp_Dir2d)
gp_Dir2d.__neg__ = new_instancemethod(_gp.gp_Dir2d___neg__,None,gp_Dir2d)
gp_Dir2d.Mirror = new_instancemethod(_gp.gp_Dir2d_Mirror,None,gp_Dir2d)
gp_Dir2d.Mirrored = new_instancemethod(_gp.gp_Dir2d_Mirrored,None,gp_Dir2d)
gp_Dir2d.Rotate = new_instancemethod(_gp.gp_Dir2d_Rotate,None,gp_Dir2d)
gp_Dir2d.Rotated = new_instancemethod(_gp.gp_Dir2d_Rotated,None,gp_Dir2d)
gp_Dir2d.Transform = new_instancemethod(_gp.gp_Dir2d_Transform,None,gp_Dir2d)
gp_Dir2d.Transformed = new_instancemethod(_gp.gp_Dir2d_Transformed,None,gp_Dir2d)
gp_Dir2d._CSFDB_Getgp_Dir2dcoord = new_instancemethod(_gp.gp_Dir2d__CSFDB_Getgp_Dir2dcoord,None,gp_Dir2d)
gp_Dir2d._kill_pointed = new_instancemethod(_gp.gp_Dir2d__kill_pointed,None,gp_Dir2d)
gp_Dir2d_swigregister = _gp.gp_Dir2d_swigregister
gp_Dir2d_swigregister(gp_Dir2d)

class gp_Elips(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite ellipse.

        :rtype: None

        * The major radius of the ellipse is on the 'XAxis' and the minor radius is on the 'YAxis' of the ellipse. The 'XAxis' is defined with the 'XDirection' of A2 and the 'YAxis' is defined with the 'YDirection' of A2. Warnings : It is not forbidden to create an ellipse with MajorRadius = MinorRadius. Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _gp.gp_Elips_swiginit(self,_gp.new_gp_Elips(*args))
    def SetAxis(self, *args):
        """
        * Changes the axis normal to the plane of the ellipse. It modifies the definition of this plane. The 'XAxis' and the 'YAxis' are recomputed. The local coordinate system is redefined so that: - its origin and 'main Direction' become those of the axis A1 (the 'X Direction' and 'Y Direction' are then recomputed in the same way as for any gp_Ax2), or Raises ConstructionError if the direction of A1 is parallel to the direction of the 'XAxis' of the ellipse.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Elips_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * //!Modifies this ellipse, by redefining its local coordinate so that its origin becomes P.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Elips_SetLocation(self, *args)

    def SetMajorRadius(self, *args):
        """
        * The major radius of the ellipse is on the 'XAxis' (major axis) of the ellipse. Raises ConstructionError if MajorRadius < MinorRadius.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _gp.gp_Elips_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * The minor radius of the ellipse is on the 'YAxis' (minor axis) of the ellipse. Raises ConstructionError if MinorRadius > MajorRadius or MinorRadius < 0.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _gp.gp_Elips_SetMinorRadius(self, *args)

    def SetPosition(self, *args):
        """
        * Modifies this ellipse, by redefining its local coordinate so that it becomes A2e.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Elips_SetPosition(self, *args)

    def Area(self, *args):
        """
        * Computes the area of the Ellipse.

        :rtype: float

        """
        return _gp.gp_Elips_Area(self, *args)

    def Axis(self, *args):
        """
        * Computes the axis normal to the plane of the ellipse.

        :rtype: gp_Ax1

        """
        return _gp.gp_Elips_Axis(self, *args)

    def Directrix1(self, *args):
        """
        * Computes the first or second directrix of this ellipse. These are the lines, in the plane of the ellipse, normal to the major axis, at a distance equal to MajorRadius/e from the center of the ellipse, where e is the eccentricity of the ellipse. The first directrix (Directrix1) is on the positive side of the major axis. The second directrix (Directrix2) is on the negative side. The directrix is returned as an axis (gp_Ax1 object), the origin of which is situated on the 'X Axis' of the local coordinate system of this ellipse. Exceptions Standard_ConstructionError if the eccentricity is null (the ellipse has degenerated into a circle).

        :rtype: gp_Ax1

        """
        return _gp.gp_Elips_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'Directrix1' with respect to the 'YAxis' of the ellipse. Exceptions Standard_ConstructionError if the eccentricity is null (the ellipse has degenerated into a circle).

        :rtype: gp_Ax1

        """
        return _gp.gp_Elips_Directrix2(self, *args)

    def Eccentricity(self, *args):
        """
        * Returns the eccentricity of the ellipse between 0.0 and 1.0 If f is the distance between the center of the ellipse and the Focus1 then the eccentricity e = f / MajorRadius. Raises ConstructionError if MajorRadius = 0.0

        :rtype: float

        """
        return _gp.gp_Elips_Eccentricity(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance. It is the distance between the two focus focus1 and focus2 of the ellipse.

        :rtype: float

        """
        return _gp.gp_Elips_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the ellipse. This focus is on the positive side of the 'XAxis' of the ellipse.

        :rtype: gp_Pnt

        """
        return _gp.gp_Elips_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the ellipse. This focus is on the negative side of the 'XAxis' of the ellipse.

        :rtype: gp_Pnt

        """
        return _gp.gp_Elips_Focus2(self, *args)

    def Location(self, *args):
        """
        * Returns the center of the ellipse. It is the 'Location' point of the coordinate system of the ellipse.

        :rtype: gp_Pnt

        """
        return _gp.gp_Elips_Location(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius of the ellipse.

        :rtype: float

        """
        return _gp.gp_Elips_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the minor radius of the ellipse.

        :rtype: float

        """
        return _gp.gp_Elips_MinorRadius(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (1 - e * e) * MajorRadius where e is the eccentricity of the ellipse. Returns 0 if MajorRadius = 0

        :rtype: float

        """
        return _gp.gp_Elips_Parameter(self, *args)

    def Position(self, *args):
        """
        * Returns the coordinate system of the ellipse.

        :rtype: gp_Ax2

        """
        return _gp.gp_Elips_Position(self, *args)

    def XAxis(self, *args):
        """
        * Returns the 'XAxis' of the ellipse whose origin is the center of this ellipse. It is the major axis of the ellipse.

        :rtype: gp_Ax1

        """
        return _gp.gp_Elips_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the 'YAxis' of the ellipse whose unit vector is the 'X Direction' or the 'Y Direction' of the local coordinate system of this ellipse. This is the minor axis of the ellipse.

        :rtype: gp_Ax1

        """
        return _gp.gp_Elips_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Elips_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an ellipse with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Elips

        * Performs the symmetrical transformation of an ellipse with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Elips

        * Performs the symmetrical transformation of an ellipse with respect to a plane. The axis placement A2 locates the plane of the symmetry (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Elips

        """
        return _gp.gp_Elips_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Elips_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an ellipse. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Elips

        """
        return _gp.gp_Elips_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Elips_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales an ellipse. S is the scaling value.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Elips

        """
        return _gp.gp_Elips_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Elips_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an ellipse with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Elips

        """
        return _gp.gp_Elips_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Elips_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an ellipse in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Elips

        * Translates an ellipse from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Elips

        """
        return _gp.gp_Elips_Translated(self, *args)

    def _CSFDB_Getgp_Elipspos(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _gp.gp_Elips__CSFDB_Getgp_Elipspos(self, *args)

    def _CSFDB_Getgp_ElipsmajorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Elips__CSFDB_Getgp_ElipsmajorRadius(self, *args)

    def _CSFDB_Setgp_ElipsmajorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Elips__CSFDB_Setgp_ElipsmajorRadius(self, *args)

    def _CSFDB_Getgp_ElipsminorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Elips__CSFDB_Getgp_ElipsminorRadius(self, *args)

    def _CSFDB_Setgp_ElipsminorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Elips__CSFDB_Setgp_ElipsminorRadius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Elips.SetAxis = new_instancemethod(_gp.gp_Elips_SetAxis,None,gp_Elips)
gp_Elips.SetLocation = new_instancemethod(_gp.gp_Elips_SetLocation,None,gp_Elips)
gp_Elips.SetMajorRadius = new_instancemethod(_gp.gp_Elips_SetMajorRadius,None,gp_Elips)
gp_Elips.SetMinorRadius = new_instancemethod(_gp.gp_Elips_SetMinorRadius,None,gp_Elips)
gp_Elips.SetPosition = new_instancemethod(_gp.gp_Elips_SetPosition,None,gp_Elips)
gp_Elips.Area = new_instancemethod(_gp.gp_Elips_Area,None,gp_Elips)
gp_Elips.Axis = new_instancemethod(_gp.gp_Elips_Axis,None,gp_Elips)
gp_Elips.Directrix1 = new_instancemethod(_gp.gp_Elips_Directrix1,None,gp_Elips)
gp_Elips.Directrix2 = new_instancemethod(_gp.gp_Elips_Directrix2,None,gp_Elips)
gp_Elips.Eccentricity = new_instancemethod(_gp.gp_Elips_Eccentricity,None,gp_Elips)
gp_Elips.Focal = new_instancemethod(_gp.gp_Elips_Focal,None,gp_Elips)
gp_Elips.Focus1 = new_instancemethod(_gp.gp_Elips_Focus1,None,gp_Elips)
gp_Elips.Focus2 = new_instancemethod(_gp.gp_Elips_Focus2,None,gp_Elips)
gp_Elips.Location = new_instancemethod(_gp.gp_Elips_Location,None,gp_Elips)
gp_Elips.MajorRadius = new_instancemethod(_gp.gp_Elips_MajorRadius,None,gp_Elips)
gp_Elips.MinorRadius = new_instancemethod(_gp.gp_Elips_MinorRadius,None,gp_Elips)
gp_Elips.Parameter = new_instancemethod(_gp.gp_Elips_Parameter,None,gp_Elips)
gp_Elips.Position = new_instancemethod(_gp.gp_Elips_Position,None,gp_Elips)
gp_Elips.XAxis = new_instancemethod(_gp.gp_Elips_XAxis,None,gp_Elips)
gp_Elips.YAxis = new_instancemethod(_gp.gp_Elips_YAxis,None,gp_Elips)
gp_Elips.Mirror = new_instancemethod(_gp.gp_Elips_Mirror,None,gp_Elips)
gp_Elips.Mirrored = new_instancemethod(_gp.gp_Elips_Mirrored,None,gp_Elips)
gp_Elips.Rotate = new_instancemethod(_gp.gp_Elips_Rotate,None,gp_Elips)
gp_Elips.Rotated = new_instancemethod(_gp.gp_Elips_Rotated,None,gp_Elips)
gp_Elips.Scale = new_instancemethod(_gp.gp_Elips_Scale,None,gp_Elips)
gp_Elips.Scaled = new_instancemethod(_gp.gp_Elips_Scaled,None,gp_Elips)
gp_Elips.Transform = new_instancemethod(_gp.gp_Elips_Transform,None,gp_Elips)
gp_Elips.Transformed = new_instancemethod(_gp.gp_Elips_Transformed,None,gp_Elips)
gp_Elips.Translate = new_instancemethod(_gp.gp_Elips_Translate,None,gp_Elips)
gp_Elips.Translated = new_instancemethod(_gp.gp_Elips_Translated,None,gp_Elips)
gp_Elips._CSFDB_Getgp_Elipspos = new_instancemethod(_gp.gp_Elips__CSFDB_Getgp_Elipspos,None,gp_Elips)
gp_Elips._CSFDB_Getgp_ElipsmajorRadius = new_instancemethod(_gp.gp_Elips__CSFDB_Getgp_ElipsmajorRadius,None,gp_Elips)
gp_Elips._CSFDB_Setgp_ElipsmajorRadius = new_instancemethod(_gp.gp_Elips__CSFDB_Setgp_ElipsmajorRadius,None,gp_Elips)
gp_Elips._CSFDB_Getgp_ElipsminorRadius = new_instancemethod(_gp.gp_Elips__CSFDB_Getgp_ElipsminorRadius,None,gp_Elips)
gp_Elips._CSFDB_Setgp_ElipsminorRadius = new_instancemethod(_gp.gp_Elips__CSFDB_Setgp_ElipsminorRadius,None,gp_Elips)
gp_Elips._kill_pointed = new_instancemethod(_gp.gp_Elips__kill_pointed,None,gp_Elips)
gp_Elips_swigregister = _gp.gp_Elips_swigregister
gp_Elips_swigregister(gp_Elips)

class gp_Elips2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite ellipse.

        :rtype: None

        * Creates an ellipse with the major axis, the major and the minor radius. The location of the MajorAxis is the center of the ellipse. The sense of parametrization is given by Sense. Warnings : It is possible to create an ellipse with MajorRadius = MinorRadius. Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0

        :param MajorAxis:
        :type MajorAxis: gp_Ax2d
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * Creates an ellipse with radii MajorRadius and MinorRadius, positioned in the plane by coordinate system A where: - the origin of A is the center of the ellipse, - the 'X Direction' of A defines the major axis of the ellipse, that is, the major radius MajorRadius is measured along this axis, and - the 'Y Direction' of A defines the minor axis of the ellipse, that is, the minor radius MinorRadius is measured along this axis, and - the orientation (direct or indirect sense) of A gives the orientation of the ellipse. Warnings : It is possible to create an ellipse with MajorRadius = MinorRadius. Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0

        :param A:
        :type A: gp_Ax22d
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _gp.gp_Elips2d_swiginit(self,_gp.new_gp_Elips2d(*args))
    def SetLocation(self, *args):
        """
        * Modifies this ellipse, by redefining its local coordinate system so that - its origin becomes P.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Elips2d_SetLocation(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Changes the value of the major radius. Raises ConstructionError if MajorRadius < MinorRadius.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _gp.gp_Elips2d_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Changes the value of the minor radius. Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _gp.gp_Elips2d_SetMinorRadius(self, *args)

    def SetAxis(self, *args):
        """
        * Modifies this ellipse, by redefining its local coordinate system so that it becomes A.

        :param A:
        :type A: gp_Ax22d
        :rtype: None

        """
        return _gp.gp_Elips2d_SetAxis(self, *args)

    def SetXAxis(self, *args):
        """
        * Modifies this ellipse, by redefining its local coordinate system so that its origin and its 'X Direction' become those of the axis A. The 'Y Direction' is then recomputed. The orientation of the local coordinate system is not modified.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Elips2d_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        """
        * Modifies this ellipse, by redefining its local coordinate system so that its origin and its 'Y Direction' become those of the axis A. The 'X Direction' is then recomputed. The orientation of the local coordinate system is not modified.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Elips2d_SetYAxis(self, *args)

    def Area(self, *args):
        """
        * Computes the area of the ellipse.

        :rtype: float

        """
        return _gp.gp_Elips2d_Area(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the coefficients of the implicit equation of the ellipse. A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :param E:
        :type E: float
        :param F:
        :type F: float
        :rtype: None

        """
        return _gp.gp_Elips2d_Coefficients(self, *args)

    def Directrix1(self, *args):
        """
        * This directrix is the line normal to the XAxis of the ellipse in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the ellipse, where e is the eccentricity of the ellipse. This line is parallel to the 'YAxis'. The intersection point between directrix1 and the 'XAxis' is the location point of the directrix1. This point is on the positive side of the 'XAxis'. Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle)

        :rtype: gp_Ax2d

        """
        return _gp.gp_Elips2d_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'Directrix1' with respect to the minor axis of the ellipse. Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle).

        :rtype: gp_Ax2d

        """
        return _gp.gp_Elips2d_Directrix2(self, *args)

    def Eccentricity(self, *args):
        """
        * Returns the eccentricity of the ellipse between 0.0 and 1.0 If f is the distance between the center of the ellipse and the Focus1 then the eccentricity e = f / MajorRadius. Returns 0 if MajorRadius = 0.

        :rtype: float

        """
        return _gp.gp_Elips2d_Eccentricity(self, *args)

    def Focal(self, *args):
        """
        * Returns the distance between the center of the ellipse and focus1 or focus2.

        :rtype: float

        """
        return _gp.gp_Elips2d_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the ellipse. This focus is on the positive side of the major axis of the ellipse.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Elips2d_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the ellipse. This focus is on the negative side of the major axis of the ellipse.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Elips2d_Focus2(self, *args)

    def Location(self, *args):
        """
        * Returns the center of the ellipse.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Elips2d_Location(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius of the Ellipse.

        :rtype: float

        """
        return _gp.gp_Elips2d_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the minor radius of the Ellipse.

        :rtype: float

        """
        return _gp.gp_Elips2d_MinorRadius(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (1 - e * e) * MajorRadius where e is the eccentricity of the ellipse. Returns 0 if MajorRadius = 0

        :rtype: float

        """
        return _gp.gp_Elips2d_Parameter(self, *args)

    def Axis(self, *args):
        """
        * Returns the major axis of the ellipse.

        :rtype: gp_Ax22d

        """
        return _gp.gp_Elips2d_Axis(self, *args)

    def XAxis(self, *args):
        """
        * Returns the major axis of the ellipse.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Elips2d_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the minor axis of the ellipse. Reverses the direction of the circle.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Elips2d_YAxis(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Elips2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Reversed(self, *args)

    def IsDirect(self, *args):
        """
        * Returns true if the local coordinate system is direct  and false in the other case.

        :rtype: bool

        """
        return _gp.gp_Elips2d_IsDirect(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Elips2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a ellipse with respect to the point P which is the center of the symmetry

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Elips2d

        * Performs the symmetrical transformation of a ellipse with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Elips2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Elips2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a ellipse. S is the scaling value.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Elips2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an ellipse with the transformation T from class Trsf2d.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Elips2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a ellipse in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Elips2d

        * Translates a ellipse from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Elips2d

        """
        return _gp.gp_Elips2d_Translated(self, *args)

    def _CSFDB_Getgp_Elips2dpos(self, *args):
        """
        :rtype: gp_Ax22d

        """
        return _gp.gp_Elips2d__CSFDB_Getgp_Elips2dpos(self, *args)

    def _CSFDB_Getgp_Elips2dmajorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Elips2d__CSFDB_Getgp_Elips2dmajorRadius(self, *args)

    def _CSFDB_Setgp_Elips2dmajorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Elips2d__CSFDB_Setgp_Elips2dmajorRadius(self, *args)

    def _CSFDB_Getgp_Elips2dminorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Elips2d__CSFDB_Getgp_Elips2dminorRadius(self, *args)

    def _CSFDB_Setgp_Elips2dminorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Elips2d__CSFDB_Setgp_Elips2dminorRadius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Elips2d.SetLocation = new_instancemethod(_gp.gp_Elips2d_SetLocation,None,gp_Elips2d)
gp_Elips2d.SetMajorRadius = new_instancemethod(_gp.gp_Elips2d_SetMajorRadius,None,gp_Elips2d)
gp_Elips2d.SetMinorRadius = new_instancemethod(_gp.gp_Elips2d_SetMinorRadius,None,gp_Elips2d)
gp_Elips2d.SetAxis = new_instancemethod(_gp.gp_Elips2d_SetAxis,None,gp_Elips2d)
gp_Elips2d.SetXAxis = new_instancemethod(_gp.gp_Elips2d_SetXAxis,None,gp_Elips2d)
gp_Elips2d.SetYAxis = new_instancemethod(_gp.gp_Elips2d_SetYAxis,None,gp_Elips2d)
gp_Elips2d.Area = new_instancemethod(_gp.gp_Elips2d_Area,None,gp_Elips2d)
gp_Elips2d.Coefficients = new_instancemethod(_gp.gp_Elips2d_Coefficients,None,gp_Elips2d)
gp_Elips2d.Directrix1 = new_instancemethod(_gp.gp_Elips2d_Directrix1,None,gp_Elips2d)
gp_Elips2d.Directrix2 = new_instancemethod(_gp.gp_Elips2d_Directrix2,None,gp_Elips2d)
gp_Elips2d.Eccentricity = new_instancemethod(_gp.gp_Elips2d_Eccentricity,None,gp_Elips2d)
gp_Elips2d.Focal = new_instancemethod(_gp.gp_Elips2d_Focal,None,gp_Elips2d)
gp_Elips2d.Focus1 = new_instancemethod(_gp.gp_Elips2d_Focus1,None,gp_Elips2d)
gp_Elips2d.Focus2 = new_instancemethod(_gp.gp_Elips2d_Focus2,None,gp_Elips2d)
gp_Elips2d.Location = new_instancemethod(_gp.gp_Elips2d_Location,None,gp_Elips2d)
gp_Elips2d.MajorRadius = new_instancemethod(_gp.gp_Elips2d_MajorRadius,None,gp_Elips2d)
gp_Elips2d.MinorRadius = new_instancemethod(_gp.gp_Elips2d_MinorRadius,None,gp_Elips2d)
gp_Elips2d.Parameter = new_instancemethod(_gp.gp_Elips2d_Parameter,None,gp_Elips2d)
gp_Elips2d.Axis = new_instancemethod(_gp.gp_Elips2d_Axis,None,gp_Elips2d)
gp_Elips2d.XAxis = new_instancemethod(_gp.gp_Elips2d_XAxis,None,gp_Elips2d)
gp_Elips2d.YAxis = new_instancemethod(_gp.gp_Elips2d_YAxis,None,gp_Elips2d)
gp_Elips2d.Reverse = new_instancemethod(_gp.gp_Elips2d_Reverse,None,gp_Elips2d)
gp_Elips2d.Reversed = new_instancemethod(_gp.gp_Elips2d_Reversed,None,gp_Elips2d)
gp_Elips2d.IsDirect = new_instancemethod(_gp.gp_Elips2d_IsDirect,None,gp_Elips2d)
gp_Elips2d.Mirror = new_instancemethod(_gp.gp_Elips2d_Mirror,None,gp_Elips2d)
gp_Elips2d.Mirrored = new_instancemethod(_gp.gp_Elips2d_Mirrored,None,gp_Elips2d)
gp_Elips2d.Rotate = new_instancemethod(_gp.gp_Elips2d_Rotate,None,gp_Elips2d)
gp_Elips2d.Rotated = new_instancemethod(_gp.gp_Elips2d_Rotated,None,gp_Elips2d)
gp_Elips2d.Scale = new_instancemethod(_gp.gp_Elips2d_Scale,None,gp_Elips2d)
gp_Elips2d.Scaled = new_instancemethod(_gp.gp_Elips2d_Scaled,None,gp_Elips2d)
gp_Elips2d.Transform = new_instancemethod(_gp.gp_Elips2d_Transform,None,gp_Elips2d)
gp_Elips2d.Transformed = new_instancemethod(_gp.gp_Elips2d_Transformed,None,gp_Elips2d)
gp_Elips2d.Translate = new_instancemethod(_gp.gp_Elips2d_Translate,None,gp_Elips2d)
gp_Elips2d.Translated = new_instancemethod(_gp.gp_Elips2d_Translated,None,gp_Elips2d)
gp_Elips2d._CSFDB_Getgp_Elips2dpos = new_instancemethod(_gp.gp_Elips2d__CSFDB_Getgp_Elips2dpos,None,gp_Elips2d)
gp_Elips2d._CSFDB_Getgp_Elips2dmajorRadius = new_instancemethod(_gp.gp_Elips2d__CSFDB_Getgp_Elips2dmajorRadius,None,gp_Elips2d)
gp_Elips2d._CSFDB_Setgp_Elips2dmajorRadius = new_instancemethod(_gp.gp_Elips2d__CSFDB_Setgp_Elips2dmajorRadius,None,gp_Elips2d)
gp_Elips2d._CSFDB_Getgp_Elips2dminorRadius = new_instancemethod(_gp.gp_Elips2d__CSFDB_Getgp_Elips2dminorRadius,None,gp_Elips2d)
gp_Elips2d._CSFDB_Setgp_Elips2dminorRadius = new_instancemethod(_gp.gp_Elips2d__CSFDB_Setgp_Elips2dminorRadius,None,gp_Elips2d)
gp_Elips2d._kill_pointed = new_instancemethod(_gp.gp_Elips2d__kill_pointed,None,gp_Elips2d)
gp_Elips2d_swigregister = _gp.gp_Elips2d_swigregister
gp_Elips2d_swigregister(gp_Elips2d)

class gp_GTrsf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns the Identity transformation.

        :rtype: None

        * Converts the gp_Trsf transformation T into a general transformation, i.e. Returns a GTrsf with the same matrix of coefficients as the Trsf T.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        * Creates a transformation based on the matrix M and the vector V where M defines the vectorial part of the transformation, and V the translation part, or

        :param M:
        :type M: gp_Mat
        :param V:
        :type V: gp_XYZ
        :rtype: None

        """
        _gp.gp_GTrsf_swiginit(self,_gp.new_gp_GTrsf(*args))
    def SetAffinity(self, *args):
        """
        * Changes this transformation into an affinity of ratio Ratio with respect to the axis A1. Note: an affinity is a point-by-point transformation that transforms any point P into a point P' such that if H is the orthogonal projection of P on the axis A1 or the plane A2, the vectors HP and HP' satisfy: HP' = Ratio * HP.

        :param A1:
        :type A1: gp_Ax1
        :param Ratio:
        :type Ratio: float
        :rtype: None

        * Changes this transformation into an affinity of ratio Ratio with respect to the plane defined by the origin, the 'X Direction' and the 'Y Direction' of coordinate system A2. Note: an affinity is a point-by-point transformation that transforms any point P into a point P' such that if H is the orthogonal projection of P on the axis A1 or the plane A2, the vectors HP and HP' satisfy: HP' = Ratio * HP.

        :param A2:
        :type A2: gp_Ax2
        :param Ratio:
        :type Ratio: float
        :rtype: None

        """
        return _gp.gp_GTrsf_SetAffinity(self, *args)

    def SetValue(self, *args):
        """
        * Replaces the coefficient (Row, Col) of the matrix representing this transformation by Value. Raises OutOfRange if Row < 1 or Row > 3 or Col < 1 or Col > 4

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _gp.gp_GTrsf_SetValue(self, *args)

    def SetVectorialPart(self, *args):
        """
        * Replaces the vectorial part of this transformation by Matrix.

        :param Matrix:
        :type Matrix: gp_Mat
        :rtype: None

        """
        return _gp.gp_GTrsf_SetVectorialPart(self, *args)

    def SetTranslationPart(self, *args):
        """
        * Replaces the translation part of this transformation by the coordinates of the number triple Coord.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        """
        return _gp.gp_GTrsf_SetTranslationPart(self, *args)

    def SetTrsf(self, *args):
        """
        * Assigns the vectorial and translation parts of T to this transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_GTrsf_SetTrsf(self, *args)

    def IsNegative(self, *args):
        """
        * Returns true if the determinant of the vectorial part of this transformation is negative.

        :rtype: bool

        """
        return _gp.gp_GTrsf_IsNegative(self, *args)

    def IsSingular(self, *args):
        """
        * Returns true if this transformation is singular (and therefore, cannot be inverted). Note: The Gauss LU decomposition is used to invert the transformation matrix. Consequently, the transformation is considered as singular if the largest pivot found is less than or equal to gp::Resolution(). Warning If this transformation is singular, it cannot be inverted.

        :rtype: bool

        """
        return _gp.gp_GTrsf_IsSingular(self, *args)

    def Form(self, *args):
        """
        * Returns the nature of the transformation. It can be an identity transformation, a rotation, a translation, a mirror transformation (relative to a point, an axis or a plane), a scaling transformation, a compound transformation or some other type of transformation.

        :rtype: gp_TrsfForm

        """
        return _gp.gp_GTrsf_Form(self, *args)

    def SetForm(self, *args):
        """
        * verify and set the shape of the GTrsf Other or CompoundTrsf Ex : myGTrsf.SetValue(row1,col1,val1); myGTrsf.SetValue(row2,col2,val2); ... myGTrsf.SetForm();

        :rtype: None

        """
        return _gp.gp_GTrsf_SetForm(self, *args)

    def TranslationPart(self, *args):
        """
        * Returns the translation part of the GTrsf.

        :rtype: gp_XYZ

        """
        return _gp.gp_GTrsf_TranslationPart(self, *args)

    def VectorialPart(self, *args):
        """
        * Computes the vectorial part of the GTrsf. The returned Matrix is a 3*3 matrix.

        :rtype: gp_Mat

        """
        return _gp.gp_GTrsf_VectorialPart(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficients of the global matrix of transformation. Raises OutOfRange if Row < 1 or Row > 3 or Col < 1 or Col > 4

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_GTrsf_Value(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_GTrsf_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Computes the reverse transformation. Raises an exception if the matrix of the transformation is not inversible.

        :rtype: gp_GTrsf

        """
        return _gp.gp_GTrsf_Inverted(self, *args)

    def Multiply(self, *args):
        """
        * Computes the transformation composed from T and <self>. In a C++ implementation you can also write Tcomposed = <self> * T. Example : GTrsf T1, T2, Tcomp; ............... //composition : Tcomp = T2.Multiplied(T1); // or (Tcomp = T2 * T1) // transformation of a point XYZ P(10.,3.,4.); XYZ P1(P); Tcomp.Transforms(P1); //using Tcomp XYZ P2(P); T1.Transforms(P2); //using T1 then T2 T2.Transforms(P2); // P1 = P2 !!! C++: alias operator *=

        :param T:
        :type T: gp_GTrsf
        :rtype: None

        """
        return _gp.gp_GTrsf_Multiply(self, *args)

    def Multiplied(self, *args):
        """
        * Computes the transformation composed with <self> and T. <self> = T * <self>

        :param T:
        :type T: gp_GTrsf
        :rtype: gp_GTrsf

        """
        return _gp.gp_GTrsf_Multiplied(self, *args)

    def PreMultiply(self, *args):
        """
        * Computes the product of the transformation T and this transformation and assigns the result to this transformation. this = T * this

        :param T:
        :type T: gp_GTrsf
        :rtype: None

        """
        return _gp.gp_GTrsf_PreMultiply(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_GTrsf_Power(self, *args)

    def Powered(self, *args):
        """
        * Computes: - the product of this transformation multiplied by itself N times, if N is positive, or - the product of the inverse of this transformation multiplied by itself |N| times, if N is negative. If N equals zero, the result is equal to the Identity transformation. I.e.: <self> * <self> * .......* <self>, N time. if N =0 <self> = Identity if N < 0 <self> = <self>.Inverse() *...........* <self>.Inverse(). Raises an exception if N < 0 and if the matrix of the transformation not inversible.

        :param N:
        :type N: int
        :rtype: gp_GTrsf

        """
        return _gp.gp_GTrsf_Powered(self, *args)

    def Transforms(self, *args):
        """
        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        * Transforms a triplet XYZ with a GTrsf.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_GTrsf_Transforms(self, *args)

    def Trsf(self, *args):
        """
        :rtype: gp_Trsf

        """
        return _gp.gp_GTrsf_Trsf(self, *args)

    def _CSFDB_Getgp_GTrsfmatrix(self, *args):
        """
        :rtype: gp_Mat

        """
        return _gp.gp_GTrsf__CSFDB_Getgp_GTrsfmatrix(self, *args)

    def _CSFDB_Getgp_GTrsfloc(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _gp.gp_GTrsf__CSFDB_Getgp_GTrsfloc(self, *args)

    def _CSFDB_Getgp_GTrsfshape(self, *args):
        """
        :rtype: gp_TrsfForm

        """
        return _gp.gp_GTrsf__CSFDB_Getgp_GTrsfshape(self, *args)

    def _CSFDB_Setgp_GTrsfshape(self, *args):
        """
        :param p:
        :type p: gp_TrsfForm
        :rtype: None

        """
        return _gp.gp_GTrsf__CSFDB_Setgp_GTrsfshape(self, *args)

    def _CSFDB_Getgp_GTrsfscale(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_GTrsf__CSFDB_Getgp_GTrsfscale(self, *args)

    def _CSFDB_Setgp_GTrsfscale(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_GTrsf__CSFDB_Setgp_GTrsfscale(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_GTrsf.SetAffinity = new_instancemethod(_gp.gp_GTrsf_SetAffinity,None,gp_GTrsf)
gp_GTrsf.SetValue = new_instancemethod(_gp.gp_GTrsf_SetValue,None,gp_GTrsf)
gp_GTrsf.SetVectorialPart = new_instancemethod(_gp.gp_GTrsf_SetVectorialPart,None,gp_GTrsf)
gp_GTrsf.SetTranslationPart = new_instancemethod(_gp.gp_GTrsf_SetTranslationPart,None,gp_GTrsf)
gp_GTrsf.SetTrsf = new_instancemethod(_gp.gp_GTrsf_SetTrsf,None,gp_GTrsf)
gp_GTrsf.IsNegative = new_instancemethod(_gp.gp_GTrsf_IsNegative,None,gp_GTrsf)
gp_GTrsf.IsSingular = new_instancemethod(_gp.gp_GTrsf_IsSingular,None,gp_GTrsf)
gp_GTrsf.Form = new_instancemethod(_gp.gp_GTrsf_Form,None,gp_GTrsf)
gp_GTrsf.SetForm = new_instancemethod(_gp.gp_GTrsf_SetForm,None,gp_GTrsf)
gp_GTrsf.TranslationPart = new_instancemethod(_gp.gp_GTrsf_TranslationPart,None,gp_GTrsf)
gp_GTrsf.VectorialPart = new_instancemethod(_gp.gp_GTrsf_VectorialPart,None,gp_GTrsf)
gp_GTrsf.Value = new_instancemethod(_gp.gp_GTrsf_Value,None,gp_GTrsf)
gp_GTrsf.Invert = new_instancemethod(_gp.gp_GTrsf_Invert,None,gp_GTrsf)
gp_GTrsf.Inverted = new_instancemethod(_gp.gp_GTrsf_Inverted,None,gp_GTrsf)
gp_GTrsf.Multiply = new_instancemethod(_gp.gp_GTrsf_Multiply,None,gp_GTrsf)
gp_GTrsf.Multiplied = new_instancemethod(_gp.gp_GTrsf_Multiplied,None,gp_GTrsf)
gp_GTrsf.PreMultiply = new_instancemethod(_gp.gp_GTrsf_PreMultiply,None,gp_GTrsf)
gp_GTrsf.Power = new_instancemethod(_gp.gp_GTrsf_Power,None,gp_GTrsf)
gp_GTrsf.Powered = new_instancemethod(_gp.gp_GTrsf_Powered,None,gp_GTrsf)
gp_GTrsf.Transforms = new_instancemethod(_gp.gp_GTrsf_Transforms,None,gp_GTrsf)
gp_GTrsf.Trsf = new_instancemethod(_gp.gp_GTrsf_Trsf,None,gp_GTrsf)
gp_GTrsf._CSFDB_Getgp_GTrsfmatrix = new_instancemethod(_gp.gp_GTrsf__CSFDB_Getgp_GTrsfmatrix,None,gp_GTrsf)
gp_GTrsf._CSFDB_Getgp_GTrsfloc = new_instancemethod(_gp.gp_GTrsf__CSFDB_Getgp_GTrsfloc,None,gp_GTrsf)
gp_GTrsf._CSFDB_Getgp_GTrsfshape = new_instancemethod(_gp.gp_GTrsf__CSFDB_Getgp_GTrsfshape,None,gp_GTrsf)
gp_GTrsf._CSFDB_Setgp_GTrsfshape = new_instancemethod(_gp.gp_GTrsf__CSFDB_Setgp_GTrsfshape,None,gp_GTrsf)
gp_GTrsf._CSFDB_Getgp_GTrsfscale = new_instancemethod(_gp.gp_GTrsf__CSFDB_Getgp_GTrsfscale,None,gp_GTrsf)
gp_GTrsf._CSFDB_Setgp_GTrsfscale = new_instancemethod(_gp.gp_GTrsf__CSFDB_Setgp_GTrsfscale,None,gp_GTrsf)
gp_GTrsf._kill_pointed = new_instancemethod(_gp.gp_GTrsf__kill_pointed,None,gp_GTrsf)
gp_GTrsf_swigregister = _gp.gp_GTrsf_swigregister
gp_GTrsf_swigregister(gp_GTrsf)

class gp_GTrsf2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * returns identity transformation.

        :rtype: None

        * Converts the gp_Trsf2d transformation T into a general transformation.

        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        * Creates a transformation based on the matrix M and the vector V where M defines the vectorial part of the transformation, and V the translation part.

        :param M:
        :type M: gp_Mat2d
        :param V:
        :type V: gp_XY
        :rtype: None

        """
        _gp.gp_GTrsf2d_swiginit(self,_gp.new_gp_GTrsf2d(*args))
    def SetAffinity(self, *args):
        """
        * Changes this transformation into an affinity of ratio Ratio with respect to the axis A. Note: An affinity is a point-by-point transformation that transforms any point P into a point P' such that if H is the orthogonal projection of P on the axis A, the vectors HP and HP' satisfy: HP' = Ratio * HP.

        :param A:
        :type A: gp_Ax2d
        :param Ratio:
        :type Ratio: float
        :rtype: None

        """
        return _gp.gp_GTrsf2d_SetAffinity(self, *args)

    def SetValue(self, *args):
        """
        * Replaces the coefficient (Row, Col) of the matrix representing this transformation by Value, Raises OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _gp.gp_GTrsf2d_SetValue(self, *args)

    def SetTranslationPart(self, *args):
        """
        * Replacesthe translation part of this transformation by the coordinates of the number pair Coord.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        """
        return _gp.gp_GTrsf2d_SetTranslationPart(self, *args)

    def SetTrsf2d(self, *args):
        """
        * Assigns the vectorial and translation parts of T to this transformation.

        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_GTrsf2d_SetTrsf2d(self, *args)

    def SetVectorialPart(self, *args):
        """
        * Replaces the vectorial part of this transformation by Matrix.

        :param Matrix:
        :type Matrix: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_GTrsf2d_SetVectorialPart(self, *args)

    def IsNegative(self, *args):
        """
        * Returns true if the determinant of the vectorial part of this transformation is negative.

        :rtype: bool

        """
        return _gp.gp_GTrsf2d_IsNegative(self, *args)

    def IsSingular(self, *args):
        """
        * Returns true if this transformation is singular (and therefore, cannot be inverted). Note: The Gauss LU decomposition is used to invert the transformation matrix. Consequently, the transformation is considered as singular if the largest pivot found is less than or equal to gp::Resolution(). Warning If this transformation is singular, it cannot be inverted.

        :rtype: bool

        """
        return _gp.gp_GTrsf2d_IsSingular(self, *args)

    def Form(self, *args):
        """
        * Returns the nature of the transformation. It can be an identity transformation, a rotation, a translation, a mirror transformation (relative to a point or axis), a scaling transformation, a compound transformation or some other type of transformation.

        :rtype: gp_TrsfForm

        """
        return _gp.gp_GTrsf2d_Form(self, *args)

    def TranslationPart(self, *args):
        """
        * Returns the translation part of the GTrsf2d.

        :rtype: gp_XY

        """
        return _gp.gp_GTrsf2d_TranslationPart(self, *args)

    def VectorialPart(self, *args):
        """
        * Computes the vectorial part of the GTrsf2d. The returned Matrix is a 2*2 matrix.

        :rtype: gp_Mat2d

        """
        return _gp.gp_GTrsf2d_VectorialPart(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficients of the global matrix of transformation. Raised OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_GTrsf2d_Value(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_GTrsf2d_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Computes the reverse transformation. Raised an exception if the matrix of the transformation is not inversible.

        :rtype: gp_GTrsf2d

        """
        return _gp.gp_GTrsf2d_Inverted(self, *args)

    def Multiply(self, *args):
        """
        :param T:
        :type T: gp_GTrsf2d
        :rtype: None

        """
        return _gp.gp_GTrsf2d_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param T:
        :type T: gp_GTrsf2d
        :rtype: None

        """
        return _gp.gp_GTrsf2d___imul__(self, *args)

    def Multiplied(self, *args):
        """
        * Computes the transformation composed with T and <self>. In a C++ implementation you can also write Tcomposed = <self> * T. Example : GTrsf2d T1, T2, Tcomp; ............... //composition : Tcomp = T2.Multiplied(T1); // or (Tcomp = T2 * T1) // transformation of a point XY P(10.,3.); XY P1(P); Tcomp.Transforms(P1); //using Tcomp XY P2(P); T1.Transforms(P2); //using T1 then T2 T2.Transforms(P2); // P1 = P2 !!!

        :param T:
        :type T: gp_GTrsf2d
        :rtype: gp_GTrsf2d

        """
        return _gp.gp_GTrsf2d_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param T:
        :type T: gp_GTrsf2d
        :rtype: gp_GTrsf2d

        """
        return _gp.gp_GTrsf2d___mul__(self, *args)

    def PreMultiply(self, *args):
        """
        * Computes the product of the transformation T and this transformation, and assigns the result to this transformation: this = T * this

        :param T:
        :type T: gp_GTrsf2d
        :rtype: None

        """
        return _gp.gp_GTrsf2d_PreMultiply(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_GTrsf2d_Power(self, *args)

    def Powered(self, *args):
        """
        * Computes the following composition of transformations <self> * <self> * .......* <self>, N time. if N = 0 <self> = Identity if N < 0 <self> = <self>.Inverse() *...........* <self>.Inverse(). Raises an exception if N < 0 and if the matrix of the transformation is not inversible.

        :param N:
        :type N: int
        :rtype: gp_GTrsf2d

        """
        return _gp.gp_GTrsf2d_Powered(self, *args)

    def Transformed(self, *args):
        """
        :param Coord:
        :type Coord: gp_XY
        :rtype: gp_XY

        """
        return _gp.gp_GTrsf2d_Transformed(self, *args)

    def Transforms(self, *args):
        """
        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        * Applies this transformation to the coordinates: - of the number pair Coord, or - X and Y. Note: - Transforms modifies X, Y, or the coordinate pair Coord, while - Transformed creates a new coordinate pair.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_GTrsf2d_Transforms(self, *args)

    def Trsf2d(self, *args):
        """
        * Converts this transformation into a gp_Trsf2d transformation. Exceptions Standard_ConstructionError if this transformation cannot be converted, i.e. if its form is gp_Other.

        :rtype: gp_Trsf2d

        """
        return _gp.gp_GTrsf2d_Trsf2d(self, *args)

    def _CSFDB_Getgp_GTrsf2dmatrix(self, *args):
        """
        :rtype: gp_Mat2d

        """
        return _gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dmatrix(self, *args)

    def _CSFDB_Getgp_GTrsf2dloc(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dloc(self, *args)

    def _CSFDB_Getgp_GTrsf2dshape(self, *args):
        """
        :rtype: gp_TrsfForm

        """
        return _gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dshape(self, *args)

    def _CSFDB_Setgp_GTrsf2dshape(self, *args):
        """
        :param p:
        :type p: gp_TrsfForm
        :rtype: None

        """
        return _gp.gp_GTrsf2d__CSFDB_Setgp_GTrsf2dshape(self, *args)

    def _CSFDB_Getgp_GTrsf2dscale(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dscale(self, *args)

    def _CSFDB_Setgp_GTrsf2dscale(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_GTrsf2d__CSFDB_Setgp_GTrsf2dscale(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_GTrsf2d.SetAffinity = new_instancemethod(_gp.gp_GTrsf2d_SetAffinity,None,gp_GTrsf2d)
gp_GTrsf2d.SetValue = new_instancemethod(_gp.gp_GTrsf2d_SetValue,None,gp_GTrsf2d)
gp_GTrsf2d.SetTranslationPart = new_instancemethod(_gp.gp_GTrsf2d_SetTranslationPart,None,gp_GTrsf2d)
gp_GTrsf2d.SetTrsf2d = new_instancemethod(_gp.gp_GTrsf2d_SetTrsf2d,None,gp_GTrsf2d)
gp_GTrsf2d.SetVectorialPart = new_instancemethod(_gp.gp_GTrsf2d_SetVectorialPart,None,gp_GTrsf2d)
gp_GTrsf2d.IsNegative = new_instancemethod(_gp.gp_GTrsf2d_IsNegative,None,gp_GTrsf2d)
gp_GTrsf2d.IsSingular = new_instancemethod(_gp.gp_GTrsf2d_IsSingular,None,gp_GTrsf2d)
gp_GTrsf2d.Form = new_instancemethod(_gp.gp_GTrsf2d_Form,None,gp_GTrsf2d)
gp_GTrsf2d.TranslationPart = new_instancemethod(_gp.gp_GTrsf2d_TranslationPart,None,gp_GTrsf2d)
gp_GTrsf2d.VectorialPart = new_instancemethod(_gp.gp_GTrsf2d_VectorialPart,None,gp_GTrsf2d)
gp_GTrsf2d.Value = new_instancemethod(_gp.gp_GTrsf2d_Value,None,gp_GTrsf2d)
gp_GTrsf2d.Invert = new_instancemethod(_gp.gp_GTrsf2d_Invert,None,gp_GTrsf2d)
gp_GTrsf2d.Inverted = new_instancemethod(_gp.gp_GTrsf2d_Inverted,None,gp_GTrsf2d)
gp_GTrsf2d.Multiply = new_instancemethod(_gp.gp_GTrsf2d_Multiply,None,gp_GTrsf2d)
gp_GTrsf2d.__imul__ = new_instancemethod(_gp.gp_GTrsf2d___imul__,None,gp_GTrsf2d)
gp_GTrsf2d.Multiplied = new_instancemethod(_gp.gp_GTrsf2d_Multiplied,None,gp_GTrsf2d)
gp_GTrsf2d.__mul__ = new_instancemethod(_gp.gp_GTrsf2d___mul__,None,gp_GTrsf2d)
gp_GTrsf2d.PreMultiply = new_instancemethod(_gp.gp_GTrsf2d_PreMultiply,None,gp_GTrsf2d)
gp_GTrsf2d.Power = new_instancemethod(_gp.gp_GTrsf2d_Power,None,gp_GTrsf2d)
gp_GTrsf2d.Powered = new_instancemethod(_gp.gp_GTrsf2d_Powered,None,gp_GTrsf2d)
gp_GTrsf2d.Transformed = new_instancemethod(_gp.gp_GTrsf2d_Transformed,None,gp_GTrsf2d)
gp_GTrsf2d.Transforms = new_instancemethod(_gp.gp_GTrsf2d_Transforms,None,gp_GTrsf2d)
gp_GTrsf2d.Trsf2d = new_instancemethod(_gp.gp_GTrsf2d_Trsf2d,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Getgp_GTrsf2dmatrix = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dmatrix,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Getgp_GTrsf2dloc = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dloc,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Getgp_GTrsf2dshape = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dshape,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Setgp_GTrsf2dshape = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Setgp_GTrsf2dshape,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Getgp_GTrsf2dscale = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Getgp_GTrsf2dscale,None,gp_GTrsf2d)
gp_GTrsf2d._CSFDB_Setgp_GTrsf2dscale = new_instancemethod(_gp.gp_GTrsf2d__CSFDB_Setgp_GTrsf2dscale,None,gp_GTrsf2d)
gp_GTrsf2d._kill_pointed = new_instancemethod(_gp.gp_GTrsf2d__kill_pointed,None,gp_GTrsf2d)
gp_GTrsf2d_swigregister = _gp.gp_GTrsf2d_swigregister
gp_GTrsf2d_swigregister(gp_GTrsf2d)

class gp_Hypr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates of an indefinite hyperbola.

        :rtype: None

        * Creates a hyperbola with radii MajorRadius and MinorRadius, positioned in the space by the coordinate system A2 such that: - the origin of A2 is the center of the hyperbola, - the 'X Direction' of A2 defines the major axis of the hyperbola, that is, the major radius MajorRadius is measured along this axis, and - the 'Y Direction' of A2 defines the minor axis of the hyperbola, that is, the minor radius MinorRadius is measured along this axis. Note: This class does not prevent the creation of a hyperbola where: - MajorAxis is equal to MinorAxis, or - MajorAxis is less than MinorAxis. Exceptions Standard_ConstructionError if MajorAxis or MinorAxis is negative. Raises ConstructionError if MajorRadius < 0.0 or MinorRadius < 0.0 Raised if MajorRadius < 0.0 or MinorRadius < 0.0

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _gp.gp_Hypr_swiginit(self,_gp.new_gp_Hypr(*args))
    def SetAxis(self, *args):
        """
        * Modifies this hyperbola, by redefining its local coordinate system so that: - its origin and 'main Direction' become those of the axis A1 (the 'X Direction' and 'Y Direction' are then recomputed in the same way as for any gp_Ax2). Raises ConstructionError if the direction of A1 is parallel to the direction of the 'XAxis' of the hyperbola.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Hypr_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Modifies this hyperbola, by redefining its local coordinate system so that its origin becomes P.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Hypr_SetLocation(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Modifies the major radius of this hyperbola. Exceptions Standard_ConstructionError if MajorRadius is negative.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _gp.gp_Hypr_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Modifies the minor radius of this hyperbola. Exceptions Standard_ConstructionError if MinorRadius is negative.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _gp.gp_Hypr_SetMinorRadius(self, *args)

    def SetPosition(self, *args):
        """
        * Modifies this hyperbola, by redefining its local coordinate system so that it becomes A2.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Hypr_SetPosition(self, *args)

    def Asymptote1(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = (B/A)*X where A is the major radius and B is the minor radius. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_Asymptote1(self, *args)

    def Asymptote2(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = -(B/A)*X. where A is the major radius and B is the minor radius. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_Asymptote2(self, *args)

    def Axis(self, *args):
        """
        * Returns the axis passing through the center, and normal to the plane of this hyperbola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_Axis(self, *args)

    def ConjugateBranch1(self, *args):
        """
        * Computes the branch of hyperbola which is on the positive side of the 'YAxis' of <self>.

        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_ConjugateBranch1(self, *args)

    def ConjugateBranch2(self, *args):
        """
        * Computes the branch of hyperbola which is on the negative side of the 'YAxis' of <self>.

        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_ConjugateBranch2(self, *args)

    def Directrix1(self, *args):
        """
        * This directrix is the line normal to the XAxis of the hyperbola in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. This line is parallel to the 'YAxis'. The intersection point between the directrix1 and the 'XAxis' is the 'Location' point of the directrix1. This point is on the positive side of the 'XAxis'.

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'Directrix1' with respect to the 'YAxis' of the hyperbola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_Directrix2(self, *args)

    def Eccentricity(self, *args):
        """
        * Returns the excentricity of the hyperbola (e > 1). If f is the distance between the location of the hyperbola and the Focus1 then the eccentricity e = f / MajorRadius. Raises DomainError if MajorRadius = 0.0

        :rtype: float

        """
        return _gp.gp_Hypr_Eccentricity(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance. It is the distance between the the two focus of the hyperbola.

        :rtype: float

        """
        return _gp.gp_Hypr_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the hyperbola. This focus is on the positive side of the 'XAxis' of the hyperbola.

        :rtype: gp_Pnt

        """
        return _gp.gp_Hypr_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the hyperbola. This focus is on the negative side of the 'XAxis' of the hyperbola.

        :rtype: gp_Pnt

        """
        return _gp.gp_Hypr_Focus2(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of the hyperbola. It is the intersection point between the 'XAxis' and the 'YAxis'.

        :rtype: gp_Pnt

        """
        return _gp.gp_Hypr_Location(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius of the hyperbola. It is the radius on the 'XAxis' of the hyperbola.

        :rtype: float

        """
        return _gp.gp_Hypr_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the minor radius of the hyperbola. It is the radius on the 'YAxis' of the hyperbola.

        :rtype: float

        """
        return _gp.gp_Hypr_MinorRadius(self, *args)

    def OtherBranch(self, *args):
        """
        * Returns the branch of hyperbola obtained by doing the symmetrical transformation of <self> with respect to the 'YAxis' of <self>.

        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_OtherBranch(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (e * e - 1) * MajorRadius where e is the eccentricity of the hyperbola. Raises DomainError if MajorRadius = 0.0

        :rtype: float

        """
        return _gp.gp_Hypr_Parameter(self, *args)

    def Position(self, *args):
        """
        * Returns the coordinate system of the hyperbola.

        :rtype: gp_Ax2

        """
        return _gp.gp_Hypr_Position(self, *args)

    def XAxis(self, *args):
        """
        * Computes an axis, whose - the origin is the center of this hyperbola, and - the unit vector is the 'X Direction' of the local coordinate system of this hyperbola. These axes are, the major axis (the 'X Axis') and of this hyperboReturns the 'XAxis' of the hyperbola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Computes an axis, whose - the origin is the center of this hyperbola, and - the unit vector is the 'Y Direction' of the local coordinate system of this hyperbola. These axes are the minor axis (the 'Y Axis') of this hyperbola

        :rtype: gp_Ax1

        """
        return _gp.gp_Hypr_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Hypr_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an hyperbola with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Hypr

        * Performs the symmetrical transformation of an hyperbola with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Hypr

        * Performs the symmetrical transformation of an hyperbola with respect to a plane. The axis placement A2 locates the plane of the symmetry (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Hypr_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an hyperbola. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Hypr_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales an hyperbola. S is the scaling value.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Hypr_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an hyperbola with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Hypr_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an hyperbola in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Hypr

        * Translates an hyperbola from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Hypr

        """
        return _gp.gp_Hypr_Translated(self, *args)

    def _CSFDB_Getgp_Hyprpos(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _gp.gp_Hypr__CSFDB_Getgp_Hyprpos(self, *args)

    def _CSFDB_Getgp_HyprmajorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Hypr__CSFDB_Getgp_HyprmajorRadius(self, *args)

    def _CSFDB_Setgp_HyprmajorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Hypr__CSFDB_Setgp_HyprmajorRadius(self, *args)

    def _CSFDB_Getgp_HyprminorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Hypr__CSFDB_Getgp_HyprminorRadius(self, *args)

    def _CSFDB_Setgp_HyprminorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Hypr__CSFDB_Setgp_HyprminorRadius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Hypr.SetAxis = new_instancemethod(_gp.gp_Hypr_SetAxis,None,gp_Hypr)
gp_Hypr.SetLocation = new_instancemethod(_gp.gp_Hypr_SetLocation,None,gp_Hypr)
gp_Hypr.SetMajorRadius = new_instancemethod(_gp.gp_Hypr_SetMajorRadius,None,gp_Hypr)
gp_Hypr.SetMinorRadius = new_instancemethod(_gp.gp_Hypr_SetMinorRadius,None,gp_Hypr)
gp_Hypr.SetPosition = new_instancemethod(_gp.gp_Hypr_SetPosition,None,gp_Hypr)
gp_Hypr.Asymptote1 = new_instancemethod(_gp.gp_Hypr_Asymptote1,None,gp_Hypr)
gp_Hypr.Asymptote2 = new_instancemethod(_gp.gp_Hypr_Asymptote2,None,gp_Hypr)
gp_Hypr.Axis = new_instancemethod(_gp.gp_Hypr_Axis,None,gp_Hypr)
gp_Hypr.ConjugateBranch1 = new_instancemethod(_gp.gp_Hypr_ConjugateBranch1,None,gp_Hypr)
gp_Hypr.ConjugateBranch2 = new_instancemethod(_gp.gp_Hypr_ConjugateBranch2,None,gp_Hypr)
gp_Hypr.Directrix1 = new_instancemethod(_gp.gp_Hypr_Directrix1,None,gp_Hypr)
gp_Hypr.Directrix2 = new_instancemethod(_gp.gp_Hypr_Directrix2,None,gp_Hypr)
gp_Hypr.Eccentricity = new_instancemethod(_gp.gp_Hypr_Eccentricity,None,gp_Hypr)
gp_Hypr.Focal = new_instancemethod(_gp.gp_Hypr_Focal,None,gp_Hypr)
gp_Hypr.Focus1 = new_instancemethod(_gp.gp_Hypr_Focus1,None,gp_Hypr)
gp_Hypr.Focus2 = new_instancemethod(_gp.gp_Hypr_Focus2,None,gp_Hypr)
gp_Hypr.Location = new_instancemethod(_gp.gp_Hypr_Location,None,gp_Hypr)
gp_Hypr.MajorRadius = new_instancemethod(_gp.gp_Hypr_MajorRadius,None,gp_Hypr)
gp_Hypr.MinorRadius = new_instancemethod(_gp.gp_Hypr_MinorRadius,None,gp_Hypr)
gp_Hypr.OtherBranch = new_instancemethod(_gp.gp_Hypr_OtherBranch,None,gp_Hypr)
gp_Hypr.Parameter = new_instancemethod(_gp.gp_Hypr_Parameter,None,gp_Hypr)
gp_Hypr.Position = new_instancemethod(_gp.gp_Hypr_Position,None,gp_Hypr)
gp_Hypr.XAxis = new_instancemethod(_gp.gp_Hypr_XAxis,None,gp_Hypr)
gp_Hypr.YAxis = new_instancemethod(_gp.gp_Hypr_YAxis,None,gp_Hypr)
gp_Hypr.Mirror = new_instancemethod(_gp.gp_Hypr_Mirror,None,gp_Hypr)
gp_Hypr.Mirrored = new_instancemethod(_gp.gp_Hypr_Mirrored,None,gp_Hypr)
gp_Hypr.Rotate = new_instancemethod(_gp.gp_Hypr_Rotate,None,gp_Hypr)
gp_Hypr.Rotated = new_instancemethod(_gp.gp_Hypr_Rotated,None,gp_Hypr)
gp_Hypr.Scale = new_instancemethod(_gp.gp_Hypr_Scale,None,gp_Hypr)
gp_Hypr.Scaled = new_instancemethod(_gp.gp_Hypr_Scaled,None,gp_Hypr)
gp_Hypr.Transform = new_instancemethod(_gp.gp_Hypr_Transform,None,gp_Hypr)
gp_Hypr.Transformed = new_instancemethod(_gp.gp_Hypr_Transformed,None,gp_Hypr)
gp_Hypr.Translate = new_instancemethod(_gp.gp_Hypr_Translate,None,gp_Hypr)
gp_Hypr.Translated = new_instancemethod(_gp.gp_Hypr_Translated,None,gp_Hypr)
gp_Hypr._CSFDB_Getgp_Hyprpos = new_instancemethod(_gp.gp_Hypr__CSFDB_Getgp_Hyprpos,None,gp_Hypr)
gp_Hypr._CSFDB_Getgp_HyprmajorRadius = new_instancemethod(_gp.gp_Hypr__CSFDB_Getgp_HyprmajorRadius,None,gp_Hypr)
gp_Hypr._CSFDB_Setgp_HyprmajorRadius = new_instancemethod(_gp.gp_Hypr__CSFDB_Setgp_HyprmajorRadius,None,gp_Hypr)
gp_Hypr._CSFDB_Getgp_HyprminorRadius = new_instancemethod(_gp.gp_Hypr__CSFDB_Getgp_HyprminorRadius,None,gp_Hypr)
gp_Hypr._CSFDB_Setgp_HyprminorRadius = new_instancemethod(_gp.gp_Hypr__CSFDB_Setgp_HyprminorRadius,None,gp_Hypr)
gp_Hypr._kill_pointed = new_instancemethod(_gp.gp_Hypr__kill_pointed,None,gp_Hypr)
gp_Hypr_swigregister = _gp.gp_Hypr_swigregister
gp_Hypr_swigregister(gp_Hypr)

class gp_Hypr2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates of an indefinite hyperbola.

        :rtype: None

        * Creates a hyperbola with radii MajorRadius and MinorRadius, centered on the origin of MajorAxis and where the unit vector of MajorAxis is the 'X Direction' of the local coordinate system of the hyperbola. This coordinate system is direct if Sense is true (the default value), and indirect if Sense is false. Warnings : It is yet possible to create an Hyperbola with MajorRadius <= MinorRadius. Raises ConstructionError if MajorRadius < 0.0 or MinorRadius < 0.0

        :param MajorAxis:
        :type MajorAxis: gp_Ax2d
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * a hyperbola with radii MajorRadius and MinorRadius, positioned in the plane by coordinate system A where: - the origin of A is the center of the hyperbola, - the 'X Direction' of A defines the major axis of the hyperbola, that is, the major radius MajorRadius is measured along this axis, and - the 'Y Direction' of A defines the minor axis of the hyperbola, that is, the minor radius MinorRadius is measured along this axis, and - the orientation (direct or indirect sense) of A gives the implicit orientation of the hyperbola. Warnings : It is yet possible to create an Hyperbola with MajorRadius <= MinorRadius. Raises ConstructionError if MajorRadius < 0.0 or MinorRadius < 0.0

        :param A:
        :type A: gp_Ax22d
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _gp.gp_Hypr2d_swiginit(self,_gp.new_gp_Hypr2d(*args))
    def SetLocation(self, *args):
        """
        * Modifies this hyperbola, by redefining its local coordinate system so that its origin becomes P.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetLocation(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Modifies the major or minor radius of this hyperbola. Exceptions Standard_ConstructionError if MajorRadius or MinorRadius is negative.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Modifies the major or minor radius of this hyperbola. Exceptions Standard_ConstructionError if MajorRadius or MinorRadius is negative.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetMinorRadius(self, *args)

    def SetAxis(self, *args):
        """
        * Modifies this hyperbola, by redefining its local coordinate system so that it becomes A.

        :param A:
        :type A: gp_Ax22d
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetAxis(self, *args)

    def SetXAxis(self, *args):
        """
        * Changes the major axis of the hyperbola. The minor axis is recomputed and the location of the hyperbola too.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        """
        * Changes the minor axis of the hyperbola.The minor axis is recomputed and the location of the hyperbola too.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_SetYAxis(self, *args)

    def Asymptote1(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = (B/A)*X where A is the major radius of the hyperbola and B the minor radius of the hyperbola. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_Asymptote1(self, *args)

    def Asymptote2(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = -(B/A)*X where A is the major radius of the hyperbola and B the minor radius of the hyperbola. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_Asymptote2(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the coefficients of the implicit equation of the hyperbola : A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :param E:
        :type E: float
        :param F:
        :type F: float
        :rtype: None

        """
        return _gp.gp_Hypr2d_Coefficients(self, *args)

    def ConjugateBranch1(self, *args):
        """
        * Computes the branch of hyperbola which is on the positive side of the 'YAxis' of <self>.

        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_ConjugateBranch1(self, *args)

    def ConjugateBranch2(self, *args):
        """
        * Computes the branch of hyperbola which is on the negative side of the 'YAxis' of <self>.

        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_ConjugateBranch2(self, *args)

    def Directrix1(self, *args):
        """
        * Computes the directrix which is the line normal to the XAxis of the hyperbola in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. This line is parallel to the 'YAxis'. The intersection point between the 'Directrix1' and the 'XAxis' is the 'Location' point of the 'Directrix1'. This point is on the positive side of the 'XAxis'.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'Directrix1' with respect to the 'YAxis' of the hyperbola.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_Directrix2(self, *args)

    def Eccentricity(self, *args):
        """
        * Returns the excentricity of the hyperbola (e > 1). If f is the distance between the location of the hyperbola and the Focus1 then the eccentricity e = f / MajorRadius. Raises DomainError if MajorRadius = 0.0.

        :rtype: float

        """
        return _gp.gp_Hypr2d_Eccentricity(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance. It is the distance between the 'Location' of the hyperbola and 'Focus1' or 'Focus2'.

        :rtype: float

        """
        return _gp.gp_Hypr2d_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the hyperbola. This focus is on the positive side of the 'XAxis' of the hyperbola.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Hypr2d_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the hyperbola. This focus is on the negative side of the 'XAxis' of the hyperbola.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Hypr2d_Focus2(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of the hyperbola. It is the intersection point between the 'XAxis' and the 'YAxis'.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Hypr2d_Location(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius of the hyperbola (it is the radius corresponding to the 'XAxis' of the hyperbola).

        :rtype: float

        """
        return _gp.gp_Hypr2d_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the minor radius of the hyperbola (it is the radius corresponding to the 'YAxis' of the hyperbola).

        :rtype: float

        """
        return _gp.gp_Hypr2d_MinorRadius(self, *args)

    def OtherBranch(self, *args):
        """
        * Returns the branch of hyperbola obtained by doing the symmetrical transformation of <self> with respect to the 'YAxis' of <self>.

        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_OtherBranch(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (e * e - 1) * MajorRadius where e is the eccentricity of the hyperbola. Raises DomainError if MajorRadius = 0.0

        :rtype: float

        """
        return _gp.gp_Hypr2d_Parameter(self, *args)

    def Axis(self, *args):
        """
        * Returns the axisplacement of the hyperbola.

        :rtype: gp_Ax22d

        """
        return _gp.gp_Hypr2d_Axis(self, *args)

    def XAxis(self, *args):
        """
        * Computes an axis whose - the origin is the center of this hyperbola, and - the unit vector is the 'X Direction' or 'Y Direction' respectively of the local coordinate system of this hyperbola Returns the major axis of the hyperbola.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Computes an axis whose - the origin is the center of this hyperbola, and - the unit vector is the 'X Direction' or 'Y Direction' respectively of the local coordinate system of this hyperbola Returns the minor axis of the hyperbola.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Hypr2d_YAxis(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Hypr2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the orientation of the local coordinate system of this hyperbola (the 'Y Axis' is reversed). Therefore, the implicit orientation of this hyperbola is reversed. Note: - Reverse assigns the result to this hyperbola, while - Reversed creates a new one.

        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Reversed(self, *args)

    def IsDirect(self, *args):
        """
        * Returns true if the local coordinate system is direct  and false in the other case.

        :rtype: bool

        """
        return _gp.gp_Hypr2d_IsDirect(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of an hyperbola with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Hypr2d

        * Performs the symmetrical transformation of an hyperbola with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Hypr2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates an hyperbola. P is the center of the rotation. Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Hypr2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales an hyperbola. <S> is the scaling value. If <S> is positive only the location point is modified. But if <S> is negative the 'XAxis' is reversed and the 'YAxis' too.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an hyperbola with the transformation T from class Trsf2d.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Hypr2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates an hyperbola in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Hypr2d

        * Translates an hyperbola from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Hypr2d

        """
        return _gp.gp_Hypr2d_Translated(self, *args)

    def _CSFDB_Getgp_Hypr2dpos(self, *args):
        """
        :rtype: gp_Ax22d

        """
        return _gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dpos(self, *args)

    def _CSFDB_Getgp_Hypr2dmajorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dmajorRadius(self, *args)

    def _CSFDB_Setgp_Hypr2dmajorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Hypr2d__CSFDB_Setgp_Hypr2dmajorRadius(self, *args)

    def _CSFDB_Getgp_Hypr2dminorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dminorRadius(self, *args)

    def _CSFDB_Setgp_Hypr2dminorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Hypr2d__CSFDB_Setgp_Hypr2dminorRadius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Hypr2d.SetLocation = new_instancemethod(_gp.gp_Hypr2d_SetLocation,None,gp_Hypr2d)
gp_Hypr2d.SetMajorRadius = new_instancemethod(_gp.gp_Hypr2d_SetMajorRadius,None,gp_Hypr2d)
gp_Hypr2d.SetMinorRadius = new_instancemethod(_gp.gp_Hypr2d_SetMinorRadius,None,gp_Hypr2d)
gp_Hypr2d.SetAxis = new_instancemethod(_gp.gp_Hypr2d_SetAxis,None,gp_Hypr2d)
gp_Hypr2d.SetXAxis = new_instancemethod(_gp.gp_Hypr2d_SetXAxis,None,gp_Hypr2d)
gp_Hypr2d.SetYAxis = new_instancemethod(_gp.gp_Hypr2d_SetYAxis,None,gp_Hypr2d)
gp_Hypr2d.Asymptote1 = new_instancemethod(_gp.gp_Hypr2d_Asymptote1,None,gp_Hypr2d)
gp_Hypr2d.Asymptote2 = new_instancemethod(_gp.gp_Hypr2d_Asymptote2,None,gp_Hypr2d)
gp_Hypr2d.Coefficients = new_instancemethod(_gp.gp_Hypr2d_Coefficients,None,gp_Hypr2d)
gp_Hypr2d.ConjugateBranch1 = new_instancemethod(_gp.gp_Hypr2d_ConjugateBranch1,None,gp_Hypr2d)
gp_Hypr2d.ConjugateBranch2 = new_instancemethod(_gp.gp_Hypr2d_ConjugateBranch2,None,gp_Hypr2d)
gp_Hypr2d.Directrix1 = new_instancemethod(_gp.gp_Hypr2d_Directrix1,None,gp_Hypr2d)
gp_Hypr2d.Directrix2 = new_instancemethod(_gp.gp_Hypr2d_Directrix2,None,gp_Hypr2d)
gp_Hypr2d.Eccentricity = new_instancemethod(_gp.gp_Hypr2d_Eccentricity,None,gp_Hypr2d)
gp_Hypr2d.Focal = new_instancemethod(_gp.gp_Hypr2d_Focal,None,gp_Hypr2d)
gp_Hypr2d.Focus1 = new_instancemethod(_gp.gp_Hypr2d_Focus1,None,gp_Hypr2d)
gp_Hypr2d.Focus2 = new_instancemethod(_gp.gp_Hypr2d_Focus2,None,gp_Hypr2d)
gp_Hypr2d.Location = new_instancemethod(_gp.gp_Hypr2d_Location,None,gp_Hypr2d)
gp_Hypr2d.MajorRadius = new_instancemethod(_gp.gp_Hypr2d_MajorRadius,None,gp_Hypr2d)
gp_Hypr2d.MinorRadius = new_instancemethod(_gp.gp_Hypr2d_MinorRadius,None,gp_Hypr2d)
gp_Hypr2d.OtherBranch = new_instancemethod(_gp.gp_Hypr2d_OtherBranch,None,gp_Hypr2d)
gp_Hypr2d.Parameter = new_instancemethod(_gp.gp_Hypr2d_Parameter,None,gp_Hypr2d)
gp_Hypr2d.Axis = new_instancemethod(_gp.gp_Hypr2d_Axis,None,gp_Hypr2d)
gp_Hypr2d.XAxis = new_instancemethod(_gp.gp_Hypr2d_XAxis,None,gp_Hypr2d)
gp_Hypr2d.YAxis = new_instancemethod(_gp.gp_Hypr2d_YAxis,None,gp_Hypr2d)
gp_Hypr2d.Reverse = new_instancemethod(_gp.gp_Hypr2d_Reverse,None,gp_Hypr2d)
gp_Hypr2d.Reversed = new_instancemethod(_gp.gp_Hypr2d_Reversed,None,gp_Hypr2d)
gp_Hypr2d.IsDirect = new_instancemethod(_gp.gp_Hypr2d_IsDirect,None,gp_Hypr2d)
gp_Hypr2d.Mirror = new_instancemethod(_gp.gp_Hypr2d_Mirror,None,gp_Hypr2d)
gp_Hypr2d.Mirrored = new_instancemethod(_gp.gp_Hypr2d_Mirrored,None,gp_Hypr2d)
gp_Hypr2d.Rotate = new_instancemethod(_gp.gp_Hypr2d_Rotate,None,gp_Hypr2d)
gp_Hypr2d.Rotated = new_instancemethod(_gp.gp_Hypr2d_Rotated,None,gp_Hypr2d)
gp_Hypr2d.Scale = new_instancemethod(_gp.gp_Hypr2d_Scale,None,gp_Hypr2d)
gp_Hypr2d.Scaled = new_instancemethod(_gp.gp_Hypr2d_Scaled,None,gp_Hypr2d)
gp_Hypr2d.Transform = new_instancemethod(_gp.gp_Hypr2d_Transform,None,gp_Hypr2d)
gp_Hypr2d.Transformed = new_instancemethod(_gp.gp_Hypr2d_Transformed,None,gp_Hypr2d)
gp_Hypr2d.Translate = new_instancemethod(_gp.gp_Hypr2d_Translate,None,gp_Hypr2d)
gp_Hypr2d.Translated = new_instancemethod(_gp.gp_Hypr2d_Translated,None,gp_Hypr2d)
gp_Hypr2d._CSFDB_Getgp_Hypr2dpos = new_instancemethod(_gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dpos,None,gp_Hypr2d)
gp_Hypr2d._CSFDB_Getgp_Hypr2dmajorRadius = new_instancemethod(_gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dmajorRadius,None,gp_Hypr2d)
gp_Hypr2d._CSFDB_Setgp_Hypr2dmajorRadius = new_instancemethod(_gp.gp_Hypr2d__CSFDB_Setgp_Hypr2dmajorRadius,None,gp_Hypr2d)
gp_Hypr2d._CSFDB_Getgp_Hypr2dminorRadius = new_instancemethod(_gp.gp_Hypr2d__CSFDB_Getgp_Hypr2dminorRadius,None,gp_Hypr2d)
gp_Hypr2d._CSFDB_Setgp_Hypr2dminorRadius = new_instancemethod(_gp.gp_Hypr2d__CSFDB_Setgp_Hypr2dminorRadius,None,gp_Hypr2d)
gp_Hypr2d._kill_pointed = new_instancemethod(_gp.gp_Hypr2d__kill_pointed,None,gp_Hypr2d)
gp_Hypr2d_swigregister = _gp.gp_Hypr2d_swigregister
gp_Hypr2d_swigregister(gp_Hypr2d)

class gp_Lin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a Line corresponding to Z axis of the  reference coordinate system.

        :rtype: None

        * Creates a line defined by axis A1.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Creates a line passing through point P and parallel to vector V (P and V are, respectively, the origin and the unit vector of the positioning axis of the line).

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _gp.gp_Lin_swiginit(self,_gp.new_gp_Lin(*args))
    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Lin_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the direction of the line. Note: - Reverse assigns the result to this line, while - Reversed creates a new one.

        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Reversed(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the direction of the line.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _gp.gp_Lin_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location point (origin) of the line.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Lin_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Complete redefinition of the line. The 'Location' point of <A1> is the origin of the line. The 'Direction' of <A1> is the direction of the line.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Lin_SetPosition(self, *args)

    def Direction(self, *args):
        """
        * Returns the direction of the line.

        :rtype: gp_Dir

        """
        return _gp.gp_Lin_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the location point (origin) of the line.

        :rtype: gp_Pnt

        """
        return _gp.gp_Lin_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the axis placement one axis whith the same location and direction as <self>.

        :rtype: gp_Ax1

        """
        return _gp.gp_Lin_Position(self, *args)

    def Angle(self, *args):
        """
        * Computes the angle between two lines in radians.

        :param Other:
        :type Other: gp_Lin
        :rtype: float

        """
        return _gp.gp_Lin_Angle(self, *args)

    def Contains(self, *args):
        """
        * Returns true if this line contains the point P, that is, if the distance between point P and this line is less than or equal to LinearTolerance..

        :param P:
        :type P: gp_Pnt
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Lin_Contains(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between <self> and the point P.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        * Computes the distance between two lines.

        :param Other:
        :type Other: gp_Lin
        :rtype: float

        """
        return _gp.gp_Lin_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and the point P.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        * Computes the square distance between two lines.

        :param Other:
        :type Other: gp_Lin
        :rtype: float

        """
        return _gp.gp_Lin_SquareDistance(self, *args)

    def Normal(self, *args):
        """
        * Computes the line normal to the direction of <self>, passing through the point P. Raises ConstructionError if the distance between <self> and the point P is lower or equal to Resolution from gp because there is an infinity of solutions in 3D space.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Normal(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Lin_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a line with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Lin

        * Performs the symmetrical transformation of a line with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Lin

        * Performs the symmetrical transformation of a line with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Lin_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a line. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Lin_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a line. S is the scaling value. The 'Location' point (origin) of the line is modified. The 'Direction' is reversed if the scale is negative.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Lin_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a line with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Lin_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a line in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Lin

        * Translates a line from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Lin

        """
        return _gp.gp_Lin_Translated(self, *args)

    def _CSFDB_Getgp_Linpos(self, *args):
        """
        :rtype: gp_Ax1

        """
        return _gp.gp_Lin__CSFDB_Getgp_Linpos(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Lin.Reverse = new_instancemethod(_gp.gp_Lin_Reverse,None,gp_Lin)
gp_Lin.Reversed = new_instancemethod(_gp.gp_Lin_Reversed,None,gp_Lin)
gp_Lin.SetDirection = new_instancemethod(_gp.gp_Lin_SetDirection,None,gp_Lin)
gp_Lin.SetLocation = new_instancemethod(_gp.gp_Lin_SetLocation,None,gp_Lin)
gp_Lin.SetPosition = new_instancemethod(_gp.gp_Lin_SetPosition,None,gp_Lin)
gp_Lin.Direction = new_instancemethod(_gp.gp_Lin_Direction,None,gp_Lin)
gp_Lin.Location = new_instancemethod(_gp.gp_Lin_Location,None,gp_Lin)
gp_Lin.Position = new_instancemethod(_gp.gp_Lin_Position,None,gp_Lin)
gp_Lin.Angle = new_instancemethod(_gp.gp_Lin_Angle,None,gp_Lin)
gp_Lin.Contains = new_instancemethod(_gp.gp_Lin_Contains,None,gp_Lin)
gp_Lin.Distance = new_instancemethod(_gp.gp_Lin_Distance,None,gp_Lin)
gp_Lin.SquareDistance = new_instancemethod(_gp.gp_Lin_SquareDistance,None,gp_Lin)
gp_Lin.Normal = new_instancemethod(_gp.gp_Lin_Normal,None,gp_Lin)
gp_Lin.Mirror = new_instancemethod(_gp.gp_Lin_Mirror,None,gp_Lin)
gp_Lin.Mirrored = new_instancemethod(_gp.gp_Lin_Mirrored,None,gp_Lin)
gp_Lin.Rotate = new_instancemethod(_gp.gp_Lin_Rotate,None,gp_Lin)
gp_Lin.Rotated = new_instancemethod(_gp.gp_Lin_Rotated,None,gp_Lin)
gp_Lin.Scale = new_instancemethod(_gp.gp_Lin_Scale,None,gp_Lin)
gp_Lin.Scaled = new_instancemethod(_gp.gp_Lin_Scaled,None,gp_Lin)
gp_Lin.Transform = new_instancemethod(_gp.gp_Lin_Transform,None,gp_Lin)
gp_Lin.Transformed = new_instancemethod(_gp.gp_Lin_Transformed,None,gp_Lin)
gp_Lin.Translate = new_instancemethod(_gp.gp_Lin_Translate,None,gp_Lin)
gp_Lin.Translated = new_instancemethod(_gp.gp_Lin_Translated,None,gp_Lin)
gp_Lin._CSFDB_Getgp_Linpos = new_instancemethod(_gp.gp_Lin__CSFDB_Getgp_Linpos,None,gp_Lin)
gp_Lin._kill_pointed = new_instancemethod(_gp.gp_Lin__kill_pointed,None,gp_Lin)
gp_Lin_swigregister = _gp.gp_Lin_swigregister
gp_Lin_swigregister(gp_Lin)

class gp_Lin2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a Line corresponding to X axis of the  reference coordinate system.

        :rtype: None

        * Creates a line located with A.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        * <P> is the location point (origin) of the line and <V> is the direction of the line.

        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Dir2d
        :rtype: None

        * Creates the line from the equation A*X + B*Y + C = 0.0 Raises ConstructionError if Sqrt(A*A + B*B) <= Resolution from gp. Raised if Sqrt(A*A + B*B) <= Resolution from gp.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :rtype: None

        """
        _gp.gp_Lin2d_swiginit(self,_gp.new_gp_Lin2d(*args))
    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Lin2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the positioning axis of this line. Note: - Reverse assigns the result to this line, while - Reversed creates a new one.

        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Reversed(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the direction of the line.

        :param V:
        :type V: gp_Dir2d
        :rtype: None

        """
        return _gp.gp_Lin2d_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the origin of the line.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Lin2d_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Complete redefinition of the line. The 'Location' point of <A> is the origin of the line. The 'Direction' of <A> is the direction of the line.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Lin2d_SetPosition(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the normalized coefficients of the line : A * X + B * Y + C = 0.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :rtype: None

        """
        return _gp.gp_Lin2d_Coefficients(self, *args)

    def Direction(self, *args):
        """
        * Returns the direction of the line.

        :rtype: gp_Dir2d

        """
        return _gp.gp_Lin2d_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the location point (origin) of the line.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Lin2d_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the axis placement one axis whith the same location and direction as <self>.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Lin2d_Position(self, *args)

    def Angle(self, *args):
        """
        * Computes the angle between two lines in radians.

        :param Other:
        :type Other: gp_Lin2d
        :rtype: float

        """
        return _gp.gp_Lin2d_Angle(self, *args)

    def Contains(self, *args):
        """
        * Returns true if this line contains the point P, that is, if the distance between point P and this line is less than or equal to LinearTolerance.

        :param P:
        :type P: gp_Pnt2d
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Lin2d_Contains(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between <self> and the point <P>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: float

        * Computes the distance between two lines.

        :param Other:
        :type Other: gp_Lin2d
        :rtype: float

        """
        return _gp.gp_Lin2d_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and the point <P>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: float

        * Computes the square distance between two lines.

        :param Other:
        :type Other: gp_Lin2d
        :rtype: float

        """
        return _gp.gp_Lin2d_SquareDistance(self, *args)

    def Normal(self, *args):
        """
        * Computes the line normal to the direction of <self>, passing through the point <P>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Normal(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Lin2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a line with respect to the point <P> which is the center of the symmetry

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Lin2d

        * Performs the symmetrical transformation of a line with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Lin2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a line. P is the center of the rotation. Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Lin2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a line. S is the scaling value. Only the origin of the line is modified.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Lin2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a line with the transformation T from class Trsf2d.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Lin2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a line in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Lin2d

        * Translates a line from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Lin2d

        """
        return _gp.gp_Lin2d_Translated(self, *args)

    def _CSFDB_Getgp_Lin2dpos(self, *args):
        """
        :rtype: gp_Ax2d

        """
        return _gp.gp_Lin2d__CSFDB_Getgp_Lin2dpos(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Lin2d.Reverse = new_instancemethod(_gp.gp_Lin2d_Reverse,None,gp_Lin2d)
gp_Lin2d.Reversed = new_instancemethod(_gp.gp_Lin2d_Reversed,None,gp_Lin2d)
gp_Lin2d.SetDirection = new_instancemethod(_gp.gp_Lin2d_SetDirection,None,gp_Lin2d)
gp_Lin2d.SetLocation = new_instancemethod(_gp.gp_Lin2d_SetLocation,None,gp_Lin2d)
gp_Lin2d.SetPosition = new_instancemethod(_gp.gp_Lin2d_SetPosition,None,gp_Lin2d)
gp_Lin2d.Coefficients = new_instancemethod(_gp.gp_Lin2d_Coefficients,None,gp_Lin2d)
gp_Lin2d.Direction = new_instancemethod(_gp.gp_Lin2d_Direction,None,gp_Lin2d)
gp_Lin2d.Location = new_instancemethod(_gp.gp_Lin2d_Location,None,gp_Lin2d)
gp_Lin2d.Position = new_instancemethod(_gp.gp_Lin2d_Position,None,gp_Lin2d)
gp_Lin2d.Angle = new_instancemethod(_gp.gp_Lin2d_Angle,None,gp_Lin2d)
gp_Lin2d.Contains = new_instancemethod(_gp.gp_Lin2d_Contains,None,gp_Lin2d)
gp_Lin2d.Distance = new_instancemethod(_gp.gp_Lin2d_Distance,None,gp_Lin2d)
gp_Lin2d.SquareDistance = new_instancemethod(_gp.gp_Lin2d_SquareDistance,None,gp_Lin2d)
gp_Lin2d.Normal = new_instancemethod(_gp.gp_Lin2d_Normal,None,gp_Lin2d)
gp_Lin2d.Mirror = new_instancemethod(_gp.gp_Lin2d_Mirror,None,gp_Lin2d)
gp_Lin2d.Mirrored = new_instancemethod(_gp.gp_Lin2d_Mirrored,None,gp_Lin2d)
gp_Lin2d.Rotate = new_instancemethod(_gp.gp_Lin2d_Rotate,None,gp_Lin2d)
gp_Lin2d.Rotated = new_instancemethod(_gp.gp_Lin2d_Rotated,None,gp_Lin2d)
gp_Lin2d.Scale = new_instancemethod(_gp.gp_Lin2d_Scale,None,gp_Lin2d)
gp_Lin2d.Scaled = new_instancemethod(_gp.gp_Lin2d_Scaled,None,gp_Lin2d)
gp_Lin2d.Transform = new_instancemethod(_gp.gp_Lin2d_Transform,None,gp_Lin2d)
gp_Lin2d.Transformed = new_instancemethod(_gp.gp_Lin2d_Transformed,None,gp_Lin2d)
gp_Lin2d.Translate = new_instancemethod(_gp.gp_Lin2d_Translate,None,gp_Lin2d)
gp_Lin2d.Translated = new_instancemethod(_gp.gp_Lin2d_Translated,None,gp_Lin2d)
gp_Lin2d._CSFDB_Getgp_Lin2dpos = new_instancemethod(_gp.gp_Lin2d__CSFDB_Getgp_Lin2dpos,None,gp_Lin2d)
gp_Lin2d._kill_pointed = new_instancemethod(_gp.gp_Lin2d__kill_pointed,None,gp_Lin2d)
gp_Lin2d_swigregister = _gp.gp_Lin2d_swigregister
gp_Lin2d_swigregister(gp_Lin2d)

class gp_Mat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * creates a matrix with null coefficients.

        :rtype: None

        :param a11:
        :type a11: float
        :param a12:
        :type a12: float
        :param a13:
        :type a13: float
        :param a21:
        :type a21: float
        :param a22:
        :type a22: float
        :param a23:
        :type a23: float
        :param a31:
        :type a31: float
        :param a32:
        :type a32: float
        :param a33:
        :type a33: float
        :rtype: None

        * Creates a matrix. Col1, Col2, Col3 are the 3 columns of the matrix.

        :param Col1:
        :type Col1: gp_XYZ
        :param Col2:
        :type Col2: gp_XYZ
        :param Col3:
        :type Col3: gp_XYZ
        :rtype: None

        """
        _gp.gp_Mat_swiginit(self,_gp.new_gp_Mat(*args))
    def SetCol(self, *args):
        """
        * Assigns the three coordinates of Value to the column of index Col of this matrix. Raises OutOfRange if Col < 1 or Col > 3.

        :param Col:
        :type Col: int
        :param Value:
        :type Value: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetCol(self, *args)

    def SetCols(self, *args):
        """
        * Assigns the number triples Col1, Col2, Col3 to the three columns of this matrix.

        :param Col1:
        :type Col1: gp_XYZ
        :param Col2:
        :type Col2: gp_XYZ
        :param Col3:
        :type Col3: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetCols(self, *args)

    def SetCross(self, *args):
        """
        * Modifies the matrix M so that applying it to any number triple (X, Y, Z) produces the same result as the cross product of Ref and the number triple (X, Y, Z): i.e.: M * {X,Y,Z}t = Ref.Cross({X, Y ,Z}) this matrix is anti symmetric. To apply this matrix to the triplet {XYZ} is the same as to do the cross product between the triplet Ref and the triplet {XYZ}. Note: this matrix is anti-symmetric.

        :param Ref:
        :type Ref: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetCross(self, *args)

    def SetDiagonal(self, *args):
        """
        * Modifies the main diagonal of the matrix. <self>.Value (1, 1) = X1 <self>.Value (2, 2) = X2 <self>.Value (3, 3) = X3 The other coefficients of the matrix are not modified.

        :param X1:
        :type X1: float
        :param X2:
        :type X2: float
        :param X3:
        :type X3: float
        :rtype: None

        """
        return _gp.gp_Mat_SetDiagonal(self, *args)

    def SetDot(self, *args):
        """
        * Modifies this matrix so that applying it to any number triple (X, Y, Z) produces the same result as the scalar product of Ref and the number triple (X, Y, Z): this * (X,Y,Z) = Ref.(X,Y,Z) Note: this matrix is symmetric.

        :param Ref:
        :type Ref: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetDot(self, *args)

    def SetIdentity(self, *args):
        """
        * Modifies this matrix so that it represents the Identity matrix.

        :rtype: None

        """
        return _gp.gp_Mat_SetIdentity(self, *args)

    def SetRotation(self, *args):
        """
        * Modifies this matrix so that it represents a rotation. Ang is the angular value in radians and the XYZ axis gives the direction of the rotation. Raises ConstructionError if XYZ.Modulus() <= Resolution()

        :param Axis:
        :type Axis: gp_XYZ
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Mat_SetRotation(self, *args)

    def SetRow(self, *args):
        """
        * Assigns the three coordinates of Value to the row of index Row of this matrix. Raises OutOfRange if Row < 1 or Row > 3.

        :param Row:
        :type Row: int
        :param Value:
        :type Value: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetRow(self, *args)

    def SetRows(self, *args):
        """
        * Assigns the number triples Row1, Row2, Row3 to the three rows of this matrix.

        :param Row1:
        :type Row1: gp_XYZ
        :param Row2:
        :type Row2: gp_XYZ
        :param Row3:
        :type Row3: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Mat_SetRows(self, *args)

    def SetScale(self, *args):
        """
        * Modifies the the matrix so that it represents a scaling transformation, where S is the scale factor. : | S 0.0 0.0 | <self> = | 0.0 S 0.0 | | 0.0 0.0 S |

        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Mat_SetScale(self, *args)

    def SetValue(self, *args):
        """
        * Assigns <Value> to the coefficient of row Row, column Col of this matrix. Raises OutOfRange if Row < 1 or Row > 3 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _gp.gp_Mat_SetValue(self, *args)

    def Column(self, *args):
        """
        * Returns the column of Col index. Raises OutOfRange if Col < 1 or Col > 3

        :param Col:
        :type Col: int
        :rtype: gp_XYZ

        """
        return _gp.gp_Mat_Column(self, *args)

    def Determinant(self, *args):
        """
        * Computes the determinant of the matrix.

        :rtype: float

        """
        return _gp.gp_Mat_Determinant(self, *args)

    def Diagonal(self, *args):
        """
        * Returns the main diagonal of the matrix.

        :rtype: gp_XYZ

        """
        return _gp.gp_Mat_Diagonal(self, *args)

    def Row(self, *args):
        """
        * returns the row of Row index. Raises OutOfRange if Row < 1 or Row > 3

        :param Row:
        :type Row: int
        :rtype: gp_XYZ

        """
        return _gp.gp_Mat_Row(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficient of range (Row, Col) Raises OutOfRange if Row < 1 or Row > 3 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Mat_Value(self, *args)

    def ChangeValue(self, *args):
        """
        * Returns the coefficient of range (Row, Col) Raises OutOfRange if Row < 1 or Row > 3 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Mat_ChangeValue(self, *args)

    def IsSingular(self, *args):
        """
        * The Gauss LU decomposition is used to invert the matrix (see Math package) so the matrix is considered as singular if the largest pivot found is lower or equal to Resolution from gp.

        :rtype: bool

        """
        return _gp.gp_Mat_IsSingular(self, *args)

    def Add(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        """
        return _gp.gp_Mat_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        """
        return _gp.gp_Mat___iadd__(self, *args)

    def Added(self, *args):
        """
        * Computes the sum of this matrix and the matrix Other for each coefficient of the matrix : <self>.Coef(i,j) + <Other>.Coef(i,j)

        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        """
        return _gp.gp_Mat___add__(self, *args)

    def Divide(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat___idiv__(self, *args)

    def Divided(self, *args):
        """
        * Divides all the coefficients of the matrix by Scalar

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat

        """
        return _gp.gp_Mat___div__(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Mat_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Inverses the matrix and raises if the matrix is singular. - Invert assigns the result to this matrix, while - Inverted creates a new one. Warning The Gauss LU decomposition is used to invert the matrix. Consequently, the matrix is considered as singular if the largest pivot found is less than or equal to gp::Resolution(). Exceptions Standard_ConstructionError if this matrix is singular, and therefore cannot be inverted.

        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Inverted(self, *args)

    def PreMultiply(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        """
        return _gp.gp_Mat_PreMultiply(self, *args)

    def Multiplied(self, *args):
        """
        * Computes the product of two matrices <self> * <Other>

        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat

        """
        return _gp.gp_Mat___mul__(self, *args)

    def Multiply(self, *args):
        """
        * Computes the product of two matrices <self> = <Other> * <self>.

        :param Other:
        :type Other: gp_Mat
        :rtype: None

        * Multiplies all the coefficients of the matrix by Scalar

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat___imul__(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_Mat_Power(self, *args)

    def Powered(self, *args):
        """
        * Computes <self> = <self> * <self> * .......* <self>, N time. if N = 0 <self> = Identity if N < 0 <self> = <self>.Invert() *...........* <self>.Invert(). If N < 0 an exception will be raised if the matrix is not inversible

        :param N:
        :type N: int
        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Powered(self, *args)

    def Subtract(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        """
        return _gp.gp_Mat_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: None

        """
        return _gp.gp_Mat___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * cOmputes for each coefficient of the matrix : <self>.Coef(i,j) - <Other>.Coef(i,j)

        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat
        :rtype: gp_Mat

        """
        return _gp.gp_Mat___sub__(self, *args)

    def Transpose(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Mat_Transpose(self, *args)

    def Transposed(self, *args):
        """
        * Transposes the matrix. A(j, i) -> A (i, j)

        :rtype: gp_Mat

        """
        return _gp.gp_Mat_Transposed(self, *args)

    def _CSFDB_Getgp_Matmatrix(self, *args):
        """
        :param i1:
        :type i1: int
        :param i2:
        :type i2: int
        :rtype: float

        """
        return _gp.gp_Mat__CSFDB_Getgp_Matmatrix(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Mat.SetCol = new_instancemethod(_gp.gp_Mat_SetCol,None,gp_Mat)
gp_Mat.SetCols = new_instancemethod(_gp.gp_Mat_SetCols,None,gp_Mat)
gp_Mat.SetCross = new_instancemethod(_gp.gp_Mat_SetCross,None,gp_Mat)
gp_Mat.SetDiagonal = new_instancemethod(_gp.gp_Mat_SetDiagonal,None,gp_Mat)
gp_Mat.SetDot = new_instancemethod(_gp.gp_Mat_SetDot,None,gp_Mat)
gp_Mat.SetIdentity = new_instancemethod(_gp.gp_Mat_SetIdentity,None,gp_Mat)
gp_Mat.SetRotation = new_instancemethod(_gp.gp_Mat_SetRotation,None,gp_Mat)
gp_Mat.SetRow = new_instancemethod(_gp.gp_Mat_SetRow,None,gp_Mat)
gp_Mat.SetRows = new_instancemethod(_gp.gp_Mat_SetRows,None,gp_Mat)
gp_Mat.SetScale = new_instancemethod(_gp.gp_Mat_SetScale,None,gp_Mat)
gp_Mat.SetValue = new_instancemethod(_gp.gp_Mat_SetValue,None,gp_Mat)
gp_Mat.Column = new_instancemethod(_gp.gp_Mat_Column,None,gp_Mat)
gp_Mat.Determinant = new_instancemethod(_gp.gp_Mat_Determinant,None,gp_Mat)
gp_Mat.Diagonal = new_instancemethod(_gp.gp_Mat_Diagonal,None,gp_Mat)
gp_Mat.Row = new_instancemethod(_gp.gp_Mat_Row,None,gp_Mat)
gp_Mat.Value = new_instancemethod(_gp.gp_Mat_Value,None,gp_Mat)
gp_Mat.ChangeValue = new_instancemethod(_gp.gp_Mat_ChangeValue,None,gp_Mat)
gp_Mat.IsSingular = new_instancemethod(_gp.gp_Mat_IsSingular,None,gp_Mat)
gp_Mat.Add = new_instancemethod(_gp.gp_Mat_Add,None,gp_Mat)
gp_Mat.__iadd__ = new_instancemethod(_gp.gp_Mat___iadd__,None,gp_Mat)
gp_Mat.Added = new_instancemethod(_gp.gp_Mat_Added,None,gp_Mat)
gp_Mat.__add__ = new_instancemethod(_gp.gp_Mat___add__,None,gp_Mat)
gp_Mat.Divide = new_instancemethod(_gp.gp_Mat_Divide,None,gp_Mat)
gp_Mat.__idiv__ = new_instancemethod(_gp.gp_Mat___idiv__,None,gp_Mat)
gp_Mat.Divided = new_instancemethod(_gp.gp_Mat_Divided,None,gp_Mat)
gp_Mat.__div__ = new_instancemethod(_gp.gp_Mat___div__,None,gp_Mat)
gp_Mat.Invert = new_instancemethod(_gp.gp_Mat_Invert,None,gp_Mat)
gp_Mat.Inverted = new_instancemethod(_gp.gp_Mat_Inverted,None,gp_Mat)
gp_Mat.PreMultiply = new_instancemethod(_gp.gp_Mat_PreMultiply,None,gp_Mat)
gp_Mat.Multiplied = new_instancemethod(_gp.gp_Mat_Multiplied,None,gp_Mat)
gp_Mat.__mul__ = new_instancemethod(_gp.gp_Mat___mul__,None,gp_Mat)
gp_Mat.Multiply = new_instancemethod(_gp.gp_Mat_Multiply,None,gp_Mat)
gp_Mat.__imul__ = new_instancemethod(_gp.gp_Mat___imul__,None,gp_Mat)
gp_Mat.Power = new_instancemethod(_gp.gp_Mat_Power,None,gp_Mat)
gp_Mat.Powered = new_instancemethod(_gp.gp_Mat_Powered,None,gp_Mat)
gp_Mat.Subtract = new_instancemethod(_gp.gp_Mat_Subtract,None,gp_Mat)
gp_Mat.__isub__ = new_instancemethod(_gp.gp_Mat___isub__,None,gp_Mat)
gp_Mat.Subtracted = new_instancemethod(_gp.gp_Mat_Subtracted,None,gp_Mat)
gp_Mat.__sub__ = new_instancemethod(_gp.gp_Mat___sub__,None,gp_Mat)
gp_Mat.Transpose = new_instancemethod(_gp.gp_Mat_Transpose,None,gp_Mat)
gp_Mat.Transposed = new_instancemethod(_gp.gp_Mat_Transposed,None,gp_Mat)
gp_Mat._CSFDB_Getgp_Matmatrix = new_instancemethod(_gp.gp_Mat__CSFDB_Getgp_Matmatrix,None,gp_Mat)
gp_Mat._kill_pointed = new_instancemethod(_gp.gp_Mat__kill_pointed,None,gp_Mat)
gp_Mat_swigregister = _gp.gp_Mat_swigregister
gp_Mat_swigregister(gp_Mat)

class gp_Mat2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a matrix with null coefficients.

        :rtype: None

        * Col1, Col2 are the 2 columns of the matrix.

        :param Col1:
        :type Col1: gp_XY
        :param Col2:
        :type Col2: gp_XY
        :rtype: None

        """
        _gp.gp_Mat2d_swiginit(self,_gp.new_gp_Mat2d(*args))
    def SetCol(self, *args):
        """
        * Assigns the two coordinates of Value to the column of range Col of this matrix Raises OutOfRange if Col < 1 or Col > 2.

        :param Col:
        :type Col: int
        :param Value:
        :type Value: gp_XY
        :rtype: None

        """
        return _gp.gp_Mat2d_SetCol(self, *args)

    def SetCols(self, *args):
        """
        * Assigns the number pairs Col1, Col2 to the two columns of this matrix

        :param Col1:
        :type Col1: gp_XY
        :param Col2:
        :type Col2: gp_XY
        :rtype: None

        """
        return _gp.gp_Mat2d_SetCols(self, *args)

    def SetDiagonal(self, *args):
        """
        * Modifies the main diagonal of the matrix. <self>.Value (1, 1) = X1 <self>.Value (2, 2) = X2 The other coefficients of the matrix are not modified.

        :param X1:
        :type X1: float
        :param X2:
        :type X2: float
        :rtype: None

        """
        return _gp.gp_Mat2d_SetDiagonal(self, *args)

    def SetIdentity(self, *args):
        """
        * Modifies this matrix, so that it represents the Identity matrix.

        :rtype: None

        """
        return _gp.gp_Mat2d_SetIdentity(self, *args)

    def SetRotation(self, *args):
        """
        * Modifies this matrix, so that it representso a rotation. Ang is the angular value in radian of the rotation.

        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Mat2d_SetRotation(self, *args)

    def SetRow(self, *args):
        """
        * Assigns the two coordinates of Value to the row of index Row of this matrix. Raises OutOfRange if Row < 1 or Row > 2.

        :param Row:
        :type Row: int
        :param Value:
        :type Value: gp_XY
        :rtype: None

        """
        return _gp.gp_Mat2d_SetRow(self, *args)

    def SetRows(self, *args):
        """
        * Assigns the number pairs Row1, Row2 to the two rows of this matrix.

        :param Row1:
        :type Row1: gp_XY
        :param Row2:
        :type Row2: gp_XY
        :rtype: None

        """
        return _gp.gp_Mat2d_SetRows(self, *args)

    def SetScale(self, *args):
        """
        * Modifies the matrix such that it represents a scaling transformation, where S is the scale factor : | S 0.0 | <self> = | 0.0 S |

        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Mat2d_SetScale(self, *args)

    def SetValue(self, *args):
        """
        * Assigns <Value> to the coefficient of row Row, column Col of this matrix. Raises OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 2

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _gp.gp_Mat2d_SetValue(self, *args)

    def Column(self, *args):
        """
        * Returns the column of Col index. Raises OutOfRange if Col < 1 or Col > 2

        :param Col:
        :type Col: int
        :rtype: gp_XY

        """
        return _gp.gp_Mat2d_Column(self, *args)

    def Determinant(self, *args):
        """
        * Computes the determinant of the matrix.

        :rtype: float

        """
        return _gp.gp_Mat2d_Determinant(self, *args)

    def Diagonal(self, *args):
        """
        * Returns the main diagonal of the matrix.

        :rtype: gp_XY

        """
        return _gp.gp_Mat2d_Diagonal(self, *args)

    def Row(self, *args):
        """
        * Returns the row of index Row. Raised if Row < 1 or Row > 2

        :param Row:
        :type Row: int
        :rtype: gp_XY

        """
        return _gp.gp_Mat2d_Row(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficient of range (Row, Col) Raises OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 2

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Mat2d_Value(self, *args)

    def ChangeValue(self, *args):
        """
        * Returns the coefficient of range (Row, Col) Raises OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 2

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Mat2d_ChangeValue(self, *args)

    def IsSingular(self, *args):
        """
        * Returns true if this matrix is singular (and therefore, cannot be inverted). The Gauss LU decomposition is used to invert the matrix so the matrix is considered as singular if the largest pivot found is lower or equal to Resolution from gp.

        :rtype: bool

        """
        return _gp.gp_Mat2d_IsSingular(self, *args)

    def Add(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_Mat2d_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_Mat2d___iadd__(self, *args)

    def Added(self, *args):
        """
        * Computes the sum of this matrix and the matrix Other.for each coefficient of the matrix : <self>.Coef(i,j) + <Other>.Coef(i,j) Note: - operator += assigns the result to this matrix, while - operator + creates a new one.

        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d___add__(self, *args)

    def Divide(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat2d_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat2d___idiv__(self, *args)

    def Divided(self, *args):
        """
        * Divides all the coefficients of the matrix by a scalar.

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d___div__(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Mat2d_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Inverses the matrix and raises exception if the matrix is singular.

        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Inverted(self, *args)

    def PreMultiply(self, *args):
        """
        * Modifies this matrix by premultiplying it by the matrix Other <self> = Other * <self>.

        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_Mat2d_PreMultiply(self, *args)

    def Multiplied(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d___mul__(self, *args)

    def Multiply(self, *args):
        """
        * Computes the product of two matrices <self> * <Other>

        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        * Multiplies all the coefficients of the matrix by a scalar.

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat2d_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Mat2d___imul__(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_Mat2d_Power(self, *args)

    def Powered(self, *args):
        """
        * computes <self> = <self> * <self> * .......* <self>, N time. if N = 0 <self> = Identity if N < 0 <self> = <self>.Invert() *...........* <self>.Invert(). If N < 0 an exception can be raised if the matrix is not inversible

        :param N:
        :type N: int
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Powered(self, *args)

    def Subtract(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_Mat2d_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_Mat2d___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * Computes for each coefficient of the matrix : <self>.Coef(i,j) - <Other>.Coef(i,j)

        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Other:
        :type Other: gp_Mat2d
        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d___sub__(self, *args)

    def Transpose(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Mat2d_Transpose(self, *args)

    def Transposed(self, *args):
        """
        * Transposes the matrix. A(j, i) -> A (i, j)

        :rtype: gp_Mat2d

        """
        return _gp.gp_Mat2d_Transposed(self, *args)

    def _CSFDB_Getgp_Mat2dmatrix(self, *args):
        """
        :param i1:
        :type i1: int
        :param i2:
        :type i2: int
        :rtype: float

        """
        return _gp.gp_Mat2d__CSFDB_Getgp_Mat2dmatrix(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Mat2d.SetCol = new_instancemethod(_gp.gp_Mat2d_SetCol,None,gp_Mat2d)
gp_Mat2d.SetCols = new_instancemethod(_gp.gp_Mat2d_SetCols,None,gp_Mat2d)
gp_Mat2d.SetDiagonal = new_instancemethod(_gp.gp_Mat2d_SetDiagonal,None,gp_Mat2d)
gp_Mat2d.SetIdentity = new_instancemethod(_gp.gp_Mat2d_SetIdentity,None,gp_Mat2d)
gp_Mat2d.SetRotation = new_instancemethod(_gp.gp_Mat2d_SetRotation,None,gp_Mat2d)
gp_Mat2d.SetRow = new_instancemethod(_gp.gp_Mat2d_SetRow,None,gp_Mat2d)
gp_Mat2d.SetRows = new_instancemethod(_gp.gp_Mat2d_SetRows,None,gp_Mat2d)
gp_Mat2d.SetScale = new_instancemethod(_gp.gp_Mat2d_SetScale,None,gp_Mat2d)
gp_Mat2d.SetValue = new_instancemethod(_gp.gp_Mat2d_SetValue,None,gp_Mat2d)
gp_Mat2d.Column = new_instancemethod(_gp.gp_Mat2d_Column,None,gp_Mat2d)
gp_Mat2d.Determinant = new_instancemethod(_gp.gp_Mat2d_Determinant,None,gp_Mat2d)
gp_Mat2d.Diagonal = new_instancemethod(_gp.gp_Mat2d_Diagonal,None,gp_Mat2d)
gp_Mat2d.Row = new_instancemethod(_gp.gp_Mat2d_Row,None,gp_Mat2d)
gp_Mat2d.Value = new_instancemethod(_gp.gp_Mat2d_Value,None,gp_Mat2d)
gp_Mat2d.ChangeValue = new_instancemethod(_gp.gp_Mat2d_ChangeValue,None,gp_Mat2d)
gp_Mat2d.IsSingular = new_instancemethod(_gp.gp_Mat2d_IsSingular,None,gp_Mat2d)
gp_Mat2d.Add = new_instancemethod(_gp.gp_Mat2d_Add,None,gp_Mat2d)
gp_Mat2d.__iadd__ = new_instancemethod(_gp.gp_Mat2d___iadd__,None,gp_Mat2d)
gp_Mat2d.Added = new_instancemethod(_gp.gp_Mat2d_Added,None,gp_Mat2d)
gp_Mat2d.__add__ = new_instancemethod(_gp.gp_Mat2d___add__,None,gp_Mat2d)
gp_Mat2d.Divide = new_instancemethod(_gp.gp_Mat2d_Divide,None,gp_Mat2d)
gp_Mat2d.__idiv__ = new_instancemethod(_gp.gp_Mat2d___idiv__,None,gp_Mat2d)
gp_Mat2d.Divided = new_instancemethod(_gp.gp_Mat2d_Divided,None,gp_Mat2d)
gp_Mat2d.__div__ = new_instancemethod(_gp.gp_Mat2d___div__,None,gp_Mat2d)
gp_Mat2d.Invert = new_instancemethod(_gp.gp_Mat2d_Invert,None,gp_Mat2d)
gp_Mat2d.Inverted = new_instancemethod(_gp.gp_Mat2d_Inverted,None,gp_Mat2d)
gp_Mat2d.PreMultiply = new_instancemethod(_gp.gp_Mat2d_PreMultiply,None,gp_Mat2d)
gp_Mat2d.Multiplied = new_instancemethod(_gp.gp_Mat2d_Multiplied,None,gp_Mat2d)
gp_Mat2d.__mul__ = new_instancemethod(_gp.gp_Mat2d___mul__,None,gp_Mat2d)
gp_Mat2d.Multiply = new_instancemethod(_gp.gp_Mat2d_Multiply,None,gp_Mat2d)
gp_Mat2d.__imul__ = new_instancemethod(_gp.gp_Mat2d___imul__,None,gp_Mat2d)
gp_Mat2d.Power = new_instancemethod(_gp.gp_Mat2d_Power,None,gp_Mat2d)
gp_Mat2d.Powered = new_instancemethod(_gp.gp_Mat2d_Powered,None,gp_Mat2d)
gp_Mat2d.Subtract = new_instancemethod(_gp.gp_Mat2d_Subtract,None,gp_Mat2d)
gp_Mat2d.__isub__ = new_instancemethod(_gp.gp_Mat2d___isub__,None,gp_Mat2d)
gp_Mat2d.Subtracted = new_instancemethod(_gp.gp_Mat2d_Subtracted,None,gp_Mat2d)
gp_Mat2d.__sub__ = new_instancemethod(_gp.gp_Mat2d___sub__,None,gp_Mat2d)
gp_Mat2d.Transpose = new_instancemethod(_gp.gp_Mat2d_Transpose,None,gp_Mat2d)
gp_Mat2d.Transposed = new_instancemethod(_gp.gp_Mat2d_Transposed,None,gp_Mat2d)
gp_Mat2d._CSFDB_Getgp_Mat2dmatrix = new_instancemethod(_gp.gp_Mat2d__CSFDB_Getgp_Mat2dmatrix,None,gp_Mat2d)
gp_Mat2d._kill_pointed = new_instancemethod(_gp.gp_Mat2d__kill_pointed,None,gp_Mat2d)
gp_Mat2d_swigregister = _gp.gp_Mat2d_swigregister
gp_Mat2d_swigregister(gp_Mat2d)

class gp_Parab(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite Parabola.

        :rtype: None

        * Creates a parabola with its local coordinate system 'A2' and it's focal length 'Focal'. The XDirection of A2 defines the axis of symmetry of the parabola. The YDirection of A2 is parallel to the directrix of the parabola. The Location point of A2 is the vertex of the parabola Raises ConstructionError if Focal < 0.0 Raised if Focal < 0.0

        :param A2:
        :type A2: gp_Ax2
        :param Focal:
        :type Focal: float
        :rtype: None

        * D is the directrix of the parabola and F the focus point. The symmetry axis (XAxis) of the parabola is normal to the directrix and pass through the focus point F, but its location point is the vertex of the parabola. The YAxis of the parabola is parallel to D and its location point is the vertex of the parabola. The normal to the plane of the parabola is the cross product between the XAxis and the YAxis.

        :param D:
        :type D: gp_Ax1
        :param F:
        :type F: gp_Pnt
        :rtype: None

        """
        _gp.gp_Parab_swiginit(self,_gp.new_gp_Parab(*args))
    def SetAxis(self, *args):
        """
        * Modifies this parabola by redefining its local coordinate system so that - its origin and 'main Direction' become those of the axis A1 (the 'X Direction' and 'Y Direction' are then recomputed in the same way as for any gp_Ax2) Raises ConstructionError if the direction of A1 is parallel to the previous XAxis of the parabola.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Parab_SetAxis(self, *args)

    def SetFocal(self, *args):
        """
        * Changes the focal distance of the parabola. Raises ConstructionError if Focal < 0.0

        :param Focal:
        :type Focal: float
        :rtype: None

        """
        return _gp.gp_Parab_SetFocal(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location of the parabola. It is the vertex of the parabola.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Parab_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinate system of the parabola.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Parab_SetPosition(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of the parabola. It is the axis normal to the plane of the parabola passing through the vertex of the parabola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Parab_Axis(self, *args)

    def Directrix(self, *args):
        """
        * Computes the directrix of this parabola. The directrix is: - a line parallel to the 'Y Direction' of the local coordinate system of this parabola, and - located on the negative side of the axis of symmetry, at a distance from the apex which is equal to the focal length of this parabola. The directrix is returned as an axis (a gp_Ax1 object), the origin of which is situated on the 'X Axis' of this parabola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Parab_Directrix(self, *args)

    def Focal(self, *args):
        """
        * Returns the distance between the vertex and the focus of the parabola.

        :rtype: float

        """
        return _gp.gp_Parab_Focal(self, *args)

    def Focus(self, *args):
        """
        * - Computes the focus of the parabola.

        :rtype: gp_Pnt

        """
        return _gp.gp_Parab_Focus(self, *args)

    def Location(self, *args):
        """
        * Returns the vertex of the parabola. It is the 'Location' point of the coordinate system of the parabola.

        :rtype: gp_Pnt

        """
        return _gp.gp_Parab_Location(self, *args)

    def Parameter(self, *args):
        """
        * Computes the parameter of the parabola. It is the distance between the focus and the directrix of the parabola. This distance is twice the focal length.

        :rtype: float

        """
        return _gp.gp_Parab_Parameter(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinate system of the parabola.

        :rtype: gp_Ax2

        """
        return _gp.gp_Parab_Position(self, *args)

    def XAxis(self, *args):
        """
        * Returns the symmetry axis of the parabola. The location point of the axis is the vertex of the parabola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Parab_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * It is an axis parallel to the directrix of the parabola. The location point of this axis is the vertex of the parabola.

        :rtype: gp_Ax1

        """
        return _gp.gp_Parab_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Parab_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a parabola with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Parab

        * Performs the symmetrical transformation of a parabola with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Parab

        * Performs the symmetrical transformation of a parabola with respect to a plane. The axis placement A2 locates the plane of the symmetry (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Parab

        """
        return _gp.gp_Parab_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Parab_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a parabola. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Parab

        """
        return _gp.gp_Parab_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Parab_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a parabola. S is the scaling value. If S is negative the direction of the symmetry axis XAxis is reversed and the direction of the YAxis too.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Parab

        """
        return _gp.gp_Parab_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Parab_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a parabola with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Parab

        """
        return _gp.gp_Parab_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Parab_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a parabola in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Parab

        * Translates a parabola from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Parab

        """
        return _gp.gp_Parab_Translated(self, *args)

    def _CSFDB_Getgp_Parabpos(self, *args):
        """
        :rtype: gp_Ax2

        """
        return _gp.gp_Parab__CSFDB_Getgp_Parabpos(self, *args)

    def _CSFDB_Getgp_ParabfocalLength(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Parab__CSFDB_Getgp_ParabfocalLength(self, *args)

    def _CSFDB_Setgp_ParabfocalLength(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Parab__CSFDB_Setgp_ParabfocalLength(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Parab.SetAxis = new_instancemethod(_gp.gp_Parab_SetAxis,None,gp_Parab)
gp_Parab.SetFocal = new_instancemethod(_gp.gp_Parab_SetFocal,None,gp_Parab)
gp_Parab.SetLocation = new_instancemethod(_gp.gp_Parab_SetLocation,None,gp_Parab)
gp_Parab.SetPosition = new_instancemethod(_gp.gp_Parab_SetPosition,None,gp_Parab)
gp_Parab.Axis = new_instancemethod(_gp.gp_Parab_Axis,None,gp_Parab)
gp_Parab.Directrix = new_instancemethod(_gp.gp_Parab_Directrix,None,gp_Parab)
gp_Parab.Focal = new_instancemethod(_gp.gp_Parab_Focal,None,gp_Parab)
gp_Parab.Focus = new_instancemethod(_gp.gp_Parab_Focus,None,gp_Parab)
gp_Parab.Location = new_instancemethod(_gp.gp_Parab_Location,None,gp_Parab)
gp_Parab.Parameter = new_instancemethod(_gp.gp_Parab_Parameter,None,gp_Parab)
gp_Parab.Position = new_instancemethod(_gp.gp_Parab_Position,None,gp_Parab)
gp_Parab.XAxis = new_instancemethod(_gp.gp_Parab_XAxis,None,gp_Parab)
gp_Parab.YAxis = new_instancemethod(_gp.gp_Parab_YAxis,None,gp_Parab)
gp_Parab.Mirror = new_instancemethod(_gp.gp_Parab_Mirror,None,gp_Parab)
gp_Parab.Mirrored = new_instancemethod(_gp.gp_Parab_Mirrored,None,gp_Parab)
gp_Parab.Rotate = new_instancemethod(_gp.gp_Parab_Rotate,None,gp_Parab)
gp_Parab.Rotated = new_instancemethod(_gp.gp_Parab_Rotated,None,gp_Parab)
gp_Parab.Scale = new_instancemethod(_gp.gp_Parab_Scale,None,gp_Parab)
gp_Parab.Scaled = new_instancemethod(_gp.gp_Parab_Scaled,None,gp_Parab)
gp_Parab.Transform = new_instancemethod(_gp.gp_Parab_Transform,None,gp_Parab)
gp_Parab.Transformed = new_instancemethod(_gp.gp_Parab_Transformed,None,gp_Parab)
gp_Parab.Translate = new_instancemethod(_gp.gp_Parab_Translate,None,gp_Parab)
gp_Parab.Translated = new_instancemethod(_gp.gp_Parab_Translated,None,gp_Parab)
gp_Parab._CSFDB_Getgp_Parabpos = new_instancemethod(_gp.gp_Parab__CSFDB_Getgp_Parabpos,None,gp_Parab)
gp_Parab._CSFDB_Getgp_ParabfocalLength = new_instancemethod(_gp.gp_Parab__CSFDB_Getgp_ParabfocalLength,None,gp_Parab)
gp_Parab._CSFDB_Setgp_ParabfocalLength = new_instancemethod(_gp.gp_Parab__CSFDB_Setgp_ParabfocalLength,None,gp_Parab)
gp_Parab._kill_pointed = new_instancemethod(_gp.gp_Parab__kill_pointed,None,gp_Parab)
gp_Parab_swigregister = _gp.gp_Parab_swigregister
gp_Parab_swigregister(gp_Parab)

class gp_Parab2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite parabola.

        :rtype: None

        * Creates a parabola with its vertex point, its axis of symmetry ('XAxis') and its focal length. The sense of parametrization is given by Sense. Warnings : It is possible to have Focal = 0. Raises ConstructionError if Focal < 0.0

        :param MirrorAxis:
        :type MirrorAxis: gp_Ax2d
        :param Focal:
        :type Focal: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * Creates a parabola with its vertex point, its axis of symmetry ('XAxis') and its focal length. The sense of parametrization is given by A. Warnings : It is possible to have Focal = 0. Raises ConstructionError if Focal < 0.0

        :param A:
        :type A: gp_Ax22d
        :param Focal:
        :type Focal: float
        :rtype: None

        * Creates a parabola with the directrix and the focus point. The sense of parametrization is given by Sense.

        :param D:
        :type D: gp_Ax2d
        :param F:
        :type F: gp_Pnt2d
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        * Creates a parabola with the directrix and the focus point. The Sense of parametrization is given by D.

        :param D:
        :type D: gp_Ax22d
        :param F:
        :type F: gp_Pnt2d
        :rtype: None

        """
        _gp.gp_Parab2d_swiginit(self,_gp.new_gp_Parab2d(*args))
    def SetFocal(self, *args):
        """
        * Changes the focal distance of the parabola Warnings : It is possible to have Focal = 0. Raises ConstructionError if Focal < 0.0

        :param Focal:
        :type Focal: float
        :rtype: None

        """
        return _gp.gp_Parab2d_SetFocal(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the 'Location' point of the parabola. It is the vertex of the parabola.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Parab2d_SetLocation(self, *args)

    def SetMirrorAxis(self, *args):
        """
        * Modifies this parabola, by redefining its local coordinate system so that its origin and 'X Direction' become those of the axis MA. The 'Y Direction' of the local coordinate system is then recomputed. The orientation of the local coordinate system is not modified.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Parab2d_SetMirrorAxis(self, *args)

    def SetAxis(self, *args):
        """
        * Changes the local coordinate system of the parabola. The 'Location' point of A becomes the vertex of the parabola.

        :param A:
        :type A: gp_Ax22d
        :rtype: None

        """
        return _gp.gp_Parab2d_SetAxis(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the coefficients of the implicit equation of the parabola. A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :param E:
        :type E: float
        :param F:
        :type F: float
        :rtype: None

        """
        return _gp.gp_Parab2d_Coefficients(self, *args)

    def Directrix(self, *args):
        """
        * Computes the directrix of the parabola. The directrix is: - a line parallel to the 'Y Direction' of the local coordinate system of this parabola, and - located on the negative side of the axis of symmetry, at a distance from the apex which is equal to the focal length of this parabola. The directrix is returned as an axis (a gp_Ax2d object), the origin of which is situated on the 'X Axis' of this parabola.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Parab2d_Directrix(self, *args)

    def Focal(self, *args):
        """
        * Returns the distance between the vertex and the focus of the parabola.

        :rtype: float

        """
        return _gp.gp_Parab2d_Focal(self, *args)

    def Focus(self, *args):
        """
        * Returns the focus of the parabola.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Parab2d_Focus(self, *args)

    def Location(self, *args):
        """
        * Returns the vertex of the parabola.

        :rtype: gp_Pnt2d

        """
        return _gp.gp_Parab2d_Location(self, *args)

    def MirrorAxis(self, *args):
        """
        * Returns the symmetry axis of the parabola. The 'Location' point of this axis is the vertex of the parabola.

        :rtype: gp_Ax2d

        """
        return _gp.gp_Parab2d_MirrorAxis(self, *args)

    def Axis(self, *args):
        """
        * Returns the local coordinate system of the parabola. The 'Location' point of this axis is the vertex of the parabola.

        :rtype: gp_Ax22d

        """
        return _gp.gp_Parab2d_Axis(self, *args)

    def Parameter(self, *args):
        """
        * Returns the distance between the focus and the directrix of the parabola.

        :rtype: float

        """
        return _gp.gp_Parab2d_Parameter(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Parab2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the orientation of the local coordinate system of this parabola (the 'Y Direction' is reversed). Therefore, the implicit orientation of this parabola is reversed. Note: - Reverse assigns the result to this parabola, while - Reversed creates a new one.

        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Reversed(self, *args)

    def IsDirect(self, *args):
        """
        * Returns true if the local coordinate system is direct  and false in the other case.

        :rtype: bool

        """
        return _gp.gp_Parab2d_IsDirect(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Parab2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a parabola with respect to the point P which is the center of the symmetry

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Parab2d

        * Performs the symmetrical transformation of a parabola with respect to an axis placement which is the axis of the symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Parab2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a parabola. P is the center of the rotation. Ang is the angular value of the rotation in radians.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Parab2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a parabola. S is the scaling value. If S is negative the direction of the symmetry axis 'XAxis' is reversed and the direction of the 'YAxis' too.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Parab2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms an parabola with the transformation T from class Trsf2d.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Parab2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a parabola in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Parab2d

        * Translates a parabola from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Parab2d

        """
        return _gp.gp_Parab2d_Translated(self, *args)

    def _CSFDB_Getgp_Parab2dpos(self, *args):
        """
        :rtype: gp_Ax22d

        """
        return _gp.gp_Parab2d__CSFDB_Getgp_Parab2dpos(self, *args)

    def _CSFDB_Getgp_Parab2dfocalLength(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Parab2d__CSFDB_Getgp_Parab2dfocalLength(self, *args)

    def _CSFDB_Setgp_Parab2dfocalLength(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Parab2d__CSFDB_Setgp_Parab2dfocalLength(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Parab2d.SetFocal = new_instancemethod(_gp.gp_Parab2d_SetFocal,None,gp_Parab2d)
gp_Parab2d.SetLocation = new_instancemethod(_gp.gp_Parab2d_SetLocation,None,gp_Parab2d)
gp_Parab2d.SetMirrorAxis = new_instancemethod(_gp.gp_Parab2d_SetMirrorAxis,None,gp_Parab2d)
gp_Parab2d.SetAxis = new_instancemethod(_gp.gp_Parab2d_SetAxis,None,gp_Parab2d)
gp_Parab2d.Coefficients = new_instancemethod(_gp.gp_Parab2d_Coefficients,None,gp_Parab2d)
gp_Parab2d.Directrix = new_instancemethod(_gp.gp_Parab2d_Directrix,None,gp_Parab2d)
gp_Parab2d.Focal = new_instancemethod(_gp.gp_Parab2d_Focal,None,gp_Parab2d)
gp_Parab2d.Focus = new_instancemethod(_gp.gp_Parab2d_Focus,None,gp_Parab2d)
gp_Parab2d.Location = new_instancemethod(_gp.gp_Parab2d_Location,None,gp_Parab2d)
gp_Parab2d.MirrorAxis = new_instancemethod(_gp.gp_Parab2d_MirrorAxis,None,gp_Parab2d)
gp_Parab2d.Axis = new_instancemethod(_gp.gp_Parab2d_Axis,None,gp_Parab2d)
gp_Parab2d.Parameter = new_instancemethod(_gp.gp_Parab2d_Parameter,None,gp_Parab2d)
gp_Parab2d.Reverse = new_instancemethod(_gp.gp_Parab2d_Reverse,None,gp_Parab2d)
gp_Parab2d.Reversed = new_instancemethod(_gp.gp_Parab2d_Reversed,None,gp_Parab2d)
gp_Parab2d.IsDirect = new_instancemethod(_gp.gp_Parab2d_IsDirect,None,gp_Parab2d)
gp_Parab2d.Mirror = new_instancemethod(_gp.gp_Parab2d_Mirror,None,gp_Parab2d)
gp_Parab2d.Mirrored = new_instancemethod(_gp.gp_Parab2d_Mirrored,None,gp_Parab2d)
gp_Parab2d.Rotate = new_instancemethod(_gp.gp_Parab2d_Rotate,None,gp_Parab2d)
gp_Parab2d.Rotated = new_instancemethod(_gp.gp_Parab2d_Rotated,None,gp_Parab2d)
gp_Parab2d.Scale = new_instancemethod(_gp.gp_Parab2d_Scale,None,gp_Parab2d)
gp_Parab2d.Scaled = new_instancemethod(_gp.gp_Parab2d_Scaled,None,gp_Parab2d)
gp_Parab2d.Transform = new_instancemethod(_gp.gp_Parab2d_Transform,None,gp_Parab2d)
gp_Parab2d.Transformed = new_instancemethod(_gp.gp_Parab2d_Transformed,None,gp_Parab2d)
gp_Parab2d.Translate = new_instancemethod(_gp.gp_Parab2d_Translate,None,gp_Parab2d)
gp_Parab2d.Translated = new_instancemethod(_gp.gp_Parab2d_Translated,None,gp_Parab2d)
gp_Parab2d._CSFDB_Getgp_Parab2dpos = new_instancemethod(_gp.gp_Parab2d__CSFDB_Getgp_Parab2dpos,None,gp_Parab2d)
gp_Parab2d._CSFDB_Getgp_Parab2dfocalLength = new_instancemethod(_gp.gp_Parab2d__CSFDB_Getgp_Parab2dfocalLength,None,gp_Parab2d)
gp_Parab2d._CSFDB_Setgp_Parab2dfocalLength = new_instancemethod(_gp.gp_Parab2d__CSFDB_Setgp_Parab2dfocalLength,None,gp_Parab2d)
gp_Parab2d._kill_pointed = new_instancemethod(_gp.gp_Parab2d__kill_pointed,None,gp_Parab2d)
gp_Parab2d_swigregister = _gp.gp_Parab2d_swigregister
gp_Parab2d_swigregister(gp_Parab2d)

class gp_Pln(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a plane coincident with OXY plane of the  reference coordinate system.

        :rtype: None

        * The coordinate system of the plane is defined with the axis placement A3. The 'Direction' of A3 defines the normal to the plane. The 'Location' of A3 defines the location (origin) of the plane. The 'XDirection' and 'YDirection' of A3 define the 'XAxis' and the 'YAxis' of the plane used to parametrize the plane.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        * Creates a plane with the 'Location' point <P> and the normal direction <V>.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        * Creates a plane from its cartesian equation : A * X + B * Y + C * Z + D = 0.0 Raises ConstructionError if Sqrt (A*A + B*B + C*C) <= Resolution from gp.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :rtype: None

        """
        _gp.gp_Pln_swiginit(self,_gp.new_gp_Pln(*args))
    def Coefficients(self, *args):
        """
        * Returns the coefficients of the plane's cartesian equation : A * X + B * Y + C * Z + D = 0.

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :rtype: None

        """
        return _gp.gp_Pln_Coefficients(self, *args)

    def SetAxis(self, *args):
        """
        * Modifies this plane, by redefining its local coordinate system so that - its origin and 'main Direction' become those of the axis A1 (the 'X Direction' and 'Y Direction' are then recomputed). Raises ConstructionError if the A1 is parallel to the 'XAxis' of the plane.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Pln_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the origin of the plane.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Pln_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinate system of the plane.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Pln_SetPosition(self, *args)

    def UReverse(self, *args):
        """
        * Reverses the U parametrization of the plane reversing the XAxis.

        :rtype: None

        """
        return _gp.gp_Pln_UReverse(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V parametrization of the plane reversing the YAxis.

        :rtype: None

        """
        return _gp.gp_Pln_VReverse(self, *args)

    def Direct(self, *args):
        """
        * returns true if the Ax3 is right handed.

        :rtype: bool

        """
        return _gp.gp_Pln_Direct(self, *args)

    def Axis(self, *args):
        """
        * Returns the plane's normal Axis.

        :rtype: gp_Ax1

        """
        return _gp.gp_Pln_Axis(self, *args)

    def Location(self, *args):
        """
        * Returns the plane's location (origin).

        :rtype: gp_Pnt

        """
        return _gp.gp_Pln_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinate system of the plane .

        :rtype: gp_Ax3

        """
        return _gp.gp_Pln_Position(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between <self> and the point <P>.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        * Computes the distance between <self> and the line <L>.

        :param L:
        :type L: gp_Lin
        :rtype: float

        * Computes the distance between two planes.

        :param Other:
        :type Other: gp_Pln
        :rtype: float

        """
        return _gp.gp_Pln_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and the point <P>.

        :param P:
        :type P: gp_Pnt
        :rtype: float

        * Computes the square distance between <self> and the line <L>.

        :param L:
        :type L: gp_Lin
        :rtype: float

        * Computes the square distance between two planes.

        :param Other:
        :type Other: gp_Pln
        :rtype: float

        """
        return _gp.gp_Pln_SquareDistance(self, *args)

    def XAxis(self, *args):
        """
        * Returns the X axis of the plane.

        :rtype: gp_Ax1

        """
        return _gp.gp_Pln_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the Y axis of the plane.

        :rtype: gp_Ax1

        """
        return _gp.gp_Pln_YAxis(self, *args)

    def Contains(self, *args):
        """
        * Returns true if this plane contains the point P. This means that - the distance between point P and this plane is less than or equal to LinearTolerance, or - line L is normal to the 'main Axis' of the local coordinate system of this plane, within the tolerance AngularTolerance, and the distance between the origin of line L and this plane is less than or equal to LinearTolerance.

        :param P:
        :type P: gp_Pnt
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        * Returns true if this plane contains the line L. This means that - the distance between point P and this plane is less than or equal to LinearTolerance, or - line L is normal to the 'main Axis' of the local coordinate system of this plane, within the tolerance AngularTolerance, and the distance between the origin of line L and this plane is less than or equal to LinearTolerance.

        :param L:
        :type L: gp_Lin
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Pln_Contains(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Pln_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a plane with respect to the point <P> which is the center of the symmetry Warnings : The normal direction to the plane is not changed. The 'XAxis' and the 'YAxis' are reversed.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Pln

        * Performs the symmetrical transformation of a plane with respect to an axis placement which is the axis of the symmetry. The transformation is performed on the 'Location' point, on the 'XAxis' and the 'YAxis'. The resulting normal direction is the cross product between the 'XDirection' and the 'YDirection' after transformation if the initial plane was right handed, else it is the opposite.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Pln

        * Performs the symmetrical transformation of a plane with respect to an axis placement. The axis placement <A2> locates the plane of the symmetry. The transformation is performed on the 'Location' point, on the 'XAxis' and the 'YAxis'. The resulting normal direction is the cross product between the 'XDirection' and the 'YDirection' after transformation if the initial plane was right handed, else it is the opposite.

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Pln

        """
        return _gp.gp_Pln_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Pln_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * rotates a plane. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Pln

        """
        return _gp.gp_Pln_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Pln_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a plane. S is the scaling value.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Pln

        """
        return _gp.gp_Pln_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Pln_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a plane with the transformation T from class Trsf. The transformation is performed on the 'Location' point, on the 'XAxis' and the 'YAxis'. The resulting normal direction is the cross product between the 'XDirection' and the 'YDirection' after transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Pln

        """
        return _gp.gp_Pln_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Pln_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a plane in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Pln

        * Translates a plane from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Pln

        """
        return _gp.gp_Pln_Translated(self, *args)

    def _CSFDB_Getgp_Plnpos(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _gp.gp_Pln__CSFDB_Getgp_Plnpos(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Pln.Coefficients = new_instancemethod(_gp.gp_Pln_Coefficients,None,gp_Pln)
gp_Pln.SetAxis = new_instancemethod(_gp.gp_Pln_SetAxis,None,gp_Pln)
gp_Pln.SetLocation = new_instancemethod(_gp.gp_Pln_SetLocation,None,gp_Pln)
gp_Pln.SetPosition = new_instancemethod(_gp.gp_Pln_SetPosition,None,gp_Pln)
gp_Pln.UReverse = new_instancemethod(_gp.gp_Pln_UReverse,None,gp_Pln)
gp_Pln.VReverse = new_instancemethod(_gp.gp_Pln_VReverse,None,gp_Pln)
gp_Pln.Direct = new_instancemethod(_gp.gp_Pln_Direct,None,gp_Pln)
gp_Pln.Axis = new_instancemethod(_gp.gp_Pln_Axis,None,gp_Pln)
gp_Pln.Location = new_instancemethod(_gp.gp_Pln_Location,None,gp_Pln)
gp_Pln.Position = new_instancemethod(_gp.gp_Pln_Position,None,gp_Pln)
gp_Pln.Distance = new_instancemethod(_gp.gp_Pln_Distance,None,gp_Pln)
gp_Pln.SquareDistance = new_instancemethod(_gp.gp_Pln_SquareDistance,None,gp_Pln)
gp_Pln.XAxis = new_instancemethod(_gp.gp_Pln_XAxis,None,gp_Pln)
gp_Pln.YAxis = new_instancemethod(_gp.gp_Pln_YAxis,None,gp_Pln)
gp_Pln.Contains = new_instancemethod(_gp.gp_Pln_Contains,None,gp_Pln)
gp_Pln.Mirror = new_instancemethod(_gp.gp_Pln_Mirror,None,gp_Pln)
gp_Pln.Mirrored = new_instancemethod(_gp.gp_Pln_Mirrored,None,gp_Pln)
gp_Pln.Rotate = new_instancemethod(_gp.gp_Pln_Rotate,None,gp_Pln)
gp_Pln.Rotated = new_instancemethod(_gp.gp_Pln_Rotated,None,gp_Pln)
gp_Pln.Scale = new_instancemethod(_gp.gp_Pln_Scale,None,gp_Pln)
gp_Pln.Scaled = new_instancemethod(_gp.gp_Pln_Scaled,None,gp_Pln)
gp_Pln.Transform = new_instancemethod(_gp.gp_Pln_Transform,None,gp_Pln)
gp_Pln.Transformed = new_instancemethod(_gp.gp_Pln_Transformed,None,gp_Pln)
gp_Pln.Translate = new_instancemethod(_gp.gp_Pln_Translate,None,gp_Pln)
gp_Pln.Translated = new_instancemethod(_gp.gp_Pln_Translated,None,gp_Pln)
gp_Pln._CSFDB_Getgp_Plnpos = new_instancemethod(_gp.gp_Pln__CSFDB_Getgp_Plnpos,None,gp_Pln)
gp_Pln._kill_pointed = new_instancemethod(_gp.gp_Pln__kill_pointed,None,gp_Pln)
gp_Pln_swigregister = _gp.gp_Pln_swigregister
gp_Pln_swigregister(gp_Pln)

class gp_Pnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a point with zero coordinates.

        :rtype: None

        * Creates a point from a XYZ object.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        * Creates a point with its 3 cartesian's coordinates : Xp, Yp, Zp.

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :param Zp:
        :type Zp: float
        :rtype: None

        """
        _gp.gp_Pnt_swiginit(self,_gp.new_gp_Pnt(*args))
    def SetCoord(self, *args):
        """
        * Changes the coordinate of range Index : Index = 1 => X is modified Index = 2 => Y is modified Index = 3 => Z is modified Raised if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this point, assigns the values Xp, Yp and Zp to its three coordinates.

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :param Zp:
        :type Zp: float
        :rtype: None

        """
        return _gp.gp_Pnt_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this point.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Pnt_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this point.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Pnt_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Assigns the given value to the Z coordinate of this point.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_Pnt_SetZ(self, *args)

    def SetXYZ(self, *args):
        """
        * Assigns the three coordinates of Coord to this point.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Pnt_SetXYZ(self, *args)

    def X(self, *args):
        """
        * For this point, returns its X coordinate.

        :rtype: float

        """
        return _gp.gp_Pnt_X(self, *args)

    def Y(self, *args):
        """
        * For this point, returns its Y coordinate.

        :rtype: float

        """
        return _gp.gp_Pnt_Y(self, *args)

    def Z(self, *args):
        """
        * For this point, returns its Z coordinate.

        :rtype: float

        """
        return _gp.gp_Pnt_Z(self, *args)

    def XYZ(self, *args):
        """
        * For this point, returns its three coordinates as a XYZ object.

        :rtype: gp_XYZ

        """
        return _gp.gp_Pnt_XYZ(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinate of corresponding to the value of Index : Index = 1 => X is returned Index = 2 => Y is returned Index = 3 => Z is returned Raises OutOfRange if Index != {1, 2, 3}. Raised if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this point gives its three coordinates Xp, Yp and Zp.

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :param Zp:
        :type Zp: float
        :rtype: None

        * For this point, returns its three coordinates as a XYZ object.

        :rtype: gp_XYZ

        """
        return _gp.gp_Pnt_Coord(self, *args)

    def ChangeCoord(self, *args):
        """
        * Returns the coordinates of this point. Note: This syntax allows direct modification of the returned value.

        :rtype: gp_XYZ

        """
        return _gp.gp_Pnt_ChangeCoord(self, *args)

    def BaryCenter(self, *args):
        """
        * Assigns the result of the following expression to this point (Alpha*this + Beta*P) / (Alpha + Beta)

        :param Alpha:
        :type Alpha: float
        :param P:
        :type P: gp_Pnt
        :param Beta:
        :type Beta: float
        :rtype: None

        """
        return _gp.gp_Pnt_BaryCenter(self, *args)

    def IsEqual(self, *args):
        """
        * Comparison Returns True if the distance between the two points is lower or equal to LinearTolerance.

        :param Other:
        :type Other: gp_Pnt
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Pnt_IsEqual(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between two points.

        :param Other:
        :type Other: gp_Pnt
        :rtype: float

        """
        return _gp.gp_Pnt_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between two points.

        :param Other:
        :type Other: gp_Pnt
        :rtype: float

        """
        return _gp.gp_Pnt_SquareDistance(self, *args)

    def Mirror(self, *args):
        """
        * Performs the symmetrical transformation of a point with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Pnt_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a point with respect to an axis placement which is the axis of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Pnt

        * Performs the symmetrical transformation of a point with respect to a plane. The axis placement A2 locates the plane of the symmetry : (Location, XDirection, YDirection).

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Pnt

        * Rotates a point. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Pnt

        """
        return _gp.gp_Pnt_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Pnt_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Scales a point. S is the scaling value.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Pnt

        """
        return _gp.gp_Pnt_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Pnt_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Transforms a point with the transformation T.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Pnt

        """
        return _gp.gp_Pnt_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Pnt_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Translates a point in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Pnt

        """
        return _gp.gp_Pnt_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Pnt_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a point from the point P1 to the point P2.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Pnt

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Pnt

        """
        return _gp.gp_Pnt_Translated(self, *args)

    def _CSFDB_Getgp_Pntcoord(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _gp.gp_Pnt__CSFDB_Getgp_Pntcoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Pnt.SetCoord = new_instancemethod(_gp.gp_Pnt_SetCoord,None,gp_Pnt)
gp_Pnt.SetX = new_instancemethod(_gp.gp_Pnt_SetX,None,gp_Pnt)
gp_Pnt.SetY = new_instancemethod(_gp.gp_Pnt_SetY,None,gp_Pnt)
gp_Pnt.SetZ = new_instancemethod(_gp.gp_Pnt_SetZ,None,gp_Pnt)
gp_Pnt.SetXYZ = new_instancemethod(_gp.gp_Pnt_SetXYZ,None,gp_Pnt)
gp_Pnt.X = new_instancemethod(_gp.gp_Pnt_X,None,gp_Pnt)
gp_Pnt.Y = new_instancemethod(_gp.gp_Pnt_Y,None,gp_Pnt)
gp_Pnt.Z = new_instancemethod(_gp.gp_Pnt_Z,None,gp_Pnt)
gp_Pnt.XYZ = new_instancemethod(_gp.gp_Pnt_XYZ,None,gp_Pnt)
gp_Pnt.Coord = new_instancemethod(_gp.gp_Pnt_Coord,None,gp_Pnt)
gp_Pnt.ChangeCoord = new_instancemethod(_gp.gp_Pnt_ChangeCoord,None,gp_Pnt)
gp_Pnt.BaryCenter = new_instancemethod(_gp.gp_Pnt_BaryCenter,None,gp_Pnt)
gp_Pnt.IsEqual = new_instancemethod(_gp.gp_Pnt_IsEqual,None,gp_Pnt)
gp_Pnt.Distance = new_instancemethod(_gp.gp_Pnt_Distance,None,gp_Pnt)
gp_Pnt.SquareDistance = new_instancemethod(_gp.gp_Pnt_SquareDistance,None,gp_Pnt)
gp_Pnt.Mirror = new_instancemethod(_gp.gp_Pnt_Mirror,None,gp_Pnt)
gp_Pnt.Mirrored = new_instancemethod(_gp.gp_Pnt_Mirrored,None,gp_Pnt)
gp_Pnt.Rotate = new_instancemethod(_gp.gp_Pnt_Rotate,None,gp_Pnt)
gp_Pnt.Rotated = new_instancemethod(_gp.gp_Pnt_Rotated,None,gp_Pnt)
gp_Pnt.Scale = new_instancemethod(_gp.gp_Pnt_Scale,None,gp_Pnt)
gp_Pnt.Scaled = new_instancemethod(_gp.gp_Pnt_Scaled,None,gp_Pnt)
gp_Pnt.Transform = new_instancemethod(_gp.gp_Pnt_Transform,None,gp_Pnt)
gp_Pnt.Transformed = new_instancemethod(_gp.gp_Pnt_Transformed,None,gp_Pnt)
gp_Pnt.Translate = new_instancemethod(_gp.gp_Pnt_Translate,None,gp_Pnt)
gp_Pnt.Translated = new_instancemethod(_gp.gp_Pnt_Translated,None,gp_Pnt)
gp_Pnt._CSFDB_Getgp_Pntcoord = new_instancemethod(_gp.gp_Pnt__CSFDB_Getgp_Pntcoord,None,gp_Pnt)
gp_Pnt._kill_pointed = new_instancemethod(_gp.gp_Pnt__kill_pointed,None,gp_Pnt)
gp_Pnt_swigregister = _gp.gp_Pnt_swigregister
gp_Pnt_swigregister(gp_Pnt)

class gp_Pnt2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a point with zero coordinates.

        :rtype: None

        * Creates a point with a doublet of coordinates.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        * Creates a point with its 2 cartesian's coordinates : Xp, Yp.

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :rtype: None

        """
        _gp.gp_Pnt2d_swiginit(self,_gp.new_gp_Pnt2d(*args))
    def SetCoord(self, *args):
        """
        * Assigns the value Xi to the coordinate that corresponds to Index: Index = 1 => X is modified Index = 2 => Y is modified Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this point, assigns the values Xp and Yp to its two coordinates

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :rtype: None

        """
        return _gp.gp_Pnt2d_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this point.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Pnt2d_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this point.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Pnt2d_SetY(self, *args)

    def SetXY(self, *args):
        """
        * Assigns the two coordinates of Coord to this point.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        """
        return _gp.gp_Pnt2d_SetXY(self, *args)

    def X(self, *args):
        """
        * For this point, returns its X coordinate.

        :rtype: float

        """
        return _gp.gp_Pnt2d_X(self, *args)

    def Y(self, *args):
        """
        * For this point, returns its Y coordinate.

        :rtype: float

        """
        return _gp.gp_Pnt2d_Y(self, *args)

    def XY(self, *args):
        """
        * For this point, returns its two coordinates as a number pair.

        :rtype: gp_XY

        """
        return _gp.gp_Pnt2d_XY(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this point returns its two coordinates as a number pair.

        :param Xp:
        :type Xp: float
        :param Yp:
        :type Yp: float
        :rtype: None

        * For this point, returns its two coordinates as a number pair.

        :rtype: gp_XY

        """
        return _gp.gp_Pnt2d_Coord(self, *args)

    def ChangeCoord(self, *args):
        """
        * Returns the coordinates of this point. Note: This syntax allows direct modification of the returned value.

        :rtype: gp_XY

        """
        return _gp.gp_Pnt2d_ChangeCoord(self, *args)

    def IsEqual(self, *args):
        """
        * Comparison Returns True if the distance between the two points is lower or equal to LinearTolerance.

        :param Other:
        :type Other: gp_Pnt2d
        :param LinearTolerance:
        :type LinearTolerance: float
        :rtype: bool

        """
        return _gp.gp_Pnt2d_IsEqual(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between two points.

        :param Other:
        :type Other: gp_Pnt2d
        :rtype: float

        """
        return _gp.gp_Pnt2d_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between two points.

        :param Other:
        :type Other: gp_Pnt2d
        :rtype: float

        """
        return _gp.gp_Pnt2d_SquareDistance(self, *args)

    def Mirror(self, *args):
        """
        * Performs the symmetrical transformation of a point with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Pnt2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a point with respect to an axis placement which is the axis

        :param P:
        :type P: gp_Pnt2d
        :rtype: gp_Pnt2d

        * Rotates a point. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A:
        :type A: gp_Ax2d
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Pnt2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Pnt2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Scales a point. S is the scaling value.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Pnt2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Pnt2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Transforms a point with the transformation T.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Pnt2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Pnt2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Translates a point in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Pnt2d_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Pnt2d_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a point from the point P1 to the point P2.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Pnt2d

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: gp_Pnt2d

        """
        return _gp.gp_Pnt2d_Translated(self, *args)

    def _CSFDB_Getgp_Pnt2dcoord(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_Pnt2d__CSFDB_Getgp_Pnt2dcoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Pnt2d.SetCoord = new_instancemethod(_gp.gp_Pnt2d_SetCoord,None,gp_Pnt2d)
gp_Pnt2d.SetX = new_instancemethod(_gp.gp_Pnt2d_SetX,None,gp_Pnt2d)
gp_Pnt2d.SetY = new_instancemethod(_gp.gp_Pnt2d_SetY,None,gp_Pnt2d)
gp_Pnt2d.SetXY = new_instancemethod(_gp.gp_Pnt2d_SetXY,None,gp_Pnt2d)
gp_Pnt2d.X = new_instancemethod(_gp.gp_Pnt2d_X,None,gp_Pnt2d)
gp_Pnt2d.Y = new_instancemethod(_gp.gp_Pnt2d_Y,None,gp_Pnt2d)
gp_Pnt2d.XY = new_instancemethod(_gp.gp_Pnt2d_XY,None,gp_Pnt2d)
gp_Pnt2d.Coord = new_instancemethod(_gp.gp_Pnt2d_Coord,None,gp_Pnt2d)
gp_Pnt2d.ChangeCoord = new_instancemethod(_gp.gp_Pnt2d_ChangeCoord,None,gp_Pnt2d)
gp_Pnt2d.IsEqual = new_instancemethod(_gp.gp_Pnt2d_IsEqual,None,gp_Pnt2d)
gp_Pnt2d.Distance = new_instancemethod(_gp.gp_Pnt2d_Distance,None,gp_Pnt2d)
gp_Pnt2d.SquareDistance = new_instancemethod(_gp.gp_Pnt2d_SquareDistance,None,gp_Pnt2d)
gp_Pnt2d.Mirror = new_instancemethod(_gp.gp_Pnt2d_Mirror,None,gp_Pnt2d)
gp_Pnt2d.Mirrored = new_instancemethod(_gp.gp_Pnt2d_Mirrored,None,gp_Pnt2d)
gp_Pnt2d.Rotate = new_instancemethod(_gp.gp_Pnt2d_Rotate,None,gp_Pnt2d)
gp_Pnt2d.Rotated = new_instancemethod(_gp.gp_Pnt2d_Rotated,None,gp_Pnt2d)
gp_Pnt2d.Scale = new_instancemethod(_gp.gp_Pnt2d_Scale,None,gp_Pnt2d)
gp_Pnt2d.Scaled = new_instancemethod(_gp.gp_Pnt2d_Scaled,None,gp_Pnt2d)
gp_Pnt2d.Transform = new_instancemethod(_gp.gp_Pnt2d_Transform,None,gp_Pnt2d)
gp_Pnt2d.Transformed = new_instancemethod(_gp.gp_Pnt2d_Transformed,None,gp_Pnt2d)
gp_Pnt2d.Translate = new_instancemethod(_gp.gp_Pnt2d_Translate,None,gp_Pnt2d)
gp_Pnt2d.Translated = new_instancemethod(_gp.gp_Pnt2d_Translated,None,gp_Pnt2d)
gp_Pnt2d._CSFDB_Getgp_Pnt2dcoord = new_instancemethod(_gp.gp_Pnt2d__CSFDB_Getgp_Pnt2dcoord,None,gp_Pnt2d)
gp_Pnt2d._kill_pointed = new_instancemethod(_gp.gp_Pnt2d__kill_pointed,None,gp_Pnt2d)
gp_Pnt2d_swigregister = _gp.gp_Pnt2d_swigregister
gp_Pnt2d_swigregister(gp_Pnt2d)

class gp_Quaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an identity quaternion

        :rtype: None

        * Creates quaternion directly from component values

        :param x:
        :type x: float
        :param y:
        :type y: float
        :param z:
        :type z: float
        :param w:
        :type w: float
        :rtype: None

        * Creates copy of another quaternion

        :param theToCopy:
        :type theToCopy: gp_Quaternion
        :rtype: None

        * Creates quaternion representing shortest-arc rotation operator producing vector theVecTo from vector theVecFrom.

        :param theVecFrom:
        :type theVecFrom: gp_Vec
        :param theVecTo:
        :type theVecTo: gp_Vec
        :rtype: None

        * Creates quaternion representing shortest-arc rotation operator producing vector theVecTo from vector theVecFrom. Additional vector theHelpCrossVec defines preferred direction for rotation and is used when theVecTo and theVecFrom are directed oppositely.

        :param theVecFrom:
        :type theVecFrom: gp_Vec
        :param theVecTo:
        :type theVecTo: gp_Vec
        :param theHelpCrossVec:
        :type theHelpCrossVec: gp_Vec
        :rtype: None

        * Creates quaternion representing rotation on angle theAngle around vector theAxis

        :param theAxis:
        :type theAxis: gp_Vec
        :param theAngle:
        :type theAngle: float
        :rtype: None

        * Creates quaternion from rotation matrix 3*3 (which should be orthonormal skew-symmetric matrix)

        :param theMat:
        :type theMat: gp_Mat
        :rtype: None

        """
        _gp.gp_Quaternion_swiginit(self,_gp.new_gp_Quaternion(*args))
    def IsEqual(self, *args):
        """
        * Simple equal test without precision

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: bool

        """
        return _gp.gp_Quaternion_IsEqual(self, *args)

    def SetRotation(self, *args):
        """
        * Sets quaternion to shortest-arc rotation producing vector theVecTo from vector theVecFrom. If vectors theVecFrom and theVecTo are opposite then rotation axis is computed as theVecFrom ^ (1,0,0) or theVecFrom ^ (0,0,1).

        :param theVecFrom:
        :type theVecFrom: gp_Vec
        :param theVecTo:
        :type theVecTo: gp_Vec
        :rtype: None

        * Sets quaternion to shortest-arc rotation producing vector theVecTo from vector theVecFrom. If vectors theVecFrom and theVecTo are opposite then rotation axis is computed as theVecFrom ^ theHelpCrossVec.

        :param theVecFrom:
        :type theVecFrom: gp_Vec
        :param theVecTo:
        :type theVecTo: gp_Vec
        :param theHelpCrossVec:
        :type theHelpCrossVec: gp_Vec
        :rtype: None

        """
        return _gp.gp_Quaternion_SetRotation(self, *args)

    def SetVectorAndAngle(self, *args):
        """
        * Create a unit quaternion from Axis+Angle representation

        :param theAxis:
        :type theAxis: gp_Vec
        :param theAngle:
        :type theAngle: float
        :rtype: None

        """
        return _gp.gp_Quaternion_SetVectorAndAngle(self, *args)

    def GetVectorAndAngle(self, *args):
        """
        * Convert a quaternion to Axis+Angle representation, preserve the axis direction and angle from -PI to +PI

        :param theAxis:
        :type theAxis: gp_Vec
        :param theAngle:
        :type theAngle: float
        :rtype: None

        """
        return _gp.gp_Quaternion_GetVectorAndAngle(self, *args)

    def SetMatrix(self, *args):
        """
        * Create a unit quaternion by rotation matrix matrix must contain only rotation (not scale or shear)  For numerical stability we find first the greatest component of quaternion and than search others from this one

        :param theMat:
        :type theMat: gp_Mat
        :rtype: None

        """
        return _gp.gp_Quaternion_SetMatrix(self, *args)

    def GetMatrix(self, *args):
        """
        * Returns rotation operation as 3*3 matrix

        :rtype: gp_Mat

        """
        return _gp.gp_Quaternion_GetMatrix(self, *args)

    def SetEulerAngles(self, *args):
        """
        * Create a unit quaternion representing rotation defined by generalized Euler angles

        :param theOrder:
        :type theOrder: gp_EulerSequence
        :param theAlpha:
        :type theAlpha: float
        :param theBeta:
        :type theBeta: float
        :param theGamma:
        :type theGamma: float
        :rtype: None

        """
        return _gp.gp_Quaternion_SetEulerAngles(self, *args)

    def GetEulerAngles(self, *args):
        """
        * Returns Euler angles describing current rotation

        :param theOrder:
        :type theOrder: gp_EulerSequence
        :param theAlpha:
        :type theAlpha: float
        :param theBeta:
        :type theBeta: float
        :param theGamma:
        :type theGamma: float
        :rtype: None

        """
        return _gp.gp_Quaternion_GetEulerAngles(self, *args)

    def Set(self, *args):
        """
        :param x:
        :type x: float
        :param y:
        :type y: float
        :param z:
        :type z: float
        :param w:
        :type w: float
        :rtype: None

        :param theQuaternion:
        :type theQuaternion: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion_Set(self, *args)

    def X(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Quaternion_X(self, *args)

    def Y(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Quaternion_Y(self, *args)

    def Z(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Quaternion_Z(self, *args)

    def W(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Quaternion_W(self, *args)

    def SetIdent(self, *args):
        """
        * Make identity quaternion (zero-rotation)

        :rtype: None

        """
        return _gp.gp_Quaternion_SetIdent(self, *args)

    def Reverse(self, *args):
        """
        * Reverse direction of rotation (conjugate quaternion)

        :rtype: None

        """
        return _gp.gp_Quaternion_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Return rotation with reversed direction (conjugated quaternion)

        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Reversed(self, *args)

    def Invert(self, *args):
        """
        * Inverts quaternion (both rotation direction and norm)

        :rtype: None

        """
        return _gp.gp_Quaternion_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Return inversed quaternion q^-1

        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Inverted(self, *args)

    def SquareNorm(self, *args):
        """
        * Returns square norm of quaternion

        :rtype: float

        """
        return _gp.gp_Quaternion_SquareNorm(self, *args)

    def Norm(self, *args):
        """
        * Returns norm of quaternion

        :rtype: float

        """
        return _gp.gp_Quaternion_Norm(self, *args)

    def Scale(self, *args):
        """
        * Scale all components by quaternion by theScale; note that rotation is not changed by this operation (except 0-scaling)

        :param theScale:
        :type theScale: float
        :rtype: None

        """
        return _gp.gp_Quaternion_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Returns scaled quaternion

        :param theScale:
        :type theScale: float
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Scaled(self, *args)

    def StabilizeLength(self, *args):
        """
        * Stabilize quaternion length within 1 - 1/4. This operation is a lot faster than normalization and preserve length goes to 0 or infinity

        :rtype: None

        """
        return _gp.gp_Quaternion_StabilizeLength(self, *args)

    def Normalize(self, *args):
        """
        * Scale quaternion that its norm goes to 1. The appearing of 0 magnitude or near is a error, so we can be sure that can divide by magnitude

        :rtype: None

        """
        return _gp.gp_Quaternion_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * Returns quaternion scaled so that its norm goes to 1.

        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Normalized(self, *args)

    def Negated(self, *args):
        """
        * Returns quaternion with all components negated. Note that this operation does not affect neither rotation operator defined by quaternion nor its norm.

        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Negated(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion___neg__(self, *args)

    def Added(self, *args):
        """
        * Makes sum of quaternion components; result is 'rotations mix'

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Added(self, *args)

    def __add__(self, *args):
        """
        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion___add__(self, *args)

    def Subtracted(self, *args):
        """
        * Makes difference of quaternion components; result is 'rotations mix'

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion___sub__(self, *args)

    def Multiplied(self, *args):
        """
        * Multiply function - work the same as Matrices multiplying. qq' = (cross(v,v') + wv' + w'v, ww' - dot(v,v')) Result is rotation combination: q' than q (here q=this, q'=theQ). Notices than: qq' != q'q; qq^-1 = q;

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        """
        return _gp.gp_Quaternion_Multiplied(self, *args)

    def Add(self, *args):
        """
        * Adds componnets of other quaternion; result is 'rotations mix'

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion___iadd__(self, *args)

    def Subtract(self, *args):
        """
        * Subtracts componnets of other quaternion; result is 'rotations mix'

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion___isub__(self, *args)

    def __imul__(self, *args):
        """
        :param theScale:
        :type theScale: float
        :rtype: None

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Quaternion___imul__(self, *args)

    def Dot(self, *args):
        """
        * Computes inner product / scalar product / Dot

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: float

        """
        return _gp.gp_Quaternion_Dot(self, *args)

    def GetRotationAngle(self, *args):
        """
        * Return rotation angle from -PI to PI

        :rtype: float

        """
        return _gp.gp_Quaternion_GetRotationAngle(self, *args)

    def Multiply(self, *args):
        """
        * Adds rotation by multiplication

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: None

        * Rotates vector by quaternion as rotation operator

        :param theVec:
        :type theVec: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Quaternion_Multiply(self, *args)

    def __mul__(self, *args):
        """
        :param theScale:
        :type theScale: float
        :rtype: gp_Quaternion

        :param theOther:
        :type theOther: gp_Quaternion
        :rtype: gp_Quaternion

        :param theVec:
        :type theVec: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Quaternion___mul__(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Quaternion.IsEqual = new_instancemethod(_gp.gp_Quaternion_IsEqual,None,gp_Quaternion)
gp_Quaternion.SetRotation = new_instancemethod(_gp.gp_Quaternion_SetRotation,None,gp_Quaternion)
gp_Quaternion.SetVectorAndAngle = new_instancemethod(_gp.gp_Quaternion_SetVectorAndAngle,None,gp_Quaternion)
gp_Quaternion.GetVectorAndAngle = new_instancemethod(_gp.gp_Quaternion_GetVectorAndAngle,None,gp_Quaternion)
gp_Quaternion.SetMatrix = new_instancemethod(_gp.gp_Quaternion_SetMatrix,None,gp_Quaternion)
gp_Quaternion.GetMatrix = new_instancemethod(_gp.gp_Quaternion_GetMatrix,None,gp_Quaternion)
gp_Quaternion.SetEulerAngles = new_instancemethod(_gp.gp_Quaternion_SetEulerAngles,None,gp_Quaternion)
gp_Quaternion.GetEulerAngles = new_instancemethod(_gp.gp_Quaternion_GetEulerAngles,None,gp_Quaternion)
gp_Quaternion.Set = new_instancemethod(_gp.gp_Quaternion_Set,None,gp_Quaternion)
gp_Quaternion.X = new_instancemethod(_gp.gp_Quaternion_X,None,gp_Quaternion)
gp_Quaternion.Y = new_instancemethod(_gp.gp_Quaternion_Y,None,gp_Quaternion)
gp_Quaternion.Z = new_instancemethod(_gp.gp_Quaternion_Z,None,gp_Quaternion)
gp_Quaternion.W = new_instancemethod(_gp.gp_Quaternion_W,None,gp_Quaternion)
gp_Quaternion.SetIdent = new_instancemethod(_gp.gp_Quaternion_SetIdent,None,gp_Quaternion)
gp_Quaternion.Reverse = new_instancemethod(_gp.gp_Quaternion_Reverse,None,gp_Quaternion)
gp_Quaternion.Reversed = new_instancemethod(_gp.gp_Quaternion_Reversed,None,gp_Quaternion)
gp_Quaternion.Invert = new_instancemethod(_gp.gp_Quaternion_Invert,None,gp_Quaternion)
gp_Quaternion.Inverted = new_instancemethod(_gp.gp_Quaternion_Inverted,None,gp_Quaternion)
gp_Quaternion.SquareNorm = new_instancemethod(_gp.gp_Quaternion_SquareNorm,None,gp_Quaternion)
gp_Quaternion.Norm = new_instancemethod(_gp.gp_Quaternion_Norm,None,gp_Quaternion)
gp_Quaternion.Scale = new_instancemethod(_gp.gp_Quaternion_Scale,None,gp_Quaternion)
gp_Quaternion.Scaled = new_instancemethod(_gp.gp_Quaternion_Scaled,None,gp_Quaternion)
gp_Quaternion.StabilizeLength = new_instancemethod(_gp.gp_Quaternion_StabilizeLength,None,gp_Quaternion)
gp_Quaternion.Normalize = new_instancemethod(_gp.gp_Quaternion_Normalize,None,gp_Quaternion)
gp_Quaternion.Normalized = new_instancemethod(_gp.gp_Quaternion_Normalized,None,gp_Quaternion)
gp_Quaternion.Negated = new_instancemethod(_gp.gp_Quaternion_Negated,None,gp_Quaternion)
gp_Quaternion.__neg__ = new_instancemethod(_gp.gp_Quaternion___neg__,None,gp_Quaternion)
gp_Quaternion.Added = new_instancemethod(_gp.gp_Quaternion_Added,None,gp_Quaternion)
gp_Quaternion.__add__ = new_instancemethod(_gp.gp_Quaternion___add__,None,gp_Quaternion)
gp_Quaternion.Subtracted = new_instancemethod(_gp.gp_Quaternion_Subtracted,None,gp_Quaternion)
gp_Quaternion.__sub__ = new_instancemethod(_gp.gp_Quaternion___sub__,None,gp_Quaternion)
gp_Quaternion.Multiplied = new_instancemethod(_gp.gp_Quaternion_Multiplied,None,gp_Quaternion)
gp_Quaternion.Add = new_instancemethod(_gp.gp_Quaternion_Add,None,gp_Quaternion)
gp_Quaternion.__iadd__ = new_instancemethod(_gp.gp_Quaternion___iadd__,None,gp_Quaternion)
gp_Quaternion.Subtract = new_instancemethod(_gp.gp_Quaternion_Subtract,None,gp_Quaternion)
gp_Quaternion.__isub__ = new_instancemethod(_gp.gp_Quaternion___isub__,None,gp_Quaternion)
gp_Quaternion.__imul__ = new_instancemethod(_gp.gp_Quaternion___imul__,None,gp_Quaternion)
gp_Quaternion.Dot = new_instancemethod(_gp.gp_Quaternion_Dot,None,gp_Quaternion)
gp_Quaternion.GetRotationAngle = new_instancemethod(_gp.gp_Quaternion_GetRotationAngle,None,gp_Quaternion)
gp_Quaternion.Multiply = new_instancemethod(_gp.gp_Quaternion_Multiply,None,gp_Quaternion)
gp_Quaternion.__mul__ = new_instancemethod(_gp.gp_Quaternion___mul__,None,gp_Quaternion)
gp_Quaternion._kill_pointed = new_instancemethod(_gp.gp_Quaternion__kill_pointed,None,gp_Quaternion)
gp_Quaternion_swigregister = _gp.gp_Quaternion_swigregister
gp_Quaternion_swigregister(gp_Quaternion)

class gp_QuaternionNLerp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        _gp.gp_QuaternionNLerp_swiginit(self,_gp.new_gp_QuaternionNLerp(*args))
    def Init(self, *args):
        """
        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_QuaternionNLerp_Init(self, *args)

    def InitFromUnit(self, *args):
        """
        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_QuaternionNLerp_InitFromUnit(self, *args)

    def Interpolate(*args):
        """
        * Set interpolated quaternion for theT position (from 0.0 to 1.0)

        :param theT:
        :type theT: float
        :param theResultQ:
        :type theResultQ: gp_Quaternion
        :rtype: None

        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :param theT:
        :type theT: float
        :rtype: gp_Quaternion

        """
        return _gp.gp_QuaternionNLerp_Interpolate(*args)

    Interpolate = staticmethod(Interpolate)
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_QuaternionNLerp.Init = new_instancemethod(_gp.gp_QuaternionNLerp_Init,None,gp_QuaternionNLerp)
gp_QuaternionNLerp.InitFromUnit = new_instancemethod(_gp.gp_QuaternionNLerp_InitFromUnit,None,gp_QuaternionNLerp)
gp_QuaternionNLerp._kill_pointed = new_instancemethod(_gp.gp_QuaternionNLerp__kill_pointed,None,gp_QuaternionNLerp)
gp_QuaternionNLerp_swigregister = _gp.gp_QuaternionNLerp_swigregister
gp_QuaternionNLerp_swigregister(gp_QuaternionNLerp)

def gp_QuaternionNLerp_Interpolate(*args):
  """
    * Set interpolated quaternion for theT position (from 0.0 to 1.0)

    :param theT:
    :type theT: float
    :param theResultQ:
    :type theResultQ: gp_Quaternion
    :rtype: None

    :param theQStart:
    :type theQStart: gp_Quaternion
    :param theQEnd:
    :type theQEnd: gp_Quaternion
    :param theT:
    :type theT: float
    :rtype: gp_Quaternion

    """
  return _gp.gp_QuaternionNLerp_Interpolate(*args)

class gp_QuaternionSLerp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        _gp.gp_QuaternionSLerp_swiginit(self,_gp.new_gp_QuaternionSLerp(*args))
    def Init(self, *args):
        """
        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_QuaternionSLerp_Init(self, *args)

    def InitFromUnit(self, *args):
        """
        :param theQStart:
        :type theQStart: gp_Quaternion
        :param theQEnd:
        :type theQEnd: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_QuaternionSLerp_InitFromUnit(self, *args)

    def Interpolate(self, *args):
        """
        * Set interpolated quaternion for theT position (from 0.0 to 1.0)

        :param theT:
        :type theT: float
        :param theResultQ:
        :type theResultQ: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_QuaternionSLerp_Interpolate(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_QuaternionSLerp.Init = new_instancemethod(_gp.gp_QuaternionSLerp_Init,None,gp_QuaternionSLerp)
gp_QuaternionSLerp.InitFromUnit = new_instancemethod(_gp.gp_QuaternionSLerp_InitFromUnit,None,gp_QuaternionSLerp)
gp_QuaternionSLerp.Interpolate = new_instancemethod(_gp.gp_QuaternionSLerp_Interpolate,None,gp_QuaternionSLerp)
gp_QuaternionSLerp._kill_pointed = new_instancemethod(_gp.gp_QuaternionSLerp__kill_pointed,None,gp_QuaternionSLerp)
gp_QuaternionSLerp_swigregister = _gp.gp_QuaternionSLerp_swigregister
gp_QuaternionSLerp_swigregister(gp_QuaternionSLerp)

class gp_Sphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an indefinite sphere.

        :rtype: None

        * Constructs a sphere with radius Radius, centered on the origin of A3. A3 is the local coordinate system of the sphere. Warnings : It is not forbidden to create a sphere with null radius. Raises ConstructionError if Radius < 0.0

        :param A3:
        :type A3: gp_Ax3
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _gp.gp_Sphere_swiginit(self,_gp.new_gp_Sphere(*args))
    def SetLocation(self, *args):
        """
        * Changes the center of the sphere.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Sphere_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinate system of the sphere.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Sphere_SetPosition(self, *args)

    def SetRadius(self, *args):
        """
        * Assigns R the radius of the Sphere. Warnings : It is not forbidden to create a sphere with null radius. Raises ConstructionError if R < 0.0

        :param R:
        :type R: float
        :rtype: None

        """
        return _gp.gp_Sphere_SetRadius(self, *args)

    def Area(self, *args):
        """
        * Computes the aera of the sphere.

        :rtype: float

        """
        return _gp.gp_Sphere_Area(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinates system : A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float
        :param A2:
        :type A2: float
        :param A3:
        :type A3: float
        :param B1:
        :type B1: float
        :param B2:
        :type B2: float
        :param B3:
        :type B3: float
        :param C1:
        :type C1: float
        :param C2:
        :type C2: float
        :param C3:
        :type C3: float
        :param D:
        :type D: float
        :rtype: None

        """
        return _gp.gp_Sphere_Coefficients(self, *args)

    def UReverse(self, *args):
        """
        * Reverses the U parametrization of the sphere reversing the YAxis.

        :rtype: None

        """
        return _gp.gp_Sphere_UReverse(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V parametrization of the sphere reversing the ZAxis.

        :rtype: None

        """
        return _gp.gp_Sphere_VReverse(self, *args)

    def Direct(self, *args):
        """
        * Returns true if the local coordinate system of this sphere is right-handed.

        :rtype: bool

        """
        return _gp.gp_Sphere_Direct(self, *args)

    def Location(self, *args):
        """
        * //!--- Purpose ; Returns the center of the sphere.

        :rtype: gp_Pnt

        """
        return _gp.gp_Sphere_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinates system of the sphere.

        :rtype: gp_Ax3

        """
        return _gp.gp_Sphere_Position(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius of the sphere.

        :rtype: float

        """
        return _gp.gp_Sphere_Radius(self, *args)

    def Volume(self, *args):
        """
        * Computes the volume of the sphere

        :rtype: float

        """
        return _gp.gp_Sphere_Volume(self, *args)

    def XAxis(self, *args):
        """
        * Returns the axis X of the sphere.

        :rtype: gp_Ax1

        """
        return _gp.gp_Sphere_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the axis Y of the sphere.

        :rtype: gp_Ax1

        """
        return _gp.gp_Sphere_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Sphere_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a sphere with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Sphere

        * Performs the symmetrical transformation of a sphere with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Sphere

        * Performs the symmetrical transformation of a sphere with respect to a plane. The axis placement A2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Sphere

        """
        return _gp.gp_Sphere_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Sphere_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a sphere. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Sphere

        """
        return _gp.gp_Sphere_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Sphere_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a sphere. S is the scaling value. The absolute value of S is used to scale the sphere

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Sphere

        """
        return _gp.gp_Sphere_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Sphere_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a sphere with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Sphere

        """
        return _gp.gp_Sphere_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Sphere_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a sphere in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Sphere

        * Translates a sphere from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Sphere

        """
        return _gp.gp_Sphere_Translated(self, *args)

    def _CSFDB_Getgp_Spherepos(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _gp.gp_Sphere__CSFDB_Getgp_Spherepos(self, *args)

    def _CSFDB_Getgp_Sphereradius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Sphere__CSFDB_Getgp_Sphereradius(self, *args)

    def _CSFDB_Setgp_Sphereradius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Sphere__CSFDB_Setgp_Sphereradius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Sphere.SetLocation = new_instancemethod(_gp.gp_Sphere_SetLocation,None,gp_Sphere)
gp_Sphere.SetPosition = new_instancemethod(_gp.gp_Sphere_SetPosition,None,gp_Sphere)
gp_Sphere.SetRadius = new_instancemethod(_gp.gp_Sphere_SetRadius,None,gp_Sphere)
gp_Sphere.Area = new_instancemethod(_gp.gp_Sphere_Area,None,gp_Sphere)
gp_Sphere.Coefficients = new_instancemethod(_gp.gp_Sphere_Coefficients,None,gp_Sphere)
gp_Sphere.UReverse = new_instancemethod(_gp.gp_Sphere_UReverse,None,gp_Sphere)
gp_Sphere.VReverse = new_instancemethod(_gp.gp_Sphere_VReverse,None,gp_Sphere)
gp_Sphere.Direct = new_instancemethod(_gp.gp_Sphere_Direct,None,gp_Sphere)
gp_Sphere.Location = new_instancemethod(_gp.gp_Sphere_Location,None,gp_Sphere)
gp_Sphere.Position = new_instancemethod(_gp.gp_Sphere_Position,None,gp_Sphere)
gp_Sphere.Radius = new_instancemethod(_gp.gp_Sphere_Radius,None,gp_Sphere)
gp_Sphere.Volume = new_instancemethod(_gp.gp_Sphere_Volume,None,gp_Sphere)
gp_Sphere.XAxis = new_instancemethod(_gp.gp_Sphere_XAxis,None,gp_Sphere)
gp_Sphere.YAxis = new_instancemethod(_gp.gp_Sphere_YAxis,None,gp_Sphere)
gp_Sphere.Mirror = new_instancemethod(_gp.gp_Sphere_Mirror,None,gp_Sphere)
gp_Sphere.Mirrored = new_instancemethod(_gp.gp_Sphere_Mirrored,None,gp_Sphere)
gp_Sphere.Rotate = new_instancemethod(_gp.gp_Sphere_Rotate,None,gp_Sphere)
gp_Sphere.Rotated = new_instancemethod(_gp.gp_Sphere_Rotated,None,gp_Sphere)
gp_Sphere.Scale = new_instancemethod(_gp.gp_Sphere_Scale,None,gp_Sphere)
gp_Sphere.Scaled = new_instancemethod(_gp.gp_Sphere_Scaled,None,gp_Sphere)
gp_Sphere.Transform = new_instancemethod(_gp.gp_Sphere_Transform,None,gp_Sphere)
gp_Sphere.Transformed = new_instancemethod(_gp.gp_Sphere_Transformed,None,gp_Sphere)
gp_Sphere.Translate = new_instancemethod(_gp.gp_Sphere_Translate,None,gp_Sphere)
gp_Sphere.Translated = new_instancemethod(_gp.gp_Sphere_Translated,None,gp_Sphere)
gp_Sphere._CSFDB_Getgp_Spherepos = new_instancemethod(_gp.gp_Sphere__CSFDB_Getgp_Spherepos,None,gp_Sphere)
gp_Sphere._CSFDB_Getgp_Sphereradius = new_instancemethod(_gp.gp_Sphere__CSFDB_Getgp_Sphereradius,None,gp_Sphere)
gp_Sphere._CSFDB_Setgp_Sphereradius = new_instancemethod(_gp.gp_Sphere__CSFDB_Setgp_Sphereradius,None,gp_Sphere)
gp_Sphere._kill_pointed = new_instancemethod(_gp.gp_Sphere__kill_pointed,None,gp_Sphere)
gp_Sphere_swigregister = _gp.gp_Sphere_swigregister
gp_Sphere_swigregister(gp_Sphere)

class gp_Torus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * creates an indefinite Torus.

        :rtype: None

        * a torus centered on the origin of coordinate system A3, with major radius MajorRadius and minor radius MinorRadius, and with the reference plane defined by the origin, the 'X Direction' and the 'Y Direction' of A3. Warnings : It is not forbidden to create a torus with MajorRadius = MinorRadius = 0.0 Raises ConstructionError if MinorRadius < 0.0 or if MajorRadius < 0.0

        :param A3:
        :type A3: gp_Ax3
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _gp.gp_Torus_swiginit(self,_gp.new_gp_Torus(*args))
    def SetAxis(self, *args):
        """
        * Modifies this torus, by redefining its local coordinate system so that: - its origin and 'main Direction' become those of the axis A1 (the 'X Direction' and 'Y Direction' are then recomputed). Raises ConstructionError if the direction of A1 is parallel to the 'XDirection' of the coordinate system of the toroidal surface.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _gp.gp_Torus_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location of the torus.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Torus_SetLocation(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Assigns value to the major radius of this torus. Raises ConstructionError if MajorRadius - MinorRadius <= Resolution()

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _gp.gp_Torus_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Assigns value to the minor radius of this torus. Raises ConstructionError if MinorRadius < 0.0 or if MajorRadius - MinorRadius <= Resolution from gp.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _gp.gp_Torus_SetMinorRadius(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinate system of the surface.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Torus_SetPosition(self, *args)

    def Area(self, *args):
        """
        * Computes the area of the torus.

        :rtype: float

        """
        return _gp.gp_Torus_Area(self, *args)

    def UReverse(self, *args):
        """
        * Reverses the U parametrization of the torus reversing the YAxis.

        :rtype: None

        """
        return _gp.gp_Torus_UReverse(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V parametrization of the torus reversing the ZAxis.

        :rtype: None

        """
        return _gp.gp_Torus_VReverse(self, *args)

    def Direct(self, *args):
        """
        * returns true if the Ax3, the local coordinate system of this torus, is right handed.

        :rtype: bool

        """
        return _gp.gp_Torus_Direct(self, *args)

    def Axis(self, *args):
        """
        * returns the symmetry axis of the torus.

        :rtype: gp_Ax1

        """
        return _gp.gp_Torus_Axis(self, *args)

    def Location(self, *args):
        """
        * Returns the Torus's location.

        :rtype: gp_Pnt

        """
        return _gp.gp_Torus_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinates system of the torus.

        :rtype: gp_Ax3

        """
        return _gp.gp_Torus_Position(self, *args)

    def MajorRadius(self, *args):
        """
        * returns the major radius of the torus.

        :rtype: float

        """
        return _gp.gp_Torus_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * returns the minor radius of the torus.

        :rtype: float

        """
        return _gp.gp_Torus_MinorRadius(self, *args)

    def Volume(self, *args):
        """
        * Computes the volume of the torus.

        :rtype: float

        """
        return _gp.gp_Torus_Volume(self, *args)

    def XAxis(self, *args):
        """
        * returns the axis X of the torus.

        :rtype: gp_Ax1

        """
        return _gp.gp_Torus_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * returns the axis Y of the torus.

        :rtype: gp_Ax1

        """
        return _gp.gp_Torus_YAxis(self, *args)

    def Mirror(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Torus_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a torus with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: gp_Torus

        * Performs the symmetrical transformation of a torus with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Torus

        * Performs the symmetrical transformation of a torus with respect to a plane. The axis placement A2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Torus

        """
        return _gp.gp_Torus_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Torus_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a torus. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Torus

        """
        return _gp.gp_Torus_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Torus_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a torus. S is the scaling value. The absolute value of S is used to scale the torus

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: gp_Torus

        """
        return _gp.gp_Torus_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Torus_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a torus with the transformation T from class Trsf.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Torus

        """
        return _gp.gp_Torus_Transformed(self, *args)

    def Translate(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Torus_Translate(self, *args)

    def Translated(self, *args):
        """
        * Translates a torus in the direction of the vector V. The magnitude of the translation is the vector's magnitude.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Torus

        * Translates a torus from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: gp_Torus

        """
        return _gp.gp_Torus_Translated(self, *args)

    def _CSFDB_Getgp_Toruspos(self, *args):
        """
        :rtype: gp_Ax3

        """
        return _gp.gp_Torus__CSFDB_Getgp_Toruspos(self, *args)

    def _CSFDB_Getgp_TorusmajorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Torus__CSFDB_Getgp_TorusmajorRadius(self, *args)

    def _CSFDB_Setgp_TorusmajorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Torus__CSFDB_Setgp_TorusmajorRadius(self, *args)

    def _CSFDB_Getgp_TorusminorRadius(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Torus__CSFDB_Getgp_TorusminorRadius(self, *args)

    def _CSFDB_Setgp_TorusminorRadius(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Torus__CSFDB_Setgp_TorusminorRadius(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Torus.SetAxis = new_instancemethod(_gp.gp_Torus_SetAxis,None,gp_Torus)
gp_Torus.SetLocation = new_instancemethod(_gp.gp_Torus_SetLocation,None,gp_Torus)
gp_Torus.SetMajorRadius = new_instancemethod(_gp.gp_Torus_SetMajorRadius,None,gp_Torus)
gp_Torus.SetMinorRadius = new_instancemethod(_gp.gp_Torus_SetMinorRadius,None,gp_Torus)
gp_Torus.SetPosition = new_instancemethod(_gp.gp_Torus_SetPosition,None,gp_Torus)
gp_Torus.Area = new_instancemethod(_gp.gp_Torus_Area,None,gp_Torus)
gp_Torus.UReverse = new_instancemethod(_gp.gp_Torus_UReverse,None,gp_Torus)
gp_Torus.VReverse = new_instancemethod(_gp.gp_Torus_VReverse,None,gp_Torus)
gp_Torus.Direct = new_instancemethod(_gp.gp_Torus_Direct,None,gp_Torus)
gp_Torus.Axis = new_instancemethod(_gp.gp_Torus_Axis,None,gp_Torus)
gp_Torus.Location = new_instancemethod(_gp.gp_Torus_Location,None,gp_Torus)
gp_Torus.Position = new_instancemethod(_gp.gp_Torus_Position,None,gp_Torus)
gp_Torus.MajorRadius = new_instancemethod(_gp.gp_Torus_MajorRadius,None,gp_Torus)
gp_Torus.MinorRadius = new_instancemethod(_gp.gp_Torus_MinorRadius,None,gp_Torus)
gp_Torus.Volume = new_instancemethod(_gp.gp_Torus_Volume,None,gp_Torus)
gp_Torus.XAxis = new_instancemethod(_gp.gp_Torus_XAxis,None,gp_Torus)
gp_Torus.YAxis = new_instancemethod(_gp.gp_Torus_YAxis,None,gp_Torus)
gp_Torus.Mirror = new_instancemethod(_gp.gp_Torus_Mirror,None,gp_Torus)
gp_Torus.Mirrored = new_instancemethod(_gp.gp_Torus_Mirrored,None,gp_Torus)
gp_Torus.Rotate = new_instancemethod(_gp.gp_Torus_Rotate,None,gp_Torus)
gp_Torus.Rotated = new_instancemethod(_gp.gp_Torus_Rotated,None,gp_Torus)
gp_Torus.Scale = new_instancemethod(_gp.gp_Torus_Scale,None,gp_Torus)
gp_Torus.Scaled = new_instancemethod(_gp.gp_Torus_Scaled,None,gp_Torus)
gp_Torus.Transform = new_instancemethod(_gp.gp_Torus_Transform,None,gp_Torus)
gp_Torus.Transformed = new_instancemethod(_gp.gp_Torus_Transformed,None,gp_Torus)
gp_Torus.Translate = new_instancemethod(_gp.gp_Torus_Translate,None,gp_Torus)
gp_Torus.Translated = new_instancemethod(_gp.gp_Torus_Translated,None,gp_Torus)
gp_Torus._CSFDB_Getgp_Toruspos = new_instancemethod(_gp.gp_Torus__CSFDB_Getgp_Toruspos,None,gp_Torus)
gp_Torus._CSFDB_Getgp_TorusmajorRadius = new_instancemethod(_gp.gp_Torus__CSFDB_Getgp_TorusmajorRadius,None,gp_Torus)
gp_Torus._CSFDB_Setgp_TorusmajorRadius = new_instancemethod(_gp.gp_Torus__CSFDB_Setgp_TorusmajorRadius,None,gp_Torus)
gp_Torus._CSFDB_Getgp_TorusminorRadius = new_instancemethod(_gp.gp_Torus__CSFDB_Getgp_TorusminorRadius,None,gp_Torus)
gp_Torus._CSFDB_Setgp_TorusminorRadius = new_instancemethod(_gp.gp_Torus__CSFDB_Setgp_TorusminorRadius,None,gp_Torus)
gp_Torus._kill_pointed = new_instancemethod(_gp.gp_Torus__kill_pointed,None,gp_Torus)
gp_Torus_swigregister = _gp.gp_Torus_swigregister
gp_Torus_swigregister(gp_Torus)

class gp_Trsf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns the identity transformation.

        :rtype: None

        * Creates a 3D transformation from the 2D transformation T. The resulting transformation has a homogeneous vectorial part, V3, and a translation part, T3, built from T: a11 a12 0 a13 V3 = a21 a22 0 T3 = a23 0 0 1. 0 It also has the same scale factor as T. This guarantees (by projection) that the transformation which would be performed by T in a plane (2D space) is performed by the resulting transformation in the xOy plane of the 3D space, (i.e. in the plane defined by the origin (0., 0., 0.) and the vectors DX (1., 0., 0.), and DY (0., 1., 0.)). The scale factor is applied to the entire space.

        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        _gp.gp_Trsf_swiginit(self,_gp.new_gp_Trsf(*args))
    def SetMirror(self, *args):
        """
        * Makes the transformation into a symmetrical transformation. P is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Makes the transformation into a symmetrical transformation. A1 is the center of the axial symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Makes the transformation into a symmetrical transformation. A2 is the center of the planar symmetry and defines the plane of symmetry by its origin, 'X Direction' and 'Y Direction'.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Trsf_SetMirror(self, *args)

    def SetRotation(self, *args):
        """
        * Changes the transformation into a rotation. A1 is the rotation axis and Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        * Changes the transformation into a rotation defined by quaternion. Note that rotation is performed around origin, i.e. no translation is involved.

        :param R:
        :type R: gp_Quaternion
        :rtype: None

        """
        return _gp.gp_Trsf_SetRotation(self, *args)

    def SetScale(self, *args):
        """
        * Changes the transformation into a scale. P is the center of the scale and S is the scaling value. Raises ConstructionError If <S> is null.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Trsf_SetScale(self, *args)

    def SetDisplacement(self, *args):
        """
        * Modifies this transformation so that it transforms the coordinate system defined by FromSystem1 into the one defined by ToSystem2. After this modification, this transformation transforms: - the origin of FromSystem1 into the origin of ToSystem2, - the 'X Direction' of FromSystem1 into the 'X Direction' of ToSystem2, - the 'Y Direction' of FromSystem1 into the 'Y Direction' of ToSystem2, and - the 'main Direction' of FromSystem1 into the 'main Direction' of ToSystem2. Warning When you know the coordinates of a point in one coordinate system and you want to express these coordinates in another one, do not use the transformation resulting from this function. Use the transformation that results from SetTransformation instead. SetDisplacement and SetTransformation create related transformations: the vectorial part of one is the inverse of the vectorial part of the other.

        :param FromSystem1:
        :type FromSystem1: gp_Ax3
        :param ToSystem2:
        :type ToSystem2: gp_Ax3
        :rtype: None

        """
        return _gp.gp_Trsf_SetDisplacement(self, *args)

    def SetTransformation(self, *args):
        """
        * Modifies this transformation so that it transforms the coordinates of any point, (x, y, z), relative to a source coordinate system into the coordinates (x', y', z') which are relative to a target coordinate system, but which represent the same point The transformation is from the coordinate system 'FromSystem1' to the coordinate system 'ToSystem2'. Example : In a C++ implementation : Real x1, y1, z1; // are the coordinates of a point in the  // local system FromSystem1 Real x2, y2, z2; // are the coordinates of a point in the  // local system ToSystem2 gp_Pnt P1 (x1, y1, z1) Trsf T; T.SetTransformation (FromSystem1, ToSystem2); gp_Pnt P2 = P1.Transformed (T); P2.Coord (x2, y2, z2);

        :param FromSystem1:
        :type FromSystem1: gp_Ax3
        :param ToSystem2:
        :type ToSystem2: gp_Ax3
        :rtype: None

        * Modifies this transformation so that it transforms the coordinates of any point, (x, y, z), relative to a source coordinate system into the coordinates (x', y', z') which are relative to a target coordinate system, but which represent the same point The transformation is from the default coordinate system {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.), VZ (0., 0. ,1.) } to the local coordinate system defined with the Ax3 ToSystem. Use in the same way as the previous method. FromSystem1 is defaulted to the absolute coordinate system.

        :param ToSystem:
        :type ToSystem: gp_Ax3
        :rtype: None

        * Sets transformation by directly specified rotation and translation.

        :param R:
        :type R: gp_Quaternion
        :param T:
        :type T: gp_Vec
        :rtype: None

        """
        return _gp.gp_Trsf_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        """
        * Changes the transformation into a translation. V is the vector of the translation.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Makes the transformation into a translation where the translation vector is the vector (P1, P2) defined from point P1 to point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _gp.gp_Trsf_SetTranslation(self, *args)

    def SetTranslationPart(self, *args):
        """
        * Replaces the translation vector with the vector V.

        :param V:
        :type V: gp_Vec
        :rtype: None

        """
        return _gp.gp_Trsf_SetTranslationPart(self, *args)

    def SetScaleFactor(self, *args):
        """
        * Modifies the scale factor. Raises ConstructionError If S is null.

        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Trsf_SetScaleFactor(self, *args)

    def SetValues(self, *args):
        """
        * Sets the coefficients of the transformation. The transformation of the point x,y,z is the point x',y',z' with :  x' = a11 x + a12 y + a13 z + a14 y' = a21 x + a22 y + a23 z + a24 z' = a31 x + a32 y + a43 z + a34  Tolang and TolDist are used to test for null angles and null distances to determine the form of the transformation (identity, translation, etc..).  The method Value(i,j) will return aij. Raises ConstructionError if the determinant of the aij is null. Or if the matrix as not a uniform scale.

        :param a11:
        :type a11: float
        :param a12:
        :type a12: float
        :param a13:
        :type a13: float
        :param a14:
        :type a14: float
        :param a21:
        :type a21: float
        :param a22:
        :type a22: float
        :param a23:
        :type a23: float
        :param a24:
        :type a24: float
        :param a31:
        :type a31: float
        :param a32:
        :type a32: float
        :param a33:
        :type a33: float
        :param a34:
        :type a34: float
        :param Tolang:
        :type Tolang: float
        :param TolDist:
        :type TolDist: float
        :rtype: None

        """
        return _gp.gp_Trsf_SetValues(self, *args)

    def IsNegative(self, *args):
        """
        * Returns true if the determinant of the vectorial part of this transformation is negative.

        :rtype: bool

        """
        return _gp.gp_Trsf_IsNegative(self, *args)

    def Form(self, *args):
        """
        * Returns the nature of the transformation. It can be: an identity transformation, a rotation, a translation, a mirror transformation (relative to a point, an axis or a plane), a scaling transformation, or a compound transformation.

        :rtype: gp_TrsfForm

        """
        return _gp.gp_Trsf_Form(self, *args)

    def ScaleFactor(self, *args):
        """
        * Returns the scale factor.

        :rtype: float

        """
        return _gp.gp_Trsf_ScaleFactor(self, *args)

    def TranslationPart(self, *args):
        """
        * Returns the translation part of the transformation's matrix

        :rtype: gp_XYZ

        """
        return _gp.gp_Trsf_TranslationPart(self, *args)

    def GetRotation(self, *args):
        """
        * Returns the boolean True if there is non-zero rotation. In the presence of rotation, the output parameters store the axis and the angle of rotation. The method always returns positive value 'theAngle', i.e., 0. < theAngle <= PI. Note that this rotation is defined only by the vectorial part of the transformation; generally you would need to check also the translational part to obtain the axis (gp_Ax1) of rotation.

        :param theAxis:
        :type theAxis: gp_XYZ
        :param theAngle:
        :type theAngle: float
        :rtype: bool

        * Returns quaternion representing rotational part of the transformation.

        :rtype: gp_Quaternion

        """
        return _gp.gp_Trsf_GetRotation(self, *args)

    def VectorialPart(self, *args):
        """
        * Returns the vectorial part of the transformation. It is a 3*3 matrix which includes the scale factor.

        :rtype: gp_Mat

        """
        return _gp.gp_Trsf_VectorialPart(self, *args)

    def HVectorialPart(self, *args):
        """
        * Computes the homogeneous vectorial part of the transformation. It is a 3*3 matrix which doesn't include the scale factor. In other words, the vectorial part of this transformation is equal to its homogeneous vectorial part, multiplied by the scale factor. The coefficients of this matrix must be multiplied by the scale factor to obtain the coefficients of the transformation.

        :rtype: gp_Mat

        """
        return _gp.gp_Trsf_HVectorialPart(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficients of the transformation's matrix. It is a 3 rows * 4 columns matrix. This coefficient includes the scale factor. Raises OutOfRanged if Row < 1 or Row > 3 or Col < 1 or Col > 4

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Trsf_Value(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Trsf_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Computes the reverse transformation Raises an exception if the matrix of the transformation is not inversible, it means that the scale factor is lower or equal to Resolution from package gp. Computes the transformation composed with T and <self>. In a C++ implementation you can also write Tcomposed = <self> * T. Example : Trsf T1, T2, Tcomp; ............... Tcomp = T2.Multiplied(T1); // or (Tcomp = T2 * T1) Pnt P1(10.,3.,4.); Pnt P2 = P1.Transformed(Tcomp); //using Tcomp Pnt P3 = P1.Transformed(T1); //using T1 then T2 P3.Transform(T2); // P3 = P2 !!!

        :rtype: gp_Trsf

        """
        return _gp.gp_Trsf_Inverted(self, *args)

    def Multiplied(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: gp_Trsf

        """
        return _gp.gp_Trsf_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: gp_Trsf

        """
        return _gp.gp_Trsf___mul__(self, *args)

    def Multiply(self, *args):
        """
        * Computes the transformation composed with T and <self>. In a C++ implementation you can also write Tcomposed = <self> * T. Example : Trsf T1, T2, Tcomp; ............... //composition : Tcomp = T2.Multiplied(T1); // or (Tcomp = T2 * T1) // transformation of a point Pnt P1(10.,3.,4.); Pnt P2 = P1.Transformed(Tcomp); //using Tcomp Pnt P3 = P1.Transformed(T1); //using T1 then T2 P3.Transform(T2); // P3 = P2 !!! Computes the transformation composed with <self> and T. <self> = T * <self>

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Trsf_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Trsf___imul__(self, *args)

    def PreMultiply(self, *args):
        """
        * Computes the transformation composed with <self> and T. <self> = T * <self>

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Trsf_PreMultiply(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_Trsf_Power(self, *args)

    def Powered(self, *args):
        """
        * Computes the following composition of transformations <self> * <self> * .......* <self>, N time. if N = 0 <self> = Identity if N < 0 <self> = <self>.Inverse() *...........* <self>.Inverse(). Raises if N < 0 and if the matrix of the transformation not inversible.

        :param N:
        :type N: int
        :rtype: gp_Trsf

        """
        return _gp.gp_Trsf_Powered(self, *args)

    def Transforms(self, *args):
        """
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        * Transformation of a triplet XYZ with a Trsf

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Trsf_Transforms(self, *args)

    def _CSFDB_Getgp_Trsfscale(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Trsf__CSFDB_Getgp_Trsfscale(self, *args)

    def _CSFDB_Setgp_Trsfscale(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Trsf__CSFDB_Setgp_Trsfscale(self, *args)

    def _CSFDB_Getgp_Trsfshape(self, *args):
        """
        :rtype: gp_TrsfForm

        """
        return _gp.gp_Trsf__CSFDB_Getgp_Trsfshape(self, *args)

    def _CSFDB_Setgp_Trsfshape(self, *args):
        """
        :param p:
        :type p: gp_TrsfForm
        :rtype: None

        """
        return _gp.gp_Trsf__CSFDB_Setgp_Trsfshape(self, *args)

    def _CSFDB_Getgp_Trsfmatrix(self, *args):
        """
        :rtype: gp_Mat

        """
        return _gp.gp_Trsf__CSFDB_Getgp_Trsfmatrix(self, *args)

    def _CSFDB_Getgp_Trsfloc(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _gp.gp_Trsf__CSFDB_Getgp_Trsfloc(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Trsf.SetMirror = new_instancemethod(_gp.gp_Trsf_SetMirror,None,gp_Trsf)
gp_Trsf.SetRotation = new_instancemethod(_gp.gp_Trsf_SetRotation,None,gp_Trsf)
gp_Trsf.SetScale = new_instancemethod(_gp.gp_Trsf_SetScale,None,gp_Trsf)
gp_Trsf.SetDisplacement = new_instancemethod(_gp.gp_Trsf_SetDisplacement,None,gp_Trsf)
gp_Trsf.SetTransformation = new_instancemethod(_gp.gp_Trsf_SetTransformation,None,gp_Trsf)
gp_Trsf.SetTranslation = new_instancemethod(_gp.gp_Trsf_SetTranslation,None,gp_Trsf)
gp_Trsf.SetTranslationPart = new_instancemethod(_gp.gp_Trsf_SetTranslationPart,None,gp_Trsf)
gp_Trsf.SetScaleFactor = new_instancemethod(_gp.gp_Trsf_SetScaleFactor,None,gp_Trsf)
gp_Trsf.SetValues = new_instancemethod(_gp.gp_Trsf_SetValues,None,gp_Trsf)
gp_Trsf.IsNegative = new_instancemethod(_gp.gp_Trsf_IsNegative,None,gp_Trsf)
gp_Trsf.Form = new_instancemethod(_gp.gp_Trsf_Form,None,gp_Trsf)
gp_Trsf.ScaleFactor = new_instancemethod(_gp.gp_Trsf_ScaleFactor,None,gp_Trsf)
gp_Trsf.TranslationPart = new_instancemethod(_gp.gp_Trsf_TranslationPart,None,gp_Trsf)
gp_Trsf.GetRotation = new_instancemethod(_gp.gp_Trsf_GetRotation,None,gp_Trsf)
gp_Trsf.VectorialPart = new_instancemethod(_gp.gp_Trsf_VectorialPart,None,gp_Trsf)
gp_Trsf.HVectorialPart = new_instancemethod(_gp.gp_Trsf_HVectorialPart,None,gp_Trsf)
gp_Trsf.Value = new_instancemethod(_gp.gp_Trsf_Value,None,gp_Trsf)
gp_Trsf.Invert = new_instancemethod(_gp.gp_Trsf_Invert,None,gp_Trsf)
gp_Trsf.Inverted = new_instancemethod(_gp.gp_Trsf_Inverted,None,gp_Trsf)
gp_Trsf.Multiplied = new_instancemethod(_gp.gp_Trsf_Multiplied,None,gp_Trsf)
gp_Trsf.__mul__ = new_instancemethod(_gp.gp_Trsf___mul__,None,gp_Trsf)
gp_Trsf.Multiply = new_instancemethod(_gp.gp_Trsf_Multiply,None,gp_Trsf)
gp_Trsf.__imul__ = new_instancemethod(_gp.gp_Trsf___imul__,None,gp_Trsf)
gp_Trsf.PreMultiply = new_instancemethod(_gp.gp_Trsf_PreMultiply,None,gp_Trsf)
gp_Trsf.Power = new_instancemethod(_gp.gp_Trsf_Power,None,gp_Trsf)
gp_Trsf.Powered = new_instancemethod(_gp.gp_Trsf_Powered,None,gp_Trsf)
gp_Trsf.Transforms = new_instancemethod(_gp.gp_Trsf_Transforms,None,gp_Trsf)
gp_Trsf._CSFDB_Getgp_Trsfscale = new_instancemethod(_gp.gp_Trsf__CSFDB_Getgp_Trsfscale,None,gp_Trsf)
gp_Trsf._CSFDB_Setgp_Trsfscale = new_instancemethod(_gp.gp_Trsf__CSFDB_Setgp_Trsfscale,None,gp_Trsf)
gp_Trsf._CSFDB_Getgp_Trsfshape = new_instancemethod(_gp.gp_Trsf__CSFDB_Getgp_Trsfshape,None,gp_Trsf)
gp_Trsf._CSFDB_Setgp_Trsfshape = new_instancemethod(_gp.gp_Trsf__CSFDB_Setgp_Trsfshape,None,gp_Trsf)
gp_Trsf._CSFDB_Getgp_Trsfmatrix = new_instancemethod(_gp.gp_Trsf__CSFDB_Getgp_Trsfmatrix,None,gp_Trsf)
gp_Trsf._CSFDB_Getgp_Trsfloc = new_instancemethod(_gp.gp_Trsf__CSFDB_Getgp_Trsfloc,None,gp_Trsf)
gp_Trsf._kill_pointed = new_instancemethod(_gp.gp_Trsf__kill_pointed,None,gp_Trsf)
gp_Trsf_swigregister = _gp.gp_Trsf_swigregister
gp_Trsf_swigregister(gp_Trsf)

class gp_Trsf2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns identity transformation.

        :rtype: None

        * Creates a 2d transformation in the XY plane from a 3d transformation .

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        _gp.gp_Trsf2d_swiginit(self,_gp.new_gp_Trsf2d(*args))
    def SetMirror(self, *args):
        """
        * Changes the transformation into a symmetrical transformation. P is the center of the symmetry.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        * Changes the transformation into a symmetrical transformation. A is the center of the axial symmetry.

        :param A:
        :type A: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetMirror(self, *args)

    def SetRotation(self, *args):
        """
        * Changes the transformation into a rotation. P is the rotation's center and Ang is the angular value of the rotation in radian.

        :param P:
        :type P: gp_Pnt2d
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetRotation(self, *args)

    def SetScale(self, *args):
        """
        * Changes the transformation into a scale. P is the center of the scale and S is the scaling value.

        :param P:
        :type P: gp_Pnt2d
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetScale(self, *args)

    def SetTransformation(self, *args):
        """
        * Changes a transformation allowing passage from the coordinate system 'FromSystem1' to the coordinate system 'ToSystem2'.

        :param FromSystem1:
        :type FromSystem1: gp_Ax2d
        :param ToSystem2:
        :type ToSystem2: gp_Ax2d
        :rtype: None

        * Changes the transformation allowing passage from the basic coordinate system {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.)} to the local coordinate system defined with the Ax2d ToSystem.

        :param ToSystem:
        :type ToSystem: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        """
        * Changes the transformation into a translation. V is the vector of the translation.

        :param V:
        :type V: gp_Vec2d
        :rtype: None

        * Makes the transformation into a translation from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetTranslation(self, *args)

    def SetTranslationPart(self, *args):
        """
        * Replaces the translation vector with V.

        :param V:
        :type V: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetTranslationPart(self, *args)

    def SetScaleFactor(self, *args):
        """
        * Modifies the scale factor.

        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Trsf2d_SetScaleFactor(self, *args)

    def IsNegative(self, *args):
        """
        * Returns true if the determinant of the vectorial part of this transformation is negative..

        :rtype: bool

        """
        return _gp.gp_Trsf2d_IsNegative(self, *args)

    def Form(self, *args):
        """
        * Returns the nature of the transformation. It can be an identity transformation, a rotation, a translation, a mirror (relative to a point or an axis), a scaling transformation, or a compound transformation.

        :rtype: gp_TrsfForm

        """
        return _gp.gp_Trsf2d_Form(self, *args)

    def ScaleFactor(self, *args):
        """
        * Returns the scale factor.

        :rtype: float

        """
        return _gp.gp_Trsf2d_ScaleFactor(self, *args)

    def TranslationPart(self, *args):
        """
        * Returns the translation part of the transformation's matrix

        :rtype: gp_XY

        """
        return _gp.gp_Trsf2d_TranslationPart(self, *args)

    def VectorialPart(self, *args):
        """
        * Returns the vectorial part of the transformation. It is a 2*2 matrix which includes the scale factor.

        :rtype: gp_Mat2d

        """
        return _gp.gp_Trsf2d_VectorialPart(self, *args)

    def HVectorialPart(self, *args):
        """
        * Returns the homogeneous vectorial part of the transformation. It is a 2*2 matrix which doesn't include the scale factor. The coefficients of this matrix must be multiplied by the scale factor to obtain the coefficients of the transformation.

        :rtype: gp_Mat2d

        """
        return _gp.gp_Trsf2d_HVectorialPart(self, *args)

    def RotationPart(self, *args):
        """
        * Returns the angle corresponding to the rotational component of the transformation matrix (operation opposite to SetRotation()).

        :rtype: float

        """
        return _gp.gp_Trsf2d_RotationPart(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficients of the transformation's matrix. It is a 2 rows * 3 columns matrix. Raises OutOfRange if Row < 1 or Row > 2 or Col < 1 or Col > 3

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _gp.gp_Trsf2d_Value(self, *args)

    def Invert(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Trsf2d_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Computes the reverse transformation. Raises an exception if the matrix of the transformation is not inversible, it means that the scale factor is lower or equal to Resolution from package gp.

        :rtype: gp_Trsf2d

        """
        return _gp.gp_Trsf2d_Inverted(self, *args)

    def Multiplied(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Trsf2d

        """
        return _gp.gp_Trsf2d_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Trsf2d

        """
        return _gp.gp_Trsf2d___mul__(self, *args)

    def Multiply(self, *args):
        """
        * Computes the transformation composed from <T> and <self>. In a C++ implementation you can also write Tcomposed = <self> * T. Example : Trsf2d T1, T2, Tcomp; ............... //composition : Tcomp = T2.Multiplied(T1); // or (Tcomp = T2 * T1) // transformation of a point Pnt2d P1(10.,3.,4.); Pnt2d P2 = P1.Transformed(Tcomp); //using Tcomp Pnt2d P3 = P1.Transformed(T1); //using T1 then T2 P3.Transform(T2); // P3 = P2 !!!

        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Trsf2d___imul__(self, *args)

    def PreMultiply(self, *args):
        """
        * Computes the transformation composed from <self> and T. <self> = T * <self>

        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Trsf2d_PreMultiply(self, *args)

    def Power(self, *args):
        """
        :param N:
        :type N: int
        :rtype: None

        """
        return _gp.gp_Trsf2d_Power(self, *args)

    def Powered(self, *args):
        """
        * Computes the following composition of transformations <self> * <self> * .......* <self>, N time. if N = 0 <self> = Identity if N < 0 <self> = <self>.Inverse() *...........* <self>.Inverse(). Raises if N < 0 and if the matrix of the transformation not inversible.

        :param N:
        :type N: int
        :rtype: gp_Trsf2d

        """
        return _gp.gp_Trsf2d_Powered(self, *args)

    def Transforms(self, *args):
        """
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        * Transforms a doublet XY with a Trsf2d

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        """
        return _gp.gp_Trsf2d_Transforms(self, *args)

    def _CSFDB_Getgp_Trsf2dscale(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dscale(self, *args)

    def _CSFDB_Setgp_Trsf2dscale(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_Trsf2d__CSFDB_Setgp_Trsf2dscale(self, *args)

    def _CSFDB_Getgp_Trsf2dshape(self, *args):
        """
        :rtype: gp_TrsfForm

        """
        return _gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dshape(self, *args)

    def _CSFDB_Setgp_Trsf2dshape(self, *args):
        """
        :param p:
        :type p: gp_TrsfForm
        :rtype: None

        """
        return _gp.gp_Trsf2d__CSFDB_Setgp_Trsf2dshape(self, *args)

    def _CSFDB_Getgp_Trsf2dmatrix(self, *args):
        """
        :rtype: gp_Mat2d

        """
        return _gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dmatrix(self, *args)

    def _CSFDB_Getgp_Trsf2dloc(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dloc(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Trsf2d.SetMirror = new_instancemethod(_gp.gp_Trsf2d_SetMirror,None,gp_Trsf2d)
gp_Trsf2d.SetRotation = new_instancemethod(_gp.gp_Trsf2d_SetRotation,None,gp_Trsf2d)
gp_Trsf2d.SetScale = new_instancemethod(_gp.gp_Trsf2d_SetScale,None,gp_Trsf2d)
gp_Trsf2d.SetTransformation = new_instancemethod(_gp.gp_Trsf2d_SetTransformation,None,gp_Trsf2d)
gp_Trsf2d.SetTranslation = new_instancemethod(_gp.gp_Trsf2d_SetTranslation,None,gp_Trsf2d)
gp_Trsf2d.SetTranslationPart = new_instancemethod(_gp.gp_Trsf2d_SetTranslationPart,None,gp_Trsf2d)
gp_Trsf2d.SetScaleFactor = new_instancemethod(_gp.gp_Trsf2d_SetScaleFactor,None,gp_Trsf2d)
gp_Trsf2d.IsNegative = new_instancemethod(_gp.gp_Trsf2d_IsNegative,None,gp_Trsf2d)
gp_Trsf2d.Form = new_instancemethod(_gp.gp_Trsf2d_Form,None,gp_Trsf2d)
gp_Trsf2d.ScaleFactor = new_instancemethod(_gp.gp_Trsf2d_ScaleFactor,None,gp_Trsf2d)
gp_Trsf2d.TranslationPart = new_instancemethod(_gp.gp_Trsf2d_TranslationPart,None,gp_Trsf2d)
gp_Trsf2d.VectorialPart = new_instancemethod(_gp.gp_Trsf2d_VectorialPart,None,gp_Trsf2d)
gp_Trsf2d.HVectorialPart = new_instancemethod(_gp.gp_Trsf2d_HVectorialPart,None,gp_Trsf2d)
gp_Trsf2d.RotationPart = new_instancemethod(_gp.gp_Trsf2d_RotationPart,None,gp_Trsf2d)
gp_Trsf2d.Value = new_instancemethod(_gp.gp_Trsf2d_Value,None,gp_Trsf2d)
gp_Trsf2d.Invert = new_instancemethod(_gp.gp_Trsf2d_Invert,None,gp_Trsf2d)
gp_Trsf2d.Inverted = new_instancemethod(_gp.gp_Trsf2d_Inverted,None,gp_Trsf2d)
gp_Trsf2d.Multiplied = new_instancemethod(_gp.gp_Trsf2d_Multiplied,None,gp_Trsf2d)
gp_Trsf2d.__mul__ = new_instancemethod(_gp.gp_Trsf2d___mul__,None,gp_Trsf2d)
gp_Trsf2d.Multiply = new_instancemethod(_gp.gp_Trsf2d_Multiply,None,gp_Trsf2d)
gp_Trsf2d.__imul__ = new_instancemethod(_gp.gp_Trsf2d___imul__,None,gp_Trsf2d)
gp_Trsf2d.PreMultiply = new_instancemethod(_gp.gp_Trsf2d_PreMultiply,None,gp_Trsf2d)
gp_Trsf2d.Power = new_instancemethod(_gp.gp_Trsf2d_Power,None,gp_Trsf2d)
gp_Trsf2d.Powered = new_instancemethod(_gp.gp_Trsf2d_Powered,None,gp_Trsf2d)
gp_Trsf2d.Transforms = new_instancemethod(_gp.gp_Trsf2d_Transforms,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Getgp_Trsf2dscale = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dscale,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Setgp_Trsf2dscale = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Setgp_Trsf2dscale,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Getgp_Trsf2dshape = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dshape,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Setgp_Trsf2dshape = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Setgp_Trsf2dshape,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Getgp_Trsf2dmatrix = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dmatrix,None,gp_Trsf2d)
gp_Trsf2d._CSFDB_Getgp_Trsf2dloc = new_instancemethod(_gp.gp_Trsf2d__CSFDB_Getgp_Trsf2dloc,None,gp_Trsf2d)
gp_Trsf2d._kill_pointed = new_instancemethod(_gp.gp_Trsf2d__kill_pointed,None,gp_Trsf2d)
gp_Trsf2d_swigregister = _gp.gp_Trsf2d_swigregister
gp_Trsf2d_swigregister(gp_Trsf2d)

class gp_Vec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a zero vector.

        :rtype: None

        * Creates a unitary vector from a direction V.

        :param V:
        :type V: gp_Dir
        :rtype: None

        * Creates a vector with a triplet of coordinates.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        * Creates a point with its three cartesian coordinates.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        * Creates a vector from two points. The length of the vector is the distance between P1 and P2

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _gp.gp_Vec_swiginit(self,_gp.new_gp_Vec(*args))
    def SetCoord(self, *args):
        """
        * Changes the coordinate of range Index Index = 1 => X is modified Index = 2 => Y is modified Index = 3 => Z is modified Raised if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this vector, assigns - the values Xv, Yv and Zv to its three coordinates.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        """
        return _gp.gp_Vec_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this vector.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Vec_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the X coordinate of this vector.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Vec_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Assigns the given value to the X coordinate of this vector.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_Vec_SetZ(self, *args)

    def SetXYZ(self, *args):
        """
        * Assigns the three coordinates of Coord to this vector.

        :param Coord:
        :type Coord: gp_XYZ
        :rtype: None

        """
        return _gp.gp_Vec_SetXYZ(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Index = 3 => Z is returned Raised if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this vector returns its three coordinates Xv, Yv, and Zvinline

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :param Zv:
        :type Zv: float
        :rtype: None

        """
        return _gp.gp_Vec_Coord(self, *args)

    def X(self, *args):
        """
        * For this vector, returns its X coordinate.

        :rtype: float

        """
        return _gp.gp_Vec_X(self, *args)

    def Y(self, *args):
        """
        * For this vector, returns its Y coordinate.

        :rtype: float

        """
        return _gp.gp_Vec_Y(self, *args)

    def Z(self, *args):
        """
        * For this vector, returns its Z coordinate.

        :rtype: float

        """
        return _gp.gp_Vec_Z(self, *args)

    def XYZ(self, *args):
        """
        * For this vector, returns - its three coordinates as a number triple

        :rtype: gp_XYZ

        """
        return _gp.gp_Vec_XYZ(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if the two vectors have the same magnitude value and the same direction. The precision values are LinearTolerance for the magnitude and AngularTolerance for the direction.

        :param Other:
        :type Other: gp_Vec
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec_IsEqual(self, *args)

    def IsNormal(self, *args):
        """
        * Returns True if abs(<self>.Angle(Other) - PI/2.) <= AngularTolerance Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp

        :param Other:
        :type Other: gp_Vec
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns True if PI - <self>.Angle(Other) <= AngularTolerance Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp

        :param Other:
        :type Other: gp_Vec
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * Returns True if Angle(<self>, Other) <= AngularTolerance or PI - Angle(<self>, Other) <= AngularTolerance This definition means that two parallel vectors cannot define a plane but two vectors with opposite directions are considered as parallel. Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp

        :param Other:
        :type Other: gp_Vec
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value between <self> and <Other> Returns the angle value between 0 and PI in radian. Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution from gp or Other.Magnitude() <= Resolution because the angular value is indefinite if one of the vectors has a null magnitude.

        :param Other:
        :type Other: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_Angle(self, *args)

    def AngleWithRef(self, *args):
        """
        * Computes the angle, in radians, between this vector and vector Other. The result is a value between -Pi and Pi. For this, VRef defines the positive sense of rotation: the angular value is positive, if the cross product this ^ Other has the same orientation as VRef relative to the plane defined by the vectors this and Other. Otherwise, the angular value is negative. Exceptions gp_VectorWithNullMagnitude if the magnitude of this vector, the vector Other, or the vector VRef is less than or equal to gp::Resolution(). Standard_DomainError if this vector, the vector Other, and the vector VRef are coplanar, unless this vector and the vector Other are parallel.

        :param Other:
        :type Other: gp_Vec
        :param VRef:
        :type VRef: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_AngleWithRef(self, *args)

    def Magnitude(self, *args):
        """
        * Computes the magnitude of this vector.

        :rtype: float

        """
        return _gp.gp_Vec_Magnitude(self, *args)

    def SquareMagnitude(self, *args):
        """
        * Computes the square magnitude of this vector. Adds two vectors

        :rtype: float

        """
        return _gp.gp_Vec_SquareMagnitude(self, *args)

    def Add(self, *args):
        """
        :param Other:
        :type Other: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec___iadd__(self, *args)

    def Added(self, *args):
        """
        * Adds two vectors Subtracts two vectors

        :param Other:
        :type Other: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec___add__(self, *args)

    def Subtract(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * Subtracts two vectors Multiplies a vector by a scalar

        :param Right:
        :type Right: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec___sub__(self, *args)

    def Multiply(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec___imul__(self, *args)

    def Multiplied(self, *args):
        """
        * Multiplies a vector by a scalar Divides a vector by a scalar

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Multiplied(self, *args)

    def Divide(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec___idiv__(self, *args)

    def Divided(self, *args):
        """
        * Divides a vector by a scalar computes the cross product between two vectors

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec

        """
        return _gp.gp_Vec___div__(self, *args)

    def Cross(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec_Cross(self, *args)

    def __ixor__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec___ixor__(self, *args)

    def Crossed(self, *args):
        """
        * computes the cross product between two vectors

        :param Right:
        :type Right: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec___xor__(self, *args)

    def CrossMagnitude(self, *args):
        """
        * Computes the magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||

        :param Right:
        :type Right: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_CrossMagnitude(self, *args)

    def CrossSquareMagnitude(self, *args):
        """
        * Computes the square magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||**2 Computes the triple vector product. <self> ^ (V1 ^ V2)

        :param Right:
        :type Right: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_CrossSquareMagnitude(self, *args)

    def CrossCross(self, *args):
        """
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec_CrossCross(self, *args)

    def CrossCrossed(self, *args):
        """
        * Computes the triple vector product. <self> ^ (V1 ^ V2)

        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_CrossCrossed(self, *args)

    def Dot(self, *args):
        """
        * computes the scalar product

        :param Other:
        :type Other: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_Dot(self, *args)

    def __mul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec

        :param Other:
        :type Other: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec___mul__(self, *args)

    def DotCross(self, *args):
        """
        * Computes the triple scalar product <self> * (V1 ^ V2). normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from gp.

        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: float

        """
        return _gp.gp_Vec_DotCross(self, *args)

    def Normalize(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Vec_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from gp. Reverses the direction of a vector

        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Normalized(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Vec_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the direction of a vector

        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Reversed(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_Vec

        """
        return _gp.gp_Vec___neg__(self, *args)

    def SetLinearForm(self, *args):
        """
        * <self> is setted to the following linear form : A1 * V1 + A2 * V2 + A3 * V3 + V4

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec
        :param A3:
        :type A3: float
        :param V3:
        :type V3: gp_Vec
        :param V4:
        :type V4: gp_Vec
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + A2 * V2 + A3 * V3

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec
        :param A3:
        :type A3: float
        :param V3:
        :type V3: gp_Vec
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + A2 * V2 + V3

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + A2 * V2

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + V2

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        * <self> is setted to the following linear form : V1 + V2

        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        """
        return _gp.gp_Vec_SetLinearForm(self, *args)

    def Mirror(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: None

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _gp.gp_Vec_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a vector with respect to the vector V which is the center of the symmetry.

        :param V:
        :type V: gp_Vec
        :rtype: gp_Vec

        * Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: gp_Vec

        * Performs the symmetrical transformation of a vector with respect to a plane. The axis placement A2 locates the plane of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Vec_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a vector. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Vec_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a vector. S is the scaling value. Transforms a vector with the transformation T.

        :param S:
        :type S: float
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _gp.gp_Vec_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a vector with the transformation T.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_Vec

        """
        return _gp.gp_Vec_Transformed(self, *args)

    def _CSFDB_Getgp_Veccoord(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _gp.gp_Vec__CSFDB_Getgp_Veccoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Vec.SetCoord = new_instancemethod(_gp.gp_Vec_SetCoord,None,gp_Vec)
gp_Vec.SetX = new_instancemethod(_gp.gp_Vec_SetX,None,gp_Vec)
gp_Vec.SetY = new_instancemethod(_gp.gp_Vec_SetY,None,gp_Vec)
gp_Vec.SetZ = new_instancemethod(_gp.gp_Vec_SetZ,None,gp_Vec)
gp_Vec.SetXYZ = new_instancemethod(_gp.gp_Vec_SetXYZ,None,gp_Vec)
gp_Vec.Coord = new_instancemethod(_gp.gp_Vec_Coord,None,gp_Vec)
gp_Vec.X = new_instancemethod(_gp.gp_Vec_X,None,gp_Vec)
gp_Vec.Y = new_instancemethod(_gp.gp_Vec_Y,None,gp_Vec)
gp_Vec.Z = new_instancemethod(_gp.gp_Vec_Z,None,gp_Vec)
gp_Vec.XYZ = new_instancemethod(_gp.gp_Vec_XYZ,None,gp_Vec)
gp_Vec.IsEqual = new_instancemethod(_gp.gp_Vec_IsEqual,None,gp_Vec)
gp_Vec.IsNormal = new_instancemethod(_gp.gp_Vec_IsNormal,None,gp_Vec)
gp_Vec.IsOpposite = new_instancemethod(_gp.gp_Vec_IsOpposite,None,gp_Vec)
gp_Vec.IsParallel = new_instancemethod(_gp.gp_Vec_IsParallel,None,gp_Vec)
gp_Vec.Angle = new_instancemethod(_gp.gp_Vec_Angle,None,gp_Vec)
gp_Vec.AngleWithRef = new_instancemethod(_gp.gp_Vec_AngleWithRef,None,gp_Vec)
gp_Vec.Magnitude = new_instancemethod(_gp.gp_Vec_Magnitude,None,gp_Vec)
gp_Vec.SquareMagnitude = new_instancemethod(_gp.gp_Vec_SquareMagnitude,None,gp_Vec)
gp_Vec.Add = new_instancemethod(_gp.gp_Vec_Add,None,gp_Vec)
gp_Vec.__iadd__ = new_instancemethod(_gp.gp_Vec___iadd__,None,gp_Vec)
gp_Vec.Added = new_instancemethod(_gp.gp_Vec_Added,None,gp_Vec)
gp_Vec.__add__ = new_instancemethod(_gp.gp_Vec___add__,None,gp_Vec)
gp_Vec.Subtract = new_instancemethod(_gp.gp_Vec_Subtract,None,gp_Vec)
gp_Vec.__isub__ = new_instancemethod(_gp.gp_Vec___isub__,None,gp_Vec)
gp_Vec.Subtracted = new_instancemethod(_gp.gp_Vec_Subtracted,None,gp_Vec)
gp_Vec.__sub__ = new_instancemethod(_gp.gp_Vec___sub__,None,gp_Vec)
gp_Vec.Multiply = new_instancemethod(_gp.gp_Vec_Multiply,None,gp_Vec)
gp_Vec.__imul__ = new_instancemethod(_gp.gp_Vec___imul__,None,gp_Vec)
gp_Vec.Multiplied = new_instancemethod(_gp.gp_Vec_Multiplied,None,gp_Vec)
gp_Vec.Divide = new_instancemethod(_gp.gp_Vec_Divide,None,gp_Vec)
gp_Vec.__idiv__ = new_instancemethod(_gp.gp_Vec___idiv__,None,gp_Vec)
gp_Vec.Divided = new_instancemethod(_gp.gp_Vec_Divided,None,gp_Vec)
gp_Vec.__div__ = new_instancemethod(_gp.gp_Vec___div__,None,gp_Vec)
gp_Vec.Cross = new_instancemethod(_gp.gp_Vec_Cross,None,gp_Vec)
gp_Vec.__ixor__ = new_instancemethod(_gp.gp_Vec___ixor__,None,gp_Vec)
gp_Vec.Crossed = new_instancemethod(_gp.gp_Vec_Crossed,None,gp_Vec)
gp_Vec.__xor__ = new_instancemethod(_gp.gp_Vec___xor__,None,gp_Vec)
gp_Vec.CrossMagnitude = new_instancemethod(_gp.gp_Vec_CrossMagnitude,None,gp_Vec)
gp_Vec.CrossSquareMagnitude = new_instancemethod(_gp.gp_Vec_CrossSquareMagnitude,None,gp_Vec)
gp_Vec.CrossCross = new_instancemethod(_gp.gp_Vec_CrossCross,None,gp_Vec)
gp_Vec.CrossCrossed = new_instancemethod(_gp.gp_Vec_CrossCrossed,None,gp_Vec)
gp_Vec.Dot = new_instancemethod(_gp.gp_Vec_Dot,None,gp_Vec)
gp_Vec.__mul__ = new_instancemethod(_gp.gp_Vec___mul__,None,gp_Vec)
gp_Vec.DotCross = new_instancemethod(_gp.gp_Vec_DotCross,None,gp_Vec)
gp_Vec.Normalize = new_instancemethod(_gp.gp_Vec_Normalize,None,gp_Vec)
gp_Vec.Normalized = new_instancemethod(_gp.gp_Vec_Normalized,None,gp_Vec)
gp_Vec.Reverse = new_instancemethod(_gp.gp_Vec_Reverse,None,gp_Vec)
gp_Vec.Reversed = new_instancemethod(_gp.gp_Vec_Reversed,None,gp_Vec)
gp_Vec.__neg__ = new_instancemethod(_gp.gp_Vec___neg__,None,gp_Vec)
gp_Vec.SetLinearForm = new_instancemethod(_gp.gp_Vec_SetLinearForm,None,gp_Vec)
gp_Vec.Mirror = new_instancemethod(_gp.gp_Vec_Mirror,None,gp_Vec)
gp_Vec.Mirrored = new_instancemethod(_gp.gp_Vec_Mirrored,None,gp_Vec)
gp_Vec.Rotate = new_instancemethod(_gp.gp_Vec_Rotate,None,gp_Vec)
gp_Vec.Rotated = new_instancemethod(_gp.gp_Vec_Rotated,None,gp_Vec)
gp_Vec.Scale = new_instancemethod(_gp.gp_Vec_Scale,None,gp_Vec)
gp_Vec.Scaled = new_instancemethod(_gp.gp_Vec_Scaled,None,gp_Vec)
gp_Vec.Transform = new_instancemethod(_gp.gp_Vec_Transform,None,gp_Vec)
gp_Vec.Transformed = new_instancemethod(_gp.gp_Vec_Transformed,None,gp_Vec)
gp_Vec._CSFDB_Getgp_Veccoord = new_instancemethod(_gp.gp_Vec__CSFDB_Getgp_Veccoord,None,gp_Vec)
gp_Vec._kill_pointed = new_instancemethod(_gp.gp_Vec__kill_pointed,None,gp_Vec)
gp_Vec_swigregister = _gp.gp_Vec_swigregister
gp_Vec_swigregister(gp_Vec)

class gp_Vec2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a zero vector.

        :rtype: None

        * Creates a unitary vector from a direction V.

        :param V:
        :type V: gp_Dir2d
        :rtype: None

        * Creates a vector with a doublet of coordinates.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        * Creates a point with its two cartesian coordinates.

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        * Creates a vector from two points. The length of the vector is the distance between P1 and P2

        :param P1:
        :type P1: gp_Pnt2d
        :param P2:
        :type P2: gp_Pnt2d
        :rtype: None

        """
        _gp.gp_Vec2d_swiginit(self,_gp.new_gp_Vec2d(*args))
    def SetCoord(self, *args):
        """
        * Changes the coordinate of range Index Index = 1 => X is modified Index = 2 => Y is modified Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this vector, assigns the values Xv and Yv to its two coordinates

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        """
        return _gp.gp_Vec2d_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this vector.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_Vec2d_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this vector.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_Vec2d_SetY(self, *args)

    def SetXY(self, *args):
        """
        * Assigns the two coordinates of Coord to this vector.

        :param Coord:
        :type Coord: gp_XY
        :rtype: None

        """
        return _gp.gp_Vec2d_SetXY(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Raised if Index != {1, 2}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this vector, returns its two coordinates Xv and Yv

        :param Xv:
        :type Xv: float
        :param Yv:
        :type Yv: float
        :rtype: None

        """
        return _gp.gp_Vec2d_Coord(self, *args)

    def X(self, *args):
        """
        * For this vector, returns its X coordinate.

        :rtype: float

        """
        return _gp.gp_Vec2d_X(self, *args)

    def Y(self, *args):
        """
        * For this vector, returns its Y coordinate.

        :rtype: float

        """
        return _gp.gp_Vec2d_Y(self, *args)

    def XY(self, *args):
        """
        * For this vector, returns its two coordinates as a number pair

        :rtype: gp_XY

        """
        return _gp.gp_Vec2d_XY(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if the two vectors have the same magnitude value and the same direction. The precision values are LinearTolerance for the magnitude and AngularTolerance for the direction.

        :param Other:
        :type Other: gp_Vec2d
        :param LinearTolerance:
        :type LinearTolerance: float
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec2d_IsEqual(self, *args)

    def IsNormal(self, *args):
        """
        * Returns True if abs(Abs(<self>.Angle(Other)) - PI/2.) <= AngularTolerance Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp.

        :param Other:
        :type Other: gp_Vec2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec2d_IsNormal(self, *args)

    def IsOpposite(self, *args):
        """
        * Returns True if PI - Abs(<self>.Angle(Other)) <= AngularTolerance Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp.

        :param Other:
        :type Other: gp_Vec2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec2d_IsOpposite(self, *args)

    def IsParallel(self, *args):
        """
        * Returns true if Abs(Angle(<self>, Other)) <= AngularTolerance or PI - Abs(Angle(<self>, Other)) <= AngularTolerance Two vectors with opposite directions are considered as parallel. Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp

        :param Other:
        :type Other: gp_Vec2d
        :param AngularTolerance:
        :type AngularTolerance: float
        :rtype: bool

        """
        return _gp.gp_Vec2d_IsParallel(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value between <self> and <Other> returns the angle value between -PI and PI in radian. The orientation is from <self> to Other. The positive sense is the trigonometric sense. Raises VectorWithNullMagnitude if <self>.Magnitude() <= Resolution from gp or Other.Magnitude() <= Resolution because the angular value is indefinite if one of the vectors has a null magnitude.

        :param Other:
        :type Other: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d_Angle(self, *args)

    def Magnitude(self, *args):
        """
        * Computes the magnitude of this vector.

        :rtype: float

        """
        return _gp.gp_Vec2d_Magnitude(self, *args)

    def SquareMagnitude(self, *args):
        """
        * Computes the square magnitude of this vector.

        :rtype: float

        """
        return _gp.gp_Vec2d_SquareMagnitude(self, *args)

    def Add(self, *args):
        """
        :param Other:
        :type Other: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Vec2d_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Vec2d___iadd__(self, *args)

    def Added(self, *args):
        """
        * Adds two vectors

        :param Other:
        :type Other: gp_Vec2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_Vec2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d___add__(self, *args)

    def Crossed(self, *args):
        """
        * Computes the crossing product between two vectors

        :param Right:
        :type Right: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d___xor__(self, *args)

    def CrossMagnitude(self, *args):
        """
        * Computes the magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||

        :param Right:
        :type Right: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d_CrossMagnitude(self, *args)

    def CrossSquareMagnitude(self, *args):
        """
        * Computes the square magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||**2

        :param Right:
        :type Right: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d_CrossSquareMagnitude(self, *args)

    def Divide(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec2d_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec2d___idiv__(self, *args)

    def Divided(self, *args):
        """
        * divides a vector by a scalar

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d___div__(self, *args)

    def Dot(self, *args):
        """
        * Computes the scalar product

        :param Other:
        :type Other: gp_Vec2d
        :rtype: float

        """
        return _gp.gp_Vec2d_Dot(self, *args)

    def GetNormal(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_GetNormal(self, *args)

    def Multiply(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec2d_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_Vec2d___imul__(self, *args)

    def Multiplied(self, *args):
        """
        * Normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from package gp.

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_Vec2d
        :rtype: float

        :param Scalar:
        :type Scalar: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d___mul__(self, *args)

    def Normalize(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Vec2d_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * Normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from package gp. Reverses the direction of a vector

        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Normalized(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _gp.gp_Vec2d_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Reverses the direction of a vector Subtracts two vectors

        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Reversed(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d___neg__(self, *args)

    def Subtract(self, *args):
        """
        :param Right:
        :type Right: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Vec2d_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Vec2d___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * Subtracts two vectors

        :param Right:
        :type Right: gp_Vec2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Right:
        :type Right: gp_Vec2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d___sub__(self, *args)

    def SetLinearForm(self, *args):
        """
        * <self> is setted to the following linear form : A1 * V1 + A2 * V2 + V3

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec2d
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec2d
        :param V3:
        :type V3: gp_Vec2d
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + A2 * V2

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec2d
        :param A2:
        :type A2: float
        :param V2:
        :type V2: gp_Vec2d
        :rtype: None

        * <self> is setted to the following linear form : A1 * V1 + V2

        :param A1:
        :type A1: float
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :rtype: None

        * <self> is setted to the following linear form : Left + Right Performs the symmetrical transformation of a vector with respect to the vector V which is the center of the symmetry.

        :param Left:
        :type Left: gp_Vec2d
        :param Right:
        :type Right: gp_Vec2d
        :rtype: None

        """
        return _gp.gp_Vec2d_SetLinearForm(self, *args)

    def Mirror(self, *args):
        """
        :param V:
        :type V: gp_Vec2d
        :rtype: None

        :param A1:
        :type A1: gp_Ax2d
        :rtype: None

        """
        return _gp.gp_Vec2d_Mirror(self, *args)

    def Mirrored(self, *args):
        """
        * Performs the symmetrical transformation of a vector with respect to the vector V which is the center of the symmetry. Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.

        :param V:
        :type V: gp_Vec2d
        :rtype: gp_Vec2d

        * Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Mirrored(self, *args)

    def Rotate(self, *args):
        """
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _gp.gp_Vec2d_Rotate(self, *args)

    def Rotated(self, *args):
        """
        * Rotates a vector. Ang is the angular value of the rotation in radians.

        :param Ang:
        :type Ang: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Rotated(self, *args)

    def Scale(self, *args):
        """
        :param S:
        :type S: float
        :rtype: None

        """
        return _gp.gp_Vec2d_Scale(self, *args)

    def Scaled(self, *args):
        """
        * Scales a vector. S is the scaling value.

        :param S:
        :type S: float
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Scaled(self, *args)

    def Transform(self, *args):
        """
        :param T:
        :type T: gp_Trsf2d
        :rtype: None

        """
        return _gp.gp_Vec2d_Transform(self, *args)

    def Transformed(self, *args):
        """
        * Transforms a vector with a Trsf from gp.

        :param T:
        :type T: gp_Trsf2d
        :rtype: gp_Vec2d

        """
        return _gp.gp_Vec2d_Transformed(self, *args)

    def _CSFDB_Getgp_Vec2dcoord(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_Vec2d__CSFDB_Getgp_Vec2dcoord(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_Vec2d.SetCoord = new_instancemethod(_gp.gp_Vec2d_SetCoord,None,gp_Vec2d)
gp_Vec2d.SetX = new_instancemethod(_gp.gp_Vec2d_SetX,None,gp_Vec2d)
gp_Vec2d.SetY = new_instancemethod(_gp.gp_Vec2d_SetY,None,gp_Vec2d)
gp_Vec2d.SetXY = new_instancemethod(_gp.gp_Vec2d_SetXY,None,gp_Vec2d)
gp_Vec2d.Coord = new_instancemethod(_gp.gp_Vec2d_Coord,None,gp_Vec2d)
gp_Vec2d.X = new_instancemethod(_gp.gp_Vec2d_X,None,gp_Vec2d)
gp_Vec2d.Y = new_instancemethod(_gp.gp_Vec2d_Y,None,gp_Vec2d)
gp_Vec2d.XY = new_instancemethod(_gp.gp_Vec2d_XY,None,gp_Vec2d)
gp_Vec2d.IsEqual = new_instancemethod(_gp.gp_Vec2d_IsEqual,None,gp_Vec2d)
gp_Vec2d.IsNormal = new_instancemethod(_gp.gp_Vec2d_IsNormal,None,gp_Vec2d)
gp_Vec2d.IsOpposite = new_instancemethod(_gp.gp_Vec2d_IsOpposite,None,gp_Vec2d)
gp_Vec2d.IsParallel = new_instancemethod(_gp.gp_Vec2d_IsParallel,None,gp_Vec2d)
gp_Vec2d.Angle = new_instancemethod(_gp.gp_Vec2d_Angle,None,gp_Vec2d)
gp_Vec2d.Magnitude = new_instancemethod(_gp.gp_Vec2d_Magnitude,None,gp_Vec2d)
gp_Vec2d.SquareMagnitude = new_instancemethod(_gp.gp_Vec2d_SquareMagnitude,None,gp_Vec2d)
gp_Vec2d.Add = new_instancemethod(_gp.gp_Vec2d_Add,None,gp_Vec2d)
gp_Vec2d.__iadd__ = new_instancemethod(_gp.gp_Vec2d___iadd__,None,gp_Vec2d)
gp_Vec2d.Added = new_instancemethod(_gp.gp_Vec2d_Added,None,gp_Vec2d)
gp_Vec2d.__add__ = new_instancemethod(_gp.gp_Vec2d___add__,None,gp_Vec2d)
gp_Vec2d.Crossed = new_instancemethod(_gp.gp_Vec2d_Crossed,None,gp_Vec2d)
gp_Vec2d.__xor__ = new_instancemethod(_gp.gp_Vec2d___xor__,None,gp_Vec2d)
gp_Vec2d.CrossMagnitude = new_instancemethod(_gp.gp_Vec2d_CrossMagnitude,None,gp_Vec2d)
gp_Vec2d.CrossSquareMagnitude = new_instancemethod(_gp.gp_Vec2d_CrossSquareMagnitude,None,gp_Vec2d)
gp_Vec2d.Divide = new_instancemethod(_gp.gp_Vec2d_Divide,None,gp_Vec2d)
gp_Vec2d.__idiv__ = new_instancemethod(_gp.gp_Vec2d___idiv__,None,gp_Vec2d)
gp_Vec2d.Divided = new_instancemethod(_gp.gp_Vec2d_Divided,None,gp_Vec2d)
gp_Vec2d.__div__ = new_instancemethod(_gp.gp_Vec2d___div__,None,gp_Vec2d)
gp_Vec2d.Dot = new_instancemethod(_gp.gp_Vec2d_Dot,None,gp_Vec2d)
gp_Vec2d.GetNormal = new_instancemethod(_gp.gp_Vec2d_GetNormal,None,gp_Vec2d)
gp_Vec2d.Multiply = new_instancemethod(_gp.gp_Vec2d_Multiply,None,gp_Vec2d)
gp_Vec2d.__imul__ = new_instancemethod(_gp.gp_Vec2d___imul__,None,gp_Vec2d)
gp_Vec2d.Multiplied = new_instancemethod(_gp.gp_Vec2d_Multiplied,None,gp_Vec2d)
gp_Vec2d.__mul__ = new_instancemethod(_gp.gp_Vec2d___mul__,None,gp_Vec2d)
gp_Vec2d.Normalize = new_instancemethod(_gp.gp_Vec2d_Normalize,None,gp_Vec2d)
gp_Vec2d.Normalized = new_instancemethod(_gp.gp_Vec2d_Normalized,None,gp_Vec2d)
gp_Vec2d.Reverse = new_instancemethod(_gp.gp_Vec2d_Reverse,None,gp_Vec2d)
gp_Vec2d.Reversed = new_instancemethod(_gp.gp_Vec2d_Reversed,None,gp_Vec2d)
gp_Vec2d.__neg__ = new_instancemethod(_gp.gp_Vec2d___neg__,None,gp_Vec2d)
gp_Vec2d.Subtract = new_instancemethod(_gp.gp_Vec2d_Subtract,None,gp_Vec2d)
gp_Vec2d.__isub__ = new_instancemethod(_gp.gp_Vec2d___isub__,None,gp_Vec2d)
gp_Vec2d.Subtracted = new_instancemethod(_gp.gp_Vec2d_Subtracted,None,gp_Vec2d)
gp_Vec2d.__sub__ = new_instancemethod(_gp.gp_Vec2d___sub__,None,gp_Vec2d)
gp_Vec2d.SetLinearForm = new_instancemethod(_gp.gp_Vec2d_SetLinearForm,None,gp_Vec2d)
gp_Vec2d.Mirror = new_instancemethod(_gp.gp_Vec2d_Mirror,None,gp_Vec2d)
gp_Vec2d.Mirrored = new_instancemethod(_gp.gp_Vec2d_Mirrored,None,gp_Vec2d)
gp_Vec2d.Rotate = new_instancemethod(_gp.gp_Vec2d_Rotate,None,gp_Vec2d)
gp_Vec2d.Rotated = new_instancemethod(_gp.gp_Vec2d_Rotated,None,gp_Vec2d)
gp_Vec2d.Scale = new_instancemethod(_gp.gp_Vec2d_Scale,None,gp_Vec2d)
gp_Vec2d.Scaled = new_instancemethod(_gp.gp_Vec2d_Scaled,None,gp_Vec2d)
gp_Vec2d.Transform = new_instancemethod(_gp.gp_Vec2d_Transform,None,gp_Vec2d)
gp_Vec2d.Transformed = new_instancemethod(_gp.gp_Vec2d_Transformed,None,gp_Vec2d)
gp_Vec2d._CSFDB_Getgp_Vec2dcoord = new_instancemethod(_gp.gp_Vec2d__CSFDB_Getgp_Vec2dcoord,None,gp_Vec2d)
gp_Vec2d._kill_pointed = new_instancemethod(_gp.gp_Vec2d__kill_pointed,None,gp_Vec2d)
gp_Vec2d_swigregister = _gp.gp_Vec2d_swigregister
gp_Vec2d_swigregister(gp_Vec2d)

class gp_XY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates XY object with zero coordinates (0,0).

        :rtype: None

        * a number pair defined by the XY coordinates

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        _gp.gp_XY_swiginit(self,_gp.new_gp_XY(*args))
    def SetCoord(self, *args):
        """
        * modifies the coordinate of range Index Index = 1 => X is modified Index = 2 => Y is modified Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        * For this number pair, assigns the values X and Y to its coordinates

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_XY_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate of this number pair.

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_XY_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate of this number pair.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_XY_SetY(self, *args)

    def Coord(self, *args):
        """
        * returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Raises OutOfRange if Index != {1, 2}.

        :param Index:
        :type Index: int
        :rtype: float

        * For this number pair, returns its coordinates X and Y.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_XY_Coord(self, *args)

    def X(self, *args):
        """
        * Returns the X coordinate of this number pair.

        :rtype: float

        """
        return _gp.gp_XY_X(self, *args)

    def Y(self, *args):
        """
        * Returns the Y coordinate of this number pair.

        :rtype: float

        """
        return _gp.gp_XY_Y(self, *args)

    def Modulus(self, *args):
        """
        * Computes Sqrt (X*X + Y*Y) where X and Y are the two coordinates of this number pair.

        :rtype: float

        """
        return _gp.gp_XY_Modulus(self, *args)

    def SquareModulus(self, *args):
        """
        * Computes X*X + Y*Y where X and Y are the two coordinates of this number pair.

        :rtype: float

        """
        return _gp.gp_XY_SquareModulus(self, *args)

    def IsEqual(self, *args):
        """
        * Returns true if the coordinates of this number pair are equal to the respective coordinates of the number pair Other, within the specified tolerance Tolerance. I.e.: abs(<self>.X() - Other.X()) <= Tolerance and abs(<self>.Y() - Other.Y()) <= Tolerance and computations

        :param Other:
        :type Other: gp_XY
        :param Tolerance:
        :type Tolerance: float
        :rtype: bool

        """
        return _gp.gp_XY_IsEqual(self, *args)

    def Add(self, *args):
        """
        * Computes the sum of this number pair and number pair Other <self>.X() = <self>.X() + Other.X() <self>.Y() = <self>.Y() + Other.Y()

        :param Other:
        :type Other: gp_XY
        :rtype: None

        """
        return _gp.gp_XY_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_XY
        :rtype: None

        """
        return _gp.gp_XY___iadd__(self, *args)

    def Added(self, *args):
        """
        * Computes the sum of this number pair and number pair Other new.X() = <self>.X() + Other.X() new.Y() = <self>.Y() + Other.Y()

        :param Other:
        :type Other: gp_XY
        :rtype: gp_XY

        """
        return _gp.gp_XY_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_XY
        :rtype: gp_XY

        """
        return _gp.gp_XY___add__(self, *args)

    def Crossed(self, *args):
        """
        * Real D = <self>.X() * Other.Y() - <self>.Y() * Other.X()

        :param Right:
        :type Right: gp_XY
        :rtype: float

        """
        return _gp.gp_XY_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_XY
        :rtype: float

        """
        return _gp.gp_XY___xor__(self, *args)

    def CrossMagnitude(self, *args):
        """
        * computes the magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||

        :param Right:
        :type Right: gp_XY
        :rtype: float

        """
        return _gp.gp_XY_CrossMagnitude(self, *args)

    def CrossSquareMagnitude(self, *args):
        """
        * computes the square magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||**2

        :param Right:
        :type Right: gp_XY
        :rtype: float

        """
        return _gp.gp_XY_CrossSquareMagnitude(self, *args)

    def Divide(self, *args):
        """
        * divides <self> by a real.

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_XY_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_XY___idiv__(self, *args)

    def Divided(self, *args):
        """
        * Divides <self> by a real.

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XY

        """
        return _gp.gp_XY_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_XY

        """
        return _gp.gp_XY___div__(self, *args)

    def Dot(self, *args):
        """
        * Computes the scalar product between <self> and Other

        :param Other:
        :type Other: gp_XY
        :rtype: float

        """
        return _gp.gp_XY_Dot(self, *args)

    def Multiply(self, *args):
        """
        * <self>.X() = <self>.X() * Scalar; <self>.Y() = <self>.Y() * Scalar;

        :param Scalar:
        :type Scalar: float
        :rtype: None

        * <self>.X() = <self>.X() * Other.X(); <self>.Y() = <self>.Y() * Other.Y();

        :param Other:
        :type Other: gp_XY
        :rtype: None

        * <self> = Matrix * <self>

        :param Matrix:
        :type Matrix: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_XY_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        :param Other:
        :type Other: gp_XY
        :rtype: None

        :param Matrix:
        :type Matrix: gp_Mat2d
        :rtype: None

        """
        return _gp.gp_XY___imul__(self, *args)

    def Multiplied(self, *args):
        """
        * New.X() = <self>.X() * Scalar; New.Y() = <self>.Y() * Scalar;

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XY

        * new.X() = <self>.X() * Other.X(); new.Y() = <self>.Y() * Other.Y();

        :param Other:
        :type Other: gp_XY
        :rtype: gp_XY

        * New = Matrix * <self>

        :param Matrix:
        :type Matrix: gp_Mat2d
        :rtype: gp_XY

        """
        return _gp.gp_XY_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_XY
        :rtype: float

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XY

        :param Matrix:
        :type Matrix: gp_Mat2d
        :rtype: gp_XY

        """
        return _gp.gp_XY___mul__(self, *args)

    def Normalize(self, *args):
        """
        * <self>.X() = <self>.X()/ <self>.Modulus() <self>.Y() = <self>.Y()/ <self>.Modulus() Raises ConstructionError if <self>.Modulus() <= Resolution from gp

        :rtype: None

        """
        return _gp.gp_XY_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * New.X() = <self>.X()/ <self>.Modulus() New.Y() = <self>.Y()/ <self>.Modulus() Raises ConstructionError if <self>.Modulus() <= Resolution from gp

        :rtype: gp_XY

        """
        return _gp.gp_XY_Normalized(self, *args)

    def Reverse(self, *args):
        """
        * <self>.X() = -<self>.X() <self>.Y() = -<self>.Y()

        :rtype: None

        """
        return _gp.gp_XY_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * New.X() = -<self>.X() New.Y() = -<self>.Y()

        :rtype: gp_XY

        """
        return _gp.gp_XY_Reversed(self, *args)

    def __neg__(self, *args):
        """
        :rtype: gp_XY

        """
        return _gp.gp_XY___neg__(self, *args)

    def SetLinearForm(self, *args):
        """
        * Computes the following linear combination and assigns the result to this number pair: A1 * XY1 + A2 * XY2

        :param A1:
        :type A1: float
        :param XY1:
        :type XY1: gp_XY
        :param A2:
        :type A2: float
        :param XY2:
        :type XY2: gp_XY
        :rtype: None

        * -- Computes the following linear combination and assigns the result to this number pair: A1 * XY1 + A2 * XY2 + XY3

        :param A1:
        :type A1: float
        :param XY1:
        :type XY1: gp_XY
        :param A2:
        :type A2: float
        :param XY2:
        :type XY2: gp_XY
        :param XY3:
        :type XY3: gp_XY
        :rtype: None

        * Computes the following linear combination and assigns the result to this number pair: A1 * XY1 + XY2

        :param A1:
        :type A1: float
        :param XY1:
        :type XY1: gp_XY
        :param XY2:
        :type XY2: gp_XY
        :rtype: None

        * Computes the following linear combination and assigns the result to this number pair: XY1 + XY2

        :param XY1:
        :type XY1: gp_XY
        :param XY2:
        :type XY2: gp_XY
        :rtype: None

        """
        return _gp.gp_XY_SetLinearForm(self, *args)

    def Subtract(self, *args):
        """
        * <self>.X() = <self>.X() - Other.X() <self>.Y() = <self>.Y() - Other.Y()

        :param Right:
        :type Right: gp_XY
        :rtype: None

        """
        return _gp.gp_XY_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Right:
        :type Right: gp_XY
        :rtype: None

        """
        return _gp.gp_XY___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * new.X() = <self>.X() - Other.X() new.Y() = <self>.Y() - Other.Y()

        :param Right:
        :type Right: gp_XY
        :rtype: gp_XY

        """
        return _gp.gp_XY_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Right:
        :type Right: gp_XY
        :rtype: gp_XY

        """
        return _gp.gp_XY___sub__(self, *args)

    def _CSFDB_Getgp_XYx(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_XY__CSFDB_Getgp_XYx(self, *args)

    def _CSFDB_Setgp_XYx(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_XY__CSFDB_Setgp_XYx(self, *args)

    def _CSFDB_Getgp_XYy(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_XY__CSFDB_Getgp_XYy(self, *args)

    def _CSFDB_Setgp_XYy(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_XY__CSFDB_Setgp_XYy(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_XY.SetCoord = new_instancemethod(_gp.gp_XY_SetCoord,None,gp_XY)
gp_XY.SetX = new_instancemethod(_gp.gp_XY_SetX,None,gp_XY)
gp_XY.SetY = new_instancemethod(_gp.gp_XY_SetY,None,gp_XY)
gp_XY.Coord = new_instancemethod(_gp.gp_XY_Coord,None,gp_XY)
gp_XY.X = new_instancemethod(_gp.gp_XY_X,None,gp_XY)
gp_XY.Y = new_instancemethod(_gp.gp_XY_Y,None,gp_XY)
gp_XY.Modulus = new_instancemethod(_gp.gp_XY_Modulus,None,gp_XY)
gp_XY.SquareModulus = new_instancemethod(_gp.gp_XY_SquareModulus,None,gp_XY)
gp_XY.IsEqual = new_instancemethod(_gp.gp_XY_IsEqual,None,gp_XY)
gp_XY.Add = new_instancemethod(_gp.gp_XY_Add,None,gp_XY)
gp_XY.__iadd__ = new_instancemethod(_gp.gp_XY___iadd__,None,gp_XY)
gp_XY.Added = new_instancemethod(_gp.gp_XY_Added,None,gp_XY)
gp_XY.__add__ = new_instancemethod(_gp.gp_XY___add__,None,gp_XY)
gp_XY.Crossed = new_instancemethod(_gp.gp_XY_Crossed,None,gp_XY)
gp_XY.__xor__ = new_instancemethod(_gp.gp_XY___xor__,None,gp_XY)
gp_XY.CrossMagnitude = new_instancemethod(_gp.gp_XY_CrossMagnitude,None,gp_XY)
gp_XY.CrossSquareMagnitude = new_instancemethod(_gp.gp_XY_CrossSquareMagnitude,None,gp_XY)
gp_XY.Divide = new_instancemethod(_gp.gp_XY_Divide,None,gp_XY)
gp_XY.__idiv__ = new_instancemethod(_gp.gp_XY___idiv__,None,gp_XY)
gp_XY.Divided = new_instancemethod(_gp.gp_XY_Divided,None,gp_XY)
gp_XY.__div__ = new_instancemethod(_gp.gp_XY___div__,None,gp_XY)
gp_XY.Dot = new_instancemethod(_gp.gp_XY_Dot,None,gp_XY)
gp_XY.Multiply = new_instancemethod(_gp.gp_XY_Multiply,None,gp_XY)
gp_XY.__imul__ = new_instancemethod(_gp.gp_XY___imul__,None,gp_XY)
gp_XY.Multiplied = new_instancemethod(_gp.gp_XY_Multiplied,None,gp_XY)
gp_XY.__mul__ = new_instancemethod(_gp.gp_XY___mul__,None,gp_XY)
gp_XY.Normalize = new_instancemethod(_gp.gp_XY_Normalize,None,gp_XY)
gp_XY.Normalized = new_instancemethod(_gp.gp_XY_Normalized,None,gp_XY)
gp_XY.Reverse = new_instancemethod(_gp.gp_XY_Reverse,None,gp_XY)
gp_XY.Reversed = new_instancemethod(_gp.gp_XY_Reversed,None,gp_XY)
gp_XY.__neg__ = new_instancemethod(_gp.gp_XY___neg__,None,gp_XY)
gp_XY.SetLinearForm = new_instancemethod(_gp.gp_XY_SetLinearForm,None,gp_XY)
gp_XY.Subtract = new_instancemethod(_gp.gp_XY_Subtract,None,gp_XY)
gp_XY.__isub__ = new_instancemethod(_gp.gp_XY___isub__,None,gp_XY)
gp_XY.Subtracted = new_instancemethod(_gp.gp_XY_Subtracted,None,gp_XY)
gp_XY.__sub__ = new_instancemethod(_gp.gp_XY___sub__,None,gp_XY)
gp_XY._CSFDB_Getgp_XYx = new_instancemethod(_gp.gp_XY__CSFDB_Getgp_XYx,None,gp_XY)
gp_XY._CSFDB_Setgp_XYx = new_instancemethod(_gp.gp_XY__CSFDB_Setgp_XYx,None,gp_XY)
gp_XY._CSFDB_Getgp_XYy = new_instancemethod(_gp.gp_XY__CSFDB_Getgp_XYy,None,gp_XY)
gp_XY._CSFDB_Setgp_XYy = new_instancemethod(_gp.gp_XY__CSFDB_Setgp_XYy,None,gp_XY)
gp_XY._kill_pointed = new_instancemethod(_gp.gp_XY__kill_pointed,None,gp_XY)
gp_XY_swigregister = _gp.gp_XY_swigregister
gp_XY_swigregister(gp_XY)

class gp_XYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an XYZ object with zero co-ordinates (0,0,0)

        :rtype: None

        * creates an XYZ with given coordinates

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        _gp.gp_XYZ_swiginit(self,_gp.new_gp_XYZ(*args))
    def SetCoord(self, *args):
        """
        * For this XYZ object, assigns the values X, Y and Z to its three coordinates

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        * modifies the coordinate of range Index Index = 1 => X is modified Index = 2 => Y is modified Index = 3 => Z is modified Raises OutOfRange if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :param Xi:
        :type Xi: float
        :rtype: None

        """
        return _gp.gp_XYZ_SetCoord(self, *args)

    def SetX(self, *args):
        """
        * Assigns the given value to the X coordinate

        :param X:
        :type X: float
        :rtype: None

        """
        return _gp.gp_XYZ_SetX(self, *args)

    def SetY(self, *args):
        """
        * Assigns the given value to the Y coordinate

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _gp.gp_XYZ_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Assigns the given value to the Z coordinate

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_XYZ_SetZ(self, *args)

    def Coord(self, *args):
        """
        * returns the coordinate of range Index : Index = 1 => X is returned Index = 2 => Y is returned Index = 3 => Z is returned Raises OutOfRange if Index != {1, 2, 3}.

        :param Index:
        :type Index: int
        :rtype: float

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _gp.gp_XYZ_Coord(self, *args)

    def X(self, *args):
        """
        * Returns the X coordinate

        :rtype: float

        """
        return _gp.gp_XYZ_X(self, *args)

    def Y(self, *args):
        """
        * Returns the Y coordinate

        :rtype: float

        """
        return _gp.gp_XYZ_Y(self, *args)

    def Z(self, *args):
        """
        * Returns the Z coordinate

        :rtype: float

        """
        return _gp.gp_XYZ_Z(self, *args)

    def Modulus(self, *args):
        """
        * computes Sqrt (X*X + Y*Y + Z*Z) where X, Y and Z are the three coordinates of this XYZ object.

        :rtype: float

        """
        return _gp.gp_XYZ_Modulus(self, *args)

    def SquareModulus(self, *args):
        """
        * Computes X*X + Y*Y + Z*Z where X, Y and Z are the three coordinates of this XYZ object.

        :rtype: float

        """
        return _gp.gp_XYZ_SquareModulus(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if he coordinates of this XYZ object are equal to the respective coordinates Other, within the specified tolerance Tolerance. I.e.: abs(<self>.X() - Other.X()) <= Tolerance and abs(<self>.Y() - Other.Y()) <= Tolerance and abs(<self>.Z() - Other.Z()) <= Tolerance.

        :param Other:
        :type Other: gp_XYZ
        :param Tolerance:
        :type Tolerance: float
        :rtype: bool

        """
        return _gp.gp_XYZ_IsEqual(self, *args)

    def Add(self, *args):
        """
        * <self>.X() = <self>.X() + Other.X() <self>.Y() = <self>.Y() + Other.Y() <self>.Z() = <self>.Z() + Other.Z()

        :param Other:
        :type Other: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ_Add(self, *args)

    def __iadd__(self, *args):
        """
        :param Other:
        :type Other: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ___iadd__(self, *args)

    def Added(self, *args):
        """
        * new.X() = <self>.X() + Other.X() new.Y() = <self>.Y() + Other.Y() new.Z() = <self>.Z() + Other.Z()

        :param Other:
        :type Other: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Added(self, *args)

    def __add__(self, *args):
        """
        :param Other:
        :type Other: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ___add__(self, *args)

    def Cross(self, *args):
        """
        * <self>.X() = <self>.Y() * Other.Z() - <self>.Z() * Other.Y() <self>.Y() = <self>.Z() * Other.X() - <self>.X() * Other.Z() <self>.Z() = <self>.X() * Other.Y() - <self>.Y() * Other.X()

        :param Right:
        :type Right: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ_Cross(self, *args)

    def __ixor__(self, *args):
        """
        :param Right:
        :type Right: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ___ixor__(self, *args)

    def Crossed(self, *args):
        """
        * new.X() = <self>.Y() * Other.Z() - <self>.Z() * Other.Y() new.Y() = <self>.Z() * Other.X() - <self>.X() * Other.Z() new.Z() = <self>.X() * Other.Y() - <self>.Y() * Other.X()

        :param Right:
        :type Right: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Crossed(self, *args)

    def __xor__(self, *args):
        """
        :param Right:
        :type Right: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ___xor__(self, *args)

    def CrossMagnitude(self, *args):
        """
        * Computes the magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||

        :param Right:
        :type Right: gp_XYZ
        :rtype: float

        """
        return _gp.gp_XYZ_CrossMagnitude(self, *args)

    def CrossSquareMagnitude(self, *args):
        """
        * Computes the square magnitude of the cross product between <self> and Right. Returns || <self> ^ Right ||**2

        :param Right:
        :type Right: gp_XYZ
        :rtype: float

        """
        return _gp.gp_XYZ_CrossSquareMagnitude(self, *args)

    def CrossCross(self, *args):
        """
        * Triple vector product Computes <self> = <self>.Cross(Coord1.Cross(Coord2))

        :param Coord1:
        :type Coord1: gp_XYZ
        :param Coord2:
        :type Coord2: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ_CrossCross(self, *args)

    def CrossCrossed(self, *args):
        """
        * Triple vector product computes New = <self>.Cross(Coord1.Cross(Coord2))

        :param Coord1:
        :type Coord1: gp_XYZ
        :param Coord2:
        :type Coord2: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_CrossCrossed(self, *args)

    def Divide(self, *args):
        """
        * divides <self> by a real.

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_XYZ_Divide(self, *args)

    def __idiv__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _gp.gp_XYZ___idiv__(self, *args)

    def Divided(self, *args):
        """
        * divides <self> by a real.

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Divided(self, *args)

    def __div__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ___div__(self, *args)

    def Dot(self, *args):
        """
        * computes the scalar product between <self> and Other

        :param Other:
        :type Other: gp_XYZ
        :rtype: float

        """
        return _gp.gp_XYZ_Dot(self, *args)

    def DotCross(self, *args):
        """
        * computes the triple scalar product

        :param Coord1:
        :type Coord1: gp_XYZ
        :param Coord2:
        :type Coord2: gp_XYZ
        :rtype: float

        """
        return _gp.gp_XYZ_DotCross(self, *args)

    def Multiply(self, *args):
        """
        * <self>.X() = <self>.X() * Scalar; <self>.Y() = <self>.Y() * Scalar; <self>.Z() = <self>.Z() * Scalar;

        :param Scalar:
        :type Scalar: float
        :rtype: None

        * <self>.X() = <self>.X() * Other.X(); <self>.Y() = <self>.Y() * Other.Y(); <self>.Z() = <self>.Z() * Other.Z();

        :param Other:
        :type Other: gp_XYZ
        :rtype: None

        * <self> = Matrix * <self>

        :param Matrix:
        :type Matrix: gp_Mat
        :rtype: None

        """
        return _gp.gp_XYZ_Multiply(self, *args)

    def __imul__(self, *args):
        """
        :param Scalar:
        :type Scalar: float
        :rtype: None

        :param Other:
        :type Other: gp_XYZ
        :rtype: None

        :param Matrix:
        :type Matrix: gp_Mat
        :rtype: None

        """
        return _gp.gp_XYZ___imul__(self, *args)

    def Multiplied(self, *args):
        """
        * New.X() = <self>.X() * Scalar; New.Y() = <self>.Y() * Scalar; New.Z() = <self>.Z() * Scalar;

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XYZ

        * new.X() = <self>.X() * Other.X(); new.Y() = <self>.Y() * Other.Y(); new.Z() = <self>.Z() * Other.Z();

        :param Other:
        :type Other: gp_XYZ
        :rtype: gp_XYZ

        * New = Matrix * <self>

        :param Matrix:
        :type Matrix: gp_Mat
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Multiplied(self, *args)

    def __mul__(self, *args):
        """
        :param Other:
        :type Other: gp_XYZ
        :rtype: float

        :param Scalar:
        :type Scalar: float
        :rtype: gp_XYZ

        :param Matrix:
        :type Matrix: gp_Mat
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ___mul__(self, *args)

    def Normalize(self, *args):
        """
        * <self>.X() = <self>.X()/ <self>.Modulus() <self>.Y() = <self>.Y()/ <self>.Modulus() <self>.Z() = <self>.Z()/ <self>.Modulus() Raised if <self>.Modulus() <= Resolution from gp

        :rtype: None

        """
        return _gp.gp_XYZ_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * New.X() = <self>.X()/ <self>.Modulus() New.Y() = <self>.Y()/ <self>.Modulus() New.Z() = <self>.Z()/ <self>.Modulus() Raised if <self>.Modulus() <= Resolution from gp

        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Normalized(self, *args)

    def Reverse(self, *args):
        """
        * <self>.X() = -<self>.X() <self>.Y() = -<self>.Y() <self>.Z() = -<self>.Z()

        :rtype: None

        """
        return _gp.gp_XYZ_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * New.X() = -<self>.X() New.Y() = -<self>.Y() New.Z() = -<self>.Z()

        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Reversed(self, *args)

    def Subtract(self, *args):
        """
        * <self>.X() = <self>.X() - Other.X() <self>.Y() = <self>.Y() - Other.Y() <self>.Z() = <self>.Z() - Other.Z()

        :param Right:
        :type Right: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ_Subtract(self, *args)

    def __isub__(self, *args):
        """
        :param Right:
        :type Right: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ___isub__(self, *args)

    def Subtracted(self, *args):
        """
        * new.X() = <self>.X() - Other.X() new.Y() = <self>.Y() - Other.Y() new.Z() = <self>.Z() - Other.Z()

        :param Right:
        :type Right: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ_Subtracted(self, *args)

    def __sub__(self, *args):
        """
        :param Right:
        :type Right: gp_XYZ
        :rtype: gp_XYZ

        """
        return _gp.gp_XYZ___sub__(self, *args)

    def SetLinearForm(self, *args):
        """
        * <self> is set to the following linear form : A1 * XYZ1 + A2 * XYZ2 + A3 * XYZ3 + XYZ4

        :param A1:
        :type A1: float
        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param A2:
        :type A2: float
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :param A3:
        :type A3: float
        :param XYZ3:
        :type XYZ3: gp_XYZ
        :param XYZ4:
        :type XYZ4: gp_XYZ
        :rtype: None

        * <self> is set to the following linear form : A1 * XYZ1 + A2 * XYZ2 + A3 * XYZ3

        :param A1:
        :type A1: float
        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param A2:
        :type A2: float
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :param A3:
        :type A3: float
        :param XYZ3:
        :type XYZ3: gp_XYZ
        :rtype: None

        * <self> is set to the following linear form : A1 * XYZ1 + A2 * XYZ2 + XYZ3

        :param A1:
        :type A1: float
        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param A2:
        :type A2: float
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :param XYZ3:
        :type XYZ3: gp_XYZ
        :rtype: None

        * <self> is set to the following linear form : A1 * XYZ1 + A2 * XYZ2

        :param A1:
        :type A1: float
        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param A2:
        :type A2: float
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :rtype: None

        * <self> is set to the following linear form : A1 * XYZ1 + XYZ2

        :param A1:
        :type A1: float
        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :rtype: None

        * <self> is set to the following linear form : XYZ1 + XYZ2

        :param XYZ1:
        :type XYZ1: gp_XYZ
        :param XYZ2:
        :type XYZ2: gp_XYZ
        :rtype: None

        """
        return _gp.gp_XYZ_SetLinearForm(self, *args)

    def _CSFDB_Getgp_XYZx(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_XYZ__CSFDB_Getgp_XYZx(self, *args)

    def _CSFDB_Setgp_XYZx(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_XYZ__CSFDB_Setgp_XYZx(self, *args)

    def _CSFDB_Getgp_XYZy(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_XYZ__CSFDB_Getgp_XYZy(self, *args)

    def _CSFDB_Setgp_XYZy(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_XYZ__CSFDB_Setgp_XYZy(self, *args)

    def _CSFDB_Getgp_XYZz(self, *args):
        """
        :rtype: float

        """
        return _gp.gp_XYZ__CSFDB_Getgp_XYZz(self, *args)

    def _CSFDB_Setgp_XYZz(self, *args):
        """
        :param p:
        :type p: float
        :rtype: None

        """
        return _gp.gp_XYZ__CSFDB_Setgp_XYZz(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


gp_XYZ.SetCoord = new_instancemethod(_gp.gp_XYZ_SetCoord,None,gp_XYZ)
gp_XYZ.SetX = new_instancemethod(_gp.gp_XYZ_SetX,None,gp_XYZ)
gp_XYZ.SetY = new_instancemethod(_gp.gp_XYZ_SetY,None,gp_XYZ)
gp_XYZ.SetZ = new_instancemethod(_gp.gp_XYZ_SetZ,None,gp_XYZ)
gp_XYZ.Coord = new_instancemethod(_gp.gp_XYZ_Coord,None,gp_XYZ)
gp_XYZ.X = new_instancemethod(_gp.gp_XYZ_X,None,gp_XYZ)
gp_XYZ.Y = new_instancemethod(_gp.gp_XYZ_Y,None,gp_XYZ)
gp_XYZ.Z = new_instancemethod(_gp.gp_XYZ_Z,None,gp_XYZ)
gp_XYZ.Modulus = new_instancemethod(_gp.gp_XYZ_Modulus,None,gp_XYZ)
gp_XYZ.SquareModulus = new_instancemethod(_gp.gp_XYZ_SquareModulus,None,gp_XYZ)
gp_XYZ.IsEqual = new_instancemethod(_gp.gp_XYZ_IsEqual,None,gp_XYZ)
gp_XYZ.Add = new_instancemethod(_gp.gp_XYZ_Add,None,gp_XYZ)
gp_XYZ.__iadd__ = new_instancemethod(_gp.gp_XYZ___iadd__,None,gp_XYZ)
gp_XYZ.Added = new_instancemethod(_gp.gp_XYZ_Added,None,gp_XYZ)
gp_XYZ.__add__ = new_instancemethod(_gp.gp_XYZ___add__,None,gp_XYZ)
gp_XYZ.Cross = new_instancemethod(_gp.gp_XYZ_Cross,None,gp_XYZ)
gp_XYZ.__ixor__ = new_instancemethod(_gp.gp_XYZ___ixor__,None,gp_XYZ)
gp_XYZ.Crossed = new_instancemethod(_gp.gp_XYZ_Crossed,None,gp_XYZ)
gp_XYZ.__xor__ = new_instancemethod(_gp.gp_XYZ___xor__,None,gp_XYZ)
gp_XYZ.CrossMagnitude = new_instancemethod(_gp.gp_XYZ_CrossMagnitude,None,gp_XYZ)
gp_XYZ.CrossSquareMagnitude = new_instancemethod(_gp.gp_XYZ_CrossSquareMagnitude,None,gp_XYZ)
gp_XYZ.CrossCross = new_instancemethod(_gp.gp_XYZ_CrossCross,None,gp_XYZ)
gp_XYZ.CrossCrossed = new_instancemethod(_gp.gp_XYZ_CrossCrossed,None,gp_XYZ)
gp_XYZ.Divide = new_instancemethod(_gp.gp_XYZ_Divide,None,gp_XYZ)
gp_XYZ.__idiv__ = new_instancemethod(_gp.gp_XYZ___idiv__,None,gp_XYZ)
gp_XYZ.Divided = new_instancemethod(_gp.gp_XYZ_Divided,None,gp_XYZ)
gp_XYZ.__div__ = new_instancemethod(_gp.gp_XYZ___div__,None,gp_XYZ)
gp_XYZ.Dot = new_instancemethod(_gp.gp_XYZ_Dot,None,gp_XYZ)
gp_XYZ.DotCross = new_instancemethod(_gp.gp_XYZ_DotCross,None,gp_XYZ)
gp_XYZ.Multiply = new_instancemethod(_gp.gp_XYZ_Multiply,None,gp_XYZ)
gp_XYZ.__imul__ = new_instancemethod(_gp.gp_XYZ___imul__,None,gp_XYZ)
gp_XYZ.Multiplied = new_instancemethod(_gp.gp_XYZ_Multiplied,None,gp_XYZ)
gp_XYZ.__mul__ = new_instancemethod(_gp.gp_XYZ___mul__,None,gp_XYZ)
gp_XYZ.Normalize = new_instancemethod(_gp.gp_XYZ_Normalize,None,gp_XYZ)
gp_XYZ.Normalized = new_instancemethod(_gp.gp_XYZ_Normalized,None,gp_XYZ)
gp_XYZ.Reverse = new_instancemethod(_gp.gp_XYZ_Reverse,None,gp_XYZ)
gp_XYZ.Reversed = new_instancemethod(_gp.gp_XYZ_Reversed,None,gp_XYZ)
gp_XYZ.Subtract = new_instancemethod(_gp.gp_XYZ_Subtract,None,gp_XYZ)
gp_XYZ.__isub__ = new_instancemethod(_gp.gp_XYZ___isub__,None,gp_XYZ)
gp_XYZ.Subtracted = new_instancemethod(_gp.gp_XYZ_Subtracted,None,gp_XYZ)
gp_XYZ.__sub__ = new_instancemethod(_gp.gp_XYZ___sub__,None,gp_XYZ)
gp_XYZ.SetLinearForm = new_instancemethod(_gp.gp_XYZ_SetLinearForm,None,gp_XYZ)
gp_XYZ._CSFDB_Getgp_XYZx = new_instancemethod(_gp.gp_XYZ__CSFDB_Getgp_XYZx,None,gp_XYZ)
gp_XYZ._CSFDB_Setgp_XYZx = new_instancemethod(_gp.gp_XYZ__CSFDB_Setgp_XYZx,None,gp_XYZ)
gp_XYZ._CSFDB_Getgp_XYZy = new_instancemethod(_gp.gp_XYZ__CSFDB_Getgp_XYZy,None,gp_XYZ)
gp_XYZ._CSFDB_Setgp_XYZy = new_instancemethod(_gp.gp_XYZ__CSFDB_Setgp_XYZy,None,gp_XYZ)
gp_XYZ._CSFDB_Getgp_XYZz = new_instancemethod(_gp.gp_XYZ__CSFDB_Getgp_XYZz,None,gp_XYZ)
gp_XYZ._CSFDB_Setgp_XYZz = new_instancemethod(_gp.gp_XYZ__CSFDB_Setgp_XYZz,None,gp_XYZ)
gp_XYZ._kill_pointed = new_instancemethod(_gp.gp_XYZ__kill_pointed,None,gp_XYZ)
gp_XYZ_swigregister = _gp.gp_XYZ_swigregister
gp_XYZ_swigregister(gp_XYZ)



