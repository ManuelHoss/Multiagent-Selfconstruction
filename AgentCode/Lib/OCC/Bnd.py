# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _Bnd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Bnd', [dirname(__file__)])
        except ImportError:
            import _Bnd
            return _Bnd
        if fp is not None:
            try:
                _mod = imp.load_module('_Bnd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Bnd = swig_import_helper()
    del swig_import_helper
else:
    import _Bnd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Bnd.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_Bnd.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Bnd.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Bnd.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Bnd.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Bnd.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Bnd.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Bnd.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Bnd.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Bnd.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Bnd.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Bnd.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Bnd.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Bnd.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Bnd.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Bnd.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Bnd.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _Bnd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.gp
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
class Bnd_Array1OfBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Bnd_Box &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Bnd.Bnd_Array1OfBox_swiginit(self,_Bnd.new_Bnd_Array1OfBox(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Box &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_Array1OfBox_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfBox &
        :rtype: Bnd_Array1OfBox

        """
        return _Bnd.Bnd_Array1OfBox_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfBox &
        :rtype: Bnd_Array1OfBox

        """
        return _Bnd.Bnd_Array1OfBox_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Box &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_Array1OfBox_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_Array1OfBox_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Array1OfBox.Init = new_instancemethod(_Bnd.Bnd_Array1OfBox_Init,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Destroy = new_instancemethod(_Bnd.Bnd_Array1OfBox_Destroy,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.IsAllocated = new_instancemethod(_Bnd.Bnd_Array1OfBox_IsAllocated,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Assign = new_instancemethod(_Bnd.Bnd_Array1OfBox_Assign,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Set = new_instancemethod(_Bnd.Bnd_Array1OfBox_Set,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Length = new_instancemethod(_Bnd.Bnd_Array1OfBox_Length,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Lower = new_instancemethod(_Bnd.Bnd_Array1OfBox_Lower,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Upper = new_instancemethod(_Bnd.Bnd_Array1OfBox_Upper,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.SetValue = new_instancemethod(_Bnd.Bnd_Array1OfBox_SetValue,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.Value = new_instancemethod(_Bnd.Bnd_Array1OfBox_Value,None,Bnd_Array1OfBox)
Bnd_Array1OfBox.ChangeValue = new_instancemethod(_Bnd.Bnd_Array1OfBox_ChangeValue,None,Bnd_Array1OfBox)
Bnd_Array1OfBox._kill_pointed = new_instancemethod(_Bnd.Bnd_Array1OfBox__kill_pointed,None,Bnd_Array1OfBox)
Bnd_Array1OfBox_swigregister = _Bnd.Bnd_Array1OfBox_swigregister
Bnd_Array1OfBox_swigregister(Bnd_Array1OfBox)

class Bnd_Array1OfBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Bnd_Box2d &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Bnd.Bnd_Array1OfBox2d_swiginit(self,_Bnd.new_Bnd_Array1OfBox2d(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Box2d &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox2d_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox2d_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_Array1OfBox2d_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfBox2d &
        :rtype: Bnd_Array1OfBox2d

        """
        return _Bnd.Bnd_Array1OfBox2d_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfBox2d &
        :rtype: Bnd_Array1OfBox2d

        """
        return _Bnd.Bnd_Array1OfBox2d_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox2d_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox2d_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfBox2d_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Box2d &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfBox2d_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box2d

        """
        return _Bnd.Bnd_Array1OfBox2d_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box2d

        """
        return _Bnd.Bnd_Array1OfBox2d_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Array1OfBox2d.Init = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Init,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Destroy = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Destroy,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.IsAllocated = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_IsAllocated,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Assign = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Assign,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Set = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Set,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Length = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Length,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Lower = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Lower,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Upper = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Upper,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.SetValue = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_SetValue,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.Value = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_Value,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d.ChangeValue = new_instancemethod(_Bnd.Bnd_Array1OfBox2d_ChangeValue,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d._kill_pointed = new_instancemethod(_Bnd.Bnd_Array1OfBox2d__kill_pointed,None,Bnd_Array1OfBox2d)
Bnd_Array1OfBox2d_swigregister = _Bnd.Bnd_Array1OfBox2d_swigregister
Bnd_Array1OfBox2d_swigregister(Bnd_Array1OfBox2d)

class Bnd_Array1OfSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Bnd_Sphere &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Bnd.Bnd_Array1OfSphere_swiginit(self,_Bnd.new_Bnd_Array1OfSphere(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Sphere &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfSphere_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfSphere_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_Array1OfSphere_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfSphere &
        :rtype: Bnd_Array1OfSphere

        """
        return _Bnd.Bnd_Array1OfSphere_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Bnd_Array1OfSphere &
        :rtype: Bnd_Array1OfSphere

        """
        return _Bnd.Bnd_Array1OfSphere_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfSphere_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfSphere_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_Array1OfSphere_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Sphere &
        :rtype: None

        """
        return _Bnd.Bnd_Array1OfSphere_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Sphere

        """
        return _Bnd.Bnd_Array1OfSphere_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Sphere

        """
        return _Bnd.Bnd_Array1OfSphere_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Array1OfSphere.Init = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Init,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Destroy = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Destroy,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.IsAllocated = new_instancemethod(_Bnd.Bnd_Array1OfSphere_IsAllocated,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Assign = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Assign,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Set = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Set,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Length = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Length,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Lower = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Lower,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Upper = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Upper,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.SetValue = new_instancemethod(_Bnd.Bnd_Array1OfSphere_SetValue,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.Value = new_instancemethod(_Bnd.Bnd_Array1OfSphere_Value,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere.ChangeValue = new_instancemethod(_Bnd.Bnd_Array1OfSphere_ChangeValue,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere._kill_pointed = new_instancemethod(_Bnd.Bnd_Array1OfSphere__kill_pointed,None,Bnd_Array1OfSphere)
Bnd_Array1OfSphere_swigregister = _Bnd.Bnd_Array1OfSphere_swigregister
Bnd_Array1OfSphere_swigregister(Bnd_Array1OfSphere)

class Bnd_B2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theCenter:
        :type theCenter: gp_XY
        :param theHSize:
        :type theHSize: gp_XY
        :rtype: None

        """
        _Bnd.Bnd_B2d_swiginit(self,_Bnd.new_Bnd_B2d(*args))
    def IsVoid(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_B2d_IsVoid(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_B2d_Clear(self, *args)

    def Add(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XY
        :rtype: None

        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: None

        :param theBox:
        :type theBox: Bnd_B2d &
        :rtype: None

        """
        return _Bnd.Bnd_B2d_Add(self, *args)

    def CornerMin(self, *args):
        """
        :rtype: gp_XY

        """
        return _Bnd.Bnd_B2d_CornerMin(self, *args)

    def CornerMax(self, *args):
        """
        :rtype: gp_XY

        """
        return _Bnd.Bnd_B2d_CornerMax(self, *args)

    def SquareExtent(self, *args):
        """
        :rtype: float

        """
        return _Bnd.Bnd_B2d_SquareExtent(self, *args)

    def Enlarge(self, *args):
        """
        :param theDiff:
        :type theDiff: float
        :rtype: None

        """
        return _Bnd.Bnd_B2d_Enlarge(self, *args)

    def Limit(self, *args):
        """
        :param theOtherBox:
        :type theOtherBox: Bnd_B2d &
        :rtype: bool

        """
        return _Bnd.Bnd_B2d_Limit(self, *args)

    def Transformed(self, *args):
        """
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: Bnd_B2d

        """
        return _Bnd.Bnd_B2d_Transformed(self, *args)

    def IsOut(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XY
        :rtype: bool

        :param theCenter:
        :type theCenter: gp_XY
        :param theRadius:
        :type theRadius: float
        :param isCircleHollow: default value is Standard_False
        :type isCircleHollow: bool
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B2d &
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B2d &
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: bool

        :param theLine:
        :type theLine: gp_Ax2d
        :rtype: bool

        :param theP0:
        :type theP0: gp_XY
        :param theP1:
        :type theP1: gp_XY
        :rtype: bool

        """
        return _Bnd.Bnd_B2d_IsOut(self, *args)

    def IsIn(self, *args):
        """
        :param theBox:
        :type theBox: Bnd_B2d &
        :rtype: bool

        :param theBox:
        :type theBox: Bnd_B2d &
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: bool

        """
        return _Bnd.Bnd_B2d_IsIn(self, *args)

    def SetCenter(self, *args):
        """
        :param theCenter:
        :type theCenter: gp_XY
        :rtype: None

        """
        return _Bnd.Bnd_B2d_SetCenter(self, *args)

    def SetHSize(self, *args):
        """
        :param theHSize:
        :type theHSize: gp_XY
        :rtype: None

        """
        return _Bnd.Bnd_B2d_SetHSize(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_B2d.IsVoid = new_instancemethod(_Bnd.Bnd_B2d_IsVoid,None,Bnd_B2d)
Bnd_B2d.Clear = new_instancemethod(_Bnd.Bnd_B2d_Clear,None,Bnd_B2d)
Bnd_B2d.Add = new_instancemethod(_Bnd.Bnd_B2d_Add,None,Bnd_B2d)
Bnd_B2d.CornerMin = new_instancemethod(_Bnd.Bnd_B2d_CornerMin,None,Bnd_B2d)
Bnd_B2d.CornerMax = new_instancemethod(_Bnd.Bnd_B2d_CornerMax,None,Bnd_B2d)
Bnd_B2d.SquareExtent = new_instancemethod(_Bnd.Bnd_B2d_SquareExtent,None,Bnd_B2d)
Bnd_B2d.Enlarge = new_instancemethod(_Bnd.Bnd_B2d_Enlarge,None,Bnd_B2d)
Bnd_B2d.Limit = new_instancemethod(_Bnd.Bnd_B2d_Limit,None,Bnd_B2d)
Bnd_B2d.Transformed = new_instancemethod(_Bnd.Bnd_B2d_Transformed,None,Bnd_B2d)
Bnd_B2d.IsOut = new_instancemethod(_Bnd.Bnd_B2d_IsOut,None,Bnd_B2d)
Bnd_B2d.IsIn = new_instancemethod(_Bnd.Bnd_B2d_IsIn,None,Bnd_B2d)
Bnd_B2d.SetCenter = new_instancemethod(_Bnd.Bnd_B2d_SetCenter,None,Bnd_B2d)
Bnd_B2d.SetHSize = new_instancemethod(_Bnd.Bnd_B2d_SetHSize,None,Bnd_B2d)
Bnd_B2d._kill_pointed = new_instancemethod(_Bnd.Bnd_B2d__kill_pointed,None,Bnd_B2d)
Bnd_B2d_swigregister = _Bnd.Bnd_B2d_swigregister
Bnd_B2d_swigregister(Bnd_B2d)

class Bnd_B2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theCenter:
        :type theCenter: gp_XY
        :param theHSize:
        :type theHSize: gp_XY
        :rtype: None

        """
        _Bnd.Bnd_B2f_swiginit(self,_Bnd.new_Bnd_B2f(*args))
    def IsVoid(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_B2f_IsVoid(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_B2f_Clear(self, *args)

    def Add(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XY
        :rtype: None

        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: None

        :param theBox:
        :type theBox: Bnd_B2f &
        :rtype: None

        """
        return _Bnd.Bnd_B2f_Add(self, *args)

    def CornerMin(self, *args):
        """
        :rtype: gp_XY

        """
        return _Bnd.Bnd_B2f_CornerMin(self, *args)

    def CornerMax(self, *args):
        """
        :rtype: gp_XY

        """
        return _Bnd.Bnd_B2f_CornerMax(self, *args)

    def SquareExtent(self, *args):
        """
        :rtype: float

        """
        return _Bnd.Bnd_B2f_SquareExtent(self, *args)

    def Enlarge(self, *args):
        """
        :param theDiff:
        :type theDiff: float
        :rtype: None

        """
        return _Bnd.Bnd_B2f_Enlarge(self, *args)

    def Limit(self, *args):
        """
        :param theOtherBox:
        :type theOtherBox: Bnd_B2f &
        :rtype: bool

        """
        return _Bnd.Bnd_B2f_Limit(self, *args)

    def Transformed(self, *args):
        """
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: Bnd_B2f

        """
        return _Bnd.Bnd_B2f_Transformed(self, *args)

    def IsOut(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XY
        :rtype: bool

        :param theCenter:
        :type theCenter: gp_XY
        :param theRadius:
        :type theRadius: float
        :param isCircleHollow: default value is Standard_False
        :type isCircleHollow: bool
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B2f &
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B2f &
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: bool

        :param theLine:
        :type theLine: gp_Ax2d
        :rtype: bool

        :param theP0:
        :type theP0: gp_XY
        :param theP1:
        :type theP1: gp_XY
        :rtype: bool

        """
        return _Bnd.Bnd_B2f_IsOut(self, *args)

    def IsIn(self, *args):
        """
        :param theBox:
        :type theBox: Bnd_B2f &
        :rtype: bool

        :param theBox:
        :type theBox: Bnd_B2f &
        :param theTrsf:
        :type theTrsf: gp_Trsf2d
        :rtype: bool

        """
        return _Bnd.Bnd_B2f_IsIn(self, *args)

    def SetCenter(self, *args):
        """
        :param theCenter:
        :type theCenter: gp_XY
        :rtype: None

        """
        return _Bnd.Bnd_B2f_SetCenter(self, *args)

    def SetHSize(self, *args):
        """
        :param theHSize:
        :type theHSize: gp_XY
        :rtype: None

        """
        return _Bnd.Bnd_B2f_SetHSize(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_B2f.IsVoid = new_instancemethod(_Bnd.Bnd_B2f_IsVoid,None,Bnd_B2f)
Bnd_B2f.Clear = new_instancemethod(_Bnd.Bnd_B2f_Clear,None,Bnd_B2f)
Bnd_B2f.Add = new_instancemethod(_Bnd.Bnd_B2f_Add,None,Bnd_B2f)
Bnd_B2f.CornerMin = new_instancemethod(_Bnd.Bnd_B2f_CornerMin,None,Bnd_B2f)
Bnd_B2f.CornerMax = new_instancemethod(_Bnd.Bnd_B2f_CornerMax,None,Bnd_B2f)
Bnd_B2f.SquareExtent = new_instancemethod(_Bnd.Bnd_B2f_SquareExtent,None,Bnd_B2f)
Bnd_B2f.Enlarge = new_instancemethod(_Bnd.Bnd_B2f_Enlarge,None,Bnd_B2f)
Bnd_B2f.Limit = new_instancemethod(_Bnd.Bnd_B2f_Limit,None,Bnd_B2f)
Bnd_B2f.Transformed = new_instancemethod(_Bnd.Bnd_B2f_Transformed,None,Bnd_B2f)
Bnd_B2f.IsOut = new_instancemethod(_Bnd.Bnd_B2f_IsOut,None,Bnd_B2f)
Bnd_B2f.IsIn = new_instancemethod(_Bnd.Bnd_B2f_IsIn,None,Bnd_B2f)
Bnd_B2f.SetCenter = new_instancemethod(_Bnd.Bnd_B2f_SetCenter,None,Bnd_B2f)
Bnd_B2f.SetHSize = new_instancemethod(_Bnd.Bnd_B2f_SetHSize,None,Bnd_B2f)
Bnd_B2f._kill_pointed = new_instancemethod(_Bnd.Bnd_B2f__kill_pointed,None,Bnd_B2f)
Bnd_B2f_swigregister = _Bnd.Bnd_B2f_swigregister
Bnd_B2f_swigregister(Bnd_B2f)

class Bnd_B3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theCenter:
        :type theCenter: gp_XYZ
        :param theHSize:
        :type theHSize: gp_XYZ
        :rtype: None

        """
        _Bnd.Bnd_B3d_swiginit(self,_Bnd.new_Bnd_B3d(*args))
    def IsVoid(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_B3d_IsVoid(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_B3d_Clear(self, *args)

    def Add(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XYZ
        :rtype: None

        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: None

        :param theBox:
        :type theBox: Bnd_B3d &
        :rtype: None

        """
        return _Bnd.Bnd_B3d_Add(self, *args)

    def CornerMin(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Bnd.Bnd_B3d_CornerMin(self, *args)

    def CornerMax(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Bnd.Bnd_B3d_CornerMax(self, *args)

    def SquareExtent(self, *args):
        """
        :rtype: float

        """
        return _Bnd.Bnd_B3d_SquareExtent(self, *args)

    def Enlarge(self, *args):
        """
        :param theDiff:
        :type theDiff: float
        :rtype: None

        """
        return _Bnd.Bnd_B3d_Enlarge(self, *args)

    def Limit(self, *args):
        """
        :param theOtherBox:
        :type theOtherBox: Bnd_B3d &
        :rtype: bool

        """
        return _Bnd.Bnd_B3d_Limit(self, *args)

    def Transformed(self, *args):
        """
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: Bnd_B3d

        """
        return _Bnd.Bnd_B3d_Transformed(self, *args)

    def IsOut(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XYZ
        :rtype: bool

        :param theCenter:
        :type theCenter: gp_XYZ
        :param theRadius:
        :type theRadius: float
        :param isSphereHollow: default value is Standard_False
        :type isSphereHollow: bool
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B3d &
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B3d &
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: bool

        :param theLine:
        :type theLine: gp_Ax1
        :param isRay: default value is Standard_False
        :type isRay: bool
        :param theOverthickness: default value is 0.0
        :type theOverthickness: float
        :rtype: bool

        :param thePlane:
        :type thePlane: gp_Ax3
        :rtype: bool

        """
        return _Bnd.Bnd_B3d_IsOut(self, *args)

    def IsIn(self, *args):
        """
        :param theBox:
        :type theBox: Bnd_B3d &
        :rtype: bool

        :param theBox:
        :type theBox: Bnd_B3d &
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: bool

        """
        return _Bnd.Bnd_B3d_IsIn(self, *args)

    def SetCenter(self, *args):
        """
        :param theCenter:
        :type theCenter: gp_XYZ
        :rtype: None

        """
        return _Bnd.Bnd_B3d_SetCenter(self, *args)

    def SetHSize(self, *args):
        """
        :param theHSize:
        :type theHSize: gp_XYZ
        :rtype: None

        """
        return _Bnd.Bnd_B3d_SetHSize(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_B3d.IsVoid = new_instancemethod(_Bnd.Bnd_B3d_IsVoid,None,Bnd_B3d)
Bnd_B3d.Clear = new_instancemethod(_Bnd.Bnd_B3d_Clear,None,Bnd_B3d)
Bnd_B3d.Add = new_instancemethod(_Bnd.Bnd_B3d_Add,None,Bnd_B3d)
Bnd_B3d.CornerMin = new_instancemethod(_Bnd.Bnd_B3d_CornerMin,None,Bnd_B3d)
Bnd_B3d.CornerMax = new_instancemethod(_Bnd.Bnd_B3d_CornerMax,None,Bnd_B3d)
Bnd_B3d.SquareExtent = new_instancemethod(_Bnd.Bnd_B3d_SquareExtent,None,Bnd_B3d)
Bnd_B3d.Enlarge = new_instancemethod(_Bnd.Bnd_B3d_Enlarge,None,Bnd_B3d)
Bnd_B3d.Limit = new_instancemethod(_Bnd.Bnd_B3d_Limit,None,Bnd_B3d)
Bnd_B3d.Transformed = new_instancemethod(_Bnd.Bnd_B3d_Transformed,None,Bnd_B3d)
Bnd_B3d.IsOut = new_instancemethod(_Bnd.Bnd_B3d_IsOut,None,Bnd_B3d)
Bnd_B3d.IsIn = new_instancemethod(_Bnd.Bnd_B3d_IsIn,None,Bnd_B3d)
Bnd_B3d.SetCenter = new_instancemethod(_Bnd.Bnd_B3d_SetCenter,None,Bnd_B3d)
Bnd_B3d.SetHSize = new_instancemethod(_Bnd.Bnd_B3d_SetHSize,None,Bnd_B3d)
Bnd_B3d._kill_pointed = new_instancemethod(_Bnd.Bnd_B3d__kill_pointed,None,Bnd_B3d)
Bnd_B3d_swigregister = _Bnd.Bnd_B3d_swigregister
Bnd_B3d_swigregister(Bnd_B3d)

class Bnd_B3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param theCenter:
        :type theCenter: gp_XYZ
        :param theHSize:
        :type theHSize: gp_XYZ
        :rtype: None

        """
        _Bnd.Bnd_B3f_swiginit(self,_Bnd.new_Bnd_B3f(*args))
    def IsVoid(self, *args):
        """
        :rtype: bool

        """
        return _Bnd.Bnd_B3f_IsVoid(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_B3f_Clear(self, *args)

    def Add(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XYZ
        :rtype: None

        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: None

        :param theBox:
        :type theBox: Bnd_B3f &
        :rtype: None

        """
        return _Bnd.Bnd_B3f_Add(self, *args)

    def CornerMin(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Bnd.Bnd_B3f_CornerMin(self, *args)

    def CornerMax(self, *args):
        """
        :rtype: gp_XYZ

        """
        return _Bnd.Bnd_B3f_CornerMax(self, *args)

    def SquareExtent(self, *args):
        """
        :rtype: float

        """
        return _Bnd.Bnd_B3f_SquareExtent(self, *args)

    def Enlarge(self, *args):
        """
        :param theDiff:
        :type theDiff: float
        :rtype: None

        """
        return _Bnd.Bnd_B3f_Enlarge(self, *args)

    def Limit(self, *args):
        """
        :param theOtherBox:
        :type theOtherBox: Bnd_B3f &
        :rtype: bool

        """
        return _Bnd.Bnd_B3f_Limit(self, *args)

    def Transformed(self, *args):
        """
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: Bnd_B3f

        """
        return _Bnd.Bnd_B3f_Transformed(self, *args)

    def IsOut(self, *args):
        """
        :param thePnt:
        :type thePnt: gp_XYZ
        :rtype: bool

        :param theCenter:
        :type theCenter: gp_XYZ
        :param theRadius:
        :type theRadius: float
        :param isSphereHollow: default value is Standard_False
        :type isSphereHollow: bool
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B3f &
        :rtype: bool

        :param theOtherBox:
        :type theOtherBox: Bnd_B3f &
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: bool

        :param theLine:
        :type theLine: gp_Ax1
        :param isRay: default value is Standard_False
        :type isRay: bool
        :param theOverthickness: default value is 0.0
        :type theOverthickness: float
        :rtype: bool

        :param thePlane:
        :type thePlane: gp_Ax3
        :rtype: bool

        """
        return _Bnd.Bnd_B3f_IsOut(self, *args)

    def IsIn(self, *args):
        """
        :param theBox:
        :type theBox: Bnd_B3f &
        :rtype: bool

        :param theBox:
        :type theBox: Bnd_B3f &
        :param theTrsf:
        :type theTrsf: gp_Trsf
        :rtype: bool

        """
        return _Bnd.Bnd_B3f_IsIn(self, *args)

    def SetCenter(self, *args):
        """
        :param theCenter:
        :type theCenter: gp_XYZ
        :rtype: None

        """
        return _Bnd.Bnd_B3f_SetCenter(self, *args)

    def SetHSize(self, *args):
        """
        :param theHSize:
        :type theHSize: gp_XYZ
        :rtype: None

        """
        return _Bnd.Bnd_B3f_SetHSize(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_B3f.IsVoid = new_instancemethod(_Bnd.Bnd_B3f_IsVoid,None,Bnd_B3f)
Bnd_B3f.Clear = new_instancemethod(_Bnd.Bnd_B3f_Clear,None,Bnd_B3f)
Bnd_B3f.Add = new_instancemethod(_Bnd.Bnd_B3f_Add,None,Bnd_B3f)
Bnd_B3f.CornerMin = new_instancemethod(_Bnd.Bnd_B3f_CornerMin,None,Bnd_B3f)
Bnd_B3f.CornerMax = new_instancemethod(_Bnd.Bnd_B3f_CornerMax,None,Bnd_B3f)
Bnd_B3f.SquareExtent = new_instancemethod(_Bnd.Bnd_B3f_SquareExtent,None,Bnd_B3f)
Bnd_B3f.Enlarge = new_instancemethod(_Bnd.Bnd_B3f_Enlarge,None,Bnd_B3f)
Bnd_B3f.Limit = new_instancemethod(_Bnd.Bnd_B3f_Limit,None,Bnd_B3f)
Bnd_B3f.Transformed = new_instancemethod(_Bnd.Bnd_B3f_Transformed,None,Bnd_B3f)
Bnd_B3f.IsOut = new_instancemethod(_Bnd.Bnd_B3f_IsOut,None,Bnd_B3f)
Bnd_B3f.IsIn = new_instancemethod(_Bnd.Bnd_B3f_IsIn,None,Bnd_B3f)
Bnd_B3f.SetCenter = new_instancemethod(_Bnd.Bnd_B3f_SetCenter,None,Bnd_B3f)
Bnd_B3f.SetHSize = new_instancemethod(_Bnd.Bnd_B3f_SetHSize,None,Bnd_B3f)
Bnd_B3f._kill_pointed = new_instancemethod(_Bnd.Bnd_B3f__kill_pointed,None,Bnd_B3f)
Bnd_B3f_swigregister = _Bnd.Bnd_B3f_swigregister
Bnd_B3f_swigregister(Bnd_B3f)

class Bnd_BoundSortBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an empty comparison algorithm for bounding boxes. The bounding boxes are then defined using the Initialize function.

        :rtype: None

        """
        _Bnd.Bnd_BoundSortBox_swiginit(self,_Bnd.new_Bnd_BoundSortBox(*args))
    def Initialize(self, *args):
        """
        * Initializes this comparison algorithm with - the set of bounding boxes SetOfBox.

        :param CompleteBox:
        :type CompleteBox: Bnd_Box &
        :param SetOfBox:
        :type SetOfBox: Handle_Bnd_HArray1OfBox &
        :rtype: None

        * Initializes this comparison algorithm with - the set of bounding boxes SetOfBox, where CompleteBox is given as the global bounding box of SetOfBox.

        :param SetOfBox:
        :type SetOfBox: Handle_Bnd_HArray1OfBox &
        :rtype: None

        * Initializes this comparison algorithm, giving it only - the maximum number nbComponents of the bounding boxes to be managed. Use the Add function to define the array of bounding boxes to be sorted by this algorithm.

        :param CompleteBox:
        :type CompleteBox: Bnd_Box &
        :param nbComponents:
        :type nbComponents: int
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox_Initialize(self, *args)

    def Add(self, *args):
        """
        * Adds the bounding box theBox at position boxIndex in the array of boxes to be sorted by this comparison algorithm. This function is used only in conjunction with the third syntax described in the synopsis of Initialize. Exceptions: - Standard_OutOfRange if boxIndex is not in the range [ 1,nbComponents ] where nbComponents is the maximum number of bounding boxes declared for this comparison algorithm at initialization. - Standard_MultiplyDefined if a box already exists at position boxIndex in the array of boxes to be sorted by this comparison algorithm.

        :param theBox:
        :type theBox: Bnd_Box &
        :param boxIndex:
        :type boxIndex: int
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox_Add(self, *args)

    def Compare(self, *args):
        """
        * Compares the bounding box theBox, with the set of bounding boxes to be sorted by this comparison algorithm, and returns the list of intersecting bounding boxes as a list of indexes on the array of bounding boxes used by this algorithm.

        :param theBox:
        :type theBox: Bnd_Box &
        :rtype: TColStd_ListOfInteger

        * Compares the plane P with the set of bounding boxes to be sorted by this comparison algorithm, and returns the list of intersecting bounding boxes as a list of indexes on the array of bounding boxes used by this algorithm.

        :param P:
        :type P: gp_Pln
        :rtype: TColStd_ListOfInteger

        """
        return _Bnd.Bnd_BoundSortBox_Compare(self, *args)

    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox_Dump(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox_Destroy(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_BoundSortBox.Initialize = new_instancemethod(_Bnd.Bnd_BoundSortBox_Initialize,None,Bnd_BoundSortBox)
Bnd_BoundSortBox.Add = new_instancemethod(_Bnd.Bnd_BoundSortBox_Add,None,Bnd_BoundSortBox)
Bnd_BoundSortBox.Compare = new_instancemethod(_Bnd.Bnd_BoundSortBox_Compare,None,Bnd_BoundSortBox)
Bnd_BoundSortBox.Dump = new_instancemethod(_Bnd.Bnd_BoundSortBox_Dump,None,Bnd_BoundSortBox)
Bnd_BoundSortBox.Destroy = new_instancemethod(_Bnd.Bnd_BoundSortBox_Destroy,None,Bnd_BoundSortBox)
Bnd_BoundSortBox._kill_pointed = new_instancemethod(_Bnd.Bnd_BoundSortBox__kill_pointed,None,Bnd_BoundSortBox)
Bnd_BoundSortBox_swigregister = _Bnd.Bnd_BoundSortBox_swigregister
Bnd_BoundSortBox_swigregister(Bnd_BoundSortBox)

class Bnd_BoundSortBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an empty comparison algorithm for 2D bounding boxes. The bounding boxes are then defined using the Initialize function.

        :rtype: None

        """
        _Bnd.Bnd_BoundSortBox2d_swiginit(self,_Bnd.new_Bnd_BoundSortBox2d(*args))
    def Initialize(self, *args):
        """
        * Initializes this comparison algorithm with - the set of 2D bounding boxes SetOfBox

        :param CompleteBox:
        :type CompleteBox: Bnd_Box2d &
        :param SetOfBox:
        :type SetOfBox: Handle_Bnd_HArray1OfBox2d &
        :rtype: None

        * Initializes this comparison algorithm with - the set of 2D bounding boxes SetOfBox, where CompleteBox is given as the global bounding box of SetOfBox.

        :param SetOfBox:
        :type SetOfBox: Handle_Bnd_HArray1OfBox2d &
        :rtype: None

        * Initializes this comparison algorithm, giving it only - the maximum number nbComponents, and - the global bounding box CompleteBox, of the 2D bounding boxes to be managed. Use the Add function to define the array of bounding boxes to be sorted by this algorithm.

        :param CompleteBox:
        :type CompleteBox: Bnd_Box2d &
        :param nbComponents:
        :type nbComponents: int
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox2d_Initialize(self, *args)

    def Add(self, *args):
        """
        * Adds the 2D bounding box theBox at position boxIndex in the array of boxes to be sorted by this comparison algorithm. This function is used only in conjunction with the third syntax described in the synopsis of Initialize. Exceptions - Standard_OutOfRange if boxIndex is not in the range [ 1,nbComponents ] where nbComponents is the maximum number of bounding boxes declared for this comparison algorithm at initialization. - Standard_MultiplyDefined if a box still exists at position boxIndex in the array of boxes to be sorted by this comparison algorithm.

        :param theBox:
        :type theBox: Bnd_Box2d &
        :param boxIndex:
        :type boxIndex: int
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox2d_Add(self, *args)

    def Compare(self, *args):
        """
        * Compares the 2D bounding box theBox with the set of bounding boxes to be sorted by this comparison algorithm, and returns the list of intersecting bounding boxes as a list of indexes on the array of bounding boxes used by this algorithm.

        :param theBox:
        :type theBox: Bnd_Box2d &
        :rtype: TColStd_ListOfInteger

        """
        return _Bnd.Bnd_BoundSortBox2d_Compare(self, *args)

    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_BoundSortBox2d_Dump(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_BoundSortBox2d.Initialize = new_instancemethod(_Bnd.Bnd_BoundSortBox2d_Initialize,None,Bnd_BoundSortBox2d)
Bnd_BoundSortBox2d.Add = new_instancemethod(_Bnd.Bnd_BoundSortBox2d_Add,None,Bnd_BoundSortBox2d)
Bnd_BoundSortBox2d.Compare = new_instancemethod(_Bnd.Bnd_BoundSortBox2d_Compare,None,Bnd_BoundSortBox2d)
Bnd_BoundSortBox2d.Dump = new_instancemethod(_Bnd.Bnd_BoundSortBox2d_Dump,None,Bnd_BoundSortBox2d)
Bnd_BoundSortBox2d._kill_pointed = new_instancemethod(_Bnd.Bnd_BoundSortBox2d__kill_pointed,None,Bnd_BoundSortBox2d)
Bnd_BoundSortBox2d_swigregister = _Bnd.Bnd_BoundSortBox2d_swigregister
Bnd_BoundSortBox2d_swigregister(Bnd_BoundSortBox2d)

class Bnd_Box(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty Box. The constructed box is qualified Void. Its gap is null.

        :rtype: None

        """
        _Bnd.Bnd_Box_swiginit(self,_Bnd.new_Bnd_Box(*args))
    def SetWhole(self, *args):
        """
        * Sets this bounding box so that it covers the whole of 3D space. It is infinitely long in all directions.

        :rtype: None

        """
        return _Bnd.Bnd_Box_SetWhole(self, *args)

    def SetVoid(self, *args):
        """
        * Sets this bounding box so that it is empty. All points are outside a void box.

        :rtype: None

        """
        return _Bnd.Bnd_Box_SetVoid(self, *args)

    def Set(self, *args):
        """
        * Sets this bounding box so that it bounds - the point P. This involves first setting this bounding box to be void and then adding the point P.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Sets this bounding box so that it bounds the half-line defined by point P and direction D, i.e. all points M defined by M=P+u*D, where u is greater than or equal to 0, are inside the bounding volume. This involves first setting this box to be void and then adding the half-line.

        :param P:
        :type P: gp_Pnt
        :param D:
        :type D: gp_Dir
        :rtype: None

        """
        return _Bnd.Bnd_Box_Set(self, *args)

    def Update(self, *args):
        """
        * Enlarges this bounding box, if required, so that it contains at least: - interval [ aXmin,aXmax ] in the 'X Direction', - interval [ aYmin,aYmax ] in the 'Y Direction', - interval [ aZmin,aZmax ] in the 'Z Direction';

        :param aXmin:
        :type aXmin: float
        :param aYmin:
        :type aYmin: float
        :param aZmin:
        :type aZmin: float
        :param aXmax:
        :type aXmax: float
        :param aYmax:
        :type aYmax: float
        :param aZmax:
        :type aZmax: float
        :rtype: None

        * Adds a point of coordinates (X,Y,Z) to this bounding box.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Bnd.Bnd_Box_Update(self, *args)

    def GetGap(self, *args):
        """
        * Returns the gap of this bounding box.

        :rtype: float

        """
        return _Bnd.Bnd_Box_GetGap(self, *args)

    def SetGap(self, *args):
        """
        * Set the gap of this bounding box to abs(Tol).

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Bnd.Bnd_Box_SetGap(self, *args)

    def Enlarge(self, *args):
        """
        * Enlarges the box with a tolerance value. (minvalues-Abs(<tol>) and maxvalues+Abs(<tol>)) //!	This means that the minimum values of its X, Y and Z intervals of definition, when they are finite, are reduced by the absolute value of Tol, while the maximum values are increased by the same amount.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Bnd.Bnd_Box_Enlarge(self, *args)

    def Get(self, *args):
        """
        * Returns the bounds of this bounding box. The gap is included. If this bounding box is infinite (i.e. 'open'), returned values may be equal to +/- Precision::Infinite(). if IsVoid()

        :param aXmin:
        :type aXmin: float &
        :param aYmin:
        :type aYmin: float &
        :param aZmin:
        :type aZmin: float &
        :param aXmax:
        :type aXmax: float &
        :param aYmax:
        :type aYmax: float &
        :param aZmax:
        :type aZmax: float &
        :rtype: None

        """
        return _Bnd.Bnd_Box_Get(self, *args)

    def OpenXmin(self, *args):
        """
        * The Box will be infinitely long in the Xmin direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenXmin(self, *args)

    def OpenXmax(self, *args):
        """
        * The Box will be infinitely long in the Xmax direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenXmax(self, *args)

    def OpenYmin(self, *args):
        """
        * The Box will be infinitely long in the Ymin direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenYmin(self, *args)

    def OpenYmax(self, *args):
        """
        * The Box will be infinitely long in the Ymax direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenYmax(self, *args)

    def OpenZmin(self, *args):
        """
        * The Box will be infinitely long in the Zmin direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenZmin(self, *args)

    def OpenZmax(self, *args):
        """
        * The Box will be infinitely long in the Zmax direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box_OpenZmax(self, *args)

    def IsOpenXmin(self, *args):
        """
        * Returns true if this bounding box is open in the Xmin direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenXmin(self, *args)

    def IsOpenXmax(self, *args):
        """
        * Returns true if this bounding box is open in the Xmax direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenXmax(self, *args)

    def IsOpenYmin(self, *args):
        """
        * Returns true if this bounding box is open in the Ymix direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenYmin(self, *args)

    def IsOpenYmax(self, *args):
        """
        * Returns true if this bounding box is open in the Ymax direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenYmax(self, *args)

    def IsOpenZmin(self, *args):
        """
        * Returns true if this bounding box is open in the Zmin direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenZmin(self, *args)

    def IsOpenZmax(self, *args):
        """
        * Returns true if this bounding box is open in the Zmax direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOpenZmax(self, *args)

    def IsWhole(self, *args):
        """
        * Returns true if this bounding box is infinite in all 6 directions (WholeSpace flag).

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsWhole(self, *args)

    def IsVoid(self, *args):
        """
        * Returns true if this bounding box is empty (Void flag).

        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsVoid(self, *args)

    def IsXThin(self, *args):
        """
        * true if xmax-xmin < tol.

        :param tol:
        :type tol: float
        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsXThin(self, *args)

    def IsYThin(self, *args):
        """
        * true if ymax-ymin < tol.

        :param tol:
        :type tol: float
        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsYThin(self, *args)

    def IsZThin(self, *args):
        """
        * true if zmax-zmin < tol.

        :param tol:
        :type tol: float
        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsZThin(self, *args)

    def IsThin(self, *args):
        """
        * Returns true if IsXThin, IsYThin and IsZThin are all true, i.e. if the box is thin in all three dimensions.

        :param tol:
        :type tol: float
        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsThin(self, *args)

    def Transformed(self, *args):
        """
        * Returns a bounding box which is the result of applying the transformation T to this bounding box. Warning Applying a geometric transformation (for example, a rotation) to a bounding box generally increases its dimensions. This is not optimal for algorithms which use it.

        :param T:
        :type T: gp_Trsf
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_Box_Transformed(self, *args)

    def Add(self, *args):
        """
        * Adds the box <Other> to <self>.

        :param Other:
        :type Other: Bnd_Box &
        :rtype: None

        * Adds a Pnt to the box.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Extends <self> from the Pnt <P> in the direction <D>.

        :param P:
        :type P: gp_Pnt
        :param D:
        :type D: gp_Dir
        :rtype: None

        * Extends the Box in the given Direction, i.e. adds an half-line. The box may become infinite in 1,2 or 3 directions.

        :param D:
        :type D: gp_Dir
        :rtype: None

        """
        return _Bnd.Bnd_Box_Add(self, *args)

    def IsOut(self, *args):
        """
        * Returns True if the Pnt is out the box.

        :param P:
        :type P: gp_Pnt
        :rtype: bool

        * Returns False if the line intersects the box.

        :param L:
        :type L: gp_Lin
        :rtype: bool

        * Returns False if the plane intersects the box.

        :param P:
        :type P: gp_Pln
        :rtype: bool

        * Returns False if the <Box> intersects or is inside <self>.

        :param Other:
        :type Other: Bnd_Box &
        :rtype: bool

        * Returns False if the transformed <Box> intersects or is inside <self>.

        :param Other:
        :type Other: Bnd_Box &
        :param T:
        :type T: gp_Trsf
        :rtype: bool

        * Returns False if the transformed <Box> intersects or is inside the transformed box <self>.

        :param T1:
        :type T1: gp_Trsf
        :param Other:
        :type Other: Bnd_Box &
        :param T2:
        :type T2: gp_Trsf
        :rtype: bool

        * Returns False if the flat band lying between two parallel 	 lines represented by their reference points <P1>, <P2> and direction <D> intersects the box.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param D:
        :type D: gp_Dir
        :rtype: bool

        """
        return _Bnd.Bnd_Box_IsOut(self, *args)

    def Distance(self, *args):
        """
        * Computes the minimum distance between two boxes.

        :param Other:
        :type Other: Bnd_Box &
        :rtype: float

        """
        return _Bnd.Bnd_Box_Distance(self, *args)

    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_Box_Dump(self, *args)

    def SquareExtent(self, *args):
        """
        * Computes the squared diagonal of me.

        :rtype: float

        """
        return _Bnd.Bnd_Box_SquareExtent(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Box.SetWhole = new_instancemethod(_Bnd.Bnd_Box_SetWhole,None,Bnd_Box)
Bnd_Box.SetVoid = new_instancemethod(_Bnd.Bnd_Box_SetVoid,None,Bnd_Box)
Bnd_Box.Set = new_instancemethod(_Bnd.Bnd_Box_Set,None,Bnd_Box)
Bnd_Box.Update = new_instancemethod(_Bnd.Bnd_Box_Update,None,Bnd_Box)
Bnd_Box.GetGap = new_instancemethod(_Bnd.Bnd_Box_GetGap,None,Bnd_Box)
Bnd_Box.SetGap = new_instancemethod(_Bnd.Bnd_Box_SetGap,None,Bnd_Box)
Bnd_Box.Enlarge = new_instancemethod(_Bnd.Bnd_Box_Enlarge,None,Bnd_Box)
Bnd_Box.Get = new_instancemethod(_Bnd.Bnd_Box_Get,None,Bnd_Box)
Bnd_Box.OpenXmin = new_instancemethod(_Bnd.Bnd_Box_OpenXmin,None,Bnd_Box)
Bnd_Box.OpenXmax = new_instancemethod(_Bnd.Bnd_Box_OpenXmax,None,Bnd_Box)
Bnd_Box.OpenYmin = new_instancemethod(_Bnd.Bnd_Box_OpenYmin,None,Bnd_Box)
Bnd_Box.OpenYmax = new_instancemethod(_Bnd.Bnd_Box_OpenYmax,None,Bnd_Box)
Bnd_Box.OpenZmin = new_instancemethod(_Bnd.Bnd_Box_OpenZmin,None,Bnd_Box)
Bnd_Box.OpenZmax = new_instancemethod(_Bnd.Bnd_Box_OpenZmax,None,Bnd_Box)
Bnd_Box.IsOpenXmin = new_instancemethod(_Bnd.Bnd_Box_IsOpenXmin,None,Bnd_Box)
Bnd_Box.IsOpenXmax = new_instancemethod(_Bnd.Bnd_Box_IsOpenXmax,None,Bnd_Box)
Bnd_Box.IsOpenYmin = new_instancemethod(_Bnd.Bnd_Box_IsOpenYmin,None,Bnd_Box)
Bnd_Box.IsOpenYmax = new_instancemethod(_Bnd.Bnd_Box_IsOpenYmax,None,Bnd_Box)
Bnd_Box.IsOpenZmin = new_instancemethod(_Bnd.Bnd_Box_IsOpenZmin,None,Bnd_Box)
Bnd_Box.IsOpenZmax = new_instancemethod(_Bnd.Bnd_Box_IsOpenZmax,None,Bnd_Box)
Bnd_Box.IsWhole = new_instancemethod(_Bnd.Bnd_Box_IsWhole,None,Bnd_Box)
Bnd_Box.IsVoid = new_instancemethod(_Bnd.Bnd_Box_IsVoid,None,Bnd_Box)
Bnd_Box.IsXThin = new_instancemethod(_Bnd.Bnd_Box_IsXThin,None,Bnd_Box)
Bnd_Box.IsYThin = new_instancemethod(_Bnd.Bnd_Box_IsYThin,None,Bnd_Box)
Bnd_Box.IsZThin = new_instancemethod(_Bnd.Bnd_Box_IsZThin,None,Bnd_Box)
Bnd_Box.IsThin = new_instancemethod(_Bnd.Bnd_Box_IsThin,None,Bnd_Box)
Bnd_Box.Transformed = new_instancemethod(_Bnd.Bnd_Box_Transformed,None,Bnd_Box)
Bnd_Box.Add = new_instancemethod(_Bnd.Bnd_Box_Add,None,Bnd_Box)
Bnd_Box.IsOut = new_instancemethod(_Bnd.Bnd_Box_IsOut,None,Bnd_Box)
Bnd_Box.Distance = new_instancemethod(_Bnd.Bnd_Box_Distance,None,Bnd_Box)
Bnd_Box.Dump = new_instancemethod(_Bnd.Bnd_Box_Dump,None,Bnd_Box)
Bnd_Box.SquareExtent = new_instancemethod(_Bnd.Bnd_Box_SquareExtent,None,Bnd_Box)
Bnd_Box._kill_pointed = new_instancemethod(_Bnd.Bnd_Box__kill_pointed,None,Bnd_Box)
Bnd_Box_swigregister = _Bnd.Bnd_Box_swigregister
Bnd_Box_swigregister(Bnd_Box)

class Bnd_Box2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty 2D bounding box. The constructed box is qualified Void. Its gap is null.

        :rtype: None

        """
        _Bnd.Bnd_Box2d_swiginit(self,_Bnd.new_Bnd_Box2d(*args))
    def SetWhole(self, *args):
        """
        * Sets this bounding box so that it covers the whole 2D space, i.e. it is infinite in all directions.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_SetWhole(self, *args)

    def SetVoid(self, *args):
        """
        * Sets this 2D bounding box so that it is empty. All points are outside a void box.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_SetVoid(self, *args)

    def Set(self, *args):
        """
        * Sets this 2D bounding box so that it bounds the point P. This involves first setting this bounding box to be void and then adding the point PThe rectangle bounds the point <P>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        * Sets this 2D bounding box so that it bounds the half-line defined by point P and direction D, i.e. all points M defined by M=P+u*D, where u is greater than or equal to 0, are inside the bounding area. This involves first setting this 2D box to be void and then adding the half-line.

        :param P:
        :type P: gp_Pnt2d
        :param D:
        :type D: gp_Dir2d
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Set(self, *args)

    def Update(self, *args):
        """
        * Enlarges this 2D bounding box, if required, so that it contains at least: - interval [ aXmin,aXmax ] in the 'X Direction', - interval [ aYmin,aYmax ] in the 'Y Direction'

        :param aXmin:
        :type aXmin: float
        :param aYmin:
        :type aYmin: float
        :param aXmax:
        :type aXmax: float
        :param aYmax:
        :type aYmax: float
        :rtype: None

        * Adds a point of coordinates (X,Y) to this bounding box.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Update(self, *args)

    def GetGap(self, *args):
        """
        * Returns the gap of this 2D bounding box.

        :rtype: float

        """
        return _Bnd.Bnd_Box2d_GetGap(self, *args)

    def SetGap(self, *args):
        """
        * Set the gap of this 2D bounding box to abs(Tol).

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_SetGap(self, *args)

    def Enlarge(self, *args):
        """
        * Enlarges the box with a tolerance value. This means that the minimum values of its X and Y intervals of definition, when they are finite, are reduced by the absolute value of Tol, while the maximum values are increased by the same amount.

        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Enlarge(self, *args)

    def Get(self, *args):
        """
        * Returns the bounds of this 2D bounding box. The gap is included. If this bounding box is infinite (i.e. 'open'), returned values may be equal to +/- Precision::Infinite(). if IsVoid()

        :param aXmin:
        :type aXmin: float &
        :param aYmin:
        :type aYmin: float &
        :param aXmax:
        :type aXmax: float &
        :param aYmax:
        :type aYmax: float &
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Get(self, *args)

    def OpenXmin(self, *args):
        """
        * The Box will be infinitely long in the Xmin direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_OpenXmin(self, *args)

    def OpenXmax(self, *args):
        """
        * The Box will be infinitely long in the Xmax direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_OpenXmax(self, *args)

    def OpenYmin(self, *args):
        """
        * The Box will be infinitely long in the Ymin direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_OpenYmin(self, *args)

    def OpenYmax(self, *args):
        """
        * The Box will be infinitely long in the Ymax direction.

        :rtype: None

        """
        return _Bnd.Bnd_Box2d_OpenYmax(self, *args)

    def IsOpenXmin(self, *args):
        """
        * Returns true if this bounding box is open in the Xmin direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsOpenXmin(self, *args)

    def IsOpenXmax(self, *args):
        """
        * Returns true if this bounding box is open in the Xmax direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsOpenXmax(self, *args)

    def IsOpenYmin(self, *args):
        """
        * Returns true if this bounding box is open in the Ymin direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsOpenYmin(self, *args)

    def IsOpenYmax(self, *args):
        """
        * Returns true if this bounding box is open in the Ymax direction.

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsOpenYmax(self, *args)

    def IsWhole(self, *args):
        """
        * Returns true if this bounding box is infinite in all 4 directions (Whole Space flag).

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsWhole(self, *args)

    def IsVoid(self, *args):
        """
        * Returns true if this 2D bounding box is empty (Void flag).

        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsVoid(self, *args)

    def Transformed(self, *args):
        """
        * Returns a bounding box which is the result of applying the transformation T to this bounding box. Warning Applying a geometric transformation (for example, a rotation) to a bounding box generally increases its dimensions. This is not optimal for algorithms which use it.

        :param T:
        :type T: gp_Trsf2d
        :rtype: Bnd_Box2d

        """
        return _Bnd.Bnd_Box2d_Transformed(self, *args)

    def Add(self, *args):
        """
        * Adds the 2d box <Other> to <self>.

        :param Other:
        :type Other: Bnd_Box2d &
        :rtype: None

        * Adds the 2d pnt <P> to <self>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: None

        * Extends <self> from the Pnt <P> in the direction <D>.

        :param P:
        :type P: gp_Pnt2d
        :param D:
        :type D: gp_Dir2d
        :rtype: None

        * Extends the Box in the given Direction, i.e. adds a half-line. The box may become infinite in 1 or 2 directions.

        :param D:
        :type D: gp_Dir2d
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Add(self, *args)

    def IsOut(self, *args):
        """
        * Returns True if the 2d pnt <P> is out <self>.

        :param P:
        :type P: gp_Pnt2d
        :rtype: bool

        * Returns True if <Box2d> is out <self>.

        :param Other:
        :type Other: Bnd_Box2d &
        :rtype: bool

        * Returns True if transformed <Box2d> is out <self>.

        :param Other:
        :type Other: Bnd_Box2d &
        :param T:
        :type T: gp_Trsf2d
        :rtype: bool

        * Compares a transformed bounding with a transformed bounding. The default implementation is to make a copy of <self> and <Other>, to transform them and to test.

        :param T1:
        :type T1: gp_Trsf2d
        :param Other:
        :type Other: Bnd_Box2d &
        :param T2:
        :type T2: gp_Trsf2d
        :rtype: bool

        """
        return _Bnd.Bnd_Box2d_IsOut(self, *args)

    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_Box2d_Dump(self, *args)

    def SquareExtent(self, *args):
        """
        * Computes the squared diagonal of me.

        :rtype: float

        """
        return _Bnd.Bnd_Box2d_SquareExtent(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Box2d.SetWhole = new_instancemethod(_Bnd.Bnd_Box2d_SetWhole,None,Bnd_Box2d)
Bnd_Box2d.SetVoid = new_instancemethod(_Bnd.Bnd_Box2d_SetVoid,None,Bnd_Box2d)
Bnd_Box2d.Set = new_instancemethod(_Bnd.Bnd_Box2d_Set,None,Bnd_Box2d)
Bnd_Box2d.Update = new_instancemethod(_Bnd.Bnd_Box2d_Update,None,Bnd_Box2d)
Bnd_Box2d.GetGap = new_instancemethod(_Bnd.Bnd_Box2d_GetGap,None,Bnd_Box2d)
Bnd_Box2d.SetGap = new_instancemethod(_Bnd.Bnd_Box2d_SetGap,None,Bnd_Box2d)
Bnd_Box2d.Enlarge = new_instancemethod(_Bnd.Bnd_Box2d_Enlarge,None,Bnd_Box2d)
Bnd_Box2d.Get = new_instancemethod(_Bnd.Bnd_Box2d_Get,None,Bnd_Box2d)
Bnd_Box2d.OpenXmin = new_instancemethod(_Bnd.Bnd_Box2d_OpenXmin,None,Bnd_Box2d)
Bnd_Box2d.OpenXmax = new_instancemethod(_Bnd.Bnd_Box2d_OpenXmax,None,Bnd_Box2d)
Bnd_Box2d.OpenYmin = new_instancemethod(_Bnd.Bnd_Box2d_OpenYmin,None,Bnd_Box2d)
Bnd_Box2d.OpenYmax = new_instancemethod(_Bnd.Bnd_Box2d_OpenYmax,None,Bnd_Box2d)
Bnd_Box2d.IsOpenXmin = new_instancemethod(_Bnd.Bnd_Box2d_IsOpenXmin,None,Bnd_Box2d)
Bnd_Box2d.IsOpenXmax = new_instancemethod(_Bnd.Bnd_Box2d_IsOpenXmax,None,Bnd_Box2d)
Bnd_Box2d.IsOpenYmin = new_instancemethod(_Bnd.Bnd_Box2d_IsOpenYmin,None,Bnd_Box2d)
Bnd_Box2d.IsOpenYmax = new_instancemethod(_Bnd.Bnd_Box2d_IsOpenYmax,None,Bnd_Box2d)
Bnd_Box2d.IsWhole = new_instancemethod(_Bnd.Bnd_Box2d_IsWhole,None,Bnd_Box2d)
Bnd_Box2d.IsVoid = new_instancemethod(_Bnd.Bnd_Box2d_IsVoid,None,Bnd_Box2d)
Bnd_Box2d.Transformed = new_instancemethod(_Bnd.Bnd_Box2d_Transformed,None,Bnd_Box2d)
Bnd_Box2d.Add = new_instancemethod(_Bnd.Bnd_Box2d_Add,None,Bnd_Box2d)
Bnd_Box2d.IsOut = new_instancemethod(_Bnd.Bnd_Box2d_IsOut,None,Bnd_Box2d)
Bnd_Box2d.Dump = new_instancemethod(_Bnd.Bnd_Box2d_Dump,None,Bnd_Box2d)
Bnd_Box2d.SquareExtent = new_instancemethod(_Bnd.Bnd_Box2d_SquareExtent,None,Bnd_Box2d)
Bnd_Box2d._kill_pointed = new_instancemethod(_Bnd.Bnd_Box2d__kill_pointed,None,Bnd_Box2d)
Bnd_Box2d_swigregister = _Bnd.Bnd_Box2d_swigregister
Bnd_Box2d_swigregister(Bnd_Box2d)

class Bnd_HArray1OfBox(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Bnd_Box &
        :rtype: None

        """
        _Bnd.Bnd_HArray1OfBox_swiginit(self,_Bnd.new_Bnd_HArray1OfBox(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Box &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfBox_Init(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Box &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfBox_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_HArray1OfBox_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_HArray1OfBox_ChangeValue(self, *args)

    def Array1(self, *args):
        """
        :rtype: Bnd_Array1OfBox

        """
        return _Bnd.Bnd_HArray1OfBox_Array1(self, *args)

    def ChangeArray1(self, *args):
        """
        :rtype: Bnd_Array1OfBox

        """
        return _Bnd.Bnd_HArray1OfBox_ChangeArray1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Bnd_HArray1OfBox self)"""
        return _Bnd.Bnd_HArray1OfBox__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Bnd_HArray1OfBox self) -> Handle_Bnd_HArray1OfBox"""
        return _Bnd.Bnd_HArray1OfBox_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_HArray1OfBox.Init = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Init,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.Length = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Length,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.Lower = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Lower,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.Upper = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Upper,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.SetValue = new_instancemethod(_Bnd.Bnd_HArray1OfBox_SetValue,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.Value = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Value,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.ChangeValue = new_instancemethod(_Bnd.Bnd_HArray1OfBox_ChangeValue,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.Array1 = new_instancemethod(_Bnd.Bnd_HArray1OfBox_Array1,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.ChangeArray1 = new_instancemethod(_Bnd.Bnd_HArray1OfBox_ChangeArray1,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox._kill_pointed = new_instancemethod(_Bnd.Bnd_HArray1OfBox__kill_pointed,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox.GetHandle = new_instancemethod(_Bnd.Bnd_HArray1OfBox_GetHandle,None,Bnd_HArray1OfBox)
Bnd_HArray1OfBox_swigregister = _Bnd.Bnd_HArray1OfBox_swigregister
Bnd_HArray1OfBox_swigregister(Bnd_HArray1OfBox)

class Handle_Bnd_HArray1OfBox(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Bnd.Handle_Bnd_HArray1OfBox_swiginit(self,_Bnd.new_Handle_Bnd_HArray1OfBox(*args))
    DownCast = staticmethod(_Bnd.Handle_Bnd_HArray1OfBox_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Bnd_HArray1OfBox.Nullify = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox_Nullify,None,Handle_Bnd_HArray1OfBox)
Handle_Bnd_HArray1OfBox.IsNull = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox_IsNull,None,Handle_Bnd_HArray1OfBox)
Handle_Bnd_HArray1OfBox.GetObject = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox_GetObject,None,Handle_Bnd_HArray1OfBox)
Handle_Bnd_HArray1OfBox._kill_pointed = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox__kill_pointed,None,Handle_Bnd_HArray1OfBox)
Handle_Bnd_HArray1OfBox_swigregister = _Bnd.Handle_Bnd_HArray1OfBox_swigregister
Handle_Bnd_HArray1OfBox_swigregister(Handle_Bnd_HArray1OfBox)

def Handle_Bnd_HArray1OfBox_DownCast(*args):
  return _Bnd.Handle_Bnd_HArray1OfBox_DownCast(*args)
Handle_Bnd_HArray1OfBox_DownCast = _Bnd.Handle_Bnd_HArray1OfBox_DownCast

class Bnd_HArray1OfBox2d(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Bnd_Box2d &
        :rtype: None

        """
        _Bnd.Bnd_HArray1OfBox2d_swiginit(self,_Bnd.new_Bnd_HArray1OfBox2d(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Box2d &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfBox2d_Init(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox2d_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox2d_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfBox2d_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Box2d &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfBox2d_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box2d

        """
        return _Bnd.Bnd_HArray1OfBox2d_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box2d

        """
        return _Bnd.Bnd_HArray1OfBox2d_ChangeValue(self, *args)

    def Array1(self, *args):
        """
        :rtype: Bnd_Array1OfBox2d

        """
        return _Bnd.Bnd_HArray1OfBox2d_Array1(self, *args)

    def ChangeArray1(self, *args):
        """
        :rtype: Bnd_Array1OfBox2d

        """
        return _Bnd.Bnd_HArray1OfBox2d_ChangeArray1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Bnd_HArray1OfBox2d self)"""
        return _Bnd.Bnd_HArray1OfBox2d__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Bnd_HArray1OfBox2d self) -> Handle_Bnd_HArray1OfBox2d"""
        return _Bnd.Bnd_HArray1OfBox2d_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_HArray1OfBox2d.Init = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Init,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.Length = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Length,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.Lower = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Lower,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.Upper = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Upper,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.SetValue = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_SetValue,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.Value = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Value,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.ChangeValue = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_ChangeValue,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.Array1 = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_Array1,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.ChangeArray1 = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_ChangeArray1,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d._kill_pointed = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d__kill_pointed,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d.GetHandle = new_instancemethod(_Bnd.Bnd_HArray1OfBox2d_GetHandle,None,Bnd_HArray1OfBox2d)
Bnd_HArray1OfBox2d_swigregister = _Bnd.Bnd_HArray1OfBox2d_swigregister
Bnd_HArray1OfBox2d_swigregister(Bnd_HArray1OfBox2d)

class Handle_Bnd_HArray1OfBox2d(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Bnd.Handle_Bnd_HArray1OfBox2d_swiginit(self,_Bnd.new_Handle_Bnd_HArray1OfBox2d(*args))
    DownCast = staticmethod(_Bnd.Handle_Bnd_HArray1OfBox2d_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Bnd_HArray1OfBox2d.Nullify = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox2d_Nullify,None,Handle_Bnd_HArray1OfBox2d)
Handle_Bnd_HArray1OfBox2d.IsNull = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox2d_IsNull,None,Handle_Bnd_HArray1OfBox2d)
Handle_Bnd_HArray1OfBox2d.GetObject = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox2d_GetObject,None,Handle_Bnd_HArray1OfBox2d)
Handle_Bnd_HArray1OfBox2d._kill_pointed = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfBox2d__kill_pointed,None,Handle_Bnd_HArray1OfBox2d)
Handle_Bnd_HArray1OfBox2d_swigregister = _Bnd.Handle_Bnd_HArray1OfBox2d_swigregister
Handle_Bnd_HArray1OfBox2d_swigregister(Handle_Bnd_HArray1OfBox2d)

def Handle_Bnd_HArray1OfBox2d_DownCast(*args):
  return _Bnd.Handle_Bnd_HArray1OfBox2d_DownCast(*args)
Handle_Bnd_HArray1OfBox2d_DownCast = _Bnd.Handle_Bnd_HArray1OfBox2d_DownCast

class Bnd_HArray1OfSphere(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Bnd_Sphere &
        :rtype: None

        """
        _Bnd.Bnd_HArray1OfSphere_swiginit(self,_Bnd.new_Bnd_HArray1OfSphere(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Bnd_Sphere &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfSphere_Init(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfSphere_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfSphere_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Bnd.Bnd_HArray1OfSphere_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Bnd_Sphere &
        :rtype: None

        """
        return _Bnd.Bnd_HArray1OfSphere_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Sphere

        """
        return _Bnd.Bnd_HArray1OfSphere_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Sphere

        """
        return _Bnd.Bnd_HArray1OfSphere_ChangeValue(self, *args)

    def Array1(self, *args):
        """
        :rtype: Bnd_Array1OfSphere

        """
        return _Bnd.Bnd_HArray1OfSphere_Array1(self, *args)

    def ChangeArray1(self, *args):
        """
        :rtype: Bnd_Array1OfSphere

        """
        return _Bnd.Bnd_HArray1OfSphere_ChangeArray1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Bnd_HArray1OfSphere self)"""
        return _Bnd.Bnd_HArray1OfSphere__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Bnd_HArray1OfSphere self) -> Handle_Bnd_HArray1OfSphere"""
        return _Bnd.Bnd_HArray1OfSphere_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_HArray1OfSphere.Init = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Init,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.Length = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Length,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.Lower = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Lower,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.Upper = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Upper,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.SetValue = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_SetValue,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.Value = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Value,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.ChangeValue = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_ChangeValue,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.Array1 = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_Array1,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.ChangeArray1 = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_ChangeArray1,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere._kill_pointed = new_instancemethod(_Bnd.Bnd_HArray1OfSphere__kill_pointed,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere.GetHandle = new_instancemethod(_Bnd.Bnd_HArray1OfSphere_GetHandle,None,Bnd_HArray1OfSphere)
Bnd_HArray1OfSphere_swigregister = _Bnd.Bnd_HArray1OfSphere_swigregister
Bnd_HArray1OfSphere_swigregister(Bnd_HArray1OfSphere)

class Handle_Bnd_HArray1OfSphere(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Bnd.Handle_Bnd_HArray1OfSphere_swiginit(self,_Bnd.new_Handle_Bnd_HArray1OfSphere(*args))
    DownCast = staticmethod(_Bnd.Handle_Bnd_HArray1OfSphere_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Bnd_HArray1OfSphere.Nullify = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfSphere_Nullify,None,Handle_Bnd_HArray1OfSphere)
Handle_Bnd_HArray1OfSphere.IsNull = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfSphere_IsNull,None,Handle_Bnd_HArray1OfSphere)
Handle_Bnd_HArray1OfSphere.GetObject = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfSphere_GetObject,None,Handle_Bnd_HArray1OfSphere)
Handle_Bnd_HArray1OfSphere._kill_pointed = new_instancemethod(_Bnd.Handle_Bnd_HArray1OfSphere__kill_pointed,None,Handle_Bnd_HArray1OfSphere)
Handle_Bnd_HArray1OfSphere_swigregister = _Bnd.Handle_Bnd_HArray1OfSphere_swigregister
Handle_Bnd_HArray1OfSphere_swigregister(Handle_Bnd_HArray1OfSphere)

def Handle_Bnd_HArray1OfSphere_DownCast(*args):
  return _Bnd.Handle_Bnd_HArray1OfSphere_DownCast(*args)
Handle_Bnd_HArray1OfSphere_DownCast = _Bnd.Handle_Bnd_HArray1OfSphere_DownCast

class Bnd_SeqOfBox(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Bnd.Bnd_SeqOfBox_swiginit(self,_Bnd.new_Bnd_SeqOfBox(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Bnd_SeqOfBox &
        :rtype: Bnd_SeqOfBox

        """
        return _Bnd.Bnd_SeqOfBox_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Bnd_SeqOfBox &
        :rtype: Bnd_SeqOfBox

        """
        return _Bnd.Bnd_SeqOfBox_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Bnd_Box &
        :rtype: None

        :param S:
        :type S: Bnd_SeqOfBox &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Bnd_Box &
        :rtype: None

        :param S:
        :type S: Bnd_SeqOfBox &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Bnd_Box &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Bnd_SeqOfBox &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Bnd_Box &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Bnd_SeqOfBox &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_SeqOfBox_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_SeqOfBox_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Bnd_SeqOfBox &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_SeqOfBox_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Bnd_Box &
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_SeqOfBox_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Bnd.Bnd_SeqOfBox_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_SeqOfBox.Clear = new_instancemethod(_Bnd.Bnd_SeqOfBox_Clear,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Assign = new_instancemethod(_Bnd.Bnd_SeqOfBox_Assign,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Set = new_instancemethod(_Bnd.Bnd_SeqOfBox_Set,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Append = new_instancemethod(_Bnd.Bnd_SeqOfBox_Append,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Prepend = new_instancemethod(_Bnd.Bnd_SeqOfBox_Prepend,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.InsertBefore = new_instancemethod(_Bnd.Bnd_SeqOfBox_InsertBefore,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.InsertAfter = new_instancemethod(_Bnd.Bnd_SeqOfBox_InsertAfter,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.First = new_instancemethod(_Bnd.Bnd_SeqOfBox_First,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Last = new_instancemethod(_Bnd.Bnd_SeqOfBox_Last,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Split = new_instancemethod(_Bnd.Bnd_SeqOfBox_Split,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Value = new_instancemethod(_Bnd.Bnd_SeqOfBox_Value,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.SetValue = new_instancemethod(_Bnd.Bnd_SeqOfBox_SetValue,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.ChangeValue = new_instancemethod(_Bnd.Bnd_SeqOfBox_ChangeValue,None,Bnd_SeqOfBox)
Bnd_SeqOfBox.Remove = new_instancemethod(_Bnd.Bnd_SeqOfBox_Remove,None,Bnd_SeqOfBox)
Bnd_SeqOfBox._kill_pointed = new_instancemethod(_Bnd.Bnd_SeqOfBox__kill_pointed,None,Bnd_SeqOfBox)
Bnd_SeqOfBox_swigregister = _Bnd.Bnd_SeqOfBox_swigregister
Bnd_SeqOfBox_swigregister(Bnd_SeqOfBox)

class Bnd_SequenceNodeOfSeqOfBox(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Bnd_Box &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Bnd.Bnd_SequenceNodeOfSeqOfBox_swiginit(self,_Bnd.new_Bnd_SequenceNodeOfSeqOfBox(*args))
    def Value(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _Bnd.Bnd_SequenceNodeOfSeqOfBox_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Bnd_SequenceNodeOfSeqOfBox self)"""
        return _Bnd.Bnd_SequenceNodeOfSeqOfBox__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Bnd_SequenceNodeOfSeqOfBox self) -> Handle_Bnd_SequenceNodeOfSeqOfBox"""
        return _Bnd.Bnd_SequenceNodeOfSeqOfBox_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_SequenceNodeOfSeqOfBox.Value = new_instancemethod(_Bnd.Bnd_SequenceNodeOfSeqOfBox_Value,None,Bnd_SequenceNodeOfSeqOfBox)
Bnd_SequenceNodeOfSeqOfBox._kill_pointed = new_instancemethod(_Bnd.Bnd_SequenceNodeOfSeqOfBox__kill_pointed,None,Bnd_SequenceNodeOfSeqOfBox)
Bnd_SequenceNodeOfSeqOfBox.GetHandle = new_instancemethod(_Bnd.Bnd_SequenceNodeOfSeqOfBox_GetHandle,None,Bnd_SequenceNodeOfSeqOfBox)
Bnd_SequenceNodeOfSeqOfBox_swigregister = _Bnd.Bnd_SequenceNodeOfSeqOfBox_swigregister
Bnd_SequenceNodeOfSeqOfBox_swigregister(Bnd_SequenceNodeOfSeqOfBox)

class Handle_Bnd_SequenceNodeOfSeqOfBox(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_swiginit(self,_Bnd.new_Handle_Bnd_SequenceNodeOfSeqOfBox(*args))
    DownCast = staticmethod(_Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Bnd_SequenceNodeOfSeqOfBox.Nullify = new_instancemethod(_Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_Nullify,None,Handle_Bnd_SequenceNodeOfSeqOfBox)
Handle_Bnd_SequenceNodeOfSeqOfBox.IsNull = new_instancemethod(_Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_IsNull,None,Handle_Bnd_SequenceNodeOfSeqOfBox)
Handle_Bnd_SequenceNodeOfSeqOfBox.GetObject = new_instancemethod(_Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_GetObject,None,Handle_Bnd_SequenceNodeOfSeqOfBox)
Handle_Bnd_SequenceNodeOfSeqOfBox._kill_pointed = new_instancemethod(_Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox__kill_pointed,None,Handle_Bnd_SequenceNodeOfSeqOfBox)
Handle_Bnd_SequenceNodeOfSeqOfBox_swigregister = _Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_swigregister
Handle_Bnd_SequenceNodeOfSeqOfBox_swigregister(Handle_Bnd_SequenceNodeOfSeqOfBox)

def Handle_Bnd_SequenceNodeOfSeqOfBox_DownCast(*args):
  return _Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_DownCast(*args)
Handle_Bnd_SequenceNodeOfSeqOfBox_DownCast = _Bnd.Handle_Bnd_SequenceNodeOfSeqOfBox_DownCast

class Bnd_Sphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor

        :rtype: None

        * Constructor of a definite sphere

        :param theCntr:
        :type theCntr: gp_XYZ
        :param theRad:
        :type theRad: float
        :param theU:
        :type theU: int
        :param theV:
        :type theV: int
        :rtype: None

        """
        _Bnd.Bnd_Sphere_swiginit(self,_Bnd.new_Bnd_Sphere(*args))
    def U(self, *args):
        """
        * Returns the U parameter on shape

        :rtype: int

        """
        return _Bnd.Bnd_Sphere_U(self, *args)

    def V(self, *args):
        """
        * Returns the V parameter on shape

        :rtype: int

        """
        return _Bnd.Bnd_Sphere_V(self, *args)

    def IsValid(self, *args):
        """
        * Returns validity status, indicating that this //!		sphere corresponds to a real entity

        :rtype: bool

        """
        return _Bnd.Bnd_Sphere_IsValid(self, *args)

    def SetValid(self, *args):
        """
        :param isValid:
        :type isValid: bool
        :rtype: None

        """
        return _Bnd.Bnd_Sphere_SetValid(self, *args)

    def Center(self, *args):
        """
        * Returns center of sphere object

        :rtype: gp_XYZ

        """
        return _Bnd.Bnd_Sphere_Center(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius value

        :rtype: float

        """
        return _Bnd.Bnd_Sphere_Radius(self, *args)

    def Distances(self, *args):
        """
        * Calculate and return minimal and maximal distance to sphere. //!		NOTE: This function is tightly optimized; any modifications //!		may affect performance!

        :param theXYZ:
        :type theXYZ: gp_XYZ
        :param theMin:
        :type theMin: float &
        :param theMax:
        :type theMax: float &
        :rtype: None

        """
        return _Bnd.Bnd_Sphere_Distances(self, *args)

    def SquareDistances(self, *args):
        """
        * Calculate and return minimal and maximal distance to sphere. //!		NOTE: This function is tightly optimized; any modifications //!		may affect performance!

        :param theXYZ:
        :type theXYZ: gp_XYZ
        :param theMin:
        :type theMin: float &
        :param theMax:
        :type theMax: float &
        :rtype: None

        """
        return _Bnd.Bnd_Sphere_SquareDistances(self, *args)

    def Project(self, *args):
        """
        * Projects a point on entity. //!		 Returns true if success

        :param theNode:
        :type theNode: gp_XYZ
        :param theProjNode:
        :type theProjNode: gp_XYZ
        :param theDist:
        :type theDist: float &
        :param theInside:
        :type theInside: bool
        :rtype: bool

        """
        return _Bnd.Bnd_Sphere_Project(self, *args)

    def Distance(self, *args):
        """
        :param theNode:
        :type theNode: gp_XYZ
        :rtype: float

        """
        return _Bnd.Bnd_Sphere_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        :param theNode:
        :type theNode: gp_XYZ
        :rtype: float

        """
        return _Bnd.Bnd_Sphere_SquareDistance(self, *args)

    def Add(self, *args):
        """
        :param theOther:
        :type theOther: Bnd_Sphere &
        :rtype: None

        """
        return _Bnd.Bnd_Sphere_Add(self, *args)

    def IsOut(self, *args):
        """
        :param theOther:
        :type theOther: Bnd_Sphere &
        :rtype: bool

        :param thePnt:
        :type thePnt: gp_XYZ
        :param theMaxDist:
        :type theMaxDist: float &
        :rtype: bool

        """
        return _Bnd.Bnd_Sphere_IsOut(self, *args)

    def SquareExtent(self, *args):
        """
        :rtype: float

        """
        return _Bnd.Bnd_Sphere_SquareExtent(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Bnd_Sphere.U = new_instancemethod(_Bnd.Bnd_Sphere_U,None,Bnd_Sphere)
Bnd_Sphere.V = new_instancemethod(_Bnd.Bnd_Sphere_V,None,Bnd_Sphere)
Bnd_Sphere.IsValid = new_instancemethod(_Bnd.Bnd_Sphere_IsValid,None,Bnd_Sphere)
Bnd_Sphere.SetValid = new_instancemethod(_Bnd.Bnd_Sphere_SetValid,None,Bnd_Sphere)
Bnd_Sphere.Center = new_instancemethod(_Bnd.Bnd_Sphere_Center,None,Bnd_Sphere)
Bnd_Sphere.Radius = new_instancemethod(_Bnd.Bnd_Sphere_Radius,None,Bnd_Sphere)
Bnd_Sphere.Distances = new_instancemethod(_Bnd.Bnd_Sphere_Distances,None,Bnd_Sphere)
Bnd_Sphere.SquareDistances = new_instancemethod(_Bnd.Bnd_Sphere_SquareDistances,None,Bnd_Sphere)
Bnd_Sphere.Project = new_instancemethod(_Bnd.Bnd_Sphere_Project,None,Bnd_Sphere)
Bnd_Sphere.Distance = new_instancemethod(_Bnd.Bnd_Sphere_Distance,None,Bnd_Sphere)
Bnd_Sphere.SquareDistance = new_instancemethod(_Bnd.Bnd_Sphere_SquareDistance,None,Bnd_Sphere)
Bnd_Sphere.Add = new_instancemethod(_Bnd.Bnd_Sphere_Add,None,Bnd_Sphere)
Bnd_Sphere.IsOut = new_instancemethod(_Bnd.Bnd_Sphere_IsOut,None,Bnd_Sphere)
Bnd_Sphere.SquareExtent = new_instancemethod(_Bnd.Bnd_Sphere_SquareExtent,None,Bnd_Sphere)
Bnd_Sphere._kill_pointed = new_instancemethod(_Bnd.Bnd_Sphere__kill_pointed,None,Bnd_Sphere)
Bnd_Sphere_swigregister = _Bnd.Bnd_Sphere_swigregister
Bnd_Sphere_swigregister(Bnd_Sphere)



