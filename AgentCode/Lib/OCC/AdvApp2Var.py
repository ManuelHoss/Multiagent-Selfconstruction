# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _AdvApp2Var.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AdvApp2Var', [dirname(__file__)])
        except ImportError:
            import _AdvApp2Var
            return _AdvApp2Var
        if fp is not None:
            try:
                _mod = imp.load_module('_AdvApp2Var', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AdvApp2Var = swig_import_helper()
    del swig_import_helper
else:
    import _AdvApp2Var
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApp2Var.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_AdvApp2Var.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_AdvApp2Var.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_AdvApp2Var.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_AdvApp2Var.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_AdvApp2Var.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_AdvApp2Var.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_AdvApp2Var.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_AdvApp2Var.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_AdvApp2Var.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_AdvApp2Var.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _AdvApp2Var.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.GeomAbs
import OCC.AdvApprox
import OCC.TColgp
import OCC.gp
import OCC.PLib
import OCC.math
import OCC.Geom

_AdvApp2Var.AdvApp2Var_Regular_swigconstant(_AdvApp2Var)
AdvApp2Var_Regular = _AdvApp2Var.AdvApp2Var_Regular

_AdvApp2Var.AdvApp2Var_Incremental_swigconstant(_AdvApp2Var)
AdvApp2Var_Incremental = _AdvApp2Var.AdvApp2Var_Incremental

_AdvApp2Var.AdvApp2Var_Absolute_swigconstant(_AdvApp2Var)
AdvApp2Var_Absolute = _AdvApp2Var.AdvApp2Var_Absolute

_AdvApp2Var.AdvApp2Var_Relative_swigconstant(_AdvApp2Var)
AdvApp2Var_Relative = _AdvApp2Var.AdvApp2Var_Relative
class AdvApp2Var_ApproxAFunc2Var(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Num1DSS:
        :type Num1DSS: int
        :param Num2DSS:
        :type Num2DSS: int
        :param Num3DSS:
        :type Num3DSS: int
        :param OneDTol:
        :type OneDTol: Handle_TColStd_HArray1OfReal &
        :param TwoDTol:
        :type TwoDTol: Handle_TColStd_HArray1OfReal &
        :param ThreeDTol:
        :type ThreeDTol: Handle_TColStd_HArray1OfReal &
        :param OneDTolFr:
        :type OneDTolFr: Handle_TColStd_HArray2OfReal &
        :param TwoDTolFr:
        :type TwoDTolFr: Handle_TColStd_HArray2OfReal &
        :param ThreeDTolFr:
        :type ThreeDTolFr: Handle_TColStd_HArray2OfReal &
        :param FirstInU:
        :type FirstInU: float
        :param LastInU:
        :type LastInU: float
        :param FirstInV:
        :type FirstInV: float
        :param LastInV:
        :type LastInV: float
        :param FavorIso:
        :type FavorIso: GeomAbs_IsoType
        :param ContInU:
        :type ContInU: GeomAbs_Shape
        :param ContInV:
        :type ContInV: GeomAbs_Shape
        :param PrecisCode:
        :type PrecisCode: int
        :param MaxDegInU:
        :type MaxDegInU: int
        :param MaxDegInV:
        :type MaxDegInV: int
        :param MaxPatch:
        :type MaxPatch: int
        :param Func:
        :type Func: AdvApp2Var_EvaluatorFunc2Var &
        :param UChoice:
        :type UChoice: AdvApprox_Cutting &
        :param VChoice:
        :type VChoice: AdvApprox_Cutting &
        :rtype: None

        :param Num1DSS:
        :type Num1DSS: int
        :param Num2DSS:
        :type Num2DSS: int
        :param Num3DSS:
        :type Num3DSS: int
        :param OneDTol:
        :type OneDTol: Handle_TColStd_HArray1OfReal &
        :param TwoDTol:
        :type TwoDTol: Handle_TColStd_HArray1OfReal &
        :param ThreeDTol:
        :type ThreeDTol: Handle_TColStd_HArray1OfReal &
        :param OneDTolFr:
        :type OneDTolFr: Handle_TColStd_HArray2OfReal &
        :param TwoDTolFr:
        :type TwoDTolFr: Handle_TColStd_HArray2OfReal &
        :param ThreeDTolFr:
        :type ThreeDTolFr: Handle_TColStd_HArray2OfReal &
        :param FirstInU:
        :type FirstInU: float
        :param LastInU:
        :type LastInU: float
        :param FirstInV:
        :type FirstInV: float
        :param LastInV:
        :type LastInV: float
        :param FavorIso:
        :type FavorIso: GeomAbs_IsoType
        :param ContInU:
        :type ContInU: GeomAbs_Shape
        :param ContInV:
        :type ContInV: GeomAbs_Shape
        :param PrecisCode:
        :type PrecisCode: int
        :param MaxDegInU:
        :type MaxDegInU: int
        :param MaxDegInV:
        :type MaxDegInV: int
        :param MaxPatch:
        :type MaxPatch: int
        :param Func:
        :type Func: AdvApp2Var_EvaluatorFunc2Var &
        :param Crit:
        :type Crit: AdvApp2Var_Criterion &
        :param UChoice:
        :type UChoice: AdvApprox_Cutting &
        :param VChoice:
        :type VChoice: AdvApprox_Cutting &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swiginit(self, _AdvApp2Var.new_AdvApp2Var_ApproxAFunc2Var(*args))

    def IsDone(self, *args):
        """
        * True if the approximation succeeded within the imposed tolerances and the wished continuities

        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_IsDone(self, *args)


    def HasResult(self, *args):
        """
        * True if the approximation did come out with a result that is not NECESSARELY within the required tolerance or a result that is not recognized with the wished continuities

        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_HasResult(self, *args)


    def Surface(self, *args):
        """
        * returns the BSplineSurface of range Index

        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineSurface

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Surface(self, *args)


    def UDegree(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UDegree(self, *args)


    def VDegree(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VDegree(self, *args)


    def NumSubSpaces(self, *args):
        """
        :param Dimension:
        :type Dimension: int
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_NumSubSpaces(self, *args)


    def MaxError(self, *args):
        """
        * returns the errors max

        :param Dimension:
        :type Dimension: int
        :rtype: Handle_TColStd_HArray1OfReal

        * returns the error max of the BSplineSurface of range Index

        :param Dimension:
        :type Dimension: int
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_MaxError(self, *args)


    def AverageError(self, *args):
        """
        * returns the average errors

        :param Dimension:
        :type Dimension: int
        :rtype: Handle_TColStd_HArray1OfReal

        * returns the average error of the BSplineSurface of range Index

        :param Dimension:
        :type Dimension: int
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_AverageError(self, *args)


    def UFrontError(self, *args):
        """
        * returns the errors max on UFrontiers Warning: Dimension must be equal to 3.

        :param Dimension:
        :type Dimension: int
        :rtype: Handle_TColStd_HArray1OfReal

        * returns the error max of the BSplineSurface of range Index on a UFrontier

        :param Dimension:
        :type Dimension: int
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UFrontError(self, *args)


    def VFrontError(self, *args):
        """
        * returns the errors max on VFrontiers Warning: Dimension must be equal to 3.

        :param Dimension:
        :type Dimension: int
        :rtype: Handle_TColStd_HArray1OfReal

        * returns the error max of the BSplineSurface of range Index on a VFrontier

        :param Dimension:
        :type Dimension: int
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VFrontError(self, *args)


    def CritError(self, *args):
        """
        :param Dimension:
        :type Dimension: int
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_CritError(self, *args)


    def DumpToString(self):
        """DumpToString(AdvApp2Var_ApproxAFunc2Var self) -> std::string"""
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_DumpToString(self)


    def _kill_pointed(self):
        """_kill_pointed(AdvApp2Var_ApproxAFunc2Var self)"""
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_ApproxAFunc2Var.IsDone = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_IsDone, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.HasResult = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_HasResult, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.Surface = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Surface, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.UDegree = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UDegree, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.VDegree = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VDegree, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.NumSubSpaces = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_NumSubSpaces, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.MaxError = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_MaxError, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.AverageError = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_AverageError, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.UFrontError = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UFrontError, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.VFrontError = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VFrontError, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.CritError = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_CritError, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var.DumpToString = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_DumpToString, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var__kill_pointed, None, AdvApp2Var_ApproxAFunc2Var)
AdvApp2Var_ApproxAFunc2Var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swigregister
AdvApp2Var_ApproxAFunc2Var_swigregister(AdvApp2Var_ApproxAFunc2Var)

class AdvApp2Var_ApproxF2var(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def mma2fnc_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param nbsesp:
        :type nbsesp: integer *
        :param ndimse:
        :type ndimse: integer *
        :param uvfonc:
        :type uvfonc: doublereal *
        :param foncnp:
        :type foncnp: AdvApp2Var_EvaluatorFunc2Var &
        :param tconst:
        :type tconst: doublereal *
        :param isofav:
        :type isofav: integer *
        :param nbroot:
        :type nbroot: integer *
        :param rootlg:
        :type rootlg: doublereal *
        :param iordre:
        :type iordre: integer *
        :param ideriv:
        :type ideriv: integer *
        :param ndgjac:
        :type ndgjac: integer *
        :param nbcrmx:
        :type nbcrmx: integer *
        :param ncflim:
        :type ncflim: integer *
        :param epsapr:
        :type epsapr: doublereal *
        :param ncoeff:
        :type ncoeff: integer *
        :param courbe:
        :type courbe: doublereal *
        :param nbcrbe:
        :type nbcrbe: integer *
        :param somtab:
        :type somtab: doublereal *
        :param diftab:
        :type diftab: doublereal *
        :param contr1:
        :type contr1: doublereal *
        :param contr2:
        :type contr2: doublereal *
        :param tabdec:
        :type tabdec: doublereal *
        :param errmax:
        :type errmax: doublereal *
        :param errmoy:
        :type errmoy: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

    mma2fnc_ = staticmethod(mma2fnc_)

    def mma2roo_(*args):
        """
        :param nbpntu:
        :type nbpntu: integer *
        :param nbpntv:
        :type nbpntv: integer *
        :param urootl:
        :type urootl: doublereal *
        :param vrootl:
        :type vrootl: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

    mma2roo_ = staticmethod(mma2roo_)

    def mma2jmx_(*args):
        """
        :param ndgjac:
        :type ndgjac: integer *
        :param iordre:
        :type iordre: integer *
        :param xjacmx:
        :type xjacmx: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

    mma2jmx_ = staticmethod(mma2jmx_)

    def mmapptt_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

    mmapptt_ = staticmethod(mmapptt_)

    def mma2cdi_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param nbpntu:
        :type nbpntu: integer *
        :param urootl:
        :type urootl: doublereal *
        :param nbpntv:
        :type nbpntv: integer *
        :param vrootl:
        :type vrootl: doublereal *
        :param iordru:
        :type iordru: integer *
        :param iordrv:
        :type iordrv: integer *
        :param contr1:
        :type contr1: doublereal *
        :param contr2:
        :type contr2: doublereal *
        :param contr3:
        :type contr3: doublereal *
        :param contr4:
        :type contr4: doublereal *
        :param sotbu1:
        :type sotbu1: doublereal *
        :param sotbu2:
        :type sotbu2: doublereal *
        :param ditbu1:
        :type ditbu1: doublereal *
        :param ditbu2:
        :type ditbu2: doublereal *
        :param sotbv1:
        :type sotbv1: doublereal *
        :param sotbv2:
        :type sotbv2: doublereal *
        :param ditbv1:
        :type ditbv1: doublereal *
        :param ditbv2:
        :type ditbv2: doublereal *
        :param sosotb:
        :type sosotb: doublereal *
        :param soditb:
        :type soditb: doublereal *
        :param disotb:
        :type disotb: doublereal *
        :param diditb:
        :type diditb: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

    mma2cdi_ = staticmethod(mma2cdi_)

    def mma2ds1_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param uintfn:
        :type uintfn: doublereal *
        :param vintfn:
        :type vintfn: doublereal *
        :param foncnp:
        :type foncnp: AdvApp2Var_EvaluatorFunc2Var &
        :param nbpntu:
        :type nbpntu: integer *
        :param nbpntv:
        :type nbpntv: integer *
        :param urootb:
        :type urootb: doublereal *
        :param vrootb:
        :type vrootb: doublereal *
        :param isofav:
        :type isofav: integer *
        :param sosotb:
        :type sosotb: doublereal *
        :param disotb:
        :type disotb: doublereal *
        :param soditb:
        :type soditb: doublereal *
        :param diditb:
        :type diditb: doublereal *
        :param fpntab:
        :type fpntab: doublereal *
        :param ttable:
        :type ttable: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

    mma2ds1_ = staticmethod(mma2ds1_)

    def mma2ce1_(*args):
        """
        :param numdec:
        :type numdec: integer *
        :param ndimen:
        :type ndimen: integer *
        :param nbsesp:
        :type nbsesp: integer *
        :param ndimse:
        :type ndimse: integer *
        :param ndminu:
        :type ndminu: integer *
        :param ndminv:
        :type ndminv: integer *
        :param ndguli:
        :type ndguli: integer *
        :param ndgvli:
        :type ndgvli: integer *
        :param ndjacu:
        :type ndjacu: integer *
        :param ndjacv:
        :type ndjacv: integer *
        :param iordru:
        :type iordru: integer *
        :param iordrv:
        :type iordrv: integer *
        :param nbpntu:
        :type nbpntu: integer *
        :param nbpntv:
        :type nbpntv: integer *
        :param epsapr:
        :type epsapr: doublereal *
        :param sosotb:
        :type sosotb: doublereal *
        :param disotb:
        :type disotb: doublereal *
        :param soditb:
        :type soditb: doublereal *
        :param diditb:
        :type diditb: doublereal *
        :param patjac:
        :type patjac: doublereal *
        :param errmax:
        :type errmax: doublereal *
        :param errmoy:
        :type errmoy: doublereal *
        :param ndegpu:
        :type ndegpu: integer *
        :param ndegpv:
        :type ndegpv: integer *
        :param itydec:
        :type itydec: integer *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

    mma2ce1_ = staticmethod(mma2ce1_)

    def mma2can_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

    mma2can_ = staticmethod(mma2can_)

    def mma1her_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

    mma1her_ = staticmethod(mma1her_)

    def mma2ac2_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

    mma2ac2_ = staticmethod(mma2ac2_)

    def mma2ac3_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

    mma2ac3_ = staticmethod(mma2ac3_)

    def mma2ac1_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

    mma2ac1_ = staticmethod(mma2ac1_)

    def mma2fx6_(*args):
        """
        :param ncfmxu:
        :type ncfmxu: integer *
        :param ncfmxv:
        :type ncfmxv: integer *
        :param ndimen:
        :type ndimen: integer *
        :param nbsesp:
        :type nbsesp: integer *
        :param ndimse:
        :type ndimse: integer *
        :param nbupat:
        :type nbupat: integer *
        :param nbvpat:
        :type nbvpat: integer *
        :param iordru:
        :type iordru: integer *
        :param iordrv:
        :type iordrv: integer *
        :param epsapr:
        :type epsapr: doublereal *
        :param epsfro:
        :type epsfro: doublereal *
        :param patcan:
        :type patcan: doublereal *
        :param errmax:
        :type errmax: doublereal *
        :param ncoefu:
        :type ncoefu: integer *
        :param ncoefv:
        :type ncoefv: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

    mma2fx6_ = staticmethod(mma2fx6_)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_ApproxF2var._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_ApproxF2var__kill_pointed, None, AdvApp2Var_ApproxF2var)
AdvApp2Var_ApproxF2var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxF2var_swigregister
AdvApp2Var_ApproxF2var_swigregister(AdvApp2Var_ApproxF2var)

def AdvApp2Var_ApproxF2var_mma2fnc_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param nbsesp:
    :type nbsesp: integer *
    :param ndimse:
    :type ndimse: integer *
    :param uvfonc:
    :type uvfonc: doublereal *
    :param foncnp:
    :type foncnp: AdvApp2Var_EvaluatorFunc2Var &
    :param tconst:
    :type tconst: doublereal *
    :param isofav:
    :type isofav: integer *
    :param nbroot:
    :type nbroot: integer *
    :param rootlg:
    :type rootlg: doublereal *
    :param iordre:
    :type iordre: integer *
    :param ideriv:
    :type ideriv: integer *
    :param ndgjac:
    :type ndgjac: integer *
    :param nbcrmx:
    :type nbcrmx: integer *
    :param ncflim:
    :type ncflim: integer *
    :param epsapr:
    :type epsapr: doublereal *
    :param ncoeff:
    :type ncoeff: integer *
    :param courbe:
    :type courbe: doublereal *
    :param nbcrbe:
    :type nbcrbe: integer *
    :param somtab:
    :type somtab: doublereal *
    :param diftab:
    :type diftab: doublereal *
    :param contr1:
    :type contr1: doublereal *
    :param contr2:
    :type contr2: doublereal *
    :param tabdec:
    :type tabdec: doublereal *
    :param errmax:
    :type errmax: doublereal *
    :param errmoy:
    :type errmoy: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

def AdvApp2Var_ApproxF2var_mma2roo_(*args):
    """
    :param nbpntu:
    :type nbpntu: integer *
    :param nbpntv:
    :type nbpntv: integer *
    :param urootl:
    :type urootl: doublereal *
    :param vrootl:
    :type vrootl: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

def AdvApp2Var_ApproxF2var_mma2jmx_(*args):
    """
    :param ndgjac:
    :type ndgjac: integer *
    :param iordre:
    :type iordre: integer *
    :param xjacmx:
    :type xjacmx: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

def AdvApp2Var_ApproxF2var_mmapptt_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

def AdvApp2Var_ApproxF2var_mma2cdi_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param nbpntu:
    :type nbpntu: integer *
    :param urootl:
    :type urootl: doublereal *
    :param nbpntv:
    :type nbpntv: integer *
    :param vrootl:
    :type vrootl: doublereal *
    :param iordru:
    :type iordru: integer *
    :param iordrv:
    :type iordrv: integer *
    :param contr1:
    :type contr1: doublereal *
    :param contr2:
    :type contr2: doublereal *
    :param contr3:
    :type contr3: doublereal *
    :param contr4:
    :type contr4: doublereal *
    :param sotbu1:
    :type sotbu1: doublereal *
    :param sotbu2:
    :type sotbu2: doublereal *
    :param ditbu1:
    :type ditbu1: doublereal *
    :param ditbu2:
    :type ditbu2: doublereal *
    :param sotbv1:
    :type sotbv1: doublereal *
    :param sotbv2:
    :type sotbv2: doublereal *
    :param ditbv1:
    :type ditbv1: doublereal *
    :param ditbv2:
    :type ditbv2: doublereal *
    :param sosotb:
    :type sosotb: doublereal *
    :param soditb:
    :type soditb: doublereal *
    :param disotb:
    :type disotb: doublereal *
    :param diditb:
    :type diditb: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

def AdvApp2Var_ApproxF2var_mma2ds1_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param uintfn:
    :type uintfn: doublereal *
    :param vintfn:
    :type vintfn: doublereal *
    :param foncnp:
    :type foncnp: AdvApp2Var_EvaluatorFunc2Var &
    :param nbpntu:
    :type nbpntu: integer *
    :param nbpntv:
    :type nbpntv: integer *
    :param urootb:
    :type urootb: doublereal *
    :param vrootb:
    :type vrootb: doublereal *
    :param isofav:
    :type isofav: integer *
    :param sosotb:
    :type sosotb: doublereal *
    :param disotb:
    :type disotb: doublereal *
    :param soditb:
    :type soditb: doublereal *
    :param diditb:
    :type diditb: doublereal *
    :param fpntab:
    :type fpntab: doublereal *
    :param ttable:
    :type ttable: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

def AdvApp2Var_ApproxF2var_mma2ce1_(*args):
    """
    :param numdec:
    :type numdec: integer *
    :param ndimen:
    :type ndimen: integer *
    :param nbsesp:
    :type nbsesp: integer *
    :param ndimse:
    :type ndimse: integer *
    :param ndminu:
    :type ndminu: integer *
    :param ndminv:
    :type ndminv: integer *
    :param ndguli:
    :type ndguli: integer *
    :param ndgvli:
    :type ndgvli: integer *
    :param ndjacu:
    :type ndjacu: integer *
    :param ndjacv:
    :type ndjacv: integer *
    :param iordru:
    :type iordru: integer *
    :param iordrv:
    :type iordrv: integer *
    :param nbpntu:
    :type nbpntu: integer *
    :param nbpntv:
    :type nbpntv: integer *
    :param epsapr:
    :type epsapr: doublereal *
    :param sosotb:
    :type sosotb: doublereal *
    :param disotb:
    :type disotb: doublereal *
    :param soditb:
    :type soditb: doublereal *
    :param diditb:
    :type diditb: doublereal *
    :param patjac:
    :type patjac: doublereal *
    :param errmax:
    :type errmax: doublereal *
    :param errmoy:
    :type errmoy: doublereal *
    :param ndegpu:
    :type ndegpu: integer *
    :param ndegpv:
    :type ndegpv: integer *
    :param itydec:
    :type itydec: integer *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

def AdvApp2Var_ApproxF2var_mma2can_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

def AdvApp2Var_ApproxF2var_mma1her_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

def AdvApp2Var_ApproxF2var_mma2ac2_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

def AdvApp2Var_ApproxF2var_mma2ac3_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

def AdvApp2Var_ApproxF2var_mma2ac1_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

def AdvApp2Var_ApproxF2var_mma2fx6_(*args):
    """
    :param ncfmxu:
    :type ncfmxu: integer *
    :param ncfmxv:
    :type ncfmxv: integer *
    :param ndimen:
    :type ndimen: integer *
    :param nbsesp:
    :type nbsesp: integer *
    :param ndimse:
    :type ndimse: integer *
    :param nbupat:
    :type nbupat: integer *
    :param nbvpat:
    :type nbvpat: integer *
    :param iordru:
    :type iordru: integer *
    :param iordrv:
    :type iordrv: integer *
    :param epsapr:
    :type epsapr: doublereal *
    :param epsfro:
    :type epsfro: doublereal *
    :param patcan:
    :type patcan: doublereal *
    :param errmax:
    :type errmax: doublereal *
    :param ncoefu:
    :type ncoefu: integer *
    :param ncoefv:
    :type ncoefv: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

class AdvApp2Var_Context(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param ifav:
        :type ifav: int
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :param nlimu:
        :type nlimu: int
        :param nlimv:
        :type nlimv: int
        :param iprecis:
        :type iprecis: int
        :param nb1Dss:
        :type nb1Dss: int
        :param nb2Dss:
        :type nb2Dss: int
        :param nb3Dss:
        :type nb3Dss: int
        :param tol1D:
        :type tol1D: Handle_TColStd_HArray1OfReal &
        :param tol2D:
        :type tol2D: Handle_TColStd_HArray1OfReal &
        :param tol3D:
        :type tol3D: Handle_TColStd_HArray1OfReal &
        :param tof1D:
        :type tof1D: Handle_TColStd_HArray2OfReal &
        :param tof2D:
        :type tof2D: Handle_TColStd_HArray2OfReal &
        :param tof3D:
        :type tof3D: Handle_TColStd_HArray2OfReal &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Context_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Context(*args))

    def TotalDimension(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalDimension(self, *args)


    def TotalNumberSSP(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalNumberSSP(self, *args)


    def FavorIso(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_FavorIso(self, *args)


    def UOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_UOrder(self, *args)


    def VOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VOrder(self, *args)


    def ULimit(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_ULimit(self, *args)


    def VLimit(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VLimit(self, *args)


    def UJacDeg(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacDeg(self, *args)


    def VJacDeg(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacDeg(self, *args)


    def UJacMax(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacMax(self, *args)


    def VJacMax(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacMax(self, *args)


    def URoots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_URoots(self, *args)


    def VRoots(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VRoots(self, *args)


    def UGauss(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_UGauss(self, *args)


    def VGauss(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_VGauss(self, *args)


    def IToler(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_IToler(self, *args)


    def FToler(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_FToler(self, *args)


    def CToler(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Context_CToler(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Context.TotalDimension = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_TotalDimension, None, AdvApp2Var_Context)
AdvApp2Var_Context.TotalNumberSSP = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_TotalNumberSSP, None, AdvApp2Var_Context)
AdvApp2Var_Context.FavorIso = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_FavorIso, None, AdvApp2Var_Context)
AdvApp2Var_Context.UOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_UOrder, None, AdvApp2Var_Context)
AdvApp2Var_Context.VOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VOrder, None, AdvApp2Var_Context)
AdvApp2Var_Context.ULimit = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_ULimit, None, AdvApp2Var_Context)
AdvApp2Var_Context.VLimit = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VLimit, None, AdvApp2Var_Context)
AdvApp2Var_Context.UJacDeg = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_UJacDeg, None, AdvApp2Var_Context)
AdvApp2Var_Context.VJacDeg = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VJacDeg, None, AdvApp2Var_Context)
AdvApp2Var_Context.UJacMax = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_UJacMax, None, AdvApp2Var_Context)
AdvApp2Var_Context.VJacMax = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VJacMax, None, AdvApp2Var_Context)
AdvApp2Var_Context.URoots = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_URoots, None, AdvApp2Var_Context)
AdvApp2Var_Context.VRoots = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VRoots, None, AdvApp2Var_Context)
AdvApp2Var_Context.UGauss = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_UGauss, None, AdvApp2Var_Context)
AdvApp2Var_Context.VGauss = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_VGauss, None, AdvApp2Var_Context)
AdvApp2Var_Context.IToler = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_IToler, None, AdvApp2Var_Context)
AdvApp2Var_Context.FToler = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_FToler, None, AdvApp2Var_Context)
AdvApp2Var_Context.CToler = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context_CToler, None, AdvApp2Var_Context)
AdvApp2Var_Context._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Context__kill_pointed, None, AdvApp2Var_Context)
AdvApp2Var_Context_swigregister = _AdvApp2Var.AdvApp2Var_Context_swigregister
AdvApp2Var_Context_swigregister(AdvApp2Var_Context)

class AdvApp2Var_Criterion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Delete(self, *args):
        """
        :rtype: void

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Delete(self, *args)


    def Value(self, *args):
        """
        :param P:
        :type P: AdvApp2Var_Patch &
        :param C:
        :type C: AdvApp2Var_Context &
        :rtype: void

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Value(self, *args)


    def IsSatisfied(self, *args):
        """
        :param P:
        :type P: AdvApp2Var_Patch &
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_IsSatisfied(self, *args)


    def MaxValue(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_MaxValue(self, *args)


    def Type(self, *args):
        """
        :rtype: AdvApp2Var_CriterionType

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Type(self, *args)


    def Repartition(self, *args):
        """
        :rtype: AdvApp2Var_CriterionRepartition

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Repartition(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Criterion.Delete = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_Delete, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_Value, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion.IsSatisfied = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_IsSatisfied, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion.MaxValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_MaxValue, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion.Type = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_Type, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion.Repartition = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion_Repartition, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Criterion__kill_pointed, None, AdvApp2Var_Criterion)
AdvApp2Var_Criterion_swigregister = _AdvApp2Var.AdvApp2Var_Criterion_swigregister
AdvApp2Var_Criterion_swigregister(AdvApp2Var_Criterion)

class AdvApp2Var_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Getmdnombr(*args):
        """
        :rtype: mdnombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

    Getmdnombr = staticmethod(Getmdnombr)

    def Getminombr(*args):
        """
        :rtype: minombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

    Getminombr = staticmethod(Getminombr)

    def Getmaovpar(*args):
        """
        :rtype: maovpar_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

    Getmaovpar = staticmethod(Getmaovpar)

    def Getmaovpch(*args):
        """
        :rtype: maovpch_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

    Getmaovpch = staticmethod(Getmaovpch)

    def Getmlgdrtl(*args):
        """
        :rtype: mlgdrtl_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

    Getmlgdrtl = staticmethod(Getmlgdrtl)

    def Getmmjcobi(*args):
        """
        :rtype: mmjcobi_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

    Getmmjcobi = staticmethod(Getmmjcobi)

    def Getmmcmcnp(*args):
        """
        :rtype: mmcmcnp_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

    Getmmcmcnp = staticmethod(Getmmcmcnp)

    def Getmmapgss(*args):
        """
        :rtype: mmapgss_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

    Getmmapgss = staticmethod(Getmmapgss)

    def Getmmapgs0(*args):
        """
        :rtype: mmapgs0_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

    Getmmapgs0 = staticmethod(Getmmapgs0)

    def Getmmapgs1(*args):
        """
        :rtype: mmapgs1_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

    Getmmapgs1 = staticmethod(Getmmapgs1)

    def Getmmapgs2(*args):
        """
        :rtype: mmapgs2_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

    Getmmapgs2 = staticmethod(Getmmapgs2)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Data._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Data__kill_pointed, None, AdvApp2Var_Data)
AdvApp2Var_Data_swigregister = _AdvApp2Var.AdvApp2Var_Data_swigregister
AdvApp2Var_Data_swigregister(AdvApp2Var_Data)

def AdvApp2Var_Data_Getmdnombr(*args):
    """
    :rtype: mdnombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

def AdvApp2Var_Data_Getminombr(*args):
    """
    :rtype: minombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

def AdvApp2Var_Data_Getmaovpar(*args):
    """
    :rtype: maovpar_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

def AdvApp2Var_Data_Getmaovpch(*args):
    """
    :rtype: maovpch_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

def AdvApp2Var_Data_Getmlgdrtl(*args):
    """
    :rtype: mlgdrtl_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

def AdvApp2Var_Data_Getmmjcobi(*args):
    """
    :rtype: mmjcobi_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

def AdvApp2Var_Data_Getmmcmcnp(*args):
    """
    :rtype: mmcmcnp_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

def AdvApp2Var_Data_Getmmapgss(*args):
    """
    :rtype: mmapgss_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

def AdvApp2Var_Data_Getmmapgs0(*args):
    """
    :rtype: mmapgs0_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

def AdvApp2Var_Data_Getmmapgs1(*args):
    """
    :rtype: mmapgs1_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

def AdvApp2Var_Data_Getmmapgs2(*args):
    """
    :rtype: mmapgs2_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

class AdvApp2Var_Framework(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Frame:
        :type Frame: AdvApp2Var_SequenceOfNode &
        :param UFrontier:
        :type UFrontier: AdvApp2Var_SequenceOfStrip &
        :param VFrontier:
        :type VFrontier: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Framework_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Framework(*args))

    def FirstNotApprox(self, *args):
        """
        * search the Index of the first Iso not approximated, if all Isos are approximated Standard_False is returned.

        :param IndexIso:
        :type IndexIso: int &
        :param IndexStrip:
        :type IndexStrip: int &
        :param anIso:
        :type anIso: AdvApp2Var_Iso &
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNotApprox(self, *args)


    def FirstNode(self, *args):
        """
        :param Type:
        :type Type: GeomAbs_IsoType
        :param IndexIso:
        :type IndexIso: int
        :param IndexStrip:
        :type IndexStrip: int
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNode(self, *args)


    def LastNode(self, *args):
        """
        :param Type:
        :type Type: GeomAbs_IsoType
        :param IndexIso:
        :type IndexIso: int
        :param IndexStrip:
        :type IndexStrip: int
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Framework_LastNode(self, *args)


    def ChangeIso(self, *args):
        """
        :param IndexIso:
        :type IndexIso: int
        :param IndexStrip:
        :type IndexStrip: int
        :param anIso:
        :type anIso: AdvApp2Var_Iso &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_ChangeIso(self, *args)


    def Node(self, *args):
        """
        :param IndexNode:
        :type IndexNode: int
        :rtype: AdvApp2Var_Node

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_Framework_Node(self, *args)


    def IsoU(self, *args):
        """
        :param U:
        :type U: float
        :param V0:
        :type V0: float
        :param V1:
        :type V1: float
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Framework_IsoU(self, *args)


    def IsoV(self, *args):
        """
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param V:
        :type V: float
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Framework_IsoV(self, *args)


    def ChangeNode(self, *args):
        """
        :param IndexNode:
        :type IndexNode: int
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_Framework_ChangeNode(self, *args)


    def UpdateInU(self, *args):
        """
        :param CuttingValue:
        :type CuttingValue: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInU(self, *args)


    def UpdateInV(self, *args):
        """
        :param CuttingValue:
        :type CuttingValue: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInV(self, *args)


    def UEquation(self, *args):
        """
        :param IndexIso:
        :type IndexIso: int
        :param IndexStrip:
        :type IndexStrip: int
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UEquation(self, *args)


    def VEquation(self, *args):
        """
        :param IndexIso:
        :type IndexIso: int
        :param IndexStrip:
        :type IndexStrip: int
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Framework_VEquation(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Framework.FirstNotApprox = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_FirstNotApprox, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.FirstNode = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_FirstNode, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.LastNode = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_LastNode, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.ChangeIso = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_ChangeIso, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.Node = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_Node, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.IsoU = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_IsoU, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.IsoV = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_IsoV, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.ChangeNode = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_ChangeNode, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.UpdateInU = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_UpdateInU, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.UpdateInV = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_UpdateInV, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.UEquation = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_UEquation, None, AdvApp2Var_Framework)
AdvApp2Var_Framework.VEquation = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework_VEquation, None, AdvApp2Var_Framework)
AdvApp2Var_Framework._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Framework__kill_pointed, None, AdvApp2Var_Framework)
AdvApp2Var_Framework_swigregister = _AdvApp2Var.AdvApp2Var_Framework_swigregister
AdvApp2Var_Framework_swigregister(AdvApp2Var_Framework)

class AdvApp2Var_MathBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def mmapcmp_(*args):
        """
        * ///

        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : double *
        :param :
        :type : double *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

    mmapcmp_ = staticmethod(mmapcmp_)

    def mmdrc11_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

    mmdrc11_ = staticmethod(mmdrc11_)

    def mmfmca9_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

    mmfmca9_ = staticmethod(mmfmca9_)

    def mmfmcb5_(*args):
        """
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

    mmfmcb5_ = staticmethod(mmfmcb5_)

    def mmwprcs_(*args):
        """
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : doublereal *
        :param :
        :type : integer *
        :param :
        :type : integer *
        :rtype: void

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

    mmwprcs_ = staticmethod(mmwprcs_)

    def mmcglc1_(*args):
        """
        * ///

        :param ndimax:
        :type ndimax: integer *
        :param ndimen:
        :type ndimen: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param courbe:
        :type courbe: doublereal *
        :param tdebut:
        :type tdebut: doublereal *
        :param tfinal:
        :type tfinal: doublereal *
        :param epsiln:
        :type epsiln: doublereal *
        :param xlongc:
        :type xlongc: doublereal *
        :param erreur:
        :type erreur: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

    mmcglc1_ = staticmethod(mmcglc1_)

    def mmbulld_(*args):
        """
        :param nbcoln:
        :type nbcoln: integer *
        :param nblign:
        :type nblign: integer *
        :param dtabtr:
        :type dtabtr: doublereal *
        :param numcle:
        :type numcle: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

    mmbulld_ = staticmethod(mmbulld_)

    def mmcdriv_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param courbe:
        :type courbe: doublereal *
        :param ideriv:
        :type ideriv: integer *
        :param ncofdv:
        :type ncofdv: integer *
        :param crvdrv:
        :type crvdrv: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

    mmcdriv_ = staticmethod(mmcdriv_)

    def mmcvctx_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param ncofmx:
        :type ncofmx: integer *
        :param nderiv:
        :type nderiv: integer *
        :param ctrtes:
        :type ctrtes: doublereal *
        :param crvres:
        :type crvres: doublereal *
        :param tabaux:
        :type tabaux: doublereal *
        :param xmatri:
        :type xmatri: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

    mmcvctx_ = staticmethod(mmcvctx_)

    def mdsptpt_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param point1:
        :type point1: doublereal *
        :param point2:
        :type point2: doublereal *
        :param distan:
        :type distan: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

    mdsptpt_ = staticmethod(mdsptpt_)

    def mmaperx_(*args):
        """
        :param ncofmx:
        :type ncofmx: integer *
        :param ndimen:
        :type ndimen: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param iordre:
        :type iordre: integer *
        :param crvjac:
        :type crvjac: doublereal *
        :param ncfnew:
        :type ncfnew: integer *
        :param ycvmax:
        :type ycvmax: doublereal *
        :param errmax:
        :type errmax: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

    mmaperx_ = staticmethod(mmaperx_)

    def mmdrvck_(*args):
        """
        :param ncoeff:
        :type ncoeff: integer *
        :param ndimen:
        :type ndimen: integer *
        :param courbe:
        :type courbe: doublereal *
        :param ideriv:
        :type ideriv: integer *
        :param tparam:
        :type tparam: doublereal *
        :param pntcrb:
        :type pntcrb: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

    mmdrvck_ = staticmethod(mmdrvck_)

    def mmeps1_(*args):
        """
        :param epsilo:
        :type epsilo: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

    mmeps1_ = staticmethod(mmeps1_)

    def mmfmca8_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param ncoefu:
        :type ncoefu: integer *
        :param ncoefv:
        :type ncoefv: integer *
        :param ndimax:
        :type ndimax: integer *
        :param ncfumx:
        :type ncfumx: integer *
        :param ncfvmx:
        :type ncfvmx: integer *
        :param tabini:
        :type tabini: doublereal *
        :param tabres:
        :type tabres: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

    mmfmca8_ = staticmethod(mmfmca8_)

    def mmfmcar_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param ncofmx:
        :type ncofmx: integer *
        :param ncoefu:
        :type ncoefu: integer *
        :param ncoefv:
        :type ncoefv: integer *
        :param patold:
        :type patold: doublereal *
        :param upara1:
        :type upara1: doublereal *
        :param upara2:
        :type upara2: doublereal *
        :param vpara1:
        :type vpara1: doublereal *
        :param vpara2:
        :type vpara2: doublereal *
        :param patnew:
        :type patnew: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

    mmfmcar_ = staticmethod(mmfmcar_)

    def mmfmtb1_(*args):
        """
        :param maxsz1:
        :type maxsz1: integer *
        :param table1:
        :type table1: doublereal *
        :param isize1:
        :type isize1: integer *
        :param jsize1:
        :type jsize1: integer *
        :param maxsz2:
        :type maxsz2: integer *
        :param table2:
        :type table2: doublereal *
        :param isize2:
        :type isize2: integer *
        :param jsize2:
        :type jsize2: integer *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

    mmfmtb1_ = staticmethod(mmfmtb1_)

    def mmgaus1_(*args):
        """
        :param ndimf:
        :type ndimf: integer *
        :param :
        :type : int(*bfunx)(integer*ninteg,doublereal*parame,doublereal*vfunj1,integer*iercod)
        :param k:
        :type k: integer *
        :param xd:
        :type xd: doublereal *
        :param xf:
        :type xf: doublereal *
        :param saux1:
        :type saux1: doublereal *
        :param saux2:
        :type saux2: doublereal *
        :param somme:
        :type somme: doublereal *
        :param niter:
        :type niter: integer *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmgaus1_(*args)

    mmgaus1_ = staticmethod(mmgaus1_)

    def mmhjcan_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param ncourb:
        :type ncourb: integer *
        :param ncftab:
        :type ncftab: integer *
        :param orcont:
        :type orcont: integer *
        :param ncflim:
        :type ncflim: integer *
        :param tcbold:
        :type tcbold: doublereal *
        :param tdecop:
        :type tdecop: doublereal *
        :param tcbnew:
        :type tcbnew: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

    mmhjcan_ = staticmethod(mmhjcan_)

    def mminltt_(*args):
        """
        :param ncolmx:
        :type ncolmx: integer *
        :param nlgnmx:
        :type nlgnmx: integer *
        :param tabtri:
        :type tabtri: doublereal *
        :param nbrcol:
        :type nbrcol: integer *
        :param nbrlgn:
        :type nbrlgn: integer *
        :param ajoute:
        :type ajoute: doublereal *
        :param epseg:
        :type epseg: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

    mminltt_ = staticmethod(mminltt_)

    def mmjaccv_(*args):
        """
        :param ncoef:
        :type ncoef: integer *
        :param ndim:
        :type ndim: integer *
        :param ider:
        :type ider: integer *
        :param crvlgd:
        :type crvlgd: doublereal *
        :param polaux:
        :type polaux: doublereal *
        :param crvcan:
        :type crvcan: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

    mmjaccv_ = staticmethod(mmjaccv_)

    def mmpobas_(*args):
        """
        :param tparam:
        :type tparam: doublereal *
        :param iordre:
        :type iordre: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param nderiv:
        :type nderiv: integer *
        :param valbas:
        :type valbas: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

    mmpobas_ = staticmethod(mmpobas_)

    def mmmpocur_(*args):
        """
        :param ncofmx:
        :type ncofmx: integer *
        :param ndim:
        :type ndim: integer *
        :param ndeg:
        :type ndeg: integer *
        :param courbe:
        :type courbe: doublereal *
        :param tparam:
        :type tparam: doublereal *
        :param tabval:
        :type tabval: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

    mmmpocur_ = staticmethod(mmmpocur_)

    def mmposui_(*args):
        """
        :param dimmat:
        :type dimmat: integer *
        :param nistoc:
        :type nistoc: integer *
        :param aposit:
        :type aposit: integer *
        :param posuiv:
        :type posuiv: integer *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

    mmposui_ = staticmethod(mmposui_)

    def mmresol_(*args):
        """
        :param hdimen:
        :type hdimen: integer *
        :param gdimen:
        :type gdimen: integer *
        :param hnstoc:
        :type hnstoc: integer *
        :param gnstoc:
        :type gnstoc: integer *
        :param mnstoc:
        :type mnstoc: integer *
        :param matsyh:
        :type matsyh: doublereal *
        :param matsyg:
        :type matsyg: doublereal *
        :param vecsyh:
        :type vecsyh: doublereal *
        :param vecsyg:
        :type vecsyg: doublereal *
        :param hposit:
        :type hposit: integer *
        :param hposui:
        :type hposui: integer *
        :param gposit:
        :type gposit: integer *
        :param mmposui:
        :type mmposui: integer *
        :param mposit:
        :type mposit: integer *
        :param vecsol:
        :type vecsol: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

    mmresol_ = staticmethod(mmresol_)

    def mmrtptt_(*args):
        """
        :param ndglgd:
        :type ndglgd: integer *
        :param rtlegd:
        :type rtlegd: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

    mmrtptt_ = staticmethod(mmrtptt_)

    def mmsrre2_(*args):
        """
        :param tparam:
        :type tparam: doublereal *
        :param nbrval:
        :type nbrval: integer *
        :param tablev:
        :type tablev: doublereal *
        :param epsil:
        :type epsil: doublereal *
        :param numint:
        :type numint: integer *
        :param itypen:
        :type itypen: integer *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

    mmsrre2_ = staticmethod(mmsrre2_)

    def mmtrpjj_(*args):
        """
        :param ncofmx:
        :type ncofmx: integer *
        :param ndimen:
        :type ndimen: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param epsi3d:
        :type epsi3d: doublereal *
        :param iordre:
        :type iordre: integer *
        :param crvlgd:
        :type crvlgd: doublereal *
        :param ycvmax:
        :type ycvmax: doublereal *
        :param errmax:
        :type errmax: doublereal *
        :param ncfnew:
        :type ncfnew: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

    mmtrpjj_ = staticmethod(mmtrpjj_)

    def mmunivt_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param vector:
        :type vector: doublereal *
        :param vecnrm:
        :type vecnrm: doublereal *
        :param epsiln:
        :type epsiln: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

    mmunivt_ = staticmethod(mmunivt_)

    def mmvncol_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param vecin:
        :type vecin: doublereal *
        :param vecout:
        :type vecout: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

    mmvncol_ = staticmethod(mmvncol_)

    def msc_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param vecte1:
        :type vecte1: doublereal *
        :param vecte2:
        :type vecte2: doublereal *
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

    msc_ = staticmethod(msc_)

    def mvsheld_(*args):
        """
        :param n:
        :type n: integer *
        :param is:
        :type is: integer *
        :param dtab:
        :type dtab: doublereal *
        :param icle:
        :type icle: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

    mvsheld_ = staticmethod(mvsheld_)

    def mmarcin_(*args):
        """
        :param ndimax:
        :type ndimax: integer *
        :param ndim:
        :type ndim: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param crvold:
        :type crvold: doublereal *
        :param u0:
        :type u0: doublereal *
        :param u1:
        :type u1: doublereal *
        :param crvnew:
        :type crvnew: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

    mmarcin_ = staticmethod(mmarcin_)

    def mmcvinv_(*args):
        """
        :param ndimax:
        :type ndimax: integer *
        :param ncoef:
        :type ncoef: integer *
        :param ndim:
        :type ndim: integer *
        :param curveo:
        :type curveo: doublereal *
        :param curve:
        :type curve: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

    mmcvinv_ = staticmethod(mmcvinv_)

    def mmjacan_(*args):
        """
        :param ideriv:
        :type ideriv: integer *
        :param ndeg:
        :type ndeg: integer *
        :param poljac:
        :type poljac: doublereal *
        :param polcan:
        :type polcan: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

    mmjacan_ = staticmethod(mmjacan_)

    def mmpocrb_(*args):
        """
        :param ndimax:
        :type ndimax: integer *
        :param ncoeff:
        :type ncoeff: integer *
        :param courbe:
        :type courbe: doublereal *
        :param ndim:
        :type ndim: integer *
        :param tparam:
        :type tparam: doublereal *
        :param pntcrb:
        :type pntcrb: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

    mmpocrb_ = staticmethod(mmpocrb_)

    def mmmrslwd_(*args):
        """
        :param normax:
        :type normax: integer *
        :param nordre:
        :type nordre: integer *
        :param ndim:
        :type ndim: integer *
        :param amat:
        :type amat: doublereal *
        :param bmat:
        :type bmat: doublereal *
        :param epspiv:
        :type epspiv: doublereal *
        :param aaux:
        :type aaux: doublereal *
        :param xmat:
        :type xmat: doublereal *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

    mmmrslwd_ = staticmethod(mmmrslwd_)

    def mmveps3_(*args):
        """
        :param eps03:
        :type eps03: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

    mmveps3_ = staticmethod(mmveps3_)

    def pow__di(*args):
        """
        :param x:
        :type x: doublereal *
        :param n:
        :type n: integer *
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

    pow__di = staticmethod(pow__di)

    def mzsnorm_(*args):
        """
        :param ndimen:
        :type ndimen: integer *
        :param vecteu:
        :type vecteu: doublereal *
        :rtype: doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

    mzsnorm_ = staticmethod(mzsnorm_)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_MathBase._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_MathBase__kill_pointed, None, AdvApp2Var_MathBase)
AdvApp2Var_MathBase_swigregister = _AdvApp2Var.AdvApp2Var_MathBase_swigregister
AdvApp2Var_MathBase_swigregister(AdvApp2Var_MathBase)

def AdvApp2Var_MathBase_mmapcmp_(*args):
    """
    * ///

    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : double *
    :param :
    :type : double *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

def AdvApp2Var_MathBase_mmdrc11_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

def AdvApp2Var_MathBase_mmfmca9_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

def AdvApp2Var_MathBase_mmfmcb5_(*args):
    """
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

def AdvApp2Var_MathBase_mmwprcs_(*args):
    """
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : doublereal *
    :param :
    :type : integer *
    :param :
    :type : integer *
    :rtype: void

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

def AdvApp2Var_MathBase_mmcglc1_(*args):
    """
    * ///

    :param ndimax:
    :type ndimax: integer *
    :param ndimen:
    :type ndimen: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param courbe:
    :type courbe: doublereal *
    :param tdebut:
    :type tdebut: doublereal *
    :param tfinal:
    :type tfinal: doublereal *
    :param epsiln:
    :type epsiln: doublereal *
    :param xlongc:
    :type xlongc: doublereal *
    :param erreur:
    :type erreur: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

def AdvApp2Var_MathBase_mmbulld_(*args):
    """
    :param nbcoln:
    :type nbcoln: integer *
    :param nblign:
    :type nblign: integer *
    :param dtabtr:
    :type dtabtr: doublereal *
    :param numcle:
    :type numcle: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

def AdvApp2Var_MathBase_mmcdriv_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param courbe:
    :type courbe: doublereal *
    :param ideriv:
    :type ideriv: integer *
    :param ncofdv:
    :type ncofdv: integer *
    :param crvdrv:
    :type crvdrv: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

def AdvApp2Var_MathBase_mmcvctx_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param ncofmx:
    :type ncofmx: integer *
    :param nderiv:
    :type nderiv: integer *
    :param ctrtes:
    :type ctrtes: doublereal *
    :param crvres:
    :type crvres: doublereal *
    :param tabaux:
    :type tabaux: doublereal *
    :param xmatri:
    :type xmatri: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

def AdvApp2Var_MathBase_mdsptpt_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param point1:
    :type point1: doublereal *
    :param point2:
    :type point2: doublereal *
    :param distan:
    :type distan: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

def AdvApp2Var_MathBase_mmaperx_(*args):
    """
    :param ncofmx:
    :type ncofmx: integer *
    :param ndimen:
    :type ndimen: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param iordre:
    :type iordre: integer *
    :param crvjac:
    :type crvjac: doublereal *
    :param ncfnew:
    :type ncfnew: integer *
    :param ycvmax:
    :type ycvmax: doublereal *
    :param errmax:
    :type errmax: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

def AdvApp2Var_MathBase_mmdrvck_(*args):
    """
    :param ncoeff:
    :type ncoeff: integer *
    :param ndimen:
    :type ndimen: integer *
    :param courbe:
    :type courbe: doublereal *
    :param ideriv:
    :type ideriv: integer *
    :param tparam:
    :type tparam: doublereal *
    :param pntcrb:
    :type pntcrb: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

def AdvApp2Var_MathBase_mmeps1_(*args):
    """
    :param epsilo:
    :type epsilo: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

def AdvApp2Var_MathBase_mmfmca8_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param ncoefu:
    :type ncoefu: integer *
    :param ncoefv:
    :type ncoefv: integer *
    :param ndimax:
    :type ndimax: integer *
    :param ncfumx:
    :type ncfumx: integer *
    :param ncfvmx:
    :type ncfvmx: integer *
    :param tabini:
    :type tabini: doublereal *
    :param tabres:
    :type tabres: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

def AdvApp2Var_MathBase_mmfmcar_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param ncofmx:
    :type ncofmx: integer *
    :param ncoefu:
    :type ncoefu: integer *
    :param ncoefv:
    :type ncoefv: integer *
    :param patold:
    :type patold: doublereal *
    :param upara1:
    :type upara1: doublereal *
    :param upara2:
    :type upara2: doublereal *
    :param vpara1:
    :type vpara1: doublereal *
    :param vpara2:
    :type vpara2: doublereal *
    :param patnew:
    :type patnew: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

def AdvApp2Var_MathBase_mmfmtb1_(*args):
    """
    :param maxsz1:
    :type maxsz1: integer *
    :param table1:
    :type table1: doublereal *
    :param isize1:
    :type isize1: integer *
    :param jsize1:
    :type jsize1: integer *
    :param maxsz2:
    :type maxsz2: integer *
    :param table2:
    :type table2: doublereal *
    :param isize2:
    :type isize2: integer *
    :param jsize2:
    :type jsize2: integer *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

def AdvApp2Var_MathBase_mmgaus1_(*args):
    """
    :param ndimf:
    :type ndimf: integer *
    :param :
    :type : int(*bfunx)(integer*ninteg,doublereal*parame,doublereal*vfunj1,integer*iercod)
    :param k:
    :type k: integer *
    :param xd:
    :type xd: doublereal *
    :param xf:
    :type xf: doublereal *
    :param saux1:
    :type saux1: doublereal *
    :param saux2:
    :type saux2: doublereal *
    :param somme:
    :type somme: doublereal *
    :param niter:
    :type niter: integer *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmgaus1_(*args)

def AdvApp2Var_MathBase_mmhjcan_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param ncourb:
    :type ncourb: integer *
    :param ncftab:
    :type ncftab: integer *
    :param orcont:
    :type orcont: integer *
    :param ncflim:
    :type ncflim: integer *
    :param tcbold:
    :type tcbold: doublereal *
    :param tdecop:
    :type tdecop: doublereal *
    :param tcbnew:
    :type tcbnew: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

def AdvApp2Var_MathBase_mminltt_(*args):
    """
    :param ncolmx:
    :type ncolmx: integer *
    :param nlgnmx:
    :type nlgnmx: integer *
    :param tabtri:
    :type tabtri: doublereal *
    :param nbrcol:
    :type nbrcol: integer *
    :param nbrlgn:
    :type nbrlgn: integer *
    :param ajoute:
    :type ajoute: doublereal *
    :param epseg:
    :type epseg: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

def AdvApp2Var_MathBase_mmjaccv_(*args):
    """
    :param ncoef:
    :type ncoef: integer *
    :param ndim:
    :type ndim: integer *
    :param ider:
    :type ider: integer *
    :param crvlgd:
    :type crvlgd: doublereal *
    :param polaux:
    :type polaux: doublereal *
    :param crvcan:
    :type crvcan: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

def AdvApp2Var_MathBase_mmpobas_(*args):
    """
    :param tparam:
    :type tparam: doublereal *
    :param iordre:
    :type iordre: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param nderiv:
    :type nderiv: integer *
    :param valbas:
    :type valbas: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

def AdvApp2Var_MathBase_mmmpocur_(*args):
    """
    :param ncofmx:
    :type ncofmx: integer *
    :param ndim:
    :type ndim: integer *
    :param ndeg:
    :type ndeg: integer *
    :param courbe:
    :type courbe: doublereal *
    :param tparam:
    :type tparam: doublereal *
    :param tabval:
    :type tabval: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

def AdvApp2Var_MathBase_mmposui_(*args):
    """
    :param dimmat:
    :type dimmat: integer *
    :param nistoc:
    :type nistoc: integer *
    :param aposit:
    :type aposit: integer *
    :param posuiv:
    :type posuiv: integer *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

def AdvApp2Var_MathBase_mmresol_(*args):
    """
    :param hdimen:
    :type hdimen: integer *
    :param gdimen:
    :type gdimen: integer *
    :param hnstoc:
    :type hnstoc: integer *
    :param gnstoc:
    :type gnstoc: integer *
    :param mnstoc:
    :type mnstoc: integer *
    :param matsyh:
    :type matsyh: doublereal *
    :param matsyg:
    :type matsyg: doublereal *
    :param vecsyh:
    :type vecsyh: doublereal *
    :param vecsyg:
    :type vecsyg: doublereal *
    :param hposit:
    :type hposit: integer *
    :param hposui:
    :type hposui: integer *
    :param gposit:
    :type gposit: integer *
    :param mmposui:
    :type mmposui: integer *
    :param mposit:
    :type mposit: integer *
    :param vecsol:
    :type vecsol: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

def AdvApp2Var_MathBase_mmrtptt_(*args):
    """
    :param ndglgd:
    :type ndglgd: integer *
    :param rtlegd:
    :type rtlegd: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

def AdvApp2Var_MathBase_mmsrre2_(*args):
    """
    :param tparam:
    :type tparam: doublereal *
    :param nbrval:
    :type nbrval: integer *
    :param tablev:
    :type tablev: doublereal *
    :param epsil:
    :type epsil: doublereal *
    :param numint:
    :type numint: integer *
    :param itypen:
    :type itypen: integer *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

def AdvApp2Var_MathBase_mmtrpjj_(*args):
    """
    :param ncofmx:
    :type ncofmx: integer *
    :param ndimen:
    :type ndimen: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param epsi3d:
    :type epsi3d: doublereal *
    :param iordre:
    :type iordre: integer *
    :param crvlgd:
    :type crvlgd: doublereal *
    :param ycvmax:
    :type ycvmax: doublereal *
    :param errmax:
    :type errmax: doublereal *
    :param ncfnew:
    :type ncfnew: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

def AdvApp2Var_MathBase_mmunivt_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param vector:
    :type vector: doublereal *
    :param vecnrm:
    :type vecnrm: doublereal *
    :param epsiln:
    :type epsiln: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

def AdvApp2Var_MathBase_mmvncol_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param vecin:
    :type vecin: doublereal *
    :param vecout:
    :type vecout: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

def AdvApp2Var_MathBase_msc_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param vecte1:
    :type vecte1: doublereal *
    :param vecte2:
    :type vecte2: doublereal *
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

def AdvApp2Var_MathBase_mvsheld_(*args):
    """
    :param n:
    :type n: integer *
    :param is:
    :type is: integer *
    :param dtab:
    :type dtab: doublereal *
    :param icle:
    :type icle: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

def AdvApp2Var_MathBase_mmarcin_(*args):
    """
    :param ndimax:
    :type ndimax: integer *
    :param ndim:
    :type ndim: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param crvold:
    :type crvold: doublereal *
    :param u0:
    :type u0: doublereal *
    :param u1:
    :type u1: doublereal *
    :param crvnew:
    :type crvnew: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

def AdvApp2Var_MathBase_mmcvinv_(*args):
    """
    :param ndimax:
    :type ndimax: integer *
    :param ncoef:
    :type ncoef: integer *
    :param ndim:
    :type ndim: integer *
    :param curveo:
    :type curveo: doublereal *
    :param curve:
    :type curve: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

def AdvApp2Var_MathBase_mmjacan_(*args):
    """
    :param ideriv:
    :type ideriv: integer *
    :param ndeg:
    :type ndeg: integer *
    :param poljac:
    :type poljac: doublereal *
    :param polcan:
    :type polcan: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

def AdvApp2Var_MathBase_mmpocrb_(*args):
    """
    :param ndimax:
    :type ndimax: integer *
    :param ncoeff:
    :type ncoeff: integer *
    :param courbe:
    :type courbe: doublereal *
    :param ndim:
    :type ndim: integer *
    :param tparam:
    :type tparam: doublereal *
    :param pntcrb:
    :type pntcrb: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

def AdvApp2Var_MathBase_mmmrslwd_(*args):
    """
    :param normax:
    :type normax: integer *
    :param nordre:
    :type nordre: integer *
    :param ndim:
    :type ndim: integer *
    :param amat:
    :type amat: doublereal *
    :param bmat:
    :type bmat: doublereal *
    :param epspiv:
    :type epspiv: doublereal *
    :param aaux:
    :type aaux: doublereal *
    :param xmat:
    :type xmat: doublereal *
    :param iercod:
    :type iercod: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

def AdvApp2Var_MathBase_mmveps3_(*args):
    """
    :param eps03:
    :type eps03: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

def AdvApp2Var_MathBase_pow__di(*args):
    """
    :param x:
    :type x: doublereal *
    :param n:
    :type n: integer *
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

def AdvApp2Var_MathBase_mzsnorm_(*args):
    """
    :param ndimen:
    :type ndimen: integer *
    :param vecteu:
    :type vecteu: doublereal *
    :rtype: doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

class AdvApp2Var_Network(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Net:
        :type Net: AdvApp2Var_SequenceOfPatch &
        :param TheU:
        :type TheU: TColStd_SequenceOfReal &
        :param TheV:
        :type TheV: TColStd_SequenceOfReal &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Network_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Network(*args))

    def FirstNotApprox(self, *args):
        """
        * search the Index of the first Patch not approximated, if all Patches are approximated Standard_False is returned

        :param Index:
        :type Index: int &
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Network_FirstNotApprox(self, *args)


    def ChangePatch(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_Network_ChangePatch(self, *args)


    def UpdateInU(self, *args):
        """
        :param CuttingValue:
        :type CuttingValue: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInU(self, *args)


    def UpdateInV(self, *args):
        """
        :param CuttingValue:
        :type CuttingValue: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInV(self, *args)


    def SameDegree(self, *args):
        """
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :param ncfu:
        :type ncfu: int &
        :param ncfv:
        :type ncfv: int &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Network_SameDegree(self, *args)


    def NbPatch(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatch(self, *args)


    def NbPatchInU(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInU(self, *args)


    def NbPatchInV(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInV(self, *args)


    def UParameter(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Network_UParameter(self, *args)


    def VParameter(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Network_VParameter(self, *args)


    def Patch(self, *args):
        """
        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_Network_Patch(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Network.FirstNotApprox = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_FirstNotApprox, None, AdvApp2Var_Network)
AdvApp2Var_Network.ChangePatch = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_ChangePatch, None, AdvApp2Var_Network)
AdvApp2Var_Network.UpdateInU = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_UpdateInU, None, AdvApp2Var_Network)
AdvApp2Var_Network.UpdateInV = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_UpdateInV, None, AdvApp2Var_Network)
AdvApp2Var_Network.SameDegree = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_SameDegree, None, AdvApp2Var_Network)
AdvApp2Var_Network.NbPatch = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_NbPatch, None, AdvApp2Var_Network)
AdvApp2Var_Network.NbPatchInU = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_NbPatchInU, None, AdvApp2Var_Network)
AdvApp2Var_Network.NbPatchInV = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_NbPatchInV, None, AdvApp2Var_Network)
AdvApp2Var_Network.UParameter = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_UParameter, None, AdvApp2Var_Network)
AdvApp2Var_Network.VParameter = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_VParameter, None, AdvApp2Var_Network)
AdvApp2Var_Network.Patch = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network_Patch, None, AdvApp2Var_Network)
AdvApp2Var_Network._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Network__kill_pointed, None, AdvApp2Var_Network)
AdvApp2Var_Network_swigregister = _AdvApp2Var.AdvApp2Var_Network_swigregister
AdvApp2Var_Network_swigregister(AdvApp2Var_Network)

class AdvApp2Var_Node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: None

        :param UV:
        :type UV: gp_XY
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Node_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Node(*args))

    def Coord(self, *args):
        """
        :rtype: gp_XY

        """
        return _AdvApp2Var.AdvApp2Var_Node_Coord(self, *args)


    def SetCoord(self, *args):
        """
        :param x1:
        :type x1: float
        :param x2:
        :type x2: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetCoord(self, *args)


    def UOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Node_UOrder(self, *args)


    def VOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Node_VOrder(self, *args)


    def SetPoint(self, *args):
        """
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :param Cte:
        :type Cte: gp_Pnt
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetPoint(self, *args)


    def Point(self, *args):
        """
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: gp_Pnt

        """
        return _AdvApp2Var.AdvApp2Var_Node_Point(self, *args)


    def SetError(self, *args):
        """
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :param error:
        :type error: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetError(self, *args)


    def Error(self, *args):
        """
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Node_Error(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Node.Coord = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_Coord, None, AdvApp2Var_Node)
AdvApp2Var_Node.SetCoord = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_SetCoord, None, AdvApp2Var_Node)
AdvApp2Var_Node.UOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_UOrder, None, AdvApp2Var_Node)
AdvApp2Var_Node.VOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_VOrder, None, AdvApp2Var_Node)
AdvApp2Var_Node.SetPoint = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_SetPoint, None, AdvApp2Var_Node)
AdvApp2Var_Node.Point = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_Point, None, AdvApp2Var_Node)
AdvApp2Var_Node.SetError = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_SetError, None, AdvApp2Var_Node)
AdvApp2Var_Node.Error = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node_Error, None, AdvApp2Var_Node)
AdvApp2Var_Node._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Node__kill_pointed, None, AdvApp2Var_Node)
AdvApp2Var_Node_swigregister = _AdvApp2Var.AdvApp2Var_Node_swigregister
AdvApp2Var_Node_swigregister(AdvApp2Var_Node)

class AdvApp2Var_Patch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param V0:
        :type V0: float
        :param V1:
        :type V1: float
        :param iu:
        :type iu: int
        :param iv:
        :type iv: int
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Patch_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Patch(*args))

    def IsDiscretised(self, *args):
        """
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsDiscretised(self, *args)


    def Discretise(self, *args):
        """
        :param Conditions:
        :type Conditions: AdvApp2Var_Context &
        :param Constraints:
        :type Constraints: AdvApp2Var_Framework &
        :param func:
        :type func: AdvApp2Var_EvaluatorFunc2Var &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Discretise(self, *args)


    def IsApproximated(self, *args):
        """
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsApproximated(self, *args)


    def HasResult(self, *args):
        """
        :rtype: bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_HasResult(self, *args)


    def MakeApprox(self, *args):
        """
        :param Conditions:
        :type Conditions: AdvApp2Var_Context &
        :param Constraints:
        :type Constraints: AdvApp2Var_Framework &
        :param NumDec:
        :type NumDec: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MakeApprox(self, *args)


    def AddConstraints(self, *args):
        """
        :param Conditions:
        :type Conditions: AdvApp2Var_Context &
        :param Constraints:
        :type Constraints: AdvApp2Var_Framework &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddConstraints(self, *args)


    def AddErrors(self, *args):
        """
        :param Constraints:
        :type Constraints: AdvApp2Var_Framework &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddErrors(self, *args)


    def ChangeDomain(self, *args):
        """
        :param a:
        :type a: float
        :param b:
        :type b: float
        :param c:
        :type c: float
        :param d:
        :type d: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeDomain(self, *args)


    def ResetApprox(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ResetApprox(self, *args)


    def OverwriteApprox(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_OverwriteApprox(self, *args)


    def U0(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U0(self, *args)


    def U1(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U1(self, *args)


    def V0(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V0(self, *args)


    def V1(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V1(self, *args)


    def UOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_UOrder(self, *args)


    def VOrder(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_VOrder(self, *args)


    def CutSense(self, *args):
        """
        :rtype: int

        :param Crit:
        :type Crit: AdvApp2Var_Criterion &
        :param NumDec:
        :type NumDec: int
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CutSense(self, *args)


    def NbCoeffInU(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInU(self, *args)


    def NbCoeffInV(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInV(self, *args)


    def ChangeNbCoeff(self, *args):
        """
        :param NbCoeffU:
        :type NbCoeffU: int
        :param NbCoeffV:
        :type NbCoeffV: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeNbCoeff(self, *args)


    def Poles(self, *args):
        """
        :param SSPIndex:
        :type SSPIndex: int
        :param Conditions:
        :type Conditions: AdvApp2Var_Context &
        :rtype: Handle_TColgp_HArray2OfPnt

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Poles(self, *args)


    def Coefficients(self, *args):
        """
        :param SSPIndex:
        :type SSPIndex: int
        :param Conditions:
        :type Conditions: AdvApp2Var_Context &
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Coefficients(self, *args)


    def MaxErrors(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MaxErrors(self, *args)


    def AverageErrors(self, *args):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AverageErrors(self, *args)


    def IsoErrors(self, *args):
        """
        :rtype: Handle_TColStd_HArray2OfReal

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsoErrors(self, *args)


    def CritValue(self, *args):
        """
        :rtype: float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CritValue(self, *args)


    def SetCritValue(self, *args):
        """
        :param dist:
        :type dist: float
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_SetCritValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Patch.IsDiscretised = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_IsDiscretised, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.Discretise = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_Discretise, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.IsApproximated = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_IsApproximated, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.HasResult = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_HasResult, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.MakeApprox = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_MakeApprox, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.AddConstraints = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_AddConstraints, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.AddErrors = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_AddErrors, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.ChangeDomain = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_ChangeDomain, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.ResetApprox = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_ResetApprox, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.OverwriteApprox = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_OverwriteApprox, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.U0 = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_U0, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.U1 = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_U1, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.V0 = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_V0, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.V1 = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_V1, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.UOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_UOrder, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.VOrder = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_VOrder, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.CutSense = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_CutSense, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.NbCoeffInU = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_NbCoeffInU, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.NbCoeffInV = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_NbCoeffInV, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.ChangeNbCoeff = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_ChangeNbCoeff, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.Poles = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_Poles, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.Coefficients = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_Coefficients, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.MaxErrors = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_MaxErrors, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.AverageErrors = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_AverageErrors, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.IsoErrors = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_IsoErrors, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.CritValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_CritValue, None, AdvApp2Var_Patch)
AdvApp2Var_Patch.SetCritValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch_SetCritValue, None, AdvApp2Var_Patch)
AdvApp2Var_Patch._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Patch__kill_pointed, None, AdvApp2Var_Patch)
AdvApp2Var_Patch_swigregister = _AdvApp2Var.AdvApp2Var_Patch_swigregister
AdvApp2Var_Patch_swigregister(AdvApp2Var_Patch)

class AdvApp2Var_SequenceNodeOfSequenceOfNode(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: AdvApp2Var_Node &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceNodeOfSequenceOfNode(*args))

    def Value(self, *args):
        """
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(AdvApp2Var_SequenceNodeOfSequenceOfNode self)"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(AdvApp2Var_SequenceNodeOfSequenceOfNode self) -> Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceNodeOfSequenceOfNode.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_Value, None, AdvApp2Var_SequenceNodeOfSequenceOfNode)
AdvApp2Var_SequenceNodeOfSequenceOfNode._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode__kill_pointed, None, AdvApp2Var_SequenceNodeOfSequenceOfNode)
AdvApp2Var_SequenceNodeOfSequenceOfNode.GetHandle = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_GetHandle, None, AdvApp2Var_SequenceNodeOfSequenceOfNode)
AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister = _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister
AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister(AdvApp2Var_SequenceNodeOfSequenceOfNode)

class Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_swiginit(self, _AdvApp2Var.new_Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode(*args))
    DownCast = staticmethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode.Nullify = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_Nullify, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode.IsNull = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_IsNull, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode.GetObject = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_GetObject, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode._kill_pointed = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode__kill_pointed, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_swigregister(Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode)

def Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_DownCast(AnObject):
    return _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_DownCast(AnObject)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_DownCast = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfNode_DownCast

class AdvApp2Var_SequenceNodeOfSequenceOfPatch(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: AdvApp2Var_Patch &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceNodeOfSequenceOfPatch(*args))

    def Value(self, *args):
        """
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(AdvApp2Var_SequenceNodeOfSequenceOfPatch self)"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(AdvApp2Var_SequenceNodeOfSequenceOfPatch self) -> Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceNodeOfSequenceOfPatch.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_Value, None, AdvApp2Var_SequenceNodeOfSequenceOfPatch)
AdvApp2Var_SequenceNodeOfSequenceOfPatch._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch__kill_pointed, None, AdvApp2Var_SequenceNodeOfSequenceOfPatch)
AdvApp2Var_SequenceNodeOfSequenceOfPatch.GetHandle = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_GetHandle, None, AdvApp2Var_SequenceNodeOfSequenceOfPatch)
AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister = _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister
AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister(AdvApp2Var_SequenceNodeOfSequenceOfPatch)

class Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_swiginit(self, _AdvApp2Var.new_Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch(*args))
    DownCast = staticmethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch.Nullify = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_Nullify, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch.IsNull = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_IsNull, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch.GetObject = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_GetObject, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch._kill_pointed = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch__kill_pointed, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_swigregister(Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch)

def Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_DownCast(AnObject):
    return _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_DownCast(AnObject)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_DownCast = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfPatch_DownCast

class AdvApp2Var_SequenceNodeOfSequenceOfStrip(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: AdvApp2Var_Strip &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceNodeOfSequenceOfStrip(*args))

    def Value(self, *args):
        """
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(AdvApp2Var_SequenceNodeOfSequenceOfStrip self)"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(AdvApp2Var_SequenceNodeOfSequenceOfStrip self) -> Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceNodeOfSequenceOfStrip.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_Value, None, AdvApp2Var_SequenceNodeOfSequenceOfStrip)
AdvApp2Var_SequenceNodeOfSequenceOfStrip._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip__kill_pointed, None, AdvApp2Var_SequenceNodeOfSequenceOfStrip)
AdvApp2Var_SequenceNodeOfSequenceOfStrip.GetHandle = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_GetHandle, None, AdvApp2Var_SequenceNodeOfSequenceOfStrip)
AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister = _AdvApp2Var.AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister
AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister(AdvApp2Var_SequenceNodeOfSequenceOfStrip)

class Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_swiginit(self, _AdvApp2Var.new_Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip(*args))
    DownCast = staticmethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip.Nullify = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_Nullify, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip.IsNull = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_IsNull, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip.GetObject = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_GetObject, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip._kill_pointed = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip__kill_pointed, None, Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_swigregister(Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip)

def Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_DownCast(AnObject):
    return _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_DownCast(AnObject)
Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_DownCast = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfSequenceOfStrip_DownCast

class AdvApp2Var_SequenceNodeOfStrip(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: AdvApp2Var_Iso &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceNodeOfStrip(*args))

    def Value(self, *args):
        """
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(AdvApp2Var_SequenceNodeOfStrip self)"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(AdvApp2Var_SequenceNodeOfStrip self) -> Handle_AdvApp2Var_SequenceNodeOfStrip"""
        return _AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceNodeOfStrip.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_Value, None, AdvApp2Var_SequenceNodeOfStrip)
AdvApp2Var_SequenceNodeOfStrip._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip__kill_pointed, None, AdvApp2Var_SequenceNodeOfStrip)
AdvApp2Var_SequenceNodeOfStrip.GetHandle = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_GetHandle, None, AdvApp2Var_SequenceNodeOfStrip)
AdvApp2Var_SequenceNodeOfStrip_swigregister = _AdvApp2Var.AdvApp2Var_SequenceNodeOfStrip_swigregister
AdvApp2Var_SequenceNodeOfStrip_swigregister(AdvApp2Var_SequenceNodeOfStrip)

class Handle_AdvApp2Var_SequenceNodeOfStrip(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_swiginit(self, _AdvApp2Var.new_Handle_AdvApp2Var_SequenceNodeOfStrip(*args))
    DownCast = staticmethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_AdvApp2Var_SequenceNodeOfStrip.Nullify = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_Nullify, None, Handle_AdvApp2Var_SequenceNodeOfStrip)
Handle_AdvApp2Var_SequenceNodeOfStrip.IsNull = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_IsNull, None, Handle_AdvApp2Var_SequenceNodeOfStrip)
Handle_AdvApp2Var_SequenceNodeOfStrip.GetObject = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_GetObject, None, Handle_AdvApp2Var_SequenceNodeOfStrip)
Handle_AdvApp2Var_SequenceNodeOfStrip._kill_pointed = new_instancemethod(_AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip__kill_pointed, None, Handle_AdvApp2Var_SequenceNodeOfStrip)
Handle_AdvApp2Var_SequenceNodeOfStrip_swigregister = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_swigregister
Handle_AdvApp2Var_SequenceNodeOfStrip_swigregister(Handle_AdvApp2Var_SequenceNodeOfStrip)

def Handle_AdvApp2Var_SequenceNodeOfStrip_DownCast(AnObject):
    return _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_DownCast(AnObject)
Handle_AdvApp2Var_SequenceNodeOfStrip_DownCast = _AdvApp2Var.Handle_AdvApp2Var_SequenceNodeOfStrip_DownCast

class AdvApp2Var_SequenceOfNode(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceOfNode_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfNode(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfNode &
        :rtype: AdvApp2Var_SequenceOfNode

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfNode &
        :rtype: AdvApp2Var_SequenceOfNode

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Node &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfNode &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Node &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfNode &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Node &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfNode &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Node &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfNode &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_First(self, *args)


    def Last(self, *args):
        """
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: AdvApp2Var_SequenceOfNode &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: AdvApp2Var_Node &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Node

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceOfNode.Clear = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Clear, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Assign = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Assign, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Set = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Set, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Append = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Append, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Prepend = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Prepend, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.InsertBefore = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertBefore, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.InsertAfter = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertAfter, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.First = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_First, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Last = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Last, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Split = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Split, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Value, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.SetValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_SetValue, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.ChangeValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeValue, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode.Remove = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Remove, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode__kill_pointed, None, AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfNode_swigregister
AdvApp2Var_SequenceOfNode_swigregister(AdvApp2Var_SequenceOfNode)

class AdvApp2Var_SequenceOfPatch(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceOfPatch_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfPatch(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfPatch &
        :rtype: AdvApp2Var_SequenceOfPatch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfPatch &
        :rtype: AdvApp2Var_SequenceOfPatch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Patch &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfPatch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Patch &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfPatch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Patch &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfPatch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Patch &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfPatch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_First(self, *args)


    def Last(self, *args):
        """
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: AdvApp2Var_SequenceOfPatch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: AdvApp2Var_Patch &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceOfPatch.Clear = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Clear, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Assign = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Assign, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Set = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Set, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Append = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Append, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Prepend = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Prepend, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.InsertBefore = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertBefore, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.InsertAfter = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertAfter, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.First = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_First, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Last = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Last, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Split = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Split, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Value, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.SetValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_SetValue, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.ChangeValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeValue, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch.Remove = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Remove, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch__kill_pointed, None, AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfPatch_swigregister
AdvApp2Var_SequenceOfPatch_swigregister(AdvApp2Var_SequenceOfPatch)

class AdvApp2Var_SequenceOfStrip(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SequenceOfStrip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfStrip(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfStrip &
        :rtype: AdvApp2Var_SequenceOfStrip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_SequenceOfStrip &
        :rtype: AdvApp2Var_SequenceOfStrip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Strip &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Strip &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Strip &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Strip &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_First(self, *args)


    def Last(self, *args):
        """
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: AdvApp2Var_SequenceOfStrip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SequenceOfStrip.Clear = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Clear, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Assign = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Assign, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Set = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Set, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Append = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Append, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Prepend = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Prepend, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.InsertBefore = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertBefore, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.InsertAfter = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertAfter, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.First = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_First, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Last = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Last, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Split = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Split, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Value, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.SetValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_SetValue, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.ChangeValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeValue, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip.Remove = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Remove, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip__kill_pointed, None, AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfStrip_swigregister
AdvApp2Var_SequenceOfStrip_swigregister(AdvApp2Var_SequenceOfStrip)

class AdvApp2Var_Strip(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_Strip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Strip(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_Strip &
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: AdvApp2Var_Strip &
        :rtype: AdvApp2Var_Strip

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Iso &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: AdvApp2Var_Iso &
        :rtype: None

        :param S:
        :type S: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Iso &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: AdvApp2Var_Iso &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Strip_First(self, *args)


    def Last(self, *args):
        """
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: AdvApp2Var_Strip &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: AdvApp2Var_Iso &
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Strip_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _AdvApp2Var.AdvApp2Var_Strip_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_Strip.Clear = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Clear, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Assign = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Assign, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Set = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Set, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Append = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Append, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Prepend = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Prepend, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.InsertBefore = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_InsertBefore, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.InsertAfter = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_InsertAfter, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.First = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_First, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Last = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Last, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Split = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Split, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Value = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Value, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.SetValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_SetValue, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.ChangeValue = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_ChangeValue, None, AdvApp2Var_Strip)
AdvApp2Var_Strip.Remove = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip_Remove, None, AdvApp2Var_Strip)
AdvApp2Var_Strip._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_Strip__kill_pointed, None, AdvApp2Var_Strip)
AdvApp2Var_Strip_swigregister = _AdvApp2Var.AdvApp2Var_Strip_swigregister
AdvApp2Var_Strip_swigregister(AdvApp2Var_Strip)

class AdvApp2Var_SysBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _AdvApp2Var.AdvApp2Var_SysBase_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SysBase(*args))

    def mainial_(self, *args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mainial_(self, *args)


    def macinit_(*args):
        """
        :param :
        :type : int *
        :param :
        :type : int *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

    macinit_ = staticmethod(macinit_)

    def mcrdelt_(self, *args):
        """
        :param iunit:
        :type iunit: integer *
        :param isize:
        :type isize: integer *
        :param t:
        :type t: void *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrdelt_(self, *args)


    def mcrfill_(*args):
        """
        :param size:
        :type size: integer *
        :param tin:
        :type tin: void *
        :param tout:
        :type tout: void *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

    mcrfill_ = staticmethod(mcrfill_)

    def mcrrqst_(self, *args):
        """
        :param iunit:
        :type iunit: integer *
        :param isize:
        :type isize: integer *
        :param t:
        :type t: void *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrrqst_(self, *args)


    def mnfndeb_(*args):
        """
        :rtype: integer

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

    mnfndeb_ = staticmethod(mnfndeb_)

    def do__fio(*args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

    do__fio = staticmethod(do__fio)

    def do__lio(*args):
        """
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

    do__lio = staticmethod(do__lio)

    def macrai4_(self, *args):
        """
        :param nbelem:
        :type nbelem: integer *
        :param maxelm:
        :type maxelm: integer *
        :param itablo:
        :type itablo: integer *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrai4_(self, *args)


    def macrar8_(self, *args):
        """
        :param nbelem:
        :type nbelem: integer *
        :param maxelm:
        :type maxelm: integer *
        :param xtablo:
        :type xtablo: doublereal *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrar8_(self, *args)


    def macrdi4_(self, *args):
        """
        :param nbelem:
        :type nbelem: integer *
        :param maxelm:
        :type maxelm: integer *
        :param itablo:
        :type itablo: integer *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdi4_(self, *args)


    def macrdr8_(self, *args):
        """
        :param nbelem:
        :type nbelem: integer *
        :param maxelm:
        :type maxelm: integer *
        :param xtablo:
        :type xtablo: doublereal *
        :param iofset:
        :type iofset: intptr_t *
        :param iercod:
        :type iercod: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdr8_(self, *args)


    def maermsg_(*args):
        """
        :param cnompg:
        :type cnompg: char *
        :param icoder:
        :type icoder: integer *
        :param cnompg_len:
        :type cnompg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

    maermsg_ = staticmethod(maermsg_)

    def maitbr8_(*args):
        """
        :param itaill:
        :type itaill: integer *
        :param xtab:
        :type xtab: doublereal *
        :param xval:
        :type xval: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

    maitbr8_ = staticmethod(maitbr8_)

    def maovsr8_(*args):
        """
        :param ivalcs:
        :type ivalcs: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

    maovsr8_ = staticmethod(maovsr8_)

    def mgenmsg_(*args):
        """
        :param nomprg:
        :type nomprg: char *
        :param nomprg_len:
        :type nomprg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

    mgenmsg_ = staticmethod(mgenmsg_)

    def mgsomsg_(*args):
        """
        :param nomprg:
        :type nomprg: char *
        :param nomprg_len:
        :type nomprg_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

    mgsomsg_ = staticmethod(mgsomsg_)

    def miraz_(*args):
        """
        :param taille:
        :type taille: integer *
        :param adt:
        :type adt: void *
        :rtype: void

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

    miraz_ = staticmethod(miraz_)

    def msifill_(*args):
        """
        :param nbintg:
        :type nbintg: integer *
        :param ivecin:
        :type ivecin: integer *
        :param ivecou:
        :type ivecou: integer *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

    msifill_ = staticmethod(msifill_)

    def msrfill_(*args):
        """
        :param nbreel:
        :type nbreel: integer *
        :param vecent:
        :type vecent: doublereal *
        :param vecsor:
        :type vecsor: doublereal *
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

    msrfill_ = staticmethod(msrfill_)

    def mswrdbg_(*args):
        """
        :param ctexte:
        :type ctexte: char *
        :param ctexte_len:
        :type ctexte_len: ftnlen
        :rtype: int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

    mswrdbg_ = staticmethod(mswrdbg_)

    def mvriraz_(*args):
        """
        :param taille:
        :type taille: integer *
        :param adt:
        :type adt: void *
        :rtype: void

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)

    mvriraz_ = staticmethod(mvriraz_)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


AdvApp2Var_SysBase.mainial_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_mainial_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.mcrdelt_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_mcrdelt_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.mcrrqst_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_mcrrqst_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.macrai4_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_macrai4_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.macrar8_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_macrar8_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.macrdi4_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_macrdi4_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase.macrdr8_ = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase_macrdr8_, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase._kill_pointed = new_instancemethod(_AdvApp2Var.AdvApp2Var_SysBase__kill_pointed, None, AdvApp2Var_SysBase)
AdvApp2Var_SysBase_swigregister = _AdvApp2Var.AdvApp2Var_SysBase_swigregister
AdvApp2Var_SysBase_swigregister(AdvApp2Var_SysBase)

def AdvApp2Var_SysBase_macinit_(*args):
    """
    :param :
    :type : int *
    :param :
    :type : int *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

def AdvApp2Var_SysBase_mcrfill_(*args):
    """
    :param size:
    :type size: integer *
    :param tin:
    :type tin: void *
    :param tout:
    :type tout: void *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

def AdvApp2Var_SysBase_mnfndeb_(*args):
    """
    :rtype: integer

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

def AdvApp2Var_SysBase_do__fio(*args):
    """
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

def AdvApp2Var_SysBase_do__lio(*args):
    """
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

def AdvApp2Var_SysBase_maermsg_(*args):
    """
    :param cnompg:
    :type cnompg: char *
    :param icoder:
    :type icoder: integer *
    :param cnompg_len:
    :type cnompg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

def AdvApp2Var_SysBase_maitbr8_(*args):
    """
    :param itaill:
    :type itaill: integer *
    :param xtab:
    :type xtab: doublereal *
    :param xval:
    :type xval: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

def AdvApp2Var_SysBase_maovsr8_(*args):
    """
    :param ivalcs:
    :type ivalcs: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

def AdvApp2Var_SysBase_mgenmsg_(*args):
    """
    :param nomprg:
    :type nomprg: char *
    :param nomprg_len:
    :type nomprg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

def AdvApp2Var_SysBase_mgsomsg_(*args):
    """
    :param nomprg:
    :type nomprg: char *
    :param nomprg_len:
    :type nomprg_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

def AdvApp2Var_SysBase_miraz_(*args):
    """
    :param taille:
    :type taille: integer *
    :param adt:
    :type adt: void *
    :rtype: void

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

def AdvApp2Var_SysBase_msifill_(*args):
    """
    :param nbintg:
    :type nbintg: integer *
    :param ivecin:
    :type ivecin: integer *
    :param ivecou:
    :type ivecou: integer *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

def AdvApp2Var_SysBase_msrfill_(*args):
    """
    :param nbreel:
    :type nbreel: integer *
    :param vecent:
    :type vecent: doublereal *
    :param vecsor:
    :type vecsor: doublereal *
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

def AdvApp2Var_SysBase_mswrdbg_(*args):
    """
    :param ctexte:
    :type ctexte: char *
    :param ctexte_len:
    :type ctexte_len: ftnlen
    :rtype: int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

def AdvApp2Var_SysBase_mvriraz_(*args):
    """
    :param taille:
    :type taille: integer *
    :param adt:
    :type adt: void *
    :rtype: void

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)



