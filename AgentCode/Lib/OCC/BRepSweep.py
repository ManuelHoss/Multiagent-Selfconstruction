# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _BRepSweep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepSweep', [dirname(__file__)])
        except ImportError:
            import _BRepSweep
            return _BRepSweep
        if fp is not None:
            try:
                _mod = imp.load_module('_BRepSweep', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BRepSweep = swig_import_helper()
    del swig_import_helper
else:
    import _BRepSweep
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepSweep.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_BRepSweep.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepSweep.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepSweep.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepSweep.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepSweep.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepSweep.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepSweep.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepSweep.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepSweep.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepSweep.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepSweep.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepSweep.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepSweep.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepSweep.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepSweep.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepSweep.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _BRepSweep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TopoDS
import OCC.MMgt
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.BRep
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.Sweep
import OCC.Quantity
class BRepSweep_Array2OfShapesOfNumLinearRegularSweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: TopoDS_Shape &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_swiginit(self,_BRepSweep.new_BRepSweep_Array2OfShapesOfNumLinearRegularSweep(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Destroy(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepSweep_Array2OfShapesOfNumLinearRegularSweep &
        :rtype: BRepSweep_Array2OfShapesOfNumLinearRegularSweep

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepSweep_Array2OfShapesOfNumLinearRegularSweep &
        :rtype: BRepSweep_Array2OfShapesOfNumLinearRegularSweep

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Set(self, *args)

    def ColLength(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_ColLength(self, *args)

    def RowLength(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_RowLength(self, *args)

    def LowerCol(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_LowerCol(self, *args)

    def LowerRow(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_LowerRow(self, *args)

    def UpperCol(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_UpperCol(self, *args)

    def UpperRow(self, *args):
        """
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_UpperRow(self, *args)

    def SetValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Array2OfShapesOfNumLinearRegularSweep.Init = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Init,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.Destroy = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Destroy,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.Assign = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Assign,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.Set = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Set,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.ColLength = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_ColLength,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.RowLength = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_RowLength,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.LowerCol = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_LowerCol,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.LowerRow = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_LowerRow,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.UpperCol = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_UpperCol,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.UpperRow = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_UpperRow,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.SetValue = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_SetValue,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.Value = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_Value,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep.ChangeValue = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_ChangeValue,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep__kill_pointed,None,BRepSweep_Array2OfShapesOfNumLinearRegularSweep)
BRepSweep_Array2OfShapesOfNumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_Array2OfShapesOfNumLinearRegularSweep_swigregister
BRepSweep_Array2OfShapesOfNumLinearRegularSweep_swigregister(BRepSweep_Array2OfShapesOfNumLinearRegularSweep)

class BRepSweep_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a Builder.

        :param aBuilder:
        :type aBuilder: BRep_Builder &
        :rtype: None

        """
        _BRepSweep.BRepSweep_Builder_swiginit(self,_BRepSweep.new_BRepSweep_Builder(*args))
    def Builder(self, *args):
        """
        :rtype: BRep_Builder

        """
        return _BRepSweep.BRepSweep_Builder_Builder(self, *args)

    def MakeCompound(self, *args):
        """
        * Returns an empty Compound.

        :param aCompound:
        :type aCompound: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompound(self, *args)

    def MakeCompSolid(self, *args):
        """
        * Returns an empty CompSolid.

        :param aCompSolid:
        :type aCompSolid: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompSolid(self, *args)

    def MakeSolid(self, *args):
        """
        * Returns an empty Solid.

        :param aSolid:
        :type aSolid: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_MakeSolid(self, *args)

    def MakeShell(self, *args):
        """
        * Returns an empty Shell.

        :param aShell:
        :type aShell: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_MakeShell(self, *args)

    def MakeWire(self, *args):
        """
        * Returns an empty Wire.

        :param aWire:
        :type aWire: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_MakeWire(self, *args)

    def Add(self, *args):
        """
        * Adds the Shape 1 in the Shape 2, set to <Orient> orientation.

        :param aShape1:
        :type aShape1: TopoDS_Shape &
        :param aShape2:
        :type aShape2: TopoDS_Shape &
        :param Orient:
        :type Orient: TopAbs_Orientation
        :rtype: None

        * Adds the Shape 1 in the Shape 2.

        :param aShape1:
        :type aShape1: TopoDS_Shape &
        :param aShape2:
        :type aShape2: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Builder_Add(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Builder.Builder = new_instancemethod(_BRepSweep.BRepSweep_Builder_Builder,None,BRepSweep_Builder)
BRepSweep_Builder.MakeCompound = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeCompound,None,BRepSweep_Builder)
BRepSweep_Builder.MakeCompSolid = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeCompSolid,None,BRepSweep_Builder)
BRepSweep_Builder.MakeSolid = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeSolid,None,BRepSweep_Builder)
BRepSweep_Builder.MakeShell = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeShell,None,BRepSweep_Builder)
BRepSweep_Builder.MakeWire = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeWire,None,BRepSweep_Builder)
BRepSweep_Builder.Add = new_instancemethod(_BRepSweep.BRepSweep_Builder_Add,None,BRepSweep_Builder)
BRepSweep_Builder._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Builder__kill_pointed,None,BRepSweep_Builder)
BRepSweep_Builder_swigregister = _BRepSweep.BRepSweep_Builder_swigregister
BRepSweep_Builder_swigregister(BRepSweep_Builder)

class BRepSweep_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _BRepSweep.BRepSweep_Iterator_swiginit(self,_BRepSweep.new_BRepSweep_Iterator(*args))
    def Init(self, *args):
        """
        * Resest the Iterator on sub-shapes of <aShape>.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Iterator_Init(self, *args)

    def More(self, *args):
        """
        * Returns True if there is a current sub-shape.

        :rtype: bool

        """
        return _BRepSweep.BRepSweep_Iterator_More(self, *args)

    def Next(self, *args):
        """
        * Moves to the next sub-shape.

        :rtype: None

        """
        return _BRepSweep.BRepSweep_Iterator_Next(self, *args)

    def Value(self, *args):
        """
        * Returns the current sub-shape.

        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Iterator_Value(self, *args)

    def Orientation(self, *args):
        """
        * Returns the orientation of the current sub-shape.

        :rtype: TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Iterator_Orientation(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Iterator.Init = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Init,None,BRepSweep_Iterator)
BRepSweep_Iterator.More = new_instancemethod(_BRepSweep.BRepSweep_Iterator_More,None,BRepSweep_Iterator)
BRepSweep_Iterator.Next = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Next,None,BRepSweep_Iterator)
BRepSweep_Iterator.Value = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Value,None,BRepSweep_Iterator)
BRepSweep_Iterator.Orientation = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Orientation,None,BRepSweep_Iterator)
BRepSweep_Iterator._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Iterator__kill_pointed,None,BRepSweep_Iterator)
BRepSweep_Iterator_swigregister = _BRepSweep.BRepSweep_Iterator_swigregister
BRepSweep_Iterator_swigregister(BRepSweep_Iterator)

class BRepSweep_NumLinearRegularSweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Delete(self, *args):
        """
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Delete(self, *args)

    def MakeEmptyVertex(self, *args):
        """
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex(self, *args)

    def MakeEmptyDirectingEdge(self, *args):
        """
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirE:
        :type aDirE: Sweep_NumShape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge(self, *args)

    def MakeEmptyGeneratingEdge(self, *args):
        """
        :param aGenE:
        :type aGenE: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge(self, *args)

    def SetParameters(self, *args):
        """
        :param aNewFace:
        :type aNewFace: TopoDS_Shape &
        :param aNewVertex:
        :type aNewVertex: TopoDS_Shape &
        :param aGenF:
        :type aGenF: TopoDS_Shape &
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters(self, *args)

    def SetDirectingParameter(self, *args):
        """
        :param aNewEdge:
        :type aNewEdge: TopoDS_Shape &
        :param aNewVertex:
        :type aNewVertex: TopoDS_Shape &
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirE:
        :type aDirE: Sweep_NumShape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter(self, *args)

    def SetGeneratingParameter(self, *args):
        """
        :param aNewEdge:
        :type aNewEdge: TopoDS_Shape &
        :param aNewVertex:
        :type aNewVertex: TopoDS_Shape &
        :param aGenE:
        :type aGenE: TopoDS_Shape &
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter(self, *args)

    def MakeEmptyFace(self, *args):
        """
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace(self, *args)

    def SetPCurve(self, *args):
        """
        :param aNewFace:
        :type aNewFace: TopoDS_Shape &
        :param aNewEdge:
        :type aNewEdge: TopoDS_Shape &
        :param aGenF:
        :type aGenF: TopoDS_Shape &
        :param aGenE:
        :type aGenE: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :param orien:
        :type orien: TopAbs_Orientation
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve(self, *args)

    def SetGeneratingPCurve(self, *args):
        """
        :param aNewFace:
        :type aNewFace: TopoDS_Shape &
        :param aNewEdge:
        :type aNewEdge: TopoDS_Shape &
        :param aGenE:
        :type aGenE: TopoDS_Shape &
        :param aDirE:
        :type aDirE: Sweep_NumShape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :param orien:
        :type orien: TopAbs_Orientation
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve(self, *args)

    def SetDirectingPCurve(self, *args):
        """
        :param aNewFace:
        :type aNewFace: TopoDS_Shape &
        :param aNewEdge:
        :type aNewEdge: TopoDS_Shape &
        :param aGenE:
        :type aGenE: TopoDS_Shape &
        :param aGenV:
        :type aGenV: TopoDS_Shape &
        :param aDirE:
        :type aDirE: Sweep_NumShape &
        :param orien:
        :type orien: TopAbs_Orientation
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve(self, *args)

    def DirectSolid(self, *args):
        """
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid(self, *args)

    def GGDShapeIsToAdd(self, *args):
        """
        :param aNewShape:
        :type aNewShape: TopoDS_Shape &
        :param aNewSubShape:
        :type aNewSubShape: TopoDS_Shape &
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aSubGenS:
        :type aSubGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd(self, *args)

    def GDDShapeIsToAdd(self, *args):
        """
        :param aNewShape:
        :type aNewShape: TopoDS_Shape &
        :param aNewSubShape:
        :type aNewSubShape: TopoDS_Shape &
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :param aSubDirS:
        :type aSubDirS: Sweep_NumShape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd(self, *args)

    def SeparatedWires(self, *args):
        """
        :param aNewShape:
        :type aNewShape: TopoDS_Shape &
        :param aNewSubShape:
        :type aNewSubShape: TopoDS_Shape &
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aSubGenS:
        :type aSubGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires(self, *args)

    def SplitShell(self, *args):
        """
        :param aNewShape:
        :type aNewShape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell(self, *args)

    def SetContinuity(self, *args):
        """
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: void

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity(self, *args)

    def HasShape(self, *args):
        """
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape(self, *args)

    def Shape(self, *args):
        """
        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirS:
        :type aDirS: Sweep_NumShape &
        :rtype: TopoDS_Shape

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Shape(self, *args)

    def FirstShape(self, *args):
        """
        :rtype: TopoDS_Shape

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape(self, *args)

    def LastShape(self, *args):
        """
        :rtype: TopoDS_Shape

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape(self, *args)

    def Closed(self, *args):
        """
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Closed(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_NumLinearRegularSweep.Delete = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_Delete,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyVertex = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyDirectingEdge = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyGeneratingEdge = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetParameters = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetDirectingParameter = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetGeneratingParameter = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyFace = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetGeneratingPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetDirectingPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.DirectSolid = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.GGDShapeIsToAdd = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.GDDShapeIsToAdd = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SeparatedWires = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SplitShell = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetContinuity = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.HasShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.Shape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_Shape,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.LastShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.Closed = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_Closed,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep__kill_pointed,None,BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_NumLinearRegularSweep_swigregister
BRepSweep_NumLinearRegularSweep_swigregister(BRepSweep_NumLinearRegularSweep)

class BRepSweep_Prism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Builds the prism of base S and vector V. If C is true, S is copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types

        :param S:
        :type S: TopoDS_Shape &
        :param V:
        :type V: gp_Vec
        :param Copy: default value is Standard_False
        :type Copy: bool
        :param Canonize: default value is Standard_True
        :type Canonize: bool
        :rtype: None

        * Builds a semi-infinite or an infinite prism of base S. If Copy is true S is copied. If Inf is true the prism is infinite, if Inf is false the prism is infinite in the direction D. If Canonize is true then generated surfaces are attempted to be canonized in simple types

        :param S:
        :type S: TopoDS_Shape &
        :param D:
        :type D: gp_Dir
        :param Inf: default value is Standard_True
        :type Inf: bool
        :param Copy: default value is Standard_False
        :type Copy: bool
        :param Canonize: default value is Standard_True
        :type Canonize: bool
        :rtype: None

        """
        _BRepSweep.BRepSweep_Prism_swiginit(self,_BRepSweep.new_BRepSweep_Prism(*args))
    def Shape(self, *args):
        """
        * Returns the TopoDS Shape attached to the prism.

        :rtype: TopoDS_Shape

        * Returns the TopoDS Shape generated with aGenS (subShape of the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_Shape(self, *args)

    def FirstShape(self, *args):
        """
        * Returns the TopoDS Shape of the bottom of the prism.

        :rtype: TopoDS_Shape

        * Returns the TopoDS Shape of the bottom of the prism. generated with aGenS (subShape of the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_FirstShape(self, *args)

    def LastShape(self, *args):
        """
        * Returns the TopoDS Shape of the top of the prism.

        :rtype: TopoDS_Shape

        * Returns the TopoDS Shape of the top of the prism. generated with aGenS (subShape of the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_LastShape(self, *args)

    def Vec(self, *args):
        """
        * Returns the Vector of the Prism, if it is an infinite prism the Vec is unitar.

        :rtype: gp_Vec

        """
        return _BRepSweep.BRepSweep_Prism_Vec(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Prism.Shape = new_instancemethod(_BRepSweep.BRepSweep_Prism_Shape,None,BRepSweep_Prism)
BRepSweep_Prism.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_Prism_FirstShape,None,BRepSweep_Prism)
BRepSweep_Prism.LastShape = new_instancemethod(_BRepSweep.BRepSweep_Prism_LastShape,None,BRepSweep_Prism)
BRepSweep_Prism.Vec = new_instancemethod(_BRepSweep.BRepSweep_Prism_Vec,None,BRepSweep_Prism)
BRepSweep_Prism._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Prism__kill_pointed,None,BRepSweep_Prism)
BRepSweep_Prism_swigregister = _BRepSweep.BRepSweep_Prism_swigregister
BRepSweep_Prism_swigregister(BRepSweep_Prism)

class BRepSweep_Revol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Builds the Revol of meridian S axis A and angle D. If C is true S is copied.

        :param S:
        :type S: TopoDS_Shape &
        :param A:
        :type A: gp_Ax1
        :param D:
        :type D: Quantity_PlaneAngle
        :param C: default value is Standard_False
        :type C: bool
        :rtype: None

        * Builds the Revol of meridian S axis A and angle 2*Pi. If C is true S is copied.

        :param S:
        :type S: TopoDS_Shape &
        :param A:
        :type A: gp_Ax1
        :param C: default value is Standard_False
        :type C: bool
        :rtype: None

        """
        _BRepSweep.BRepSweep_Revol_swiginit(self,_BRepSweep.new_BRepSweep_Revol(*args))
    def Shape(self, *args):
        """
        * Returns the TopoDS Shape attached to the Revol.

        :rtype: TopoDS_Shape

        * Returns the TopoDS Shape generated with aGenS (subShape of the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_Shape(self, *args)

    def FirstShape(self, *args):
        """
        * Returns the first shape of the revol (coinciding with the generating shape).

        :rtype: TopoDS_Shape

        * Returns the first shape of the revol (coinciding with the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_FirstShape(self, *args)

    def LastShape(self, *args):
        """
        * Returns the TopoDS Shape of the top of the prism.

        :rtype: TopoDS_Shape

        * Returns the TopoDS Shape of the top of the prism. generated with aGenS (subShape of the generating shape).

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_LastShape(self, *args)

    def Axe(self, *args):
        """
        * returns the axis

        :rtype: gp_Ax1

        """
        return _BRepSweep.BRepSweep_Revol_Axe(self, *args)

    def Angle(self, *args):
        """
        * returns the angle.

        :rtype: Quantity_PlaneAngle

        """
        return _BRepSweep.BRepSweep_Revol_Angle(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Revol.Shape = new_instancemethod(_BRepSweep.BRepSweep_Revol_Shape,None,BRepSweep_Revol)
BRepSweep_Revol.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_Revol_FirstShape,None,BRepSweep_Revol)
BRepSweep_Revol.LastShape = new_instancemethod(_BRepSweep.BRepSweep_Revol_LastShape,None,BRepSweep_Revol)
BRepSweep_Revol.Axe = new_instancemethod(_BRepSweep.BRepSweep_Revol_Axe,None,BRepSweep_Revol)
BRepSweep_Revol.Angle = new_instancemethod(_BRepSweep.BRepSweep_Revol_Angle,None,BRepSweep_Revol)
BRepSweep_Revol._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Revol__kill_pointed,None,BRepSweep_Revol)
BRepSweep_Revol_swigregister = _BRepSweep.BRepSweep_Revol_swigregister
BRepSweep_Revol_swigregister(BRepSweep_Revol)

class BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: TopoDS_Shape &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swiginit(self,_BRepSweep.new_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep(*args))
    def Value(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep self)"""
        return _BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep self) -> Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep"""
        return _BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep.Value = new_instancemethod(_BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_Value,None,BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep__kill_pointed,None,BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep.GetHandle = new_instancemethod(_BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_GetHandle,None,BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister
BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister(BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)

class Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swiginit(self,_BRepSweep.new_Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep(*args))
    DownCast = staticmethod(_BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep.Nullify = new_instancemethod(_BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_Nullify,None,Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep.IsNull = new_instancemethod(_BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_IsNull,None,Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep.GetObject = new_instancemethod(_BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_GetObject,None,Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep._kill_pointed = new_instancemethod(_BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep__kill_pointed,None,Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister = _BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_swigregister(Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep)

def Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_DownCast(*args):
  return _BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_DownCast(*args)
Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_DownCast = _BRepSweep.Handle_BRepSweep_SequenceNodeOfSequenceOfShapesOfNumLinearRegularSweep_DownCast

class BRepSweep_SequenceOfShapesOfNumLinearRegularSweep(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_swiginit(self,_BRepSweep.new_BRepSweep_SequenceOfShapesOfNumLinearRegularSweep(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: TopoDS_Shape &
        :rtype: None

        :param S:
        :type S: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: TopoDS_Shape &
        :rtype: None

        :param S:
        :type S: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TopoDS_Shape &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TopoDS_Shape &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_First(self, *args)

    def Last(self, *args):
        """
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: BRepSweep_SequenceOfShapesOfNumLinearRegularSweep &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TopoDS_Shape &
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Clear = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Clear,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Assign = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Assign,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Set = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Set,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Append = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Append,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Prepend = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Prepend,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.InsertBefore = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_InsertBefore,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.InsertAfter = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_InsertAfter,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.First = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_First,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Last = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Last,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Split = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Split,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Value = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Value,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.SetValue = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_SetValue,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.ChangeValue = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_ChangeValue,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep.Remove = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_Remove,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep__kill_pointed,None,BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_swigregister
BRepSweep_SequenceOfShapesOfNumLinearRegularSweep_swigregister(BRepSweep_SequenceOfShapesOfNumLinearRegularSweep)

class BRepSweep_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Initialize the tool with <aShape>. The IndexTool must prepare an indexation for all the subshapes of this shape.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: None

        """
        _BRepSweep.BRepSweep_Tool_swiginit(self,_BRepSweep.new_BRepSweep_Tool(*args))
    def NbShapes(self, *args):
        """
        * Returns the number of subshapes in the shape.

        :rtype: int

        """
        return _BRepSweep.BRepSweep_Tool_NbShapes(self, *args)

    def Index(self, *args):
        """
        * Returns the index of <aShape>.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: int

        """
        return _BRepSweep.BRepSweep_Tool_Index(self, *args)

    def Shape(self, *args):
        """
        * Returns the Shape at Index anIdex.

        :param anIndex:
        :type anIndex: int
        :rtype: TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Tool_Shape(self, *args)

    def Type(self, *args):
        """
        * Returns the type of <aShape>.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: TopAbs_ShapeEnum

        """
        return _BRepSweep.BRepSweep_Tool_Type(self, *args)

    def Orientation(self, *args):
        """
        * Returns the Orientation of <aShape>.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :rtype: TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Tool_Orientation(self, *args)

    def SetOrientation(self, *args):
        """
        * Set the Orientation of <aShape> with Or.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        """
        return _BRepSweep.BRepSweep_Tool_SetOrientation(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Tool.NbShapes = new_instancemethod(_BRepSweep.BRepSweep_Tool_NbShapes,None,BRepSweep_Tool)
BRepSweep_Tool.Index = new_instancemethod(_BRepSweep.BRepSweep_Tool_Index,None,BRepSweep_Tool)
BRepSweep_Tool.Shape = new_instancemethod(_BRepSweep.BRepSweep_Tool_Shape,None,BRepSweep_Tool)
BRepSweep_Tool.Type = new_instancemethod(_BRepSweep.BRepSweep_Tool_Type,None,BRepSweep_Tool)
BRepSweep_Tool.Orientation = new_instancemethod(_BRepSweep.BRepSweep_Tool_Orientation,None,BRepSweep_Tool)
BRepSweep_Tool.SetOrientation = new_instancemethod(_BRepSweep.BRepSweep_Tool_SetOrientation,None,BRepSweep_Tool)
BRepSweep_Tool._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Tool__kill_pointed,None,BRepSweep_Tool)
BRepSweep_Tool_swigregister = _BRepSweep.BRepSweep_Tool_swigregister
BRepSweep_Tool_swigregister(BRepSweep_Tool)

class BRepSweep_Trsf(BRepSweep_NumLinearRegularSweep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Init(self, *args):
        """
        * ends the construction of the swept primitive calling the virtual geometric functions that can't be called in the initialize.

        :rtype: None

        """
        return _BRepSweep.BRepSweep_Trsf_Init(self, *args)

    def Process(self, *args):
        """
        * function called to analize the way of construction of the shapes generated by aGenS and aDirV.

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :param aDirV:
        :type aDirV: Sweep_NumShape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_Trsf_Process(self, *args)

    def IsInvariant(self, *args):
        """
        * Returns true if the geometry of aGenS is not modified by the trsf of the BRepSweep Trsf.

        :param aGenS:
        :type aGenS: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepSweep.BRepSweep_Trsf_IsInvariant(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Trsf.Init = new_instancemethod(_BRepSweep.BRepSweep_Trsf_Init,None,BRepSweep_Trsf)
BRepSweep_Trsf.Process = new_instancemethod(_BRepSweep.BRepSweep_Trsf_Process,None,BRepSweep_Trsf)
BRepSweep_Trsf.IsInvariant = new_instancemethod(_BRepSweep.BRepSweep_Trsf_IsInvariant,None,BRepSweep_Trsf)
BRepSweep_Trsf._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Trsf__kill_pointed,None,BRepSweep_Trsf)
BRepSweep_Trsf_swigregister = _BRepSweep.BRepSweep_Trsf_swigregister
BRepSweep_Trsf_swigregister(BRepSweep_Trsf)

class BRepSweep_Rotation(BRepSweep_Trsf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a topology by rotating <S> around A with the angle D.

        :param S:
        :type S: TopoDS_Shape &
        :param N:
        :type N: Sweep_NumShape &
        :param L:
        :type L: TopLoc_Location &
        :param A:
        :type A: gp_Ax1
        :param D:
        :type D: Quantity_PlaneAngle
        :param C:
        :type C: bool
        :rtype: None

        """
        _BRepSweep.BRepSweep_Rotation_swiginit(self,_BRepSweep.new_BRepSweep_Rotation(*args))
    def Axe(self, *args):
        """
        * returns the axis

        :rtype: gp_Ax1

        """
        return _BRepSweep.BRepSweep_Rotation_Axe(self, *args)

    def Angle(self, *args):
        """
        * returns the angle.

        :rtype: Quantity_PlaneAngle

        """
        return _BRepSweep.BRepSweep_Rotation_Angle(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Rotation.Axe = new_instancemethod(_BRepSweep.BRepSweep_Rotation_Axe,None,BRepSweep_Rotation)
BRepSweep_Rotation.Angle = new_instancemethod(_BRepSweep.BRepSweep_Rotation_Angle,None,BRepSweep_Rotation)
BRepSweep_Rotation._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Rotation__kill_pointed,None,BRepSweep_Rotation)
BRepSweep_Rotation_swigregister = _BRepSweep.BRepSweep_Rotation_swigregister
BRepSweep_Rotation_swigregister(BRepSweep_Rotation)

class BRepSweep_Translation(BRepSweep_Trsf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a topology by translating <S> with the vector <V>. If C is true S Sucomponents are copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types

        :param S:
        :type S: TopoDS_Shape &
        :param N:
        :type N: Sweep_NumShape &
        :param L:
        :type L: TopLoc_Location &
        :param V:
        :type V: gp_Vec
        :param C:
        :type C: bool
        :param Canonize: default value is Standard_True
        :type Canonize: bool
        :rtype: None

        """
        _BRepSweep.BRepSweep_Translation_swiginit(self,_BRepSweep.new_BRepSweep_Translation(*args))
    def Vec(self, *args):
        """
        * Returns the Vector of the Prism, if it is an infinite prism the Vec is unitar.

        :rtype: gp_Vec

        """
        return _BRepSweep.BRepSweep_Translation_Vec(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


BRepSweep_Translation.Vec = new_instancemethod(_BRepSweep.BRepSweep_Translation_Vec,None,BRepSweep_Translation)
BRepSweep_Translation._kill_pointed = new_instancemethod(_BRepSweep.BRepSweep_Translation__kill_pointed,None,BRepSweep_Translation)
BRepSweep_Translation_swigregister = _BRepSweep.BRepSweep_Translation_swigregister
BRepSweep_Translation_swigregister(BRepSweep_Translation)



