# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Contap.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Contap', [dirname(__file__)])
        except ImportError:
            import _Contap
            return _Contap
        if fp is not None:
            try:
                _mod = imp.load_module('_Contap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Contap = swig_import_helper()
    del swig_import_helper
else:
    import _Contap
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Contap.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Contap.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Contap.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Contap.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Contap.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Contap.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Contap.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Contap.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Contap.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Contap.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Contap.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Contap.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Contap.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Contap.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Contap.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Contap.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Contap.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Contap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.gp
import OCC.Standard
import OCC.GeomAbs
import OCC.Adaptor3d
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
import OCC.IntSurf

_Contap.Contap_Lin_swigconstant(_Contap)
Contap_Lin = _Contap.Contap_Lin

_Contap.Contap_Circle_swigconstant(_Contap)
Contap_Circle = _Contap.Contap_Circle

_Contap.Contap_Walking_swigconstant(_Contap)
Contap_Walking = _Contap.Contap_Walking

_Contap.Contap_Restriction_swigconstant(_Contap)
Contap_Restriction = _Contap.Contap_Restriction

_Contap.Contap_ContourStd_swigconstant(_Contap)
Contap_ContourStd = _Contap.Contap_ContourStd

_Contap.Contap_ContourPrs_swigconstant(_Contap)
Contap_ContourPrs = _Contap.Contap_ContourPrs

_Contap.Contap_DraftStd_swigconstant(_Contap)
Contap_DraftStd = _Contap.Contap_DraftStd

_Contap.Contap_DraftPrs_swigconstant(_Contap)
Contap_DraftPrs = _Contap.Contap_DraftPrs
class Contap_ContAna(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_ContAna_swiginit(self, _Contap.new_Contap_ContAna(*args))

    def Perform(self, *args):
        """
        :param S:
        :type S: gp_Sphere
        :param D:
        :type D: gp_Dir
        :rtype: None

        :param S:
        :type S: gp_Sphere
        :param D:
        :type D: gp_Dir
        :param Ang:
        :type Ang: float
        :rtype: None

        :param S:
        :type S: gp_Sphere
        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        :param C:
        :type C: gp_Cylinder
        :param D:
        :type D: gp_Dir
        :rtype: None

        :param C:
        :type C: gp_Cylinder
        :param D:
        :type D: gp_Dir
        :param Ang:
        :type Ang: float
        :rtype: None

        :param C:
        :type C: gp_Cylinder
        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        :param C:
        :type C: gp_Cone
        :param D:
        :type D: gp_Dir
        :rtype: None

        :param C:
        :type C: gp_Cone
        :param D:
        :type D: gp_Dir
        :param Ang:
        :type Ang: float
        :rtype: None

        :param C:
        :type C: gp_Cone
        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        """
        return _Contap.Contap_ContAna_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ContAna_IsDone(self, *args)


    def NbContours(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_ContAna_NbContours(self, *args)


    def TypeContour(self, *args):
        """
        * Returns GeomAbs_Line or GeomAbs_Circle, when IsDone() returns True.

        :rtype: GeomAbs_CurveType

        """
        return _Contap.Contap_ContAna_TypeContour(self, *args)


    def Circle(self, *args):
        """
        :rtype: gp_Circ

        """
        return _Contap.Contap_ContAna_Circle(self, *args)


    def Line(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Lin

        """
        return _Contap.Contap_ContAna_Line(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_ContAna.Perform = new_instancemethod(_Contap.Contap_ContAna_Perform, None, Contap_ContAna)
Contap_ContAna.IsDone = new_instancemethod(_Contap.Contap_ContAna_IsDone, None, Contap_ContAna)
Contap_ContAna.NbContours = new_instancemethod(_Contap.Contap_ContAna_NbContours, None, Contap_ContAna)
Contap_ContAna.TypeContour = new_instancemethod(_Contap.Contap_ContAna_TypeContour, None, Contap_ContAna)
Contap_ContAna.Circle = new_instancemethod(_Contap.Contap_ContAna_Circle, None, Contap_ContAna)
Contap_ContAna.Line = new_instancemethod(_Contap.Contap_ContAna_Line, None, Contap_ContAna)
Contap_ContAna._kill_pointed = new_instancemethod(_Contap.Contap_ContAna__kill_pointed, None, Contap_ContAna)
Contap_ContAna_swigregister = _Contap.Contap_ContAna_swigregister
Contap_ContAna_swigregister(Contap_ContAna)

class Contap_Contour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Direction:
        :type Direction: gp_Vec
        :rtype: None

        :param Direction:
        :type Direction: gp_Vec
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Direction:
        :type Direction: gp_Vec
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Direction:
        :type Direction: gp_Vec
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        """
        _Contap.Contap_Contour_swiginit(self, _Contap.new_Contap_Contour(*args))

    def Perform(self, *args):
        """
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Direction:
        :type Direction: gp_Vec
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Direction:
        :type Direction: gp_Vec
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        """
        return _Contap.Contap_Contour_Perform(self, *args)


    def Init(self, *args):
        """
        :param Direction:
        :type Direction: gp_Vec
        :rtype: None

        :param Direction:
        :type Direction: gp_Vec
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        """
        return _Contap.Contap_Contour_Init(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_Contour_IsDone(self, *args)


    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_Contour_IsEmpty(self, *args)


    def NbLines(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_Contour_NbLines(self, *args)


    def Line(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_Contour_Line(self, *args)


    def SurfaceFunction(self, *args):
        """
        :rtype: Contap_TheSurfFunctionOfContour

        """
        return _Contap.Contap_Contour_SurfaceFunction(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_Contour.Perform = new_instancemethod(_Contap.Contap_Contour_Perform, None, Contap_Contour)
Contap_Contour.Init = new_instancemethod(_Contap.Contap_Contour_Init, None, Contap_Contour)
Contap_Contour.IsDone = new_instancemethod(_Contap.Contap_Contour_IsDone, None, Contap_Contour)
Contap_Contour.IsEmpty = new_instancemethod(_Contap.Contap_Contour_IsEmpty, None, Contap_Contour)
Contap_Contour.NbLines = new_instancemethod(_Contap.Contap_Contour_NbLines, None, Contap_Contour)
Contap_Contour.Line = new_instancemethod(_Contap.Contap_Contour_Line, None, Contap_Contour)
Contap_Contour.SurfaceFunction = new_instancemethod(_Contap.Contap_Contour_SurfaceFunction, None, Contap_Contour)
Contap_Contour._kill_pointed = new_instancemethod(_Contap.Contap_Contour__kill_pointed, None, Contap_Contour)
Contap_Contour_swigregister = _Contap.Contap_Contour_swigregister
Contap_Contour_swigregister(Contap_Contour)

class Contap_HContTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NbSamplesU(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param v1:
        :type v1: float
        :param v2:
        :type v2: float
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def NbSamplePoints(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbSamplePoints(*args)

    NbSamplePoints = staticmethod(NbSamplePoints)

    def SamplePoint(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Index:
        :type Index: int
        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: void

        """
        return _Contap.Contap_HContTool_SamplePoint(*args)

    SamplePoint = staticmethod(SamplePoint)

    def HasBeenSeen(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _Contap.Contap_HContTool_HasBeenSeen(*args)

    HasBeenSeen = staticmethod(HasBeenSeen)

    def NbSamplesOnArc(*args):
        """
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

    NbSamplesOnArc = staticmethod(NbSamplesOnArc)

    def Bounds(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Ufirst:
        :type Ufirst: float &
        :param Ulast:
        :type Ulast: float &
        :rtype: void

        """
        return _Contap.Contap_HContTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def Project(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param P:
        :type P: gp_Pnt2d
        :param Paramproj:
        :type Paramproj: float &
        :param Ptproj:
        :type Ptproj: gp_Pnt2d
        :rtype: bool

        """
        return _Contap.Contap_HContTool_Project(*args)

    Project = staticmethod(Project)

    def Tolerance(*args):
        """
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Contap.Contap_HContTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Parameter(*args):
        """
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Contap.Contap_HContTool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def NbPoints(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbPoints(*args)

    NbPoints = staticmethod(NbPoints)

    def Value(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Index:
        :type Index: int
        :param Pt:
        :type Pt: gp_Pnt
        :param Tol:
        :type Tol: float &
        :param U:
        :type U: float &
        :rtype: void

        """
        return _Contap.Contap_HContTool_Value(*args)

    Value = staticmethod(Value)

    def IsVertex(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _Contap.Contap_HContTool_IsVertex(*args)

    IsVertex = staticmethod(IsVertex)

    def Vertex(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Index:
        :type Index: int
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: void

        """
        return _Contap.Contap_HContTool_Vertex(*args)

    Vertex = staticmethod(Vertex)

    def NbSegments(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: int

        """
        return _Contap.Contap_HContTool_NbSegments(*args)

    NbSegments = staticmethod(NbSegments)

    def HasFirstPoint(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Index:
        :type Index: int
        :param IndFirst:
        :type IndFirst: int &
        :rtype: bool

        """
        return _Contap.Contap_HContTool_HasFirstPoint(*args)

    HasFirstPoint = staticmethod(HasFirstPoint)

    def HasLastPoint(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param Index:
        :type Index: int
        :param IndLast:
        :type IndLast: int &
        :rtype: bool

        """
        return _Contap.Contap_HContTool_HasLastPoint(*args)

    HasLastPoint = staticmethod(HasLastPoint)

    def IsAllSolution(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _Contap.Contap_HContTool_IsAllSolution(*args)

    IsAllSolution = staticmethod(IsAllSolution)

    def __init__(self):
        _Contap.Contap_HContTool_swiginit(self, _Contap.new_Contap_HContTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_HContTool._kill_pointed = new_instancemethod(_Contap.Contap_HContTool__kill_pointed, None, Contap_HContTool)
Contap_HContTool_swigregister = _Contap.Contap_HContTool_swigregister
Contap_HContTool_swigregister(Contap_HContTool)

def Contap_HContTool_NbSamplesU(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param u1:
    :type u1: float
    :param u2:
    :type u2: float
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbSamplesU(*args)

def Contap_HContTool_NbSamplesV(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param v1:
    :type v1: float
    :param v2:
    :type v2: float
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbSamplesV(*args)

def Contap_HContTool_NbSamplePoints(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbSamplePoints(*args)

def Contap_HContTool_SamplePoint(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param Index:
    :type Index: int
    :param U:
    :type U: float &
    :param V:
    :type V: float &
    :rtype: void

    """
    return _Contap.Contap_HContTool_SamplePoint(*args)

def Contap_HContTool_HasBeenSeen(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _Contap.Contap_HContTool_HasBeenSeen(*args)

def Contap_HContTool_NbSamplesOnArc(*args):
    """
    :param A:
    :type A: Handle_Adaptor2d_HCurve2d &
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

def Contap_HContTool_Bounds(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Ufirst:
    :type Ufirst: float &
    :param Ulast:
    :type Ulast: float &
    :rtype: void

    """
    return _Contap.Contap_HContTool_Bounds(*args)

def Contap_HContTool_Project(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param P:
    :type P: gp_Pnt2d
    :param Paramproj:
    :type Paramproj: float &
    :param Ptproj:
    :type Ptproj: gp_Pnt2d
    :rtype: bool

    """
    return _Contap.Contap_HContTool_Project(*args)

def Contap_HContTool_Tolerance(*args):
    """
    :param V:
    :type V: Handle_Adaptor3d_HVertex &
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _Contap.Contap_HContTool_Tolerance(*args)

def Contap_HContTool_Parameter(*args):
    """
    :param V:
    :type V: Handle_Adaptor3d_HVertex &
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _Contap.Contap_HContTool_Parameter(*args)

def Contap_HContTool_NbPoints(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbPoints(*args)

def Contap_HContTool_Value(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Index:
    :type Index: int
    :param Pt:
    :type Pt: gp_Pnt
    :param Tol:
    :type Tol: float &
    :param U:
    :type U: float &
    :rtype: void

    """
    return _Contap.Contap_HContTool_Value(*args)

def Contap_HContTool_IsVertex(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Index:
    :type Index: int
    :rtype: bool

    """
    return _Contap.Contap_HContTool_IsVertex(*args)

def Contap_HContTool_Vertex(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Index:
    :type Index: int
    :param V:
    :type V: Handle_Adaptor3d_HVertex &
    :rtype: void

    """
    return _Contap.Contap_HContTool_Vertex(*args)

def Contap_HContTool_NbSegments(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: int

    """
    return _Contap.Contap_HContTool_NbSegments(*args)

def Contap_HContTool_HasFirstPoint(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Index:
    :type Index: int
    :param IndFirst:
    :type IndFirst: int &
    :rtype: bool

    """
    return _Contap.Contap_HContTool_HasFirstPoint(*args)

def Contap_HContTool_HasLastPoint(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param Index:
    :type Index: int
    :param IndLast:
    :type IndLast: int &
    :rtype: bool

    """
    return _Contap.Contap_HContTool_HasLastPoint(*args)

def Contap_HContTool_IsAllSolution(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _Contap.Contap_HContTool_IsAllSolution(*args)

class Contap_HCurve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Contap.Contap_HCurve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Continuity(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: GeomAbs_Shape

        """
        return _Contap.Contap_HCurve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def NbIntervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: int

        """
        return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def Intervals(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param T:
        :type T: TColStd_Array1OfReal &
        :param S:
        :type S: GeomAbs_Shape
        :rtype: void

        """
        return _Contap.Contap_HCurve2dTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _Contap.Contap_HCurve2dTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: bool

        """
        return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def Period(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: float

        """
        return _Contap.Contap_HCurve2dTool_Period(*args)

    Period = staticmethod(Period)

    def Value(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :rtype: gp_Pnt2d

        """
        return _Contap.Contap_HCurve2dTool_Value(*args)

    Value = staticmethod(Value)

    def D0(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :rtype: void

        """
        return _Contap.Contap_HCurve2dTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Vec2d
        :rtype: void

        """
        return _Contap.Contap_HCurve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :rtype: void

        """
        return _Contap.Contap_HCurve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V1:
        :type V1: gp_Vec2d
        :param V2:
        :type V2: gp_Vec2d
        :param V3:
        :type V3: gp_Vec2d
        :rtype: void

        """
        return _Contap.Contap_HCurve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec2d

        """
        return _Contap.Contap_HCurve2dTool_DN(*args)

    DN = staticmethod(DN)

    def Resolution(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param R3d:
        :type R3d: float
        :rtype: float

        """
        return _Contap.Contap_HCurve2dTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def GetType(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: GeomAbs_CurveType

        """
        return _Contap.Contap_HCurve2dTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Line(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Lin2d

        """
        return _Contap.Contap_HCurve2dTool_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Circ2d

        """
        return _Contap.Contap_HCurve2dTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Elips2d

        """
        return _Contap.Contap_HCurve2dTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Hyperbola(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Hypr2d

        """
        return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Parabola(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: gp_Parab2d

        """
        return _Contap.Contap_HCurve2dTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Bezier(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _Contap.Contap_HCurve2dTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def BSpline(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _Contap.Contap_HCurve2dTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def NbSamples(*args):
        """
        :param C:
        :type C: Handle_Adaptor2d_HCurve2d &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :rtype: int

        """
        return _Contap.Contap_HCurve2dTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def __init__(self):
        _Contap.Contap_HCurve2dTool_swiginit(self, _Contap.new_Contap_HCurve2dTool())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_HCurve2dTool._kill_pointed = new_instancemethod(_Contap.Contap_HCurve2dTool__kill_pointed, None, Contap_HCurve2dTool)
Contap_HCurve2dTool_swigregister = _Contap.Contap_HCurve2dTool_swigregister
Contap_HCurve2dTool_swigregister(Contap_HCurve2dTool)

def Contap_HCurve2dTool_FirstParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

def Contap_HCurve2dTool_LastParameter(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _Contap.Contap_HCurve2dTool_LastParameter(*args)

def Contap_HCurve2dTool_Continuity(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: GeomAbs_Shape

    """
    return _Contap.Contap_HCurve2dTool_Continuity(*args)

def Contap_HCurve2dTool_NbIntervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: int

    """
    return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

def Contap_HCurve2dTool_Intervals(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param T:
    :type T: TColStd_Array1OfReal &
    :param S:
    :type S: GeomAbs_Shape
    :rtype: void

    """
    return _Contap.Contap_HCurve2dTool_Intervals(*args)

def Contap_HCurve2dTool_IsClosed(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _Contap.Contap_HCurve2dTool_IsClosed(*args)

def Contap_HCurve2dTool_IsPeriodic(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: bool

    """
    return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

def Contap_HCurve2dTool_Period(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: float

    """
    return _Contap.Contap_HCurve2dTool_Period(*args)

def Contap_HCurve2dTool_Value(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :rtype: gp_Pnt2d

    """
    return _Contap.Contap_HCurve2dTool_Value(*args)

def Contap_HCurve2dTool_D0(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :rtype: void

    """
    return _Contap.Contap_HCurve2dTool_D0(*args)

def Contap_HCurve2dTool_D1(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V:
    :type V: gp_Vec2d
    :rtype: void

    """
    return _Contap.Contap_HCurve2dTool_D1(*args)

def Contap_HCurve2dTool_D2(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :rtype: void

    """
    return _Contap.Contap_HCurve2dTool_D2(*args)

def Contap_HCurve2dTool_D3(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param P:
    :type P: gp_Pnt2d
    :param V1:
    :type V1: gp_Vec2d
    :param V2:
    :type V2: gp_Vec2d
    :param V3:
    :type V3: gp_Vec2d
    :rtype: void

    """
    return _Contap.Contap_HCurve2dTool_D3(*args)

def Contap_HCurve2dTool_DN(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U:
    :type U: float
    :param N:
    :type N: int
    :rtype: gp_Vec2d

    """
    return _Contap.Contap_HCurve2dTool_DN(*args)

def Contap_HCurve2dTool_Resolution(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param R3d:
    :type R3d: float
    :rtype: float

    """
    return _Contap.Contap_HCurve2dTool_Resolution(*args)

def Contap_HCurve2dTool_GetType(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: GeomAbs_CurveType

    """
    return _Contap.Contap_HCurve2dTool_GetType(*args)

def Contap_HCurve2dTool_Line(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Lin2d

    """
    return _Contap.Contap_HCurve2dTool_Line(*args)

def Contap_HCurve2dTool_Circle(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Circ2d

    """
    return _Contap.Contap_HCurve2dTool_Circle(*args)

def Contap_HCurve2dTool_Ellipse(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Elips2d

    """
    return _Contap.Contap_HCurve2dTool_Ellipse(*args)

def Contap_HCurve2dTool_Hyperbola(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Hypr2d

    """
    return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

def Contap_HCurve2dTool_Parabola(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: gp_Parab2d

    """
    return _Contap.Contap_HCurve2dTool_Parabola(*args)

def Contap_HCurve2dTool_Bezier(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: Handle_Geom2d_BezierCurve

    """
    return _Contap.Contap_HCurve2dTool_Bezier(*args)

def Contap_HCurve2dTool_BSpline(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :rtype: Handle_Geom2d_BSplineCurve

    """
    return _Contap.Contap_HCurve2dTool_BSpline(*args)

def Contap_HCurve2dTool_NbSamples(*args):
    """
    :param C:
    :type C: Handle_Adaptor2d_HCurve2d &
    :param U0:
    :type U0: float
    :param U1:
    :type U1: float
    :rtype: int

    """
    return _Contap.Contap_HCurve2dTool_NbSamples(*args)

class Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swiginit(self, _Contap.new_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour(*args))

    def Value(self, *args):
        """
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour self)"""
        return _Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour self) -> Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour"""
        return _Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour.Value = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_Value, None, Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour__kill_pointed, None, Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour.GetHandle = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_GetHandle, None, Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister = _Contap.Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister
Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister(Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)

class Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swiginit(self, _Contap.new_Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_Nullify, None, Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_IsNull, None, Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_GetObject, None, Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour__kill_pointed, None, Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister = _Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_swigregister(Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour)

def Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_DownCast(AnObject)
Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_DownCast = _Contap.Handle_Contap_SequenceNodeOfSequenceOfIWLineOfTheIWalkingOfContour_DownCast

class Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Contap_ThePathPointOfTheSearchOfContour &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour(*args))

    def Value(self, *args):
        """
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour self)"""
        return _Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour self) -> Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour"""
        return _Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour.Value = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_Value, None, Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour__kill_pointed, None, Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour.GetHandle = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_GetHandle, None, Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister = _Contap.Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister
Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister(Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)

class Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swiginit(self, _Contap.new_Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_Nullify, None, Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_IsNull, None, Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_GetObject, None, Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour__kill_pointed, None, Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister = _Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_swigregister(Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour)

def Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_DownCast(AnObject)
Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_DownCast = _Contap.Handle_Contap_SequenceNodeOfSequenceOfPathPointOfTheSearchOfContour_DownCast

class Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Contap_TheSegmentOfTheSearchOfContour &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour(*args))

    def Value(self, *args):
        """
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour self)"""
        return _Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour self) -> Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour"""
        return _Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour.Value = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_Value, None, Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour__kill_pointed, None, Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour.GetHandle = new_instancemethod(_Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_GetHandle, None, Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister = _Contap.Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister
Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister(Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)

class Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swiginit(self, _Contap.new_Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_Nullify, None, Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_IsNull, None, Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_GetObject, None, Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour__kill_pointed, None, Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister = _Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_swigregister(Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour)

def Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_DownCast(AnObject)
Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_DownCast = _Contap.Handle_Contap_SequenceNodeOfSequenceOfSegmentOfTheSearchOfContour_DownCast

class Contap_SequenceNodeOfTheSequenceOfLineOfContour(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Contap_TheLineOfContour &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_swiginit(self, _Contap.new_Contap_SequenceNodeOfTheSequenceOfLineOfContour(*args))

    def Value(self, *args):
        """
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_SequenceNodeOfTheSequenceOfLineOfContour self)"""
        return _Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_SequenceNodeOfTheSequenceOfLineOfContour self) -> Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour"""
        return _Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceNodeOfTheSequenceOfLineOfContour.Value = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_Value, None, Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Contap_SequenceNodeOfTheSequenceOfLineOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour__kill_pointed, None, Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Contap_SequenceNodeOfTheSequenceOfLineOfContour.GetHandle = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_GetHandle, None, Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister = _Contap.Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister
Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister(Contap_SequenceNodeOfTheSequenceOfLineOfContour)

class Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_swiginit(self, _Contap.new_Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_Nullify, None, Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_IsNull, None, Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_GetObject, None, Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour__kill_pointed, None, Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister = _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_swigregister(Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour)

def Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_DownCast(AnObject)
Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_DownCast = _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfLineOfContour_DownCast

class Contap_SequenceNodeOfTheSequenceOfPointOfContour(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Contap_ThePointOfContour &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_swiginit(self, _Contap.new_Contap_SequenceNodeOfTheSequenceOfPointOfContour(*args))

    def Value(self, *args):
        """
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_SequenceNodeOfTheSequenceOfPointOfContour self)"""
        return _Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_SequenceNodeOfTheSequenceOfPointOfContour self) -> Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour"""
        return _Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceNodeOfTheSequenceOfPointOfContour.Value = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_Value, None, Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Contap_SequenceNodeOfTheSequenceOfPointOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour__kill_pointed, None, Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Contap_SequenceNodeOfTheSequenceOfPointOfContour.GetHandle = new_instancemethod(_Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_GetHandle, None, Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister = _Contap.Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister
Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister(Contap_SequenceNodeOfTheSequenceOfPointOfContour)

class Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_swiginit(self, _Contap.new_Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_Nullify, None, Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_IsNull, None, Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_GetObject, None, Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour__kill_pointed, None, Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour)
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister = _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_swigregister(Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour)

def Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_DownCast(AnObject)
Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_DownCast = _Contap.Handle_Contap_SequenceNodeOfTheSequenceOfPointOfContour_DownCast

class Contap_SequenceOfIWLineOfTheIWalkingOfContour(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_swiginit(self, _Contap.new_Contap_SequenceOfIWLineOfTheIWalkingOfContour(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: Contap_SequenceOfIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: Contap_SequenceOfIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Contap_SequenceOfIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Contap_TheIWLineOfTheIWalkingOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceOfIWLineOfTheIWalkingOfContour.Clear = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Clear, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Assign = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Assign, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Set = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Set, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Append = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Append, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Prepend = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Prepend, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_InsertBefore, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_InsertAfter, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.First = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_First, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Last = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Last, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Split = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Split, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Value = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Value, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.SetValue = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_SetValue, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_ChangeValue, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour.Remove = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_Remove, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour__kill_pointed, None, Contap_SequenceOfIWLineOfTheIWalkingOfContour)
Contap_SequenceOfIWLineOfTheIWalkingOfContour_swigregister = _Contap.Contap_SequenceOfIWLineOfTheIWalkingOfContour_swigregister
Contap_SequenceOfIWLineOfTheIWalkingOfContour_swigregister(Contap_SequenceOfIWLineOfTheIWalkingOfContour)

class Contap_SequenceOfPathPointOfTheSearchOfContour(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_SequenceOfPathPointOfTheSearchOfContour(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: Contap_SequenceOfPathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: Contap_SequenceOfPathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Contap_ThePathPointOfTheSearchOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Contap_ThePathPointOfTheSearchOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_ThePathPointOfTheSearchOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_ThePathPointOfTheSearchOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Contap_SequenceOfPathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Contap_ThePathPointOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceOfPathPointOfTheSearchOfContour.Clear = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Clear, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Assign = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Assign, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Set = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Set, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Append = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Append, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Prepend = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Prepend, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_InsertBefore, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_InsertAfter, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.First = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_First, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Last = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Last, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Split = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Split, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Value = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Value, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.SetValue = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_SetValue, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_ChangeValue, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour.Remove = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_Remove, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearchOfContour__kill_pointed, None, Contap_SequenceOfPathPointOfTheSearchOfContour)
Contap_SequenceOfPathPointOfTheSearchOfContour_swigregister = _Contap.Contap_SequenceOfPathPointOfTheSearchOfContour_swigregister
Contap_SequenceOfPathPointOfTheSearchOfContour_swigregister(Contap_SequenceOfPathPointOfTheSearchOfContour)

class Contap_SequenceOfSegmentOfTheSearchOfContour(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_SequenceOfSegmentOfTheSearchOfContour(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: Contap_SequenceOfSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: Contap_SequenceOfSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Contap_TheSegmentOfTheSearchOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Contap_TheSegmentOfTheSearchOfContour &
        :rtype: None

        :param S:
        :type S: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_TheSegmentOfTheSearchOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_TheSegmentOfTheSearchOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Contap_SequenceOfSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Contap_TheSegmentOfTheSearchOfContour &
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_SequenceOfSegmentOfTheSearchOfContour.Clear = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Clear, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Assign = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Assign, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Set = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Set, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Append = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Append, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Prepend = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Prepend, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_InsertBefore, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_InsertAfter, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.First = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_First, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Last = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Last, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Split = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Split, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Value = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Value, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.SetValue = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_SetValue, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_ChangeValue, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour.Remove = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_Remove, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearchOfContour__kill_pointed, None, Contap_SequenceOfSegmentOfTheSearchOfContour)
Contap_SequenceOfSegmentOfTheSearchOfContour_swigregister = _Contap.Contap_SequenceOfSegmentOfTheSearchOfContour_swigregister
Contap_SequenceOfSegmentOfTheSearchOfContour_swigregister(Contap_SequenceOfSegmentOfTheSearchOfContour)

class Contap_TheArcFunctionOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheArcFunctionOfContour_swiginit(self, _Contap.new_Contap_TheArcFunctionOfContour(*args))

    def Set(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        :param Direction:
        :type Direction: gp_Dir
        :rtype: None

        :param Direction:
        :type Direction: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :param Angle:
        :type Angle: float
        :rtype: None

        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _Contap.Contap_TheArcFunctionOfContour_Set(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :rtype: bool

        """
        return _Contap.Contap_TheArcFunctionOfContour_Value(self, *args)


    def Derivative(self, *args):
        """
        :param X:
        :type X: float
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Contap.Contap_TheArcFunctionOfContour_Derivative(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: float
        :param F:
        :type F: float &
        :param D:
        :type D: float &
        :rtype: bool

        """
        return _Contap.Contap_TheArcFunctionOfContour_Values(self, *args)


    def NbSamples(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheArcFunctionOfContour_NbSamples(self, *args)


    def GetStateNumber(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheArcFunctionOfContour_GetStateNumber(self, *args)


    def Valpoint(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _Contap.Contap_TheArcFunctionOfContour_Valpoint(self, *args)


    def Quadric(self, *args):
        """
        :rtype: IntSurf_Quadric

        """
        return _Contap.Contap_TheArcFunctionOfContour_Quadric(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheArcFunctionOfContour.Set = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Set, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.Value = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Value, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.Derivative = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Derivative, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.Values = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Values, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.NbSamples = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_NbSamples, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.GetStateNumber = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_GetStateNumber, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.Valpoint = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Valpoint, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour.Quadric = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour_Quadric, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheArcFunctionOfContour__kill_pointed, None, Contap_TheArcFunctionOfContour)
Contap_TheArcFunctionOfContour_swigregister = _Contap.Contap_TheArcFunctionOfContour_swigregister
Contap_TheArcFunctionOfContour_swigregister(Contap_TheArcFunctionOfContour)

class Contap_TheHSequenceOfPointOfContour(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheHSequenceOfPointOfContour_swiginit(self, _Contap.new_Contap_TheHSequenceOfPointOfContour(*args))

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_IsEmpty(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Length(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Clear(self, *args)


    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Contap_ThePointOfContour &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Contap_TheHSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Contap_ThePointOfContour &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Contap_TheHSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Prepend(self, *args)


    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Reverse(self, *args)


    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Contap_ThePointOfContour &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Contap_TheHSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Contap_ThePointOfContour &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Contap_TheHSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_InsertAfter(self, *args)


    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Exchange(self, *args)


    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Contap_TheHSequenceOfPointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Split(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Contap_ThePointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_SetValue(self, *args)


    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Remove(self, *args)


    def Sequence(self, *args):
        """
        :rtype: Contap_TheSequenceOfPointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_Sequence(self, *args)


    def ChangeSequence(self, *args):
        """
        :rtype: Contap_TheSequenceOfPointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_ChangeSequence(self, *args)


    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Contap_TheHSequenceOfPointOfContour

        """
        return _Contap.Contap_TheHSequenceOfPointOfContour_ShallowCopy(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_TheHSequenceOfPointOfContour self)"""
        return _Contap.Contap_TheHSequenceOfPointOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_TheHSequenceOfPointOfContour self) -> Handle_Contap_TheHSequenceOfPointOfContour"""
        return _Contap.Contap_TheHSequenceOfPointOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheHSequenceOfPointOfContour.IsEmpty = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_IsEmpty, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Length = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Length, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Clear = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Clear, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Append = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Append, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Prepend = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Prepend, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Reverse = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Reverse, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.InsertBefore = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_InsertBefore, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.InsertAfter = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_InsertAfter, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Exchange = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Exchange, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Split = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Split, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.SetValue = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_SetValue, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Value = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Value, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.ChangeValue = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_ChangeValue, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Remove = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Remove, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.Sequence = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_Sequence, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.ChangeSequence = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_ChangeSequence, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.ShallowCopy = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_ShallowCopy, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour__kill_pointed, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour.GetHandle = new_instancemethod(_Contap.Contap_TheHSequenceOfPointOfContour_GetHandle, None, Contap_TheHSequenceOfPointOfContour)
Contap_TheHSequenceOfPointOfContour_swigregister = _Contap.Contap_TheHSequenceOfPointOfContour_swigregister
Contap_TheHSequenceOfPointOfContour_swigregister(Contap_TheHSequenceOfPointOfContour)

class Handle_Contap_TheHSequenceOfPointOfContour(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_TheHSequenceOfPointOfContour_swiginit(self, _Contap.new_Handle_Contap_TheHSequenceOfPointOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_TheHSequenceOfPointOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_TheHSequenceOfPointOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_TheHSequenceOfPointOfContour_Nullify, None, Handle_Contap_TheHSequenceOfPointOfContour)
Handle_Contap_TheHSequenceOfPointOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_TheHSequenceOfPointOfContour_IsNull, None, Handle_Contap_TheHSequenceOfPointOfContour)
Handle_Contap_TheHSequenceOfPointOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_TheHSequenceOfPointOfContour_GetObject, None, Handle_Contap_TheHSequenceOfPointOfContour)
Handle_Contap_TheHSequenceOfPointOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_TheHSequenceOfPointOfContour__kill_pointed, None, Handle_Contap_TheHSequenceOfPointOfContour)
Handle_Contap_TheHSequenceOfPointOfContour_swigregister = _Contap.Handle_Contap_TheHSequenceOfPointOfContour_swigregister
Handle_Contap_TheHSequenceOfPointOfContour_swigregister(Handle_Contap_TheHSequenceOfPointOfContour)

def Handle_Contap_TheHSequenceOfPointOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_TheHSequenceOfPointOfContour_DownCast(AnObject)
Handle_Contap_TheHSequenceOfPointOfContour_DownCast = _Contap.Handle_Contap_TheHSequenceOfPointOfContour_DownCast

class Contap_TheIWLineOfTheIWalkingOfContour(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theAllocator: default value is 0
        :type theAllocator: IntSurf_Allocator &
        :rtype: None

        """
        _Contap.Contap_TheIWLineOfTheIWalkingOfContour_swiginit(self, _Contap.new_Contap_TheIWLineOfTheIWalkingOfContour(*args))

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_Reverse(self, *args)


    def Cut(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_Cut(self, *args)


    def AddPoint(self, *args):
        """
        :param P:
        :type P: IntSurf_PntOn2S &
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddPoint(self, *args)


    def AddStatusFirst(self, *args):
        """
        :param Closed:
        :type Closed: bool
        :param HasFirst:
        :type HasFirst: bool
        :rtype: None

        :param Closed:
        :type Closed: bool
        :param HasLast:
        :type HasLast: bool
        :param Index:
        :type Index: int
        :param P:
        :type P: IntSurf_PathPoint &
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusFirst(self, *args)


    def AddStatusFirstLast(self, *args):
        """
        :param Closed:
        :type Closed: bool
        :param HasFirst:
        :type HasFirst: bool
        :param HasLast:
        :type HasLast: bool
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusFirstLast(self, *args)


    def AddStatusLast(self, *args):
        """
        :param HasLast:
        :type HasLast: bool
        :rtype: None

        :param HasLast:
        :type HasLast: bool
        :param Index:
        :type Index: int
        :param P:
        :type P: IntSurf_PathPoint &
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusLast(self, *args)


    def AddIndexPassing(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddIndexPassing(self, *args)


    def SetTangentVector(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangentVector(self, *args)


    def SetTangencyAtBegining(self, *args):
        """
        :param IsTangent:
        :type IsTangent: bool
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangencyAtBegining(self, *args)


    def SetTangencyAtEnd(self, *args):
        """
        :param IsTangent:
        :type IsTangent: bool
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangencyAtEnd(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_NbPoints(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PntOn2S

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_Value(self, *args)


    def Line(self, *args):
        """
        :rtype: Handle_IntSurf_LineOn2S

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_Line(self, *args)


    def IsClosed(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsClosed(self, *args)


    def HasFirstPoint(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_HasLastPoint(self, *args)


    def FirstPoint(self, *args):
        """
        :rtype: IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_FirstPoint(self, *args)


    def FirstPointIndex(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_FirstPointIndex(self, *args)


    def LastPoint(self, *args):
        """
        :rtype: IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_LastPoint(self, *args)


    def LastPointIndex(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_LastPointIndex(self, *args)


    def NbPassingPoint(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_NbPassingPoint(self, *args)


    def PassingPoint(self, *args):
        """
        :param Index:
        :type Index: int
        :param IndexLine:
        :type IndexLine: int &
        :param IndexPnts:
        :type IndexPnts: int &
        :rtype: None

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_PassingPoint(self, *args)


    def TangentVector(self, *args):
        """
        :param Index:
        :type Index: int &
        :rtype: gp_Vec

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_TangentVector(self, *args)


    def IsTangentAtBegining(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsTangentAtBegining(self, *args)


    def IsTangentAtEnd(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsTangentAtEnd(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Contap_TheIWLineOfTheIWalkingOfContour self)"""
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Contap_TheIWLineOfTheIWalkingOfContour self) -> Handle_Contap_TheIWLineOfTheIWalkingOfContour"""
        return _Contap.Contap_TheIWLineOfTheIWalkingOfContour_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheIWLineOfTheIWalkingOfContour.Reverse = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_Reverse, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.Cut = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_Cut, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.AddPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.AddStatusFirst = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusFirst, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.AddStatusFirstLast = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusFirstLast, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.AddStatusLast = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddStatusLast, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.AddIndexPassing = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_AddIndexPassing, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.SetTangentVector = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangentVector, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.SetTangencyAtBegining = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangencyAtBegining, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.SetTangencyAtEnd = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_SetTangencyAtEnd, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.NbPoints = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_NbPoints, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.Value = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_Value, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.Line = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_Line, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.IsClosed = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsClosed, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.HasFirstPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_HasFirstPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.HasLastPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_HasLastPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.FirstPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_FirstPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.FirstPointIndex = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_FirstPointIndex, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.LastPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_LastPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.LastPointIndex = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_LastPointIndex, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.NbPassingPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_NbPassingPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.PassingPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_PassingPoint, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.TangentVector = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_TangentVector, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.IsTangentAtBegining = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsTangentAtBegining, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.IsTangentAtEnd = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_IsTangentAtEnd, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour__kill_pointed, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour.GetHandle = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalkingOfContour_GetHandle, None, Contap_TheIWLineOfTheIWalkingOfContour)
Contap_TheIWLineOfTheIWalkingOfContour_swigregister = _Contap.Contap_TheIWLineOfTheIWalkingOfContour_swigregister
Contap_TheIWLineOfTheIWalkingOfContour_swigregister(Contap_TheIWLineOfTheIWalkingOfContour)

class Handle_Contap_TheIWLineOfTheIWalkingOfContour(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_swiginit(self, _Contap.new_Handle_Contap_TheIWLineOfTheIWalkingOfContour(*args))
    DownCast = staticmethod(_Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Contap_TheIWLineOfTheIWalkingOfContour.Nullify = new_instancemethod(_Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_Nullify, None, Handle_Contap_TheIWLineOfTheIWalkingOfContour)
Handle_Contap_TheIWLineOfTheIWalkingOfContour.IsNull = new_instancemethod(_Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_IsNull, None, Handle_Contap_TheIWLineOfTheIWalkingOfContour)
Handle_Contap_TheIWLineOfTheIWalkingOfContour.GetObject = new_instancemethod(_Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_GetObject, None, Handle_Contap_TheIWLineOfTheIWalkingOfContour)
Handle_Contap_TheIWLineOfTheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour__kill_pointed, None, Handle_Contap_TheIWLineOfTheIWalkingOfContour)
Handle_Contap_TheIWLineOfTheIWalkingOfContour_swigregister = _Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_swigregister
Handle_Contap_TheIWLineOfTheIWalkingOfContour_swigregister(Handle_Contap_TheIWLineOfTheIWalkingOfContour)

def Handle_Contap_TheIWLineOfTheIWalkingOfContour_DownCast(AnObject):
    return _Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_DownCast(AnObject)
Handle_Contap_TheIWLineOfTheIWalkingOfContour_DownCast = _Contap.Handle_Contap_TheIWLineOfTheIWalkingOfContour_DownCast

class Contap_TheIWalkingOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Epsilon:
        :type Epsilon: float
        :param Deflection:
        :type Deflection: float
        :param Step:
        :type Step: float
        :rtype: None

        """
        _Contap.Contap_TheIWalkingOfContour_swiginit(self, _Contap.new_Contap_TheIWalkingOfContour(*args))

    def SetTolerance(self, *args):
        """
        :param Epsilon:
        :type Epsilon: float
        :param Deflection:
        :type Deflection: float
        :param Step:
        :type Step: float
        :rtype: None

        """
        return _Contap.Contap_TheIWalkingOfContour_SetTolerance(self, *args)


    def Perform(self, *args):
        """
        :param Pnts1:
        :type Pnts1: IntSurf_SequenceOfPathPoint &
        :param Pnts2:
        :type Pnts2: IntSurf_SequenceOfInteriorPoint &
        :param Func:
        :type Func: Contap_TheSurfFunctionOfContour &
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Reversed: default value is Standard_False
        :type Reversed: bool
        :rtype: None

        :param Pnts1:
        :type Pnts1: IntSurf_SequenceOfPathPoint &
        :param Func:
        :type Func: Contap_TheSurfFunctionOfContour &
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param Reversed: default value is Standard_False
        :type Reversed: bool
        :rtype: None

        """
        return _Contap.Contap_TheIWalkingOfContour_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheIWalkingOfContour_IsDone(self, *args)


    def NbLines(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWalkingOfContour_NbLines(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Contap_TheIWLineOfTheIWalkingOfContour

        """
        return _Contap.Contap_TheIWalkingOfContour_Value(self, *args)


    def NbSinglePnts(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheIWalkingOfContour_NbSinglePnts(self, *args)


    def SinglePnt(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWalkingOfContour_SinglePnt(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheIWalkingOfContour.SetTolerance = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_SetTolerance, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.Perform = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_Perform, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.IsDone = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_IsDone, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.NbLines = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_NbLines, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.Value = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_Value, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.NbSinglePnts = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_NbSinglePnts, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour.SinglePnt = new_instancemethod(_Contap.Contap_TheIWalkingOfContour_SinglePnt, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheIWalkingOfContour__kill_pointed, None, Contap_TheIWalkingOfContour)
Contap_TheIWalkingOfContour_swigregister = _Contap.Contap_TheIWalkingOfContour_swigregister
Contap_TheIWalkingOfContour_swigregister(Contap_TheIWalkingOfContour)

class Contap_TheLineOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheLineOfContour_swiginit(self, _Contap.new_Contap_TheLineOfContour(*args))

    def SetLineOn2S(self, *args):
        """
        :param L:
        :type L: Handle_IntSurf_LineOn2S &
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_SetLineOn2S(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_Clear(self, *args)


    def LineOn2S(self, *args):
        """
        :rtype: Handle_IntSurf_LineOn2S

        """
        return _Contap.Contap_TheLineOfContour_LineOn2S(self, *args)


    def ResetSeqOfVertex(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_ResetSeqOfVertex(self, *args)


    def SetValue(self, *args):
        """
        :param L:
        :type L: gp_Lin
        :rtype: None

        :param C:
        :type C: gp_Circ
        :rtype: None

        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_SetValue(self, *args)


    def Add(self, *args):
        """
        :param P:
        :type P: IntSurf_PntOn2S &
        :rtype: None

        :param P:
        :type P: Contap_ThePointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_Add(self, *args)


    def NbVertex(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheLineOfContour_NbVertex(self, *args)


    def Vertex(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheLineOfContour_Vertex(self, *args)


    def TypeContour(self, *args):
        """
        :rtype: Contap_IType

        """
        return _Contap.Contap_TheLineOfContour_TypeContour(self, *args)


    def NbPnts(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheLineOfContour_NbPnts(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_PntOn2S

        """
        return _Contap.Contap_TheLineOfContour_Point(self, *args)


    def Line(self, *args):
        """
        :rtype: gp_Lin

        """
        return _Contap.Contap_TheLineOfContour_Line(self, *args)


    def Circle(self, *args):
        """
        :rtype: gp_Circ

        """
        return _Contap.Contap_TheLineOfContour_Circle(self, *args)


    def Arc(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Contap.Contap_TheLineOfContour_Arc(self, *args)


    def SetTransitionOnS(self, *args):
        """
        :param T:
        :type T: IntSurf_TypeTrans
        :rtype: None

        """
        return _Contap.Contap_TheLineOfContour_SetTransitionOnS(self, *args)


    def TransitionOnS(self, *args):
        """
        :rtype: IntSurf_TypeTrans

        """
        return _Contap.Contap_TheLineOfContour_TransitionOnS(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheLineOfContour.SetLineOn2S = new_instancemethod(_Contap.Contap_TheLineOfContour_SetLineOn2S, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Clear = new_instancemethod(_Contap.Contap_TheLineOfContour_Clear, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.LineOn2S = new_instancemethod(_Contap.Contap_TheLineOfContour_LineOn2S, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.ResetSeqOfVertex = new_instancemethod(_Contap.Contap_TheLineOfContour_ResetSeqOfVertex, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.SetValue = new_instancemethod(_Contap.Contap_TheLineOfContour_SetValue, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Add = new_instancemethod(_Contap.Contap_TheLineOfContour_Add, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.NbVertex = new_instancemethod(_Contap.Contap_TheLineOfContour_NbVertex, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Vertex = new_instancemethod(_Contap.Contap_TheLineOfContour_Vertex, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.TypeContour = new_instancemethod(_Contap.Contap_TheLineOfContour_TypeContour, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.NbPnts = new_instancemethod(_Contap.Contap_TheLineOfContour_NbPnts, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Point = new_instancemethod(_Contap.Contap_TheLineOfContour_Point, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Line = new_instancemethod(_Contap.Contap_TheLineOfContour_Line, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Circle = new_instancemethod(_Contap.Contap_TheLineOfContour_Circle, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.Arc = new_instancemethod(_Contap.Contap_TheLineOfContour_Arc, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.SetTransitionOnS = new_instancemethod(_Contap.Contap_TheLineOfContour_SetTransitionOnS, None, Contap_TheLineOfContour)
Contap_TheLineOfContour.TransitionOnS = new_instancemethod(_Contap.Contap_TheLineOfContour_TransitionOnS, None, Contap_TheLineOfContour)
Contap_TheLineOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheLineOfContour__kill_pointed, None, Contap_TheLineOfContour)
Contap_TheLineOfContour_swigregister = _Contap.Contap_TheLineOfContour_swigregister
Contap_TheLineOfContour_swigregister(Contap_TheLineOfContour)

class Contap_ThePathPointOfTheSearchOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Parameter:
        :type Parameter: float
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Parameter:
        :type Parameter: float
        :rtype: None

        """
        _Contap.Contap_ThePathPointOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_ThePathPointOfTheSearchOfContour(*args))

    def SetValue(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Parameter:
        :type Parameter: float
        :rtype: None

        :param P:
        :type P: gp_Pnt
        :param Tol:
        :type Tol: float
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Parameter:
        :type Parameter: float
        :rtype: None

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_SetValue(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_Value(self, *args)


    def Tolerance(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_Tolerance(self, *args)


    def IsNew(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_IsNew(self, *args)


    def Vertex(self, *args):
        """
        :rtype: Handle_Adaptor3d_HVertex

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_Vertex(self, *args)


    def Arc(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_Arc(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_ThePathPointOfTheSearchOfContour_Parameter(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_ThePathPointOfTheSearchOfContour.SetValue = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_SetValue, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.Value = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_Value, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.Tolerance = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_Tolerance, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.IsNew = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_IsNew, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.Vertex = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_Vertex, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.Arc = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_Arc, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour.Parameter = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour_Parameter, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearchOfContour__kill_pointed, None, Contap_ThePathPointOfTheSearchOfContour)
Contap_ThePathPointOfTheSearchOfContour_swigregister = _Contap.Contap_ThePathPointOfTheSearchOfContour_swigregister
Contap_ThePathPointOfTheSearchOfContour_swigregister(Contap_ThePathPointOfTheSearchOfContour)

class Contap_ThePointOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Pt:
        :type Pt: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        _Contap.Contap_ThePointOfContour_swiginit(self, _Contap.new_Contap_ThePointOfContour(*args))

    def SetValue(self, *args):
        """
        :param Pt:
        :type Pt: gp_Pnt
        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetValue(self, *args)


    def SetParameter(self, *args):
        """
        :param Para:
        :type Para: float
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetParameter(self, *args)


    def SetVertex(self, *args):
        """
        :param V:
        :type V: Handle_Adaptor3d_HVertex &
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetVertex(self, *args)


    def SetArc(self, *args):
        """
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :param Param:
        :type Param: float
        :param TLine:
        :type TLine: IntSurf_Transition &
        :param TArc:
        :type TArc: IntSurf_Transition &
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetArc(self, *args)


    def SetMultiple(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetMultiple(self, *args)


    def SetInternal(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_SetInternal(self, *args)


    def Value(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _Contap.Contap_ThePointOfContour_Value(self, *args)


    def ParameterOnLine(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_ThePointOfContour_ParameterOnLine(self, *args)


    def Parameters(self, *args):
        """
        :param U1:
        :type U1: float &
        :param V1:
        :type V1: float &
        :rtype: None

        """
        return _Contap.Contap_ThePointOfContour_Parameters(self, *args)


    def IsOnArc(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ThePointOfContour_IsOnArc(self, *args)


    def Arc(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Contap.Contap_ThePointOfContour_Arc(self, *args)


    def ParameterOnArc(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_ThePointOfContour_ParameterOnArc(self, *args)


    def TransitionOnLine(self, *args):
        """
        :rtype: IntSurf_Transition

        """
        return _Contap.Contap_ThePointOfContour_TransitionOnLine(self, *args)


    def TransitionOnArc(self, *args):
        """
        :rtype: IntSurf_Transition

        """
        return _Contap.Contap_ThePointOfContour_TransitionOnArc(self, *args)


    def IsVertex(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ThePointOfContour_IsVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: Handle_Adaptor3d_HVertex

        """
        return _Contap.Contap_ThePointOfContour_Vertex(self, *args)


    def IsMultiple(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ThePointOfContour_IsMultiple(self, *args)


    def IsInternal(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_ThePointOfContour_IsInternal(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_ThePointOfContour.SetValue = new_instancemethod(_Contap.Contap_ThePointOfContour_SetValue, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.SetParameter = new_instancemethod(_Contap.Contap_ThePointOfContour_SetParameter, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.SetVertex = new_instancemethod(_Contap.Contap_ThePointOfContour_SetVertex, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.SetArc = new_instancemethod(_Contap.Contap_ThePointOfContour_SetArc, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.SetMultiple = new_instancemethod(_Contap.Contap_ThePointOfContour_SetMultiple, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.SetInternal = new_instancemethod(_Contap.Contap_ThePointOfContour_SetInternal, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.Value = new_instancemethod(_Contap.Contap_ThePointOfContour_Value, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.ParameterOnLine = new_instancemethod(_Contap.Contap_ThePointOfContour_ParameterOnLine, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.Parameters = new_instancemethod(_Contap.Contap_ThePointOfContour_Parameters, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.IsOnArc = new_instancemethod(_Contap.Contap_ThePointOfContour_IsOnArc, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.Arc = new_instancemethod(_Contap.Contap_ThePointOfContour_Arc, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.ParameterOnArc = new_instancemethod(_Contap.Contap_ThePointOfContour_ParameterOnArc, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.TransitionOnLine = new_instancemethod(_Contap.Contap_ThePointOfContour_TransitionOnLine, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.TransitionOnArc = new_instancemethod(_Contap.Contap_ThePointOfContour_TransitionOnArc, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.IsVertex = new_instancemethod(_Contap.Contap_ThePointOfContour_IsVertex, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.Vertex = new_instancemethod(_Contap.Contap_ThePointOfContour_Vertex, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.IsMultiple = new_instancemethod(_Contap.Contap_ThePointOfContour_IsMultiple, None, Contap_ThePointOfContour)
Contap_ThePointOfContour.IsInternal = new_instancemethod(_Contap.Contap_ThePointOfContour_IsInternal, None, Contap_ThePointOfContour)
Contap_ThePointOfContour._kill_pointed = new_instancemethod(_Contap.Contap_ThePointOfContour__kill_pointed, None, Contap_ThePointOfContour)
Contap_ThePointOfContour_swigregister = _Contap.Contap_ThePointOfContour_swigregister
Contap_ThePointOfContour_swigregister(Contap_ThePointOfContour)

class Contap_TheSearchInsideOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param F:
        :type F: Contap_TheSurfFunctionOfContour &
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param T:
        :type T: Handle_Adaptor3d_TopolTool &
        :param Epsilon:
        :type Epsilon: float
        :rtype: None

        """
        _Contap.Contap_TheSearchInsideOfContour_swiginit(self, _Contap.new_Contap_TheSearchInsideOfContour(*args))

    def Perform(self, *args):
        """
        :param F:
        :type F: Contap_TheSurfFunctionOfContour &
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param T:
        :type T: Handle_Adaptor3d_TopolTool &
        :param Epsilon:
        :type Epsilon: float
        :rtype: None

        :param F:
        :type F: Contap_TheSurfFunctionOfContour &
        :param Surf:
        :type Surf: Handle_Adaptor3d_HSurface &
        :param UStart:
        :type UStart: float
        :param VStart:
        :type VStart: float
        :rtype: None

        """
        return _Contap.Contap_TheSearchInsideOfContour_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSearchInsideOfContour_IsDone(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheSearchInsideOfContour_NbPoints(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntSurf_InteriorPoint

        """
        return _Contap.Contap_TheSearchInsideOfContour_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSearchInsideOfContour.Perform = new_instancemethod(_Contap.Contap_TheSearchInsideOfContour_Perform, None, Contap_TheSearchInsideOfContour)
Contap_TheSearchInsideOfContour.IsDone = new_instancemethod(_Contap.Contap_TheSearchInsideOfContour_IsDone, None, Contap_TheSearchInsideOfContour)
Contap_TheSearchInsideOfContour.NbPoints = new_instancemethod(_Contap.Contap_TheSearchInsideOfContour_NbPoints, None, Contap_TheSearchInsideOfContour)
Contap_TheSearchInsideOfContour.Value = new_instancemethod(_Contap.Contap_TheSearchInsideOfContour_Value, None, Contap_TheSearchInsideOfContour)
Contap_TheSearchInsideOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSearchInsideOfContour__kill_pointed, None, Contap_TheSearchInsideOfContour)
Contap_TheSearchInsideOfContour_swigregister = _Contap.Contap_TheSearchInsideOfContour_swigregister
Contap_TheSearchInsideOfContour_swigregister(Contap_TheSearchInsideOfContour)

class Contap_TheSearchOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheSearchOfContour_swiginit(self, _Contap.new_Contap_TheSearchOfContour(*args))

    def Perform(self, *args):
        """
        :param F:
        :type F: Contap_TheArcFunctionOfContour &
        :param Domain:
        :type Domain: Handle_Adaptor3d_TopolTool &
        :param TolBoundary:
        :type TolBoundary: float
        :param TolTangency:
        :type TolTangency: float
        :param RecheckOnRegularity: default value is Standard_False
        :type RecheckOnRegularity: bool
        :rtype: None

        """
        return _Contap.Contap_TheSearchOfContour_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSearchOfContour_IsDone(self, *args)


    def AllArcSolution(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSearchOfContour_AllArcSolution(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheSearchOfContour_NbPoints(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_TheSearchOfContour_Point(self, *args)


    def NbSegments(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheSearchOfContour_NbSegments(self, *args)


    def Segment(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheSegmentOfTheSearchOfContour

        """
        return _Contap.Contap_TheSearchOfContour_Segment(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSearchOfContour.Perform = new_instancemethod(_Contap.Contap_TheSearchOfContour_Perform, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.IsDone = new_instancemethod(_Contap.Contap_TheSearchOfContour_IsDone, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.AllArcSolution = new_instancemethod(_Contap.Contap_TheSearchOfContour_AllArcSolution, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.NbPoints = new_instancemethod(_Contap.Contap_TheSearchOfContour_NbPoints, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.Point = new_instancemethod(_Contap.Contap_TheSearchOfContour_Point, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.NbSegments = new_instancemethod(_Contap.Contap_TheSearchOfContour_NbSegments, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour.Segment = new_instancemethod(_Contap.Contap_TheSearchOfContour_Segment, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSearchOfContour__kill_pointed, None, Contap_TheSearchOfContour)
Contap_TheSearchOfContour_swigregister = _Contap.Contap_TheSearchOfContour_swigregister
Contap_TheSearchOfContour_swigregister(Contap_TheSearchOfContour)

class Contap_TheSegmentOfTheSearchOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheSegmentOfTheSearchOfContour_swiginit(self, _Contap.new_Contap_TheSegmentOfTheSearchOfContour(*args))

    def SetValue(self, *args):
        """
        :param A:
        :type A: Handle_Adaptor2d_HCurve2d &
        :rtype: None

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_SetValue(self, *args)


    def SetLimitPoint(self, *args):
        """
        :param V:
        :type V: Contap_ThePathPointOfTheSearchOfContour &
        :param First:
        :type First: bool
        :rtype: None

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_SetLimitPoint(self, *args)


    def Curve(self, *args):
        """
        :rtype: Handle_Adaptor2d_HCurve2d

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_Curve(self, *args)


    def HasFirstPoint(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_HasFirstPoint(self, *args)


    def FirstPoint(self, *args):
        """
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_FirstPoint(self, *args)


    def HasLastPoint(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_HasLastPoint(self, *args)


    def LastPoint(self, *args):
        """
        :rtype: Contap_ThePathPointOfTheSearchOfContour

        """
        return _Contap.Contap_TheSegmentOfTheSearchOfContour_LastPoint(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSegmentOfTheSearchOfContour.SetValue = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_SetValue, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.SetLimitPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_SetLimitPoint, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.Curve = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_Curve, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.HasFirstPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_HasFirstPoint, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.FirstPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_FirstPoint, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.HasLastPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_HasLastPoint, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour.LastPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour_LastPoint, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearchOfContour__kill_pointed, None, Contap_TheSegmentOfTheSearchOfContour)
Contap_TheSegmentOfTheSearchOfContour_swigregister = _Contap.Contap_TheSegmentOfTheSearchOfContour_swigregister
Contap_TheSegmentOfTheSearchOfContour_swigregister(Contap_TheSegmentOfTheSearchOfContour)

class Contap_TheSequenceOfLineOfContour(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheSequenceOfLineOfContour_swiginit(self, _Contap.new_Contap_TheSequenceOfLineOfContour(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Contap_TheSequenceOfLineOfContour &
        :rtype: Contap_TheSequenceOfLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Contap_TheSequenceOfLineOfContour &
        :rtype: Contap_TheSequenceOfLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Contap_TheLineOfContour &
        :rtype: None

        :param S:
        :type S: Contap_TheSequenceOfLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Contap_TheLineOfContour &
        :rtype: None

        :param S:
        :type S: Contap_TheSequenceOfLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_TheLineOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_TheSequenceOfLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_TheLineOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_TheSequenceOfLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Contap_TheSequenceOfLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Contap_TheLineOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_TheLineOfContour

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfLineOfContour_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSequenceOfLineOfContour.Clear = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Clear, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Assign = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Assign, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Set = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Set, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Append = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Append, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Prepend = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Prepend, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.InsertBefore = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_InsertBefore, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.InsertAfter = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_InsertAfter, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.First = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_First, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Last = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Last, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Split = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Split, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Value = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Value, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.SetValue = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_SetValue, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.ChangeValue = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_ChangeValue, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour.Remove = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour_Remove, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSequenceOfLineOfContour__kill_pointed, None, Contap_TheSequenceOfLineOfContour)
Contap_TheSequenceOfLineOfContour_swigregister = _Contap.Contap_TheSequenceOfLineOfContour_swigregister
Contap_TheSequenceOfLineOfContour_swigregister(Contap_TheSequenceOfLineOfContour)

class Contap_TheSequenceOfPointOfContour(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheSequenceOfPointOfContour_swiginit(self, _Contap.new_Contap_TheSequenceOfPointOfContour(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Contap_TheSequenceOfPointOfContour &
        :rtype: Contap_TheSequenceOfPointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Contap_TheSequenceOfPointOfContour &
        :rtype: Contap_TheSequenceOfPointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Contap_ThePointOfContour &
        :rtype: None

        :param S:
        :type S: Contap_TheSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Contap_ThePointOfContour &
        :rtype: None

        :param S:
        :type S: Contap_TheSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_ThePointOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_TheSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Contap_ThePointOfContour &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Contap_TheSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Contap_TheSequenceOfPointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Contap_ThePointOfContour &
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Contap_ThePointOfContour

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Contap.Contap_TheSequenceOfPointOfContour_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSequenceOfPointOfContour.Clear = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Clear, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Assign = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Assign, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Set = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Set, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Append = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Append, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Prepend = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Prepend, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.InsertBefore = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_InsertBefore, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.InsertAfter = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_InsertAfter, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.First = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_First, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Last = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Last, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Split = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Split, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Value = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Value, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.SetValue = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_SetValue, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.ChangeValue = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_ChangeValue, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour.Remove = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour_Remove, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSequenceOfPointOfContour__kill_pointed, None, Contap_TheSequenceOfPointOfContour)
Contap_TheSequenceOfPointOfContour_swigregister = _Contap.Contap_TheSequenceOfPointOfContour_swigregister
Contap_TheSequenceOfPointOfContour_swigregister(Contap_TheSequenceOfPointOfContour)

class Contap_TheSurfFunctionOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Contap.Contap_TheSurfFunctionOfContour_swiginit(self, _Contap.new_Contap_TheSurfFunctionOfContour(*args))

    def Set(self, *args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :rtype: None

        :param Dir:
        :type Dir: gp_Dir
        :rtype: None

        :param Dir:
        :type Dir: gp_Dir
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Eye:
        :type Eye: gp_Pnt
        :param Angle:
        :type Angle: float
        :rtype: None

        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Set(self, *args)


    def NbVariables(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheSurfFunctionOfContour_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        :rtype: int

        """
        return _Contap.Contap_TheSurfFunctionOfContour_NbEquations(self, *args)


    def Value(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Value(self, *args)


    def Derivatives(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Derivatives(self, *args)


    def Values(self, *args):
        """
        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :param D:
        :type D: math_Matrix &
        :rtype: bool

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Values(self, *args)


    def Root(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Root(self, *args)


    def Tolerance(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Tolerance(self, *args)


    def Point(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Point(self, *args)


    def IsTangent(self, *args):
        """
        :rtype: bool

        """
        return _Contap.Contap_TheSurfFunctionOfContour_IsTangent(self, *args)


    def Direction3d(self, *args):
        """
        :rtype: gp_Vec

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Direction3d(self, *args)


    def Direction2d(self, *args):
        """
        :rtype: gp_Dir2d

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Direction2d(self, *args)


    def FunctionType(self, *args):
        """
        :rtype: Contap_TFunction

        """
        return _Contap.Contap_TheSurfFunctionOfContour_FunctionType(self, *args)


    def Eye(self, *args):
        """
        :rtype: gp_Pnt

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Eye(self, *args)


    def Direction(self, *args):
        """
        :rtype: gp_Dir

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Direction(self, *args)


    def Angle(self, *args):
        """
        :rtype: float

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Angle(self, *args)


    def Surface(self, *args):
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _Contap.Contap_TheSurfFunctionOfContour_Surface(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSurfFunctionOfContour.Set = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Set, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.NbVariables = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_NbVariables, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.NbEquations = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_NbEquations, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Value = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Value, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Derivatives = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Derivatives, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Values = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Values, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Root = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Root, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Tolerance = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Tolerance, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Point = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Point, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.IsTangent = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_IsTangent, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Direction3d = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Direction3d, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Direction2d = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Direction2d, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.FunctionType = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_FunctionType, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Eye = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Eye, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Direction = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Direction, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Angle = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Angle, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour.Surface = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour_Surface, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSurfFunctionOfContour__kill_pointed, None, Contap_TheSurfFunctionOfContour)
Contap_TheSurfFunctionOfContour_swigregister = _Contap.Contap_TheSurfFunctionOfContour_swigregister
Contap_TheSurfFunctionOfContour_swigregister(Contap_TheSurfFunctionOfContour)

class Contap_TheSurfPropsOfContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Normale(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param N:
        :type N: gp_Vec
        :rtype: void

        """
        return _Contap.Contap_TheSurfPropsOfContour_Normale(*args)

    Normale = staticmethod(Normale)

    def DerivAndNorm(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param d1u:
        :type d1u: gp_Vec
        :param d1v:
        :type d1v: gp_Vec
        :param N:
        :type N: gp_Vec
        :rtype: void

        """
        return _Contap.Contap_TheSurfPropsOfContour_DerivAndNorm(*args)

    DerivAndNorm = staticmethod(DerivAndNorm)

    def NormAndDn(*args):
        """
        :param S:
        :type S: Handle_Adaptor3d_HSurface &
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param N:
        :type N: gp_Vec
        :param Dnu:
        :type Dnu: gp_Vec
        :param Dnv:
        :type Dnv: gp_Vec
        :rtype: void

        """
        return _Contap.Contap_TheSurfPropsOfContour_NormAndDn(*args)

    NormAndDn = staticmethod(NormAndDn)

    def __init__(self):
        _Contap.Contap_TheSurfPropsOfContour_swiginit(self, _Contap.new_Contap_TheSurfPropsOfContour())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Contap_TheSurfPropsOfContour._kill_pointed = new_instancemethod(_Contap.Contap_TheSurfPropsOfContour__kill_pointed, None, Contap_TheSurfPropsOfContour)
Contap_TheSurfPropsOfContour_swigregister = _Contap.Contap_TheSurfPropsOfContour_swigregister
Contap_TheSurfPropsOfContour_swigregister(Contap_TheSurfPropsOfContour)

def Contap_TheSurfPropsOfContour_Normale(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param N:
    :type N: gp_Vec
    :rtype: void

    """
    return _Contap.Contap_TheSurfPropsOfContour_Normale(*args)

def Contap_TheSurfPropsOfContour_DerivAndNorm(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param d1u:
    :type d1u: gp_Vec
    :param d1v:
    :type d1v: gp_Vec
    :param N:
    :type N: gp_Vec
    :rtype: void

    """
    return _Contap.Contap_TheSurfPropsOfContour_DerivAndNorm(*args)

def Contap_TheSurfPropsOfContour_NormAndDn(*args):
    """
    :param S:
    :type S: Handle_Adaptor3d_HSurface &
    :param U:
    :type U: float
    :param V:
    :type V: float
    :param P:
    :type P: gp_Pnt
    :param N:
    :type N: gp_Vec
    :param Dnu:
    :type Dnu: gp_Vec
    :param Dnv:
    :type Dnv: gp_Vec
    :rtype: void

    """
    return _Contap.Contap_TheSurfPropsOfContour_NormAndDn(*args)



