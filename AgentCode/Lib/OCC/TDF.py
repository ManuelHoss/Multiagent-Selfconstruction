# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _TDF.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDF', [dirname(__file__)])
        except ImportError:
            import _TDF
            return _TDF
        if fp is not None:
            try:
                _mod = imp.load_module('_TDF', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TDF = swig_import_helper()
    del swig_import_helper
else:
    import _TDF
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDF.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_TDF.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDF.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDF.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDF.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDF.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDF.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDF.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDF.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDF.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDF.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDF.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDF.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDF.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDF.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDF.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDF.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _TDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
TDF_LabelNodeImportMsk = _TDF.TDF_LabelNodeImportMsk
TDF_LabelNodeAttModMsk = _TDF.TDF_LabelNodeAttModMsk
TDF_LabelNodeMayModMsk = _TDF.TDF_LabelNodeMayModMsk
TDF_LabelNodeFlagsMsk = _TDF.TDF_LabelNodeFlagsMsk
class tdf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def LowestID(*args):
        """
        * Returns ID '00000000-0000-0000-0000-000000000000', sometimes used as null ID.

        :rtype: Standard_GUID

        """
        return _TDF.tdf_LowestID(*args)

    LowestID = staticmethod(LowestID)
    def UppestID(*args):
        """
        * Returns ID 'ffffffff-ffff-ffff-ffff-ffffffffffff'.

        :rtype: Standard_GUID

        """
        return _TDF.tdf_UppestID(*args)

    UppestID = staticmethod(UppestID)
    def AddLinkGUIDToProgID(*args):
        """
        * Sets link between GUID and ProgID in hidden DataMap

        :param ID:
        :type ID: Standard_GUID &
        :param ProgID:
        :type ProgID: TCollection_ExtendedString &
        :rtype: void

        """
        return _TDF.tdf_AddLinkGUIDToProgID(*args)

    AddLinkGUIDToProgID = staticmethod(AddLinkGUIDToProgID)
    def GUIDFromProgID(*args):
        """
        * Returns True if there is GUID for given <ProgID> then GUID is returned in <ID>

        :param ProgID:
        :type ProgID: TCollection_ExtendedString &
        :param ID:
        :type ID: Standard_GUID &
        :rtype: bool

        """
        return _TDF.tdf_GUIDFromProgID(*args)

    GUIDFromProgID = staticmethod(GUIDFromProgID)
    def ProgIDFromGUID(*args):
        """
        * Returns True if there is ProgID for given <ID> then ProgID is returned in <ProgID>

        :param ID:
        :type ID: Standard_GUID &
        :param ProgID:
        :type ProgID: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDF.tdf_ProgIDFromGUID(*args)

    ProgIDFromGUID = staticmethod(ProgIDFromGUID)
    def __init__(self): 
        _TDF.tdf_swiginit(self,_TDF.new_tdf())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


tdf._kill_pointed = new_instancemethod(_TDF.tdf__kill_pointed,None,tdf)
tdf_swigregister = _TDF.tdf_swigregister
tdf_swigregister(tdf)

def tdf_LowestID(*args):
  """
    * Returns ID '00000000-0000-0000-0000-000000000000', sometimes used as null ID.

    :rtype: Standard_GUID

    """
  return _TDF.tdf_LowestID(*args)

def tdf_UppestID(*args):
  """
    * Returns ID 'ffffffff-ffff-ffff-ffff-ffffffffffff'.

    :rtype: Standard_GUID

    """
  return _TDF.tdf_UppestID(*args)

def tdf_AddLinkGUIDToProgID(*args):
  """
    * Sets link between GUID and ProgID in hidden DataMap

    :param ID:
    :type ID: Standard_GUID &
    :param ProgID:
    :type ProgID: TCollection_ExtendedString &
    :rtype: void

    """
  return _TDF.tdf_AddLinkGUIDToProgID(*args)

def tdf_GUIDFromProgID(*args):
  """
    * Returns True if there is GUID for given <ProgID> then GUID is returned in <ID>

    :param ProgID:
    :type ProgID: TCollection_ExtendedString &
    :param ID:
    :type ID: Standard_GUID &
    :rtype: bool

    """
  return _TDF.tdf_GUIDFromProgID(*args)

def tdf_ProgIDFromGUID(*args):
  """
    * Returns True if there is ProgID for given <ID> then ProgID is returned in <ProgID>

    :param ID:
    :type ID: Standard_GUID &
    :param ProgID:
    :type ProgID: TCollection_ExtendedString &
    :rtype: bool

    """
  return _TDF.tdf_ProgIDFromGUID(*args)

class TDF_Attribute(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ID(self, *args):
        """
        * Returns the ID of the attribute.

        :rtype: Standard_GUID

        """
        return _TDF.TDF_Attribute_ID(self, *args)

    def Label(self, *args):
        """
        * Returns the label to which the attribute is attached. If the label is not included in a DF, the label is null. See Label. Warning If the label is not included in a data framework, it is null. This function should not be redefined inline.

        :rtype: TDF_Label

        """
        return _TDF.TDF_Attribute_Label(self, *args)

    def Transaction(self, *args):
        """
        * Returns the transaction index in which the attribute has been created or modified.

        :rtype: int

        """
        return _TDF.TDF_Attribute_Transaction(self, *args)

    def UntilTransaction(self, *args):
        """
        * Returns the upper transaction index until which the attribute is/was valid. This number may vary. A removed attribute validity range is reduced to its transaction index.

        :rtype: int

        """
        return _TDF.TDF_Attribute_UntilTransaction(self, *args)

    def IsValid(self, *args):
        """
        * Returns true if the attribute is valid; i.e. not a backuped or removed one.

        :rtype: bool

        """
        return _TDF.TDF_Attribute_IsValid(self, *args)

    def IsNew(self, *args):
        """
        * Returns true if the attribute has no backup

        :rtype: bool

        """
        return _TDF.TDF_Attribute_IsNew(self, *args)

    def IsForgotten(self, *args):
        """
        * Returns true if the attribute forgotten status is set. ShortCut Methods concerning associated attributes =================================================

        :rtype: bool

        """
        return _TDF.TDF_Attribute_IsForgotten(self, *args)

    def IsAttribute(self, *args):
        """
        * Returns true if it exists an associated attribute of <self> with <anID> as ID.

        :param anID:
        :type anID: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_Attribute_IsAttribute(self, *args)

    def FindAttribute(self, *args):
        """
        * Finds an associated attribute of <self>, according to <anID>. the returned <anAttribute> is a valid one. The method returns True if found, False otherwise. A removed attribute cannot be found using this method.

        :param anID:
        :type anID: Standard_GUID &
        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_Attribute_FindAttribute(self, *args)

    def AddAttribute(self, *args):
        """
        * Adds an Attribute <other> to the label of <self>.Raises if there is already one of the same GUID fhan <other>.

        :param other:
        :type other: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_Attribute_AddAttribute(self, *args)

    def ForgetAttribute(self, *args):
        """
        * Forgets the Attribute of GUID <aguid> associated to the label of <self>. Be carefull that if <self> is the attribute of <guid>, <self> will have a null label after this call. If the attribute doesn't exist returns False. Otherwise returns True.

        :param aguid:
        :type aguid: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_Attribute_ForgetAttribute(self, *args)

    def ForgetAllAttributes(self, *args):
        """
        * Forgets all the attributes attached to the label  of <self>. Does it on the sub-labels if <clearChildren> is set to true. Of course, this method is compatible with Transaction & Delta mecanisms. Be carefull that if <self> will have a null label after this call

        :param clearChildren: default value is Standard_True
        :type clearChildren: bool
        :rtype: None

        """
        return _TDF.TDF_Attribute_ForgetAllAttributes(self, *args)

    def AfterAddition(self, *args):
        """
        * Something to do after adding an Attribute to a label.

        :rtype: void

        """
        return _TDF.TDF_Attribute_AfterAddition(self, *args)

    def BeforeRemoval(self, *args):
        """
        * Something to do before removing an Attribute from a label.

        :rtype: void

        """
        return _TDF.TDF_Attribute_BeforeRemoval(self, *args)

    def BeforeForget(self, *args):
        """
        * Something to do before forgetting an Attribute to a label.

        :rtype: void

        """
        return _TDF.TDF_Attribute_BeforeForget(self, *args)

    def AfterResume(self, *args):
        """
        * Something to do after resuming an Attribute from a label.

        :rtype: void

        """
        return _TDF.TDF_Attribute_AfterResume(self, *args)

    def AfterRetrieval(self, *args):
        """
        * Something to do AFTER creation of an attribute by persistent-transient translation. The returned status says if AfterUndo has been performed (true) or if this callback must be called once again further (false). If <forceIt> is set to true, the method MUST perform and return true. Does nothing by default and returns true.

        :param forceIt: default value is Standard_False
        :type forceIt: bool
        :rtype: bool

        """
        return _TDF.TDF_Attribute_AfterRetrieval(self, *args)

    def BeforeUndo(self, *args):
        """
        * Something to do before applying <anAttDelta>. The returned status says if AfterUndo has been performed (true) or if this callback must be called once again further (false). If <forceIt> is set to true, the method MUST perform and return true. Does nothing by default and returns true.

        :param anAttDelta:
        :type anAttDelta: Handle_TDF_AttributeDelta &
        :param forceIt: default value is Standard_False
        :type forceIt: bool
        :rtype: bool

        """
        return _TDF.TDF_Attribute_BeforeUndo(self, *args)

    def AfterUndo(self, *args):
        """
        * Something to do after applying <anAttDelta>. The returned status says if AfterUndo has been performed (true) or if this callback must be called once again further (false). If <forceIt> is set to true, the method MUST perform and return true. Does nothing by default and returns true.

        :param anAttDelta:
        :type anAttDelta: Handle_TDF_AttributeDelta &
        :param forceIt: default value is Standard_False
        :type forceIt: bool
        :rtype: bool

        """
        return _TDF.TDF_Attribute_AfterUndo(self, *args)

    def BeforeCommitTransaction(self, *args):
        """
        * A callback. By default does nothing. It is called by TDF_Data::CommitTransaction() method.

        :rtype: void

        """
        return _TDF.TDF_Attribute_BeforeCommitTransaction(self, *args)

    def Backup(self, *args):
        """
        * Backups the attribute. The backuped attribute is flagged 'Backuped' and not 'Valid'.  The method does nothing:  1) If the attribute transaction number is equal to the current transaction number (the attribute has already been backuped).  2) If the attribute is not attached to a label.

        :rtype: None

        """
        return _TDF.TDF_Attribute_Backup(self, *args)

    def IsBackuped(self, *args):
        """
        * Returns true if the attribute backup status is set. This status is set/unset by the Backup() method.

        :rtype: bool

        """
        return _TDF.TDF_Attribute_IsBackuped(self, *args)

    def BackupCopy(self, *args):
        """
        * Copies the attribute contents into a new other attribute. It is used by Backup().

        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_Attribute_BackupCopy(self, *args)

    def Restore(self, *args):
        """
        * Restores the backuped contents from <anAttribute> into this one. It is used when aborting a transaction.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: void

        """
        return _TDF.TDF_Attribute_Restore(self, *args)

    def DeltaOnAddition(self, *args):
        """
        * Makes an AttributeDelta because <self>  appeared. The only known use of a redefinition of  this method is to return a null handle (no delta).

        :rtype: Handle_TDF_DeltaOnAddition

        """
        return _TDF.TDF_Attribute_DeltaOnAddition(self, *args)

    def DeltaOnForget(self, *args):
        """
        * Makes an AttributeDelta because <self> has been  forgotten.

        :rtype: Handle_TDF_DeltaOnForget

        """
        return _TDF.TDF_Attribute_DeltaOnForget(self, *args)

    def DeltaOnResume(self, *args):
        """
        * Makes an AttributeDelta because <self> has been  resumed.

        :rtype: Handle_TDF_DeltaOnResume

        """
        return _TDF.TDF_Attribute_DeltaOnResume(self, *args)

    def DeltaOnModification(self, *args):
        """
        * Makes a DeltaOnModification between <self> and  <anOldAttribute.

        :param anOldAttribute:
        :type anOldAttribute: Handle_TDF_Attribute &
        :rtype: Handle_TDF_DeltaOnModification

        * Applies a DeltaOnModification to <self>.

        :param aDelta:
        :type aDelta: Handle_TDF_DeltaOnModification &
        :rtype: void

        """
        return _TDF.TDF_Attribute_DeltaOnModification(self, *args)

    def DeltaOnRemoval(self, *args):
        """
        * Makes a DeltaOnRemoval on <self> because <self> has  disappeared from the DS.

        :rtype: Handle_TDF_DeltaOnRemoval

        """
        return _TDF.TDF_Attribute_DeltaOnRemoval(self, *args)

    def NewEmpty(self, *args):
        """
        * Returns an new empty attribute from the good end type. It is used by the copy algorithm.

        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_Attribute_NewEmpty(self, *args)

    def Paste(self, *args):
        """
        * This method is different from the 'Copy' one, because it is used when copying an attribute from a source structure into a target structure. This method may paste the contents of <self> into <intoAttribute>.  The given pasted attribute can be full or empty of its contents. But don't make a NEW! Just set the contents!  It is possible to use <aRelocationTable> to get/set the relocation value of a source attribute.

        :param intoAttribute:
        :type intoAttribute: Handle_TDF_Attribute &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :rtype: void

        """
        return _TDF.TDF_Attribute_Paste(self, *args)

    def References(self, *args):
        """
        * Adds the first level referenced attributes and labels to <aDataSet>.  For this, use the AddLabel or AddAttribute of DataSet.  If there is none, do not implement the method.

        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :rtype: void

        """
        return _TDF.TDF_Attribute_References(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_Attribute self) -> std::string"""
        return _TDF.TDF_Attribute_DumpToString(self)

    def ExtendedDump(self, *args):
        """
        * Dumps the attribute content on <aStream>, using <aMap> like this: if an attribute is not in the map, first put add it to the map and then dump it. Use the map rank instead of dumping each attribute field.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aMap:
        :type aMap: TDF_AttributeIndexedMap &
        :rtype: void

        """
        return _TDF.TDF_Attribute_ExtendedDump(self, *args)

    def Forget(self, *args):
        """
        * Forgets the attribute. <aTransaction> is the current transaction in which the forget is done. A forgotten attribute is also flagged not 'Valid'.  A forgotten attribute is invisible. Set also the 'Valid' status to False. Obvioulsy, DF cannot empty an attribute (this has a semantic signification), but can remove it from the structure. So, a forgotten attribute is NOT an empty one, but a soon DEAD one.  Should be private.

        :param aTransaction:
        :type aTransaction: int
        :rtype: None

        """
        return _TDF.TDF_Attribute_Forget(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_Attribute self)"""
        return _TDF.TDF_Attribute__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_Attribute self) -> Handle_TDF_Attribute"""
        return _TDF.TDF_Attribute_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Attribute.ID = new_instancemethod(_TDF.TDF_Attribute_ID,None,TDF_Attribute)
TDF_Attribute.Label = new_instancemethod(_TDF.TDF_Attribute_Label,None,TDF_Attribute)
TDF_Attribute.Transaction = new_instancemethod(_TDF.TDF_Attribute_Transaction,None,TDF_Attribute)
TDF_Attribute.UntilTransaction = new_instancemethod(_TDF.TDF_Attribute_UntilTransaction,None,TDF_Attribute)
TDF_Attribute.IsValid = new_instancemethod(_TDF.TDF_Attribute_IsValid,None,TDF_Attribute)
TDF_Attribute.IsNew = new_instancemethod(_TDF.TDF_Attribute_IsNew,None,TDF_Attribute)
TDF_Attribute.IsForgotten = new_instancemethod(_TDF.TDF_Attribute_IsForgotten,None,TDF_Attribute)
TDF_Attribute.IsAttribute = new_instancemethod(_TDF.TDF_Attribute_IsAttribute,None,TDF_Attribute)
TDF_Attribute.FindAttribute = new_instancemethod(_TDF.TDF_Attribute_FindAttribute,None,TDF_Attribute)
TDF_Attribute.AddAttribute = new_instancemethod(_TDF.TDF_Attribute_AddAttribute,None,TDF_Attribute)
TDF_Attribute.ForgetAttribute = new_instancemethod(_TDF.TDF_Attribute_ForgetAttribute,None,TDF_Attribute)
TDF_Attribute.ForgetAllAttributes = new_instancemethod(_TDF.TDF_Attribute_ForgetAllAttributes,None,TDF_Attribute)
TDF_Attribute.AfterAddition = new_instancemethod(_TDF.TDF_Attribute_AfterAddition,None,TDF_Attribute)
TDF_Attribute.BeforeRemoval = new_instancemethod(_TDF.TDF_Attribute_BeforeRemoval,None,TDF_Attribute)
TDF_Attribute.BeforeForget = new_instancemethod(_TDF.TDF_Attribute_BeforeForget,None,TDF_Attribute)
TDF_Attribute.AfterResume = new_instancemethod(_TDF.TDF_Attribute_AfterResume,None,TDF_Attribute)
TDF_Attribute.AfterRetrieval = new_instancemethod(_TDF.TDF_Attribute_AfterRetrieval,None,TDF_Attribute)
TDF_Attribute.BeforeUndo = new_instancemethod(_TDF.TDF_Attribute_BeforeUndo,None,TDF_Attribute)
TDF_Attribute.AfterUndo = new_instancemethod(_TDF.TDF_Attribute_AfterUndo,None,TDF_Attribute)
TDF_Attribute.BeforeCommitTransaction = new_instancemethod(_TDF.TDF_Attribute_BeforeCommitTransaction,None,TDF_Attribute)
TDF_Attribute.Backup = new_instancemethod(_TDF.TDF_Attribute_Backup,None,TDF_Attribute)
TDF_Attribute.IsBackuped = new_instancemethod(_TDF.TDF_Attribute_IsBackuped,None,TDF_Attribute)
TDF_Attribute.BackupCopy = new_instancemethod(_TDF.TDF_Attribute_BackupCopy,None,TDF_Attribute)
TDF_Attribute.Restore = new_instancemethod(_TDF.TDF_Attribute_Restore,None,TDF_Attribute)
TDF_Attribute.DeltaOnAddition = new_instancemethod(_TDF.TDF_Attribute_DeltaOnAddition,None,TDF_Attribute)
TDF_Attribute.DeltaOnForget = new_instancemethod(_TDF.TDF_Attribute_DeltaOnForget,None,TDF_Attribute)
TDF_Attribute.DeltaOnResume = new_instancemethod(_TDF.TDF_Attribute_DeltaOnResume,None,TDF_Attribute)
TDF_Attribute.DeltaOnModification = new_instancemethod(_TDF.TDF_Attribute_DeltaOnModification,None,TDF_Attribute)
TDF_Attribute.DeltaOnRemoval = new_instancemethod(_TDF.TDF_Attribute_DeltaOnRemoval,None,TDF_Attribute)
TDF_Attribute.NewEmpty = new_instancemethod(_TDF.TDF_Attribute_NewEmpty,None,TDF_Attribute)
TDF_Attribute.Paste = new_instancemethod(_TDF.TDF_Attribute_Paste,None,TDF_Attribute)
TDF_Attribute.References = new_instancemethod(_TDF.TDF_Attribute_References,None,TDF_Attribute)
TDF_Attribute.DumpToString = new_instancemethod(_TDF.TDF_Attribute_DumpToString,None,TDF_Attribute)
TDF_Attribute.ExtendedDump = new_instancemethod(_TDF.TDF_Attribute_ExtendedDump,None,TDF_Attribute)
TDF_Attribute.Forget = new_instancemethod(_TDF.TDF_Attribute_Forget,None,TDF_Attribute)
TDF_Attribute._kill_pointed = new_instancemethod(_TDF.TDF_Attribute__kill_pointed,None,TDF_Attribute)
TDF_Attribute.GetHandle = new_instancemethod(_TDF.TDF_Attribute_GetHandle,None,TDF_Attribute)
TDF_Attribute_swigregister = _TDF.TDF_Attribute_swigregister
TDF_Attribute_swigregister(TDF_Attribute)

class Handle_TDF_Attribute(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_Attribute_swiginit(self,_TDF.new_Handle_TDF_Attribute(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_Attribute_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_Attribute.Nullify = new_instancemethod(_TDF.Handle_TDF_Attribute_Nullify,None,Handle_TDF_Attribute)
Handle_TDF_Attribute.IsNull = new_instancemethod(_TDF.Handle_TDF_Attribute_IsNull,None,Handle_TDF_Attribute)
Handle_TDF_Attribute.GetObject = new_instancemethod(_TDF.Handle_TDF_Attribute_GetObject,None,Handle_TDF_Attribute)
Handle_TDF_Attribute._kill_pointed = new_instancemethod(_TDF.Handle_TDF_Attribute__kill_pointed,None,Handle_TDF_Attribute)
Handle_TDF_Attribute_swigregister = _TDF.Handle_TDF_Attribute_swigregister
Handle_TDF_Attribute_swigregister(Handle_TDF_Attribute)

def Handle_TDF_Attribute_DownCast(*args):
  return _TDF.Handle_TDF_Attribute_DownCast(*args)
Handle_TDF_Attribute_DownCast = _TDF.Handle_TDF_Attribute_DownCast

class TDF_AttributeArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_TDF_Attribute &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TDF.TDF_AttributeArray1_swiginit(self,_TDF.new_TDF_AttributeArray1(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_AttributeArray1_Init(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeArray1_Destroy(self, *args)

    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_AttributeArray1_IsAllocated(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeArray1 &
        :rtype: TDF_AttributeArray1

        """
        return _TDF.TDF_AttributeArray1_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeArray1 &
        :rtype: TDF_AttributeArray1

        """
        return _TDF.TDF_AttributeArray1_Set(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_AttributeArray1_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_AttributeArray1_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_AttributeArray1_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_AttributeArray1_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeArray1_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeArray1_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeArray1.Init = new_instancemethod(_TDF.TDF_AttributeArray1_Init,None,TDF_AttributeArray1)
TDF_AttributeArray1.Destroy = new_instancemethod(_TDF.TDF_AttributeArray1_Destroy,None,TDF_AttributeArray1)
TDF_AttributeArray1.IsAllocated = new_instancemethod(_TDF.TDF_AttributeArray1_IsAllocated,None,TDF_AttributeArray1)
TDF_AttributeArray1.Assign = new_instancemethod(_TDF.TDF_AttributeArray1_Assign,None,TDF_AttributeArray1)
TDF_AttributeArray1.Set = new_instancemethod(_TDF.TDF_AttributeArray1_Set,None,TDF_AttributeArray1)
TDF_AttributeArray1.Length = new_instancemethod(_TDF.TDF_AttributeArray1_Length,None,TDF_AttributeArray1)
TDF_AttributeArray1.Lower = new_instancemethod(_TDF.TDF_AttributeArray1_Lower,None,TDF_AttributeArray1)
TDF_AttributeArray1.Upper = new_instancemethod(_TDF.TDF_AttributeArray1_Upper,None,TDF_AttributeArray1)
TDF_AttributeArray1.SetValue = new_instancemethod(_TDF.TDF_AttributeArray1_SetValue,None,TDF_AttributeArray1)
TDF_AttributeArray1.Value = new_instancemethod(_TDF.TDF_AttributeArray1_Value,None,TDF_AttributeArray1)
TDF_AttributeArray1.ChangeValue = new_instancemethod(_TDF.TDF_AttributeArray1_ChangeValue,None,TDF_AttributeArray1)
TDF_AttributeArray1._kill_pointed = new_instancemethod(_TDF.TDF_AttributeArray1__kill_pointed,None,TDF_AttributeArray1)
TDF_AttributeArray1_swigregister = _TDF.TDF_AttributeArray1_swigregister
TDF_AttributeArray1_swigregister(TDF_AttributeArray1)

class TDF_AttributeDataMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_AttributeDataMap_swiginit(self,_TDF.new_TDF_AttributeDataMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDataMap &
        :rtype: TDF_AttributeDataMap

        """
        return _TDF.TDF_AttributeDataMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDataMap &
        :rtype: TDF_AttributeDataMap

        """
        return _TDF.TDF_AttributeDataMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_AttributeDataMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeDataMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :param I:
        :type I: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDataMap_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDataMap_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDataMap_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeDataMap_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeDataMap_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Standard_Address

        """
        return _TDF.TDF_AttributeDataMap_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Standard_Address

        """
        return _TDF.TDF_AttributeDataMap_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_AttributeDataMap self)"""
        return _TDF.TDF_AttributeDataMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeDataMap.Assign = new_instancemethod(_TDF.TDF_AttributeDataMap_Assign,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.Set = new_instancemethod(_TDF.TDF_AttributeDataMap_Set,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.ReSize = new_instancemethod(_TDF.TDF_AttributeDataMap_ReSize,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.Clear = new_instancemethod(_TDF.TDF_AttributeDataMap_Clear,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.Bind = new_instancemethod(_TDF.TDF_AttributeDataMap_Bind,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.IsBound = new_instancemethod(_TDF.TDF_AttributeDataMap_IsBound,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.UnBind = new_instancemethod(_TDF.TDF_AttributeDataMap_UnBind,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.Find = new_instancemethod(_TDF.TDF_AttributeDataMap_Find,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.ChangeFind = new_instancemethod(_TDF.TDF_AttributeDataMap_ChangeFind,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.Find1 = new_instancemethod(_TDF.TDF_AttributeDataMap_Find1,None,TDF_AttributeDataMap)
TDF_AttributeDataMap.ChangeFind1 = new_instancemethod(_TDF.TDF_AttributeDataMap_ChangeFind1,None,TDF_AttributeDataMap)
TDF_AttributeDataMap._kill_pointed = new_instancemethod(_TDF.TDF_AttributeDataMap__kill_pointed,None,TDF_AttributeDataMap)
TDF_AttributeDataMap_swigregister = _TDF.TDF_AttributeDataMap_swigregister
TDF_AttributeDataMap_swigregister(TDF_AttributeDataMap)

class TDF_AttributeDelta(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Apply(self, *args):
        """
        * Applies the delta to the attribute.

        :rtype: void

        """
        return _TDF.TDF_AttributeDelta_Apply(self, *args)

    def Label(self, *args):
        """
        * Returns the label concerned by <self>.

        :rtype: TDF_Label

        """
        return _TDF.TDF_AttributeDelta_Label(self, *args)

    def Attribute(self, *args):
        """
        * Returns the reference attribute.

        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeDelta_Attribute(self, *args)

    def ID(self, *args):
        """
        * Returns the ID of the attribute concerned by <self>.

        :rtype: Standard_GUID

        """
        return _TDF.TDF_AttributeDelta_ID(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_AttributeDelta self) -> std::string"""
        return _TDF.TDF_AttributeDelta_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDF_AttributeDelta self)"""
        return _TDF.TDF_AttributeDelta__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_AttributeDelta self) -> Handle_TDF_AttributeDelta"""
        return _TDF.TDF_AttributeDelta_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeDelta.Apply = new_instancemethod(_TDF.TDF_AttributeDelta_Apply,None,TDF_AttributeDelta)
TDF_AttributeDelta.Label = new_instancemethod(_TDF.TDF_AttributeDelta_Label,None,TDF_AttributeDelta)
TDF_AttributeDelta.Attribute = new_instancemethod(_TDF.TDF_AttributeDelta_Attribute,None,TDF_AttributeDelta)
TDF_AttributeDelta.ID = new_instancemethod(_TDF.TDF_AttributeDelta_ID,None,TDF_AttributeDelta)
TDF_AttributeDelta.DumpToString = new_instancemethod(_TDF.TDF_AttributeDelta_DumpToString,None,TDF_AttributeDelta)
TDF_AttributeDelta._kill_pointed = new_instancemethod(_TDF.TDF_AttributeDelta__kill_pointed,None,TDF_AttributeDelta)
TDF_AttributeDelta.GetHandle = new_instancemethod(_TDF.TDF_AttributeDelta_GetHandle,None,TDF_AttributeDelta)
TDF_AttributeDelta_swigregister = _TDF.TDF_AttributeDelta_swigregister
TDF_AttributeDelta_swigregister(TDF_AttributeDelta)

class Handle_TDF_AttributeDelta(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_AttributeDelta_swiginit(self,_TDF.new_Handle_TDF_AttributeDelta(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_AttributeDelta_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_AttributeDelta.Nullify = new_instancemethod(_TDF.Handle_TDF_AttributeDelta_Nullify,None,Handle_TDF_AttributeDelta)
Handle_TDF_AttributeDelta.IsNull = new_instancemethod(_TDF.Handle_TDF_AttributeDelta_IsNull,None,Handle_TDF_AttributeDelta)
Handle_TDF_AttributeDelta.GetObject = new_instancemethod(_TDF.Handle_TDF_AttributeDelta_GetObject,None,Handle_TDF_AttributeDelta)
Handle_TDF_AttributeDelta._kill_pointed = new_instancemethod(_TDF.Handle_TDF_AttributeDelta__kill_pointed,None,Handle_TDF_AttributeDelta)
Handle_TDF_AttributeDelta_swigregister = _TDF.Handle_TDF_AttributeDelta_swigregister
Handle_TDF_AttributeDelta_swigregister(Handle_TDF_AttributeDelta)

def Handle_TDF_AttributeDelta_DownCast(*args):
  return _TDF.Handle_TDF_AttributeDelta_DownCast(*args)
Handle_TDF_AttributeDelta_DownCast = _TDF.Handle_TDF_AttributeDelta_DownCast

class TDF_AttributeDeltaList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_AttributeDeltaList_swiginit(self,_TDF.new_TDF_AttributeDeltaList(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_AttributeDeltaList_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_AttributeDeltaList_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :rtype: None

        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :param theIt:
        :type theIt: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :rtype: None

        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :param theIt:
        :type theIt: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDF_AttributeDelta

        """
        return _TDF.TDF_AttributeDeltaList_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDF_AttributeDelta

        """
        return _TDF.TDF_AttributeDeltaList_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :param It:
        :type It: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :param It:
        :type It: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :param It:
        :type It: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeDeltaList &
        :param It:
        :type It: TDF_ListIteratorOfAttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_AttributeDeltaList_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeDeltaList.Assign = new_instancemethod(_TDF.TDF_AttributeDeltaList_Assign,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Set = new_instancemethod(_TDF.TDF_AttributeDeltaList_Set,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Extent = new_instancemethod(_TDF.TDF_AttributeDeltaList_Extent,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Clear = new_instancemethod(_TDF.TDF_AttributeDeltaList_Clear,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.IsEmpty = new_instancemethod(_TDF.TDF_AttributeDeltaList_IsEmpty,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Prepend = new_instancemethod(_TDF.TDF_AttributeDeltaList_Prepend,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Append = new_instancemethod(_TDF.TDF_AttributeDeltaList_Append,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.First = new_instancemethod(_TDF.TDF_AttributeDeltaList_First,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Last = new_instancemethod(_TDF.TDF_AttributeDeltaList_Last,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.RemoveFirst = new_instancemethod(_TDF.TDF_AttributeDeltaList_RemoveFirst,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.Remove = new_instancemethod(_TDF.TDF_AttributeDeltaList_Remove,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.InsertBefore = new_instancemethod(_TDF.TDF_AttributeDeltaList_InsertBefore,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList.InsertAfter = new_instancemethod(_TDF.TDF_AttributeDeltaList_InsertAfter,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList._kill_pointed = new_instancemethod(_TDF.TDF_AttributeDeltaList__kill_pointed,None,TDF_AttributeDeltaList)
TDF_AttributeDeltaList_swigregister = _TDF.TDF_AttributeDeltaList_swigregister
TDF_AttributeDeltaList_swigregister(TDF_AttributeDeltaList)

class TDF_AttributeDoubleMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_AttributeDoubleMap_swiginit(self,_TDF.new_TDF_AttributeDoubleMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDoubleMap &
        :rtype: TDF_AttributeDoubleMap

        """
        return _TDF.TDF_AttributeDoubleMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeDoubleMap &
        :rtype: TDF_AttributeDoubleMap

        """
        return _TDF.TDF_AttributeDoubleMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_AttributeDoubleMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeDoubleMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K1:
        :type K1: Handle_TDF_Attribute &
        :param K2:
        :type K2: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_AttributeDoubleMap_Bind(self, *args)

    def AreBound(self, *args):
        """
        :param K1:
        :type K1: Handle_TDF_Attribute &
        :param K2:
        :type K2: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDoubleMap_AreBound(self, *args)

    def IsBound1(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDoubleMap_IsBound1(self, *args)

    def IsBound2(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDoubleMap_IsBound2(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeDoubleMap_Find1(self, *args)

    def Find2(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeDoubleMap_Find2(self, *args)

    def UnBind1(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDoubleMap_UnBind1(self, *args)

    def UnBind2(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeDoubleMap_UnBind2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_AttributeDoubleMap self)"""
        return _TDF.TDF_AttributeDoubleMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeDoubleMap.Assign = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Assign,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.Set = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Set,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.ReSize = new_instancemethod(_TDF.TDF_AttributeDoubleMap_ReSize,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.Clear = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Clear,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.Bind = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Bind,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.AreBound = new_instancemethod(_TDF.TDF_AttributeDoubleMap_AreBound,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.IsBound1 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_IsBound1,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.IsBound2 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_IsBound2,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.Find1 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Find1,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.Find2 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_Find2,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.UnBind1 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_UnBind1,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap.UnBind2 = new_instancemethod(_TDF.TDF_AttributeDoubleMap_UnBind2,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_AttributeDoubleMap__kill_pointed,None,TDF_AttributeDoubleMap)
TDF_AttributeDoubleMap_swigregister = _TDF.TDF_AttributeDoubleMap_swigregister
TDF_AttributeDoubleMap_swigregister(TDF_AttributeDoubleMap)

class TDF_AttributeIndexedMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_AttributeIndexedMap_swiginit(self,_TDF.new_TDF_AttributeIndexedMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeIndexedMap &
        :rtype: TDF_AttributeIndexedMap

        """
        return _TDF.TDF_AttributeIndexedMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeIndexedMap &
        :rtype: TDF_AttributeIndexedMap

        """
        return _TDF.TDF_AttributeIndexedMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_AttributeIndexedMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeIndexedMap_Clear(self, *args)

    def Add(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: int

        """
        return _TDF.TDF_AttributeIndexedMap_Add(self, *args)

    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_AttributeIndexedMap_Substitute(self, *args)

    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeIndexedMap_RemoveLast(self, *args)

    def Contains(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeIndexedMap_Contains(self, *args)

    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeIndexedMap_FindKey(self, *args)

    def FindIndex(self, *args):
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :rtype: int

        """
        return _TDF.TDF_AttributeIndexedMap_FindIndex(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_AttributeIndexedMap self)"""
        return _TDF.TDF_AttributeIndexedMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeIndexedMap.Assign = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Assign,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.Set = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Set,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.ReSize = new_instancemethod(_TDF.TDF_AttributeIndexedMap_ReSize,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.Clear = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Clear,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.Add = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Add,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.Substitute = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Substitute,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.RemoveLast = new_instancemethod(_TDF.TDF_AttributeIndexedMap_RemoveLast,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.Contains = new_instancemethod(_TDF.TDF_AttributeIndexedMap_Contains,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.FindKey = new_instancemethod(_TDF.TDF_AttributeIndexedMap_FindKey,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap.FindIndex = new_instancemethod(_TDF.TDF_AttributeIndexedMap_FindIndex,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap._kill_pointed = new_instancemethod(_TDF.TDF_AttributeIndexedMap__kill_pointed,None,TDF_AttributeIndexedMap)
TDF_AttributeIndexedMap_swigregister = _TDF.TDF_AttributeIndexedMap_swigregister
TDF_AttributeIndexedMap_swigregister(TDF_AttributeIndexedMap)

class TDF_AttributeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aLabel:
        :type aLabel: TDF_Label &
        :param withoutForgotten: default value is Standard_True
        :type withoutForgotten: bool
        :rtype: None

        :param aLabelNode:
        :type aLabelNode: TDF_LabelNodePtr
        :param withoutForgotten: default value is Standard_True
        :type withoutForgotten: bool
        :rtype: None

        """
        _TDF.TDF_AttributeIterator_swiginit(self,_TDF.new_TDF_AttributeIterator(*args))
    def Initialize(self, *args):
        """
        :param aLabel:
        :type aLabel: TDF_Label &
        :param withoutForgotten: default value is Standard_True
        :type withoutForgotten: bool
        :rtype: None

        """
        return _TDF.TDF_AttributeIterator_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: inline bool

        """
        return _TDF.TDF_AttributeIterator_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeIterator_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: inline TDF_Attribute *

        """
        return _TDF.TDF_AttributeIterator_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeIterator.Initialize = new_instancemethod(_TDF.TDF_AttributeIterator_Initialize,None,TDF_AttributeIterator)
TDF_AttributeIterator.More = new_instancemethod(_TDF.TDF_AttributeIterator_More,None,TDF_AttributeIterator)
TDF_AttributeIterator.Next = new_instancemethod(_TDF.TDF_AttributeIterator_Next,None,TDF_AttributeIterator)
TDF_AttributeIterator.Value = new_instancemethod(_TDF.TDF_AttributeIterator_Value,None,TDF_AttributeIterator)
TDF_AttributeIterator._kill_pointed = new_instancemethod(_TDF.TDF_AttributeIterator__kill_pointed,None,TDF_AttributeIterator)
TDF_AttributeIterator_swigregister = _TDF.TDF_AttributeIterator_swigregister
TDF_AttributeIterator_swigregister(TDF_AttributeIterator)

class TDF_AttributeList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_AttributeList_swiginit(self,_TDF.new_TDF_AttributeList(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_AttributeList_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_AttributeList_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :rtype: None

        :param I:
        :type I: Handle_TDF_Attribute &
        :param theIt:
        :type theIt: TDF_ListIteratorOfAttributeList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :rtype: None

        :param I:
        :type I: Handle_TDF_Attribute &
        :param theIt:
        :type theIt: TDF_ListIteratorOfAttributeList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeList_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeList_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeList_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TDF_ListIteratorOfAttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :param It:
        :type It: TDF_ListIteratorOfAttributeList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeList &
        :param It:
        :type It: TDF_ListIteratorOfAttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :param It:
        :type It: TDF_ListIteratorOfAttributeList &
        :rtype: None

        :param Other:
        :type Other: TDF_AttributeList &
        :param It:
        :type It: TDF_ListIteratorOfAttributeList &
        :rtype: None

        """
        return _TDF.TDF_AttributeList_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeList.Assign = new_instancemethod(_TDF.TDF_AttributeList_Assign,None,TDF_AttributeList)
TDF_AttributeList.Set = new_instancemethod(_TDF.TDF_AttributeList_Set,None,TDF_AttributeList)
TDF_AttributeList.Extent = new_instancemethod(_TDF.TDF_AttributeList_Extent,None,TDF_AttributeList)
TDF_AttributeList.Clear = new_instancemethod(_TDF.TDF_AttributeList_Clear,None,TDF_AttributeList)
TDF_AttributeList.IsEmpty = new_instancemethod(_TDF.TDF_AttributeList_IsEmpty,None,TDF_AttributeList)
TDF_AttributeList.Prepend = new_instancemethod(_TDF.TDF_AttributeList_Prepend,None,TDF_AttributeList)
TDF_AttributeList.Append = new_instancemethod(_TDF.TDF_AttributeList_Append,None,TDF_AttributeList)
TDF_AttributeList.First = new_instancemethod(_TDF.TDF_AttributeList_First,None,TDF_AttributeList)
TDF_AttributeList.Last = new_instancemethod(_TDF.TDF_AttributeList_Last,None,TDF_AttributeList)
TDF_AttributeList.RemoveFirst = new_instancemethod(_TDF.TDF_AttributeList_RemoveFirst,None,TDF_AttributeList)
TDF_AttributeList.Remove = new_instancemethod(_TDF.TDF_AttributeList_Remove,None,TDF_AttributeList)
TDF_AttributeList.InsertBefore = new_instancemethod(_TDF.TDF_AttributeList_InsertBefore,None,TDF_AttributeList)
TDF_AttributeList.InsertAfter = new_instancemethod(_TDF.TDF_AttributeList_InsertAfter,None,TDF_AttributeList)
TDF_AttributeList._kill_pointed = new_instancemethod(_TDF.TDF_AttributeList__kill_pointed,None,TDF_AttributeList)
TDF_AttributeList_swigregister = _TDF.TDF_AttributeList_swigregister
TDF_AttributeList_swigregister(TDF_AttributeList)

class TDF_AttributeMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_AttributeMap_swiginit(self,_TDF.new_TDF_AttributeMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeMap &
        :rtype: TDF_AttributeMap

        """
        return _TDF.TDF_AttributeMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeMap &
        :rtype: TDF_AttributeMap

        """
        return _TDF.TDF_AttributeMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_AttributeMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeMap_Clear(self, *args)

    def Add(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeMap_Add(self, *args)

    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeMap_Contains(self, *args)

    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_AttributeMap_Remove(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_AttributeMap self)"""
        return _TDF.TDF_AttributeMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeMap.Assign = new_instancemethod(_TDF.TDF_AttributeMap_Assign,None,TDF_AttributeMap)
TDF_AttributeMap.Set = new_instancemethod(_TDF.TDF_AttributeMap_Set,None,TDF_AttributeMap)
TDF_AttributeMap.ReSize = new_instancemethod(_TDF.TDF_AttributeMap_ReSize,None,TDF_AttributeMap)
TDF_AttributeMap.Clear = new_instancemethod(_TDF.TDF_AttributeMap_Clear,None,TDF_AttributeMap)
TDF_AttributeMap.Add = new_instancemethod(_TDF.TDF_AttributeMap_Add,None,TDF_AttributeMap)
TDF_AttributeMap.Contains = new_instancemethod(_TDF.TDF_AttributeMap_Contains,None,TDF_AttributeMap)
TDF_AttributeMap.Remove = new_instancemethod(_TDF.TDF_AttributeMap_Remove,None,TDF_AttributeMap)
TDF_AttributeMap._kill_pointed = new_instancemethod(_TDF.TDF_AttributeMap__kill_pointed,None,TDF_AttributeMap)
TDF_AttributeMap_swigregister = _TDF.TDF_AttributeMap_swigregister
TDF_AttributeMap_swigregister(TDF_AttributeMap)

class TDF_AttributeSequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_AttributeSequence_swiginit(self,_TDF.new_TDF_AttributeSequence(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeSequence &
        :rtype: TDF_AttributeSequence

        """
        return _TDF.TDF_AttributeSequence_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_AttributeSequence &
        :rtype: TDF_AttributeSequence

        """
        return _TDF.TDF_AttributeSequence_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_TDF_Attribute &
        :rtype: None

        :param S:
        :type S: TDF_AttributeSequence &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_TDF_Attribute &
        :rtype: None

        :param S:
        :type S: TDF_AttributeSequence &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDF_Attribute &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDF_AttributeSequence &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TDF_Attribute &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDF_AttributeSequence &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeSequence_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeSequence_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TDF_AttributeSequence &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeSequence_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_AttributeSequence_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TDF.TDF_AttributeSequence_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_AttributeSequence.Clear = new_instancemethod(_TDF.TDF_AttributeSequence_Clear,None,TDF_AttributeSequence)
TDF_AttributeSequence.Assign = new_instancemethod(_TDF.TDF_AttributeSequence_Assign,None,TDF_AttributeSequence)
TDF_AttributeSequence.Set = new_instancemethod(_TDF.TDF_AttributeSequence_Set,None,TDF_AttributeSequence)
TDF_AttributeSequence.Append = new_instancemethod(_TDF.TDF_AttributeSequence_Append,None,TDF_AttributeSequence)
TDF_AttributeSequence.Prepend = new_instancemethod(_TDF.TDF_AttributeSequence_Prepend,None,TDF_AttributeSequence)
TDF_AttributeSequence.InsertBefore = new_instancemethod(_TDF.TDF_AttributeSequence_InsertBefore,None,TDF_AttributeSequence)
TDF_AttributeSequence.InsertAfter = new_instancemethod(_TDF.TDF_AttributeSequence_InsertAfter,None,TDF_AttributeSequence)
TDF_AttributeSequence.First = new_instancemethod(_TDF.TDF_AttributeSequence_First,None,TDF_AttributeSequence)
TDF_AttributeSequence.Last = new_instancemethod(_TDF.TDF_AttributeSequence_Last,None,TDF_AttributeSequence)
TDF_AttributeSequence.Split = new_instancemethod(_TDF.TDF_AttributeSequence_Split,None,TDF_AttributeSequence)
TDF_AttributeSequence.Value = new_instancemethod(_TDF.TDF_AttributeSequence_Value,None,TDF_AttributeSequence)
TDF_AttributeSequence.SetValue = new_instancemethod(_TDF.TDF_AttributeSequence_SetValue,None,TDF_AttributeSequence)
TDF_AttributeSequence.ChangeValue = new_instancemethod(_TDF.TDF_AttributeSequence_ChangeValue,None,TDF_AttributeSequence)
TDF_AttributeSequence.Remove = new_instancemethod(_TDF.TDF_AttributeSequence_Remove,None,TDF_AttributeSequence)
TDF_AttributeSequence._kill_pointed = new_instancemethod(_TDF.TDF_AttributeSequence__kill_pointed,None,TDF_AttributeSequence)
TDF_AttributeSequence_swigregister = _TDF.TDF_AttributeSequence_swigregister
TDF_AttributeSequence_swigregister(TDF_AttributeSequence)

class TDF_ChildIDIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty iterator.

        :rtype: None

        * Iterates on the children of the given label. If <allLevels> option is set to true, it explores not only the first, but all the sub label levels.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param anID:
        :type anID: Standard_GUID &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        _TDF.TDF_ChildIDIterator_swiginit(self,_TDF.new_TDF_ChildIDIterator(*args))
    def Initialize(self, *args):
        """
        * Initializes the iteration on the children of the given label. If <allLevels> option is set to true, it explores not only the first, but all the sub label levels.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param anID:
        :type anID: Standard_GUID &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        return _TDF.TDF_ChildIDIterator_Initialize(self, *args)

    def More(self, *args):
        """
        * Returns True if there is a current Item in the iteration.

        :rtype: bool

        """
        return _TDF.TDF_ChildIDIterator_More(self, *args)

    def Next(self, *args):
        """
        * Move to the next Item

        :rtype: None

        """
        return _TDF.TDF_ChildIDIterator_Next(self, *args)

    def NextBrother(self, *args):
        """
        * Move to the next Brother. If there is none, go up etc. This method is interesting only with 'allLevels' behavior, because it avoids to explore the current label children.

        :rtype: None

        """
        return _TDF.TDF_ChildIDIterator_NextBrother(self, *args)

    def Value(self, *args):
        """
        * Returns the current item; a null handle if there is none.

        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_ChildIDIterator_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ChildIDIterator.Initialize = new_instancemethod(_TDF.TDF_ChildIDIterator_Initialize,None,TDF_ChildIDIterator)
TDF_ChildIDIterator.More = new_instancemethod(_TDF.TDF_ChildIDIterator_More,None,TDF_ChildIDIterator)
TDF_ChildIDIterator.Next = new_instancemethod(_TDF.TDF_ChildIDIterator_Next,None,TDF_ChildIDIterator)
TDF_ChildIDIterator.NextBrother = new_instancemethod(_TDF.TDF_ChildIDIterator_NextBrother,None,TDF_ChildIDIterator)
TDF_ChildIDIterator.Value = new_instancemethod(_TDF.TDF_ChildIDIterator_Value,None,TDF_ChildIDIterator)
TDF_ChildIDIterator._kill_pointed = new_instancemethod(_TDF.TDF_ChildIDIterator__kill_pointed,None,TDF_ChildIDIterator)
TDF_ChildIDIterator_swigregister = _TDF.TDF_ChildIDIterator_swigregister
TDF_ChildIDIterator_swigregister(TDF_ChildIDIterator)

class TDF_ChildIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty iterator object to explore the children of a label.

        :rtype: None

        * Constructs the iterator object defined by the label aLabel. Iterates on the children of the given label. If <allLevels> option is set to true, it explores not only the first, but all the sub label levels.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        _TDF.TDF_ChildIterator_swiginit(self,_TDF.new_TDF_ChildIterator(*args))
    def Initialize(self, *args):
        """
        * Initializes the iteration on the children of the given label. If <allLevels> option is set to true, it explores not only the first, but all the sub label levels. If allLevels is false, only the first level of child labels is explored. In the example below, the label is iterated using Initialize, More and Next and its child labels dumped using TDF_Tool::Entry. Example void DumpChildren(const TDF_Label& aLabel) { TDF_ChildIterator it; TCollection_AsciiString es; for (it.Initialize(aLabel,Standard_True); it.More(); it.Next()){ TDF_Tool::Entry(it.Value(),es); cout << as.ToCString() << endl; } }

        :param aLabel:
        :type aLabel: TDF_Label &
        :param allLevels: default value is Standard_False
        :type allLevels: bool
        :rtype: None

        """
        return _TDF.TDF_ChildIterator_Initialize(self, *args)

    def More(self, *args):
        """
        * Returns true if a current label is found in the iteration process.

        :rtype: bool

        """
        return _TDF.TDF_ChildIterator_More(self, *args)

    def Next(self, *args):
        """
        * Move the current iteration to the next Item.

        :rtype: None

        """
        return _TDF.TDF_ChildIterator_Next(self, *args)

    def NextBrother(self, *args):
        """
        * Moves this iteration to the next brother label. A brother label is one with the same father as an initial label. Use this function when the non-empty constructor or Initialize has allLevels set to true. The result is that the iteration does not explore the children of the current label. This method is interesting only with 'allLevels' behavior, because it avoids to explore the current label children.

        :rtype: None

        """
        return _TDF.TDF_ChildIterator_NextBrother(self, *args)

    def Value(self, *args):
        """
        * Returns the current label; or, if there is none, a null label.

        :rtype: TDF_Label

        """
        return _TDF.TDF_ChildIterator_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ChildIterator.Initialize = new_instancemethod(_TDF.TDF_ChildIterator_Initialize,None,TDF_ChildIterator)
TDF_ChildIterator.More = new_instancemethod(_TDF.TDF_ChildIterator_More,None,TDF_ChildIterator)
TDF_ChildIterator.Next = new_instancemethod(_TDF.TDF_ChildIterator_Next,None,TDF_ChildIterator)
TDF_ChildIterator.NextBrother = new_instancemethod(_TDF.TDF_ChildIterator_NextBrother,None,TDF_ChildIterator)
TDF_ChildIterator.Value = new_instancemethod(_TDF.TDF_ChildIterator_Value,None,TDF_ChildIterator)
TDF_ChildIterator._kill_pointed = new_instancemethod(_TDF.TDF_ChildIterator__kill_pointed,None,TDF_ChildIterator)
TDF_ChildIterator_swigregister = _TDF.TDF_ChildIterator_swigregister
TDF_ChildIterator_swigregister(TDF_ChildIterator)

class TDF_ClosureMode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an objet with all modes set to <aMode>.

        :param aMode: default value is Standard_True
        :type aMode: bool
        :rtype: None

        """
        _TDF.TDF_ClosureMode_swiginit(self,_TDF.new_TDF_ClosureMode(*args))
    def Descendants(self, *args):
        """
        * Sets the mode 'Descendants' to <aStatus>.  'Descendants' mode means we add to the data set the children labels of each USER GIVEN label. We do not do that with the labels found applying UpToFirstLevel option.

        :param aStatus:
        :type aStatus: bool
        :rtype: None

        * Returns true if the mode 'Descendants' is set.

        :rtype: bool

        """
        return _TDF.TDF_ClosureMode_Descendants(self, *args)

    def References(self, *args):
        """
        * Sets the mode 'References' to <aStatus>.  'References' mode means we add to the data set the descendants of an attribute, by calling the attribute method Descendants().

        :param aStatus:
        :type aStatus: bool
        :rtype: None

        * Returns true if the mode 'References' is set.

        :rtype: bool

        """
        return _TDF.TDF_ClosureMode_References(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ClosureMode.Descendants = new_instancemethod(_TDF.TDF_ClosureMode_Descendants,None,TDF_ClosureMode)
TDF_ClosureMode.References = new_instancemethod(_TDF.TDF_ClosureMode_References,None,TDF_ClosureMode)
TDF_ClosureMode._kill_pointed = new_instancemethod(_TDF.TDF_ClosureMode__kill_pointed,None,TDF_ClosureMode)
TDF_ClosureMode_swigregister = _TDF.TDF_ClosureMode_swigregister
TDF_ClosureMode_swigregister(TDF_ClosureMode)

class TDF_ClosureTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Closure(*args):
        """
        * Builds the transitive closure of label and attribute sets into <aDataSet>.

        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :rtype: void

        * Builds the transitive closure of label and attribute sets into <aDataSet>. Uses <aFilter> to determine if an attribute has to be taken in account or not. Uses <aMode> for various way of closing.

        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aMode:
        :type aMode: TDF_ClosureMode &
        :rtype: void

        * Builds the transitive closure of <aLabel>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aLabMap:
        :type aLabMap: TDF_LabelMap &
        :param anAttMap:
        :type anAttMap: TDF_AttributeMap &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aMode:
        :type aMode: TDF_ClosureMode &
        :rtype: void

        """
        return _TDF.TDF_ClosureTool_Closure(*args)

    Closure = staticmethod(Closure)
    def __init__(self): 
        _TDF.TDF_ClosureTool_swiginit(self,_TDF.new_TDF_ClosureTool())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ClosureTool._kill_pointed = new_instancemethod(_TDF.TDF_ClosureTool__kill_pointed,None,TDF_ClosureTool)
TDF_ClosureTool_swigregister = _TDF.TDF_ClosureTool_swigregister
TDF_ClosureTool_swigregister(TDF_ClosureTool)

def TDF_ClosureTool_Closure(*args):
  """
    * Builds the transitive closure of label and attribute sets into <aDataSet>.

    :param aDataSet:
    :type aDataSet: Handle_TDF_DataSet &
    :rtype: void

    * Builds the transitive closure of label and attribute sets into <aDataSet>. Uses <aFilter> to determine if an attribute has to be taken in account or not. Uses <aMode> for various way of closing.

    :param aDataSet:
    :type aDataSet: Handle_TDF_DataSet &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aMode:
    :type aMode: TDF_ClosureMode &
    :rtype: void

    * Builds the transitive closure of <aLabel>.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aLabMap:
    :type aLabMap: TDF_LabelMap &
    :param anAttMap:
    :type anAttMap: TDF_AttributeMap &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aMode:
    :type aMode: TDF_ClosureMode &
    :rtype: void

    """
  return _TDF.TDF_ClosureTool_Closure(*args)

class TDF_ComparisonTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Compare(*args):
        """
        * Compares <aSourceDataSet> with <aTargetDataSet>, updating <aRelocationTable> with labels and attributes found in both sets.

        :param aSourceDataSet:
        :type aSourceDataSet: Handle_TDF_DataSet &
        :param aTargetDataSet:
        :type aTargetDataSet: Handle_TDF_DataSet &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :rtype: void

        """
        return _TDF.TDF_ComparisonTool_Compare(*args)

    Compare = staticmethod(Compare)
    def SourceUnbound(*args):
        """
        * Finds from <aRefDataSet> all the keys not bound into <aRelocationTable> and put them into <aDiffDataSet>. Returns True if the difference contains at least one key. (A key is a source object).  <anOption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only (default value); 3 : both labels & attributes treatment.

        :param aRefDataSet:
        :type aRefDataSet: Handle_TDF_DataSet &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aDiffDataSet:
        :type aDiffDataSet: Handle_TDF_DataSet &
        :param anOption: default value is 2
        :type anOption: int
        :rtype: bool

        """
        return _TDF.TDF_ComparisonTool_SourceUnbound(*args)

    SourceUnbound = staticmethod(SourceUnbound)
    def TargetUnbound(*args):
        """
        * Substracts from <aRefDataSet> all the items bound into <aRelocationTable>. The result is put into <aDiffDataSet>. Returns True if the difference contains at least one item. (An item is a target object).  <anOption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only(default value); 3 : both labels & attributes treatment.

        :param aRefDataSet:
        :type aRefDataSet: Handle_TDF_DataSet &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aDiffDataSet:
        :type aDiffDataSet: Handle_TDF_DataSet &
        :param anOption: default value is 2
        :type anOption: int
        :rtype: bool

        """
        return _TDF.TDF_ComparisonTool_TargetUnbound(*args)

    TargetUnbound = staticmethod(TargetUnbound)
    def Cut(*args):
        """
        * Removes attributes from <aDataSet>.

        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :rtype: void

        """
        return _TDF.TDF_ComparisonTool_Cut(*args)

    Cut = staticmethod(Cut)
    def IsSelfContained(*args):
        """
        * Returns true if all the labels of <aDataSet> are descendant of <aLabel>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :rtype: bool

        """
        return _TDF.TDF_ComparisonTool_IsSelfContained(*args)

    IsSelfContained = staticmethod(IsSelfContained)
    def __init__(self): 
        _TDF.TDF_ComparisonTool_swiginit(self,_TDF.new_TDF_ComparisonTool())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ComparisonTool._kill_pointed = new_instancemethod(_TDF.TDF_ComparisonTool__kill_pointed,None,TDF_ComparisonTool)
TDF_ComparisonTool_swigregister = _TDF.TDF_ComparisonTool_swigregister
TDF_ComparisonTool_swigregister(TDF_ComparisonTool)

def TDF_ComparisonTool_Compare(*args):
  """
    * Compares <aSourceDataSet> with <aTargetDataSet>, updating <aRelocationTable> with labels and attributes found in both sets.

    :param aSourceDataSet:
    :type aSourceDataSet: Handle_TDF_DataSet &
    :param aTargetDataSet:
    :type aTargetDataSet: Handle_TDF_DataSet &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :rtype: void

    """
  return _TDF.TDF_ComparisonTool_Compare(*args)

def TDF_ComparisonTool_SourceUnbound(*args):
  """
    * Finds from <aRefDataSet> all the keys not bound into <aRelocationTable> and put them into <aDiffDataSet>. Returns True if the difference contains at least one key. (A key is a source object).  <anOption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only (default value); 3 : both labels & attributes treatment.

    :param aRefDataSet:
    :type aRefDataSet: Handle_TDF_DataSet &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aDiffDataSet:
    :type aDiffDataSet: Handle_TDF_DataSet &
    :param anOption: default value is 2
    :type anOption: int
    :rtype: bool

    """
  return _TDF.TDF_ComparisonTool_SourceUnbound(*args)

def TDF_ComparisonTool_TargetUnbound(*args):
  """
    * Substracts from <aRefDataSet> all the items bound into <aRelocationTable>. The result is put into <aDiffDataSet>. Returns True if the difference contains at least one item. (An item is a target object).  <anOption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only(default value); 3 : both labels & attributes treatment.

    :param aRefDataSet:
    :type aRefDataSet: Handle_TDF_DataSet &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aDiffDataSet:
    :type aDiffDataSet: Handle_TDF_DataSet &
    :param anOption: default value is 2
    :type anOption: int
    :rtype: bool

    """
  return _TDF.TDF_ComparisonTool_TargetUnbound(*args)

def TDF_ComparisonTool_Cut(*args):
  """
    * Removes attributes from <aDataSet>.

    :param aDataSet:
    :type aDataSet: Handle_TDF_DataSet &
    :rtype: void

    """
  return _TDF.TDF_ComparisonTool_Cut(*args)

def TDF_ComparisonTool_IsSelfContained(*args):
  """
    * Returns true if all the labels of <aDataSet> are descendant of <aLabel>.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aDataSet:
    :type aDataSet: Handle_TDF_DataSet &
    :rtype: bool

    """
  return _TDF.TDF_ComparisonTool_IsSelfContained(*args)

class TDF_CopyLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Empty constructor

        :rtype: None

        * CopyTool

        :param aSource:
        :type aSource: TDF_Label &
        :param aTarget:
        :type aTarget: TDF_Label &
        :rtype: None

        """
        _TDF.TDF_CopyLabel_swiginit(self,_TDF.new_TDF_CopyLabel(*args))
    def Load(self, *args):
        """
        * Loads src and tgt labels

        :param aSource:
        :type aSource: TDF_Label &
        :param aTarget:
        :type aTarget: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_CopyLabel_Load(self, *args)

    def UseFilter(self, *args):
        """
        * Sets filter

        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: None

        """
        return _TDF.TDF_CopyLabel_UseFilter(self, *args)

    def ExternalReferences(*args):
        """
        * Check external references and if exist fills the aExternals Map

        :param Lab:
        :type Lab: TDF_Label &
        :param aExternals:
        :type aExternals: TDF_AttributeMap &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: bool

        * Check external references and if exist fills the aExternals Map

        :param aRefLab:
        :type aRefLab: TDF_Label &
        :param Lab:
        :type Lab: TDF_Label &
        :param aExternals:
        :type aExternals: TDF_AttributeMap &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aDataSet:
        :type aDataSet: Handle_TDF_DataSet &
        :rtype: void

        """
        return _TDF.TDF_CopyLabel_ExternalReferences(*args)

    ExternalReferences = staticmethod(ExternalReferences)
    def Perform(self, *args):
        """
        * performs algorithm of selfcontained copy

        :rtype: None

        """
        return _TDF.TDF_CopyLabel_Perform(self, *args)

    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_CopyLabel_IsDone(self, *args)

    def RelocationTable(self, *args):
        """
        * returns relocation table

        :rtype: Handle_TDF_RelocationTable

        """
        return _TDF.TDF_CopyLabel_RelocationTable(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_CopyLabel.Load = new_instancemethod(_TDF.TDF_CopyLabel_Load,None,TDF_CopyLabel)
TDF_CopyLabel.UseFilter = new_instancemethod(_TDF.TDF_CopyLabel_UseFilter,None,TDF_CopyLabel)
TDF_CopyLabel.Perform = new_instancemethod(_TDF.TDF_CopyLabel_Perform,None,TDF_CopyLabel)
TDF_CopyLabel.IsDone = new_instancemethod(_TDF.TDF_CopyLabel_IsDone,None,TDF_CopyLabel)
TDF_CopyLabel.RelocationTable = new_instancemethod(_TDF.TDF_CopyLabel_RelocationTable,None,TDF_CopyLabel)
TDF_CopyLabel._kill_pointed = new_instancemethod(_TDF.TDF_CopyLabel__kill_pointed,None,TDF_CopyLabel)
TDF_CopyLabel_swigregister = _TDF.TDF_CopyLabel_swigregister
TDF_CopyLabel_swigregister(TDF_CopyLabel)

def TDF_CopyLabel_ExternalReferences(*args):
  """
    * Check external references and if exist fills the aExternals Map

    :param Lab:
    :type Lab: TDF_Label &
    :param aExternals:
    :type aExternals: TDF_AttributeMap &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :rtype: bool

    * Check external references and if exist fills the aExternals Map

    :param aRefLab:
    :type aRefLab: TDF_Label &
    :param Lab:
    :type Lab: TDF_Label &
    :param aExternals:
    :type aExternals: TDF_AttributeMap &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :param aDataSet:
    :type aDataSet: Handle_TDF_DataSet &
    :rtype: void

    """
  return _TDF.TDF_CopyLabel_ExternalReferences(*args)

class TDF_CopyTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Copy(*args):
        """
        * Copy <aSourceDataSet> with using and updating <aRelocationTable>. This method ignores target attributes privilege over source ones.

        :param aSourceDataSet:
        :type aSourceDataSet: Handle_TDF_DataSet &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :rtype: void

        * Copy <aSourceDataSet> using and updating <aRelocationTable>. Use <aPrivilegeFilter> to give a list of IDs for which the target attribute prevails over the source one.

        :param aSourceDataSet:
        :type aSourceDataSet: Handle_TDF_DataSet &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :param aPrivilegeFilter:
        :type aPrivilegeFilter: TDF_IDFilter &
        :rtype: void

        * Copy <aSourceDataSet> using and updating <aRelocationTable>. Use <aPrivilegeFilter> to give a list of IDs for which the target attribute prevails over the source one. If  <setSelfContained> is set to true, every TDF_Reference will be replaced by the referenced structure according to <aRefFilter>.  NB: <aRefFilter> is used only if <setSelfContained> is true. Internal root label copy recursive method.

        :param aSourceDataSet:
        :type aSourceDataSet: Handle_TDF_DataSet &
        :param aRelocationTable:
        :type aRelocationTable: Handle_TDF_RelocationTable &
        :param aPrivilegeFilter:
        :type aPrivilegeFilter: TDF_IDFilter &
        :param aRefFilter:
        :type aRefFilter: TDF_IDFilter &
        :param setSelfContained:
        :type setSelfContained: bool
        :rtype: void

        """
        return _TDF.TDF_CopyTool_Copy(*args)

    Copy = staticmethod(Copy)
    def __init__(self): 
        _TDF.TDF_CopyTool_swiginit(self,_TDF.new_TDF_CopyTool())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_CopyTool._kill_pointed = new_instancemethod(_TDF.TDF_CopyTool__kill_pointed,None,TDF_CopyTool)
TDF_CopyTool_swigregister = _TDF.TDF_CopyTool_swigregister
TDF_CopyTool_swigregister(TDF_CopyTool)

def TDF_CopyTool_Copy(*args):
  """
    * Copy <aSourceDataSet> with using and updating <aRelocationTable>. This method ignores target attributes privilege over source ones.

    :param aSourceDataSet:
    :type aSourceDataSet: Handle_TDF_DataSet &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :rtype: void

    * Copy <aSourceDataSet> using and updating <aRelocationTable>. Use <aPrivilegeFilter> to give a list of IDs for which the target attribute prevails over the source one.

    :param aSourceDataSet:
    :type aSourceDataSet: Handle_TDF_DataSet &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :param aPrivilegeFilter:
    :type aPrivilegeFilter: TDF_IDFilter &
    :rtype: void

    * Copy <aSourceDataSet> using and updating <aRelocationTable>. Use <aPrivilegeFilter> to give a list of IDs for which the target attribute prevails over the source one. If  <setSelfContained> is set to true, every TDF_Reference will be replaced by the referenced structure according to <aRefFilter>.  NB: <aRefFilter> is used only if <setSelfContained> is true. Internal root label copy recursive method.

    :param aSourceDataSet:
    :type aSourceDataSet: Handle_TDF_DataSet &
    :param aRelocationTable:
    :type aRelocationTable: Handle_TDF_RelocationTable &
    :param aPrivilegeFilter:
    :type aPrivilegeFilter: TDF_IDFilter &
    :param aRefFilter:
    :type aRefFilter: TDF_IDFilter &
    :param setSelfContained:
    :type setSelfContained: bool
    :rtype: void

    """
  return _TDF.TDF_CopyTool_Copy(*args)

class TDF_Data(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * A new and empty Data structure.

        :rtype: None

        """
        _TDF.TDF_Data_swiginit(self,_TDF.new_TDF_Data(*args))
    def Root(self, *args):
        """
        * Returns the root label of the Data structure.

        :rtype: TDF_Label

        """
        return _TDF.TDF_Data_Root(self, *args)

    def Transaction(self, *args):
        """
        * Returns the current transaction number.

        :rtype: int

        """
        return _TDF.TDF_Data_Transaction(self, *args)

    def Time(self, *args):
        """
        * Returns the current tick. It is incremented each Commit.

        :rtype: int

        """
        return _TDF.TDF_Data_Time(self, *args)

    def IsApplicable(self, *args):
        """
        * Returns true if <aDelta> is applicable HERE and NOW.

        :param aDelta:
        :type aDelta: Handle_TDF_Delta &
        :rtype: bool

        """
        return _TDF.TDF_Data_IsApplicable(self, *args)

    def Undo(self, *args):
        """
        * Apply <aDelta> to undo a set of attribute modifications.  Optionnal <withDelta> set to True indiquates a Delta Set must be generated. (See above)

        :param aDelta:
        :type aDelta: Handle_TDF_Delta &
        :param withDelta: default value is Standard_False
        :type withDelta: bool
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_Data_Undo(self, *args)

    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_Data_Destroy(self, *args)

    def NotUndoMode(self, *args):
        """
        * Returns the undo mode status.

        :rtype: bool

        """
        return _TDF.TDF_Data_NotUndoMode(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_Data self) -> std::string"""
        return _TDF.TDF_Data_DumpToString(self)

    def AllowModification(self, *args):
        """
        * Sets modification mode.

        :param isAllowed:
        :type isAllowed: bool
        :rtype: None

        """
        return _TDF.TDF_Data_AllowModification(self, *args)

    def IsModificationAllowed(self, *args):
        """
        * returns modification mode.

        :rtype: bool

        """
        return _TDF.TDF_Data_IsModificationAllowed(self, *args)

    def LabelNodeAllocator(self, *args):
        """
        * Returns TDF_HAllocator, which is an incremental allocator used by TDF_LabelNode. This allocator is used to manage TDF_LabelNode objects, but it can also be used for allocating memory to application-specific data (be careful because this allocator does not release the memory). The benefits of this allocation scheme are noticeable when dealing with large OCAF documents, due to: 1. Very quick allocation of objects (memory heap is not used, the algorithm that replaces it is very simple). 2. Very quick destruction of objects (memory is released not by destructors of TDF_LabelNode, but rather by the destructor of TDF_Data). 3. TDF_LabelNode objects do not fragmentize the memory; they are kept compactly in a number of arrays of 16K each. 4. Swapping is reduced on large data, because each document now occupies a smaller number of memory pages.

        :rtype: TDF_HAllocator

        """
        return _TDF.TDF_Data_LabelNodeAllocator(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_Data self)"""
        return _TDF.TDF_Data__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_Data self) -> Handle_TDF_Data"""
        return _TDF.TDF_Data_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Data.Root = new_instancemethod(_TDF.TDF_Data_Root,None,TDF_Data)
TDF_Data.Transaction = new_instancemethod(_TDF.TDF_Data_Transaction,None,TDF_Data)
TDF_Data.Time = new_instancemethod(_TDF.TDF_Data_Time,None,TDF_Data)
TDF_Data.IsApplicable = new_instancemethod(_TDF.TDF_Data_IsApplicable,None,TDF_Data)
TDF_Data.Undo = new_instancemethod(_TDF.TDF_Data_Undo,None,TDF_Data)
TDF_Data.Destroy = new_instancemethod(_TDF.TDF_Data_Destroy,None,TDF_Data)
TDF_Data.NotUndoMode = new_instancemethod(_TDF.TDF_Data_NotUndoMode,None,TDF_Data)
TDF_Data.DumpToString = new_instancemethod(_TDF.TDF_Data_DumpToString,None,TDF_Data)
TDF_Data.AllowModification = new_instancemethod(_TDF.TDF_Data_AllowModification,None,TDF_Data)
TDF_Data.IsModificationAllowed = new_instancemethod(_TDF.TDF_Data_IsModificationAllowed,None,TDF_Data)
TDF_Data.LabelNodeAllocator = new_instancemethod(_TDF.TDF_Data_LabelNodeAllocator,None,TDF_Data)
TDF_Data._kill_pointed = new_instancemethod(_TDF.TDF_Data__kill_pointed,None,TDF_Data)
TDF_Data.GetHandle = new_instancemethod(_TDF.TDF_Data_GetHandle,None,TDF_Data)
TDF_Data_swigregister = _TDF.TDF_Data_swigregister
TDF_Data_swigregister(TDF_Data)

class Handle_TDF_Data(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_Data_swiginit(self,_TDF.new_Handle_TDF_Data(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_Data_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_Data.Nullify = new_instancemethod(_TDF.Handle_TDF_Data_Nullify,None,Handle_TDF_Data)
Handle_TDF_Data.IsNull = new_instancemethod(_TDF.Handle_TDF_Data_IsNull,None,Handle_TDF_Data)
Handle_TDF_Data.GetObject = new_instancemethod(_TDF.Handle_TDF_Data_GetObject,None,Handle_TDF_Data)
Handle_TDF_Data._kill_pointed = new_instancemethod(_TDF.Handle_TDF_Data__kill_pointed,None,Handle_TDF_Data)
Handle_TDF_Data_swigregister = _TDF.Handle_TDF_Data_swigregister
Handle_TDF_Data_swigregister(Handle_TDF_Data)

def Handle_TDF_Data_DownCast(*args):
  return _TDF.Handle_TDF_Data_DownCast(*args)
Handle_TDF_Data_DownCast = _TDF.Handle_TDF_Data_DownCast

class TDF_DataMapIteratorOfAttributeDataMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_AttributeDataMap &
        :rtype: None

        """
        _TDF.TDF_DataMapIteratorOfAttributeDataMap_swiginit(self,_TDF.new_TDF_DataMapIteratorOfAttributeDataMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_AttributeDataMap &
        :rtype: None

        """
        return _TDF.TDF_DataMapIteratorOfAttributeDataMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DataMapIteratorOfAttributeDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DataMapIteratorOfAttributeDataMap_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapIteratorOfAttributeDataMap.Initialize = new_instancemethod(_TDF.TDF_DataMapIteratorOfAttributeDataMap_Initialize,None,TDF_DataMapIteratorOfAttributeDataMap)
TDF_DataMapIteratorOfAttributeDataMap.Key = new_instancemethod(_TDF.TDF_DataMapIteratorOfAttributeDataMap_Key,None,TDF_DataMapIteratorOfAttributeDataMap)
TDF_DataMapIteratorOfAttributeDataMap.Value = new_instancemethod(_TDF.TDF_DataMapIteratorOfAttributeDataMap_Value,None,TDF_DataMapIteratorOfAttributeDataMap)
TDF_DataMapIteratorOfAttributeDataMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapIteratorOfAttributeDataMap__kill_pointed,None,TDF_DataMapIteratorOfAttributeDataMap)
TDF_DataMapIteratorOfAttributeDataMap_swigregister = _TDF.TDF_DataMapIteratorOfAttributeDataMap_swigregister
TDF_DataMapIteratorOfAttributeDataMap_swigregister(TDF_DataMapIteratorOfAttributeDataMap)

class TDF_DataMapIteratorOfLabelDataMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_LabelDataMap &
        :rtype: None

        """
        _TDF.TDF_DataMapIteratorOfLabelDataMap_swiginit(self,_TDF.new_TDF_DataMapIteratorOfLabelDataMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_LabelDataMap &
        :rtype: None

        """
        return _TDF.TDF_DataMapIteratorOfLabelDataMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapIteratorOfLabelDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapIteratorOfLabelDataMap_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapIteratorOfLabelDataMap.Initialize = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelDataMap_Initialize,None,TDF_DataMapIteratorOfLabelDataMap)
TDF_DataMapIteratorOfLabelDataMap.Key = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelDataMap_Key,None,TDF_DataMapIteratorOfLabelDataMap)
TDF_DataMapIteratorOfLabelDataMap.Value = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelDataMap_Value,None,TDF_DataMapIteratorOfLabelDataMap)
TDF_DataMapIteratorOfLabelDataMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelDataMap__kill_pointed,None,TDF_DataMapIteratorOfLabelDataMap)
TDF_DataMapIteratorOfLabelDataMap_swigregister = _TDF.TDF_DataMapIteratorOfLabelDataMap_swigregister
TDF_DataMapIteratorOfLabelDataMap_swigregister(TDF_DataMapIteratorOfLabelDataMap)

class TDF_DataMapIteratorOfLabelIntegerMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_LabelIntegerMap &
        :rtype: None

        """
        _TDF.TDF_DataMapIteratorOfLabelIntegerMap_swiginit(self,_TDF.new_TDF_DataMapIteratorOfLabelIntegerMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_LabelIntegerMap &
        :rtype: None

        """
        return _TDF.TDF_DataMapIteratorOfLabelIntegerMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapIteratorOfLabelIntegerMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_DataMapIteratorOfLabelIntegerMap_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapIteratorOfLabelIntegerMap.Initialize = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelIntegerMap_Initialize,None,TDF_DataMapIteratorOfLabelIntegerMap)
TDF_DataMapIteratorOfLabelIntegerMap.Key = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelIntegerMap_Key,None,TDF_DataMapIteratorOfLabelIntegerMap)
TDF_DataMapIteratorOfLabelIntegerMap.Value = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelIntegerMap_Value,None,TDF_DataMapIteratorOfLabelIntegerMap)
TDF_DataMapIteratorOfLabelIntegerMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelIntegerMap__kill_pointed,None,TDF_DataMapIteratorOfLabelIntegerMap)
TDF_DataMapIteratorOfLabelIntegerMap_swigregister = _TDF.TDF_DataMapIteratorOfLabelIntegerMap_swigregister
TDF_DataMapIteratorOfLabelIntegerMap_swigregister(TDF_DataMapIteratorOfLabelIntegerMap)

class TDF_DataMapIteratorOfLabelLabelMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_LabelLabelMap &
        :rtype: None

        """
        _TDF.TDF_DataMapIteratorOfLabelLabelMap_swiginit(self,_TDF.new_TDF_DataMapIteratorOfLabelLabelMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_LabelLabelMap &
        :rtype: None

        """
        return _TDF.TDF_DataMapIteratorOfLabelLabelMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapIteratorOfLabelLabelMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapIteratorOfLabelLabelMap_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapIteratorOfLabelLabelMap.Initialize = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelLabelMap_Initialize,None,TDF_DataMapIteratorOfLabelLabelMap)
TDF_DataMapIteratorOfLabelLabelMap.Key = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelLabelMap_Key,None,TDF_DataMapIteratorOfLabelLabelMap)
TDF_DataMapIteratorOfLabelLabelMap.Value = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelLabelMap_Value,None,TDF_DataMapIteratorOfLabelLabelMap)
TDF_DataMapIteratorOfLabelLabelMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapIteratorOfLabelLabelMap__kill_pointed,None,TDF_DataMapIteratorOfLabelLabelMap)
TDF_DataMapIteratorOfLabelLabelMap_swigregister = _TDF.TDF_DataMapIteratorOfLabelLabelMap_swigregister
TDF_DataMapIteratorOfLabelLabelMap_swigregister(TDF_DataMapIteratorOfLabelLabelMap)

class TDF_DataMapNodeOfAttributeDataMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :param I:
        :type I: Handle_TDF_Attribute &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DataMapNodeOfAttributeDataMap_swiginit(self,_TDF.new_TDF_DataMapNodeOfAttributeDataMap(*args))
    def Key(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DataMapNodeOfAttributeDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DataMapNodeOfAttributeDataMap_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DataMapNodeOfAttributeDataMap self)"""
        return _TDF.TDF_DataMapNodeOfAttributeDataMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DataMapNodeOfAttributeDataMap self) -> Handle_TDF_DataMapNodeOfAttributeDataMap"""
        return _TDF.TDF_DataMapNodeOfAttributeDataMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapNodeOfAttributeDataMap.Key = new_instancemethod(_TDF.TDF_DataMapNodeOfAttributeDataMap_Key,None,TDF_DataMapNodeOfAttributeDataMap)
TDF_DataMapNodeOfAttributeDataMap.Value = new_instancemethod(_TDF.TDF_DataMapNodeOfAttributeDataMap_Value,None,TDF_DataMapNodeOfAttributeDataMap)
TDF_DataMapNodeOfAttributeDataMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapNodeOfAttributeDataMap__kill_pointed,None,TDF_DataMapNodeOfAttributeDataMap)
TDF_DataMapNodeOfAttributeDataMap.GetHandle = new_instancemethod(_TDF.TDF_DataMapNodeOfAttributeDataMap_GetHandle,None,TDF_DataMapNodeOfAttributeDataMap)
TDF_DataMapNodeOfAttributeDataMap_swigregister = _TDF.TDF_DataMapNodeOfAttributeDataMap_swigregister
TDF_DataMapNodeOfAttributeDataMap_swigregister(TDF_DataMapNodeOfAttributeDataMap)

class Handle_TDF_DataMapNodeOfAttributeDataMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_swiginit(self,_TDF.new_Handle_TDF_DataMapNodeOfAttributeDataMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DataMapNodeOfAttributeDataMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_Nullify,None,Handle_TDF_DataMapNodeOfAttributeDataMap)
Handle_TDF_DataMapNodeOfAttributeDataMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_IsNull,None,Handle_TDF_DataMapNodeOfAttributeDataMap)
Handle_TDF_DataMapNodeOfAttributeDataMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_GetObject,None,Handle_TDF_DataMapNodeOfAttributeDataMap)
Handle_TDF_DataMapNodeOfAttributeDataMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfAttributeDataMap__kill_pointed,None,Handle_TDF_DataMapNodeOfAttributeDataMap)
Handle_TDF_DataMapNodeOfAttributeDataMap_swigregister = _TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_swigregister
Handle_TDF_DataMapNodeOfAttributeDataMap_swigregister(Handle_TDF_DataMapNodeOfAttributeDataMap)

def Handle_TDF_DataMapNodeOfAttributeDataMap_DownCast(*args):
  return _TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_DownCast(*args)
Handle_TDF_DataMapNodeOfAttributeDataMap_DownCast = _TDF.Handle_TDF_DataMapNodeOfAttributeDataMap_DownCast

class TDF_DataMapNodeOfLabelDataMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_Label &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DataMapNodeOfLabelDataMap_swiginit(self,_TDF.new_TDF_DataMapNodeOfLabelDataMap(*args))
    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapNodeOfLabelDataMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapNodeOfLabelDataMap_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DataMapNodeOfLabelDataMap self)"""
        return _TDF.TDF_DataMapNodeOfLabelDataMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DataMapNodeOfLabelDataMap self) -> Handle_TDF_DataMapNodeOfLabelDataMap"""
        return _TDF.TDF_DataMapNodeOfLabelDataMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapNodeOfLabelDataMap.Key = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelDataMap_Key,None,TDF_DataMapNodeOfLabelDataMap)
TDF_DataMapNodeOfLabelDataMap.Value = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelDataMap_Value,None,TDF_DataMapNodeOfLabelDataMap)
TDF_DataMapNodeOfLabelDataMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelDataMap__kill_pointed,None,TDF_DataMapNodeOfLabelDataMap)
TDF_DataMapNodeOfLabelDataMap.GetHandle = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelDataMap_GetHandle,None,TDF_DataMapNodeOfLabelDataMap)
TDF_DataMapNodeOfLabelDataMap_swigregister = _TDF.TDF_DataMapNodeOfLabelDataMap_swigregister
TDF_DataMapNodeOfLabelDataMap_swigregister(TDF_DataMapNodeOfLabelDataMap)

class Handle_TDF_DataMapNodeOfLabelDataMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DataMapNodeOfLabelDataMap_swiginit(self,_TDF.new_Handle_TDF_DataMapNodeOfLabelDataMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DataMapNodeOfLabelDataMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DataMapNodeOfLabelDataMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelDataMap_Nullify,None,Handle_TDF_DataMapNodeOfLabelDataMap)
Handle_TDF_DataMapNodeOfLabelDataMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelDataMap_IsNull,None,Handle_TDF_DataMapNodeOfLabelDataMap)
Handle_TDF_DataMapNodeOfLabelDataMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelDataMap_GetObject,None,Handle_TDF_DataMapNodeOfLabelDataMap)
Handle_TDF_DataMapNodeOfLabelDataMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelDataMap__kill_pointed,None,Handle_TDF_DataMapNodeOfLabelDataMap)
Handle_TDF_DataMapNodeOfLabelDataMap_swigregister = _TDF.Handle_TDF_DataMapNodeOfLabelDataMap_swigregister
Handle_TDF_DataMapNodeOfLabelDataMap_swigregister(Handle_TDF_DataMapNodeOfLabelDataMap)

def Handle_TDF_DataMapNodeOfLabelDataMap_DownCast(*args):
  return _TDF.Handle_TDF_DataMapNodeOfLabelDataMap_DownCast(*args)
Handle_TDF_DataMapNodeOfLabelDataMap_DownCast = _TDF.Handle_TDF_DataMapNodeOfLabelDataMap_DownCast

class TDF_DataMapNodeOfLabelIntegerMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DataMapNodeOfLabelIntegerMap_swiginit(self,_TDF.new_TDF_DataMapNodeOfLabelIntegerMap(*args))
    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapNodeOfLabelIntegerMap_Key(self, *args)

    def GetValue(self):
        """GetValue(TDF_DataMapNodeOfLabelIntegerMap self) -> Standard_Integer"""
        return _TDF.TDF_DataMapNodeOfLabelIntegerMap_GetValue(self)

    def SetValue(self, *args):
        """SetValue(TDF_DataMapNodeOfLabelIntegerMap self, Standard_Integer value)"""
        return _TDF.TDF_DataMapNodeOfLabelIntegerMap_SetValue(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DataMapNodeOfLabelIntegerMap self)"""
        return _TDF.TDF_DataMapNodeOfLabelIntegerMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DataMapNodeOfLabelIntegerMap self) -> Handle_TDF_DataMapNodeOfLabelIntegerMap"""
        return _TDF.TDF_DataMapNodeOfLabelIntegerMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapNodeOfLabelIntegerMap.Key = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelIntegerMap_Key,None,TDF_DataMapNodeOfLabelIntegerMap)
TDF_DataMapNodeOfLabelIntegerMap.GetValue = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelIntegerMap_GetValue,None,TDF_DataMapNodeOfLabelIntegerMap)
TDF_DataMapNodeOfLabelIntegerMap.SetValue = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelIntegerMap_SetValue,None,TDF_DataMapNodeOfLabelIntegerMap)
TDF_DataMapNodeOfLabelIntegerMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelIntegerMap__kill_pointed,None,TDF_DataMapNodeOfLabelIntegerMap)
TDF_DataMapNodeOfLabelIntegerMap.GetHandle = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelIntegerMap_GetHandle,None,TDF_DataMapNodeOfLabelIntegerMap)
TDF_DataMapNodeOfLabelIntegerMap_swigregister = _TDF.TDF_DataMapNodeOfLabelIntegerMap_swigregister
TDF_DataMapNodeOfLabelIntegerMap_swigregister(TDF_DataMapNodeOfLabelIntegerMap)

class Handle_TDF_DataMapNodeOfLabelIntegerMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_swiginit(self,_TDF.new_Handle_TDF_DataMapNodeOfLabelIntegerMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DataMapNodeOfLabelIntegerMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_Nullify,None,Handle_TDF_DataMapNodeOfLabelIntegerMap)
Handle_TDF_DataMapNodeOfLabelIntegerMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_IsNull,None,Handle_TDF_DataMapNodeOfLabelIntegerMap)
Handle_TDF_DataMapNodeOfLabelIntegerMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_GetObject,None,Handle_TDF_DataMapNodeOfLabelIntegerMap)
Handle_TDF_DataMapNodeOfLabelIntegerMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap__kill_pointed,None,Handle_TDF_DataMapNodeOfLabelIntegerMap)
Handle_TDF_DataMapNodeOfLabelIntegerMap_swigregister = _TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_swigregister
Handle_TDF_DataMapNodeOfLabelIntegerMap_swigregister(Handle_TDF_DataMapNodeOfLabelIntegerMap)

def Handle_TDF_DataMapNodeOfLabelIntegerMap_DownCast(*args):
  return _TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_DownCast(*args)
Handle_TDF_DataMapNodeOfLabelIntegerMap_DownCast = _TDF.Handle_TDF_DataMapNodeOfLabelIntegerMap_DownCast

class TDF_DataMapNodeOfLabelLabelMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_Label &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DataMapNodeOfLabelLabelMap_swiginit(self,_TDF.new_TDF_DataMapNodeOfLabelLabelMap(*args))
    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapNodeOfLabelLabelMap_Key(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DataMapNodeOfLabelLabelMap_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DataMapNodeOfLabelLabelMap self)"""
        return _TDF.TDF_DataMapNodeOfLabelLabelMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DataMapNodeOfLabelLabelMap self) -> Handle_TDF_DataMapNodeOfLabelLabelMap"""
        return _TDF.TDF_DataMapNodeOfLabelLabelMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataMapNodeOfLabelLabelMap.Key = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelLabelMap_Key,None,TDF_DataMapNodeOfLabelLabelMap)
TDF_DataMapNodeOfLabelLabelMap.Value = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelLabelMap_Value,None,TDF_DataMapNodeOfLabelLabelMap)
TDF_DataMapNodeOfLabelLabelMap._kill_pointed = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelLabelMap__kill_pointed,None,TDF_DataMapNodeOfLabelLabelMap)
TDF_DataMapNodeOfLabelLabelMap.GetHandle = new_instancemethod(_TDF.TDF_DataMapNodeOfLabelLabelMap_GetHandle,None,TDF_DataMapNodeOfLabelLabelMap)
TDF_DataMapNodeOfLabelLabelMap_swigregister = _TDF.TDF_DataMapNodeOfLabelLabelMap_swigregister
TDF_DataMapNodeOfLabelLabelMap_swigregister(TDF_DataMapNodeOfLabelLabelMap)

class Handle_TDF_DataMapNodeOfLabelLabelMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_swiginit(self,_TDF.new_Handle_TDF_DataMapNodeOfLabelLabelMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DataMapNodeOfLabelLabelMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_Nullify,None,Handle_TDF_DataMapNodeOfLabelLabelMap)
Handle_TDF_DataMapNodeOfLabelLabelMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_IsNull,None,Handle_TDF_DataMapNodeOfLabelLabelMap)
Handle_TDF_DataMapNodeOfLabelLabelMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_GetObject,None,Handle_TDF_DataMapNodeOfLabelLabelMap)
Handle_TDF_DataMapNodeOfLabelLabelMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DataMapNodeOfLabelLabelMap__kill_pointed,None,Handle_TDF_DataMapNodeOfLabelLabelMap)
Handle_TDF_DataMapNodeOfLabelLabelMap_swigregister = _TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_swigregister
Handle_TDF_DataMapNodeOfLabelLabelMap_swigregister(Handle_TDF_DataMapNodeOfLabelLabelMap)

def Handle_TDF_DataMapNodeOfLabelLabelMap_DownCast(*args):
  return _TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_DownCast(*args)
Handle_TDF_DataMapNodeOfLabelLabelMap_DownCast = _TDF.Handle_TDF_DataMapNodeOfLabelLabelMap_DownCast

class TDF_DataSet(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty DataSet object.

        :rtype: None

        """
        _TDF.TDF_DataSet_swiginit(self,_TDF.new_TDF_DataSet(*args))
    def Clear(self, *args):
        """
        * Clears all information.

        :rtype: None

        """
        return _TDF.TDF_DataSet_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        * Returns true if there is at least one label or one attribute.

        :rtype: bool

        """
        return _TDF.TDF_DataSet_IsEmpty(self, *args)

    def AddLabel(self, *args):
        """
        * Adds <aLabel> in the current data set.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_DataSet_AddLabel(self, *args)

    def ContainsLabel(self, *args):
        """
        * Returns true if the label <alabel> is in the data set.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_DataSet_ContainsLabel(self, *args)

    def Labels(self, *args):
        """
        * Returns the map of labels in this data set. This map can be used directly, or updated.

        :rtype: TDF_LabelMap

        """
        return _TDF.TDF_DataSet_Labels(self, *args)

    def AddAttribute(self, *args):
        """
        * Adds <anAttribute> into the current data set.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_DataSet_AddAttribute(self, *args)

    def ContainsAttribute(self, *args):
        """
        * Returns true if <anAttribute> is in the data set.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_DataSet_ContainsAttribute(self, *args)

    def Attributes(self, *args):
        """
        * Returns the map of attributes in the current data set. This map can be used directly, or updated.

        :rtype: TDF_AttributeMap

        """
        return _TDF.TDF_DataSet_Attributes(self, *args)

    def AddRoot(self, *args):
        """
        * Adds a root label to <myRootLabels>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_DataSet_AddRoot(self, *args)

    def Roots(self, *args):
        """
        * Returns <myRootLabels> to be used or updated.

        :rtype: TDF_LabelList

        """
        return _TDF.TDF_DataSet_Roots(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_DataSet self) -> std::string"""
        return _TDF.TDF_DataSet_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DataSet self)"""
        return _TDF.TDF_DataSet__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DataSet self) -> Handle_TDF_DataSet"""
        return _TDF.TDF_DataSet_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DataSet.Clear = new_instancemethod(_TDF.TDF_DataSet_Clear,None,TDF_DataSet)
TDF_DataSet.IsEmpty = new_instancemethod(_TDF.TDF_DataSet_IsEmpty,None,TDF_DataSet)
TDF_DataSet.AddLabel = new_instancemethod(_TDF.TDF_DataSet_AddLabel,None,TDF_DataSet)
TDF_DataSet.ContainsLabel = new_instancemethod(_TDF.TDF_DataSet_ContainsLabel,None,TDF_DataSet)
TDF_DataSet.Labels = new_instancemethod(_TDF.TDF_DataSet_Labels,None,TDF_DataSet)
TDF_DataSet.AddAttribute = new_instancemethod(_TDF.TDF_DataSet_AddAttribute,None,TDF_DataSet)
TDF_DataSet.ContainsAttribute = new_instancemethod(_TDF.TDF_DataSet_ContainsAttribute,None,TDF_DataSet)
TDF_DataSet.Attributes = new_instancemethod(_TDF.TDF_DataSet_Attributes,None,TDF_DataSet)
TDF_DataSet.AddRoot = new_instancemethod(_TDF.TDF_DataSet_AddRoot,None,TDF_DataSet)
TDF_DataSet.Roots = new_instancemethod(_TDF.TDF_DataSet_Roots,None,TDF_DataSet)
TDF_DataSet.DumpToString = new_instancemethod(_TDF.TDF_DataSet_DumpToString,None,TDF_DataSet)
TDF_DataSet._kill_pointed = new_instancemethod(_TDF.TDF_DataSet__kill_pointed,None,TDF_DataSet)
TDF_DataSet.GetHandle = new_instancemethod(_TDF.TDF_DataSet_GetHandle,None,TDF_DataSet)
TDF_DataSet_swigregister = _TDF.TDF_DataSet_swigregister
TDF_DataSet_swigregister(TDF_DataSet)

class Handle_TDF_DataSet(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DataSet_swiginit(self,_TDF.new_Handle_TDF_DataSet(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DataSet_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DataSet.Nullify = new_instancemethod(_TDF.Handle_TDF_DataSet_Nullify,None,Handle_TDF_DataSet)
Handle_TDF_DataSet.IsNull = new_instancemethod(_TDF.Handle_TDF_DataSet_IsNull,None,Handle_TDF_DataSet)
Handle_TDF_DataSet.GetObject = new_instancemethod(_TDF.Handle_TDF_DataSet_GetObject,None,Handle_TDF_DataSet)
Handle_TDF_DataSet._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DataSet__kill_pointed,None,Handle_TDF_DataSet)
Handle_TDF_DataSet_swigregister = _TDF.Handle_TDF_DataSet_swigregister
Handle_TDF_DataSet_swigregister(Handle_TDF_DataSet)

def Handle_TDF_DataSet_DownCast(*args):
  return _TDF.Handle_TDF_DataSet_DownCast(*args)
Handle_TDF_DataSet_DownCast = _TDF.Handle_TDF_DataSet_DownCast

class TDF_Delta(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a delta.

        :rtype: None

        """
        _TDF.TDF_Delta_swiginit(self,_TDF.new_TDF_Delta(*args))
    def IsEmpty(self, *args):
        """
        * Returns true if there is nothing to undo.

        :rtype: bool

        """
        return _TDF.TDF_Delta_IsEmpty(self, *args)

    def IsApplicable(self, *args):
        """
        * Returns true if the Undo action of <self> is applicable at <aCurrentTime>.

        :param aCurrentTime:
        :type aCurrentTime: int
        :rtype: bool

        """
        return _TDF.TDF_Delta_IsApplicable(self, *args)

    def BeginTime(self, *args):
        """
        * Returns the field <myBeginTime>.

        :rtype: int

        """
        return _TDF.TDF_Delta_BeginTime(self, *args)

    def EndTime(self, *args):
        """
        * Returns the field <myEndTime>.

        :rtype: int

        """
        return _TDF.TDF_Delta_EndTime(self, *args)

    def Labels(self, *args):
        """
        * Adds in <aLabelList> the labels of the attribute deltas. Caution: <aLabelList> is not cleared before use.

        :param aLabelList:
        :type aLabelList: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_Delta_Labels(self, *args)

    def AttributeDeltas(self, *args):
        """
        * Returns the field <myAttDeltaList>.

        :rtype: TDF_AttributeDeltaList

        """
        return _TDF.TDF_Delta_AttributeDeltas(self, *args)

    def Name(self, *args):
        """
        * Returns a name associated with this delta.

        :rtype: TCollection_ExtendedString

        """
        return _TDF.TDF_Delta_Name(self, *args)

    def SetName(self, *args):
        """
        * Associates a name <theName> with this delta

        :param theName:
        :type theName: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDF.TDF_Delta_SetName(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_Delta self) -> std::string"""
        return _TDF.TDF_Delta_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDF_Delta self)"""
        return _TDF.TDF_Delta__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_Delta self) -> Handle_TDF_Delta"""
        return _TDF.TDF_Delta_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Delta.IsEmpty = new_instancemethod(_TDF.TDF_Delta_IsEmpty,None,TDF_Delta)
TDF_Delta.IsApplicable = new_instancemethod(_TDF.TDF_Delta_IsApplicable,None,TDF_Delta)
TDF_Delta.BeginTime = new_instancemethod(_TDF.TDF_Delta_BeginTime,None,TDF_Delta)
TDF_Delta.EndTime = new_instancemethod(_TDF.TDF_Delta_EndTime,None,TDF_Delta)
TDF_Delta.Labels = new_instancemethod(_TDF.TDF_Delta_Labels,None,TDF_Delta)
TDF_Delta.AttributeDeltas = new_instancemethod(_TDF.TDF_Delta_AttributeDeltas,None,TDF_Delta)
TDF_Delta.Name = new_instancemethod(_TDF.TDF_Delta_Name,None,TDF_Delta)
TDF_Delta.SetName = new_instancemethod(_TDF.TDF_Delta_SetName,None,TDF_Delta)
TDF_Delta.DumpToString = new_instancemethod(_TDF.TDF_Delta_DumpToString,None,TDF_Delta)
TDF_Delta._kill_pointed = new_instancemethod(_TDF.TDF_Delta__kill_pointed,None,TDF_Delta)
TDF_Delta.GetHandle = new_instancemethod(_TDF.TDF_Delta_GetHandle,None,TDF_Delta)
TDF_Delta_swigregister = _TDF.TDF_Delta_swigregister
TDF_Delta_swigregister(TDF_Delta)

class Handle_TDF_Delta(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_Delta_swiginit(self,_TDF.new_Handle_TDF_Delta(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_Delta_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_Delta.Nullify = new_instancemethod(_TDF.Handle_TDF_Delta_Nullify,None,Handle_TDF_Delta)
Handle_TDF_Delta.IsNull = new_instancemethod(_TDF.Handle_TDF_Delta_IsNull,None,Handle_TDF_Delta)
Handle_TDF_Delta.GetObject = new_instancemethod(_TDF.Handle_TDF_Delta_GetObject,None,Handle_TDF_Delta)
Handle_TDF_Delta._kill_pointed = new_instancemethod(_TDF.Handle_TDF_Delta__kill_pointed,None,Handle_TDF_Delta)
Handle_TDF_Delta_swigregister = _TDF.Handle_TDF_Delta_swigregister
Handle_TDF_Delta_swigregister(Handle_TDF_Delta)

def Handle_TDF_Delta_DownCast(*args):
  return _TDF.Handle_TDF_Delta_DownCast(*args)
Handle_TDF_Delta_DownCast = _TDF.Handle_TDF_Delta_DownCast

class TDF_DeltaList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_DeltaList_swiginit(self,_TDF.new_TDF_DeltaList(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_DeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_DeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_DeltaList_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_DeltaList_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Delta &
        :rtype: None

        :param I:
        :type I: Handle_TDF_Delta &
        :param theIt:
        :type theIt: TDF_ListIteratorOfDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_DeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Delta &
        :rtype: None

        :param I:
        :type I: Handle_TDF_Delta &
        :param theIt:
        :type theIt: TDF_ListIteratorOfDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_DeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_DeltaList_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_DeltaList_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_DeltaList_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TDF_ListIteratorOfDeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Delta &
        :param It:
        :type It: TDF_ListIteratorOfDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_DeltaList &
        :param It:
        :type It: TDF_ListIteratorOfDeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_TDF_Delta &
        :param It:
        :type It: TDF_ListIteratorOfDeltaList &
        :rtype: None

        :param Other:
        :type Other: TDF_DeltaList &
        :param It:
        :type It: TDF_ListIteratorOfDeltaList &
        :rtype: None

        """
        return _TDF.TDF_DeltaList_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaList.Assign = new_instancemethod(_TDF.TDF_DeltaList_Assign,None,TDF_DeltaList)
TDF_DeltaList.Set = new_instancemethod(_TDF.TDF_DeltaList_Set,None,TDF_DeltaList)
TDF_DeltaList.Extent = new_instancemethod(_TDF.TDF_DeltaList_Extent,None,TDF_DeltaList)
TDF_DeltaList.Clear = new_instancemethod(_TDF.TDF_DeltaList_Clear,None,TDF_DeltaList)
TDF_DeltaList.IsEmpty = new_instancemethod(_TDF.TDF_DeltaList_IsEmpty,None,TDF_DeltaList)
TDF_DeltaList.Prepend = new_instancemethod(_TDF.TDF_DeltaList_Prepend,None,TDF_DeltaList)
TDF_DeltaList.Append = new_instancemethod(_TDF.TDF_DeltaList_Append,None,TDF_DeltaList)
TDF_DeltaList.First = new_instancemethod(_TDF.TDF_DeltaList_First,None,TDF_DeltaList)
TDF_DeltaList.Last = new_instancemethod(_TDF.TDF_DeltaList_Last,None,TDF_DeltaList)
TDF_DeltaList.RemoveFirst = new_instancemethod(_TDF.TDF_DeltaList_RemoveFirst,None,TDF_DeltaList)
TDF_DeltaList.Remove = new_instancemethod(_TDF.TDF_DeltaList_Remove,None,TDF_DeltaList)
TDF_DeltaList.InsertBefore = new_instancemethod(_TDF.TDF_DeltaList_InsertBefore,None,TDF_DeltaList)
TDF_DeltaList.InsertAfter = new_instancemethod(_TDF.TDF_DeltaList_InsertAfter,None,TDF_DeltaList)
TDF_DeltaList._kill_pointed = new_instancemethod(_TDF.TDF_DeltaList__kill_pointed,None,TDF_DeltaList)
TDF_DeltaList_swigregister = _TDF.TDF_DeltaList_swigregister
TDF_DeltaList_swigregister(TDF_DeltaList)

class TDF_DoubleMapIteratorOfAttributeDoubleMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_AttributeDoubleMap &
        :rtype: None

        """
        _TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_swiginit(self,_TDF.new_TDF_DoubleMapIteratorOfAttributeDoubleMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_AttributeDoubleMap &
        :rtype: None

        """
        return _TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Initialize(self, *args)

    def Key1(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Key2(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapIteratorOfAttributeDoubleMap.Initialize = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Initialize,None,TDF_DoubleMapIteratorOfAttributeDoubleMap)
TDF_DoubleMapIteratorOfAttributeDoubleMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Key1,None,TDF_DoubleMapIteratorOfAttributeDoubleMap)
TDF_DoubleMapIteratorOfAttributeDoubleMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_Key2,None,TDF_DoubleMapIteratorOfAttributeDoubleMap)
TDF_DoubleMapIteratorOfAttributeDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap__kill_pointed,None,TDF_DoubleMapIteratorOfAttributeDoubleMap)
TDF_DoubleMapIteratorOfAttributeDoubleMap_swigregister = _TDF.TDF_DoubleMapIteratorOfAttributeDoubleMap_swigregister
TDF_DoubleMapIteratorOfAttributeDoubleMap_swigregister(TDF_DoubleMapIteratorOfAttributeDoubleMap)

class TDF_DoubleMapIteratorOfGUIDProgIDMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_GUIDProgIDMap &
        :rtype: None

        """
        _TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_swiginit(self,_TDF.new_TDF_DoubleMapIteratorOfGUIDProgIDMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_GUIDProgIDMap &
        :rtype: None

        """
        return _TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Initialize(self, *args)

    def Key1(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Key2(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapIteratorOfGUIDProgIDMap.Initialize = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Initialize,None,TDF_DoubleMapIteratorOfGUIDProgIDMap)
TDF_DoubleMapIteratorOfGUIDProgIDMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Key1,None,TDF_DoubleMapIteratorOfGUIDProgIDMap)
TDF_DoubleMapIteratorOfGUIDProgIDMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_Key2,None,TDF_DoubleMapIteratorOfGUIDProgIDMap)
TDF_DoubleMapIteratorOfGUIDProgIDMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap__kill_pointed,None,TDF_DoubleMapIteratorOfGUIDProgIDMap)
TDF_DoubleMapIteratorOfGUIDProgIDMap_swigregister = _TDF.TDF_DoubleMapIteratorOfGUIDProgIDMap_swigregister
TDF_DoubleMapIteratorOfGUIDProgIDMap_swigregister(TDF_DoubleMapIteratorOfGUIDProgIDMap)

class TDF_DoubleMapIteratorOfLabelDoubleMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_LabelDoubleMap &
        :rtype: None

        """
        _TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_swiginit(self,_TDF.new_TDF_DoubleMapIteratorOfLabelDoubleMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_LabelDoubleMap &
        :rtype: None

        """
        return _TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Initialize(self, *args)

    def Key1(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Key2(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapIteratorOfLabelDoubleMap.Initialize = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Initialize,None,TDF_DoubleMapIteratorOfLabelDoubleMap)
TDF_DoubleMapIteratorOfLabelDoubleMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Key1,None,TDF_DoubleMapIteratorOfLabelDoubleMap)
TDF_DoubleMapIteratorOfLabelDoubleMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_Key2,None,TDF_DoubleMapIteratorOfLabelDoubleMap)
TDF_DoubleMapIteratorOfLabelDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapIteratorOfLabelDoubleMap__kill_pointed,None,TDF_DoubleMapIteratorOfLabelDoubleMap)
TDF_DoubleMapIteratorOfLabelDoubleMap_swigregister = _TDF.TDF_DoubleMapIteratorOfLabelDoubleMap_swigregister
TDF_DoubleMapIteratorOfLabelDoubleMap_swigregister(TDF_DoubleMapIteratorOfLabelDoubleMap)

class TDF_DoubleMapNodeOfAttributeDoubleMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: Handle_TDF_Attribute &
        :param K2:
        :type K2: Handle_TDF_Attribute &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_swiginit(self,_TDF.new_TDF_DoubleMapNodeOfAttributeDoubleMap(*args))
    def Key1(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Key2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DoubleMapNodeOfAttributeDoubleMap self)"""
        return _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DoubleMapNodeOfAttributeDoubleMap self) -> Handle_TDF_DoubleMapNodeOfAttributeDoubleMap"""
        return _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapNodeOfAttributeDoubleMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Key1,None,TDF_DoubleMapNodeOfAttributeDoubleMap)
TDF_DoubleMapNodeOfAttributeDoubleMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Key2,None,TDF_DoubleMapNodeOfAttributeDoubleMap)
TDF_DoubleMapNodeOfAttributeDoubleMap.Next2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_Next2,None,TDF_DoubleMapNodeOfAttributeDoubleMap)
TDF_DoubleMapNodeOfAttributeDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapNodeOfAttributeDoubleMap__kill_pointed,None,TDF_DoubleMapNodeOfAttributeDoubleMap)
TDF_DoubleMapNodeOfAttributeDoubleMap.GetHandle = new_instancemethod(_TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_GetHandle,None,TDF_DoubleMapNodeOfAttributeDoubleMap)
TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister = _TDF.TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister
TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister(TDF_DoubleMapNodeOfAttributeDoubleMap)

class Handle_TDF_DoubleMapNodeOfAttributeDoubleMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_swiginit(self,_TDF.new_Handle_TDF_DoubleMapNodeOfAttributeDoubleMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DoubleMapNodeOfAttributeDoubleMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_Nullify,None,Handle_TDF_DoubleMapNodeOfAttributeDoubleMap)
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_IsNull,None,Handle_TDF_DoubleMapNodeOfAttributeDoubleMap)
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_GetObject,None,Handle_TDF_DoubleMapNodeOfAttributeDoubleMap)
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap__kill_pointed,None,Handle_TDF_DoubleMapNodeOfAttributeDoubleMap)
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister = _TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_swigregister(Handle_TDF_DoubleMapNodeOfAttributeDoubleMap)

def Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_DownCast(*args):
  return _TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_DownCast(*args)
Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_DownCast = _TDF.Handle_TDF_DoubleMapNodeOfAttributeDoubleMap_DownCast

class TDF_DoubleMapNodeOfGUIDProgIDMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: Standard_GUID &
        :param K2:
        :type K2: TCollection_ExtendedString &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_swiginit(self,_TDF.new_TDF_DoubleMapNodeOfGUIDProgIDMap(*args))
    def Key1(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: TCollection_ExtendedString

        """
        return _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Key2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DoubleMapNodeOfGUIDProgIDMap self)"""
        return _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DoubleMapNodeOfGUIDProgIDMap self) -> Handle_TDF_DoubleMapNodeOfGUIDProgIDMap"""
        return _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapNodeOfGUIDProgIDMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Key1,None,TDF_DoubleMapNodeOfGUIDProgIDMap)
TDF_DoubleMapNodeOfGUIDProgIDMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Key2,None,TDF_DoubleMapNodeOfGUIDProgIDMap)
TDF_DoubleMapNodeOfGUIDProgIDMap.Next2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_Next2,None,TDF_DoubleMapNodeOfGUIDProgIDMap)
TDF_DoubleMapNodeOfGUIDProgIDMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapNodeOfGUIDProgIDMap__kill_pointed,None,TDF_DoubleMapNodeOfGUIDProgIDMap)
TDF_DoubleMapNodeOfGUIDProgIDMap.GetHandle = new_instancemethod(_TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_GetHandle,None,TDF_DoubleMapNodeOfGUIDProgIDMap)
TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister = _TDF.TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister
TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister(TDF_DoubleMapNodeOfGUIDProgIDMap)

class Handle_TDF_DoubleMapNodeOfGUIDProgIDMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_swiginit(self,_TDF.new_Handle_TDF_DoubleMapNodeOfGUIDProgIDMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DoubleMapNodeOfGUIDProgIDMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_Nullify,None,Handle_TDF_DoubleMapNodeOfGUIDProgIDMap)
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_IsNull,None,Handle_TDF_DoubleMapNodeOfGUIDProgIDMap)
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_GetObject,None,Handle_TDF_DoubleMapNodeOfGUIDProgIDMap)
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap__kill_pointed,None,Handle_TDF_DoubleMapNodeOfGUIDProgIDMap)
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister = _TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_swigregister(Handle_TDF_DoubleMapNodeOfGUIDProgIDMap)

def Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_DownCast(*args):
  return _TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_DownCast(*args)
Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_DownCast = _TDF.Handle_TDF_DoubleMapNodeOfGUIDProgIDMap_DownCast

class TDF_DoubleMapNodeOfLabelDoubleMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: TDF_Label &
        :param K2:
        :type K2: TDF_Label &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_swiginit(self,_TDF.new_TDF_DoubleMapNodeOfLabelDoubleMap(*args))
    def Key1(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Key1(self, *args)

    def Key2(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Key2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_DoubleMapNodeOfLabelDoubleMap self)"""
        return _TDF.TDF_DoubleMapNodeOfLabelDoubleMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DoubleMapNodeOfLabelDoubleMap self) -> Handle_TDF_DoubleMapNodeOfLabelDoubleMap"""
        return _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DoubleMapNodeOfLabelDoubleMap.Key1 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Key1,None,TDF_DoubleMapNodeOfLabelDoubleMap)
TDF_DoubleMapNodeOfLabelDoubleMap.Key2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Key2,None,TDF_DoubleMapNodeOfLabelDoubleMap)
TDF_DoubleMapNodeOfLabelDoubleMap.Next2 = new_instancemethod(_TDF.TDF_DoubleMapNodeOfLabelDoubleMap_Next2,None,TDF_DoubleMapNodeOfLabelDoubleMap)
TDF_DoubleMapNodeOfLabelDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_DoubleMapNodeOfLabelDoubleMap__kill_pointed,None,TDF_DoubleMapNodeOfLabelDoubleMap)
TDF_DoubleMapNodeOfLabelDoubleMap.GetHandle = new_instancemethod(_TDF.TDF_DoubleMapNodeOfLabelDoubleMap_GetHandle,None,TDF_DoubleMapNodeOfLabelDoubleMap)
TDF_DoubleMapNodeOfLabelDoubleMap_swigregister = _TDF.TDF_DoubleMapNodeOfLabelDoubleMap_swigregister
TDF_DoubleMapNodeOfLabelDoubleMap_swigregister(TDF_DoubleMapNodeOfLabelDoubleMap)

class Handle_TDF_DoubleMapNodeOfLabelDoubleMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_swiginit(self,_TDF.new_Handle_TDF_DoubleMapNodeOfLabelDoubleMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DoubleMapNodeOfLabelDoubleMap.Nullify = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_Nullify,None,Handle_TDF_DoubleMapNodeOfLabelDoubleMap)
Handle_TDF_DoubleMapNodeOfLabelDoubleMap.IsNull = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_IsNull,None,Handle_TDF_DoubleMapNodeOfLabelDoubleMap)
Handle_TDF_DoubleMapNodeOfLabelDoubleMap.GetObject = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_GetObject,None,Handle_TDF_DoubleMapNodeOfLabelDoubleMap)
Handle_TDF_DoubleMapNodeOfLabelDoubleMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap__kill_pointed,None,Handle_TDF_DoubleMapNodeOfLabelDoubleMap)
Handle_TDF_DoubleMapNodeOfLabelDoubleMap_swigregister = _TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_swigregister
Handle_TDF_DoubleMapNodeOfLabelDoubleMap_swigregister(Handle_TDF_DoubleMapNodeOfLabelDoubleMap)

def Handle_TDF_DoubleMapNodeOfLabelDoubleMap_DownCast(*args):
  return _TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_DownCast(*args)
Handle_TDF_DoubleMapNodeOfLabelDoubleMap_DownCast = _TDF.Handle_TDF_DoubleMapNodeOfLabelDoubleMap_DownCast

class TDF_GUIDProgIDMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_GUIDProgIDMap_swiginit(self,_TDF.new_TDF_GUIDProgIDMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_GUIDProgIDMap &
        :rtype: TDF_GUIDProgIDMap

        """
        return _TDF.TDF_GUIDProgIDMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_GUIDProgIDMap &
        :rtype: TDF_GUIDProgIDMap

        """
        return _TDF.TDF_GUIDProgIDMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_GUIDProgIDMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_GUIDProgIDMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K1:
        :type K1: Standard_GUID &
        :param K2:
        :type K2: TCollection_ExtendedString &
        :rtype: None

        """
        return _TDF.TDF_GUIDProgIDMap_Bind(self, *args)

    def AreBound(self, *args):
        """
        :param K1:
        :type K1: Standard_GUID &
        :param K2:
        :type K2: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDF.TDF_GUIDProgIDMap_AreBound(self, *args)

    def IsBound1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_GUIDProgIDMap_IsBound1(self, *args)

    def IsBound2(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDF.TDF_GUIDProgIDMap_IsBound2(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: TCollection_ExtendedString

        """
        return _TDF.TDF_GUIDProgIDMap_Find1(self, *args)

    def Find2(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_GUID

        """
        return _TDF.TDF_GUIDProgIDMap_Find2(self, *args)

    def UnBind1(self, *args):
        """
        :param K:
        :type K: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_GUIDProgIDMap_UnBind1(self, *args)

    def UnBind2(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TDF.TDF_GUIDProgIDMap_UnBind2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_GUIDProgIDMap self)"""
        return _TDF.TDF_GUIDProgIDMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_GUIDProgIDMap.Assign = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Assign,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.Set = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Set,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.ReSize = new_instancemethod(_TDF.TDF_GUIDProgIDMap_ReSize,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.Clear = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Clear,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.Bind = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Bind,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.AreBound = new_instancemethod(_TDF.TDF_GUIDProgIDMap_AreBound,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.IsBound1 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_IsBound1,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.IsBound2 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_IsBound2,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.Find1 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Find1,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.Find2 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_Find2,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.UnBind1 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_UnBind1,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap.UnBind2 = new_instancemethod(_TDF.TDF_GUIDProgIDMap_UnBind2,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap._kill_pointed = new_instancemethod(_TDF.TDF_GUIDProgIDMap__kill_pointed,None,TDF_GUIDProgIDMap)
TDF_GUIDProgIDMap_swigregister = _TDF.TDF_GUIDProgIDMap_swigregister
TDF_GUIDProgIDMap_swigregister(TDF_GUIDProgIDMap)

class TDF_HAttributeArray1(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_HAttributeArray1_swiginit(self,_TDF.new_TDF_HAttributeArray1(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_HAttributeArray1_Init(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_HAttributeArray1_Length(self, *args)

    def Lower(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_HAttributeArray1_Lower(self, *args)

    def Upper(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_HAttributeArray1_Upper(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_HAttributeArray1_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_HAttributeArray1_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_HAttributeArray1_ChangeValue(self, *args)

    def Array1(self, *args):
        """
        :rtype: TDF_AttributeArray1

        """
        return _TDF.TDF_HAttributeArray1_Array1(self, *args)

    def ChangeArray1(self, *args):
        """
        :rtype: TDF_AttributeArray1

        """
        return _TDF.TDF_HAttributeArray1_ChangeArray1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_HAttributeArray1 self)"""
        return _TDF.TDF_HAttributeArray1__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_HAttributeArray1 self) -> Handle_TDF_HAttributeArray1"""
        return _TDF.TDF_HAttributeArray1_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_HAttributeArray1.Init = new_instancemethod(_TDF.TDF_HAttributeArray1_Init,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.Length = new_instancemethod(_TDF.TDF_HAttributeArray1_Length,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.Lower = new_instancemethod(_TDF.TDF_HAttributeArray1_Lower,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.Upper = new_instancemethod(_TDF.TDF_HAttributeArray1_Upper,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.SetValue = new_instancemethod(_TDF.TDF_HAttributeArray1_SetValue,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.Value = new_instancemethod(_TDF.TDF_HAttributeArray1_Value,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.ChangeValue = new_instancemethod(_TDF.TDF_HAttributeArray1_ChangeValue,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.Array1 = new_instancemethod(_TDF.TDF_HAttributeArray1_Array1,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.ChangeArray1 = new_instancemethod(_TDF.TDF_HAttributeArray1_ChangeArray1,None,TDF_HAttributeArray1)
TDF_HAttributeArray1._kill_pointed = new_instancemethod(_TDF.TDF_HAttributeArray1__kill_pointed,None,TDF_HAttributeArray1)
TDF_HAttributeArray1.GetHandle = new_instancemethod(_TDF.TDF_HAttributeArray1_GetHandle,None,TDF_HAttributeArray1)
TDF_HAttributeArray1_swigregister = _TDF.TDF_HAttributeArray1_swigregister
TDF_HAttributeArray1_swigregister(TDF_HAttributeArray1)

class Handle_TDF_HAttributeArray1(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_HAttributeArray1_swiginit(self,_TDF.new_Handle_TDF_HAttributeArray1(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_HAttributeArray1_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_HAttributeArray1.Nullify = new_instancemethod(_TDF.Handle_TDF_HAttributeArray1_Nullify,None,Handle_TDF_HAttributeArray1)
Handle_TDF_HAttributeArray1.IsNull = new_instancemethod(_TDF.Handle_TDF_HAttributeArray1_IsNull,None,Handle_TDF_HAttributeArray1)
Handle_TDF_HAttributeArray1.GetObject = new_instancemethod(_TDF.Handle_TDF_HAttributeArray1_GetObject,None,Handle_TDF_HAttributeArray1)
Handle_TDF_HAttributeArray1._kill_pointed = new_instancemethod(_TDF.Handle_TDF_HAttributeArray1__kill_pointed,None,Handle_TDF_HAttributeArray1)
Handle_TDF_HAttributeArray1_swigregister = _TDF.Handle_TDF_HAttributeArray1_swigregister
Handle_TDF_HAttributeArray1_swigregister(Handle_TDF_HAttributeArray1)

def Handle_TDF_HAttributeArray1_DownCast(*args):
  return _TDF.Handle_TDF_HAttributeArray1_DownCast(*args)
Handle_TDF_HAttributeArray1_DownCast = _TDF.Handle_TDF_HAttributeArray1_DownCast

class TDF_IDFilter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an ID/attribute filter based on an ID list. The default mode is 'ignore all but...'.  This filter has 2 working mode: keep and ignore.  Ignore/Exclusive mode: all IDs are ignored except these set to be kept, using Keep(). Of course, it is possible set an kept ID to be ignored using Ignore().  Keep/Inclusive mode: all IDs are kept except these set to be ignored, using Ignore(). Of course, it is possible set an ignored ID to be kept using Keep().

        :param ignoreMode: default value is Standard_True
        :type ignoreMode: bool
        :rtype: None

        """
        _TDF.TDF_IDFilter_swiginit(self,_TDF.new_TDF_IDFilter(*args))
    def IgnoreAll(self, *args):
        """
        * The list of ID is cleared and the filter mode is set to ignore mode if <keep> is true; false otherwise.

        :param ignore:
        :type ignore: bool
        :rtype: None

        * Returns true is the mode is set to 'ignore all but...'.

        :rtype: bool

        """
        return _TDF.TDF_IDFilter_IgnoreAll(self, *args)

    def Keep(self, *args):
        """
        * An attribute with <anID> as ID is to be kept and the filter will answer true to the question IsKept(<anID>).

        :param anID:
        :type anID: Standard_GUID &
        :rtype: None

        * Attributes with ID owned by <anIDList> are to be kept and the filter will answer true to the question IsKept(<anID>) with ID from <anIDList>.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDFilter_Keep(self, *args)

    def Ignore(self, *args):
        """
        * An attribute with <anID> as ID is to be ignored and the filter will answer false to the question IsKept(<anID>).

        :param anID:
        :type anID: Standard_GUID &
        :rtype: None

        * Attributes with ID owned by <anIDList> are to be ignored and the filter will answer false to the question IsKept(<anID>) with ID from <anIDList>.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDFilter_Ignore(self, *args)

    def IsKept(self, *args):
        """
        * Returns true if the ID is to be kept.

        :param anID:
        :type anID: Standard_GUID &
        :rtype: bool

        * Returns true if the attribute is to be kept.

        :param anAtt:
        :type anAtt: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_IDFilter_IsKept(self, *args)

    def IsIgnored(self, *args):
        """
        * Returns true if the ID is to be ignored.

        :param anID:
        :type anID: Standard_GUID &
        :rtype: bool

        * Returns true if the attribute is to be ignored.

        :param anAtt:
        :type anAtt: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_IDFilter_IsIgnored(self, *args)

    def IDList(self, *args):
        """
        * Copies the list of ID to be kept or ignored in <anIDList>. <anIDList> is cleared before use.

        :param anIDList:
        :type anIDList: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDFilter_IDList(self, *args)

    def Copy(self, *args):
        """
        * Copies into <self> the contents of <fromFilter>. <self> is cleared before copy.

        :param fromFilter:
        :type fromFilter: TDF_IDFilter &
        :rtype: None

        """
        return _TDF.TDF_IDFilter_Copy(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_IDFilter self) -> std::string"""
        return _TDF.TDF_IDFilter_DumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDF_IDFilter self)"""
        return _TDF.TDF_IDFilter__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_IDFilter.IgnoreAll = new_instancemethod(_TDF.TDF_IDFilter_IgnoreAll,None,TDF_IDFilter)
TDF_IDFilter.Keep = new_instancemethod(_TDF.TDF_IDFilter_Keep,None,TDF_IDFilter)
TDF_IDFilter.Ignore = new_instancemethod(_TDF.TDF_IDFilter_Ignore,None,TDF_IDFilter)
TDF_IDFilter.IsKept = new_instancemethod(_TDF.TDF_IDFilter_IsKept,None,TDF_IDFilter)
TDF_IDFilter.IsIgnored = new_instancemethod(_TDF.TDF_IDFilter_IsIgnored,None,TDF_IDFilter)
TDF_IDFilter.IDList = new_instancemethod(_TDF.TDF_IDFilter_IDList,None,TDF_IDFilter)
TDF_IDFilter.Copy = new_instancemethod(_TDF.TDF_IDFilter_Copy,None,TDF_IDFilter)
TDF_IDFilter.DumpToString = new_instancemethod(_TDF.TDF_IDFilter_DumpToString,None,TDF_IDFilter)
TDF_IDFilter._kill_pointed = new_instancemethod(_TDF.TDF_IDFilter__kill_pointed,None,TDF_IDFilter)
TDF_IDFilter_swigregister = _TDF.TDF_IDFilter_swigregister
TDF_IDFilter_swigregister(TDF_IDFilter)

class TDF_IDList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_IDList_swiginit(self,_TDF.new_TDF_IDList(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_IDList_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_IDList_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_IDList_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Standard_GUID &
        :rtype: None

        :param I:
        :type I: Standard_GUID &
        :param theIt:
        :type theIt: TDF_ListIteratorOfIDList &
        :rtype: None

        :param Other:
        :type Other: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Standard_GUID &
        :rtype: None

        :param I:
        :type I: Standard_GUID &
        :param theIt:
        :type theIt: TDF_ListIteratorOfIDList &
        :rtype: None

        :param Other:
        :type Other: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_Append(self, *args)

    def First(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_IDList_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_IDList_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_IDList_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TDF_ListIteratorOfIDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Standard_GUID &
        :param It:
        :type It: TDF_ListIteratorOfIDList &
        :rtype: None

        :param Other:
        :type Other: TDF_IDList &
        :param It:
        :type It: TDF_ListIteratorOfIDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Standard_GUID &
        :param It:
        :type It: TDF_ListIteratorOfIDList &
        :rtype: None

        :param Other:
        :type Other: TDF_IDList &
        :param It:
        :type It: TDF_ListIteratorOfIDList &
        :rtype: None

        """
        return _TDF.TDF_IDList_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_IDList.Assign = new_instancemethod(_TDF.TDF_IDList_Assign,None,TDF_IDList)
TDF_IDList.Set = new_instancemethod(_TDF.TDF_IDList_Set,None,TDF_IDList)
TDF_IDList.Extent = new_instancemethod(_TDF.TDF_IDList_Extent,None,TDF_IDList)
TDF_IDList.Clear = new_instancemethod(_TDF.TDF_IDList_Clear,None,TDF_IDList)
TDF_IDList.IsEmpty = new_instancemethod(_TDF.TDF_IDList_IsEmpty,None,TDF_IDList)
TDF_IDList.Prepend = new_instancemethod(_TDF.TDF_IDList_Prepend,None,TDF_IDList)
TDF_IDList.Append = new_instancemethod(_TDF.TDF_IDList_Append,None,TDF_IDList)
TDF_IDList.First = new_instancemethod(_TDF.TDF_IDList_First,None,TDF_IDList)
TDF_IDList.Last = new_instancemethod(_TDF.TDF_IDList_Last,None,TDF_IDList)
TDF_IDList.RemoveFirst = new_instancemethod(_TDF.TDF_IDList_RemoveFirst,None,TDF_IDList)
TDF_IDList.Remove = new_instancemethod(_TDF.TDF_IDList_Remove,None,TDF_IDList)
TDF_IDList.InsertBefore = new_instancemethod(_TDF.TDF_IDList_InsertBefore,None,TDF_IDList)
TDF_IDList.InsertAfter = new_instancemethod(_TDF.TDF_IDList_InsertAfter,None,TDF_IDList)
TDF_IDList._kill_pointed = new_instancemethod(_TDF.TDF_IDList__kill_pointed,None,TDF_IDList)
TDF_IDList_swigregister = _TDF.TDF_IDList_swigregister
TDF_IDList_swigregister(TDF_IDList)

class TDF_IDMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_IDMap_swiginit(self,_TDF.new_TDF_IDMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_IDMap &
        :rtype: TDF_IDMap

        """
        return _TDF.TDF_IDMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_IDMap &
        :rtype: TDF_IDMap

        """
        return _TDF.TDF_IDMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_IDMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_IDMap_Clear(self, *args)

    def Add(self, *args):
        """
        :param aKey:
        :type aKey: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_IDMap_Add(self, *args)

    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_IDMap_Contains(self, *args)

    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_IDMap_Remove(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_IDMap self)"""
        return _TDF.TDF_IDMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_IDMap.Assign = new_instancemethod(_TDF.TDF_IDMap_Assign,None,TDF_IDMap)
TDF_IDMap.Set = new_instancemethod(_TDF.TDF_IDMap_Set,None,TDF_IDMap)
TDF_IDMap.ReSize = new_instancemethod(_TDF.TDF_IDMap_ReSize,None,TDF_IDMap)
TDF_IDMap.Clear = new_instancemethod(_TDF.TDF_IDMap_Clear,None,TDF_IDMap)
TDF_IDMap.Add = new_instancemethod(_TDF.TDF_IDMap_Add,None,TDF_IDMap)
TDF_IDMap.Contains = new_instancemethod(_TDF.TDF_IDMap_Contains,None,TDF_IDMap)
TDF_IDMap.Remove = new_instancemethod(_TDF.TDF_IDMap_Remove,None,TDF_IDMap)
TDF_IDMap._kill_pointed = new_instancemethod(_TDF.TDF_IDMap__kill_pointed,None,TDF_IDMap)
TDF_IDMap_swigregister = _TDF.TDF_IDMap_swigregister
TDF_IDMap_swigregister(TDF_IDMap)

class TDF_IndexedMapNodeOfAttributeIndexedMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: Handle_TDF_Attribute &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_swiginit(self,_TDF.new_TDF_IndexedMapNodeOfAttributeIndexedMap(*args))
    def Key1(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_Key1(self, *args)

    def GetKey2(self):
        """GetKey2(TDF_IndexedMapNodeOfAttributeIndexedMap self) -> Standard_Integer"""
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_GetKey2(self)

    def SetKey2(self, *args):
        """SetKey2(TDF_IndexedMapNodeOfAttributeIndexedMap self, Standard_Integer value)"""
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_SetKey2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_IndexedMapNodeOfAttributeIndexedMap self)"""
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_IndexedMapNodeOfAttributeIndexedMap self) -> Handle_TDF_IndexedMapNodeOfAttributeIndexedMap"""
        return _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_IndexedMapNodeOfAttributeIndexedMap.Key1 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_Key1,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap.GetKey2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_GetKey2,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap.SetKey2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_SetKey2,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap.Next2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_Next2,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap._kill_pointed = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap__kill_pointed,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap.GetHandle = new_instancemethod(_TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_GetHandle,None,TDF_IndexedMapNodeOfAttributeIndexedMap)
TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister = _TDF.TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister
TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister(TDF_IndexedMapNodeOfAttributeIndexedMap)

class Handle_TDF_IndexedMapNodeOfAttributeIndexedMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_swiginit(self,_TDF.new_Handle_TDF_IndexedMapNodeOfAttributeIndexedMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_IndexedMapNodeOfAttributeIndexedMap.Nullify = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_Nullify,None,Handle_TDF_IndexedMapNodeOfAttributeIndexedMap)
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap.IsNull = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_IsNull,None,Handle_TDF_IndexedMapNodeOfAttributeIndexedMap)
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap.GetObject = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_GetObject,None,Handle_TDF_IndexedMapNodeOfAttributeIndexedMap)
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap__kill_pointed,None,Handle_TDF_IndexedMapNodeOfAttributeIndexedMap)
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister = _TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_swigregister(Handle_TDF_IndexedMapNodeOfAttributeIndexedMap)

def Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_DownCast(*args):
  return _TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_DownCast(*args)
Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_DownCast = _TDF.Handle_TDF_IndexedMapNodeOfAttributeIndexedMap_DownCast

class TDF_IndexedMapNodeOfLabelIndexedMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K1:
        :type K1: TDF_Label &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_swiginit(self,_TDF.new_TDF_IndexedMapNodeOfLabelIndexedMap(*args))
    def Key1(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_Key1(self, *args)

    def GetKey2(self):
        """GetKey2(TDF_IndexedMapNodeOfLabelIndexedMap self) -> Standard_Integer"""
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_GetKey2(self)

    def SetKey2(self, *args):
        """SetKey2(TDF_IndexedMapNodeOfLabelIndexedMap self, Standard_Integer value)"""
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_SetKey2(self, *args)

    def Next2(self, *args):
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_Next2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_IndexedMapNodeOfLabelIndexedMap self)"""
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_IndexedMapNodeOfLabelIndexedMap self) -> Handle_TDF_IndexedMapNodeOfLabelIndexedMap"""
        return _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_IndexedMapNodeOfLabelIndexedMap.Key1 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap_Key1,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap.GetKey2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap_GetKey2,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap.SetKey2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap_SetKey2,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap.Next2 = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap_Next2,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap._kill_pointed = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap__kill_pointed,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap.GetHandle = new_instancemethod(_TDF.TDF_IndexedMapNodeOfLabelIndexedMap_GetHandle,None,TDF_IndexedMapNodeOfLabelIndexedMap)
TDF_IndexedMapNodeOfLabelIndexedMap_swigregister = _TDF.TDF_IndexedMapNodeOfLabelIndexedMap_swigregister
TDF_IndexedMapNodeOfLabelIndexedMap_swigregister(TDF_IndexedMapNodeOfLabelIndexedMap)

class Handle_TDF_IndexedMapNodeOfLabelIndexedMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_swiginit(self,_TDF.new_Handle_TDF_IndexedMapNodeOfLabelIndexedMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_IndexedMapNodeOfLabelIndexedMap.Nullify = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_Nullify,None,Handle_TDF_IndexedMapNodeOfLabelIndexedMap)
Handle_TDF_IndexedMapNodeOfLabelIndexedMap.IsNull = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_IsNull,None,Handle_TDF_IndexedMapNodeOfLabelIndexedMap)
Handle_TDF_IndexedMapNodeOfLabelIndexedMap.GetObject = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_GetObject,None,Handle_TDF_IndexedMapNodeOfLabelIndexedMap)
Handle_TDF_IndexedMapNodeOfLabelIndexedMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap__kill_pointed,None,Handle_TDF_IndexedMapNodeOfLabelIndexedMap)
Handle_TDF_IndexedMapNodeOfLabelIndexedMap_swigregister = _TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_swigregister
Handle_TDF_IndexedMapNodeOfLabelIndexedMap_swigregister(Handle_TDF_IndexedMapNodeOfLabelIndexedMap)

def Handle_TDF_IndexedMapNodeOfLabelIndexedMap_DownCast(*args):
  return _TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_DownCast(*args)
Handle_TDF_IndexedMapNodeOfLabelIndexedMap_DownCast = _TDF.Handle_TDF_IndexedMapNodeOfLabelIndexedMap_DownCast

class TDF_Label(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an empty label object.

        :rtype: None

        """
        _TDF.TDF_Label_swiginit(self,_TDF.new_TDF_Label(*args))
    def Nullify(self, *args):
        """
        * Nullifies the label.

        :rtype: None

        """
        return _TDF.TDF_Label_Nullify(self, *args)

    def Data(self, *args):
        """
        * Returns the Data owning <self>.

        :rtype: Handle_TDF_Data

        """
        return _TDF.TDF_Label_Data(self, *args)

    def Tag(self, *args):
        """
        * Returns the tag of the label. This is the integer assigned randomly to a label in a data framework. This integer is used to identify this label in an entry.

        :rtype: int

        """
        return _TDF.TDF_Label_Tag(self, *args)

    def Father(self, *args):
        """
        * Returns the label father. This label may be null if the label is root.

        :rtype: TDF_Label

        """
        return _TDF.TDF_Label_Father(self, *args)

    def IsNull(self, *args):
        """
        * Returns True if the <aLabel> is null, i.e. it has not been included in the data framework.

        :rtype: bool

        """
        return _TDF.TDF_Label_IsNull(self, *args)

    def Imported(self, *args):
        """
        * Sets or unsets <self> and all its descendants as imported label, according to <aStatus>.

        :param aStatus:
        :type aStatus: bool
        :rtype: None

        """
        return _TDF.TDF_Label_Imported(self, *args)

    def IsImported(self, *args):
        """
        * Returns True if the <aLabel> is imported.

        :rtype: bool

        """
        return _TDF.TDF_Label_IsImported(self, *args)

    def IsEqual(self, *args):
        """
        * Returns True if the <aLabel> is equal to me (same LabelNode*).

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_Label_IsEqual(self, *args)

    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False

    def IsDifferent(self, *args):
        """
        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_Label_IsDifferent(self, *args)

    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True

    def IsRoot(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_Label_IsRoot(self, *args)

    def IsAttribute(self, *args):
        """
        * Returns true if <self> owns an attribute with <anID> as ID.

        :param anID:
        :type anID: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_Label_IsAttribute(self, *args)

    def AddAttribute(self, *args):
        """
        * Adds an Attribute to the current label. Raises if there is already one.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_Label_AddAttribute(self, *args)

    def ForgetAttribute(self, *args):
        """
        * Forgets an Attribute from the current label, setting its forgotten status true and its valid status false. Raises if the attribute is not in the structure.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        * Forgets the Attribute of GUID <aguid> from the current label . If the attribute doesn't exist returns False. Otherwise returns True.

        :param aguid:
        :type aguid: Standard_GUID &
        :rtype: bool

        """
        return _TDF.TDF_Label_ForgetAttribute(self, *args)

    def ForgetAllAttributes(self, *args):
        """
        * Forgets all the attributes. Does it on also on the sub-labels if <clearChildren> is set to true. Of course, this method is compatible with Transaction & Delta mecanisms.

        :param clearChildren: default value is Standard_True
        :type clearChildren: bool
        :rtype: None

        """
        return _TDF.TDF_Label_ForgetAllAttributes(self, *args)

    def ResumeAttribute(self, *args):
        """
        * Undo Forget action, setting its forgotten status false and its valid status true. Raises if the attribute is not in the structure.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_Label_ResumeAttribute(self, *args)

    def FindAttribute(self, *args):
        """
        * Finds an attribute of the current label, according to <anID>. If anAttribute is not a valid one, false is returned. The method returns True if found, False otherwise.  A removed attribute cannot be found.

        :param anID:
        :type anID: Standard_GUID &
        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: bool

        * Finds an attribute of the current label, according to <anID> and <aTransaction>. This attribute has/had to be a valid one for the given transaction index . So, this attribute is not necessary a valid one.  The method returns True if found, False otherwise.  A removed attribute cannot be found nor a backuped attribute of a removed one.

        :param anID:
        :type anID: Standard_GUID &
        :param aTransaction:
        :type aTransaction: int
        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_Label_FindAttribute(self, *args)

    def MayBeModified(self, *args):
        """
        * Returns true if <self> or a DESCENDANT of <self> owns attributes not yet available in transaction 0. It means at least one of their attributes is new, modified or deleted.

        :rtype: bool

        """
        return _TDF.TDF_Label_MayBeModified(self, *args)

    def AttributesModified(self, *args):
        """
        * Returns true if <self> owns attributes not yet available in transaction 0. It means at least one attribute is new, modified or deleted.

        :rtype: bool

        """
        return _TDF.TDF_Label_AttributesModified(self, *args)

    def HasAttribute(self, *args):
        """
        * Returns true if this label has at least one attribute.

        :rtype: bool

        """
        return _TDF.TDF_Label_HasAttribute(self, *args)

    def NbAttributes(self, *args):
        """
        * Returns the number of attributes.

        :rtype: int

        """
        return _TDF.TDF_Label_NbAttributes(self, *args)

    def Depth(self, *args):
        """
        * Returns the depth of the label in the data framework. This corresponds to the number of fathers which this label has, and is used in determining whether a label is root, null or equivalent to another label. Exceptions: Standard_NullObject if this label is null. This is because a null object can have no depth.

        :rtype: int

        """
        return _TDF.TDF_Label_Depth(self, *args)

    def IsDescendant(self, *args):
        """
        * Returns True if <self> is a descendant of <aLabel>. Attention: every label is its own descendant.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_Label_IsDescendant(self, *args)

    def Root(self, *args):
        """
        * Returns the root label Root of the data structure. This has a depth of 0. Exceptions: Standard_NullObject if this label is null. This is because a null object can have no depth.

        :rtype: TDF_Label

        """
        return _TDF.TDF_Label_Root(self, *args)

    def HasChild(self, *args):
        """
        * Returns true if this label has at least one child.

        :rtype: bool

        """
        return _TDF.TDF_Label_HasChild(self, *args)

    def NbChildren(self, *args):
        """
        * Returns the number of children.

        :rtype: int

        """
        return _TDF.TDF_Label_NbChildren(self, *args)

    def FindChild(self, *args):
        """
        * Finds a child label having <aTag> as tag. Creates The tag aTag identifies the label which will be the parent. If create is true and no child label is found, a new one is created. Example: //creating a label with tag 10 at Root TDF_Label lab1 = aDF->Root().FindChild(10); //creating labels 7 and 2 on label 10 TDF_Label lab2 = lab1.FindChild(7); TDF_Label lab3 = lab1.FindChild(2);

        :param aTag:
        :type aTag: int
        :param create: default value is Standard_True
        :type create: bool
        :rtype: TDF_Label

        """
        return _TDF.TDF_Label_FindChild(self, *args)

    def NewChild(self, *args):
        """
        * Create a new child label of me using autoamtic delivery tags provided by TagSource.

        :rtype: TDF_Label

        """
        return _TDF.TDF_Label_NewChild(self, *args)

    def Transaction(self, *args):
        """
        * Returns the current transaction index.

        :rtype: int

        """
        return _TDF.TDF_Label_Transaction(self, *args)

    def HasLowerNode(self, *args):
        """
        * Returns true if node address of <self> is lower than <otherLabel> one. Used to quickly sort labels (not on entry criterion). -C++: inline

        :param otherLabel:
        :type otherLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_Label_HasLowerNode(self, *args)

    def HasGreaterNode(self, *args):
        """
        * Returns true if node address of <self> is greater than <otherLabel> one. Used to quickly sort labels (not on entry criterion). -C++: inline

        :param otherLabel:
        :type otherLabel: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_Label_HasGreaterNode(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_Label self) -> std::string"""
        return _TDF.TDF_Label_DumpToString(self)

    def ExtendedDump(self, *args):
        """
        * Dumps the label on <aStream> and its attributes rank in <aMap> if their IDs are kept by <IDFilter>.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :param aMap:
        :type aMap: TDF_AttributeIndexedMap &
        :rtype: None

        """
        return _TDF.TDF_Label_ExtendedDump(self, *args)

    def EntryDumpToString(self):
        """EntryDumpToString(TDF_Label self) -> std::string"""
        return _TDF.TDF_Label_EntryDumpToString(self)

    def _kill_pointed(self):
        """_kill_pointed(TDF_Label self)"""
        return _TDF.TDF_Label__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Label.Nullify = new_instancemethod(_TDF.TDF_Label_Nullify,None,TDF_Label)
TDF_Label.Data = new_instancemethod(_TDF.TDF_Label_Data,None,TDF_Label)
TDF_Label.Tag = new_instancemethod(_TDF.TDF_Label_Tag,None,TDF_Label)
TDF_Label.Father = new_instancemethod(_TDF.TDF_Label_Father,None,TDF_Label)
TDF_Label.IsNull = new_instancemethod(_TDF.TDF_Label_IsNull,None,TDF_Label)
TDF_Label.Imported = new_instancemethod(_TDF.TDF_Label_Imported,None,TDF_Label)
TDF_Label.IsImported = new_instancemethod(_TDF.TDF_Label_IsImported,None,TDF_Label)
TDF_Label.IsEqual = new_instancemethod(_TDF.TDF_Label_IsEqual,None,TDF_Label)
TDF_Label.__eq_wrapper__ = new_instancemethod(_TDF.TDF_Label___eq_wrapper__,None,TDF_Label)
TDF_Label.IsDifferent = new_instancemethod(_TDF.TDF_Label_IsDifferent,None,TDF_Label)
TDF_Label.__ne_wrapper__ = new_instancemethod(_TDF.TDF_Label___ne_wrapper__,None,TDF_Label)
TDF_Label.IsRoot = new_instancemethod(_TDF.TDF_Label_IsRoot,None,TDF_Label)
TDF_Label.IsAttribute = new_instancemethod(_TDF.TDF_Label_IsAttribute,None,TDF_Label)
TDF_Label.AddAttribute = new_instancemethod(_TDF.TDF_Label_AddAttribute,None,TDF_Label)
TDF_Label.ForgetAttribute = new_instancemethod(_TDF.TDF_Label_ForgetAttribute,None,TDF_Label)
TDF_Label.ForgetAllAttributes = new_instancemethod(_TDF.TDF_Label_ForgetAllAttributes,None,TDF_Label)
TDF_Label.ResumeAttribute = new_instancemethod(_TDF.TDF_Label_ResumeAttribute,None,TDF_Label)
TDF_Label.FindAttribute = new_instancemethod(_TDF.TDF_Label_FindAttribute,None,TDF_Label)
TDF_Label.MayBeModified = new_instancemethod(_TDF.TDF_Label_MayBeModified,None,TDF_Label)
TDF_Label.AttributesModified = new_instancemethod(_TDF.TDF_Label_AttributesModified,None,TDF_Label)
TDF_Label.HasAttribute = new_instancemethod(_TDF.TDF_Label_HasAttribute,None,TDF_Label)
TDF_Label.NbAttributes = new_instancemethod(_TDF.TDF_Label_NbAttributes,None,TDF_Label)
TDF_Label.Depth = new_instancemethod(_TDF.TDF_Label_Depth,None,TDF_Label)
TDF_Label.IsDescendant = new_instancemethod(_TDF.TDF_Label_IsDescendant,None,TDF_Label)
TDF_Label.Root = new_instancemethod(_TDF.TDF_Label_Root,None,TDF_Label)
TDF_Label.HasChild = new_instancemethod(_TDF.TDF_Label_HasChild,None,TDF_Label)
TDF_Label.NbChildren = new_instancemethod(_TDF.TDF_Label_NbChildren,None,TDF_Label)
TDF_Label.FindChild = new_instancemethod(_TDF.TDF_Label_FindChild,None,TDF_Label)
TDF_Label.NewChild = new_instancemethod(_TDF.TDF_Label_NewChild,None,TDF_Label)
TDF_Label.Transaction = new_instancemethod(_TDF.TDF_Label_Transaction,None,TDF_Label)
TDF_Label.HasLowerNode = new_instancemethod(_TDF.TDF_Label_HasLowerNode,None,TDF_Label)
TDF_Label.HasGreaterNode = new_instancemethod(_TDF.TDF_Label_HasGreaterNode,None,TDF_Label)
TDF_Label.DumpToString = new_instancemethod(_TDF.TDF_Label_DumpToString,None,TDF_Label)
TDF_Label.ExtendedDump = new_instancemethod(_TDF.TDF_Label_ExtendedDump,None,TDF_Label)
TDF_Label.EntryDumpToString = new_instancemethod(_TDF.TDF_Label_EntryDumpToString,None,TDF_Label)
TDF_Label._kill_pointed = new_instancemethod(_TDF.TDF_Label__kill_pointed,None,TDF_Label)
TDF_Label_swigregister = _TDF.TDF_Label_swigregister
TDF_Label_swigregister(TDF_Label)

class TDF_LabelDataMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelDataMap_swiginit(self,_TDF.new_TDF_LabelDataMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelDataMap &
        :rtype: TDF_LabelDataMap

        """
        return _TDF.TDF_LabelDataMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelDataMap &
        :rtype: TDF_LabelDataMap

        """
        return _TDF.TDF_LabelDataMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelDataMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelDataMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDataMap_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDataMap_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDataMap_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelDataMap_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelDataMap_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelDataMap_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelDataMap_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelDataMap self)"""
        return _TDF.TDF_LabelDataMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelDataMap.Assign = new_instancemethod(_TDF.TDF_LabelDataMap_Assign,None,TDF_LabelDataMap)
TDF_LabelDataMap.Set = new_instancemethod(_TDF.TDF_LabelDataMap_Set,None,TDF_LabelDataMap)
TDF_LabelDataMap.ReSize = new_instancemethod(_TDF.TDF_LabelDataMap_ReSize,None,TDF_LabelDataMap)
TDF_LabelDataMap.Clear = new_instancemethod(_TDF.TDF_LabelDataMap_Clear,None,TDF_LabelDataMap)
TDF_LabelDataMap.Bind = new_instancemethod(_TDF.TDF_LabelDataMap_Bind,None,TDF_LabelDataMap)
TDF_LabelDataMap.IsBound = new_instancemethod(_TDF.TDF_LabelDataMap_IsBound,None,TDF_LabelDataMap)
TDF_LabelDataMap.UnBind = new_instancemethod(_TDF.TDF_LabelDataMap_UnBind,None,TDF_LabelDataMap)
TDF_LabelDataMap.Find = new_instancemethod(_TDF.TDF_LabelDataMap_Find,None,TDF_LabelDataMap)
TDF_LabelDataMap.ChangeFind = new_instancemethod(_TDF.TDF_LabelDataMap_ChangeFind,None,TDF_LabelDataMap)
TDF_LabelDataMap.Find1 = new_instancemethod(_TDF.TDF_LabelDataMap_Find1,None,TDF_LabelDataMap)
TDF_LabelDataMap.ChangeFind1 = new_instancemethod(_TDF.TDF_LabelDataMap_ChangeFind1,None,TDF_LabelDataMap)
TDF_LabelDataMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelDataMap__kill_pointed,None,TDF_LabelDataMap)
TDF_LabelDataMap_swigregister = _TDF.TDF_LabelDataMap_swigregister
TDF_LabelDataMap_swigregister(TDF_LabelDataMap)

class TDF_LabelDoubleMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelDoubleMap_swiginit(self,_TDF.new_TDF_LabelDoubleMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelDoubleMap &
        :rtype: TDF_LabelDoubleMap

        """
        return _TDF.TDF_LabelDoubleMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelDoubleMap &
        :rtype: TDF_LabelDoubleMap

        """
        return _TDF.TDF_LabelDoubleMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelDoubleMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelDoubleMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K1:
        :type K1: TDF_Label &
        :param K2:
        :type K2: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_LabelDoubleMap_Bind(self, *args)

    def AreBound(self, *args):
        """
        :param K1:
        :type K1: TDF_Label &
        :param K2:
        :type K2: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDoubleMap_AreBound(self, *args)

    def IsBound1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDoubleMap_IsBound1(self, *args)

    def IsBound2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDoubleMap_IsBound2(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelDoubleMap_Find1(self, *args)

    def Find2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelDoubleMap_Find2(self, *args)

    def UnBind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDoubleMap_UnBind1(self, *args)

    def UnBind2(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelDoubleMap_UnBind2(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelDoubleMap self)"""
        return _TDF.TDF_LabelDoubleMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelDoubleMap.Assign = new_instancemethod(_TDF.TDF_LabelDoubleMap_Assign,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.Set = new_instancemethod(_TDF.TDF_LabelDoubleMap_Set,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.ReSize = new_instancemethod(_TDF.TDF_LabelDoubleMap_ReSize,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.Clear = new_instancemethod(_TDF.TDF_LabelDoubleMap_Clear,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.Bind = new_instancemethod(_TDF.TDF_LabelDoubleMap_Bind,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.AreBound = new_instancemethod(_TDF.TDF_LabelDoubleMap_AreBound,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.IsBound1 = new_instancemethod(_TDF.TDF_LabelDoubleMap_IsBound1,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.IsBound2 = new_instancemethod(_TDF.TDF_LabelDoubleMap_IsBound2,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.Find1 = new_instancemethod(_TDF.TDF_LabelDoubleMap_Find1,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.Find2 = new_instancemethod(_TDF.TDF_LabelDoubleMap_Find2,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.UnBind1 = new_instancemethod(_TDF.TDF_LabelDoubleMap_UnBind1,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap.UnBind2 = new_instancemethod(_TDF.TDF_LabelDoubleMap_UnBind2,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelDoubleMap__kill_pointed,None,TDF_LabelDoubleMap)
TDF_LabelDoubleMap_swigregister = _TDF.TDF_LabelDoubleMap_swigregister
TDF_LabelDoubleMap_swigregister(TDF_LabelDoubleMap)

class TDF_LabelIndexedMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelIndexedMap_swiginit(self,_TDF.new_TDF_LabelIndexedMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelIndexedMap &
        :rtype: TDF_LabelIndexedMap

        """
        return _TDF.TDF_LabelIndexedMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelIndexedMap &
        :rtype: TDF_LabelIndexedMap

        """
        return _TDF.TDF_LabelIndexedMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelIndexedMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelIndexedMap_Clear(self, *args)

    def Add(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: int

        """
        return _TDF.TDF_LabelIndexedMap_Add(self, *args)

    def Substitute(self, *args):
        """
        :param I:
        :type I: int
        :param K:
        :type K: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_LabelIndexedMap_Substitute(self, *args)

    def RemoveLast(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelIndexedMap_RemoveLast(self, *args)

    def Contains(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelIndexedMap_Contains(self, *args)

    def FindKey(self, *args):
        """
        :param I:
        :type I: int
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelIndexedMap_FindKey(self, *args)

    def FindIndex(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: int

        """
        return _TDF.TDF_LabelIndexedMap_FindIndex(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelIndexedMap self)"""
        return _TDF.TDF_LabelIndexedMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelIndexedMap.Assign = new_instancemethod(_TDF.TDF_LabelIndexedMap_Assign,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.Set = new_instancemethod(_TDF.TDF_LabelIndexedMap_Set,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.ReSize = new_instancemethod(_TDF.TDF_LabelIndexedMap_ReSize,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.Clear = new_instancemethod(_TDF.TDF_LabelIndexedMap_Clear,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.Add = new_instancemethod(_TDF.TDF_LabelIndexedMap_Add,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.Substitute = new_instancemethod(_TDF.TDF_LabelIndexedMap_Substitute,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.RemoveLast = new_instancemethod(_TDF.TDF_LabelIndexedMap_RemoveLast,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.Contains = new_instancemethod(_TDF.TDF_LabelIndexedMap_Contains,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.FindKey = new_instancemethod(_TDF.TDF_LabelIndexedMap_FindKey,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap.FindIndex = new_instancemethod(_TDF.TDF_LabelIndexedMap_FindIndex,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelIndexedMap__kill_pointed,None,TDF_LabelIndexedMap)
TDF_LabelIndexedMap_swigregister = _TDF.TDF_LabelIndexedMap_swigregister
TDF_LabelIndexedMap_swigregister(TDF_LabelIndexedMap)

class TDF_LabelIntegerMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelIntegerMap_swiginit(self,_TDF.new_TDF_LabelIntegerMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelIntegerMap &
        :rtype: TDF_LabelIntegerMap

        """
        return _TDF.TDF_LabelIntegerMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelIntegerMap &
        :rtype: TDF_LabelIntegerMap

        """
        return _TDF.TDF_LabelIntegerMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelIntegerMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelIntegerMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _TDF.TDF_LabelIntegerMap_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelIntegerMap_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelIntegerMap_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: int

        """
        return _TDF.TDF_LabelIntegerMap_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: int

        """
        return _TDF.TDF_LabelIntegerMap_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelIntegerMap_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelIntegerMap_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelIntegerMap self)"""
        return _TDF.TDF_LabelIntegerMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelIntegerMap.Assign = new_instancemethod(_TDF.TDF_LabelIntegerMap_Assign,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.Set = new_instancemethod(_TDF.TDF_LabelIntegerMap_Set,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.ReSize = new_instancemethod(_TDF.TDF_LabelIntegerMap_ReSize,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.Clear = new_instancemethod(_TDF.TDF_LabelIntegerMap_Clear,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.Bind = new_instancemethod(_TDF.TDF_LabelIntegerMap_Bind,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.IsBound = new_instancemethod(_TDF.TDF_LabelIntegerMap_IsBound,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.UnBind = new_instancemethod(_TDF.TDF_LabelIntegerMap_UnBind,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.Find = new_instancemethod(_TDF.TDF_LabelIntegerMap_Find,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.ChangeFind = new_instancemethod(_TDF.TDF_LabelIntegerMap_ChangeFind,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.Find1 = new_instancemethod(_TDF.TDF_LabelIntegerMap_Find1,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap.ChangeFind1 = new_instancemethod(_TDF.TDF_LabelIntegerMap_ChangeFind1,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelIntegerMap__kill_pointed,None,TDF_LabelIntegerMap)
TDF_LabelIntegerMap_swigregister = _TDF.TDF_LabelIntegerMap_swigregister
TDF_LabelIntegerMap_swigregister(TDF_LabelIntegerMap)

class TDF_LabelLabelMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelLabelMap_swiginit(self,_TDF.new_TDF_LabelLabelMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelLabelMap &
        :rtype: TDF_LabelLabelMap

        """
        return _TDF.TDF_LabelLabelMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelLabelMap &
        :rtype: TDF_LabelLabelMap

        """
        return _TDF.TDF_LabelLabelMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelLabelMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelLabelMap_Clear(self, *args)

    def Bind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :param I:
        :type I: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelLabelMap_Bind(self, *args)

    def IsBound(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelLabelMap_IsBound(self, *args)

    def UnBind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelLabelMap_UnBind(self, *args)

    def Find(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelLabelMap_Find(self, *args)

    def ChangeFind(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelLabelMap_ChangeFind(self, *args)

    def Find1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelLabelMap_Find1(self, *args)

    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: TDF_Label &
        :rtype: Standard_Address

        """
        return _TDF.TDF_LabelLabelMap_ChangeFind1(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelLabelMap self)"""
        return _TDF.TDF_LabelLabelMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelLabelMap.Assign = new_instancemethod(_TDF.TDF_LabelLabelMap_Assign,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.Set = new_instancemethod(_TDF.TDF_LabelLabelMap_Set,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.ReSize = new_instancemethod(_TDF.TDF_LabelLabelMap_ReSize,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.Clear = new_instancemethod(_TDF.TDF_LabelLabelMap_Clear,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.Bind = new_instancemethod(_TDF.TDF_LabelLabelMap_Bind,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.IsBound = new_instancemethod(_TDF.TDF_LabelLabelMap_IsBound,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.UnBind = new_instancemethod(_TDF.TDF_LabelLabelMap_UnBind,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.Find = new_instancemethod(_TDF.TDF_LabelLabelMap_Find,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.ChangeFind = new_instancemethod(_TDF.TDF_LabelLabelMap_ChangeFind,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.Find1 = new_instancemethod(_TDF.TDF_LabelLabelMap_Find1,None,TDF_LabelLabelMap)
TDF_LabelLabelMap.ChangeFind1 = new_instancemethod(_TDF.TDF_LabelLabelMap_ChangeFind1,None,TDF_LabelLabelMap)
TDF_LabelLabelMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelLabelMap__kill_pointed,None,TDF_LabelLabelMap)
TDF_LabelLabelMap_swigregister = _TDF.TDF_LabelLabelMap_swigregister
TDF_LabelLabelMap_swigregister(TDF_LabelLabelMap)

class TDF_LabelList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_LabelList_swiginit(self,_TDF.new_TDF_LabelList(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_Set(self, *args)

    def Extent(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_LabelList_Extent(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelList_Clear(self, *args)

    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_LabelList_IsEmpty(self, *args)

    def Prepend(self, *args):
        """
        :param I:
        :type I: TDF_Label &
        :rtype: None

        :param I:
        :type I: TDF_Label &
        :param theIt:
        :type theIt: TDF_ListIteratorOfLabelList &
        :rtype: None

        :param Other:
        :type Other: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: TDF_Label &
        :rtype: None

        :param I:
        :type I: TDF_Label &
        :param theIt:
        :type theIt: TDF_ListIteratorOfLabelList &
        :rtype: None

        :param Other:
        :type Other: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_Append(self, *args)

    def First(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelList_First(self, *args)

    def Last(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelList_Last(self, *args)

    def RemoveFirst(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelList_RemoveFirst(self, *args)

    def Remove(self, *args):
        """
        :param It:
        :type It: TDF_ListIteratorOfLabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: TDF_Label &
        :param It:
        :type It: TDF_ListIteratorOfLabelList &
        :rtype: None

        :param Other:
        :type Other: TDF_LabelList &
        :param It:
        :type It: TDF_ListIteratorOfLabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: TDF_Label &
        :param It:
        :type It: TDF_ListIteratorOfLabelList &
        :rtype: None

        :param Other:
        :type Other: TDF_LabelList &
        :param It:
        :type It: TDF_ListIteratorOfLabelList &
        :rtype: None

        """
        return _TDF.TDF_LabelList_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelList.Assign = new_instancemethod(_TDF.TDF_LabelList_Assign,None,TDF_LabelList)
TDF_LabelList.Set = new_instancemethod(_TDF.TDF_LabelList_Set,None,TDF_LabelList)
TDF_LabelList.Extent = new_instancemethod(_TDF.TDF_LabelList_Extent,None,TDF_LabelList)
TDF_LabelList.Clear = new_instancemethod(_TDF.TDF_LabelList_Clear,None,TDF_LabelList)
TDF_LabelList.IsEmpty = new_instancemethod(_TDF.TDF_LabelList_IsEmpty,None,TDF_LabelList)
TDF_LabelList.Prepend = new_instancemethod(_TDF.TDF_LabelList_Prepend,None,TDF_LabelList)
TDF_LabelList.Append = new_instancemethod(_TDF.TDF_LabelList_Append,None,TDF_LabelList)
TDF_LabelList.First = new_instancemethod(_TDF.TDF_LabelList_First,None,TDF_LabelList)
TDF_LabelList.Last = new_instancemethod(_TDF.TDF_LabelList_Last,None,TDF_LabelList)
TDF_LabelList.RemoveFirst = new_instancemethod(_TDF.TDF_LabelList_RemoveFirst,None,TDF_LabelList)
TDF_LabelList.Remove = new_instancemethod(_TDF.TDF_LabelList_Remove,None,TDF_LabelList)
TDF_LabelList.InsertBefore = new_instancemethod(_TDF.TDF_LabelList_InsertBefore,None,TDF_LabelList)
TDF_LabelList.InsertAfter = new_instancemethod(_TDF.TDF_LabelList_InsertAfter,None,TDF_LabelList)
TDF_LabelList._kill_pointed = new_instancemethod(_TDF.TDF_LabelList__kill_pointed,None,TDF_LabelList)
TDF_LabelList_swigregister = _TDF.TDF_LabelList_swigregister
TDF_LabelList_swigregister(TDF_LabelList)

class TDF_LabelMap(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TDF.TDF_LabelMap_swiginit(self,_TDF.new_TDF_LabelMap(*args))
    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelMap &
        :rtype: TDF_LabelMap

        """
        return _TDF.TDF_LabelMap_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelMap &
        :rtype: TDF_LabelMap

        """
        return _TDF.TDF_LabelMap_Set(self, *args)

    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TDF.TDF_LabelMap_ReSize(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelMap_Clear(self, *args)

    def Add(self, *args):
        """
        :param aKey:
        :type aKey: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelMap_Add(self, *args)

    def Contains(self, *args):
        """
        :param aKey:
        :type aKey: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelMap_Contains(self, *args)

    def Remove(self, *args):
        """
        :param aKey:
        :type aKey: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelMap_Remove(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_LabelMap self)"""
        return _TDF.TDF_LabelMap__kill_pointed(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelMap.Assign = new_instancemethod(_TDF.TDF_LabelMap_Assign,None,TDF_LabelMap)
TDF_LabelMap.Set = new_instancemethod(_TDF.TDF_LabelMap_Set,None,TDF_LabelMap)
TDF_LabelMap.ReSize = new_instancemethod(_TDF.TDF_LabelMap_ReSize,None,TDF_LabelMap)
TDF_LabelMap.Clear = new_instancemethod(_TDF.TDF_LabelMap_Clear,None,TDF_LabelMap)
TDF_LabelMap.Add = new_instancemethod(_TDF.TDF_LabelMap_Add,None,TDF_LabelMap)
TDF_LabelMap.Contains = new_instancemethod(_TDF.TDF_LabelMap_Contains,None,TDF_LabelMap)
TDF_LabelMap.Remove = new_instancemethod(_TDF.TDF_LabelMap_Remove,None,TDF_LabelMap)
TDF_LabelMap._kill_pointed = new_instancemethod(_TDF.TDF_LabelMap__kill_pointed,None,TDF_LabelMap)
TDF_LabelMap_swigregister = _TDF.TDF_LabelMap_swigregister
TDF_LabelMap_swigregister(TDF_LabelMap)

class TDF_LabelMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def HashCode(*args):
        """
        * Returns a HasCode value for the Key <K> in the range 0..Upper.

        :param aLab:
        :type aLab: TDF_Label &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TDF.TDF_LabelMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)
    def IsEqual(*args):
        """
        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

        :param aLab1:
        :type aLab1: TDF_Label &
        :param aLab2:
        :type aLab2: TDF_Label &
        :rtype: bool

        """
        return _TDF.TDF_LabelMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)
    def __init__(self): 
        _TDF.TDF_LabelMapHasher_swiginit(self,_TDF.new_TDF_LabelMapHasher())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelMapHasher._kill_pointed = new_instancemethod(_TDF.TDF_LabelMapHasher__kill_pointed,None,TDF_LabelMapHasher)
TDF_LabelMapHasher_swigregister = _TDF.TDF_LabelMapHasher_swigregister
TDF_LabelMapHasher_swigregister(TDF_LabelMapHasher)

def TDF_LabelMapHasher_HashCode(*args):
  """
    * Returns a HasCode value for the Key <K> in the range 0..Upper.

    :param aLab:
    :type aLab: TDF_Label &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
  return _TDF.TDF_LabelMapHasher_HashCode(*args)

def TDF_LabelMapHasher_IsEqual(*args):
  """
    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.

    :param aLab1:
    :type aLab1: TDF_Label &
    :param aLab2:
    :type aLab2: TDF_Label &
    :rtype: bool

    """
  return _TDF.TDF_LabelMapHasher_IsEqual(*args)

class TDF_LabelSequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_LabelSequence_swiginit(self,_TDF.new_TDF_LabelSequence(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelSequence &
        :rtype: TDF_LabelSequence

        """
        return _TDF.TDF_LabelSequence_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: TDF_LabelSequence &
        :rtype: TDF_LabelSequence

        """
        return _TDF.TDF_LabelSequence_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: TDF_Label &
        :rtype: None

        :param S:
        :type S: TDF_LabelSequence &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: TDF_Label &
        :rtype: None

        :param S:
        :type S: TDF_LabelSequence &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TDF_Label &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDF_LabelSequence &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TDF_Label &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TDF_LabelSequence &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelSequence_First(self, *args)

    def Last(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelSequence_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TDF_LabelSequence &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelSequence_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: TDF_Label

        """
        return _TDF.TDF_LabelSequence_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TDF.TDF_LabelSequence_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_LabelSequence.Clear = new_instancemethod(_TDF.TDF_LabelSequence_Clear,None,TDF_LabelSequence)
TDF_LabelSequence.Assign = new_instancemethod(_TDF.TDF_LabelSequence_Assign,None,TDF_LabelSequence)
TDF_LabelSequence.Set = new_instancemethod(_TDF.TDF_LabelSequence_Set,None,TDF_LabelSequence)
TDF_LabelSequence.Append = new_instancemethod(_TDF.TDF_LabelSequence_Append,None,TDF_LabelSequence)
TDF_LabelSequence.Prepend = new_instancemethod(_TDF.TDF_LabelSequence_Prepend,None,TDF_LabelSequence)
TDF_LabelSequence.InsertBefore = new_instancemethod(_TDF.TDF_LabelSequence_InsertBefore,None,TDF_LabelSequence)
TDF_LabelSequence.InsertAfter = new_instancemethod(_TDF.TDF_LabelSequence_InsertAfter,None,TDF_LabelSequence)
TDF_LabelSequence.First = new_instancemethod(_TDF.TDF_LabelSequence_First,None,TDF_LabelSequence)
TDF_LabelSequence.Last = new_instancemethod(_TDF.TDF_LabelSequence_Last,None,TDF_LabelSequence)
TDF_LabelSequence.Split = new_instancemethod(_TDF.TDF_LabelSequence_Split,None,TDF_LabelSequence)
TDF_LabelSequence.Value = new_instancemethod(_TDF.TDF_LabelSequence_Value,None,TDF_LabelSequence)
TDF_LabelSequence.SetValue = new_instancemethod(_TDF.TDF_LabelSequence_SetValue,None,TDF_LabelSequence)
TDF_LabelSequence.ChangeValue = new_instancemethod(_TDF.TDF_LabelSequence_ChangeValue,None,TDF_LabelSequence)
TDF_LabelSequence.Remove = new_instancemethod(_TDF.TDF_LabelSequence_Remove,None,TDF_LabelSequence)
TDF_LabelSequence._kill_pointed = new_instancemethod(_TDF.TDF_LabelSequence__kill_pointed,None,TDF_LabelSequence)
TDF_LabelSequence_swigregister = _TDF.TDF_LabelSequence_swigregister
TDF_LabelSequence_swigregister(TDF_LabelSequence)

class TDF_ListIteratorOfAttributeDeltaList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TDF_AttributeDeltaList &
        :rtype: None

        """
        _TDF.TDF_ListIteratorOfAttributeDeltaList_swiginit(self,_TDF.new_TDF_ListIteratorOfAttributeDeltaList(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TDF_AttributeDeltaList &
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_TDF_AttributeDelta

        """
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListIteratorOfAttributeDeltaList.Initialize = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeDeltaList_Initialize,None,TDF_ListIteratorOfAttributeDeltaList)
TDF_ListIteratorOfAttributeDeltaList.More = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeDeltaList_More,None,TDF_ListIteratorOfAttributeDeltaList)
TDF_ListIteratorOfAttributeDeltaList.Next = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeDeltaList_Next,None,TDF_ListIteratorOfAttributeDeltaList)
TDF_ListIteratorOfAttributeDeltaList.Value = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeDeltaList_Value,None,TDF_ListIteratorOfAttributeDeltaList)
TDF_ListIteratorOfAttributeDeltaList._kill_pointed = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeDeltaList__kill_pointed,None,TDF_ListIteratorOfAttributeDeltaList)
TDF_ListIteratorOfAttributeDeltaList_swigregister = _TDF.TDF_ListIteratorOfAttributeDeltaList_swigregister
TDF_ListIteratorOfAttributeDeltaList_swigregister(TDF_ListIteratorOfAttributeDeltaList)

class TDF_ListIteratorOfAttributeList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TDF_AttributeList &
        :rtype: None

        """
        _TDF.TDF_ListIteratorOfAttributeList_swiginit(self,_TDF.new_TDF_ListIteratorOfAttributeList(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TDF_AttributeList &
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfAttributeList_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_ListIteratorOfAttributeList_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfAttributeList_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_ListIteratorOfAttributeList_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListIteratorOfAttributeList.Initialize = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeList_Initialize,None,TDF_ListIteratorOfAttributeList)
TDF_ListIteratorOfAttributeList.More = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeList_More,None,TDF_ListIteratorOfAttributeList)
TDF_ListIteratorOfAttributeList.Next = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeList_Next,None,TDF_ListIteratorOfAttributeList)
TDF_ListIteratorOfAttributeList.Value = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeList_Value,None,TDF_ListIteratorOfAttributeList)
TDF_ListIteratorOfAttributeList._kill_pointed = new_instancemethod(_TDF.TDF_ListIteratorOfAttributeList__kill_pointed,None,TDF_ListIteratorOfAttributeList)
TDF_ListIteratorOfAttributeList_swigregister = _TDF.TDF_ListIteratorOfAttributeList_swigregister
TDF_ListIteratorOfAttributeList_swigregister(TDF_ListIteratorOfAttributeList)

class TDF_ListIteratorOfDeltaList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TDF_DeltaList &
        :rtype: None

        """
        _TDF.TDF_ListIteratorOfDeltaList_swiginit(self,_TDF.new_TDF_ListIteratorOfDeltaList(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TDF_DeltaList &
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfDeltaList_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_ListIteratorOfDeltaList_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfDeltaList_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_ListIteratorOfDeltaList_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListIteratorOfDeltaList.Initialize = new_instancemethod(_TDF.TDF_ListIteratorOfDeltaList_Initialize,None,TDF_ListIteratorOfDeltaList)
TDF_ListIteratorOfDeltaList.More = new_instancemethod(_TDF.TDF_ListIteratorOfDeltaList_More,None,TDF_ListIteratorOfDeltaList)
TDF_ListIteratorOfDeltaList.Next = new_instancemethod(_TDF.TDF_ListIteratorOfDeltaList_Next,None,TDF_ListIteratorOfDeltaList)
TDF_ListIteratorOfDeltaList.Value = new_instancemethod(_TDF.TDF_ListIteratorOfDeltaList_Value,None,TDF_ListIteratorOfDeltaList)
TDF_ListIteratorOfDeltaList._kill_pointed = new_instancemethod(_TDF.TDF_ListIteratorOfDeltaList__kill_pointed,None,TDF_ListIteratorOfDeltaList)
TDF_ListIteratorOfDeltaList_swigregister = _TDF.TDF_ListIteratorOfDeltaList_swigregister
TDF_ListIteratorOfDeltaList_swigregister(TDF_ListIteratorOfDeltaList)

class TDF_ListIteratorOfIDList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TDF_IDList &
        :rtype: None

        """
        _TDF.TDF_ListIteratorOfIDList_swiginit(self,_TDF.new_TDF_ListIteratorOfIDList(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TDF_IDList &
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfIDList_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_ListIteratorOfIDList_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfIDList_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_ListIteratorOfIDList_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListIteratorOfIDList.Initialize = new_instancemethod(_TDF.TDF_ListIteratorOfIDList_Initialize,None,TDF_ListIteratorOfIDList)
TDF_ListIteratorOfIDList.More = new_instancemethod(_TDF.TDF_ListIteratorOfIDList_More,None,TDF_ListIteratorOfIDList)
TDF_ListIteratorOfIDList.Next = new_instancemethod(_TDF.TDF_ListIteratorOfIDList_Next,None,TDF_ListIteratorOfIDList)
TDF_ListIteratorOfIDList.Value = new_instancemethod(_TDF.TDF_ListIteratorOfIDList_Value,None,TDF_ListIteratorOfIDList)
TDF_ListIteratorOfIDList._kill_pointed = new_instancemethod(_TDF.TDF_ListIteratorOfIDList__kill_pointed,None,TDF_ListIteratorOfIDList)
TDF_ListIteratorOfIDList_swigregister = _TDF.TDF_ListIteratorOfIDList_swigregister
TDF_ListIteratorOfIDList_swigregister(TDF_ListIteratorOfIDList)

class TDF_ListIteratorOfLabelList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: TDF_LabelList &
        :rtype: None

        """
        _TDF.TDF_ListIteratorOfLabelList_swiginit(self,_TDF.new_TDF_ListIteratorOfLabelList(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: TDF_LabelList &
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfLabelList_Initialize(self, *args)

    def More(self, *args):
        """
        :rtype: bool

        """
        return _TDF.TDF_ListIteratorOfLabelList_More(self, *args)

    def Next(self, *args):
        """
        :rtype: None

        """
        return _TDF.TDF_ListIteratorOfLabelList_Next(self, *args)

    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_ListIteratorOfLabelList_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListIteratorOfLabelList.Initialize = new_instancemethod(_TDF.TDF_ListIteratorOfLabelList_Initialize,None,TDF_ListIteratorOfLabelList)
TDF_ListIteratorOfLabelList.More = new_instancemethod(_TDF.TDF_ListIteratorOfLabelList_More,None,TDF_ListIteratorOfLabelList)
TDF_ListIteratorOfLabelList.Next = new_instancemethod(_TDF.TDF_ListIteratorOfLabelList_Next,None,TDF_ListIteratorOfLabelList)
TDF_ListIteratorOfLabelList.Value = new_instancemethod(_TDF.TDF_ListIteratorOfLabelList_Value,None,TDF_ListIteratorOfLabelList)
TDF_ListIteratorOfLabelList._kill_pointed = new_instancemethod(_TDF.TDF_ListIteratorOfLabelList__kill_pointed,None,TDF_ListIteratorOfLabelList)
TDF_ListIteratorOfLabelList_swigregister = _TDF.TDF_ListIteratorOfLabelList_swigregister
TDF_ListIteratorOfLabelList_swigregister(TDF_ListIteratorOfLabelList)

class TDF_ListNodeOfAttributeDeltaList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDF_AttributeDelta &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_ListNodeOfAttributeDeltaList_swiginit(self,_TDF.new_TDF_ListNodeOfAttributeDeltaList(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDF_AttributeDelta

        """
        return _TDF.TDF_ListNodeOfAttributeDeltaList_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_ListNodeOfAttributeDeltaList self)"""
        return _TDF.TDF_ListNodeOfAttributeDeltaList__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_ListNodeOfAttributeDeltaList self) -> Handle_TDF_ListNodeOfAttributeDeltaList"""
        return _TDF.TDF_ListNodeOfAttributeDeltaList_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListNodeOfAttributeDeltaList.Value = new_instancemethod(_TDF.TDF_ListNodeOfAttributeDeltaList_Value,None,TDF_ListNodeOfAttributeDeltaList)
TDF_ListNodeOfAttributeDeltaList._kill_pointed = new_instancemethod(_TDF.TDF_ListNodeOfAttributeDeltaList__kill_pointed,None,TDF_ListNodeOfAttributeDeltaList)
TDF_ListNodeOfAttributeDeltaList.GetHandle = new_instancemethod(_TDF.TDF_ListNodeOfAttributeDeltaList_GetHandle,None,TDF_ListNodeOfAttributeDeltaList)
TDF_ListNodeOfAttributeDeltaList_swigregister = _TDF.TDF_ListNodeOfAttributeDeltaList_swigregister
TDF_ListNodeOfAttributeDeltaList_swigregister(TDF_ListNodeOfAttributeDeltaList)

class Handle_TDF_ListNodeOfAttributeDeltaList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_ListNodeOfAttributeDeltaList_swiginit(self,_TDF.new_Handle_TDF_ListNodeOfAttributeDeltaList(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_ListNodeOfAttributeDeltaList_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_ListNodeOfAttributeDeltaList.Nullify = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeDeltaList_Nullify,None,Handle_TDF_ListNodeOfAttributeDeltaList)
Handle_TDF_ListNodeOfAttributeDeltaList.IsNull = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeDeltaList_IsNull,None,Handle_TDF_ListNodeOfAttributeDeltaList)
Handle_TDF_ListNodeOfAttributeDeltaList.GetObject = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeDeltaList_GetObject,None,Handle_TDF_ListNodeOfAttributeDeltaList)
Handle_TDF_ListNodeOfAttributeDeltaList._kill_pointed = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeDeltaList__kill_pointed,None,Handle_TDF_ListNodeOfAttributeDeltaList)
Handle_TDF_ListNodeOfAttributeDeltaList_swigregister = _TDF.Handle_TDF_ListNodeOfAttributeDeltaList_swigregister
Handle_TDF_ListNodeOfAttributeDeltaList_swigregister(Handle_TDF_ListNodeOfAttributeDeltaList)

def Handle_TDF_ListNodeOfAttributeDeltaList_DownCast(*args):
  return _TDF.Handle_TDF_ListNodeOfAttributeDeltaList_DownCast(*args)
Handle_TDF_ListNodeOfAttributeDeltaList_DownCast = _TDF.Handle_TDF_ListNodeOfAttributeDeltaList_DownCast

class TDF_ListNodeOfAttributeList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_ListNodeOfAttributeList_swiginit(self,_TDF.new_TDF_ListNodeOfAttributeList(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_ListNodeOfAttributeList_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_ListNodeOfAttributeList self)"""
        return _TDF.TDF_ListNodeOfAttributeList__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_ListNodeOfAttributeList self) -> Handle_TDF_ListNodeOfAttributeList"""
        return _TDF.TDF_ListNodeOfAttributeList_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListNodeOfAttributeList.Value = new_instancemethod(_TDF.TDF_ListNodeOfAttributeList_Value,None,TDF_ListNodeOfAttributeList)
TDF_ListNodeOfAttributeList._kill_pointed = new_instancemethod(_TDF.TDF_ListNodeOfAttributeList__kill_pointed,None,TDF_ListNodeOfAttributeList)
TDF_ListNodeOfAttributeList.GetHandle = new_instancemethod(_TDF.TDF_ListNodeOfAttributeList_GetHandle,None,TDF_ListNodeOfAttributeList)
TDF_ListNodeOfAttributeList_swigregister = _TDF.TDF_ListNodeOfAttributeList_swigregister
TDF_ListNodeOfAttributeList_swigregister(TDF_ListNodeOfAttributeList)

class Handle_TDF_ListNodeOfAttributeList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_ListNodeOfAttributeList_swiginit(self,_TDF.new_Handle_TDF_ListNodeOfAttributeList(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_ListNodeOfAttributeList_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_ListNodeOfAttributeList.Nullify = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeList_Nullify,None,Handle_TDF_ListNodeOfAttributeList)
Handle_TDF_ListNodeOfAttributeList.IsNull = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeList_IsNull,None,Handle_TDF_ListNodeOfAttributeList)
Handle_TDF_ListNodeOfAttributeList.GetObject = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeList_GetObject,None,Handle_TDF_ListNodeOfAttributeList)
Handle_TDF_ListNodeOfAttributeList._kill_pointed = new_instancemethod(_TDF.Handle_TDF_ListNodeOfAttributeList__kill_pointed,None,Handle_TDF_ListNodeOfAttributeList)
Handle_TDF_ListNodeOfAttributeList_swigregister = _TDF.Handle_TDF_ListNodeOfAttributeList_swigregister
Handle_TDF_ListNodeOfAttributeList_swigregister(Handle_TDF_ListNodeOfAttributeList)

def Handle_TDF_ListNodeOfAttributeList_DownCast(*args):
  return _TDF.Handle_TDF_ListNodeOfAttributeList_DownCast(*args)
Handle_TDF_ListNodeOfAttributeList_DownCast = _TDF.Handle_TDF_ListNodeOfAttributeList_DownCast

class TDF_ListNodeOfDeltaList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDF_Delta &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_ListNodeOfDeltaList_swiginit(self,_TDF.new_TDF_ListNodeOfDeltaList(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_ListNodeOfDeltaList_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_ListNodeOfDeltaList self)"""
        return _TDF.TDF_ListNodeOfDeltaList__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_ListNodeOfDeltaList self) -> Handle_TDF_ListNodeOfDeltaList"""
        return _TDF.TDF_ListNodeOfDeltaList_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListNodeOfDeltaList.Value = new_instancemethod(_TDF.TDF_ListNodeOfDeltaList_Value,None,TDF_ListNodeOfDeltaList)
TDF_ListNodeOfDeltaList._kill_pointed = new_instancemethod(_TDF.TDF_ListNodeOfDeltaList__kill_pointed,None,TDF_ListNodeOfDeltaList)
TDF_ListNodeOfDeltaList.GetHandle = new_instancemethod(_TDF.TDF_ListNodeOfDeltaList_GetHandle,None,TDF_ListNodeOfDeltaList)
TDF_ListNodeOfDeltaList_swigregister = _TDF.TDF_ListNodeOfDeltaList_swigregister
TDF_ListNodeOfDeltaList_swigregister(TDF_ListNodeOfDeltaList)

class Handle_TDF_ListNodeOfDeltaList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_ListNodeOfDeltaList_swiginit(self,_TDF.new_Handle_TDF_ListNodeOfDeltaList(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_ListNodeOfDeltaList_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_ListNodeOfDeltaList.Nullify = new_instancemethod(_TDF.Handle_TDF_ListNodeOfDeltaList_Nullify,None,Handle_TDF_ListNodeOfDeltaList)
Handle_TDF_ListNodeOfDeltaList.IsNull = new_instancemethod(_TDF.Handle_TDF_ListNodeOfDeltaList_IsNull,None,Handle_TDF_ListNodeOfDeltaList)
Handle_TDF_ListNodeOfDeltaList.GetObject = new_instancemethod(_TDF.Handle_TDF_ListNodeOfDeltaList_GetObject,None,Handle_TDF_ListNodeOfDeltaList)
Handle_TDF_ListNodeOfDeltaList._kill_pointed = new_instancemethod(_TDF.Handle_TDF_ListNodeOfDeltaList__kill_pointed,None,Handle_TDF_ListNodeOfDeltaList)
Handle_TDF_ListNodeOfDeltaList_swigregister = _TDF.Handle_TDF_ListNodeOfDeltaList_swigregister
Handle_TDF_ListNodeOfDeltaList_swigregister(Handle_TDF_ListNodeOfDeltaList)

def Handle_TDF_ListNodeOfDeltaList_DownCast(*args):
  return _TDF.Handle_TDF_ListNodeOfDeltaList_DownCast(*args)
Handle_TDF_ListNodeOfDeltaList_DownCast = _TDF.Handle_TDF_ListNodeOfDeltaList_DownCast

class TDF_ListNodeOfIDList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Standard_GUID &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_ListNodeOfIDList_swiginit(self,_TDF.new_TDF_ListNodeOfIDList(*args))
    def Value(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_ListNodeOfIDList_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_ListNodeOfIDList self)"""
        return _TDF.TDF_ListNodeOfIDList__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_ListNodeOfIDList self) -> Handle_TDF_ListNodeOfIDList"""
        return _TDF.TDF_ListNodeOfIDList_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListNodeOfIDList.Value = new_instancemethod(_TDF.TDF_ListNodeOfIDList_Value,None,TDF_ListNodeOfIDList)
TDF_ListNodeOfIDList._kill_pointed = new_instancemethod(_TDF.TDF_ListNodeOfIDList__kill_pointed,None,TDF_ListNodeOfIDList)
TDF_ListNodeOfIDList.GetHandle = new_instancemethod(_TDF.TDF_ListNodeOfIDList_GetHandle,None,TDF_ListNodeOfIDList)
TDF_ListNodeOfIDList_swigregister = _TDF.TDF_ListNodeOfIDList_swigregister
TDF_ListNodeOfIDList_swigregister(TDF_ListNodeOfIDList)

class Handle_TDF_ListNodeOfIDList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_ListNodeOfIDList_swiginit(self,_TDF.new_Handle_TDF_ListNodeOfIDList(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_ListNodeOfIDList_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_ListNodeOfIDList.Nullify = new_instancemethod(_TDF.Handle_TDF_ListNodeOfIDList_Nullify,None,Handle_TDF_ListNodeOfIDList)
Handle_TDF_ListNodeOfIDList.IsNull = new_instancemethod(_TDF.Handle_TDF_ListNodeOfIDList_IsNull,None,Handle_TDF_ListNodeOfIDList)
Handle_TDF_ListNodeOfIDList.GetObject = new_instancemethod(_TDF.Handle_TDF_ListNodeOfIDList_GetObject,None,Handle_TDF_ListNodeOfIDList)
Handle_TDF_ListNodeOfIDList._kill_pointed = new_instancemethod(_TDF.Handle_TDF_ListNodeOfIDList__kill_pointed,None,Handle_TDF_ListNodeOfIDList)
Handle_TDF_ListNodeOfIDList_swigregister = _TDF.Handle_TDF_ListNodeOfIDList_swigregister
Handle_TDF_ListNodeOfIDList_swigregister(Handle_TDF_ListNodeOfIDList)

def Handle_TDF_ListNodeOfIDList_DownCast(*args):
  return _TDF.Handle_TDF_ListNodeOfIDList_DownCast(*args)
Handle_TDF_ListNodeOfIDList_DownCast = _TDF.Handle_TDF_ListNodeOfIDList_DownCast

class TDF_ListNodeOfLabelList(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: TDF_Label &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_ListNodeOfLabelList_swiginit(self,_TDF.new_TDF_ListNodeOfLabelList(*args))
    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_ListNodeOfLabelList_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_ListNodeOfLabelList self)"""
        return _TDF.TDF_ListNodeOfLabelList__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_ListNodeOfLabelList self) -> Handle_TDF_ListNodeOfLabelList"""
        return _TDF.TDF_ListNodeOfLabelList_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_ListNodeOfLabelList.Value = new_instancemethod(_TDF.TDF_ListNodeOfLabelList_Value,None,TDF_ListNodeOfLabelList)
TDF_ListNodeOfLabelList._kill_pointed = new_instancemethod(_TDF.TDF_ListNodeOfLabelList__kill_pointed,None,TDF_ListNodeOfLabelList)
TDF_ListNodeOfLabelList.GetHandle = new_instancemethod(_TDF.TDF_ListNodeOfLabelList_GetHandle,None,TDF_ListNodeOfLabelList)
TDF_ListNodeOfLabelList_swigregister = _TDF.TDF_ListNodeOfLabelList_swigregister
TDF_ListNodeOfLabelList_swigregister(TDF_ListNodeOfLabelList)

class Handle_TDF_ListNodeOfLabelList(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_ListNodeOfLabelList_swiginit(self,_TDF.new_Handle_TDF_ListNodeOfLabelList(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_ListNodeOfLabelList_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_ListNodeOfLabelList.Nullify = new_instancemethod(_TDF.Handle_TDF_ListNodeOfLabelList_Nullify,None,Handle_TDF_ListNodeOfLabelList)
Handle_TDF_ListNodeOfLabelList.IsNull = new_instancemethod(_TDF.Handle_TDF_ListNodeOfLabelList_IsNull,None,Handle_TDF_ListNodeOfLabelList)
Handle_TDF_ListNodeOfLabelList.GetObject = new_instancemethod(_TDF.Handle_TDF_ListNodeOfLabelList_GetObject,None,Handle_TDF_ListNodeOfLabelList)
Handle_TDF_ListNodeOfLabelList._kill_pointed = new_instancemethod(_TDF.Handle_TDF_ListNodeOfLabelList__kill_pointed,None,Handle_TDF_ListNodeOfLabelList)
Handle_TDF_ListNodeOfLabelList_swigregister = _TDF.Handle_TDF_ListNodeOfLabelList_swigregister
Handle_TDF_ListNodeOfLabelList_swigregister(Handle_TDF_ListNodeOfLabelList)

def Handle_TDF_ListNodeOfLabelList_DownCast(*args):
  return _TDF.Handle_TDF_ListNodeOfLabelList_DownCast(*args)
Handle_TDF_ListNodeOfLabelList_DownCast = _TDF.Handle_TDF_ListNodeOfLabelList_DownCast

class TDF_MapIteratorOfAttributeMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_AttributeMap &
        :rtype: None

        """
        _TDF.TDF_MapIteratorOfAttributeMap_swiginit(self,_TDF.new_TDF_MapIteratorOfAttributeMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_AttributeMap &
        :rtype: None

        """
        return _TDF.TDF_MapIteratorOfAttributeMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_MapIteratorOfAttributeMap_Key(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_MapIteratorOfAttributeMap.Initialize = new_instancemethod(_TDF.TDF_MapIteratorOfAttributeMap_Initialize,None,TDF_MapIteratorOfAttributeMap)
TDF_MapIteratorOfAttributeMap.Key = new_instancemethod(_TDF.TDF_MapIteratorOfAttributeMap_Key,None,TDF_MapIteratorOfAttributeMap)
TDF_MapIteratorOfAttributeMap._kill_pointed = new_instancemethod(_TDF.TDF_MapIteratorOfAttributeMap__kill_pointed,None,TDF_MapIteratorOfAttributeMap)
TDF_MapIteratorOfAttributeMap_swigregister = _TDF.TDF_MapIteratorOfAttributeMap_swigregister
TDF_MapIteratorOfAttributeMap_swigregister(TDF_MapIteratorOfAttributeMap)

class TDF_MapIteratorOfIDMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_IDMap &
        :rtype: None

        """
        _TDF.TDF_MapIteratorOfIDMap_swiginit(self,_TDF.new_TDF_MapIteratorOfIDMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_IDMap &
        :rtype: None

        """
        return _TDF.TDF_MapIteratorOfIDMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_MapIteratorOfIDMap_Key(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_MapIteratorOfIDMap.Initialize = new_instancemethod(_TDF.TDF_MapIteratorOfIDMap_Initialize,None,TDF_MapIteratorOfIDMap)
TDF_MapIteratorOfIDMap.Key = new_instancemethod(_TDF.TDF_MapIteratorOfIDMap_Key,None,TDF_MapIteratorOfIDMap)
TDF_MapIteratorOfIDMap._kill_pointed = new_instancemethod(_TDF.TDF_MapIteratorOfIDMap__kill_pointed,None,TDF_MapIteratorOfIDMap)
TDF_MapIteratorOfIDMap_swigregister = _TDF.TDF_MapIteratorOfIDMap_swigregister
TDF_MapIteratorOfIDMap_swigregister(TDF_MapIteratorOfIDMap)

class TDF_MapIteratorOfLabelMap(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param aMap:
        :type aMap: TDF_LabelMap &
        :rtype: None

        """
        _TDF.TDF_MapIteratorOfLabelMap_swiginit(self,_TDF.new_TDF_MapIteratorOfLabelMap(*args))
    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: TDF_LabelMap &
        :rtype: None

        """
        return _TDF.TDF_MapIteratorOfLabelMap_Initialize(self, *args)

    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_MapIteratorOfLabelMap_Key(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_MapIteratorOfLabelMap.Initialize = new_instancemethod(_TDF.TDF_MapIteratorOfLabelMap_Initialize,None,TDF_MapIteratorOfLabelMap)
TDF_MapIteratorOfLabelMap.Key = new_instancemethod(_TDF.TDF_MapIteratorOfLabelMap_Key,None,TDF_MapIteratorOfLabelMap)
TDF_MapIteratorOfLabelMap._kill_pointed = new_instancemethod(_TDF.TDF_MapIteratorOfLabelMap__kill_pointed,None,TDF_MapIteratorOfLabelMap)
TDF_MapIteratorOfLabelMap_swigregister = _TDF.TDF_MapIteratorOfLabelMap_swigregister
TDF_MapIteratorOfLabelMap_swigregister(TDF_MapIteratorOfLabelMap)

class TDF_RelocationTable(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an relocation table. <selfRelocate> says if a value without explicit relocation is its own relocation.

        :param selfRelocate: default value is Standard_False
        :type selfRelocate: bool
        :rtype: None

        """
        _TDF.TDF_RelocationTable_swiginit(self,_TDF.new_TDF_RelocationTable(*args))
    def SelfRelocate(self, *args):
        """
        * Sets <mySelfRelocate> to <selfRelocate>.  This flag affects the HasRelocation method behavior like this:  <mySelfRelocate> == False:  If no relocation object is found in the map, a null object is returned  <mySelfRelocate> == True:  If no relocation object is found in the map, the method assumes the source object is relocation value; so the source object is returned as target object.

        :param selfRelocate:
        :type selfRelocate: bool
        :rtype: None

        * Returns <mySelfRelocate>.

        :rtype: bool

        """
        return _TDF.TDF_RelocationTable_SelfRelocate(self, *args)

    def AfterRelocate(self, *args):
        """
        :param afterRelocate:
        :type afterRelocate: bool
        :rtype: None

        * Returns <myAfterRelocate>.

        :rtype: bool

        """
        return _TDF.TDF_RelocationTable_AfterRelocate(self, *args)

    def SetRelocation(self, *args):
        """
        * Sets the relocation value of <aSourceLabel> to <aTargetLabel>.

        :param aSourceLabel:
        :type aSourceLabel: TDF_Label &
        :param aTargetLabel:
        :type aTargetLabel: TDF_Label &
        :rtype: None

        * Sets the relocation value of <aSourceAttribute> to <aTargetAttribute>.

        :param aSourceAttribute:
        :type aSourceAttribute: Handle_TDF_Attribute &
        :param aTargetAttribute:
        :type aTargetAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        return _TDF.TDF_RelocationTable_SetRelocation(self, *args)

    def HasRelocation(self, *args):
        """
        * Finds the relocation value of <aSourceLabel> and returns it into <aTargetLabel>.  (See above SelfRelocate method for more explanation about the method behavior)

        :param aSourceLabel:
        :type aSourceLabel: TDF_Label &
        :param aTargetLabel:
        :type aTargetLabel: TDF_Label &
        :rtype: bool

        * Finds the relocation value of <aSourceAttribute> and returns it into <aTargetAttribute>.  (See above SelfRelocate method for more explanation about the method behavior)

        :param aSourceAttribute:
        :type aSourceAttribute: Handle_TDF_Attribute &
        :param aTargetAttribute:
        :type aTargetAttribute: Handle_TDF_Attribute &
        :rtype: bool

        """
        return _TDF.TDF_RelocationTable_HasRelocation(self, *args)

    def SetTransientRelocation(self, *args):
        """
        * Sets the relocation value of <aSourceTransient> to <aTargetTransient>.

        :param aSourceTransient:
        :type aSourceTransient: Handle_Standard_Transient &
        :param aTargetTransient:
        :type aTargetTransient: Handle_Standard_Transient &
        :rtype: None

        """
        return _TDF.TDF_RelocationTable_SetTransientRelocation(self, *args)

    def HasTransientRelocation(self, *args):
        """
        * Finds the relocation value of <aSourceTransient> and returns it into <aTargetTransient>.  (See above SelfRelocate method for more explanation about the method behavior)

        :param aSourceTransient:
        :type aSourceTransient: Handle_Standard_Transient &
        :param aTargetTransient:
        :type aTargetTransient: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TDF.TDF_RelocationTable_HasTransientRelocation(self, *args)

    def Clear(self, *args):
        """
        * Clears the relocation dictionnary, but lets the self relocation flag to its current value.

        :rtype: None

        """
        return _TDF.TDF_RelocationTable_Clear(self, *args)

    def TargetLabelMap(self, *args):
        """
        * Fills <aLabelMap> with target relocation labels. <aLabelMap> is not cleared before use.

        :param aLabelMap:
        :type aLabelMap: TDF_LabelMap &
        :rtype: None

        """
        return _TDF.TDF_RelocationTable_TargetLabelMap(self, *args)

    def TargetAttributeMap(self, *args):
        """
        * Fills <anAttributeMap> with target relocation attributes. <anAttributeMap> is not cleared before use.

        :param anAttributeMap:
        :type anAttributeMap: TDF_AttributeMap &
        :rtype: None

        """
        return _TDF.TDF_RelocationTable_TargetAttributeMap(self, *args)

    def LabelTable(self, *args):
        """
        * Returns <myLabelTable> to be used or updated.

        :rtype: TDF_LabelDataMap

        """
        return _TDF.TDF_RelocationTable_LabelTable(self, *args)

    def AttributeTable(self, *args):
        """
        * Returns <myAttributeTable> to be used or updated.

        :rtype: TDF_AttributeDataMap

        """
        return _TDF.TDF_RelocationTable_AttributeTable(self, *args)

    def TransientTable(self, *args):
        """
        * Returns <myTransientTable> to be used or updated.

        :rtype: TColStd_IndexedDataMapOfTransientTransient

        """
        return _TDF.TDF_RelocationTable_TransientTable(self, *args)

    def Dump(self, *args):
        """
        * Dumps the relocation table.

        :param dumpLabels:
        :type dumpLabels: bool
        :param dumpAttributes:
        :type dumpAttributes: bool
        :param dumpTransients:
        :type dumpTransients: bool
        :param anOS:
        :type anOS: Standard_OStream &
        :rtype: Standard_OStream

        """
        return _TDF.TDF_RelocationTable_Dump(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_RelocationTable self)"""
        return _TDF.TDF_RelocationTable__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_RelocationTable self) -> Handle_TDF_RelocationTable"""
        return _TDF.TDF_RelocationTable_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_RelocationTable.SelfRelocate = new_instancemethod(_TDF.TDF_RelocationTable_SelfRelocate,None,TDF_RelocationTable)
TDF_RelocationTable.AfterRelocate = new_instancemethod(_TDF.TDF_RelocationTable_AfterRelocate,None,TDF_RelocationTable)
TDF_RelocationTable.SetRelocation = new_instancemethod(_TDF.TDF_RelocationTable_SetRelocation,None,TDF_RelocationTable)
TDF_RelocationTable.HasRelocation = new_instancemethod(_TDF.TDF_RelocationTable_HasRelocation,None,TDF_RelocationTable)
TDF_RelocationTable.SetTransientRelocation = new_instancemethod(_TDF.TDF_RelocationTable_SetTransientRelocation,None,TDF_RelocationTable)
TDF_RelocationTable.HasTransientRelocation = new_instancemethod(_TDF.TDF_RelocationTable_HasTransientRelocation,None,TDF_RelocationTable)
TDF_RelocationTable.Clear = new_instancemethod(_TDF.TDF_RelocationTable_Clear,None,TDF_RelocationTable)
TDF_RelocationTable.TargetLabelMap = new_instancemethod(_TDF.TDF_RelocationTable_TargetLabelMap,None,TDF_RelocationTable)
TDF_RelocationTable.TargetAttributeMap = new_instancemethod(_TDF.TDF_RelocationTable_TargetAttributeMap,None,TDF_RelocationTable)
TDF_RelocationTable.LabelTable = new_instancemethod(_TDF.TDF_RelocationTable_LabelTable,None,TDF_RelocationTable)
TDF_RelocationTable.AttributeTable = new_instancemethod(_TDF.TDF_RelocationTable_AttributeTable,None,TDF_RelocationTable)
TDF_RelocationTable.TransientTable = new_instancemethod(_TDF.TDF_RelocationTable_TransientTable,None,TDF_RelocationTable)
TDF_RelocationTable.Dump = new_instancemethod(_TDF.TDF_RelocationTable_Dump,None,TDF_RelocationTable)
TDF_RelocationTable._kill_pointed = new_instancemethod(_TDF.TDF_RelocationTable__kill_pointed,None,TDF_RelocationTable)
TDF_RelocationTable.GetHandle = new_instancemethod(_TDF.TDF_RelocationTable_GetHandle,None,TDF_RelocationTable)
TDF_RelocationTable_swigregister = _TDF.TDF_RelocationTable_swigregister
TDF_RelocationTable_swigregister(TDF_RelocationTable)

class Handle_TDF_RelocationTable(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_RelocationTable_swiginit(self,_TDF.new_Handle_TDF_RelocationTable(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_RelocationTable_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_RelocationTable.Nullify = new_instancemethod(_TDF.Handle_TDF_RelocationTable_Nullify,None,Handle_TDF_RelocationTable)
Handle_TDF_RelocationTable.IsNull = new_instancemethod(_TDF.Handle_TDF_RelocationTable_IsNull,None,Handle_TDF_RelocationTable)
Handle_TDF_RelocationTable.GetObject = new_instancemethod(_TDF.Handle_TDF_RelocationTable_GetObject,None,Handle_TDF_RelocationTable)
Handle_TDF_RelocationTable._kill_pointed = new_instancemethod(_TDF.Handle_TDF_RelocationTable__kill_pointed,None,Handle_TDF_RelocationTable)
Handle_TDF_RelocationTable_swigregister = _TDF.Handle_TDF_RelocationTable_swigregister
Handle_TDF_RelocationTable_swigregister(Handle_TDF_RelocationTable)

def Handle_TDF_RelocationTable_DownCast(*args):
  return _TDF.Handle_TDF_RelocationTable_DownCast(*args)
Handle_TDF_RelocationTable_DownCast = _TDF.Handle_TDF_RelocationTable_DownCast

class TDF_SequenceNodeOfAttributeSequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TDF_Attribute &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TDF.TDF_SequenceNodeOfAttributeSequence_swiginit(self,_TDF.new_TDF_SequenceNodeOfAttributeSequence(*args))
    def Value(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_SequenceNodeOfAttributeSequence_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_SequenceNodeOfAttributeSequence self)"""
        return _TDF.TDF_SequenceNodeOfAttributeSequence__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_SequenceNodeOfAttributeSequence self) -> Handle_TDF_SequenceNodeOfAttributeSequence"""
        return _TDF.TDF_SequenceNodeOfAttributeSequence_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_SequenceNodeOfAttributeSequence.Value = new_instancemethod(_TDF.TDF_SequenceNodeOfAttributeSequence_Value,None,TDF_SequenceNodeOfAttributeSequence)
TDF_SequenceNodeOfAttributeSequence._kill_pointed = new_instancemethod(_TDF.TDF_SequenceNodeOfAttributeSequence__kill_pointed,None,TDF_SequenceNodeOfAttributeSequence)
TDF_SequenceNodeOfAttributeSequence.GetHandle = new_instancemethod(_TDF.TDF_SequenceNodeOfAttributeSequence_GetHandle,None,TDF_SequenceNodeOfAttributeSequence)
TDF_SequenceNodeOfAttributeSequence_swigregister = _TDF.TDF_SequenceNodeOfAttributeSequence_swigregister
TDF_SequenceNodeOfAttributeSequence_swigregister(TDF_SequenceNodeOfAttributeSequence)

class Handle_TDF_SequenceNodeOfAttributeSequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_SequenceNodeOfAttributeSequence_swiginit(self,_TDF.new_Handle_TDF_SequenceNodeOfAttributeSequence(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_SequenceNodeOfAttributeSequence_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_SequenceNodeOfAttributeSequence.Nullify = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfAttributeSequence_Nullify,None,Handle_TDF_SequenceNodeOfAttributeSequence)
Handle_TDF_SequenceNodeOfAttributeSequence.IsNull = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfAttributeSequence_IsNull,None,Handle_TDF_SequenceNodeOfAttributeSequence)
Handle_TDF_SequenceNodeOfAttributeSequence.GetObject = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfAttributeSequence_GetObject,None,Handle_TDF_SequenceNodeOfAttributeSequence)
Handle_TDF_SequenceNodeOfAttributeSequence._kill_pointed = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfAttributeSequence__kill_pointed,None,Handle_TDF_SequenceNodeOfAttributeSequence)
Handle_TDF_SequenceNodeOfAttributeSequence_swigregister = _TDF.Handle_TDF_SequenceNodeOfAttributeSequence_swigregister
Handle_TDF_SequenceNodeOfAttributeSequence_swigregister(Handle_TDF_SequenceNodeOfAttributeSequence)

def Handle_TDF_SequenceNodeOfAttributeSequence_DownCast(*args):
  return _TDF.Handle_TDF_SequenceNodeOfAttributeSequence_DownCast(*args)
Handle_TDF_SequenceNodeOfAttributeSequence_DownCast = _TDF.Handle_TDF_SequenceNodeOfAttributeSequence_DownCast

class TDF_SequenceNodeOfLabelSequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: TDF_Label &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TDF.TDF_SequenceNodeOfLabelSequence_swiginit(self,_TDF.new_TDF_SequenceNodeOfLabelSequence(*args))
    def Value(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_SequenceNodeOfLabelSequence_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_SequenceNodeOfLabelSequence self)"""
        return _TDF.TDF_SequenceNodeOfLabelSequence__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_SequenceNodeOfLabelSequence self) -> Handle_TDF_SequenceNodeOfLabelSequence"""
        return _TDF.TDF_SequenceNodeOfLabelSequence_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_SequenceNodeOfLabelSequence.Value = new_instancemethod(_TDF.TDF_SequenceNodeOfLabelSequence_Value,None,TDF_SequenceNodeOfLabelSequence)
TDF_SequenceNodeOfLabelSequence._kill_pointed = new_instancemethod(_TDF.TDF_SequenceNodeOfLabelSequence__kill_pointed,None,TDF_SequenceNodeOfLabelSequence)
TDF_SequenceNodeOfLabelSequence.GetHandle = new_instancemethod(_TDF.TDF_SequenceNodeOfLabelSequence_GetHandle,None,TDF_SequenceNodeOfLabelSequence)
TDF_SequenceNodeOfLabelSequence_swigregister = _TDF.TDF_SequenceNodeOfLabelSequence_swigregister
TDF_SequenceNodeOfLabelSequence_swigregister(TDF_SequenceNodeOfLabelSequence)

class Handle_TDF_SequenceNodeOfLabelSequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_SequenceNodeOfLabelSequence_swiginit(self,_TDF.new_Handle_TDF_SequenceNodeOfLabelSequence(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_SequenceNodeOfLabelSequence_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_SequenceNodeOfLabelSequence.Nullify = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfLabelSequence_Nullify,None,Handle_TDF_SequenceNodeOfLabelSequence)
Handle_TDF_SequenceNodeOfLabelSequence.IsNull = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfLabelSequence_IsNull,None,Handle_TDF_SequenceNodeOfLabelSequence)
Handle_TDF_SequenceNodeOfLabelSequence.GetObject = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfLabelSequence_GetObject,None,Handle_TDF_SequenceNodeOfLabelSequence)
Handle_TDF_SequenceNodeOfLabelSequence._kill_pointed = new_instancemethod(_TDF.Handle_TDF_SequenceNodeOfLabelSequence__kill_pointed,None,Handle_TDF_SequenceNodeOfLabelSequence)
Handle_TDF_SequenceNodeOfLabelSequence_swigregister = _TDF.Handle_TDF_SequenceNodeOfLabelSequence_swigregister
Handle_TDF_SequenceNodeOfLabelSequence_swigregister(Handle_TDF_SequenceNodeOfLabelSequence)

def Handle_TDF_SequenceNodeOfLabelSequence_DownCast(*args):
  return _TDF.Handle_TDF_SequenceNodeOfLabelSequence_DownCast(*args)
Handle_TDF_SequenceNodeOfLabelSequence_DownCast = _TDF.Handle_TDF_SequenceNodeOfLabelSequence_DownCast

class TDF_StdMapNodeOfAttributeMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: Handle_TDF_Attribute &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_StdMapNodeOfAttributeMap_swiginit(self,_TDF.new_TDF_StdMapNodeOfAttributeMap(*args))
    def Key(self, *args):
        """
        :rtype: Handle_TDF_Attribute

        """
        return _TDF.TDF_StdMapNodeOfAttributeMap_Key(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_StdMapNodeOfAttributeMap self)"""
        return _TDF.TDF_StdMapNodeOfAttributeMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_StdMapNodeOfAttributeMap self) -> Handle_TDF_StdMapNodeOfAttributeMap"""
        return _TDF.TDF_StdMapNodeOfAttributeMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_StdMapNodeOfAttributeMap.Key = new_instancemethod(_TDF.TDF_StdMapNodeOfAttributeMap_Key,None,TDF_StdMapNodeOfAttributeMap)
TDF_StdMapNodeOfAttributeMap._kill_pointed = new_instancemethod(_TDF.TDF_StdMapNodeOfAttributeMap__kill_pointed,None,TDF_StdMapNodeOfAttributeMap)
TDF_StdMapNodeOfAttributeMap.GetHandle = new_instancemethod(_TDF.TDF_StdMapNodeOfAttributeMap_GetHandle,None,TDF_StdMapNodeOfAttributeMap)
TDF_StdMapNodeOfAttributeMap_swigregister = _TDF.TDF_StdMapNodeOfAttributeMap_swigregister
TDF_StdMapNodeOfAttributeMap_swigregister(TDF_StdMapNodeOfAttributeMap)

class Handle_TDF_StdMapNodeOfAttributeMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_StdMapNodeOfAttributeMap_swiginit(self,_TDF.new_Handle_TDF_StdMapNodeOfAttributeMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_StdMapNodeOfAttributeMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_StdMapNodeOfAttributeMap.Nullify = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfAttributeMap_Nullify,None,Handle_TDF_StdMapNodeOfAttributeMap)
Handle_TDF_StdMapNodeOfAttributeMap.IsNull = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfAttributeMap_IsNull,None,Handle_TDF_StdMapNodeOfAttributeMap)
Handle_TDF_StdMapNodeOfAttributeMap.GetObject = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfAttributeMap_GetObject,None,Handle_TDF_StdMapNodeOfAttributeMap)
Handle_TDF_StdMapNodeOfAttributeMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfAttributeMap__kill_pointed,None,Handle_TDF_StdMapNodeOfAttributeMap)
Handle_TDF_StdMapNodeOfAttributeMap_swigregister = _TDF.Handle_TDF_StdMapNodeOfAttributeMap_swigregister
Handle_TDF_StdMapNodeOfAttributeMap_swigregister(Handle_TDF_StdMapNodeOfAttributeMap)

def Handle_TDF_StdMapNodeOfAttributeMap_DownCast(*args):
  return _TDF.Handle_TDF_StdMapNodeOfAttributeMap_DownCast(*args)
Handle_TDF_StdMapNodeOfAttributeMap_DownCast = _TDF.Handle_TDF_StdMapNodeOfAttributeMap_DownCast

class TDF_StdMapNodeOfIDMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: Standard_GUID &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_StdMapNodeOfIDMap_swiginit(self,_TDF.new_TDF_StdMapNodeOfIDMap(*args))
    def Key(self, *args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_StdMapNodeOfIDMap_Key(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_StdMapNodeOfIDMap self)"""
        return _TDF.TDF_StdMapNodeOfIDMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_StdMapNodeOfIDMap self) -> Handle_TDF_StdMapNodeOfIDMap"""
        return _TDF.TDF_StdMapNodeOfIDMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_StdMapNodeOfIDMap.Key = new_instancemethod(_TDF.TDF_StdMapNodeOfIDMap_Key,None,TDF_StdMapNodeOfIDMap)
TDF_StdMapNodeOfIDMap._kill_pointed = new_instancemethod(_TDF.TDF_StdMapNodeOfIDMap__kill_pointed,None,TDF_StdMapNodeOfIDMap)
TDF_StdMapNodeOfIDMap.GetHandle = new_instancemethod(_TDF.TDF_StdMapNodeOfIDMap_GetHandle,None,TDF_StdMapNodeOfIDMap)
TDF_StdMapNodeOfIDMap_swigregister = _TDF.TDF_StdMapNodeOfIDMap_swigregister
TDF_StdMapNodeOfIDMap_swigregister(TDF_StdMapNodeOfIDMap)

class Handle_TDF_StdMapNodeOfIDMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_StdMapNodeOfIDMap_swiginit(self,_TDF.new_Handle_TDF_StdMapNodeOfIDMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_StdMapNodeOfIDMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_StdMapNodeOfIDMap.Nullify = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfIDMap_Nullify,None,Handle_TDF_StdMapNodeOfIDMap)
Handle_TDF_StdMapNodeOfIDMap.IsNull = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfIDMap_IsNull,None,Handle_TDF_StdMapNodeOfIDMap)
Handle_TDF_StdMapNodeOfIDMap.GetObject = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfIDMap_GetObject,None,Handle_TDF_StdMapNodeOfIDMap)
Handle_TDF_StdMapNodeOfIDMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfIDMap__kill_pointed,None,Handle_TDF_StdMapNodeOfIDMap)
Handle_TDF_StdMapNodeOfIDMap_swigregister = _TDF.Handle_TDF_StdMapNodeOfIDMap_swigregister
Handle_TDF_StdMapNodeOfIDMap_swigregister(Handle_TDF_StdMapNodeOfIDMap)

def Handle_TDF_StdMapNodeOfIDMap_DownCast(*args):
  return _TDF.Handle_TDF_StdMapNodeOfIDMap_DownCast(*args)
Handle_TDF_StdMapNodeOfIDMap_DownCast = _TDF.Handle_TDF_StdMapNodeOfIDMap_DownCast

class TDF_StdMapNodeOfLabelMap(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param K:
        :type K: TDF_Label &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TDF.TDF_StdMapNodeOfLabelMap_swiginit(self,_TDF.new_TDF_StdMapNodeOfLabelMap(*args))
    def Key(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_StdMapNodeOfLabelMap_Key(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_StdMapNodeOfLabelMap self)"""
        return _TDF.TDF_StdMapNodeOfLabelMap__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_StdMapNodeOfLabelMap self) -> Handle_TDF_StdMapNodeOfLabelMap"""
        return _TDF.TDF_StdMapNodeOfLabelMap_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_StdMapNodeOfLabelMap.Key = new_instancemethod(_TDF.TDF_StdMapNodeOfLabelMap_Key,None,TDF_StdMapNodeOfLabelMap)
TDF_StdMapNodeOfLabelMap._kill_pointed = new_instancemethod(_TDF.TDF_StdMapNodeOfLabelMap__kill_pointed,None,TDF_StdMapNodeOfLabelMap)
TDF_StdMapNodeOfLabelMap.GetHandle = new_instancemethod(_TDF.TDF_StdMapNodeOfLabelMap_GetHandle,None,TDF_StdMapNodeOfLabelMap)
TDF_StdMapNodeOfLabelMap_swigregister = _TDF.TDF_StdMapNodeOfLabelMap_swigregister
TDF_StdMapNodeOfLabelMap_swigregister(TDF_StdMapNodeOfLabelMap)

class Handle_TDF_StdMapNodeOfLabelMap(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_StdMapNodeOfLabelMap_swiginit(self,_TDF.new_Handle_TDF_StdMapNodeOfLabelMap(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_StdMapNodeOfLabelMap_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_StdMapNodeOfLabelMap.Nullify = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfLabelMap_Nullify,None,Handle_TDF_StdMapNodeOfLabelMap)
Handle_TDF_StdMapNodeOfLabelMap.IsNull = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfLabelMap_IsNull,None,Handle_TDF_StdMapNodeOfLabelMap)
Handle_TDF_StdMapNodeOfLabelMap.GetObject = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfLabelMap_GetObject,None,Handle_TDF_StdMapNodeOfLabelMap)
Handle_TDF_StdMapNodeOfLabelMap._kill_pointed = new_instancemethod(_TDF.Handle_TDF_StdMapNodeOfLabelMap__kill_pointed,None,Handle_TDF_StdMapNodeOfLabelMap)
Handle_TDF_StdMapNodeOfLabelMap_swigregister = _TDF.Handle_TDF_StdMapNodeOfLabelMap_swigregister
Handle_TDF_StdMapNodeOfLabelMap_swigregister(Handle_TDF_StdMapNodeOfLabelMap)

def Handle_TDF_StdMapNodeOfLabelMap_DownCast(*args):
  return _TDF.Handle_TDF_StdMapNodeOfLabelMap_DownCast(*args)
Handle_TDF_StdMapNodeOfLabelMap_DownCast = _TDF.Handle_TDF_StdMapNodeOfLabelMap_DownCast

class TDF_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def NbLabels(*args):
        """
        * Returns the number of labels of the tree, including <aLabel>. aLabel is also included in this figure. This information is useful in setting the size of an array.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: int

        """
        return _TDF.TDF_Tool_NbLabels(*args)

    NbLabels = staticmethod(NbLabels)
    def NbAttributes(*args):
        """
        * Returns the total number of attributes attached to the labels dependent on the label aLabel. The attributes of aLabel are also included in this figure. This information is useful in setting the size of an array.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: int

        * Returns the number of attributes of the tree, selected by a<Filter>, including those of <aLabel>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: int

        """
        return _TDF.TDF_Tool_NbAttributes(*args)

    NbAttributes = staticmethod(NbAttributes)
    def IsSelfContained(*args):
        """
        * Returns true if <aLabel> and its descendants reference only attributes or labels attached to themselves.

        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: bool

        * Returns true if <aLabel> and its descendants reference only attributes or labels attached to themselves and kept by <aFilter>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: bool

        """
        return _TDF.TDF_Tool_IsSelfContained(*args)

    IsSelfContained = staticmethod(IsSelfContained)
    def OutReferers(*args):
        """
        * Returns in <theAtts> the attributes having out references.  Caution: <theAtts> is not cleared before use!

        :param theLabel:
        :type theLabel: TDF_Label &
        :param theAtts:
        :type theAtts: TDF_AttributeMap &
        :rtype: void

        * Returns in <atts> the attributes having out references and kept by <aFilterForReferers>. It considers only the references kept by <aFilterForReferences>. Caution: <atts> is not cleared before use!

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aFilterForReferers:
        :type aFilterForReferers: TDF_IDFilter &
        :param aFilterForReferences:
        :type aFilterForReferences: TDF_IDFilter &
        :param atts:
        :type atts: TDF_AttributeMap &
        :rtype: void

        """
        return _TDF.TDF_Tool_OutReferers(*args)

    OutReferers = staticmethod(OutReferers)
    def OutReferences(*args):
        """
        * Returns in <atts> the referenced attributes. Caution: <atts> is not cleared before use!

        :param aLabel:
        :type aLabel: TDF_Label &
        :param atts:
        :type atts: TDF_AttributeMap &
        :rtype: void

        * Returns in <atts> the referenced attributes and kept by <aFilterForReferences>. It considers only the referers kept by <aFilterForReferers>. Caution: <atts> is not cleared before use!

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aFilterForReferers:
        :type aFilterForReferers: TDF_IDFilter &
        :param aFilterForReferences:
        :type aFilterForReferences: TDF_IDFilter &
        :param atts:
        :type atts: TDF_AttributeMap &
        :rtype: void

        """
        return _TDF.TDF_Tool_OutReferences(*args)

    OutReferences = staticmethod(OutReferences)
    def RelocateLabel(*args):
        """
        * Returns the label having the same sub-entry as <aLabel> but located as descendant as <toRoot> instead of <fromRoot>.  Exemple :  aLabel = 0:3:24:7:2:7 fromRoot = 0:3:24 toRoot = 0:5 returned label = 0:5:7:2:7

        :param aSourceLabel:
        :type aSourceLabel: TDF_Label &
        :param fromRoot:
        :type fromRoot: TDF_Label &
        :param toRoot:
        :type toRoot: TDF_Label &
        :param aTargetLabel:
        :type aTargetLabel: TDF_Label &
        :param create: default value is Standard_False
        :type create: bool
        :rtype: void

        """
        return _TDF.TDF_Tool_RelocateLabel(*args)

    RelocateLabel = staticmethod(RelocateLabel)
    def Entry(*args):
        """
        * Returns the entry for the label aLabel in the form of the ASCII character string anEntry containing the tag list for aLabel.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param anEntry:
        :type anEntry: TCollection_AsciiString &
        :rtype: void

        """
        return _TDF.TDF_Tool_Entry(*args)

    Entry = staticmethod(Entry)
    def TagList(*args):
        """
        * Returns the entry of <aLabel> as list of integers in <aTagList>.

        :param aLabel:
        :type aLabel: TDF_Label &
        :param aTagList:
        :type aTagList: TColStd_ListOfInteger &
        :rtype: void

        * Returns the entry expressed by <anEntry> as list of integers in <aTagList>.

        :param anEntry:
        :type anEntry: TCollection_AsciiString &
        :param aTagList:
        :type aTagList: TColStd_ListOfInteger &
        :rtype: void

        """
        return _TDF.TDF_Tool_TagList(*args)

    TagList = staticmethod(TagList)
    def Label(*args):
        """
        * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :param anEntry:
        :type anEntry: TCollection_AsciiString &
        :param aLabel:
        :type aLabel: TDF_Label &
        :param create: default value is Standard_False
        :type create: bool
        :rtype: void

        * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :param anEntry:
        :type anEntry: char *
        :param aLabel:
        :type aLabel: TDF_Label &
        :param create: default value is Standard_False
        :type create: bool
        :rtype: void

        * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :param aTagList:
        :type aTagList: TColStd_ListOfInteger &
        :param aLabel:
        :type aLabel: TDF_Label &
        :param create: default value is Standard_False
        :type create: bool
        :rtype: void

        """
        return _TDF.TDF_Tool_Label(*args)

    Label = staticmethod(Label)
    def CountLabels(*args):
        """
        * Adds the labels of <aLabelList> to <aLabelMap> if they are unbound, or increases their reference counters. At the end of the process, <aLabelList> contains only the ADDED labels.

        :param aLabelList:
        :type aLabelList: TDF_LabelList &
        :param aLabelMap:
        :type aLabelMap: TDF_LabelIntegerMap &
        :rtype: void

        """
        return _TDF.TDF_Tool_CountLabels(*args)

    CountLabels = staticmethod(CountLabels)
    def DeductLabels(*args):
        """
        * Decreases the reference counters of the labels of <aLabelList> to <aLabelMap>, and removes labels with null counter. At the end of the process, <aLabelList> contains only the SUPPRESSED labels.

        :param aLabelList:
        :type aLabelList: TDF_LabelList &
        :param aLabelMap:
        :type aLabelMap: TDF_LabelIntegerMap &
        :rtype: void

        """
        return _TDF.TDF_Tool_DeductLabels(*args)

    DeductLabels = staticmethod(DeductLabels)
    def DeepDump(*args):
        """
        * Dumps <aDF> and its labels and their attributes.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aDF:
        :type aDF: Handle_TDF_Data &
        :rtype: void

        * Dumps <aLabel>, its chilren and their attributes.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aLabel:
        :type aLabel: TDF_Label &
        :rtype: void

        """
        return _TDF.TDF_Tool_DeepDump(*args)

    DeepDump = staticmethod(DeepDump)
    def ExtendedDeepDump(*args):
        """
        * Dumps <aDF> and its labels and their attributes, if their IDs are kept by <aFilter>. Dumps also the attributes content.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aDF:
        :type aDF: Handle_TDF_Data &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: void

        * Dumps <aLabel>, its chilren and their attributes, if their IDs are kept by <aFilter>. Dumps also the attributes content.

        :param anOS:
        :type anOS: Standard_OStream &
        :param aLabel:
        :type aLabel: TDF_Label &
        :param aFilter:
        :type aFilter: TDF_IDFilter &
        :rtype: void

        """
        return _TDF.TDF_Tool_ExtendedDeepDump(*args)

    ExtendedDeepDump = staticmethod(ExtendedDeepDump)
    def __init__(self): 
        _TDF.TDF_Tool_swiginit(self,_TDF.new_TDF_Tool())
    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Tool._kill_pointed = new_instancemethod(_TDF.TDF_Tool__kill_pointed,None,TDF_Tool)
TDF_Tool_swigregister = _TDF.TDF_Tool_swigregister
TDF_Tool_swigregister(TDF_Tool)

def TDF_Tool_NbLabels(*args):
  """
    * Returns the number of labels of the tree, including <aLabel>. aLabel is also included in this figure. This information is useful in setting the size of an array.

    :param aLabel:
    :type aLabel: TDF_Label &
    :rtype: int

    """
  return _TDF.TDF_Tool_NbLabels(*args)

def TDF_Tool_NbAttributes(*args):
  """
    * Returns the total number of attributes attached to the labels dependent on the label aLabel. The attributes of aLabel are also included in this figure. This information is useful in setting the size of an array.

    :param aLabel:
    :type aLabel: TDF_Label &
    :rtype: int

    * Returns the number of attributes of the tree, selected by a<Filter>, including those of <aLabel>.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :rtype: int

    """
  return _TDF.TDF_Tool_NbAttributes(*args)

def TDF_Tool_IsSelfContained(*args):
  """
    * Returns true if <aLabel> and its descendants reference only attributes or labels attached to themselves.

    :param aLabel:
    :type aLabel: TDF_Label &
    :rtype: bool

    * Returns true if <aLabel> and its descendants reference only attributes or labels attached to themselves and kept by <aFilter>.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :rtype: bool

    """
  return _TDF.TDF_Tool_IsSelfContained(*args)

def TDF_Tool_OutReferers(*args):
  """
    * Returns in <theAtts> the attributes having out references.  Caution: <theAtts> is not cleared before use!

    :param theLabel:
    :type theLabel: TDF_Label &
    :param theAtts:
    :type theAtts: TDF_AttributeMap &
    :rtype: void

    * Returns in <atts> the attributes having out references and kept by <aFilterForReferers>. It considers only the references kept by <aFilterForReferences>. Caution: <atts> is not cleared before use!

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aFilterForReferers:
    :type aFilterForReferers: TDF_IDFilter &
    :param aFilterForReferences:
    :type aFilterForReferences: TDF_IDFilter &
    :param atts:
    :type atts: TDF_AttributeMap &
    :rtype: void

    """
  return _TDF.TDF_Tool_OutReferers(*args)

def TDF_Tool_OutReferences(*args):
  """
    * Returns in <atts> the referenced attributes. Caution: <atts> is not cleared before use!

    :param aLabel:
    :type aLabel: TDF_Label &
    :param atts:
    :type atts: TDF_AttributeMap &
    :rtype: void

    * Returns in <atts> the referenced attributes and kept by <aFilterForReferences>. It considers only the referers kept by <aFilterForReferers>. Caution: <atts> is not cleared before use!

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aFilterForReferers:
    :type aFilterForReferers: TDF_IDFilter &
    :param aFilterForReferences:
    :type aFilterForReferences: TDF_IDFilter &
    :param atts:
    :type atts: TDF_AttributeMap &
    :rtype: void

    """
  return _TDF.TDF_Tool_OutReferences(*args)

def TDF_Tool_RelocateLabel(*args):
  """
    * Returns the label having the same sub-entry as <aLabel> but located as descendant as <toRoot> instead of <fromRoot>.  Exemple :  aLabel = 0:3:24:7:2:7 fromRoot = 0:3:24 toRoot = 0:5 returned label = 0:5:7:2:7

    :param aSourceLabel:
    :type aSourceLabel: TDF_Label &
    :param fromRoot:
    :type fromRoot: TDF_Label &
    :param toRoot:
    :type toRoot: TDF_Label &
    :param aTargetLabel:
    :type aTargetLabel: TDF_Label &
    :param create: default value is Standard_False
    :type create: bool
    :rtype: void

    """
  return _TDF.TDF_Tool_RelocateLabel(*args)

def TDF_Tool_Entry(*args):
  """
    * Returns the entry for the label aLabel in the form of the ASCII character string anEntry containing the tag list for aLabel.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param anEntry:
    :type anEntry: TCollection_AsciiString &
    :rtype: void

    """
  return _TDF.TDF_Tool_Entry(*args)

def TDF_Tool_TagList(*args):
  """
    * Returns the entry of <aLabel> as list of integers in <aTagList>.

    :param aLabel:
    :type aLabel: TDF_Label &
    :param aTagList:
    :type aTagList: TColStd_ListOfInteger &
    :rtype: void

    * Returns the entry expressed by <anEntry> as list of integers in <aTagList>.

    :param anEntry:
    :type anEntry: TCollection_AsciiString &
    :param aTagList:
    :type aTagList: TColStd_ListOfInteger &
    :rtype: void

    """
  return _TDF.TDF_Tool_TagList(*args)

def TDF_Tool_Label(*args):
  """
    * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

    :param aDF:
    :type aDF: Handle_TDF_Data &
    :param anEntry:
    :type anEntry: TCollection_AsciiString &
    :param aLabel:
    :type aLabel: TDF_Label &
    :param create: default value is Standard_False
    :type create: bool
    :rtype: void

    * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

    :param aDF:
    :type aDF: Handle_TDF_Data &
    :param anEntry:
    :type anEntry: char *
    :param aLabel:
    :type aLabel: TDF_Label &
    :param create: default value is Standard_False
    :type create: bool
    :rtype: void

    * Returns the label expressed by <anEntry>; creates the label if it does not exist and if <create> is true.

    :param aDF:
    :type aDF: Handle_TDF_Data &
    :param aTagList:
    :type aTagList: TColStd_ListOfInteger &
    :param aLabel:
    :type aLabel: TDF_Label &
    :param create: default value is Standard_False
    :type create: bool
    :rtype: void

    """
  return _TDF.TDF_Tool_Label(*args)

def TDF_Tool_CountLabels(*args):
  """
    * Adds the labels of <aLabelList> to <aLabelMap> if they are unbound, or increases their reference counters. At the end of the process, <aLabelList> contains only the ADDED labels.

    :param aLabelList:
    :type aLabelList: TDF_LabelList &
    :param aLabelMap:
    :type aLabelMap: TDF_LabelIntegerMap &
    :rtype: void

    """
  return _TDF.TDF_Tool_CountLabels(*args)

def TDF_Tool_DeductLabels(*args):
  """
    * Decreases the reference counters of the labels of <aLabelList> to <aLabelMap>, and removes labels with null counter. At the end of the process, <aLabelList> contains only the SUPPRESSED labels.

    :param aLabelList:
    :type aLabelList: TDF_LabelList &
    :param aLabelMap:
    :type aLabelMap: TDF_LabelIntegerMap &
    :rtype: void

    """
  return _TDF.TDF_Tool_DeductLabels(*args)

def TDF_Tool_DeepDump(*args):
  """
    * Dumps <aDF> and its labels and their attributes.

    :param anOS:
    :type anOS: Standard_OStream &
    :param aDF:
    :type aDF: Handle_TDF_Data &
    :rtype: void

    * Dumps <aLabel>, its chilren and their attributes.

    :param anOS:
    :type anOS: Standard_OStream &
    :param aLabel:
    :type aLabel: TDF_Label &
    :rtype: void

    """
  return _TDF.TDF_Tool_DeepDump(*args)

def TDF_Tool_ExtendedDeepDump(*args):
  """
    * Dumps <aDF> and its labels and their attributes, if their IDs are kept by <aFilter>. Dumps also the attributes content.

    :param anOS:
    :type anOS: Standard_OStream &
    :param aDF:
    :type aDF: Handle_TDF_Data &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :rtype: void

    * Dumps <aLabel>, its chilren and their attributes, if their IDs are kept by <aFilter>. Dumps also the attributes content.

    :param anOS:
    :type anOS: Standard_OStream &
    :param aLabel:
    :type aLabel: TDF_Label &
    :param aFilter:
    :type aFilter: TDF_IDFilter &
    :rtype: void

    """
  return _TDF.TDF_Tool_ExtendedDeepDump(*args)

class TDF_Transaction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an empty transaction context, unable to be opened.

        :param aName: default value is 
        :type aName: TCollection_AsciiString &
        :rtype: None

        * Creates a transaction context on <aDF>, ready to be opened.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :param aName: default value is 
        :type aName: TCollection_AsciiString &
        :rtype: None

        """
        _TDF.TDF_Transaction_swiginit(self,_TDF.new_TDF_Transaction(*args))
    def Initialize(self, *args):
        """
        * Aborts all the transactions on <myDF> and sets <aDF> to build a transaction context on <aDF>, ready to be opened.

        :param aDF:
        :type aDF: Handle_TDF_Data &
        :rtype: None

        """
        return _TDF.TDF_Transaction_Initialize(self, *args)

    def Open(self, *args):
        """
        * If not yet done, opens a new transaction on <myDF>. Returns the index of the just opened transaction.  It raises DomainError if the transaction is already open, and NullObject if there is no current Data framework.

        :rtype: int

        """
        return _TDF.TDF_Transaction_Open(self, *args)

    def Commit(self, *args):
        """
        * Commits the transactions until AND including the current opened one.

        :param withDelta: default value is Standard_False
        :type withDelta: bool
        :rtype: Handle_TDF_Delta

        """
        return _TDF.TDF_Transaction_Commit(self, *args)

    def Abort(self, *args):
        """
        * Aborts the transactions until AND including the current opened one.

        :rtype: None

        """
        return _TDF.TDF_Transaction_Abort(self, *args)

    def Data(self, *args):
        """
        * Returns the Data from TDF.

        :rtype: Handle_TDF_Data

        """
        return _TDF.TDF_Transaction_Data(self, *args)

    def Transaction(self, *args):
        """
        * Returns the number of the transaction opened by <self>.

        :rtype: int

        """
        return _TDF.TDF_Transaction_Transaction(self, *args)

    def Name(self, *args):
        """
        * Returns the transaction name.

        :rtype: TCollection_AsciiString

        """
        return _TDF.TDF_Transaction_Name(self, *args)

    def IsOpen(self, *args):
        """
        * Returns true if the transaction is open.

        :rtype: bool

        """
        return _TDF.TDF_Transaction_IsOpen(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Transaction.Initialize = new_instancemethod(_TDF.TDF_Transaction_Initialize,None,TDF_Transaction)
TDF_Transaction.Open = new_instancemethod(_TDF.TDF_Transaction_Open,None,TDF_Transaction)
TDF_Transaction.Commit = new_instancemethod(_TDF.TDF_Transaction_Commit,None,TDF_Transaction)
TDF_Transaction.Abort = new_instancemethod(_TDF.TDF_Transaction_Abort,None,TDF_Transaction)
TDF_Transaction.Data = new_instancemethod(_TDF.TDF_Transaction_Data,None,TDF_Transaction)
TDF_Transaction.Transaction = new_instancemethod(_TDF.TDF_Transaction_Transaction,None,TDF_Transaction)
TDF_Transaction.Name = new_instancemethod(_TDF.TDF_Transaction_Name,None,TDF_Transaction)
TDF_Transaction.IsOpen = new_instancemethod(_TDF.TDF_Transaction_IsOpen,None,TDF_Transaction)
TDF_Transaction._kill_pointed = new_instancemethod(_TDF.TDF_Transaction__kill_pointed,None,TDF_Transaction)
TDF_Transaction_swigregister = _TDF.TDF_Transaction_swigregister
TDF_Transaction_swigregister(TDF_Transaction)

class TDF_DeltaOnAddition(TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a TDF_DeltaOnAddition.

        :param anAtt:
        :type anAtt: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_DeltaOnAddition_swiginit(self,_TDF.new_TDF_DeltaOnAddition(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_DeltaOnAddition self)"""
        return _TDF.TDF_DeltaOnAddition__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DeltaOnAddition self) -> Handle_TDF_DeltaOnAddition"""
        return _TDF.TDF_DeltaOnAddition_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaOnAddition._kill_pointed = new_instancemethod(_TDF.TDF_DeltaOnAddition__kill_pointed,None,TDF_DeltaOnAddition)
TDF_DeltaOnAddition.GetHandle = new_instancemethod(_TDF.TDF_DeltaOnAddition_GetHandle,None,TDF_DeltaOnAddition)
TDF_DeltaOnAddition_swigregister = _TDF.TDF_DeltaOnAddition_swigregister
TDF_DeltaOnAddition_swigregister(TDF_DeltaOnAddition)

class Handle_TDF_DeltaOnAddition(Handle_TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DeltaOnAddition_swiginit(self,_TDF.new_Handle_TDF_DeltaOnAddition(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DeltaOnAddition_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DeltaOnAddition.Nullify = new_instancemethod(_TDF.Handle_TDF_DeltaOnAddition_Nullify,None,Handle_TDF_DeltaOnAddition)
Handle_TDF_DeltaOnAddition.IsNull = new_instancemethod(_TDF.Handle_TDF_DeltaOnAddition_IsNull,None,Handle_TDF_DeltaOnAddition)
Handle_TDF_DeltaOnAddition.GetObject = new_instancemethod(_TDF.Handle_TDF_DeltaOnAddition_GetObject,None,Handle_TDF_DeltaOnAddition)
Handle_TDF_DeltaOnAddition._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DeltaOnAddition__kill_pointed,None,Handle_TDF_DeltaOnAddition)
Handle_TDF_DeltaOnAddition_swigregister = _TDF.Handle_TDF_DeltaOnAddition_swigregister
Handle_TDF_DeltaOnAddition_swigregister(Handle_TDF_DeltaOnAddition)

def Handle_TDF_DeltaOnAddition_DownCast(*args):
  return _TDF.Handle_TDF_DeltaOnAddition_DownCast(*args)
Handle_TDF_DeltaOnAddition_DownCast = _TDF.Handle_TDF_DeltaOnAddition_DownCast

class TDF_DeltaOnForget(TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a TDF_DeltaOnForget.

        :param anAtt:
        :type anAtt: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_DeltaOnForget_swiginit(self,_TDF.new_TDF_DeltaOnForget(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_DeltaOnForget self)"""
        return _TDF.TDF_DeltaOnForget__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DeltaOnForget self) -> Handle_TDF_DeltaOnForget"""
        return _TDF.TDF_DeltaOnForget_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaOnForget._kill_pointed = new_instancemethod(_TDF.TDF_DeltaOnForget__kill_pointed,None,TDF_DeltaOnForget)
TDF_DeltaOnForget.GetHandle = new_instancemethod(_TDF.TDF_DeltaOnForget_GetHandle,None,TDF_DeltaOnForget)
TDF_DeltaOnForget_swigregister = _TDF.TDF_DeltaOnForget_swigregister
TDF_DeltaOnForget_swigregister(TDF_DeltaOnForget)

class Handle_TDF_DeltaOnForget(Handle_TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DeltaOnForget_swiginit(self,_TDF.new_Handle_TDF_DeltaOnForget(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DeltaOnForget_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DeltaOnForget.Nullify = new_instancemethod(_TDF.Handle_TDF_DeltaOnForget_Nullify,None,Handle_TDF_DeltaOnForget)
Handle_TDF_DeltaOnForget.IsNull = new_instancemethod(_TDF.Handle_TDF_DeltaOnForget_IsNull,None,Handle_TDF_DeltaOnForget)
Handle_TDF_DeltaOnForget.GetObject = new_instancemethod(_TDF.Handle_TDF_DeltaOnForget_GetObject,None,Handle_TDF_DeltaOnForget)
Handle_TDF_DeltaOnForget._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DeltaOnForget__kill_pointed,None,Handle_TDF_DeltaOnForget)
Handle_TDF_DeltaOnForget_swigregister = _TDF.Handle_TDF_DeltaOnForget_swigregister
Handle_TDF_DeltaOnForget_swigregister(Handle_TDF_DeltaOnForget)

def Handle_TDF_DeltaOnForget_DownCast(*args):
  return _TDF.Handle_TDF_DeltaOnForget_DownCast(*args)
Handle_TDF_DeltaOnForget_DownCast = _TDF.Handle_TDF_DeltaOnForget_DownCast

class TDF_DeltaOnModification(TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _kill_pointed(self):
        """_kill_pointed(TDF_DeltaOnModification self)"""
        return _TDF.TDF_DeltaOnModification__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DeltaOnModification self) -> Handle_TDF_DeltaOnModification"""
        return _TDF.TDF_DeltaOnModification_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaOnModification._kill_pointed = new_instancemethod(_TDF.TDF_DeltaOnModification__kill_pointed,None,TDF_DeltaOnModification)
TDF_DeltaOnModification.GetHandle = new_instancemethod(_TDF.TDF_DeltaOnModification_GetHandle,None,TDF_DeltaOnModification)
TDF_DeltaOnModification_swigregister = _TDF.TDF_DeltaOnModification_swigregister
TDF_DeltaOnModification_swigregister(TDF_DeltaOnModification)

class Handle_TDF_DeltaOnModification(Handle_TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DeltaOnModification_swiginit(self,_TDF.new_Handle_TDF_DeltaOnModification(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DeltaOnModification_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DeltaOnModification.Nullify = new_instancemethod(_TDF.Handle_TDF_DeltaOnModification_Nullify,None,Handle_TDF_DeltaOnModification)
Handle_TDF_DeltaOnModification.IsNull = new_instancemethod(_TDF.Handle_TDF_DeltaOnModification_IsNull,None,Handle_TDF_DeltaOnModification)
Handle_TDF_DeltaOnModification.GetObject = new_instancemethod(_TDF.Handle_TDF_DeltaOnModification_GetObject,None,Handle_TDF_DeltaOnModification)
Handle_TDF_DeltaOnModification._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DeltaOnModification__kill_pointed,None,Handle_TDF_DeltaOnModification)
Handle_TDF_DeltaOnModification_swigregister = _TDF.Handle_TDF_DeltaOnModification_swigregister
Handle_TDF_DeltaOnModification_swigregister(Handle_TDF_DeltaOnModification)

def Handle_TDF_DeltaOnModification_DownCast(*args):
  return _TDF.Handle_TDF_DeltaOnModification_DownCast(*args)
Handle_TDF_DeltaOnModification_DownCast = _TDF.Handle_TDF_DeltaOnModification_DownCast

class TDF_DeltaOnRemoval(TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _kill_pointed(self):
        """_kill_pointed(TDF_DeltaOnRemoval self)"""
        return _TDF.TDF_DeltaOnRemoval__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DeltaOnRemoval self) -> Handle_TDF_DeltaOnRemoval"""
        return _TDF.TDF_DeltaOnRemoval_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaOnRemoval._kill_pointed = new_instancemethod(_TDF.TDF_DeltaOnRemoval__kill_pointed,None,TDF_DeltaOnRemoval)
TDF_DeltaOnRemoval.GetHandle = new_instancemethod(_TDF.TDF_DeltaOnRemoval_GetHandle,None,TDF_DeltaOnRemoval)
TDF_DeltaOnRemoval_swigregister = _TDF.TDF_DeltaOnRemoval_swigregister
TDF_DeltaOnRemoval_swigregister(TDF_DeltaOnRemoval)

class Handle_TDF_DeltaOnRemoval(Handle_TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DeltaOnRemoval_swiginit(self,_TDF.new_Handle_TDF_DeltaOnRemoval(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DeltaOnRemoval_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DeltaOnRemoval.Nullify = new_instancemethod(_TDF.Handle_TDF_DeltaOnRemoval_Nullify,None,Handle_TDF_DeltaOnRemoval)
Handle_TDF_DeltaOnRemoval.IsNull = new_instancemethod(_TDF.Handle_TDF_DeltaOnRemoval_IsNull,None,Handle_TDF_DeltaOnRemoval)
Handle_TDF_DeltaOnRemoval.GetObject = new_instancemethod(_TDF.Handle_TDF_DeltaOnRemoval_GetObject,None,Handle_TDF_DeltaOnRemoval)
Handle_TDF_DeltaOnRemoval._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DeltaOnRemoval__kill_pointed,None,Handle_TDF_DeltaOnRemoval)
Handle_TDF_DeltaOnRemoval_swigregister = _TDF.Handle_TDF_DeltaOnRemoval_swigregister
Handle_TDF_DeltaOnRemoval_swigregister(Handle_TDF_DeltaOnRemoval)

def Handle_TDF_DeltaOnRemoval_DownCast(*args):
  return _TDF.Handle_TDF_DeltaOnRemoval_DownCast(*args)
Handle_TDF_DeltaOnRemoval_DownCast = _TDF.Handle_TDF_DeltaOnRemoval_DownCast

class TDF_DeltaOnResume(TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a TDF_DeltaOnResume.

        :param anAtt:
        :type anAtt: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_DeltaOnResume_swiginit(self,_TDF.new_TDF_DeltaOnResume(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_DeltaOnResume self)"""
        return _TDF.TDF_DeltaOnResume__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DeltaOnResume self) -> Handle_TDF_DeltaOnResume"""
        return _TDF.TDF_DeltaOnResume_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DeltaOnResume._kill_pointed = new_instancemethod(_TDF.TDF_DeltaOnResume__kill_pointed,None,TDF_DeltaOnResume)
TDF_DeltaOnResume.GetHandle = new_instancemethod(_TDF.TDF_DeltaOnResume_GetHandle,None,TDF_DeltaOnResume)
TDF_DeltaOnResume_swigregister = _TDF.TDF_DeltaOnResume_swigregister
TDF_DeltaOnResume_swigregister(TDF_DeltaOnResume)

class Handle_TDF_DeltaOnResume(Handle_TDF_AttributeDelta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DeltaOnResume_swiginit(self,_TDF.new_Handle_TDF_DeltaOnResume(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DeltaOnResume_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DeltaOnResume.Nullify = new_instancemethod(_TDF.Handle_TDF_DeltaOnResume_Nullify,None,Handle_TDF_DeltaOnResume)
Handle_TDF_DeltaOnResume.IsNull = new_instancemethod(_TDF.Handle_TDF_DeltaOnResume_IsNull,None,Handle_TDF_DeltaOnResume)
Handle_TDF_DeltaOnResume.GetObject = new_instancemethod(_TDF.Handle_TDF_DeltaOnResume_GetObject,None,Handle_TDF_DeltaOnResume)
Handle_TDF_DeltaOnResume._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DeltaOnResume__kill_pointed,None,Handle_TDF_DeltaOnResume)
Handle_TDF_DeltaOnResume_swigregister = _TDF.Handle_TDF_DeltaOnResume_swigregister
Handle_TDF_DeltaOnResume_swigregister(Handle_TDF_DeltaOnResume)

def Handle_TDF_DeltaOnResume_DownCast(*args):
  return _TDF.Handle_TDF_DeltaOnResume_DownCast(*args)
Handle_TDF_DeltaOnResume_DownCast = _TDF.Handle_TDF_DeltaOnResume_DownCast

class TDF_Reference(TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        :rtype: Standard_GUID

        """
        return _TDF.TDF_Reference_GetID(*args)

    GetID = staticmethod(GetID)
    def Set(self, *args):
        """
        :param I:
        :type I: TDF_Label &
        :param Origin:
        :type Origin: TDF_Label &
        :rtype: Handle_TDF_Reference

        :param Origin:
        :type Origin: TDF_Label &
        :rtype: None

        """
        return _TDF.TDF_Reference_Set(self, *args)

    def Get(self, *args):
        """
        :rtype: TDF_Label

        """
        return _TDF.TDF_Reference_Get(self, *args)

    def DumpToString(self):
        """DumpToString(TDF_Reference self) -> std::string"""
        return _TDF.TDF_Reference_DumpToString(self)

    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_Reference_swiginit(self,_TDF.new_TDF_Reference(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_Reference self)"""
        return _TDF.TDF_Reference__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_Reference self) -> Handle_TDF_Reference"""
        return _TDF.TDF_Reference_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_Reference.Set = new_instancemethod(_TDF.TDF_Reference_Set,None,TDF_Reference)
TDF_Reference.Get = new_instancemethod(_TDF.TDF_Reference_Get,None,TDF_Reference)
TDF_Reference.DumpToString = new_instancemethod(_TDF.TDF_Reference_DumpToString,None,TDF_Reference)
TDF_Reference._kill_pointed = new_instancemethod(_TDF.TDF_Reference__kill_pointed,None,TDF_Reference)
TDF_Reference.GetHandle = new_instancemethod(_TDF.TDF_Reference_GetHandle,None,TDF_Reference)
TDF_Reference_swigregister = _TDF.TDF_Reference_swigregister
TDF_Reference_swigregister(TDF_Reference)

def TDF_Reference_GetID(*args):
  """
    :rtype: Standard_GUID

    """
  return _TDF.TDF_Reference_GetID(*args)

class Handle_TDF_Reference(Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_Reference_swiginit(self,_TDF.new_Handle_TDF_Reference(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_Reference_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_Reference.Nullify = new_instancemethod(_TDF.Handle_TDF_Reference_Nullify,None,Handle_TDF_Reference)
Handle_TDF_Reference.IsNull = new_instancemethod(_TDF.Handle_TDF_Reference_IsNull,None,Handle_TDF_Reference)
Handle_TDF_Reference.GetObject = new_instancemethod(_TDF.Handle_TDF_Reference_GetObject,None,Handle_TDF_Reference)
Handle_TDF_Reference._kill_pointed = new_instancemethod(_TDF.Handle_TDF_Reference__kill_pointed,None,Handle_TDF_Reference)
Handle_TDF_Reference_swigregister = _TDF.Handle_TDF_Reference_swigregister
Handle_TDF_Reference_swigregister(Handle_TDF_Reference)

def Handle_TDF_Reference_DownCast(*args):
  return _TDF.Handle_TDF_Reference_DownCast(*args)
Handle_TDF_Reference_DownCast = _TDF.Handle_TDF_Reference_DownCast

class TDF_TagSource(TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetID(*args):
        """
        * class methods =============

        :rtype: Standard_GUID

        """
        return _TDF.TDF_TagSource_GetID(*args)

    GetID = staticmethod(GetID)
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _TDF.TDF_TagSource_swiginit(self,_TDF.new_TDF_TagSource(*args))
    def NewTag(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_TagSource_NewTag(self, *args)

    def NewChild(self, *args):
        """
        * Find (or create) a tagSource attribute located at <L> and make a new child label. TagSource methods =================

        :param L:
        :type L: TDF_Label &
        :rtype: TDF_Label

        :rtype: TDF_Label

        """
        return _TDF.TDF_TagSource_NewChild(self, *args)

    def Get(self, *args):
        """
        :rtype: int

        """
        return _TDF.TDF_TagSource_Get(self, *args)

    def Set(self, *args):
        """
        * Find, or create, a TagSource attribute. the TagSource attribute is returned.

        :param label:
        :type label: TDF_Label &
        :rtype: Handle_TDF_TagSource

        * TDF_Attribute methods =====================

        :param T:
        :type T: int
        :rtype: None

        """
        return _TDF.TDF_TagSource_Set(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(TDF_TagSource self)"""
        return _TDF.TDF_TagSource__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_TagSource self) -> Handle_TDF_TagSource"""
        return _TDF.TDF_TagSource_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_TagSource.NewTag = new_instancemethod(_TDF.TDF_TagSource_NewTag,None,TDF_TagSource)
TDF_TagSource.NewChild = new_instancemethod(_TDF.TDF_TagSource_NewChild,None,TDF_TagSource)
TDF_TagSource.Get = new_instancemethod(_TDF.TDF_TagSource_Get,None,TDF_TagSource)
TDF_TagSource.Set = new_instancemethod(_TDF.TDF_TagSource_Set,None,TDF_TagSource)
TDF_TagSource._kill_pointed = new_instancemethod(_TDF.TDF_TagSource__kill_pointed,None,TDF_TagSource)
TDF_TagSource.GetHandle = new_instancemethod(_TDF.TDF_TagSource_GetHandle,None,TDF_TagSource)
TDF_TagSource_swigregister = _TDF.TDF_TagSource_swigregister
TDF_TagSource_swigregister(TDF_TagSource)

def TDF_TagSource_GetID(*args):
  """
    * class methods =============

    :rtype: Standard_GUID

    """
  return _TDF.TDF_TagSource_GetID(*args)

class Handle_TDF_TagSource(Handle_TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_TagSource_swiginit(self,_TDF.new_Handle_TDF_TagSource(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_TagSource_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_TagSource.Nullify = new_instancemethod(_TDF.Handle_TDF_TagSource_Nullify,None,Handle_TDF_TagSource)
Handle_TDF_TagSource.IsNull = new_instancemethod(_TDF.Handle_TDF_TagSource_IsNull,None,Handle_TDF_TagSource)
Handle_TDF_TagSource.GetObject = new_instancemethod(_TDF.Handle_TDF_TagSource_GetObject,None,Handle_TDF_TagSource)
Handle_TDF_TagSource._kill_pointed = new_instancemethod(_TDF.Handle_TDF_TagSource__kill_pointed,None,Handle_TDF_TagSource)
Handle_TDF_TagSource_swigregister = _TDF.Handle_TDF_TagSource_swigregister
Handle_TDF_TagSource_swigregister(Handle_TDF_TagSource)

def Handle_TDF_TagSource_DownCast(*args):
  return _TDF.Handle_TDF_TagSource_DownCast(*args)
Handle_TDF_TagSource_DownCast = _TDF.Handle_TDF_TagSource_DownCast

class TDF_DefaultDeltaOnModification(TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a TDF_DefaultDeltaOnModification. <anAttribute> must be the backup copy.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_DefaultDeltaOnModification_swiginit(self,_TDF.new_TDF_DefaultDeltaOnModification(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_DefaultDeltaOnModification self)"""
        return _TDF.TDF_DefaultDeltaOnModification__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DefaultDeltaOnModification self) -> Handle_TDF_DefaultDeltaOnModification"""
        return _TDF.TDF_DefaultDeltaOnModification_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DefaultDeltaOnModification._kill_pointed = new_instancemethod(_TDF.TDF_DefaultDeltaOnModification__kill_pointed,None,TDF_DefaultDeltaOnModification)
TDF_DefaultDeltaOnModification.GetHandle = new_instancemethod(_TDF.TDF_DefaultDeltaOnModification_GetHandle,None,TDF_DefaultDeltaOnModification)
TDF_DefaultDeltaOnModification_swigregister = _TDF.TDF_DefaultDeltaOnModification_swigregister
TDF_DefaultDeltaOnModification_swigregister(TDF_DefaultDeltaOnModification)

class Handle_TDF_DefaultDeltaOnModification(Handle_TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DefaultDeltaOnModification_swiginit(self,_TDF.new_Handle_TDF_DefaultDeltaOnModification(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DefaultDeltaOnModification_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DefaultDeltaOnModification.Nullify = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnModification_Nullify,None,Handle_TDF_DefaultDeltaOnModification)
Handle_TDF_DefaultDeltaOnModification.IsNull = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnModification_IsNull,None,Handle_TDF_DefaultDeltaOnModification)
Handle_TDF_DefaultDeltaOnModification.GetObject = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnModification_GetObject,None,Handle_TDF_DefaultDeltaOnModification)
Handle_TDF_DefaultDeltaOnModification._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnModification__kill_pointed,None,Handle_TDF_DefaultDeltaOnModification)
Handle_TDF_DefaultDeltaOnModification_swigregister = _TDF.Handle_TDF_DefaultDeltaOnModification_swigregister
Handle_TDF_DefaultDeltaOnModification_swigregister(Handle_TDF_DefaultDeltaOnModification)

def Handle_TDF_DefaultDeltaOnModification_DownCast(*args):
  return _TDF.Handle_TDF_DefaultDeltaOnModification_DownCast(*args)
Handle_TDF_DefaultDeltaOnModification_DownCast = _TDF.Handle_TDF_DefaultDeltaOnModification_DownCast

class TDF_DefaultDeltaOnRemoval(TDF_DeltaOnRemoval):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a TDF_DefaultDeltaOnRemoval.

        :param anAttribute:
        :type anAttribute: Handle_TDF_Attribute &
        :rtype: None

        """
        _TDF.TDF_DefaultDeltaOnRemoval_swiginit(self,_TDF.new_TDF_DefaultDeltaOnRemoval(*args))
    def _kill_pointed(self):
        """_kill_pointed(TDF_DefaultDeltaOnRemoval self)"""
        return _TDF.TDF_DefaultDeltaOnRemoval__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(TDF_DefaultDeltaOnRemoval self) -> Handle_TDF_DefaultDeltaOnRemoval"""
        return _TDF.TDF_DefaultDeltaOnRemoval_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


TDF_DefaultDeltaOnRemoval._kill_pointed = new_instancemethod(_TDF.TDF_DefaultDeltaOnRemoval__kill_pointed,None,TDF_DefaultDeltaOnRemoval)
TDF_DefaultDeltaOnRemoval.GetHandle = new_instancemethod(_TDF.TDF_DefaultDeltaOnRemoval_GetHandle,None,TDF_DefaultDeltaOnRemoval)
TDF_DefaultDeltaOnRemoval_swigregister = _TDF.TDF_DefaultDeltaOnRemoval_swigregister
TDF_DefaultDeltaOnRemoval_swigregister(TDF_DefaultDeltaOnRemoval)

class Handle_TDF_DefaultDeltaOnRemoval(Handle_TDF_DeltaOnRemoval):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _TDF.Handle_TDF_DefaultDeltaOnRemoval_swiginit(self,_TDF.new_Handle_TDF_DefaultDeltaOnRemoval(*args))
    DownCast = staticmethod(_TDF.Handle_TDF_DefaultDeltaOnRemoval_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_TDF_DefaultDeltaOnRemoval.Nullify = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnRemoval_Nullify,None,Handle_TDF_DefaultDeltaOnRemoval)
Handle_TDF_DefaultDeltaOnRemoval.IsNull = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnRemoval_IsNull,None,Handle_TDF_DefaultDeltaOnRemoval)
Handle_TDF_DefaultDeltaOnRemoval.GetObject = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnRemoval_GetObject,None,Handle_TDF_DefaultDeltaOnRemoval)
Handle_TDF_DefaultDeltaOnRemoval._kill_pointed = new_instancemethod(_TDF.Handle_TDF_DefaultDeltaOnRemoval__kill_pointed,None,Handle_TDF_DefaultDeltaOnRemoval)
Handle_TDF_DefaultDeltaOnRemoval_swigregister = _TDF.Handle_TDF_DefaultDeltaOnRemoval_swigregister
Handle_TDF_DefaultDeltaOnRemoval_swigregister(Handle_TDF_DefaultDeltaOnRemoval)

def Handle_TDF_DefaultDeltaOnRemoval_DownCast(*args):
  return _TDF.Handle_TDF_DefaultDeltaOnRemoval_DownCast(*args)
Handle_TDF_DefaultDeltaOnRemoval_DownCast = _TDF.Handle_TDF_DefaultDeltaOnRemoval_DownCast



