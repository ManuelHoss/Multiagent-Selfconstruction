# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IGESCAFControl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESCAFControl', [dirname(__file__)])
        except ImportError:
            import _IGESCAFControl
            return _IGESCAFControl
        if fp is not None:
            try:
                _mod = imp.load_module('_IGESCAFControl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IGESCAFControl = swig_import_helper()
    del swig_import_helper
else:
    import _IGESCAFControl
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESCAFControl.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IGESCAFControl.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IGESCAFControl.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IGESCAFControl.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IGESCAFControl.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IGESCAFControl.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IGESCAFControl.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IGESCAFControl.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IGESCAFControl.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IGESCAFControl.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IGESCAFControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.Quantity
import OCC.TCollection
import OCC.MMgt
import OCC.IGESControl
import OCC.XSControl
import OCC.IFSelect
import OCC.TColStd
import OCC.Interface
import OCC.Message
import OCC.Dico
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.TopTools
import OCC.TDocStd
import OCC.TDF
import OCC.Resource
class igescafcontrol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeColor(*args):
        """
        * Provides a tool for writing IGES file Converts IGES color index to CASCADE color

        :param col:
        :type col: int
        :rtype: Quantity_Color

        """
        return _IGESCAFControl.igescafcontrol_DecodeColor(*args)

    DecodeColor = staticmethod(DecodeColor)

    def EncodeColor(*args):
        """
        * Tries to Convert CASCADE color to IGES color index If no corresponding color defined in IGES, returns 0

        :param col:
        :type col: Quantity_Color &
        :rtype: int

        """
        return _IGESCAFControl.igescafcontrol_EncodeColor(*args)

    EncodeColor = staticmethod(EncodeColor)

    def __init__(self):
        _IGESCAFControl.igescafcontrol_swiginit(self, _IGESCAFControl.new_igescafcontrol())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


igescafcontrol._kill_pointed = new_instancemethod(_IGESCAFControl.igescafcontrol__kill_pointed, None, igescafcontrol)
igescafcontrol_swigregister = _IGESCAFControl.igescafcontrol_swigregister
igescafcontrol_swigregister(igescafcontrol)

def igescafcontrol_DecodeColor(*args):
    """
    * Provides a tool for writing IGES file Converts IGES color index to CASCADE color

    :param col:
    :type col: int
    :rtype: Quantity_Color

    """
    return _IGESCAFControl.igescafcontrol_DecodeColor(*args)

def igescafcontrol_EncodeColor(*args):
    """
    * Tries to Convert CASCADE color to IGES color index If no corresponding color defined in IGES, returns 0

    :param col:
    :type col: Quantity_Color &
    :rtype: int

    """
    return _IGESCAFControl.igescafcontrol_EncodeColor(*args)

class IGESCAFControl_Reader(OCC.IGESControl.IGESControl_Reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a reader with an empty IGES model and sets ColorMode, LayerMode and NameMode to Standard_True.

        :rtype: None

        * Creates a reader tool and attaches it to an already existing Session 	 Clears the session if it was not yet set for IGES

        :param WS:
        :type WS: Handle_XSControl_WorkSession &
        :param scratch: default value is Standard_True
        :type scratch: bool
        :rtype: None

        """
        _IGESCAFControl.IGESCAFControl_Reader_swiginit(self, _IGESCAFControl.new_IGESCAFControl_Reader(*args))

    def Transfer(self, *args):
        """
        * Translates currently loaded IGES file into the document Returns True if succeeded, and False in case of fail

        :param doc:
        :type doc: Handle_TDocStd_Document &
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_Transfer(self, *args)


    def Perform(self, *args):
        """
        :param filename:
        :type filename: TCollection_AsciiString &
        :param doc:
        :type doc: Handle_TDocStd_Document &
        :rtype: bool

        * Translate IGES file given by filename into the document Return True if succeeded, and False in case of fail

        :param filename:
        :type filename: char *
        :param doc:
        :type doc: Handle_TDocStd_Document &
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_Perform(self, *args)


    def SetColorMode(self, *args):
        """
        * Set ColorMode for indicate read Colors or not.

        :param colormode:
        :type colormode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetColorMode(self, *args)


    def GetColorMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetColorMode(self, *args)


    def SetNameMode(self, *args):
        """
        * Set NameMode for indicate read Name or not.

        :param namemode:
        :type namemode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetNameMode(self, *args)


    def GetNameMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetNameMode(self, *args)


    def SetLayerMode(self, *args):
        """
        * Set LayerMode for indicate read Layers or not.

        :param layermode:
        :type layermode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetLayerMode(self, *args)


    def GetLayerMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetLayerMode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IGESCAFControl_Reader.Transfer = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_Transfer, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.Perform = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_Perform, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetColorMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.GetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetColorMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetNameMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.GetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetNameMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetLayerMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.GetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetLayerMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader._kill_pointed = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader__kill_pointed, None, IGESCAFControl_Reader)
IGESCAFControl_Reader_swigregister = _IGESCAFControl.IGESCAFControl_Reader_swigregister
IGESCAFControl_Reader_swigregister(IGESCAFControl_Reader)

class IGESCAFControl_Writer(OCC.IGESControl.IGESControl_Writer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a writer with an empty IGES model and sets ColorMode, LayerMode and NameMode to Standard_True.

        :rtype: None

        * Creates a reader tool and attaches it to an already existing Session Clears the session if it was not yet set for IGES

        :param WS:
        :type WS: Handle_XSControl_WorkSession &
        :param scratch: default value is Standard_True
        :type scratch: bool
        :rtype: None

        """
        _IGESCAFControl.IGESCAFControl_Writer_swiginit(self, _IGESCAFControl.new_IGESCAFControl_Writer(*args))

    def Transfer(self, *args):
        """
        * Transfers a document to a IGES model Returns True if translation is OK

        :param doc:
        :type doc: Handle_TDocStd_Document &
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_Transfer(self, *args)


    def Perform(self, *args):
        """
        :param doc:
        :type doc: Handle_TDocStd_Document &
        :param filename:
        :type filename: TCollection_AsciiString &
        :rtype: bool

        * Transfers a document and writes it to a IGES file Returns True if translation is OK

        :param doc:
        :type doc: Handle_TDocStd_Document &
        :param filename:
        :type filename: char *
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_Perform(self, *args)


    def SetColorMode(self, *args):
        """
        * Set ColorMode for indicate write Colors or not.

        :param colormode:
        :type colormode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetColorMode(self, *args)


    def GetColorMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetColorMode(self, *args)


    def SetNameMode(self, *args):
        """
        * Set NameMode for indicate write Name or not.

        :param namemode:
        :type namemode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetNameMode(self, *args)


    def GetNameMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetNameMode(self, *args)


    def SetLayerMode(self, *args):
        """
        * Set LayerMode for indicate write Layers or not.

        :param layermode:
        :type layermode: bool
        :rtype: None

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetLayerMode(self, *args)


    def GetLayerMode(self, *args):
        """
        :rtype: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetLayerMode(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IGESCAFControl_Writer.Transfer = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_Transfer, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.Perform = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_Perform, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetColorMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.GetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetColorMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetNameMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.GetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetNameMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetLayerMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.GetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetLayerMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer._kill_pointed = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer__kill_pointed, None, IGESCAFControl_Writer)
IGESCAFControl_Writer_swigregister = _IGESCAFControl.IGESCAFControl_Writer_swigregister
IGESCAFControl_Writer_swigregister(IGESCAFControl_Writer)



