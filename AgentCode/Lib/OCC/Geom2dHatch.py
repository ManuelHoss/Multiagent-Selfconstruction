# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dHatch.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dHatch', [dirname(__file__)])
        except ImportError:
            import _Geom2dHatch
            return _Geom2dHatch
        if fp is not None:
            try:
                _mod = imp.load_module('_Geom2dHatch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Geom2dHatch = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dHatch
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dHatch.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dHatch.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dHatch.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dHatch.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dHatch.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dHatch.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dHatch.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dHatch.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dHatch.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dHatch.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dHatch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.gp
import OCC.Standard
import OCC.TopAbs
import OCC.Geom2dAdaptor
import OCC.Adaptor2d
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.Geom2d
import OCC.TColgp
import OCC.IntRes2d
import OCC.HatchGen
import OCC.Geom2dInt
import OCC.math
import OCC.IntCurve
import OCC.Extrema
import OCC.Adaptor3d
import OCC.Geom
import OCC.Intf
import OCC.Bnd
class Geom2dHatch_ClassifierOfHatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param F:
        :type F: Geom2dHatch_ElementsOfHatcher &
        :param P:
        :type P: gp_Pnt2d
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_ClassifierOfHatcher(*args))

    def Perform(self, *args):
        """
        :param F:
        :type F: Geom2dHatch_ElementsOfHatcher &
        :param P:
        :type P: gp_Pnt2d
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Perform(self, *args)


    def State(self, *args):
        """
        :rtype: TopAbs_State

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_State(self, *args)


    def Rejected(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Rejected(self, *args)


    def NoWires(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_NoWires(self, *args)


    def Edge(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Edge(self, *args)


    def EdgeParameter(self, *args):
        """
        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_EdgeParameter(self, *args)


    def Position(self, *args):
        """
        :rtype: IntRes2d_Position

        """
        return _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Position(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_ClassifierOfHatcher.Perform = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Perform, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.State = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_State, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.Rejected = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Rejected, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.NoWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_NoWires, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.Edge = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Edge, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.EdgeParameter = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_EdgeParameter, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher.Position = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_Position, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_ClassifierOfHatcher__kill_pointed, None, Geom2dHatch_ClassifierOfHatcher)
Geom2dHatch_ClassifierOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_ClassifierOfHatcher_swigregister
Geom2dHatch_ClassifierOfHatcher_swigregister(Geom2dHatch_ClassifierOfHatcher)

class Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Geom2dHatch_HatchingsOfHatcher &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: Geom2dHatch_HatchingsOfHatcher &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Geom2dHatch_HatchingOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher.Initialize = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Initialize, None, Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher)
Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher.Key = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Key, None, Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher)
Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher.Value = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_Value, None, Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher)
Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher__kill_pointed, None, Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher)
Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_swigregister
Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher_swigregister(Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher)

class Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Geom2dHatch_MapOfElementsOfElementsOfHatcher &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher(*args))

    def Initialize(self, *args):
        """
        :param aMap:
        :type aMap: Geom2dHatch_MapOfElementsOfElementsOfHatcher &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Initialize(self, *args)


    def Key(self, *args):
        """
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Key(self, *args)


    def Value(self, *args):
        """
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Value(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher.Initialize = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Initialize, None, Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher.Key = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Key, None, Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher.Value = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_Value, None, Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher__kill_pointed, None, Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_swigregister
Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher_swigregister(Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher)

class Geom2dHatch_DataMapNodeOfHatchingsOfHatcher(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Geom2dHatch_HatchingOfHatcher &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher(*args))

    def GetKey(self):
        """GetKey(Geom2dHatch_DataMapNodeOfHatchingsOfHatcher self) -> Standard_Integer"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_GetKey(self)


    def SetKey(self, value):
        """SetKey(Geom2dHatch_DataMapNodeOfHatchingsOfHatcher self, Standard_Integer value)"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Geom2dHatch_HatchingOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Geom2dHatch_DataMapNodeOfHatchingsOfHatcher self)"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Geom2dHatch_DataMapNodeOfHatchingsOfHatcher self) -> Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.GetKey = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_GetKey, None, Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.SetKey = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_SetKey, None, Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.Value = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_Value, None, Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher__kill_pointed, None, Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.GetHandle = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_GetHandle, None, Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister
Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister(Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)

class Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swiginit(self, _Geom2dHatch.new_Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher(*args))
    DownCast = staticmethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.Nullify = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_Nullify, None, Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.IsNull = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_IsNull, None, Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.GetObject = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_GetObject, None, Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher__kill_pointed, None, Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister = _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_swigregister(Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher)

def Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_DownCast(AnObject):
    return _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_DownCast(AnObject)
Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_DownCast = _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfHatchingsOfHatcher_DownCast

class Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Geom2dHatch_ElementOfHatcher &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher(*args))

    def GetKey(self):
        """GetKey(Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher self) -> Standard_Integer"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_GetKey(self)


    def SetKey(self, value):
        """SetKey(Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher self, Standard_Integer value)"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_SetKey(self, value)


    def Value(self, *args):
        """
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher self)"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher self) -> Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher"""
        return _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.GetKey = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_GetKey, None, Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.SetKey = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_SetKey, None, Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.Value = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_Value, None, Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher__kill_pointed, None, Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.GetHandle = new_instancemethod(_Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_GetHandle, None, Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister
Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister(Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)

class Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swiginit(self, _Geom2dHatch.new_Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher(*args))
    DownCast = staticmethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.Nullify = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_Nullify, None, Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.IsNull = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_IsNull, None, Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.GetObject = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_GetObject, None, Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher__kill_pointed, None, Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister = _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_swigregister(Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher)

def Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_DownCast(AnObject):
    return _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_DownCast(AnObject)
Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_DownCast = _Geom2dHatch.Handle_Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher_DownCast

class Geom2dHatch_ElementOfHatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Geom2dHatch_ElementOfHatcher &
        :rtype: None

        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :param Orientation: default value is TopAbs_FORWARD
        :type Orientation: TopAbs_Orientation
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_ElementOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_ElementOfHatcher(*args))

    def Curve(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_ElementOfHatcher_Curve(self, *args)


    def ChangeCurve(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_ElementOfHatcher_ChangeCurve(self, *args)


    def Orientation(self, *args):
        """
        :param Orientation:
        :type Orientation: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _Geom2dHatch.Geom2dHatch_ElementOfHatcher_Orientation(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_ElementOfHatcher.Curve = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementOfHatcher_Curve, None, Geom2dHatch_ElementOfHatcher)
Geom2dHatch_ElementOfHatcher.ChangeCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementOfHatcher_ChangeCurve, None, Geom2dHatch_ElementOfHatcher)
Geom2dHatch_ElementOfHatcher.Orientation = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementOfHatcher_Orientation, None, Geom2dHatch_ElementOfHatcher)
Geom2dHatch_ElementOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementOfHatcher__kill_pointed, None, Geom2dHatch_ElementOfHatcher)
Geom2dHatch_ElementOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_ElementOfHatcher_swigregister
Geom2dHatch_ElementOfHatcher_swigregister(Geom2dHatch_ElementOfHatcher)

class Geom2dHatch_ElementsOfHatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Geom2dHatch_ElementsOfHatcher &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_ElementsOfHatcher(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Geom2dHatch_ElementOfHatcher &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_ChangeFind(self, *args)


    def Reject(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Reject(self, *args)


    def Segment(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param L:
        :type L: gp_Lin2d
        :param Par:
        :type Par: float &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Segment(self, *args)


    def OtherSegment(self, *args):
        """
        :param P:
        :type P: gp_Pnt2d
        :param L:
        :type L: gp_Lin2d
        :param Par:
        :type Par: float &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_OtherSegment(self, *args)


    def InitWires(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_InitWires(self, *args)


    def MoreWires(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_MoreWires(self, *args)


    def NextWire(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_NextWire(self, *args)


    def RejectWire(self, *args):
        """
        :param L:
        :type L: gp_Lin2d
        :param Par:
        :type Par: float
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_RejectWire(self, *args)


    def InitEdges(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_InitEdges(self, *args)


    def MoreEdges(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_MoreEdges(self, *args)


    def NextEdge(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_NextEdge(self, *args)


    def RejectEdge(self, *args):
        """
        :param L:
        :type L: gp_Lin2d
        :param Par:
        :type Par: float
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_RejectEdge(self, *args)


    def CurrentEdge(self, *args):
        """
        :param E:
        :type E: Geom2dAdaptor_Curve &
        :param Or:
        :type Or: TopAbs_Orientation &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_CurrentEdge(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_ElementsOfHatcher.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Clear, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Bind, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_IsBound, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_UnBind, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Find, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_ChangeFind, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.Reject = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Reject, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.Segment = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_Segment, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.OtherSegment = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_OtherSegment, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.InitWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_InitWires, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.MoreWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_MoreWires, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.NextWire = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_NextWire, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.RejectWire = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_RejectWire, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.InitEdges = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_InitEdges, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.MoreEdges = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_MoreEdges, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.NextEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_NextEdge, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.RejectEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_RejectEdge, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher.CurrentEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher_CurrentEdge, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_ElementsOfHatcher__kill_pointed, None, Geom2dHatch_ElementsOfHatcher)
Geom2dHatch_ElementsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_ElementsOfHatcher_swigregister
Geom2dHatch_ElementsOfHatcher_swigregister(Geom2dHatch_ElementsOfHatcher)

class Geom2dHatch_FClass2dOfClassifierOfHatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_FClass2dOfClassifierOfHatcher(*args))

    def Reset(self, *args):
        """
        :param L:
        :type L: gp_Lin2d
        :param P:
        :type P: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Reset(self, *args)


    def Compare(self, *args):
        """
        :param E:
        :type E: Geom2dAdaptor_Curve &
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Compare(self, *args)


    def Parameter(self, *args):
        """
        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Parameter(self, *args)


    def Intersector(self, *args):
        """
        :rtype: Geom2dHatch_Intersector

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Intersector(self, *args)


    def ClosestIntersection(self, *args):
        """
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_ClosestIntersection(self, *args)


    def State(self, *args):
        """
        :rtype: TopAbs_State

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_State(self, *args)


    def IsHeadOrEnd(self, *args):
        """
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_IsHeadOrEnd(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_FClass2dOfClassifierOfHatcher.Reset = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Reset, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.Compare = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Compare, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.Parameter = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Parameter, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.Intersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_Intersector, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.ClosestIntersection = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_ClosestIntersection, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.State = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_State, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher.IsHeadOrEnd = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_IsHeadOrEnd, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher__kill_pointed, None, Geom2dHatch_FClass2dOfClassifierOfHatcher)
Geom2dHatch_FClass2dOfClassifierOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_FClass2dOfClassifierOfHatcher_swigregister
Geom2dHatch_FClass2dOfClassifierOfHatcher_swigregister(Geom2dHatch_FClass2dOfClassifierOfHatcher)

class Geom2dHatch_Hatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Intersector:
        :type Intersector: Geom2dHatch_Intersector &
        :param Confusion2d:
        :type Confusion2d: float
        :param Confusion3d:
        :type Confusion3d: float
        :param KeepPnt: default value is Standard_False
        :type KeepPnt: bool
        :param KeepSeg: default value is Standard_False
        :type KeepSeg: bool
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_Hatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatcher(*args))

    def Intersector(self, *args):
        """
        :param Intersector:
        :type Intersector: Geom2dHatch_Intersector &
        :rtype: None

        :rtype: Geom2dHatch_Intersector

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Intersector(self, *args)


    def ChangeIntersector(self, *args):
        """
        :rtype: Geom2dHatch_Intersector

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ChangeIntersector(self, *args)


    def Confusion2d(self, *args):
        """
        :param Confusion:
        :type Confusion: float
        :rtype: None

        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Confusion2d(self, *args)


    def Confusion3d(self, *args):
        """
        :param Confusion:
        :type Confusion: float
        :rtype: None

        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Confusion3d(self, *args)


    def KeepPoints(self, *args):
        """
        :param Keep:
        :type Keep: bool
        :rtype: None

        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_KeepPoints(self, *args)


    def KeepSegments(self, *args):
        """
        :param Keep:
        :type Keep: bool
        :rtype: None

        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_KeepSegments(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Clear(self, *args)


    def ElementCurve(self, *args):
        """
        :param IndE:
        :type IndE: int
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ElementCurve(self, *args)


    def AddElement(self, *args):
        """
        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :param Orientation: default value is TopAbs_FORWARD
        :type Orientation: TopAbs_Orientation
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_AddElement(self, *args)


    def RemElement(self, *args):
        """
        :param IndE:
        :type IndE: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_RemElement(self, *args)


    def ClrElements(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ClrElements(self, *args)


    def HatchingCurve(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_HatchingCurve(self, *args)


    def AddHatching(self, *args):
        """
        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_AddHatching(self, *args)


    def RemHatching(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_RemHatching(self, *args)


    def ClrHatchings(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ClrHatchings(self, *args)


    def NbPoints(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_NbPoints(self, *args)


    def Point(self, *args):
        """
        :param IndH:
        :type IndH: int
        :param IndP:
        :type IndP: int
        :rtype: HatchGen_PointOnHatching

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Point(self, *args)


    def Trim(self, *args):
        """
        :rtype: None

        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :rtype: int

        :param IndH:
        :type IndH: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Trim(self, *args)


    def ComputeDomains(self, *args):
        """
        :rtype: None

        :param IndH:
        :type IndH: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ComputeDomains(self, *args)


    def TrimDone(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_TrimDone(self, *args)


    def TrimFailed(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_TrimFailed(self, *args)


    def Status(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: HatchGen_ErrorStatus

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Status(self, *args)


    def NbDomains(self, *args):
        """
        :param IndH:
        :type IndH: int
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_NbDomains(self, *args)


    def Domain(self, *args):
        """
        :param IndH:
        :type IndH: int
        :param IDom:
        :type IDom: int
        :rtype: HatchGen_Domain

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Domain(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_Hatcher.Intersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Intersector, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ChangeIntersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ChangeIntersector, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Confusion2d = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion2d, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Confusion3d = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion3d, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.KeepPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_KeepPoints, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.KeepSegments = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_KeepSegments, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Clear, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ElementCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ElementCurve, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.AddElement = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_AddElement, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.RemElement = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_RemElement, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ClrElements = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ClrElements, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.HatchingCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_HatchingCurve, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.AddHatching = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_AddHatching, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.RemHatching = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_RemHatching, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ClrHatchings = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ClrHatchings, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.NbPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_NbPoints, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Point = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Point, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Trim = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Trim, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ComputeDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ComputeDomains, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.TrimDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_TrimDone, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.TrimFailed = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_TrimFailed, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Status = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Status, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.NbDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_NbDomains, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Domain = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Domain, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Dump = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Dump, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher__kill_pointed, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher_swigregister = _Geom2dHatch.Geom2dHatch_Hatcher_swigregister
Geom2dHatch_Hatcher_swigregister(Geom2dHatch_Hatcher)

class Geom2dHatch_HatchingOfHatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Curve:
        :type Curve: Geom2dAdaptor_Curve &
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_HatchingOfHatcher(*args))

    def Curve(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Curve(self, *args)


    def ChangeCurve(self, *args):
        """
        :rtype: Geom2dAdaptor_Curve

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ChangeCurve(self, *args)


    def TrimDone(self, *args):
        """
        :param Flag:
        :type Flag: bool
        :rtype: None

        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_TrimDone(self, *args)


    def TrimFailed(self, *args):
        """
        :param Flag:
        :type Flag: bool
        :rtype: None

        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_TrimFailed(self, *args)


    def IsDone(self, *args):
        """
        :param Flag:
        :type Flag: bool
        :rtype: None

        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_IsDone(self, *args)


    def Status(self, *args):
        """
        :param Status:
        :type Status: HatchGen_ErrorStatus
        :rtype: None

        :rtype: HatchGen_ErrorStatus

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Status(self, *args)


    def AddPoint(self, *args):
        """
        :param Point:
        :type Point: HatchGen_PointOnHatching &
        :param Confusion:
        :type Confusion: float
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_AddPoint(self, *args)


    def NbPoints(self, *args):
        """
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_NbPoints(self, *args)


    def Point(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnHatching

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Point(self, *args)


    def ChangePoint(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_PointOnHatching

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ChangePoint(self, *args)


    def RemPoint(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_RemPoint(self, *args)


    def ClrPoints(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClrPoints(self, *args)


    def AddDomain(self, *args):
        """
        :param Domain:
        :type Domain: HatchGen_Domain &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_AddDomain(self, *args)


    def NbDomains(self, *args):
        """
        :rtype: int

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_NbDomains(self, *args)


    def Domain(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: HatchGen_Domain

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Domain(self, *args)


    def RemDomain(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_RemDomain(self, *args)


    def ClrDomains(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClrDomains(self, *args)


    def ClassificationPoint(self, *args):
        """
        :rtype: gp_Pnt2d

        """
        return _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClassificationPoint(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_HatchingOfHatcher.Curve = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Curve, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.ChangeCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ChangeCurve, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.TrimDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_TrimDone, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.TrimFailed = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_TrimFailed, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.IsDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_IsDone, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.Status = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Status, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.AddPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_AddPoint, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.NbPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_NbPoints, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.Point = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Point, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.ChangePoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ChangePoint, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.RemPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_RemPoint, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.ClrPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClrPoints, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.AddDomain = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_AddDomain, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.NbDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_NbDomains, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.Domain = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_Domain, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.RemDomain = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_RemDomain, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.ClrDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClrDomains, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher.ClassificationPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher_ClassificationPoint, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingOfHatcher__kill_pointed, None, Geom2dHatch_HatchingOfHatcher)
Geom2dHatch_HatchingOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_HatchingOfHatcher_swigregister
Geom2dHatch_HatchingOfHatcher_swigregister(Geom2dHatch_HatchingOfHatcher)

class Geom2dHatch_HatchingsOfHatcher(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_HatchingsOfHatcher(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Geom2dHatch_HatchingsOfHatcher &
        :rtype: Geom2dHatch_HatchingsOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Geom2dHatch_HatchingsOfHatcher &
        :rtype: Geom2dHatch_HatchingsOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Geom2dHatch_HatchingOfHatcher &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_HatchingOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_HatchingOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Geom2dHatch_HatchingsOfHatcher self)"""
        return _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_HatchingsOfHatcher.Assign = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Assign, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.Set = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Set, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.ReSize = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ReSize, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Clear, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Bind, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_IsBound, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_UnBind, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Find, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ChangeFind, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.Find1 = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_Find1, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher.ChangeFind1 = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_ChangeFind1, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_HatchingsOfHatcher__kill_pointed, None, Geom2dHatch_HatchingsOfHatcher)
Geom2dHatch_HatchingsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_HatchingsOfHatcher_swigregister
Geom2dHatch_HatchingsOfHatcher_swigregister(Geom2dHatch_HatchingsOfHatcher)

class Geom2dHatch_Intersector(OCC.Geom2dInt.Geom2dInt_GInter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConfusionTolerance(self, *args):
        """
        * Returns the confusion tolerance of the intersector.

        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_ConfusionTolerance(self, *args)


    def SetConfusionTolerance(self, *args):
        """
        * Sets the confusion tolerance of the intersector.

        :param Confusion:
        :type Confusion: float
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_SetConfusionTolerance(self, *args)


    def TangencyTolerance(self, *args):
        """
        * Returns the tangency tolerance of the intersector.

        :rtype: float

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_TangencyTolerance(self, *args)


    def SetTangencyTolerance(self, *args):
        """
        * Sets the tangency tolerance of the intersector.

        :param Tangency:
        :type Tangency: float
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_SetTangencyTolerance(self, *args)


    def Intersect(self, *args):
        """
        * Intersects the curves C1 and C2. The results are retreived by the usual methods described in IntRes2d_Intersection. Creates an intersector.

        :param C1:
        :type C1: Geom2dAdaptor_Curve &
        :param C2:
        :type C2: Geom2dAdaptor_Curve &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_Intersect(self, *args)


    def __init__(self, *args):
        """
        * Creates an intersector.

        :param Confusion:
        :type Confusion: float
        :param Tangency:
        :type Tangency: float
        :rtype: None

        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_Intersector_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Intersector(*args))

    def Perform(self, *args):
        """
        * Performs the intersection between the 2d line segment (<L>, <P>) and the Curve <E>. The line segment is the part of the 2d line <L> of parameter range [0, <P>] (P is positive and can be RealLast()). Tol is the Tolerance on the segment. The order is relevant, the first argument is the segment, the second the Edge.

        :param L:
        :type L: gp_Lin2d
        :param P:
        :type P: float
        :param Tol:
        :type Tol: float
        :param E:
        :type E: Geom2dAdaptor_Curve &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_Perform(self, *args)


    def LocalGeometry(self, *args):
        """
        * Returns in <T>, <N> and <C> the tangent, normal and curvature of the edge <E> at parameter value <U>.

        :param E:
        :type E: Geom2dAdaptor_Curve &
        :param U:
        :type U: float
        :param T:
        :type T: gp_Dir2d
        :param N:
        :type N: gp_Dir2d
        :param C:
        :type C: float &
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_Intersector_LocalGeometry(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_Intersector.ConfusionTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_ConfusionTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.SetConfusionTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_SetConfusionTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.TangencyTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_TangencyTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.SetTangencyTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_SetTangencyTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.Intersect = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_Intersect, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.Perform = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_Perform, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.LocalGeometry = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_LocalGeometry, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector__kill_pointed, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector_swigregister = _Geom2dHatch.Geom2dHatch_Intersector_swigregister
Geom2dHatch_Intersector_swigregister(Geom2dHatch_Intersector)

class Geom2dHatch_MapOfElementsOfElementsOfHatcher(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_MapOfElementsOfElementsOfHatcher(*args))

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Geom2dHatch_MapOfElementsOfElementsOfHatcher &
        :rtype: Geom2dHatch_MapOfElementsOfElementsOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Geom2dHatch_MapOfElementsOfElementsOfHatcher &
        :rtype: Geom2dHatch_MapOfElementsOfElementsOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Set(self, *args)


    def ReSize(self, *args):
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ReSize(self, *args)


    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Clear(self, *args)


    def Bind(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Geom2dHatch_ElementOfHatcher &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Bind(self, *args)


    def IsBound(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_UnBind(self, *args)


    def Find(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Find(self, *args)


    def ChangeFind(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Geom2dHatch_ElementOfHatcher

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ChangeFind(self, *args)


    def Find1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Find1(self, *args)


    def ChangeFind1(self, *args):
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ChangeFind1(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Geom2dHatch_MapOfElementsOfElementsOfHatcher self)"""
        return _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom2dHatch_MapOfElementsOfElementsOfHatcher.Assign = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Assign, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.Set = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Set, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.ReSize = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ReSize, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Clear, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Bind, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_IsBound, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_UnBind, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Find, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ChangeFind, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.Find1 = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_Find1, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher.ChangeFind1 = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_ChangeFind1, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher._kill_pointed = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher__kill_pointed, None, Geom2dHatch_MapOfElementsOfElementsOfHatcher)
Geom2dHatch_MapOfElementsOfElementsOfHatcher_swigregister = _Geom2dHatch.Geom2dHatch_MapOfElementsOfElementsOfHatcher_swigregister
Geom2dHatch_MapOfElementsOfElementsOfHatcher_swigregister(Geom2dHatch_MapOfElementsOfElementsOfHatcher)



