# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Aspect.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Aspect', [dirname(__file__)])
        except ImportError:
            import _Aspect
            return _Aspect
        if fp is not None:
            try:
                _mod = imp.load_module('_Aspect', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Aspect = swig_import_helper()
    del swig_import_helper
else:
    import _Aspect
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Aspect.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Aspect.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Aspect.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Aspect.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Aspect.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Aspect.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Aspect.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Aspect.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Aspect.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Aspect.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Aspect.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Aspect.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Aspect.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Aspect.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Aspect.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Aspect.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Aspect.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Aspect.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Quantity
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd
import OCC.TShort
import OCC.TColQuantity

_Aspect.Aspect_CP_North_swigconstant(_Aspect)
Aspect_CP_North = _Aspect.Aspect_CP_North

_Aspect.Aspect_CP_NorthEast_swigconstant(_Aspect)
Aspect_CP_NorthEast = _Aspect.Aspect_CP_NorthEast

_Aspect.Aspect_CP_East_swigconstant(_Aspect)
Aspect_CP_East = _Aspect.Aspect_CP_East

_Aspect.Aspect_CP_SouthEast_swigconstant(_Aspect)
Aspect_CP_SouthEast = _Aspect.Aspect_CP_SouthEast

_Aspect.Aspect_CP_South_swigconstant(_Aspect)
Aspect_CP_South = _Aspect.Aspect_CP_South

_Aspect.Aspect_CP_SouthWest_swigconstant(_Aspect)
Aspect_CP_SouthWest = _Aspect.Aspect_CP_SouthWest

_Aspect.Aspect_CP_West_swigconstant(_Aspect)
Aspect_CP_West = _Aspect.Aspect_CP_West

_Aspect.Aspect_CP_NorthWest_swigconstant(_Aspect)
Aspect_CP_NorthWest = _Aspect.Aspect_CP_NorthWest

_Aspect.Aspect_CP_Center_swigconstant(_Aspect)
Aspect_CP_Center = _Aspect.Aspect_CP_Center

_Aspect.Aspect_FM_NONE_swigconstant(_Aspect)
Aspect_FM_NONE = _Aspect.Aspect_FM_NONE

_Aspect.Aspect_FM_CENTERED_swigconstant(_Aspect)
Aspect_FM_CENTERED = _Aspect.Aspect_FM_CENTERED

_Aspect.Aspect_FM_TILED_swigconstant(_Aspect)
Aspect_FM_TILED = _Aspect.Aspect_FM_TILED

_Aspect.Aspect_FM_STRETCH_swigconstant(_Aspect)
Aspect_FM_STRETCH = _Aspect.Aspect_FM_STRETCH

_Aspect.Aspect_FOSP_A0_swigconstant(_Aspect)
Aspect_FOSP_A0 = _Aspect.Aspect_FOSP_A0

_Aspect.Aspect_FOSP_A1_swigconstant(_Aspect)
Aspect_FOSP_A1 = _Aspect.Aspect_FOSP_A1

_Aspect.Aspect_FOSP_A2_swigconstant(_Aspect)
Aspect_FOSP_A2 = _Aspect.Aspect_FOSP_A2

_Aspect.Aspect_FOSP_A3_swigconstant(_Aspect)
Aspect_FOSP_A3 = _Aspect.Aspect_FOSP_A3

_Aspect.Aspect_FOSP_A4_swigconstant(_Aspect)
Aspect_FOSP_A4 = _Aspect.Aspect_FOSP_A4

_Aspect.Aspect_FOSP_A5_swigconstant(_Aspect)
Aspect_FOSP_A5 = _Aspect.Aspect_FOSP_A5

_Aspect.Aspect_FOSP_K_LONG_swigconstant(_Aspect)
Aspect_FOSP_K_LONG = _Aspect.Aspect_FOSP_K_LONG

_Aspect.Aspect_FOSP_K_SHORT_swigconstant(_Aspect)
Aspect_FOSP_K_SHORT = _Aspect.Aspect_FOSP_K_SHORT

_Aspect.Aspect_FOSP_J_LONG_swigconstant(_Aspect)
Aspect_FOSP_J_LONG = _Aspect.Aspect_FOSP_J_LONG

_Aspect.Aspect_FOSP_J_SHORT_swigconstant(_Aspect)
Aspect_FOSP_J_SHORT = _Aspect.Aspect_FOSP_J_SHORT

_Aspect.Aspect_FOSP_H_LONG_swigconstant(_Aspect)
Aspect_FOSP_H_LONG = _Aspect.Aspect_FOSP_H_LONG

_Aspect.Aspect_FOSP_H_SHORT_swigconstant(_Aspect)
Aspect_FOSP_H_SHORT = _Aspect.Aspect_FOSP_H_SHORT

_Aspect.Aspect_FOSP_G_LONG_swigconstant(_Aspect)
Aspect_FOSP_G_LONG = _Aspect.Aspect_FOSP_G_LONG

_Aspect.Aspect_FOSP_G_SHORT_swigconstant(_Aspect)
Aspect_FOSP_G_SHORT = _Aspect.Aspect_FOSP_G_SHORT

_Aspect.Aspect_FOSP_F_swigconstant(_Aspect)
Aspect_FOSP_F = _Aspect.Aspect_FOSP_F

_Aspect.Aspect_FOSP_E_swigconstant(_Aspect)
Aspect_FOSP_E = _Aspect.Aspect_FOSP_E

_Aspect.Aspect_FOSP_D_swigconstant(_Aspect)
Aspect_FOSP_D = _Aspect.Aspect_FOSP_D

_Aspect.Aspect_FOSP_C_swigconstant(_Aspect)
Aspect_FOSP_C = _Aspect.Aspect_FOSP_C

_Aspect.Aspect_FOSP_B_swigconstant(_Aspect)
Aspect_FOSP_B = _Aspect.Aspect_FOSP_B

_Aspect.Aspect_FOSP_A_swigconstant(_Aspect)
Aspect_FOSP_A = _Aspect.Aspect_FOSP_A

_Aspect.Aspect_FOSP_UNKNOWN_swigconstant(_Aspect)
Aspect_FOSP_UNKNOWN = _Aspect.Aspect_FOSP_UNKNOWN

_Aspect.Aspect_GFM_NONE_swigconstant(_Aspect)
Aspect_GFM_NONE = _Aspect.Aspect_GFM_NONE

_Aspect.Aspect_GFM_HOR_swigconstant(_Aspect)
Aspect_GFM_HOR = _Aspect.Aspect_GFM_HOR

_Aspect.Aspect_GFM_VER_swigconstant(_Aspect)
Aspect_GFM_VER = _Aspect.Aspect_GFM_VER

_Aspect.Aspect_GFM_DIAG1_swigconstant(_Aspect)
Aspect_GFM_DIAG1 = _Aspect.Aspect_GFM_DIAG1

_Aspect.Aspect_GFM_DIAG2_swigconstant(_Aspect)
Aspect_GFM_DIAG2 = _Aspect.Aspect_GFM_DIAG2

_Aspect.Aspect_GFM_CORNER1_swigconstant(_Aspect)
Aspect_GFM_CORNER1 = _Aspect.Aspect_GFM_CORNER1

_Aspect.Aspect_GFM_CORNER2_swigconstant(_Aspect)
Aspect_GFM_CORNER2 = _Aspect.Aspect_GFM_CORNER2

_Aspect.Aspect_GFM_CORNER3_swigconstant(_Aspect)
Aspect_GFM_CORNER3 = _Aspect.Aspect_GFM_CORNER3

_Aspect.Aspect_GFM_CORNER4_swigconstant(_Aspect)
Aspect_GFM_CORNER4 = _Aspect.Aspect_GFM_CORNER4

_Aspect.Aspect_GDM_Lines_swigconstant(_Aspect)
Aspect_GDM_Lines = _Aspect.Aspect_GDM_Lines

_Aspect.Aspect_GDM_Points_swigconstant(_Aspect)
Aspect_GDM_Points = _Aspect.Aspect_GDM_Points

_Aspect.Aspect_GDM_None_swigconstant(_Aspect)
Aspect_GDM_None = _Aspect.Aspect_GDM_None

_Aspect.Aspect_GT_Rectangular_swigconstant(_Aspect)
Aspect_GT_Rectangular = _Aspect.Aspect_GT_Rectangular

_Aspect.Aspect_GT_Circular_swigconstant(_Aspect)
Aspect_GT_Circular = _Aspect.Aspect_GT_Circular

_Aspect.Aspect_HS_HORIZONTAL_swigconstant(_Aspect)
Aspect_HS_HORIZONTAL = _Aspect.Aspect_HS_HORIZONTAL

_Aspect.Aspect_HS_HORIZONTAL_WIDE_swigconstant(_Aspect)
Aspect_HS_HORIZONTAL_WIDE = _Aspect.Aspect_HS_HORIZONTAL_WIDE

_Aspect.Aspect_HS_VERTICAL_swigconstant(_Aspect)
Aspect_HS_VERTICAL = _Aspect.Aspect_HS_VERTICAL

_Aspect.Aspect_HS_VERTICAL_WIDE_swigconstant(_Aspect)
Aspect_HS_VERTICAL_WIDE = _Aspect.Aspect_HS_VERTICAL_WIDE

_Aspect.Aspect_HS_DIAGONAL_45_swigconstant(_Aspect)
Aspect_HS_DIAGONAL_45 = _Aspect.Aspect_HS_DIAGONAL_45

_Aspect.Aspect_HS_DIAGONAL_45_WIDE_swigconstant(_Aspect)
Aspect_HS_DIAGONAL_45_WIDE = _Aspect.Aspect_HS_DIAGONAL_45_WIDE

_Aspect.Aspect_HS_DIAGONAL_135_swigconstant(_Aspect)
Aspect_HS_DIAGONAL_135 = _Aspect.Aspect_HS_DIAGONAL_135

_Aspect.Aspect_HS_DIAGONAL_135_WIDE_swigconstant(_Aspect)
Aspect_HS_DIAGONAL_135_WIDE = _Aspect.Aspect_HS_DIAGONAL_135_WIDE

_Aspect.Aspect_HS_GRID_swigconstant(_Aspect)
Aspect_HS_GRID = _Aspect.Aspect_HS_GRID

_Aspect.Aspect_HS_GRID_WIDE_swigconstant(_Aspect)
Aspect_HS_GRID_WIDE = _Aspect.Aspect_HS_GRID_WIDE

_Aspect.Aspect_HS_GRID_DIAGONAL_swigconstant(_Aspect)
Aspect_HS_GRID_DIAGONAL = _Aspect.Aspect_HS_GRID_DIAGONAL

_Aspect.Aspect_HS_GRID_DIAGONAL_WIDE_swigconstant(_Aspect)
Aspect_HS_GRID_DIAGONAL_WIDE = _Aspect.Aspect_HS_GRID_DIAGONAL_WIDE

_Aspect.Aspect_IS_EMPTY_swigconstant(_Aspect)
Aspect_IS_EMPTY = _Aspect.Aspect_IS_EMPTY

_Aspect.Aspect_IS_HOLLOW_swigconstant(_Aspect)
Aspect_IS_HOLLOW = _Aspect.Aspect_IS_HOLLOW

_Aspect.Aspect_IS_HATCH_swigconstant(_Aspect)
Aspect_IS_HATCH = _Aspect.Aspect_IS_HATCH

_Aspect.Aspect_IS_SOLID_swigconstant(_Aspect)
Aspect_IS_SOLID = _Aspect.Aspect_IS_SOLID

_Aspect.Aspect_IS_HIDDENLINE_swigconstant(_Aspect)
Aspect_IS_HIDDENLINE = _Aspect.Aspect_IS_HIDDENLINE

_Aspect.Aspect_IS_POINT_swigconstant(_Aspect)
Aspect_IS_POINT = _Aspect.Aspect_IS_POINT

_Aspect.Aspect_LPID_DIRPLOT_swigconstant(_Aspect)
Aspect_LPID_DIRPLOT = _Aspect.Aspect_LPID_DIRPLOT

_Aspect.Aspect_LPID_DIRPARPLO_swigconstant(_Aspect)
Aspect_LPID_DIRPARPLO = _Aspect.Aspect_LPID_DIRPARPLO

_Aspect.Aspect_LPID_ALLDIRS_swigconstant(_Aspect)
Aspect_LPID_ALLDIRS = _Aspect.Aspect_LPID_ALLDIRS

_Aspect.Aspect_PM_DPLOTTER_swigconstant(_Aspect)
Aspect_PM_DPLOTTER = _Aspect.Aspect_PM_DPLOTTER

_Aspect.Aspect_PM_FILEONLY_swigconstant(_Aspect)
Aspect_PM_FILEONLY = _Aspect.Aspect_PM_FILEONLY

_Aspect.Aspect_PM_NPLOTTER_swigconstant(_Aspect)
Aspect_PM_NPLOTTER = _Aspect.Aspect_PM_NPLOTTER

_Aspect.Aspect_PO_CENTER_swigconstant(_Aspect)
Aspect_PO_CENTER = _Aspect.Aspect_PO_CENTER

_Aspect.Aspect_PO_BOTTOMLEFT_swigconstant(_Aspect)
Aspect_PO_BOTTOMLEFT = _Aspect.Aspect_PO_BOTTOMLEFT

_Aspect.Aspect_PO_TOPLEFT_swigconstant(_Aspect)
Aspect_PO_TOPLEFT = _Aspect.Aspect_PO_TOPLEFT

_Aspect.Aspect_PO_TOPRIGHT_swigconstant(_Aspect)
Aspect_PO_TOPRIGHT = _Aspect.Aspect_PO_TOPRIGHT

_Aspect.Aspect_PO_BOTTOMRIGHT_swigconstant(_Aspect)
Aspect_PO_BOTTOMRIGHT = _Aspect.Aspect_PO_BOTTOMRIGHT

_Aspect.Aspect_PO_UNKNOWN_swigconstant(_Aspect)
Aspect_PO_UNKNOWN = _Aspect.Aspect_PO_UNKNOWN

_Aspect.Aspect_POM_Off_swigconstant(_Aspect)
Aspect_POM_Off = _Aspect.Aspect_POM_Off

_Aspect.Aspect_POM_Fill_swigconstant(_Aspect)
Aspect_POM_Fill = _Aspect.Aspect_POM_Fill

_Aspect.Aspect_POM_Line_swigconstant(_Aspect)
Aspect_POM_Line = _Aspect.Aspect_POM_Line

_Aspect.Aspect_POM_Point_swigconstant(_Aspect)
Aspect_POM_Point = _Aspect.Aspect_POM_Point

_Aspect.Aspect_POM_All_swigconstant(_Aspect)
Aspect_POM_All = _Aspect.Aspect_POM_All

_Aspect.Aspect_POM_None_swigconstant(_Aspect)
Aspect_POM_None = _Aspect.Aspect_POM_None

_Aspect.Aspect_POM_Mask_swigconstant(_Aspect)
Aspect_POM_Mask = _Aspect.Aspect_POM_Mask

_Aspect.Aspect_PA_STRETCH_swigconstant(_Aspect)
Aspect_PA_STRETCH = _Aspect.Aspect_PA_STRETCH

_Aspect.Aspect_PA_TILE_swigconstant(_Aspect)
Aspect_PA_TILE = _Aspect.Aspect_PA_TILE

_Aspect.Aspect_TOC_Generic_swigconstant(_Aspect)
Aspect_TOC_Generic = _Aspect.Aspect_TOC_Generic

_Aspect.Aspect_TOC_ColorCube_swigconstant(_Aspect)
Aspect_TOC_ColorCube = _Aspect.Aspect_TOC_ColorCube

_Aspect.Aspect_TOC_ColorRamp_swigconstant(_Aspect)
Aspect_TOC_ColorRamp = _Aspect.Aspect_TOC_ColorRamp

_Aspect.Aspect_TOCSD_AUTO_swigconstant(_Aspect)
Aspect_TOCSD_AUTO = _Aspect.Aspect_TOCSD_AUTO

_Aspect.Aspect_TOCSD_USER_swigconstant(_Aspect)
Aspect_TOCSD_USER = _Aspect.Aspect_TOCSD_USER

_Aspect.Aspect_TOCSO_NONE_swigconstant(_Aspect)
Aspect_TOCSO_NONE = _Aspect.Aspect_TOCSO_NONE

_Aspect.Aspect_TOCSO_LEFT_swigconstant(_Aspect)
Aspect_TOCSO_LEFT = _Aspect.Aspect_TOCSO_LEFT

_Aspect.Aspect_TOCSO_RIGHT_swigconstant(_Aspect)
Aspect_TOCSO_RIGHT = _Aspect.Aspect_TOCSO_RIGHT

_Aspect.Aspect_TOCSO_CENTER_swigconstant(_Aspect)
Aspect_TOCSO_CENTER = _Aspect.Aspect_TOCSO_CENTER

_Aspect.Aspect_TOCSP_NONE_swigconstant(_Aspect)
Aspect_TOCSP_NONE = _Aspect.Aspect_TOCSP_NONE

_Aspect.Aspect_TOCSP_LEFT_swigconstant(_Aspect)
Aspect_TOCSP_LEFT = _Aspect.Aspect_TOCSP_LEFT

_Aspect.Aspect_TOCSP_RIGHT_swigconstant(_Aspect)
Aspect_TOCSP_RIGHT = _Aspect.Aspect_TOCSP_RIGHT

_Aspect.Aspect_TOCSP_CENTER_swigconstant(_Aspect)
Aspect_TOCSP_CENTER = _Aspect.Aspect_TOCSP_CENTER

_Aspect.Aspect_TOCS_BlackAndWhite_swigconstant(_Aspect)
Aspect_TOCS_BlackAndWhite = _Aspect.Aspect_TOCS_BlackAndWhite

_Aspect.Aspect_TOCS_GreyScale_swigconstant(_Aspect)
Aspect_TOCS_GreyScale = _Aspect.Aspect_TOCS_GreyScale

_Aspect.Aspect_TOCS_RGB_swigconstant(_Aspect)
Aspect_TOCS_RGB = _Aspect.Aspect_TOCS_RGB

_Aspect.Aspect_TOC_BOTTOM_LEFT_swigconstant(_Aspect)
Aspect_TOC_BOTTOM_LEFT = _Aspect.Aspect_TOC_BOTTOM_LEFT

_Aspect.Aspect_TOC_BOTTOM_RIGHT_swigconstant(_Aspect)
Aspect_TOC_BOTTOM_RIGHT = _Aspect.Aspect_TOC_BOTTOM_RIGHT

_Aspect.Aspect_TOC_TOP_LEFT_swigconstant(_Aspect)
Aspect_TOC_TOP_LEFT = _Aspect.Aspect_TOC_TOP_LEFT

_Aspect.Aspect_TOC_TOP_RIGHT_swigconstant(_Aspect)
Aspect_TOC_TOP_RIGHT = _Aspect.Aspect_TOC_TOP_RIGHT

_Aspect.Aspect_TOD_RELATIVE_swigconstant(_Aspect)
Aspect_TOD_RELATIVE = _Aspect.Aspect_TOD_RELATIVE

_Aspect.Aspect_TOD_ABSOLUTE_swigconstant(_Aspect)
Aspect_TOD_ABSOLUTE = _Aspect.Aspect_TOD_ABSOLUTE

_Aspect.Aspect_TODT_NORMAL_swigconstant(_Aspect)
Aspect_TODT_NORMAL = _Aspect.Aspect_TODT_NORMAL

_Aspect.Aspect_TODT_SUBTITLE_swigconstant(_Aspect)
Aspect_TODT_SUBTITLE = _Aspect.Aspect_TODT_SUBTITLE

_Aspect.Aspect_TODT_DEKALE_swigconstant(_Aspect)
Aspect_TODT_DEKALE = _Aspect.Aspect_TODT_DEKALE

_Aspect.Aspect_TODT_BLEND_swigconstant(_Aspect)
Aspect_TODT_BLEND = _Aspect.Aspect_TODT_BLEND

_Aspect.Aspect_TODT_DIMENSION_swigconstant(_Aspect)
Aspect_TODT_DIMENSION = _Aspect.Aspect_TODT_DIMENSION

_Aspect.Aspect_TODM_REPLACE_swigconstant(_Aspect)
Aspect_TODM_REPLACE = _Aspect.Aspect_TODM_REPLACE

_Aspect.Aspect_TODM_ERASE_swigconstant(_Aspect)
Aspect_TODM_ERASE = _Aspect.Aspect_TODM_ERASE

_Aspect.Aspect_TODM_XOR_swigconstant(_Aspect)
Aspect_TODM_XOR = _Aspect.Aspect_TODM_XOR

_Aspect.Aspect_TODM_XORLIGHT_swigconstant(_Aspect)
Aspect_TODM_XORLIGHT = _Aspect.Aspect_TODM_XORLIGHT

_Aspect.Aspect_TOE_VISIBLE_swigconstant(_Aspect)
Aspect_TOE_VISIBLE = _Aspect.Aspect_TOE_VISIBLE

_Aspect.Aspect_TOE_INVISIBLE_swigconstant(_Aspect)
Aspect_TOE_INVISIBLE = _Aspect.Aspect_TOE_INVISIBLE

_Aspect.Aspect_TOFM_BOTH_SIDE_swigconstant(_Aspect)
Aspect_TOFM_BOTH_SIDE = _Aspect.Aspect_TOFM_BOTH_SIDE

_Aspect.Aspect_TOFM_BACK_SIDE_swigconstant(_Aspect)
Aspect_TOFM_BACK_SIDE = _Aspect.Aspect_TOFM_BACK_SIDE

_Aspect.Aspect_TOFM_FRONT_SIDE_swigconstant(_Aspect)
Aspect_TOFM_FRONT_SIDE = _Aspect.Aspect_TOFM_FRONT_SIDE

_Aspect.Aspect_TOF_DEFAULT_swigconstant(_Aspect)
Aspect_TOF_DEFAULT = _Aspect.Aspect_TOF_DEFAULT

_Aspect.Aspect_TOF_COURIER_swigconstant(_Aspect)
Aspect_TOF_COURIER = _Aspect.Aspect_TOF_COURIER

_Aspect.Aspect_TOF_HELVETICA_swigconstant(_Aspect)
Aspect_TOF_HELVETICA = _Aspect.Aspect_TOF_HELVETICA

_Aspect.Aspect_TOF_TIMES_swigconstant(_Aspect)
Aspect_TOF_TIMES = _Aspect.Aspect_TOF_TIMES

_Aspect.Aspect_TOF_USERDEFINED_swigconstant(_Aspect)
Aspect_TOF_USERDEFINED = _Aspect.Aspect_TOF_USERDEFINED

_Aspect.Aspect_TOHM_COLOR_swigconstant(_Aspect)
Aspect_TOHM_COLOR = _Aspect.Aspect_TOHM_COLOR

_Aspect.Aspect_TOHM_BLINK_swigconstant(_Aspect)
Aspect_TOHM_BLINK = _Aspect.Aspect_TOHM_BLINK

_Aspect.Aspect_TOHM_BOUNDBOX_swigconstant(_Aspect)
Aspect_TOHM_BOUNDBOX = _Aspect.Aspect_TOHM_BOUNDBOX

_Aspect.Aspect_TOL_OVERLAY_swigconstant(_Aspect)
Aspect_TOL_OVERLAY = _Aspect.Aspect_TOL_OVERLAY

_Aspect.Aspect_TOL_UNDERLAY_swigconstant(_Aspect)
Aspect_TOL_UNDERLAY = _Aspect.Aspect_TOL_UNDERLAY

_Aspect.Aspect_TOL_SOLID_swigconstant(_Aspect)
Aspect_TOL_SOLID = _Aspect.Aspect_TOL_SOLID

_Aspect.Aspect_TOL_DASH_swigconstant(_Aspect)
Aspect_TOL_DASH = _Aspect.Aspect_TOL_DASH

_Aspect.Aspect_TOL_DOT_swigconstant(_Aspect)
Aspect_TOL_DOT = _Aspect.Aspect_TOL_DOT

_Aspect.Aspect_TOL_DOTDASH_swigconstant(_Aspect)
Aspect_TOL_DOTDASH = _Aspect.Aspect_TOL_DOTDASH

_Aspect.Aspect_TOL_USERDEFINED_swigconstant(_Aspect)
Aspect_TOL_USERDEFINED = _Aspect.Aspect_TOL_USERDEFINED

_Aspect.Aspect_TOM_POINT_swigconstant(_Aspect)
Aspect_TOM_POINT = _Aspect.Aspect_TOM_POINT

_Aspect.Aspect_TOM_PLUS_swigconstant(_Aspect)
Aspect_TOM_PLUS = _Aspect.Aspect_TOM_PLUS

_Aspect.Aspect_TOM_STAR_swigconstant(_Aspect)
Aspect_TOM_STAR = _Aspect.Aspect_TOM_STAR

_Aspect.Aspect_TOM_X_swigconstant(_Aspect)
Aspect_TOM_X = _Aspect.Aspect_TOM_X

_Aspect.Aspect_TOM_O_swigconstant(_Aspect)
Aspect_TOM_O = _Aspect.Aspect_TOM_O

_Aspect.Aspect_TOM_O_POINT_swigconstant(_Aspect)
Aspect_TOM_O_POINT = _Aspect.Aspect_TOM_O_POINT

_Aspect.Aspect_TOM_O_PLUS_swigconstant(_Aspect)
Aspect_TOM_O_PLUS = _Aspect.Aspect_TOM_O_PLUS

_Aspect.Aspect_TOM_O_STAR_swigconstant(_Aspect)
Aspect_TOM_O_STAR = _Aspect.Aspect_TOM_O_STAR

_Aspect.Aspect_TOM_O_X_swigconstant(_Aspect)
Aspect_TOM_O_X = _Aspect.Aspect_TOM_O_X

_Aspect.Aspect_TOM_RING1_swigconstant(_Aspect)
Aspect_TOM_RING1 = _Aspect.Aspect_TOM_RING1

_Aspect.Aspect_TOM_RING2_swigconstant(_Aspect)
Aspect_TOM_RING2 = _Aspect.Aspect_TOM_RING2

_Aspect.Aspect_TOM_RING3_swigconstant(_Aspect)
Aspect_TOM_RING3 = _Aspect.Aspect_TOM_RING3

_Aspect.Aspect_TOM_BALL_swigconstant(_Aspect)
Aspect_TOM_BALL = _Aspect.Aspect_TOM_BALL

_Aspect.Aspect_TOM_USERDEFINED_swigconstant(_Aspect)
Aspect_TOM_USERDEFINED = _Aspect.Aspect_TOM_USERDEFINED

_Aspect.Aspect_TOP_UNKNOWN_swigconstant(_Aspect)
Aspect_TOP_UNKNOWN = _Aspect.Aspect_TOP_UNKNOWN

_Aspect.Aspect_TOP_POLYLINE_swigconstant(_Aspect)
Aspect_TOP_POLYLINE = _Aspect.Aspect_TOP_POLYLINE

_Aspect.Aspect_TOP_POLYGON_swigconstant(_Aspect)
Aspect_TOP_POLYGON = _Aspect.Aspect_TOP_POLYGON

_Aspect.Aspect_TOP_SEGMENTS_swigconstant(_Aspect)
Aspect_TOP_SEGMENTS = _Aspect.Aspect_TOP_SEGMENTS

_Aspect.Aspect_TOP_ARCS_swigconstant(_Aspect)
Aspect_TOP_ARCS = _Aspect.Aspect_TOP_ARCS

_Aspect.Aspect_TOP_POLYARCS_swigconstant(_Aspect)
Aspect_TOP_POLYARCS = _Aspect.Aspect_TOP_POLYARCS

_Aspect.Aspect_TOP_POINTS_swigconstant(_Aspect)
Aspect_TOP_POINTS = _Aspect.Aspect_TOP_POINTS

_Aspect.Aspect_TOP_MARKERS_swigconstant(_Aspect)
Aspect_TOP_MARKERS = _Aspect.Aspect_TOP_MARKERS

_Aspect.Aspect_TORM_IMMEDIAT_swigconstant(_Aspect)
Aspect_TORM_IMMEDIAT = _Aspect.Aspect_TORM_IMMEDIAT

_Aspect.Aspect_TORM_RETAIN_swigconstant(_Aspect)
Aspect_TORM_RETAIN = _Aspect.Aspect_TORM_RETAIN

_Aspect.Aspect_TORM_CLEAR_AND_RETAIN_swigconstant(_Aspect)
Aspect_TORM_CLEAR_AND_RETAIN = _Aspect.Aspect_TORM_CLEAR_AND_RETAIN

_Aspect.Aspect_TOR_UNKNOWN_swigconstant(_Aspect)
Aspect_TOR_UNKNOWN = _Aspect.Aspect_TOR_UNKNOWN

_Aspect.Aspect_TOR_NO_BORDER_swigconstant(_Aspect)
Aspect_TOR_NO_BORDER = _Aspect.Aspect_TOR_NO_BORDER

_Aspect.Aspect_TOR_TOP_BORDER_swigconstant(_Aspect)
Aspect_TOR_TOP_BORDER = _Aspect.Aspect_TOR_TOP_BORDER

_Aspect.Aspect_TOR_RIGHT_BORDER_swigconstant(_Aspect)
Aspect_TOR_RIGHT_BORDER = _Aspect.Aspect_TOR_RIGHT_BORDER

_Aspect.Aspect_TOR_BOTTOM_BORDER_swigconstant(_Aspect)
Aspect_TOR_BOTTOM_BORDER = _Aspect.Aspect_TOR_BOTTOM_BORDER

_Aspect.Aspect_TOR_LEFT_BORDER_swigconstant(_Aspect)
Aspect_TOR_LEFT_BORDER = _Aspect.Aspect_TOR_LEFT_BORDER

_Aspect.Aspect_TOR_TOP_AND_RIGHT_BORDER_swigconstant(_Aspect)
Aspect_TOR_TOP_AND_RIGHT_BORDER = _Aspect.Aspect_TOR_TOP_AND_RIGHT_BORDER

_Aspect.Aspect_TOR_RIGHT_AND_BOTTOM_BORDER_swigconstant(_Aspect)
Aspect_TOR_RIGHT_AND_BOTTOM_BORDER = _Aspect.Aspect_TOR_RIGHT_AND_BOTTOM_BORDER

_Aspect.Aspect_TOR_BOTTOM_AND_LEFT_BORDER_swigconstant(_Aspect)
Aspect_TOR_BOTTOM_AND_LEFT_BORDER = _Aspect.Aspect_TOR_BOTTOM_AND_LEFT_BORDER

_Aspect.Aspect_TOR_LEFT_AND_TOP_BORDER_swigconstant(_Aspect)
Aspect_TOR_LEFT_AND_TOP_BORDER = _Aspect.Aspect_TOR_LEFT_AND_TOP_BORDER

_Aspect.Aspect_TOST_NORMAL_swigconstant(_Aspect)
Aspect_TOST_NORMAL = _Aspect.Aspect_TOST_NORMAL

_Aspect.Aspect_TOST_ANNOTATION_swigconstant(_Aspect)
Aspect_TOST_ANNOTATION = _Aspect.Aspect_TOST_ANNOTATION

_Aspect.Aspect_TOT_SOLID_swigconstant(_Aspect)
Aspect_TOT_SOLID = _Aspect.Aspect_TOT_SOLID

_Aspect.Aspect_TOT_OUTLINE_swigconstant(_Aspect)
Aspect_TOT_OUTLINE = _Aspect.Aspect_TOT_OUTLINE

_Aspect.Aspect_TOTE_NONE_swigconstant(_Aspect)
Aspect_TOTE_NONE = _Aspect.Aspect_TOTE_NONE

_Aspect.Aspect_TOTE_ORIGIN_swigconstant(_Aspect)
Aspect_TOTE_ORIGIN = _Aspect.Aspect_TOTE_ORIGIN

_Aspect.Aspect_TOTE_AXIS_X_swigconstant(_Aspect)
Aspect_TOTE_AXIS_X = _Aspect.Aspect_TOTE_AXIS_X

_Aspect.Aspect_TOTE_AXIS_Y_swigconstant(_Aspect)
Aspect_TOTE_AXIS_Y = _Aspect.Aspect_TOTE_AXIS_Y

_Aspect.Aspect_TOTE_AXIS_Z_swigconstant(_Aspect)
Aspect_TOTE_AXIS_Z = _Aspect.Aspect_TOTE_AXIS_Z

_Aspect.Aspect_TOTE_TEXT_X_swigconstant(_Aspect)
Aspect_TOTE_TEXT_X = _Aspect.Aspect_TOTE_TEXT_X

_Aspect.Aspect_TOTE_TEXT_Y_swigconstant(_Aspect)
Aspect_TOTE_TEXT_Y = _Aspect.Aspect_TOTE_TEXT_Y

_Aspect.Aspect_TOTE_TEXT_Z_swigconstant(_Aspect)
Aspect_TOTE_TEXT_Z = _Aspect.Aspect_TOTE_TEXT_Z

_Aspect.Aspect_TOTE_01_swigconstant(_Aspect)
Aspect_TOTE_01 = _Aspect.Aspect_TOTE_01

_Aspect.Aspect_TOTE_02_swigconstant(_Aspect)
Aspect_TOTE_02 = _Aspect.Aspect_TOTE_02

_Aspect.Aspect_TOTE_03_swigconstant(_Aspect)
Aspect_TOTE_03 = _Aspect.Aspect_TOTE_03

_Aspect.Aspect_TOTE_04_swigconstant(_Aspect)
Aspect_TOTE_04 = _Aspect.Aspect_TOTE_04

_Aspect.Aspect_TOTE_05_swigconstant(_Aspect)
Aspect_TOTE_05 = _Aspect.Aspect_TOTE_05

_Aspect.Aspect_TOTE_06_swigconstant(_Aspect)
Aspect_TOTE_06 = _Aspect.Aspect_TOTE_06

_Aspect.Aspect_TOTE_07_swigconstant(_Aspect)
Aspect_TOTE_07 = _Aspect.Aspect_TOTE_07

_Aspect.Aspect_TOTE_08_swigconstant(_Aspect)
Aspect_TOTE_08 = _Aspect.Aspect_TOTE_08

_Aspect.Aspect_TOTE_09_swigconstant(_Aspect)
Aspect_TOTE_09 = _Aspect.Aspect_TOTE_09

_Aspect.Aspect_TOTE_10_swigconstant(_Aspect)
Aspect_TOTE_10 = _Aspect.Aspect_TOTE_10

_Aspect.Aspect_TOTP_CENTER_swigconstant(_Aspect)
Aspect_TOTP_CENTER = _Aspect.Aspect_TOTP_CENTER

_Aspect.Aspect_TOTP_LEFT_LOWER_swigconstant(_Aspect)
Aspect_TOTP_LEFT_LOWER = _Aspect.Aspect_TOTP_LEFT_LOWER

_Aspect.Aspect_TOTP_LEFT_UPPER_swigconstant(_Aspect)
Aspect_TOTP_LEFT_UPPER = _Aspect.Aspect_TOTP_LEFT_UPPER

_Aspect.Aspect_TOTP_RIGHT_LOWER_swigconstant(_Aspect)
Aspect_TOTP_RIGHT_LOWER = _Aspect.Aspect_TOTP_RIGHT_LOWER

_Aspect.Aspect_TOTP_RIGHT_UPPER_swigconstant(_Aspect)
Aspect_TOTP_RIGHT_UPPER = _Aspect.Aspect_TOTP_RIGHT_UPPER

_Aspect.Aspect_TOTP_01_swigconstant(_Aspect)
Aspect_TOTP_01 = _Aspect.Aspect_TOTP_01

_Aspect.Aspect_TOTP_02_swigconstant(_Aspect)
Aspect_TOTP_02 = _Aspect.Aspect_TOTP_02

_Aspect.Aspect_TOTP_03_swigconstant(_Aspect)
Aspect_TOTP_03 = _Aspect.Aspect_TOTP_03

_Aspect.Aspect_TOTP_04_swigconstant(_Aspect)
Aspect_TOTP_04 = _Aspect.Aspect_TOTP_04

_Aspect.Aspect_TOTP_05_swigconstant(_Aspect)
Aspect_TOTP_05 = _Aspect.Aspect_TOTP_05

_Aspect.Aspect_TOTP_06_swigconstant(_Aspect)
Aspect_TOTP_06 = _Aspect.Aspect_TOTP_06

_Aspect.Aspect_TOTP_07_swigconstant(_Aspect)
Aspect_TOTP_07 = _Aspect.Aspect_TOTP_07

_Aspect.Aspect_TOTP_08_swigconstant(_Aspect)
Aspect_TOTP_08 = _Aspect.Aspect_TOTP_08

_Aspect.Aspect_TOTP_09_swigconstant(_Aspect)
Aspect_TOTP_09 = _Aspect.Aspect_TOTP_09

_Aspect.Aspect_TOTP_10_swigconstant(_Aspect)
Aspect_TOTP_10 = _Aspect.Aspect_TOTP_10

_Aspect.Aspect_TOU_ASAP_swigconstant(_Aspect)
Aspect_TOU_ASAP = _Aspect.Aspect_TOU_ASAP

_Aspect.Aspect_TOU_WAIT_swigconstant(_Aspect)
Aspect_TOU_WAIT = _Aspect.Aspect_TOU_WAIT

_Aspect.Aspect_WOL_THIN_swigconstant(_Aspect)
Aspect_WOL_THIN = _Aspect.Aspect_WOL_THIN

_Aspect.Aspect_WOL_MEDIUM_swigconstant(_Aspect)
Aspect_WOL_MEDIUM = _Aspect.Aspect_WOL_MEDIUM

_Aspect.Aspect_WOL_THICK_swigconstant(_Aspect)
Aspect_WOL_THICK = _Aspect.Aspect_WOL_THICK

_Aspect.Aspect_WOL_VERYTHICK_swigconstant(_Aspect)
Aspect_WOL_VERYTHICK = _Aspect.Aspect_WOL_VERYTHICK

_Aspect.Aspect_WOL_USERDEFINED_swigconstant(_Aspect)
Aspect_WOL_USERDEFINED = _Aspect.Aspect_WOL_USERDEFINED

_Aspect.Aspect_XA_DELETE_WINDOW_swigconstant(_Aspect)
Aspect_XA_DELETE_WINDOW = _Aspect.Aspect_XA_DELETE_WINDOW
class aspect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ValuesOfFOSP(*args):
        """
        * Returns the format size according to the default LENGTH unit of the required format <aFOSP>. Returns more the normalized format name.

        :param aFOSP:
        :type aFOSP: Aspect_FormatOfSheetPaper
        :param aWidth:
        :type aWidth: Quantity_Length &
        :param aHeight:
        :type aHeight: Quantity_Length &
        :rtype: char *

        """
        return _Aspect.aspect_ValuesOfFOSP(*args)

    ValuesOfFOSP = staticmethod(ValuesOfFOSP)

    def ToCString(*args):
        """
        * Translates an ExtendedString to a CString depending of the local format.

        :param aString:
        :type aString: TCollection_ExtendedString &
        :rtype: char *

        """
        return _Aspect.aspect_ToCString(*args)

    ToCString = staticmethod(ToCString)

    def Inverse(*args):
        """
        * Inverses <aMat> a 4x4 matrix.

        :param aMat:
        :type aMat: TColStd_Array2OfReal &
        :param Inv:
        :type Inv: TColStd_Array2OfReal &
        :rtype: bool

        """
        return _Aspect.aspect_Inverse(*args)

    Inverse = staticmethod(Inverse)

    def __init__(self):
        _Aspect.aspect_swiginit(self, _Aspect.new_aspect())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


aspect._kill_pointed = new_instancemethod(_Aspect.aspect__kill_pointed, None, aspect)
aspect_swigregister = _Aspect.aspect_swigregister
aspect_swigregister(aspect)

def aspect_ValuesOfFOSP(*args):
    """
    * Returns the format size according to the default LENGTH unit of the required format <aFOSP>. Returns more the normalized format name.

    :param aFOSP:
    :type aFOSP: Aspect_FormatOfSheetPaper
    :param aWidth:
    :type aWidth: Quantity_Length &
    :param aHeight:
    :type aHeight: Quantity_Length &
    :rtype: char *

    """
    return _Aspect.aspect_ValuesOfFOSP(*args)

def aspect_ToCString(*args):
    """
    * Translates an ExtendedString to a CString depending of the local format.

    :param aString:
    :type aString: TCollection_ExtendedString &
    :rtype: char *

    """
    return _Aspect.aspect_ToCString(*args)

def aspect_Inverse(*args):
    """
    * Inverses <aMat> a 4x4 matrix.

    :param aMat:
    :type aMat: TColStd_Array2OfReal &
    :param Inv:
    :type Inv: TColStd_Array2OfReal &
    :rtype: bool

    """
    return _Aspect.aspect_Inverse(*args)

class Aspect_Array1OfEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Aspect_Edge &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Aspect.Aspect_Array1OfEdge_swiginit(self, _Aspect.new_Aspect_Array1OfEdge(*args))

    def Init(self, *args):
        """
        :param V:
        :type V: Aspect_Edge &
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_Init(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_Destroy(self, *args)


    def IsAllocated(self, *args):
        """
        :rtype: bool

        """
        return _Aspect.Aspect_Array1OfEdge_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_Array1OfEdge &
        :rtype: Aspect_Array1OfEdge

        """
        return _Aspect.Aspect_Array1OfEdge_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_Array1OfEdge &
        :rtype: Aspect_Array1OfEdge

        """
        return _Aspect.Aspect_Array1OfEdge_Set(self, *args)


    def Length(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Length(self, *args)


    def Lower(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Lower(self, *args)


    def Upper(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Upper(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Aspect_Edge &
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_SetValue(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_Edge

        """
        return _Aspect.Aspect_Array1OfEdge_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_Edge

        """
        return _Aspect.Aspect_Array1OfEdge_ChangeValue(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Array1OfEdge.Init = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Init, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Destroy = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Destroy, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.IsAllocated = new_instancemethod(_Aspect.Aspect_Array1OfEdge_IsAllocated, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Assign = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Assign, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Set = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Set, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Length = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Length, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Lower = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Lower, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Upper = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Upper, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.SetValue = new_instancemethod(_Aspect.Aspect_Array1OfEdge_SetValue, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Value = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Value, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.ChangeValue = new_instancemethod(_Aspect.Aspect_Array1OfEdge_ChangeValue, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge._kill_pointed = new_instancemethod(_Aspect.Aspect_Array1OfEdge__kill_pointed, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge_swigregister = _Aspect.Aspect_Array1OfEdge_swigregister
Aspect_Array1OfEdge_swigregister(Aspect_Array1OfEdge)

class Aspect_AspectFillArea(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetEdgeColor(self, *args):
        """
        * Modifies the colour of the edge of the face

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeColor(self, *args)


    def SetEdgeLineType(self, *args):
        """
        * Modifies the edge line type

        :param AType:
        :type AType: Aspect_TypeOfLine
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeLineType(self, *args)


    def SetEdgeWidth(self, *args):
        """
        * Modifies the edge thickness Category: Methods to modify the class definition Warning: Raises AspectFillAreaDefinitionError if the //!	 width is a negative value.

        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeWidth(self, *args)


    def SetHatchStyle(self, *args):
        """
        * Modifies the hatch type used when InteriorStyle //!	 is IS_HATCH

        :param AStyle:
        :type AStyle: Aspect_HatchStyle
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetHatchStyle(self, *args)


    def SetInteriorColor(self, *args):
        """
        * Modifies the colour of the interior of the face

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetInteriorColor(self, *args)


    def SetBackInteriorColor(self, *args):
        """
        * Modifies the colour of the interior of the back face

        :param color:
        :type color: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetBackInteriorColor(self, *args)


    def SetInteriorStyle(self, *args):
        """
        * Modifies the interior type used for rendering InteriorStyle : IS_EMPTY	no interior //!		 IS_HOLLOW	display the boundaries of the surface //!		 IS_HATCH	display hatching //!		 IS_SOLID	display interior entirely filled

        :param AStyle:
        :type AStyle: Aspect_InteriorStyle
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetInteriorStyle(self, *args)


    def HatchStyle(self, *args):
        """
        * Returns the hatch type used when InteriorStyle //!	 is IS_HATCH

        :rtype: Aspect_HatchStyle

        """
        return _Aspect.Aspect_AspectFillArea_HatchStyle(self, *args)


    def Values(self, *args):
        """
        :param AStyle:
        :type AStyle: Aspect_InteriorStyle &
        :param AIntColor:
        :type AIntColor: Quantity_Color &
        :param AEdgeColor:
        :type AEdgeColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        * Returns the current values of the <self> group.

        :param AStyle:
        :type AStyle: Aspect_InteriorStyle &
        :param AIntColor:
        :type AIntColor: Quantity_Color &
        :param BackIntColor:
        :type BackIntColor: Quantity_Color &
        :param AEdgeColor:
        :type AEdgeColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_Values(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_AspectFillArea self)"""
        return _Aspect.Aspect_AspectFillArea__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_AspectFillArea self) -> Handle_Aspect_AspectFillArea"""
        return _Aspect.Aspect_AspectFillArea_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_AspectFillArea.SetEdgeColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetEdgeLineType = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeLineType, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetEdgeWidth = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeWidth, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetHatchStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetHatchStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetInteriorColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetInteriorColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetBackInteriorColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetBackInteriorColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetInteriorStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetInteriorStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.HatchStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_HatchStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.Values = new_instancemethod(_Aspect.Aspect_AspectFillArea_Values, None, Aspect_AspectFillArea)
Aspect_AspectFillArea._kill_pointed = new_instancemethod(_Aspect.Aspect_AspectFillArea__kill_pointed, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.GetHandle = new_instancemethod(_Aspect.Aspect_AspectFillArea_GetHandle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea_swigregister = _Aspect.Aspect_AspectFillArea_swigregister
Aspect_AspectFillArea_swigregister(Aspect_AspectFillArea)

class Handle_Aspect_AspectFillArea(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectFillArea_swiginit(self, _Aspect.new_Handle_Aspect_AspectFillArea(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectFillArea_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_AspectFillArea.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea_Nullify, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea_IsNull, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea.GetObject = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea_GetObject, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea__kill_pointed, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea_swigregister = _Aspect.Handle_Aspect_AspectFillArea_swigregister
Handle_Aspect_AspectFillArea_swigregister(Handle_Aspect_AspectFillArea)

def Handle_Aspect_AspectFillArea_DownCast(AnObject):
    return _Aspect.Handle_Aspect_AspectFillArea_DownCast(AnObject)
Handle_Aspect_AspectFillArea_DownCast = _Aspect.Handle_Aspect_AspectFillArea_DownCast

class Aspect_AspectLine(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetColor(self, *args):
        """
        * Modifies the colour of <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetColor(self, *args)


    def SetType(self, *args):
        """
        * Modifies the type of <self>.

        :param AType:
        :type AType: Aspect_TypeOfLine
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetType(self, *args)


    def SetWidth(self, *args):
        """
        * Modifies the thickness of <self>. Category: Methods to modify the class definition Warning: Raises AspectLineDefinitionError if the //!	 width is a negative value.

        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetWidth(self, *args)


    def Values(self, *args):
        """
        * Returns the current values of the group <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_Values(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_AspectLine self)"""
        return _Aspect.Aspect_AspectLine__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_AspectLine self) -> Handle_Aspect_AspectLine"""
        return _Aspect.Aspect_AspectLine_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_AspectLine.SetColor = new_instancemethod(_Aspect.Aspect_AspectLine_SetColor, None, Aspect_AspectLine)
Aspect_AspectLine.SetType = new_instancemethod(_Aspect.Aspect_AspectLine_SetType, None, Aspect_AspectLine)
Aspect_AspectLine.SetWidth = new_instancemethod(_Aspect.Aspect_AspectLine_SetWidth, None, Aspect_AspectLine)
Aspect_AspectLine.Values = new_instancemethod(_Aspect.Aspect_AspectLine_Values, None, Aspect_AspectLine)
Aspect_AspectLine._kill_pointed = new_instancemethod(_Aspect.Aspect_AspectLine__kill_pointed, None, Aspect_AspectLine)
Aspect_AspectLine.GetHandle = new_instancemethod(_Aspect.Aspect_AspectLine_GetHandle, None, Aspect_AspectLine)
Aspect_AspectLine_swigregister = _Aspect.Aspect_AspectLine_swigregister
Aspect_AspectLine_swigregister(Aspect_AspectLine)

class Handle_Aspect_AspectLine(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectLine_swiginit(self, _Aspect.new_Handle_Aspect_AspectLine(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectLine_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_AspectLine.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectLine_Nullify, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectLine_IsNull, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine.GetObject = new_instancemethod(_Aspect.Handle_Aspect_AspectLine_GetObject, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_AspectLine__kill_pointed, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine_swigregister = _Aspect.Handle_Aspect_AspectLine_swigregister
Handle_Aspect_AspectLine_swigregister(Handle_Aspect_AspectLine)

def Handle_Aspect_AspectLine_DownCast(AnObject):
    return _Aspect.Handle_Aspect_AspectLine_DownCast(AnObject)
Handle_Aspect_AspectLine_DownCast = _Aspect.Handle_Aspect_AspectLine_DownCast

class Aspect_AspectMarker(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetColor(self, *args):
        """
        * Modifies the colour of <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetColor(self, *args)


    def SetScale(self, *args):
        """
        * Modifies the scale factor of <self>. //!	 Marker type Aspect_TOM_POINT is not affected //!	 by the marker size scale factor. It is always //!	 the smallest displayable dot. Warning: Raises AspectMarkerDefinitionError if the //!	 scale is a negative value.

        :param AScale:
        :type AScale: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetScale(self, *args)


    def SetType(self, *args):
        """
        * Modifies the type of marker <self>.

        :param AType:
        :type AType: Aspect_TypeOfMarker
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetType(self, *args)


    def Values(self, *args):
        """
        * Returns the current values of the group <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfMarker &
        :param AScale:
        :type AScale: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_Values(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_AspectMarker self)"""
        return _Aspect.Aspect_AspectMarker__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_AspectMarker self) -> Handle_Aspect_AspectMarker"""
        return _Aspect.Aspect_AspectMarker_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_AspectMarker.SetColor = new_instancemethod(_Aspect.Aspect_AspectMarker_SetColor, None, Aspect_AspectMarker)
Aspect_AspectMarker.SetScale = new_instancemethod(_Aspect.Aspect_AspectMarker_SetScale, None, Aspect_AspectMarker)
Aspect_AspectMarker.SetType = new_instancemethod(_Aspect.Aspect_AspectMarker_SetType, None, Aspect_AspectMarker)
Aspect_AspectMarker.Values = new_instancemethod(_Aspect.Aspect_AspectMarker_Values, None, Aspect_AspectMarker)
Aspect_AspectMarker._kill_pointed = new_instancemethod(_Aspect.Aspect_AspectMarker__kill_pointed, None, Aspect_AspectMarker)
Aspect_AspectMarker.GetHandle = new_instancemethod(_Aspect.Aspect_AspectMarker_GetHandle, None, Aspect_AspectMarker)
Aspect_AspectMarker_swigregister = _Aspect.Aspect_AspectMarker_swigregister
Aspect_AspectMarker_swigregister(Aspect_AspectMarker)

class Handle_Aspect_AspectMarker(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectMarker_swiginit(self, _Aspect.new_Handle_Aspect_AspectMarker(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectMarker_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_AspectMarker.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker_Nullify, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker_IsNull, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker.GetObject = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker_GetObject, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker__kill_pointed, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker_swigregister = _Aspect.Handle_Aspect_AspectMarker_swigregister
Handle_Aspect_AspectMarker_swigregister(Handle_Aspect_AspectMarker)

def Handle_Aspect_AspectMarker_DownCast(AnObject):
    return _Aspect.Handle_Aspect_AspectMarker_DownCast(AnObject)
Handle_Aspect_AspectMarker_DownCast = _Aspect.Handle_Aspect_AspectMarker_DownCast

class Aspect_Background(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a window background. //!	 Default color : NOC_MATRAGRAY.

        :rtype: None

        * Creates a window background with the colour <AColor>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        _Aspect.Aspect_Background_swiginit(self, _Aspect.new_Aspect_Background(*args))

    def SetColor(self, *args):
        """
        * Modifies the colour of the window background <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_Background_SetColor(self, *args)


    def Color(self, *args):
        """
        * Returns the colour of the window background <self>.

        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_Background_Color(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Background.SetColor = new_instancemethod(_Aspect.Aspect_Background_SetColor, None, Aspect_Background)
Aspect_Background.Color = new_instancemethod(_Aspect.Aspect_Background_Color, None, Aspect_Background)
Aspect_Background._kill_pointed = new_instancemethod(_Aspect.Aspect_Background__kill_pointed, None, Aspect_Background)
Aspect_Background_swigregister = _Aspect.Aspect_Background_swigregister
Aspect_Background_swigregister(Aspect_Background)

class Aspect_ColorMap(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Type(self, *args):
        """
        :rtype: Aspect_TypeOfColorMap

        """
        return _Aspect.Aspect_ColorMap_Type(self, *args)


    def Size(self, *args):
        """
        * Returns the Allocated colormap Size

        :rtype: int

        """
        return _Aspect.Aspect_ColorMap_Size(self, *args)


    def Index(self, *args):
        """
        * Returns the ColorMapEntry.Index of the ColorMap //!	 at rank <aColormapIndex> .

        :param aColormapIndex:
        :type aColormapIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_ColorMap_Index(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_ColorMap_Dump(self, *args)


    def Entry(self, *args):
        """
        * Return the value of the <Index>th element of //!	 the ColorMap

        :param AColorMapIndex:
        :type AColorMapIndex: int
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_ColorMap_Entry(self, *args)


    def FindColorMapIndex(self, *args):
        """
        * Returns the index in the ColorMap of the //!	 ColorMapEntry.Index() equal to <AnEntryIndex>.

        :param AColorMapEntryIndex:
        :type AColorMapEntryIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_ColorMap_FindColorMapIndex(self, *args)


    def FindEntry(self, *args):
        """
        * Returns the ColorMapEntry with ColorMapEntry.Index() //!	 equal to <AnEntryIndex>.

        :param AColorMapEntryIndex:
        :type AColorMapEntryIndex: int
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_ColorMap_FindEntry(self, *args)


    def NearestColorMapIndex(self, *args):
        """
        * Returns the index in the ColorMap of the //!	 nearest matching ColorMapEntry

        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: int

        """
        return _Aspect.Aspect_ColorMap_NearestColorMapIndex(self, *args)


    def NearestEntry(self, *args):
        """
        * Returns the nearest ColorMapEntry that match aColor .

        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_ColorMap_NearestEntry(self, *args)


    def AddEntry(self, *args):
        """
        * Search an identical color entry in the color map <self> and returns the ColorMapEntry Index if exist. Or add a new entry and returns the computed ColorMapEntry index used.

        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: int

        """
        return _Aspect.Aspect_ColorMap_AddEntry(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_ColorMap self)"""
        return _Aspect.Aspect_ColorMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_ColorMap self) -> Handle_Aspect_ColorMap"""
        return _Aspect.Aspect_ColorMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorMap.Type = new_instancemethod(_Aspect.Aspect_ColorMap_Type, None, Aspect_ColorMap)
Aspect_ColorMap.Size = new_instancemethod(_Aspect.Aspect_ColorMap_Size, None, Aspect_ColorMap)
Aspect_ColorMap.Index = new_instancemethod(_Aspect.Aspect_ColorMap_Index, None, Aspect_ColorMap)
Aspect_ColorMap.Dump = new_instancemethod(_Aspect.Aspect_ColorMap_Dump, None, Aspect_ColorMap)
Aspect_ColorMap.Entry = new_instancemethod(_Aspect.Aspect_ColorMap_Entry, None, Aspect_ColorMap)
Aspect_ColorMap.FindColorMapIndex = new_instancemethod(_Aspect.Aspect_ColorMap_FindColorMapIndex, None, Aspect_ColorMap)
Aspect_ColorMap.FindEntry = new_instancemethod(_Aspect.Aspect_ColorMap_FindEntry, None, Aspect_ColorMap)
Aspect_ColorMap.NearestColorMapIndex = new_instancemethod(_Aspect.Aspect_ColorMap_NearestColorMapIndex, None, Aspect_ColorMap)
Aspect_ColorMap.NearestEntry = new_instancemethod(_Aspect.Aspect_ColorMap_NearestEntry, None, Aspect_ColorMap)
Aspect_ColorMap.AddEntry = new_instancemethod(_Aspect.Aspect_ColorMap_AddEntry, None, Aspect_ColorMap)
Aspect_ColorMap._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorMap__kill_pointed, None, Aspect_ColorMap)
Aspect_ColorMap.GetHandle = new_instancemethod(_Aspect.Aspect_ColorMap_GetHandle, None, Aspect_ColorMap)
Aspect_ColorMap_swigregister = _Aspect.Aspect_ColorMap_swigregister
Aspect_ColorMap_swigregister(Aspect_ColorMap)

class Handle_Aspect_ColorMap(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_ColorMap_swiginit(self, _Aspect.new_Handle_Aspect_ColorMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_ColorMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_ColorMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_ColorMap_Nullify, None, Handle_Aspect_ColorMap)
Handle_Aspect_ColorMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_ColorMap_IsNull, None, Handle_Aspect_ColorMap)
Handle_Aspect_ColorMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_ColorMap_GetObject, None, Handle_Aspect_ColorMap)
Handle_Aspect_ColorMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_ColorMap__kill_pointed, None, Handle_Aspect_ColorMap)
Handle_Aspect_ColorMap_swigregister = _Aspect.Handle_Aspect_ColorMap_swigregister
Handle_Aspect_ColorMap_swigregister(Handle_Aspect_ColorMap)

def Handle_Aspect_ColorMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_ColorMap_DownCast(AnObject)
Handle_Aspect_ColorMap_DownCast = _Aspect.Handle_Aspect_ColorMap_DownCast

class Aspect_ColorMapEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an unallocated colormap entry

        :rtype: None

        * Creates an allocated colormap entry

        :param index:
        :type index: int
        :param rgb:
        :type rgb: Quantity_Color &
        :rtype: None

        * Creates an allocated colormap entry. Warning: Raises error if the colormap entry <entry> //!	 is unallocated.

        :param entry:
        :type entry: Aspect_ColorMapEntry &
        :rtype: None

        """
        _Aspect.Aspect_ColorMapEntry_swiginit(self, _Aspect.new_Aspect_ColorMapEntry(*args))

    def SetValue(self, *args):
        """
        * Sets colormap entry value and allocates it.

        :param index:
        :type index: int
        :param rgb:
        :type rgb: Quantity_Color &
        :rtype: None

        * Sets colormap entry value and allocates it.

        :param entry:
        :type entry: Aspect_ColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_SetValue(self, *args)


    def Set(self, *args):
        """
        :param entry:
        :type entry: Aspect_ColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_Set(self, *args)


    def SetColor(self, *args):
        """
        * Sets color <rgb> of colormap entry.

        :param rgb:
        :type rgb: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_SetColor(self, *args)


    def Color(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorMapEntry_Color(self, *args)


    def SetIndex(self, *args):
        """
        * Sets index value of a colormap entry.

        :param index:
        :type index: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_SetIndex(self, *args)


    def Index(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_ColorMapEntry_Index(self, *args)


    def Free(self, *args):
        """
        * Unallocates the colormap entry.

        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_Free(self, *args)


    def IsAllocated(self, *args):
        """
        * Returns True if the colormap entry is allocated. Warning: A colormap entry is allocated when the color and //!	 the index is defined.

        :rtype: bool

        """
        return _Aspect.Aspect_ColorMapEntry_IsAllocated(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry_Dump(self, *args)


    def _CSFDB_GetAspect_ColorMapEntryallocated(self, *args):
        """
        :rtype: bool

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntryallocated(self, *args)


    def _CSFDB_SetAspect_ColorMapEntryallocated(self, *args):
        """
        :param p:
        :type p: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntryallocated(self, *args)


    def _CSFDB_GetAspect_ColorMapEntrymycolor(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymycolor(self, *args)


    def _CSFDB_GetAspect_ColorMapEntrymyindex(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyindex(self, *args)


    def _CSFDB_SetAspect_ColorMapEntrymyindex(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyindex(self, *args)


    def _CSFDB_GetAspect_ColorMapEntrymyColorIsDef(self, *args):
        """
        :rtype: bool

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyColorIsDef(self, *args)


    def _CSFDB_SetAspect_ColorMapEntrymyColorIsDef(self, *args):
        """
        :param p:
        :type p: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyColorIsDef(self, *args)


    def _CSFDB_GetAspect_ColorMapEntrymyIndexIsDef(self, *args):
        """
        :rtype: bool

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyIndexIsDef(self, *args)


    def _CSFDB_SetAspect_ColorMapEntrymyIndexIsDef(self, *args):
        """
        :param p:
        :type p: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyIndexIsDef(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_ColorMapEntry_SetValue, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.Set = new_instancemethod(_Aspect.Aspect_ColorMapEntry_Set, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.SetColor = new_instancemethod(_Aspect.Aspect_ColorMapEntry_SetColor, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.Color = new_instancemethod(_Aspect.Aspect_ColorMapEntry_Color, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.SetIndex = new_instancemethod(_Aspect.Aspect_ColorMapEntry_SetIndex, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.Index = new_instancemethod(_Aspect.Aspect_ColorMapEntry_Index, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.Free = new_instancemethod(_Aspect.Aspect_ColorMapEntry_Free, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.IsAllocated = new_instancemethod(_Aspect.Aspect_ColorMapEntry_IsAllocated, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry.Dump = new_instancemethod(_Aspect.Aspect_ColorMapEntry_Dump, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_GetAspect_ColorMapEntryallocated = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntryallocated, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_SetAspect_ColorMapEntryallocated = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntryallocated, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_GetAspect_ColorMapEntrymycolor = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymycolor, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_GetAspect_ColorMapEntrymyindex = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyindex, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_SetAspect_ColorMapEntrymyindex = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyindex, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_GetAspect_ColorMapEntrymyColorIsDef = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyColorIsDef, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_SetAspect_ColorMapEntrymyColorIsDef = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyColorIsDef, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_GetAspect_ColorMapEntrymyIndexIsDef = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_GetAspect_ColorMapEntrymyIndexIsDef, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._CSFDB_SetAspect_ColorMapEntrymyIndexIsDef = new_instancemethod(_Aspect.Aspect_ColorMapEntry__CSFDB_SetAspect_ColorMapEntrymyIndexIsDef, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorMapEntry__kill_pointed, None, Aspect_ColorMapEntry)
Aspect_ColorMapEntry_swigregister = _Aspect.Aspect_ColorMapEntry_swigregister
Aspect_ColorMapEntry_swigregister(Aspect_ColorMapEntry)

class Aspect_ColorScale(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FindColor(*args):
        """
        * Calculate color according passed value; returns true if value is in range or false, if isn't

        :param Value:
        :type Value: float
        :param Color:
        :type Color: Quantity_Color &
        :rtype: bool

        :param Value:
        :type Value: float
        :param Min:
        :type Min: float
        :param Max:
        :type Max: float
        :param ColorsCount:
        :type ColorsCount: int
        :param Color:
        :type Color: Quantity_Color &
        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_FindColor(*args)

    FindColor = staticmethod(FindColor)

    def GetMin(self, *args):
        """
        * Returns minimal value of color scale;

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetMin(self, *args)


    def GetMax(self, *args):
        """
        * Returns maximal value of color scale;

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetMax(self, *args)


    def GetRange(self, *args):
        """
        * Returns minimal and maximal values of color scale;

        :param aMin:
        :type aMin: float &
        :param aMax:
        :type aMax: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetRange(self, *args)


    def GetLabelType(self, *args):
        """
        * Returns the type of labels;  Aspect_TOCSD_AUTO - labels as boundary values for intervals  Aspect_TOCSD_USER - user specified label is used

        :rtype: Aspect_TypeOfColorScaleData

        """
        return _Aspect.Aspect_ColorScale_GetLabelType(self, *args)


    def GetColorType(self, *args):
        """
        * Returns the type of colors;  Aspect_TOCSD_AUTO - value between Red and Blue  Aspect_TOCSD_USER - user specified color from color map

        :rtype: Aspect_TypeOfColorScaleData

        """
        return _Aspect.Aspect_ColorScale_GetColorType(self, *args)


    def GetNumberOfIntervals(self, *args):
        """
        * Returns the number of color scale intervals;

        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_GetNumberOfIntervals(self, *args)


    def GetTitle(self, *args):
        """
        * Returns the color scale title string;

        :rtype: TCollection_ExtendedString

        """
        return _Aspect.Aspect_ColorScale_GetTitle(self, *args)


    def GetFormat(self, *args):
        """
        * Returns the format for numbers.  The same like format for function printf().  Used if GetLabelType() is TOCSD_AUTO;

        :rtype: TCollection_AsciiString

        """
        return _Aspect.Aspect_ColorScale_GetFormat(self, *args)


    def GetLabel(self, *args):
        """
        * Returns the user specified label with index <anIndex>.  Returns empty string if label not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_ExtendedString

        """
        return _Aspect.Aspect_ColorScale_GetLabel(self, *args)


    def GetColor(self, *args):
        """
        * Returns the user specified color from color map with index <anIndex>.  Returns default color if index out of range in color map.

        :param anIndex:
        :type anIndex: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorScale_GetColor(self, *args)


    def GetLabels(self, *args):
        """
        * Returns the user specified labels.

        :param aLabels:
        :type aLabels: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetLabels(self, *args)


    def GetColors(self, *args):
        """
        * Returns the user specified colors.

        :param aColors:
        :type aColors: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetColors(self, *args)


    def GetLabelPosition(self, *args):
        """
        * Returns the position of labels concerning color filled rectangles.

        :rtype: Aspect_TypeOfColorScalePosition

        """
        return _Aspect.Aspect_ColorScale_GetLabelPosition(self, *args)


    def GetTitlePosition(self, *args):
        """
        * Returns the position of color scale title.

        :rtype: Aspect_TypeOfColorScalePosition

        """
        return _Aspect.Aspect_ColorScale_GetTitlePosition(self, *args)


    def IsReversed(self, *args):
        """
        * Returns true if the labels and colors used in reversed order.

        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_IsReversed(self, *args)


    def IsLabelAtBorder(self, *args):
        """
        * Returns true if the labels placed at border of color filled rectangles.

        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_IsLabelAtBorder(self, *args)


    def SetMin(self, *args):
        """
        * Sets the minimal value of color scale.

        :param aMin:
        :type aMin: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetMin(self, *args)


    def SetMax(self, *args):
        """
        * Sets the maximal value of color scale.

        :param aMax:
        :type aMax: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetMax(self, *args)


    def SetRange(self, *args):
        """
        * Sets the minimal and maximal value of color scale.

        :param aMin:
        :type aMin: float
        :param aMax:
        :type aMax: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetRange(self, *args)


    def SetLabelType(self, *args):
        """
        * Sets the type of labels.  Aspect_TOCSD_AUTO - labels as boundary values for intervals  Aspect_TOCSD_USER - user specified label is used

        :param aType:
        :type aType: Aspect_TypeOfColorScaleData
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelType(self, *args)


    def SetColorType(self, *args):
        """
        * Sets the type of colors.  Aspect_TOCSD_AUTO - value between Red and Blue  Aspect_TOCSD_USER - user specified color from color map

        :param aType:
        :type aType: Aspect_TypeOfColorScaleData
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColorType(self, *args)


    def SetNumberOfIntervals(self, *args):
        """
        * Sets the number of color scale intervals.

        :param aNum:
        :type aNum: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetNumberOfIntervals(self, *args)


    def SetTitle(self, *args):
        """
        * Sets the color scale title string.

        :param aTitle:
        :type aTitle: TCollection_ExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTitle(self, *args)


    def SetFormat(self, *args):
        """
        * Sets the color scale auto label format specification.

        :param aFormat:
        :type aFormat: TCollection_AsciiString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetFormat(self, *args)


    def SetLabel(self, *args):
        """
        * Sets the color scale label at index. Index started from 1.

        :param aLabel:
        :type aLabel: TCollection_ExtendedString &
        :param anIndex: default value is -1
        :type anIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabel(self, *args)


    def SetColor(self, *args):
        """
        * Sets the color scale color at index. Index started from 1.

        :param aColor:
        :type aColor: Quantity_Color &
        :param anIndex: default value is -1
        :type anIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColor(self, *args)


    def SetLabels(self, *args):
        """
        * Sets the color scale labels.

        :param aSeq:
        :type aSeq: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabels(self, *args)


    def SetColors(self, *args):
        """
        * Sets the color scale colors.

        :param aMap:
        :type aMap: Handle_Aspect_ColorMap &
        :rtype: None

        * Sets the color scale colors.

        :param aSeq:
        :type aSeq: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColors(self, *args)


    def SetLabelPosition(self, *args):
        """
        * Sets the color scale labels position concerning color filled rectangles.

        :param aPos:
        :type aPos: Aspect_TypeOfColorScalePosition
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelPosition(self, *args)


    def SetTitlePosition(self, *args):
        """
        * Sets the color scale title position.

        :param aPos:
        :type aPos: Aspect_TypeOfColorScalePosition
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTitlePosition(self, *args)


    def SetReversed(self, *args):
        """
        * Sets true if the labels and colors used in reversed order.

        :param aReverse:
        :type aReverse: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetReversed(self, *args)


    def SetLabelAtBorder(self, *args):
        """
        * Sets true if the labels placed at border of color filled rectangles.

        :param anOn:
        :type anOn: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelAtBorder(self, *args)


    def GetSize(self, *args):
        """
        * Returns the size of color scale.

        :param aWidth:
        :type aWidth: float &
        :param aHeight:
        :type aHeight: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetSize(self, *args)


    def GetWidth(self, *args):
        """
        * Returns the width of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetWidth(self, *args)


    def GetHeight(self, *args):
        """
        * Returns the height of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetHeight(self, *args)


    def SetSize(self, *args):
        """
        * Sets the size of color scale.

        :param aWidth:
        :type aWidth: float
        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetSize(self, *args)


    def SetWidth(self, *args):
        """
        * Sets the width of color scale.

        :param aWidth:
        :type aWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetWidth(self, *args)


    def SetHeight(self, *args):
        """
        * Sets the height of color scale.

        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetHeight(self, *args)


    def GetPosition(self, *args):
        """
        * Returns the position of color scale.

        :param aX:
        :type aX: float &
        :param aY:
        :type aY: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetPosition(self, *args)


    def GetXPosition(self, *args):
        """
        * Returns the X position of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetXPosition(self, *args)


    def GetYPosition(self, *args):
        """
        * Returns the height of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetYPosition(self, *args)


    def SetPosition(self, *args):
        """
        * Sets the position of color scale.

        :param aX:
        :type aX: float
        :param aY:
        :type aY: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetPosition(self, *args)


    def SetXPosition(self, *args):
        """
        * Sets the X position of color scale.

        :param aX:
        :type aX: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetXPosition(self, *args)


    def SetYPosition(self, *args):
        """
        * Sets the Y position of color scale.

        :param aY:
        :type aY: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetYPosition(self, *args)


    def GetTextHeight(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_GetTextHeight(self, *args)


    def SetTextHeight(self, *args):
        """
        :param aHeigh:
        :type aHeigh: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTextHeight(self, *args)


    def PaintRect(self, *args):
        """
        :param X:
        :type X: int
        :param Y:
        :type Y: int
        :param W:
        :type W: int
        :param H:
        :type H: int
        :param aColor:
        :type aColor: Quantity_Color &
        :param aFilled: default value is Standard_False
        :type aFilled: bool
        :rtype: void

        """
        return _Aspect.Aspect_ColorScale_PaintRect(self, *args)


    def PaintText(self, *args):
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :param X:
        :type X: int
        :param Y:
        :type Y: int
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: void

        """
        return _Aspect.Aspect_ColorScale_PaintText(self, *args)


    def TextWidth(self, *args):
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_TextWidth(self, *args)


    def TextHeight(self, *args):
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_TextHeight(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_ColorScale self)"""
        return _Aspect.Aspect_ColorScale__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_ColorScale self) -> Handle_Aspect_ColorScale"""
        return _Aspect.Aspect_ColorScale_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorScale.GetMin = new_instancemethod(_Aspect.Aspect_ColorScale_GetMin, None, Aspect_ColorScale)
Aspect_ColorScale.GetMax = new_instancemethod(_Aspect.Aspect_ColorScale_GetMax, None, Aspect_ColorScale)
Aspect_ColorScale.GetRange = new_instancemethod(_Aspect.Aspect_ColorScale_GetRange, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabelType = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabelType, None, Aspect_ColorScale)
Aspect_ColorScale.GetColorType = new_instancemethod(_Aspect.Aspect_ColorScale_GetColorType, None, Aspect_ColorScale)
Aspect_ColorScale.GetNumberOfIntervals = new_instancemethod(_Aspect.Aspect_ColorScale_GetNumberOfIntervals, None, Aspect_ColorScale)
Aspect_ColorScale.GetTitle = new_instancemethod(_Aspect.Aspect_ColorScale_GetTitle, None, Aspect_ColorScale)
Aspect_ColorScale.GetFormat = new_instancemethod(_Aspect.Aspect_ColorScale_GetFormat, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabel = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabel, None, Aspect_ColorScale)
Aspect_ColorScale.GetColor = new_instancemethod(_Aspect.Aspect_ColorScale_GetColor, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabels = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabels, None, Aspect_ColorScale)
Aspect_ColorScale.GetColors = new_instancemethod(_Aspect.Aspect_ColorScale_GetColors, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabelPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabelPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetTitlePosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetTitlePosition, None, Aspect_ColorScale)
Aspect_ColorScale.IsReversed = new_instancemethod(_Aspect.Aspect_ColorScale_IsReversed, None, Aspect_ColorScale)
Aspect_ColorScale.IsLabelAtBorder = new_instancemethod(_Aspect.Aspect_ColorScale_IsLabelAtBorder, None, Aspect_ColorScale)
Aspect_ColorScale.SetMin = new_instancemethod(_Aspect.Aspect_ColorScale_SetMin, None, Aspect_ColorScale)
Aspect_ColorScale.SetMax = new_instancemethod(_Aspect.Aspect_ColorScale_SetMax, None, Aspect_ColorScale)
Aspect_ColorScale.SetRange = new_instancemethod(_Aspect.Aspect_ColorScale_SetRange, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelType = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelType, None, Aspect_ColorScale)
Aspect_ColorScale.SetColorType = new_instancemethod(_Aspect.Aspect_ColorScale_SetColorType, None, Aspect_ColorScale)
Aspect_ColorScale.SetNumberOfIntervals = new_instancemethod(_Aspect.Aspect_ColorScale_SetNumberOfIntervals, None, Aspect_ColorScale)
Aspect_ColorScale.SetTitle = new_instancemethod(_Aspect.Aspect_ColorScale_SetTitle, None, Aspect_ColorScale)
Aspect_ColorScale.SetFormat = new_instancemethod(_Aspect.Aspect_ColorScale_SetFormat, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabel = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabel, None, Aspect_ColorScale)
Aspect_ColorScale.SetColor = new_instancemethod(_Aspect.Aspect_ColorScale_SetColor, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabels = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabels, None, Aspect_ColorScale)
Aspect_ColorScale.SetColors = new_instancemethod(_Aspect.Aspect_ColorScale_SetColors, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetTitlePosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetTitlePosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetReversed = new_instancemethod(_Aspect.Aspect_ColorScale_SetReversed, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelAtBorder = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelAtBorder, None, Aspect_ColorScale)
Aspect_ColorScale.GetSize = new_instancemethod(_Aspect.Aspect_ColorScale_GetSize, None, Aspect_ColorScale)
Aspect_ColorScale.GetWidth = new_instancemethod(_Aspect.Aspect_ColorScale_GetWidth, None, Aspect_ColorScale)
Aspect_ColorScale.GetHeight = new_instancemethod(_Aspect.Aspect_ColorScale_GetHeight, None, Aspect_ColorScale)
Aspect_ColorScale.SetSize = new_instancemethod(_Aspect.Aspect_ColorScale_SetSize, None, Aspect_ColorScale)
Aspect_ColorScale.SetWidth = new_instancemethod(_Aspect.Aspect_ColorScale_SetWidth, None, Aspect_ColorScale)
Aspect_ColorScale.SetHeight = new_instancemethod(_Aspect.Aspect_ColorScale_SetHeight, None, Aspect_ColorScale)
Aspect_ColorScale.GetPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetXPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetXPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetYPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetYPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetXPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetXPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetYPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetYPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetTextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_GetTextHeight, None, Aspect_ColorScale)
Aspect_ColorScale.SetTextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_SetTextHeight, None, Aspect_ColorScale)
Aspect_ColorScale.PaintRect = new_instancemethod(_Aspect.Aspect_ColorScale_PaintRect, None, Aspect_ColorScale)
Aspect_ColorScale.PaintText = new_instancemethod(_Aspect.Aspect_ColorScale_PaintText, None, Aspect_ColorScale)
Aspect_ColorScale.TextWidth = new_instancemethod(_Aspect.Aspect_ColorScale_TextWidth, None, Aspect_ColorScale)
Aspect_ColorScale.TextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_TextHeight, None, Aspect_ColorScale)
Aspect_ColorScale._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorScale__kill_pointed, None, Aspect_ColorScale)
Aspect_ColorScale.GetHandle = new_instancemethod(_Aspect.Aspect_ColorScale_GetHandle, None, Aspect_ColorScale)
Aspect_ColorScale_swigregister = _Aspect.Aspect_ColorScale_swigregister
Aspect_ColorScale_swigregister(Aspect_ColorScale)

def Aspect_ColorScale_FindColor(*args):
    """
    * Calculate color according passed value; returns true if value is in range or false, if isn't

    :param Value:
    :type Value: float
    :param Color:
    :type Color: Quantity_Color &
    :rtype: bool

    :param Value:
    :type Value: float
    :param Min:
    :type Min: float
    :param Max:
    :type Max: float
    :param ColorsCount:
    :type ColorsCount: int
    :param Color:
    :type Color: Quantity_Color &
    :rtype: bool

    """
    return _Aspect.Aspect_ColorScale_FindColor(*args)

class Handle_Aspect_ColorScale(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_ColorScale_swiginit(self, _Aspect.new_Handle_Aspect_ColorScale(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_ColorScale_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_ColorScale.Nullify = new_instancemethod(_Aspect.Handle_Aspect_ColorScale_Nullify, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale.IsNull = new_instancemethod(_Aspect.Handle_Aspect_ColorScale_IsNull, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale.GetObject = new_instancemethod(_Aspect.Handle_Aspect_ColorScale_GetObject, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_ColorScale__kill_pointed, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale_swigregister = _Aspect.Handle_Aspect_ColorScale_swigregister
Handle_Aspect_ColorScale_swigregister(Handle_Aspect_ColorScale)

def Handle_Aspect_ColorScale_DownCast(AnObject):
    return _Aspect.Handle_Aspect_ColorScale_DownCast(AnObject)
Handle_Aspect_ColorScale_DownCast = _Aspect.Handle_Aspect_ColorScale_DownCast

class Aspect_Driver(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def EndDraw(self, *args):
        """
        * Flush all graphics and Wait after up to date

        :param Synchronize: default value is Standard_False
        :type Synchronize: bool
        :rtype: void

        """
        return _Aspect.Aspect_Driver_EndDraw(self, *args)


    def SetColorMap(self, *args):
        """
        :param aColorMap:
        :type aColorMap: Handle_Aspect_ColorMap &
        :rtype: None

        """
        return _Aspect.Aspect_Driver_SetColorMap(self, *args)


    def SetTypeMap(self, *args):
        """
        :param aTypeMap:
        :type aTypeMap: Handle_Aspect_TypeMap &
        :rtype: None

        """
        return _Aspect.Aspect_Driver_SetTypeMap(self, *args)


    def SetWidthMap(self, *args):
        """
        :param aWidthMap:
        :type aWidthMap: Handle_Aspect_WidthMap &
        :rtype: None

        """
        return _Aspect.Aspect_Driver_SetWidthMap(self, *args)


    def SetFontMap(self, *args):
        """
        * Sets the current font map to this driver and Enable/Disable this driver to use MDTV fonts instead system fonts.

        :param aFontMap:
        :type aFontMap: Handle_Aspect_FontMap &
        :rtype: None

        """
        return _Aspect.Aspect_Driver_SetFontMap(self, *args)


    def SetMarkMap(self, *args):
        """
        :param aMarkMap:
        :type aMarkMap: Handle_Aspect_MarkMap &
        :rtype: None

        """
        return _Aspect.Aspect_Driver_SetMarkMap(self, *args)


    def SetLineAttrib(self, *args):
        """
        :param ColorIndex:
        :type ColorIndex: int
        :param TypeIndex:
        :type TypeIndex: int
        :param WidthIndex:
        :type WidthIndex: int
        :rtype: void

        """
        return _Aspect.Aspect_Driver_SetLineAttrib(self, *args)


    def SetTextAttrib(self, *args):
        """
        :param ColorIndex:
        :type ColorIndex: int
        :param FontIndex:
        :type FontIndex: int
        :rtype: void

        :param ColorIndex:
        :type ColorIndex: int
        :param FontIndex:
        :type FontIndex: int
        :param aSlant:
        :type aSlant: Quantity_PlaneAngle
        :param aHScale:
        :type aHScale: Quantity_Factor
        :param aWScale:
        :type aWScale: Quantity_Factor
        :param isUnderlined: default value is Standard_False
        :type isUnderlined: bool
        :rtype: void

        """
        return _Aspect.Aspect_Driver_SetTextAttrib(self, *args)


    def SetPolyAttrib(self, *args):
        """
        :param ColorIndex:
        :type ColorIndex: int
        :param TileIndex:
        :type TileIndex: int
        :param DrawEdge: default value is Standard_False
        :type DrawEdge: bool
        :rtype: void

        """
        return _Aspect.Aspect_Driver_SetPolyAttrib(self, *args)


    def SetMarkerAttrib(self, *args):
        """
        :param ColorIndex:
        :type ColorIndex: int
        :param WidthIndex:
        :type WidthIndex: int
        :param FillMarker: default value is Standard_False
        :type FillMarker: bool
        :rtype: void

        """
        return _Aspect.Aspect_Driver_SetMarkerAttrib(self, *args)


    def IsKnownImage(self, *args):
        """
        :param anImage:
        :type anImage: Handle_Standard_Transient &
        :rtype: bool

        """
        return _Aspect.Aspect_Driver_IsKnownImage(self, *args)


    def SizeOfImageFile(self, *args):
        """
        :param anImageFile:
        :type anImageFile: char *
        :param aWidth:
        :type aWidth: int &
        :param aHeight:
        :type aHeight: int &
        :rtype: bool

        """
        return _Aspect.Aspect_Driver_SizeOfImageFile(self, *args)


    def ClearImage(self, *args):
        """
        :param anImageId:
        :type anImageId: Handle_Standard_Transient &
        :rtype: void

        """
        return _Aspect.Aspect_Driver_ClearImage(self, *args)


    def ClearImageFile(self, *args):
        """
        :param anImageFile:
        :type anImageFile: char *
        :rtype: void

        """
        return _Aspect.Aspect_Driver_ClearImageFile(self, *args)


    def DrawImage(self, *args):
        """
        :param anImageId:
        :type anImageId: Handle_Standard_Transient &
        :param aX:
        :type aX: Standard_ShortReal
        :param aY:
        :type aY: Standard_ShortReal
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawImage(self, *args)


    def DrawImageFile(self, *args):
        """
        :param anImageFile:
        :type anImageFile: char *
        :param aX:
        :type aX: Standard_ShortReal
        :param aY:
        :type aY: Standard_ShortReal
        :param aScale: default value is 1.0
        :type aScale: Quantity_Factor
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawImageFile(self, *args)


    def FillAndDrawImage(self, *args):
        """
        * Fills a complete Image .

        :param anImageId:
        :type anImageId: Handle_Standard_Transient &
        :param aX:
        :type aX: Standard_ShortReal
        :param aY:
        :type aY: Standard_ShortReal
        :param aWidth:
        :type aWidth: int
        :param aHeight:
        :type aHeight: int
        :param anArrayOfPixels:
        :type anArrayOfPixels: Standard_Address
        :rtype: void

        * Fills a line of the Image . Warning: 0 <= anIndexOfLine < aHeight //!	 anIndexOfLine = 0 must be the first call

        :param anImageId:
        :type anImageId: Handle_Standard_Transient &
        :param aX:
        :type aX: Standard_ShortReal
        :param aY:
        :type aY: Standard_ShortReal
        :param anIndexOfLine:
        :type anIndexOfLine: int
        :param aWidth:
        :type aWidth: int
        :param aHeight:
        :type aHeight: int
        :param anArrayOfPixels:
        :type anArrayOfPixels: Standard_Address
        :rtype: void

        """
        return _Aspect.Aspect_Driver_FillAndDrawImage(self, *args)


    def DrawPolyline(self, *args):
        """
        * Draw a polyline depending of the SetLineAttrib() attributes.

        :param aListX:
        :type aListX: TShort_Array1OfShortReal &
        :param aListY:
        :type aListY: TShort_Array1OfShortReal &
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawPolyline(self, *args)


    def DrawPolygon(self, *args):
        """
        * Draw a polygon depending of the SetPolyAttrib() attributes.

        :param aListX:
        :type aListX: TShort_Array1OfShortReal &
        :param aListY:
        :type aListY: TShort_Array1OfShortReal &
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawPolygon(self, *args)


    def DrawSegment(self, *args):
        """
        * Draw a segment depending of the SetLineAttrib() attributes.

        :param X1:
        :type X1: Standard_ShortReal
        :param Y1:
        :type Y1: Standard_ShortReal
        :param X2:
        :type X2: Standard_ShortReal
        :param Y2:
        :type Y2: Standard_ShortReal
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawSegment(self, *args)


    def DrawText(self, *args):
        """
        * Draws a text depending of the SetTextAttrib() attributes.

        :param aText:
        :type aText: TCollection_ExtendedString &
        :param Xpos:
        :type Xpos: Standard_ShortReal
        :param Ypos:
        :type Ypos: Standard_ShortReal
        :param anAngle: default value is 0.0
        :type anAngle: Standard_ShortReal
        :param aType: default value is Aspect_TOT_SOLID
        :type aType: Aspect_TypeOfText
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawText(self, *args)


    def DrawPolyText(self, *args):
        """
        * Draws an framed text depending of the SetTextAttrib() and SetPolyAttrib() attributes. Warning: Coordinates must be defined in DWU space. //!	 <aMarge> defines the ratio of the space between the //!	 polygon borders and the bounding box of the text and //!	 depending of the height of the text.

        :param aText:
        :type aText: TCollection_ExtendedString &
        :param Xpos:
        :type Xpos: Standard_ShortReal
        :param Ypos:
        :type Ypos: Standard_ShortReal
        :param aMarge: default value is 0.1
        :type aMarge: Quantity_Ratio
        :param anAngle: default value is 0.0
        :type anAngle: Standard_ShortReal
        :param aType: default value is Aspect_TOT_SOLID
        :type aType: Aspect_TypeOfText
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawPolyText(self, *args)


    def DrawPoint(self, *args):
        """
        * Draws a 1 PIXEL point depending of the SetMarkerAttrib()

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawPoint(self, *args)


    def DrawMarker(self, *args):
        """
        * Draws the prevously defined marker <aMarker>

        :param aMarker:
        :type aMarker: int
        :param Xpos:
        :type Xpos: Standard_ShortReal
        :param Ypos:
        :type Ypos: Standard_ShortReal
        :param Width:
        :type Width: Standard_ShortReal
        :param Height:
        :type Height: Standard_ShortReal
        :param Angle: default value is 0.0
        :type Angle: Standard_ShortReal
        :rtype: void

        """
        return _Aspect.Aspect_Driver_DrawMarker(self, *args)


    def DrawArc(self, *args):
        """
        * Draws an Ellipsoid arc of center <X,Y> and Radius

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param anXradius:
        :type anXradius: Standard_ShortReal
        :param anYradius:
        :type anYradius: Standard_ShortReal
        :param aStartAngle: default value is 0.0
        :type aStartAngle: Standard_ShortReal
        :param anOpenAngle: default value is 6.283185
        :type anOpenAngle: Standard_ShortReal
        :rtype: bool

        """
        return _Aspect.Aspect_Driver_DrawArc(self, *args)


    def DrawPolyArc(self, *args):
        """
        * Draws an filled Ellipsoid arc of center <X,Y> and Radius

        :param X:
        :type X: Standard_ShortReal
        :param Y:
        :type Y: Standard_ShortReal
        :param anXradius:
        :type anXradius: Standard_ShortReal
        :param anYradius:
        :type anYradius: Standard_ShortReal
        :param aStartAngle: default value is 0.0
        :type aStartAngle: Standard_ShortReal
        :param anOpenAngle: default value is 6.283185
        :type anOpenAngle: Standard_ShortReal
        :rtype: bool

        """
        return _Aspect.Aspect_Driver_DrawPolyArc(self, *args)


    def BeginPolyline(self, *args):
        """
        * Begin an incremental polyline primitive of <aNumber> of points . Warning: Points must be added by the the DrawPoint() method.

        :param aNumber:
        :type aNumber: int
        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginPolyline(self, *args)


    def BeginPolygon(self, *args):
        """
        * Begin an incremental polygon primitive of <aNumber> of points . Warning: Points must be added by the the DrawPoint() method.

        :param aNumber:
        :type aNumber: int
        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginPolygon(self, *args)


    def BeginSegments(self, *args):
        """
        * Begin a set of segments . Warning: Segments must be added by the DrawSegment() method.

        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginSegments(self, *args)


    def BeginArcs(self, *args):
        """
        * Begin a set of circles or ellips . Warning: Arcs must be added by the DrawArc() methods.

        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginArcs(self, *args)


    def BeginPolyArcs(self, *args):
        """
        * Begin a set of polygon circles or ellips . Warning: Arcs must be added by the DrawPolyArc() methods.

        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginPolyArcs(self, *args)


    def BeginMarkers(self, *args):
        """
        * Begin a set of markers . Warning: Markers must be added by the DrawMarker() method.

        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginMarkers(self, *args)


    def BeginPoints(self, *args):
        """
        * Begin a set of points . Warning: Points must be added by the DrawPoint() method.

        :rtype: void

        """
        return _Aspect.Aspect_Driver_BeginPoints(self, *args)


    def ClosePrimitive(self, *args):
        """
        * Close the last Begining primitive

        :rtype: void

        """
        return _Aspect.Aspect_Driver_ClosePrimitive(self, *args)


    def ColorMap(self, *args):
        """
        :rtype: Handle_Aspect_ColorMap

        """
        return _Aspect.Aspect_Driver_ColorMap(self, *args)


    def TypeMap(self, *args):
        """
        :rtype: Handle_Aspect_TypeMap

        """
        return _Aspect.Aspect_Driver_TypeMap(self, *args)


    def WidthMap(self, *args):
        """
        :rtype: Handle_Aspect_WidthMap

        """
        return _Aspect.Aspect_Driver_WidthMap(self, *args)


    def FontMap(self, *args):
        """
        :rtype: Handle_Aspect_FontMap

        """
        return _Aspect.Aspect_Driver_FontMap(self, *args)


    def MarkMap(self, *args):
        """
        :rtype: Handle_Aspect_MarkMap

        """
        return _Aspect.Aspect_Driver_MarkMap(self, *args)


    def WorkSpace(self, *args):
        """
        * Returns the Available WorkSpace in DWU coordinates

        :param Width:
        :type Width: Quantity_Length &
        :param Heigth:
        :type Heigth: Quantity_Length &
        :rtype: void

        """
        return _Aspect.Aspect_Driver_WorkSpace(self, *args)


    def Convert(self, *args):
        """
        * Returns the DWU value depending of the PIXEL value.

        :param PV:
        :type PV: int
        :rtype: Quantity_Length

        * Returns the PIXEL value depending of the DWU value.

        :param DV:
        :type DV: Quantity_Length
        :rtype: int

        * Returns the DWU position depending of the PIXEL position .

        :param PX:
        :type PX: int
        :param PY:
        :type PY: int
        :param DX:
        :type DX: Quantity_Length &
        :param DY:
        :type DY: Quantity_Length &
        :rtype: void

        * Returns the PIXEL position depending of the DWU position . Returns True when the driver must use MDTV fonts //!	instead system fonts.

        :param DX:
        :type DX: Quantity_Length
        :param DY:
        :type DY: Quantity_Length
        :param PX:
        :type PX: int &
        :param PY:
        :type PY: int &
        :rtype: void

        """
        return _Aspect.Aspect_Driver_Convert(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_Driver self)"""
        return _Aspect.Aspect_Driver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_Driver self) -> Handle_Aspect_Driver"""
        return _Aspect.Aspect_Driver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Driver.EndDraw = new_instancemethod(_Aspect.Aspect_Driver_EndDraw, None, Aspect_Driver)
Aspect_Driver.SetColorMap = new_instancemethod(_Aspect.Aspect_Driver_SetColorMap, None, Aspect_Driver)
Aspect_Driver.SetTypeMap = new_instancemethod(_Aspect.Aspect_Driver_SetTypeMap, None, Aspect_Driver)
Aspect_Driver.SetWidthMap = new_instancemethod(_Aspect.Aspect_Driver_SetWidthMap, None, Aspect_Driver)
Aspect_Driver.SetFontMap = new_instancemethod(_Aspect.Aspect_Driver_SetFontMap, None, Aspect_Driver)
Aspect_Driver.SetMarkMap = new_instancemethod(_Aspect.Aspect_Driver_SetMarkMap, None, Aspect_Driver)
Aspect_Driver.SetLineAttrib = new_instancemethod(_Aspect.Aspect_Driver_SetLineAttrib, None, Aspect_Driver)
Aspect_Driver.SetTextAttrib = new_instancemethod(_Aspect.Aspect_Driver_SetTextAttrib, None, Aspect_Driver)
Aspect_Driver.SetPolyAttrib = new_instancemethod(_Aspect.Aspect_Driver_SetPolyAttrib, None, Aspect_Driver)
Aspect_Driver.SetMarkerAttrib = new_instancemethod(_Aspect.Aspect_Driver_SetMarkerAttrib, None, Aspect_Driver)
Aspect_Driver.IsKnownImage = new_instancemethod(_Aspect.Aspect_Driver_IsKnownImage, None, Aspect_Driver)
Aspect_Driver.SizeOfImageFile = new_instancemethod(_Aspect.Aspect_Driver_SizeOfImageFile, None, Aspect_Driver)
Aspect_Driver.ClearImage = new_instancemethod(_Aspect.Aspect_Driver_ClearImage, None, Aspect_Driver)
Aspect_Driver.ClearImageFile = new_instancemethod(_Aspect.Aspect_Driver_ClearImageFile, None, Aspect_Driver)
Aspect_Driver.DrawImage = new_instancemethod(_Aspect.Aspect_Driver_DrawImage, None, Aspect_Driver)
Aspect_Driver.DrawImageFile = new_instancemethod(_Aspect.Aspect_Driver_DrawImageFile, None, Aspect_Driver)
Aspect_Driver.FillAndDrawImage = new_instancemethod(_Aspect.Aspect_Driver_FillAndDrawImage, None, Aspect_Driver)
Aspect_Driver.DrawPolyline = new_instancemethod(_Aspect.Aspect_Driver_DrawPolyline, None, Aspect_Driver)
Aspect_Driver.DrawPolygon = new_instancemethod(_Aspect.Aspect_Driver_DrawPolygon, None, Aspect_Driver)
Aspect_Driver.DrawSegment = new_instancemethod(_Aspect.Aspect_Driver_DrawSegment, None, Aspect_Driver)
Aspect_Driver.DrawText = new_instancemethod(_Aspect.Aspect_Driver_DrawText, None, Aspect_Driver)
Aspect_Driver.DrawPolyText = new_instancemethod(_Aspect.Aspect_Driver_DrawPolyText, None, Aspect_Driver)
Aspect_Driver.DrawPoint = new_instancemethod(_Aspect.Aspect_Driver_DrawPoint, None, Aspect_Driver)
Aspect_Driver.DrawMarker = new_instancemethod(_Aspect.Aspect_Driver_DrawMarker, None, Aspect_Driver)
Aspect_Driver.DrawArc = new_instancemethod(_Aspect.Aspect_Driver_DrawArc, None, Aspect_Driver)
Aspect_Driver.DrawPolyArc = new_instancemethod(_Aspect.Aspect_Driver_DrawPolyArc, None, Aspect_Driver)
Aspect_Driver.BeginPolyline = new_instancemethod(_Aspect.Aspect_Driver_BeginPolyline, None, Aspect_Driver)
Aspect_Driver.BeginPolygon = new_instancemethod(_Aspect.Aspect_Driver_BeginPolygon, None, Aspect_Driver)
Aspect_Driver.BeginSegments = new_instancemethod(_Aspect.Aspect_Driver_BeginSegments, None, Aspect_Driver)
Aspect_Driver.BeginArcs = new_instancemethod(_Aspect.Aspect_Driver_BeginArcs, None, Aspect_Driver)
Aspect_Driver.BeginPolyArcs = new_instancemethod(_Aspect.Aspect_Driver_BeginPolyArcs, None, Aspect_Driver)
Aspect_Driver.BeginMarkers = new_instancemethod(_Aspect.Aspect_Driver_BeginMarkers, None, Aspect_Driver)
Aspect_Driver.BeginPoints = new_instancemethod(_Aspect.Aspect_Driver_BeginPoints, None, Aspect_Driver)
Aspect_Driver.ClosePrimitive = new_instancemethod(_Aspect.Aspect_Driver_ClosePrimitive, None, Aspect_Driver)
Aspect_Driver.ColorMap = new_instancemethod(_Aspect.Aspect_Driver_ColorMap, None, Aspect_Driver)
Aspect_Driver.TypeMap = new_instancemethod(_Aspect.Aspect_Driver_TypeMap, None, Aspect_Driver)
Aspect_Driver.WidthMap = new_instancemethod(_Aspect.Aspect_Driver_WidthMap, None, Aspect_Driver)
Aspect_Driver.FontMap = new_instancemethod(_Aspect.Aspect_Driver_FontMap, None, Aspect_Driver)
Aspect_Driver.MarkMap = new_instancemethod(_Aspect.Aspect_Driver_MarkMap, None, Aspect_Driver)
Aspect_Driver.WorkSpace = new_instancemethod(_Aspect.Aspect_Driver_WorkSpace, None, Aspect_Driver)
Aspect_Driver.Convert = new_instancemethod(_Aspect.Aspect_Driver_Convert, None, Aspect_Driver)
Aspect_Driver._kill_pointed = new_instancemethod(_Aspect.Aspect_Driver__kill_pointed, None, Aspect_Driver)
Aspect_Driver.GetHandle = new_instancemethod(_Aspect.Aspect_Driver_GetHandle, None, Aspect_Driver)
Aspect_Driver_swigregister = _Aspect.Aspect_Driver_swigregister
Aspect_Driver_swigregister(Aspect_Driver)

class Handle_Aspect_Driver(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_Driver_swiginit(self, _Aspect.new_Handle_Aspect_Driver(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_Driver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_Driver.Nullify = new_instancemethod(_Aspect.Handle_Aspect_Driver_Nullify, None, Handle_Aspect_Driver)
Handle_Aspect_Driver.IsNull = new_instancemethod(_Aspect.Handle_Aspect_Driver_IsNull, None, Handle_Aspect_Driver)
Handle_Aspect_Driver.GetObject = new_instancemethod(_Aspect.Handle_Aspect_Driver_GetObject, None, Handle_Aspect_Driver)
Handle_Aspect_Driver._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_Driver__kill_pointed, None, Handle_Aspect_Driver)
Handle_Aspect_Driver_swigregister = _Aspect.Handle_Aspect_Driver_swigregister
Handle_Aspect_Driver_swigregister(Handle_Aspect_Driver)

def Handle_Aspect_Driver_DownCast(AnObject):
    return _Aspect.Handle_Aspect_Driver_DownCast(AnObject)
Handle_Aspect_Driver_DownCast = _Aspect.Handle_Aspect_Driver_DownCast

class Aspect_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an edge.

        :rtype: None

        * Creates an edge from an index of vertices //!	 in a table of vertices. //!	 <AType> indicates if this edge is seen or not. Warning: Raises EdgeDefinitionError if AIndex1 == AIndex2.

        :param AIndex1:
        :type AIndex1: int
        :param AIndex2:
        :type AIndex2: int
        :param AType:
        :type AType: Aspect_TypeOfEdge
        :rtype: None

        """
        _Aspect.Aspect_Edge_swiginit(self, _Aspect.new_Aspect_Edge(*args))

    def SetValues(self, *args):
        """
        * Updates the values of an edge <self>. Warning: Raises EdgeDefinitionError if AIndex1 == AIndex2.

        :param AIndex1:
        :type AIndex1: int
        :param AIndex2:
        :type AIndex2: int
        :param AType:
        :type AType: Aspect_TypeOfEdge
        :rtype: None

        """
        return _Aspect.Aspect_Edge_SetValues(self, *args)


    def Values(self, *args):
        """
        * Returns the index of the vertices and the //!	 type of edge <self>.

        :param AIndex1:
        :type AIndex1: int &
        :param AIndex2:
        :type AIndex2: int &
        :param AType:
        :type AType: Aspect_TypeOfEdge &
        :rtype: None

        """
        return _Aspect.Aspect_Edge_Values(self, *args)


    def FirstIndex(self, *args):
        """
        * Returns the index of the begin of the edge <self>.

        :rtype: int

        """
        return _Aspect.Aspect_Edge_FirstIndex(self, *args)


    def LastIndex(self, *args):
        """
        * Returns the index of the end of the edge <self>.

        :rtype: int

        """
        return _Aspect.Aspect_Edge_LastIndex(self, *args)


    def Type(self, *args):
        """
        * Returns the type of the edge <self>.

        :rtype: Aspect_TypeOfEdge

        """
        return _Aspect.Aspect_Edge_Type(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Edge.SetValues = new_instancemethod(_Aspect.Aspect_Edge_SetValues, None, Aspect_Edge)
Aspect_Edge.Values = new_instancemethod(_Aspect.Aspect_Edge_Values, None, Aspect_Edge)
Aspect_Edge.FirstIndex = new_instancemethod(_Aspect.Aspect_Edge_FirstIndex, None, Aspect_Edge)
Aspect_Edge.LastIndex = new_instancemethod(_Aspect.Aspect_Edge_LastIndex, None, Aspect_Edge)
Aspect_Edge.Type = new_instancemethod(_Aspect.Aspect_Edge_Type, None, Aspect_Edge)
Aspect_Edge._kill_pointed = new_instancemethod(_Aspect.Aspect_Edge__kill_pointed, None, Aspect_Edge)
Aspect_Edge_swigregister = _Aspect.Aspect_Edge_swigregister
Aspect_Edge_swigregister(Aspect_Edge)

class Aspect_FontMap(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_FontMap_swiginit(self, _Aspect.new_Aspect_FontMap(*args))

    def AddEntry(self, *args):
        """
        * Adds an entry in the font map <self>. Warning: Raises BadAccess if FontMap size is exceeded.

        :param AnEntry:
        :type AnEntry: Aspect_FontMapEntry &
        :rtype: None

        * Search an identical font style entry in the font map <self> and returns the FontMapEntry Index if exist. Or add a new entry and returns the computed FontMapEntry index used.

        :param aStyle:
        :type aStyle: Aspect_FontStyle &
        :rtype: int

        """
        return _Aspect.Aspect_FontMap_AddEntry(self, *args)


    def Size(self, *args):
        """
        * Returns the Allocated fontmap Size

        :rtype: int

        """
        return _Aspect.Aspect_FontMap_Size(self, *args)


    def Index(self, *args):
        """
        * Returns the FontMapEntry.Index of the FontMap at rank <aFontmapIndex> .

        :param aFontmapIndex:
        :type aFontmapIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_FontMap_Index(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_FontMap_Dump(self, *args)


    def Entry(self, *args):
        """
        * Returns the Font map entry with the index <AnIndex>. Warning: Raises BadAccess if the index less than 1 //!	 or greater than Size.

        :param AnIndex:
        :type AnIndex: int
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_FontMap_Entry(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_FontMap self)"""
        return _Aspect.Aspect_FontMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_FontMap self) -> Handle_Aspect_FontMap"""
        return _Aspect.Aspect_FontMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_FontMap.AddEntry = new_instancemethod(_Aspect.Aspect_FontMap_AddEntry, None, Aspect_FontMap)
Aspect_FontMap.Size = new_instancemethod(_Aspect.Aspect_FontMap_Size, None, Aspect_FontMap)
Aspect_FontMap.Index = new_instancemethod(_Aspect.Aspect_FontMap_Index, None, Aspect_FontMap)
Aspect_FontMap.Dump = new_instancemethod(_Aspect.Aspect_FontMap_Dump, None, Aspect_FontMap)
Aspect_FontMap.Entry = new_instancemethod(_Aspect.Aspect_FontMap_Entry, None, Aspect_FontMap)
Aspect_FontMap._kill_pointed = new_instancemethod(_Aspect.Aspect_FontMap__kill_pointed, None, Aspect_FontMap)
Aspect_FontMap.GetHandle = new_instancemethod(_Aspect.Aspect_FontMap_GetHandle, None, Aspect_FontMap)
Aspect_FontMap_swigregister = _Aspect.Aspect_FontMap_swigregister
Aspect_FontMap_swigregister(Aspect_FontMap)

class Handle_Aspect_FontMap(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_FontMap_swiginit(self, _Aspect.new_Handle_Aspect_FontMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_FontMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_FontMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_FontMap_Nullify, None, Handle_Aspect_FontMap)
Handle_Aspect_FontMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_FontMap_IsNull, None, Handle_Aspect_FontMap)
Handle_Aspect_FontMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_FontMap_GetObject, None, Handle_Aspect_FontMap)
Handle_Aspect_FontMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_FontMap__kill_pointed, None, Handle_Aspect_FontMap)
Handle_Aspect_FontMap_swigregister = _Aspect.Handle_Aspect_FontMap_swigregister
Handle_Aspect_FontMap_swigregister(Handle_Aspect_FontMap)

def Handle_Aspect_FontMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_FontMap_DownCast(AnObject)
Handle_Aspect_FontMap_DownCast = _Aspect.Handle_Aspect_FontMap_DownCast

class Aspect_FontMapEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an unallocated fontmap entry

        :rtype: None

        * Creates an allocated fontmap entry

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_FontStyle &
        :rtype: None

        * Creates an allocated fontmap entry. Warning: Raises error if the fontmap entry <entry> is unallocated.

        :param entry:
        :type entry: Aspect_FontMapEntry &
        :rtype: None

        """
        _Aspect.Aspect_FontMapEntry_swiginit(self, _Aspect.new_Aspect_FontMapEntry(*args))

    def SetValue(self, *args):
        """
        * Sets fontmap entry value and allocates it.

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_FontStyle &
        :rtype: None

        * Sets fontmap entry value and allocates it.

        :param entry:
        :type entry: Aspect_FontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_SetValue(self, *args)


    def Set(self, *args):
        """
        :param entry:
        :type entry: Aspect_FontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_Set(self, *args)


    def SetType(self, *args):
        """
        * Sets the line style of fontmap entry.

        :param Style:
        :type Style: Aspect_FontStyle &
        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_SetType(self, *args)


    def Type(self, *args):
        """
        :rtype: Aspect_FontStyle

        """
        return _Aspect.Aspect_FontMapEntry_Type(self, *args)


    def SetIndex(self, *args):
        """
        * Sets index value of a fontmap entry.

        :param index:
        :type index: int
        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_SetIndex(self, *args)


    def Index(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_FontMapEntry_Index(self, *args)


    def Free(self, *args):
        """
        * Unallocates the fontmap entry.

        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_Free(self, *args)


    def IsAllocated(self, *args):
        """
        * Returns True if the fontmap entry is allocated. Warning: A fontmap entry is allocated when the font and //!	 the index is defined.

        :rtype: bool

        """
        return _Aspect.Aspect_FontMapEntry_IsAllocated(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_FontMapEntry_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_FontMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_FontMapEntry_SetValue, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.Set = new_instancemethod(_Aspect.Aspect_FontMapEntry_Set, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.SetType = new_instancemethod(_Aspect.Aspect_FontMapEntry_SetType, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.Type = new_instancemethod(_Aspect.Aspect_FontMapEntry_Type, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.SetIndex = new_instancemethod(_Aspect.Aspect_FontMapEntry_SetIndex, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.Index = new_instancemethod(_Aspect.Aspect_FontMapEntry_Index, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.Free = new_instancemethod(_Aspect.Aspect_FontMapEntry_Free, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.IsAllocated = new_instancemethod(_Aspect.Aspect_FontMapEntry_IsAllocated, None, Aspect_FontMapEntry)
Aspect_FontMapEntry.Dump = new_instancemethod(_Aspect.Aspect_FontMapEntry_Dump, None, Aspect_FontMapEntry)
Aspect_FontMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_FontMapEntry__kill_pointed, None, Aspect_FontMapEntry)
Aspect_FontMapEntry_swigregister = _Aspect.Aspect_FontMapEntry_swigregister
Aspect_FontMapEntry_swigregister(Aspect_FontMapEntry)

class Aspect_FontStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a font style with the default values of //!	 FontStyle type : DEFAULT

        :rtype: None

        * Creates the font style <Type> depending of //!	 Size given in the basic LENGTH unit and Slant in //!	 the basic PLANE ANGLE unit. //!	 When CapsHeight is True the size defines the //!	 ascent height of the font;if False,the size //!	 defines the ascent+descent part of the font.

        :param Type:
        :type Type: Aspect_TypeOfFont
        :param Size:
        :type Size: Quantity_Length
        :param Slant: default value is 0.0
        :type Slant: Quantity_PlaneAngle
        :param CapsHeight: default value is Standard_False
        :type CapsHeight: bool
        :rtype: None

        * Creates a font style from Adobe font style descriptor //!	 depending of Size given in MM and Slant in RADIAN. //!	 When CapsHeight is True the size defines the //!	 ascent height of the font;if False,the size //!	 defines the ascent+descent part of the font. //!	 Font Style Descriptor must be : //!	 Simple form is 'family' 	Ex: 'helvetica' //!	 More complex form is 'family-weight' Ex: 'helvetica-bold' //!	 Full form is : //!		'-foundry-family-weight-slant-swdth-adstyl-pixelsize' //!		'-pointsize-resx-resy-spacing-avgWidth-registry-encoding' //!		where each field must be replaced by an '*' Warning: create the smalest font size if the foundry height

        :param Style:
        :type Style: char *
        :param Size:
        :type Size: Quantity_Length
        :param Slant: default value is 0.0
        :type Slant: Quantity_PlaneAngle
        :param CapsHeight: default value is Standard_False
        :type CapsHeight: bool
        :rtype: None

        * Creates a transformable font with the full font name <Style> given in the XLFD descriptor : '-foundry-family-weight-slant-swidth-adstyl-pixelsize-pointsize- resx-resy-spacing-avdWidth-registry-encoding'. The fields pixelsize ,pointsize,resx,resy are sets to 0 and all unknown fields sets to '*'. Example: 'adobe-helvetica-bold-*-*-*-0-0-0-0-*-*-iso8859-*' Warning: the height and slant of the font is supposed to be NULL and computed dynamically at the drawing text time.

        :param Style:
        :type Style: char *
        :rtype: None

        """
        _Aspect.Aspect_FontStyle_swiginit(self, _Aspect.new_Aspect_FontStyle(*args))

    def Assign(self, *args):
        """
        * Updates the font style <self> from the definition of the //!	 font style <Other>.

        :param Other:
        :type Other: Aspect_FontStyle &
        :rtype: Aspect_FontStyle

        """
        return _Aspect.Aspect_FontStyle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_FontStyle &
        :rtype: Aspect_FontStyle

        """
        return _Aspect.Aspect_FontStyle_Set(self, *args)


    def SetValues(self, *args):
        """
        * Updates the font style <self> from the definition of the //!	 font style <Type>.

        :param Type:
        :type Type: Aspect_TypeOfFont
        :param Size:
        :type Size: Quantity_Length
        :param Slant: default value is 0.0
        :type Slant: Quantity_PlaneAngle
        :param CapsHeight: default value is Standard_False
        :type CapsHeight: bool
        :rtype: None

        * Updates a font style with the new Abode font descriptor Warning: create the smalest font size if the foundry height

        :param Style:
        :type Style: char *
        :param Size:
        :type Size: Quantity_Length
        :param Slant: default value is 0.0
        :type Slant: Quantity_PlaneAngle
        :param CapsHeight: default value is Standard_False
        :type CapsHeight: bool
        :rtype: None

        * Updates a font style with the new XLFD font descriptor

        :param Style:
        :type Style: char *
        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_SetValues(self, *args)


    def SetFamily(self, *args):
        """
        * Sets the family of the font.

        :param aName:
        :type aName: char *
        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_SetFamily(self, *args)


    def SetWeight(self, *args):
        """
        * Sets the weight of the font.

        :param aName:
        :type aName: char *
        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_SetWeight(self, *args)


    def SetRegistry(self, *args):
        """
        * Sets the registry of the font.

        :param aName:
        :type aName: char *
        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_SetRegistry(self, *args)


    def SetEncoding(self, *args):
        """
        * Sets the encoding of the font.

        :param aName:
        :type aName: char *
        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_SetEncoding(self, *args)


    def Style(self, *args):
        """
        * Returns the type of the font style <self>

        :rtype: Aspect_TypeOfFont

        """
        return _Aspect.Aspect_FontStyle_Style(self, *args)


    def Length(self, *args):
        """
        * Returns the string components length of the font style descriptor

        :rtype: int

        """
        return _Aspect.Aspect_FontStyle_Length(self, *args)


    def Value(self, *args):
        """
        * Returns the String component of a font style

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Value(self, *args)


    def Size(self, *args):
        """
        * Returns the Size component of a font style

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_FontStyle_Size(self, *args)


    def Slant(self, *args):
        """
        * Returns the Slant component of a font style

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_FontStyle_Slant(self, *args)


    def CapsHeight(self, *args):
        """
        * Returns the CapsHeight component of a font style

        :rtype: bool

        """
        return _Aspect.Aspect_FontStyle_CapsHeight(self, *args)


    def AliasName(self, *args):
        """
        * Returns a shorter font name which identify the main characteristics of the fonts.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_AliasName(self, *args)


    def FullName(self, *args):
        """
        * Returns the full normalized font name

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_FullName(self, *args)


    def Foundry(self, *args):
        """
        * Returns the foundry of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Foundry(self, *args)


    def Family(self, *args):
        """
        * Returns the family of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Family(self, *args)


    def Weight(self, *args):
        """
        * Returns the weight of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Weight(self, *args)


    def Registry(self, *args):
        """
        * Returns the char set registry of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Registry(self, *args)


    def Encoding(self, *args):
        """
        * Returns the char set encoding of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_Encoding(self, *args)


    def SSlant(self, *args):
        """
        * Returns the slant of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SSlant(self, *args)


    def SWidth(self, *args):
        """
        * Returns the width name of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SWidth(self, *args)


    def SStyle(self, *args):
        """
        * Returns the style name of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SStyle(self, *args)


    def SPixelSize(self, *args):
        """
        * Returns the pixel size of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SPixelSize(self, *args)


    def SPointSize(self, *args):
        """
        * Returns the point size of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SPointSize(self, *args)


    def SResolutionX(self, *args):
        """
        * Returns the resolution X of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SResolutionX(self, *args)


    def SResolutionY(self, *args):
        """
        * Returns the resolution Y of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SResolutionY(self, *args)


    def SSpacing(self, *args):
        """
        * Returns the spacing of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SSpacing(self, *args)


    def SAverageWidth(self, *args):
        """
        * Returns the average width of the font.

        :rtype: char *

        """
        return _Aspect.Aspect_FontStyle_SAverageWidth(self, *args)


    def Dump(self, *args):
        """
        * Dumps the font attributes.

        :rtype: None

        """
        return _Aspect.Aspect_FontStyle_Dump(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_FontStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_FontStyle_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsNotEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_FontStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_FontStyle_IsNotEqual(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_FontStyle.Assign = new_instancemethod(_Aspect.Aspect_FontStyle_Assign, None, Aspect_FontStyle)
Aspect_FontStyle.Set = new_instancemethod(_Aspect.Aspect_FontStyle_Set, None, Aspect_FontStyle)
Aspect_FontStyle.SetValues = new_instancemethod(_Aspect.Aspect_FontStyle_SetValues, None, Aspect_FontStyle)
Aspect_FontStyle.SetFamily = new_instancemethod(_Aspect.Aspect_FontStyle_SetFamily, None, Aspect_FontStyle)
Aspect_FontStyle.SetWeight = new_instancemethod(_Aspect.Aspect_FontStyle_SetWeight, None, Aspect_FontStyle)
Aspect_FontStyle.SetRegistry = new_instancemethod(_Aspect.Aspect_FontStyle_SetRegistry, None, Aspect_FontStyle)
Aspect_FontStyle.SetEncoding = new_instancemethod(_Aspect.Aspect_FontStyle_SetEncoding, None, Aspect_FontStyle)
Aspect_FontStyle.Style = new_instancemethod(_Aspect.Aspect_FontStyle_Style, None, Aspect_FontStyle)
Aspect_FontStyle.Length = new_instancemethod(_Aspect.Aspect_FontStyle_Length, None, Aspect_FontStyle)
Aspect_FontStyle.Value = new_instancemethod(_Aspect.Aspect_FontStyle_Value, None, Aspect_FontStyle)
Aspect_FontStyle.Size = new_instancemethod(_Aspect.Aspect_FontStyle_Size, None, Aspect_FontStyle)
Aspect_FontStyle.Slant = new_instancemethod(_Aspect.Aspect_FontStyle_Slant, None, Aspect_FontStyle)
Aspect_FontStyle.CapsHeight = new_instancemethod(_Aspect.Aspect_FontStyle_CapsHeight, None, Aspect_FontStyle)
Aspect_FontStyle.AliasName = new_instancemethod(_Aspect.Aspect_FontStyle_AliasName, None, Aspect_FontStyle)
Aspect_FontStyle.FullName = new_instancemethod(_Aspect.Aspect_FontStyle_FullName, None, Aspect_FontStyle)
Aspect_FontStyle.Foundry = new_instancemethod(_Aspect.Aspect_FontStyle_Foundry, None, Aspect_FontStyle)
Aspect_FontStyle.Family = new_instancemethod(_Aspect.Aspect_FontStyle_Family, None, Aspect_FontStyle)
Aspect_FontStyle.Weight = new_instancemethod(_Aspect.Aspect_FontStyle_Weight, None, Aspect_FontStyle)
Aspect_FontStyle.Registry = new_instancemethod(_Aspect.Aspect_FontStyle_Registry, None, Aspect_FontStyle)
Aspect_FontStyle.Encoding = new_instancemethod(_Aspect.Aspect_FontStyle_Encoding, None, Aspect_FontStyle)
Aspect_FontStyle.SSlant = new_instancemethod(_Aspect.Aspect_FontStyle_SSlant, None, Aspect_FontStyle)
Aspect_FontStyle.SWidth = new_instancemethod(_Aspect.Aspect_FontStyle_SWidth, None, Aspect_FontStyle)
Aspect_FontStyle.SStyle = new_instancemethod(_Aspect.Aspect_FontStyle_SStyle, None, Aspect_FontStyle)
Aspect_FontStyle.SPixelSize = new_instancemethod(_Aspect.Aspect_FontStyle_SPixelSize, None, Aspect_FontStyle)
Aspect_FontStyle.SPointSize = new_instancemethod(_Aspect.Aspect_FontStyle_SPointSize, None, Aspect_FontStyle)
Aspect_FontStyle.SResolutionX = new_instancemethod(_Aspect.Aspect_FontStyle_SResolutionX, None, Aspect_FontStyle)
Aspect_FontStyle.SResolutionY = new_instancemethod(_Aspect.Aspect_FontStyle_SResolutionY, None, Aspect_FontStyle)
Aspect_FontStyle.SSpacing = new_instancemethod(_Aspect.Aspect_FontStyle_SSpacing, None, Aspect_FontStyle)
Aspect_FontStyle.SAverageWidth = new_instancemethod(_Aspect.Aspect_FontStyle_SAverageWidth, None, Aspect_FontStyle)
Aspect_FontStyle.Dump = new_instancemethod(_Aspect.Aspect_FontStyle_Dump, None, Aspect_FontStyle)
Aspect_FontStyle.IsEqual = new_instancemethod(_Aspect.Aspect_FontStyle_IsEqual, None, Aspect_FontStyle)
Aspect_FontStyle.__eq_wrapper__ = new_instancemethod(_Aspect.Aspect_FontStyle___eq_wrapper__, None, Aspect_FontStyle)
Aspect_FontStyle.IsNotEqual = new_instancemethod(_Aspect.Aspect_FontStyle_IsNotEqual, None, Aspect_FontStyle)
Aspect_FontStyle.__ne_wrapper__ = new_instancemethod(_Aspect.Aspect_FontStyle___ne_wrapper__, None, Aspect_FontStyle)
Aspect_FontStyle._kill_pointed = new_instancemethod(_Aspect.Aspect_FontStyle__kill_pointed, None, Aspect_FontStyle)
Aspect_FontStyle_swigregister = _Aspect.Aspect_FontStyle_swigregister
Aspect_FontStyle_swigregister(Aspect_FontStyle)

class Aspect_GenId(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an available set of identifiers with the lower //!	 bound 0 and the upper bound INT_MAX/2.

        :rtype: None

        * Creates an available set of identifiers with the lower //!	 bound <Low> and the upper bound <Up>. Warning: Raises IdentDefinitionError if <Up> is less than <Low>. Copies the content of <Other> into <self>.

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Aspect.Aspect_GenId_swiginit(self, _Aspect.new_Aspect_GenId(*args))

    def Free(self, *args):
        """
        * Frees all identifiers of <self>.

        :rtype: None

        * Frees the identifier <Id> of <self>.

        :param Id:
        :type Id: int
        :rtype: None

        """
        return _Aspect.Aspect_GenId_Free(self, *args)


    def Available(self, *args):
        """
        * Returns the number of available identifiers of <self>.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Available(self, *args)


    def Lower(self, *args):
        """
        * Returns the lower bound of <self>.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Lower(self, *args)


    def Next(self, *args):
        """
        * Returns an available identifier of <self>. Warning: Raises IdentDefinitionError if all identifiers are busy.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Next(self, *args)


    def Upper(self, *args):
        """
        * Returns the upper bound of <self>.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Upper(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_GenId.Free = new_instancemethod(_Aspect.Aspect_GenId_Free, None, Aspect_GenId)
Aspect_GenId.Available = new_instancemethod(_Aspect.Aspect_GenId_Available, None, Aspect_GenId)
Aspect_GenId.Lower = new_instancemethod(_Aspect.Aspect_GenId_Lower, None, Aspect_GenId)
Aspect_GenId.Next = new_instancemethod(_Aspect.Aspect_GenId_Next, None, Aspect_GenId)
Aspect_GenId.Upper = new_instancemethod(_Aspect.Aspect_GenId_Upper, None, Aspect_GenId)
Aspect_GenId._kill_pointed = new_instancemethod(_Aspect.Aspect_GenId__kill_pointed, None, Aspect_GenId)
Aspect_GenId_swigregister = _Aspect.Aspect_GenId_swigregister
Aspect_GenId_swigregister(Aspect_GenId)

class Aspect_GraphicCallbackStruct(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_GraphicCallbackStruct._kill_pointed = new_instancemethod(_Aspect.Aspect_GraphicCallbackStruct__kill_pointed, None, Aspect_GraphicCallbackStruct)
Aspect_GraphicCallbackStruct_swigregister = _Aspect.Aspect_GraphicCallbackStruct_swigregister
Aspect_GraphicCallbackStruct_swigregister(Aspect_GraphicCallbackStruct)

class Aspect_Grid(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetXOrigin(self, *args):
        """
        * defines the x Origin of the grid.

        :param anOrigin:
        :type anOrigin: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetXOrigin(self, *args)


    def SetYOrigin(self, *args):
        """
        * defines the y Origin of the grid.

        :param anOrigin:
        :type anOrigin: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetYOrigin(self, *args)


    def SetRotationAngle(self, *args):
        """
        * defines the orientation of the the grid.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetRotationAngle(self, *args)


    def Rotate(self, *args):
        """
        * Rotate the grid from a relative angle.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Rotate(self, *args)


    def Translate(self, *args):
        """
        * Translate the grid from a relative distance.

        :param aDx:
        :type aDx: Quantity_Length
        :param aDy:
        :type aDy: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Translate(self, *args)


    def SetColors(self, *args):
        """
        * Change the colors of the grid

        :param aColor:
        :type aColor: Quantity_Color &
        :param aTenthColor:
        :type aTenthColor: Quantity_Color &
        :rtype: void

        """
        return _Aspect.Aspect_Grid_SetColors(self, *args)


    def Hit(self, *args):
        """
        * returns the point of the grid the closest to the point X,Y if the grid is active. If the grid is not active returns X,Y.

        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param gridX:
        :type gridX: Quantity_Length &
        :param gridY:
        :type gridY: Quantity_Length &
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Hit(self, *args)


    def Compute(self, *args):
        """
        * returns the point of the grid the closest to the point X,Y

        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param gridX:
        :type gridX: Quantity_Length &
        :param gridY:
        :type gridY: Quantity_Length &
        :rtype: void

        """
        return _Aspect.Aspect_Grid_Compute(self, *args)


    def Activate(self, *args):
        """
        * activates the grid. The Hit method will return gridx and gridx computed according to the steps of the grid.

        :rtype: None

        """
        return _Aspect.Aspect_Grid_Activate(self, *args)


    def Deactivate(self, *args):
        """
        * deactivates the grid. The hit method will return gridx and gridx as the enter value X & Y.

        :rtype: None

        """
        return _Aspect.Aspect_Grid_Deactivate(self, *args)


    def XOrigin(self, *args):
        """
        * returns the x Origin of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_Grid_XOrigin(self, *args)


    def YOrigin(self, *args):
        """
        * returns the x Origin of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_Grid_YOrigin(self, *args)


    def RotationAngle(self, *args):
        """
        * returns the x Angle of the grid.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_Grid_RotationAngle(self, *args)


    def IsActive(self, *args):
        """
        * Returns True when the grid is active.

        :rtype: bool

        """
        return _Aspect.Aspect_Grid_IsActive(self, *args)


    def Colors(self, *args):
        """
        * Returns the colors of the grid.

        :param aColor:
        :type aColor: Quantity_Color &
        :param aTenthColor:
        :type aTenthColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Colors(self, *args)


    def SetDrawMode(self, *args):
        """
        * Change the grid aspect.

        :param aDrawMode:
        :type aDrawMode: Aspect_GridDrawMode
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetDrawMode(self, *args)


    def DrawMode(self, *args):
        """
        * Returns the grid aspect.

        :rtype: Aspect_GridDrawMode

        """
        return _Aspect.Aspect_Grid_DrawMode(self, *args)


    def Display(self, *args):
        """
        * Display the grid at screen.

        :rtype: void

        """
        return _Aspect.Aspect_Grid_Display(self, *args)


    def Erase(self, *args):
        """
        * Erase the grid from screen.

        :rtype: void

        """
        return _Aspect.Aspect_Grid_Erase(self, *args)


    def IsDisplayed(self, *args):
        """
        * Returns True when the grid is displayed at screen.

        :rtype: bool

        """
        return _Aspect.Aspect_Grid_IsDisplayed(self, *args)


    def Init(self, *args):
        """
        :rtype: void

        """
        return _Aspect.Aspect_Grid_Init(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_Grid self)"""
        return _Aspect.Aspect_Grid__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_Grid self) -> Handle_Aspect_Grid"""
        return _Aspect.Aspect_Grid_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Grid.SetXOrigin = new_instancemethod(_Aspect.Aspect_Grid_SetXOrigin, None, Aspect_Grid)
Aspect_Grid.SetYOrigin = new_instancemethod(_Aspect.Aspect_Grid_SetYOrigin, None, Aspect_Grid)
Aspect_Grid.SetRotationAngle = new_instancemethod(_Aspect.Aspect_Grid_SetRotationAngle, None, Aspect_Grid)
Aspect_Grid.Rotate = new_instancemethod(_Aspect.Aspect_Grid_Rotate, None, Aspect_Grid)
Aspect_Grid.Translate = new_instancemethod(_Aspect.Aspect_Grid_Translate, None, Aspect_Grid)
Aspect_Grid.SetColors = new_instancemethod(_Aspect.Aspect_Grid_SetColors, None, Aspect_Grid)
Aspect_Grid.Hit = new_instancemethod(_Aspect.Aspect_Grid_Hit, None, Aspect_Grid)
Aspect_Grid.Compute = new_instancemethod(_Aspect.Aspect_Grid_Compute, None, Aspect_Grid)
Aspect_Grid.Activate = new_instancemethod(_Aspect.Aspect_Grid_Activate, None, Aspect_Grid)
Aspect_Grid.Deactivate = new_instancemethod(_Aspect.Aspect_Grid_Deactivate, None, Aspect_Grid)
Aspect_Grid.XOrigin = new_instancemethod(_Aspect.Aspect_Grid_XOrigin, None, Aspect_Grid)
Aspect_Grid.YOrigin = new_instancemethod(_Aspect.Aspect_Grid_YOrigin, None, Aspect_Grid)
Aspect_Grid.RotationAngle = new_instancemethod(_Aspect.Aspect_Grid_RotationAngle, None, Aspect_Grid)
Aspect_Grid.IsActive = new_instancemethod(_Aspect.Aspect_Grid_IsActive, None, Aspect_Grid)
Aspect_Grid.Colors = new_instancemethod(_Aspect.Aspect_Grid_Colors, None, Aspect_Grid)
Aspect_Grid.SetDrawMode = new_instancemethod(_Aspect.Aspect_Grid_SetDrawMode, None, Aspect_Grid)
Aspect_Grid.DrawMode = new_instancemethod(_Aspect.Aspect_Grid_DrawMode, None, Aspect_Grid)
Aspect_Grid.Display = new_instancemethod(_Aspect.Aspect_Grid_Display, None, Aspect_Grid)
Aspect_Grid.Erase = new_instancemethod(_Aspect.Aspect_Grid_Erase, None, Aspect_Grid)
Aspect_Grid.IsDisplayed = new_instancemethod(_Aspect.Aspect_Grid_IsDisplayed, None, Aspect_Grid)
Aspect_Grid.Init = new_instancemethod(_Aspect.Aspect_Grid_Init, None, Aspect_Grid)
Aspect_Grid._kill_pointed = new_instancemethod(_Aspect.Aspect_Grid__kill_pointed, None, Aspect_Grid)
Aspect_Grid.GetHandle = new_instancemethod(_Aspect.Aspect_Grid_GetHandle, None, Aspect_Grid)
Aspect_Grid_swigregister = _Aspect.Aspect_Grid_swigregister
Aspect_Grid_swigregister(Aspect_Grid)

class Handle_Aspect_Grid(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_Grid_swiginit(self, _Aspect.new_Handle_Aspect_Grid(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_Grid_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_Grid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_Grid_Nullify, None, Handle_Aspect_Grid)
Handle_Aspect_Grid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_Grid_IsNull, None, Handle_Aspect_Grid)
Handle_Aspect_Grid.GetObject = new_instancemethod(_Aspect.Handle_Aspect_Grid_GetObject, None, Handle_Aspect_Grid)
Handle_Aspect_Grid._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_Grid__kill_pointed, None, Handle_Aspect_Grid)
Handle_Aspect_Grid_swigregister = _Aspect.Handle_Aspect_Grid_swigregister
Handle_Aspect_Grid_swigregister(Handle_Aspect_Grid)

def Handle_Aspect_Grid_DownCast(AnObject):
    return _Aspect.Handle_Aspect_Grid_DownCast(AnObject)
Handle_Aspect_Grid_DownCast = _Aspect.Handle_Aspect_Grid_DownCast

class Aspect_LineStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a line style with the default value of //!	 LineStyle type : SOLID

        :rtype: None

        * Creates the line style <Type>.

        :param Type:
        :type Type: Aspect_TypeOfLine
        :rtype: None

        * Creates a line style from METER Float style descriptor . //!	 Style Descriptor is : //!	 Each Odd float described the Drawn part of the style . //!	 Each Even float described the Hidden part of the style . //!	 (e.g) [0.010,0.002,0.005,0.004] //!		 Draw 10 MM ,Move 2 MM,Draw 5 MM ..

        :param Style:
        :type Style: TColQuantity_Array1OfLength &
        :rtype: None

        """
        _Aspect.Aspect_LineStyle_swiginit(self, _Aspect.new_Aspect_LineStyle(*args))

    def Assign(self, *args):
        """
        * Updates the line style <self> from the definition of the //!	 line style <Other>.

        :param Other:
        :type Other: Aspect_LineStyle &
        :rtype: Aspect_LineStyle

        """
        return _Aspect.Aspect_LineStyle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_LineStyle &
        :rtype: Aspect_LineStyle

        """
        return _Aspect.Aspect_LineStyle_Set(self, *args)


    def SetValues(self, *args):
        """
        * Updates the line style <self> from the definition of the //!	 line style <Type>.

        :param Type:
        :type Type: Aspect_TypeOfLine
        :rtype: None

        * Updates a line style with the new Float descriptor

        :param Style:
        :type Style: TColQuantity_Array1OfLength &
        :rtype: None

        """
        return _Aspect.Aspect_LineStyle_SetValues(self, *args)


    def Style(self, *args):
        """
        * Returns the type of the line style <self>

        :rtype: Aspect_TypeOfLine

        """
        return _Aspect.Aspect_LineStyle_Style(self, *args)


    def Length(self, *args):
        """
        * Returns the components length of the line style

        :rtype: int

        """
        return _Aspect.Aspect_LineStyle_Length(self, *args)


    def Values(self, *args):
        """
        * Returns the components of a line style

        :rtype: TColQuantity_Array1OfLength

        """
        return _Aspect.Aspect_LineStyle_Values(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_LineStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_LineStyle_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsNotEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_LineStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_LineStyle_IsNotEqual(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_LineStyle.Assign = new_instancemethod(_Aspect.Aspect_LineStyle_Assign, None, Aspect_LineStyle)
Aspect_LineStyle.Set = new_instancemethod(_Aspect.Aspect_LineStyle_Set, None, Aspect_LineStyle)
Aspect_LineStyle.SetValues = new_instancemethod(_Aspect.Aspect_LineStyle_SetValues, None, Aspect_LineStyle)
Aspect_LineStyle.Style = new_instancemethod(_Aspect.Aspect_LineStyle_Style, None, Aspect_LineStyle)
Aspect_LineStyle.Length = new_instancemethod(_Aspect.Aspect_LineStyle_Length, None, Aspect_LineStyle)
Aspect_LineStyle.Values = new_instancemethod(_Aspect.Aspect_LineStyle_Values, None, Aspect_LineStyle)
Aspect_LineStyle.IsEqual = new_instancemethod(_Aspect.Aspect_LineStyle_IsEqual, None, Aspect_LineStyle)
Aspect_LineStyle.__eq_wrapper__ = new_instancemethod(_Aspect.Aspect_LineStyle___eq_wrapper__, None, Aspect_LineStyle)
Aspect_LineStyle.IsNotEqual = new_instancemethod(_Aspect.Aspect_LineStyle_IsNotEqual, None, Aspect_LineStyle)
Aspect_LineStyle.__ne_wrapper__ = new_instancemethod(_Aspect.Aspect_LineStyle___ne_wrapper__, None, Aspect_LineStyle)
Aspect_LineStyle._kill_pointed = new_instancemethod(_Aspect.Aspect_LineStyle__kill_pointed, None, Aspect_LineStyle)
Aspect_LineStyle_swigregister = _Aspect.Aspect_LineStyle_swigregister
Aspect_LineStyle_swigregister(Aspect_LineStyle)

class Aspect_MarkMap(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_MarkMap_swiginit(self, _Aspect.new_Aspect_MarkMap(*args))

    def AddEntry(self, *args):
        """
        * Adds an entry in the mark map <self>. Warning: Raises BadAccess if MarkMap size is exceeded.

        :param AnEntry:
        :type AnEntry: Aspect_MarkMapEntry &
        :rtype: None

        * Search an identical marker style entry in the mark map <self> and returns the MarkMapEntry Index if exist. Or add a new entry and returns the computed MarkMapEntry index used.

        :param aStyle:
        :type aStyle: Aspect_MarkerStyle &
        :rtype: int

        """
        return _Aspect.Aspect_MarkMap_AddEntry(self, *args)


    def Size(self, *args):
        """
        * Returns the Allocated markmap Size

        :rtype: int

        """
        return _Aspect.Aspect_MarkMap_Size(self, *args)


    def Index(self, *args):
        """
        * Returns the MarkMapEntry.Index of the MarkMap at rank <aMarkmapIndex> .

        :param aMarkmapIndex:
        :type aMarkmapIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_MarkMap_Index(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_MarkMap_Dump(self, *args)


    def Entry(self, *args):
        """
        * Returns the Mark map entry with the index <AnIndex>. Warning: Raises BadAccess if the index less than 1 or //!	 greater than Size.

        :param AnIndex:
        :type AnIndex: int
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_MarkMap_Entry(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_MarkMap self)"""
        return _Aspect.Aspect_MarkMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_MarkMap self) -> Handle_Aspect_MarkMap"""
        return _Aspect.Aspect_MarkMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_MarkMap.AddEntry = new_instancemethod(_Aspect.Aspect_MarkMap_AddEntry, None, Aspect_MarkMap)
Aspect_MarkMap.Size = new_instancemethod(_Aspect.Aspect_MarkMap_Size, None, Aspect_MarkMap)
Aspect_MarkMap.Index = new_instancemethod(_Aspect.Aspect_MarkMap_Index, None, Aspect_MarkMap)
Aspect_MarkMap.Dump = new_instancemethod(_Aspect.Aspect_MarkMap_Dump, None, Aspect_MarkMap)
Aspect_MarkMap.Entry = new_instancemethod(_Aspect.Aspect_MarkMap_Entry, None, Aspect_MarkMap)
Aspect_MarkMap._kill_pointed = new_instancemethod(_Aspect.Aspect_MarkMap__kill_pointed, None, Aspect_MarkMap)
Aspect_MarkMap.GetHandle = new_instancemethod(_Aspect.Aspect_MarkMap_GetHandle, None, Aspect_MarkMap)
Aspect_MarkMap_swigregister = _Aspect.Aspect_MarkMap_swigregister
Aspect_MarkMap_swigregister(Aspect_MarkMap)

class Handle_Aspect_MarkMap(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_MarkMap_swiginit(self, _Aspect.new_Handle_Aspect_MarkMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_MarkMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_MarkMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_MarkMap_Nullify, None, Handle_Aspect_MarkMap)
Handle_Aspect_MarkMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_MarkMap_IsNull, None, Handle_Aspect_MarkMap)
Handle_Aspect_MarkMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_MarkMap_GetObject, None, Handle_Aspect_MarkMap)
Handle_Aspect_MarkMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_MarkMap__kill_pointed, None, Handle_Aspect_MarkMap)
Handle_Aspect_MarkMap_swigregister = _Aspect.Handle_Aspect_MarkMap_swigregister
Handle_Aspect_MarkMap_swigregister(Handle_Aspect_MarkMap)

def Handle_Aspect_MarkMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_MarkMap_DownCast(AnObject)
Handle_Aspect_MarkMap_DownCast = _Aspect.Handle_Aspect_MarkMap_DownCast

class Aspect_MarkMapEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an unallocated markmap entry

        :rtype: None

        * Creates an allocated markmap entry

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_MarkerStyle &
        :rtype: None

        * Creates an allocated markmap entry. Warning: Raises error if the markmap entry <entry> //!	 is unallocated.

        :param entry:
        :type entry: Aspect_MarkMapEntry &
        :rtype: None

        """
        _Aspect.Aspect_MarkMapEntry_swiginit(self, _Aspect.new_Aspect_MarkMapEntry(*args))

    def SetValue(self, *args):
        """
        * Sets markmap entry value and allocates it.

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_MarkerStyle &
        :rtype: None

        * Sets markmap entry value and allocates it.

        :param entry:
        :type entry: Aspect_MarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_SetValue(self, *args)


    def Set(self, *args):
        """
        :param entry:
        :type entry: Aspect_MarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_Set(self, *args)


    def SetStyle(self, *args):
        """
        * Sets the marker style of markmap entry.

        :param Style:
        :type Style: Aspect_MarkerStyle &
        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_SetStyle(self, *args)


    def Style(self, *args):
        """
        :rtype: Aspect_MarkerStyle

        """
        return _Aspect.Aspect_MarkMapEntry_Style(self, *args)


    def SetIndex(self, *args):
        """
        * Sets index value of a markmap entry.

        :param index:
        :type index: int
        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Returns index value of a markmap entry. Warning: Raises error if the markmap entry is unallocated .

        :rtype: int

        """
        return _Aspect.Aspect_MarkMapEntry_Index(self, *args)


    def Free(self, *args):
        """
        * Unallocates the markmap entry.

        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_Free(self, *args)


    def IsAllocated(self, *args):
        """
        * Returns True if the markmap entry is allocated. Warning: A markmap entry is allocated when the marker and //!	 the index is defined.

        :rtype: bool

        """
        return _Aspect.Aspect_MarkMapEntry_IsAllocated(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_MarkMapEntry_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_MarkMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_MarkMapEntry_SetValue, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.Set = new_instancemethod(_Aspect.Aspect_MarkMapEntry_Set, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.SetStyle = new_instancemethod(_Aspect.Aspect_MarkMapEntry_SetStyle, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.Style = new_instancemethod(_Aspect.Aspect_MarkMapEntry_Style, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.SetIndex = new_instancemethod(_Aspect.Aspect_MarkMapEntry_SetIndex, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.Index = new_instancemethod(_Aspect.Aspect_MarkMapEntry_Index, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.Free = new_instancemethod(_Aspect.Aspect_MarkMapEntry_Free, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.IsAllocated = new_instancemethod(_Aspect.Aspect_MarkMapEntry_IsAllocated, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry.Dump = new_instancemethod(_Aspect.Aspect_MarkMapEntry_Dump, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_MarkMapEntry__kill_pointed, None, Aspect_MarkMapEntry)
Aspect_MarkMapEntry_swigregister = _Aspect.Aspect_MarkMapEntry_swigregister
Aspect_MarkMapEntry_swigregister(Aspect_MarkMapEntry)

class Aspect_MarkerStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a marker style with the default value of //!	 MarkerStyle type : POINT

        :rtype: None

        * Creates the marker style <aType>.

        :param aType:
        :type aType: Aspect_TypeOfMarker
        :rtype: None

        * Creates a marker style from a implicit draw point

        :param aXpoint:
        :type aXpoint: TColStd_Array1OfReal &
        :param aYpoint:
        :type aYpoint: TColStd_Array1OfReal &
        :rtype: None

        * Creates a marker style from a move-draw point descriptor . Each coordinate <aXpoint(i),aYpoint(i)> must be defined

        :param aXpoint:
        :type aXpoint: TColStd_Array1OfReal &
        :param aYpoint:
        :type aYpoint: TColStd_Array1OfReal &
        :param aSpoint:
        :type aSpoint: TColStd_Array1OfBoolean &
        :rtype: None

        """
        _Aspect.Aspect_MarkerStyle_swiginit(self, _Aspect.new_Aspect_MarkerStyle(*args))

    def Assign(self, *args):
        """
        * Updates the marker style <self> from the definition of the marker style <Other>.

        :param Other:
        :type Other: Aspect_MarkerStyle &
        :rtype: Aspect_MarkerStyle

        """
        return _Aspect.Aspect_MarkerStyle_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_MarkerStyle &
        :rtype: Aspect_MarkerStyle

        """
        return _Aspect.Aspect_MarkerStyle_Set(self, *args)


    def Type(self, *args):
        """
        * Returns the type of the marker style <self>

        :rtype: Aspect_TypeOfMarker

        """
        return _Aspect.Aspect_MarkerStyle_Type(self, *args)


    def Length(self, *args):
        """
        * Returns the components length of the marker descriptors

        :rtype: int

        """
        return _Aspect.Aspect_MarkerStyle_Length(self, *args)


    def Values(self, *args):
        """
        * Returns the point and status of a marker style

        :param aRank:
        :type aRank: int
        :param aX:
        :type aX: float &
        :param aY:
        :type aY: float &
        :rtype: bool

        """
        return _Aspect.Aspect_MarkerStyle_Values(self, *args)


    def XValues(self, *args):
        """
        * Returns the X vector of a marker style descriptor

        :rtype: TShort_Array1OfShortReal

        """
        return _Aspect.Aspect_MarkerStyle_XValues(self, *args)


    def YValues(self, *args):
        """
        * Returns the Y vector of a marker style descriptor

        :rtype: TShort_Array1OfShortReal

        """
        return _Aspect.Aspect_MarkerStyle_YValues(self, *args)


    def SValues(self, *args):
        """
        * Returns the State vector of a marker style descriptor

        :rtype: TColStd_Array1OfBoolean

        """
        return _Aspect.Aspect_MarkerStyle_SValues(self, *args)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_MarkerStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_MarkerStyle_IsEqual(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsNotEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_MarkerStyle &
        :rtype: bool

        """
        return _Aspect.Aspect_MarkerStyle_IsNotEqual(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_MarkerStyle.Assign = new_instancemethod(_Aspect.Aspect_MarkerStyle_Assign, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.Set = new_instancemethod(_Aspect.Aspect_MarkerStyle_Set, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.Type = new_instancemethod(_Aspect.Aspect_MarkerStyle_Type, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.Length = new_instancemethod(_Aspect.Aspect_MarkerStyle_Length, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.Values = new_instancemethod(_Aspect.Aspect_MarkerStyle_Values, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.XValues = new_instancemethod(_Aspect.Aspect_MarkerStyle_XValues, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.YValues = new_instancemethod(_Aspect.Aspect_MarkerStyle_YValues, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.SValues = new_instancemethod(_Aspect.Aspect_MarkerStyle_SValues, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.IsEqual = new_instancemethod(_Aspect.Aspect_MarkerStyle_IsEqual, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.__eq_wrapper__ = new_instancemethod(_Aspect.Aspect_MarkerStyle___eq_wrapper__, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.IsNotEqual = new_instancemethod(_Aspect.Aspect_MarkerStyle_IsNotEqual, None, Aspect_MarkerStyle)
Aspect_MarkerStyle.__ne_wrapper__ = new_instancemethod(_Aspect.Aspect_MarkerStyle___ne_wrapper__, None, Aspect_MarkerStyle)
Aspect_MarkerStyle._kill_pointed = new_instancemethod(_Aspect.Aspect_MarkerStyle__kill_pointed, None, Aspect_MarkerStyle)
Aspect_MarkerStyle_swigregister = _Aspect.Aspect_MarkerStyle_swigregister
Aspect_MarkerStyle_swigregister(Aspect_MarkerStyle)

class Aspect_Pixel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PrintToString(self):
        """PrintToString(Aspect_Pixel self) -> std::string"""
        return _Aspect.Aspect_Pixel_PrintToString(self)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_Pixel self)"""
        return _Aspect.Aspect_Pixel__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Pixel.PrintToString = new_instancemethod(_Aspect.Aspect_Pixel_PrintToString, None, Aspect_Pixel)
Aspect_Pixel._kill_pointed = new_instancemethod(_Aspect.Aspect_Pixel__kill_pointed, None, Aspect_Pixel)
Aspect_Pixel_swigregister = _Aspect.Aspect_Pixel_swigregister
Aspect_Pixel_swigregister(Aspect_Pixel)

class Aspect_RGBPixel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_RGBPixel._kill_pointed = new_instancemethod(_Aspect.Aspect_RGBPixel__kill_pointed, None, Aspect_RGBPixel)
Aspect_RGBPixel_swigregister = _Aspect.Aspect_RGBPixel_swigregister
Aspect_RGBPixel_swigregister(Aspect_RGBPixel)

class Aspect_SequenceNodeOfSequenceOfColor(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Quantity_Color &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfColor_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfColor(*args))

    def Value(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColor_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfColor self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColor__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfColor self) -> Handle_Aspect_SequenceNodeOfSequenceOfColor"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColor_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfColor.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColor_Value, None, Aspect_SequenceNodeOfSequenceOfColor)
Aspect_SequenceNodeOfSequenceOfColor._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColor__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfColor)
Aspect_SequenceNodeOfSequenceOfColor.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColor_GetHandle, None, Aspect_SequenceNodeOfSequenceOfColor)
Aspect_SequenceNodeOfSequenceOfColor_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfColor_swigregister
Aspect_SequenceNodeOfSequenceOfColor_swigregister(Aspect_SequenceNodeOfSequenceOfColor)

class Handle_Aspect_SequenceNodeOfSequenceOfColor(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfColor(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfColor.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfColor)

def Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast

class Aspect_SequenceNodeOfSequenceOfColorMapEntry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Aspect_ColorMapEntry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfColorMapEntry(*args))

    def Value(self, *args):
        """
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfColorMapEntry self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfColorMapEntry self) -> Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfColorMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_Value, None, Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Aspect_SequenceNodeOfSequenceOfColorMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Aspect_SequenceNodeOfSequenceOfColorMapEntry.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_GetHandle, None, Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister
Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister(Aspect_SequenceNodeOfSequenceOfColorMapEntry)

class Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry)

def Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColorMapEntry_DownCast

class Aspect_SequenceNodeOfSequenceOfFontMapEntry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Aspect_FontMapEntry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfFontMapEntry(*args))

    def Value(self, *args):
        """
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfFontMapEntry self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfFontMapEntry self) -> Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfFontMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_Value, None, Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Aspect_SequenceNodeOfSequenceOfFontMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Aspect_SequenceNodeOfSequenceOfFontMapEntry.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_GetHandle, None, Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister
Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister(Aspect_SequenceNodeOfSequenceOfFontMapEntry)

class Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry)

def Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfFontMapEntry_DownCast

class Aspect_SequenceNodeOfSequenceOfMarkMapEntry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Aspect_MarkMapEntry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfMarkMapEntry(*args))

    def Value(self, *args):
        """
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfMarkMapEntry self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfMarkMapEntry self) -> Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfMarkMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_Value, None, Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Aspect_SequenceNodeOfSequenceOfMarkMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Aspect_SequenceNodeOfSequenceOfMarkMapEntry.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_GetHandle, None, Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister
Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister(Aspect_SequenceNodeOfSequenceOfMarkMapEntry)

class Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry)

def Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfMarkMapEntry_DownCast

class Aspect_SequenceNodeOfSequenceOfTypeMapEntry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Aspect_TypeMapEntry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfTypeMapEntry(*args))

    def Value(self, *args):
        """
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfTypeMapEntry self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfTypeMapEntry self) -> Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfTypeMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_Value, None, Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Aspect_SequenceNodeOfSequenceOfTypeMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Aspect_SequenceNodeOfSequenceOfTypeMapEntry.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_GetHandle, None, Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister
Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister(Aspect_SequenceNodeOfSequenceOfTypeMapEntry)

class Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry)

def Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfTypeMapEntry_DownCast

class Aspect_SequenceNodeOfSequenceOfWidthMapEntry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Aspect_WidthMapEntry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfWidthMapEntry(*args))

    def Value(self, *args):
        """
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_SequenceNodeOfSequenceOfWidthMapEntry self)"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_SequenceNodeOfSequenceOfWidthMapEntry self) -> Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry"""
        return _Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceNodeOfSequenceOfWidthMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_Value, None, Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Aspect_SequenceNodeOfSequenceOfWidthMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry__kill_pointed, None, Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Aspect_SequenceNodeOfSequenceOfWidthMapEntry.GetHandle = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_GetHandle, None, Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister
Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister(Aspect_SequenceNodeOfSequenceOfWidthMapEntry)

class Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry.GetObject = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_GetObject, None, Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry__kill_pointed, None, Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry)
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry)

def Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_DownCast(AnObject):
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfWidthMapEntry_DownCast

class Aspect_SequenceOfColor(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfColor_swiginit(self, _Aspect.new_Aspect_SequenceOfColor(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfColor &
        :rtype: Aspect_SequenceOfColor

        """
        return _Aspect.Aspect_SequenceOfColor_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfColor &
        :rtype: Aspect_SequenceOfColor

        """
        return _Aspect.Aspect_SequenceOfColor_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfColor.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Clear, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Assign, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Set = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Set, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Append = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Append, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Prepend, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfColor_InsertBefore, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfColor_InsertAfter, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.First = new_instancemethod(_Aspect.Aspect_SequenceOfColor_First, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Last = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Last, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Split = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Split, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Value = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Value, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfColor_SetValue, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfColor_ChangeValue, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Remove, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfColor__kill_pointed, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor_swigregister = _Aspect.Aspect_SequenceOfColor_swigregister
Aspect_SequenceOfColor_swigregister(Aspect_SequenceOfColor)

class Aspect_SequenceOfColorMapEntry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfColorMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceOfColorMapEntry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfColorMapEntry &
        :rtype: Aspect_SequenceOfColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfColorMapEntry &
        :rtype: Aspect_SequenceOfColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Aspect_ColorMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Aspect_ColorMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_ColorMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_ColorMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Aspect_ColorMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_ColorMapEntry

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColorMapEntry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfColorMapEntry.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Clear, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Assign, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Set = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Set, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Append = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Append, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Prepend, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_InsertBefore, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_InsertAfter, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.First = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_First, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Last = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Last, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Split = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Split, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Value, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_SetValue, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_ChangeValue, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry_Remove, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfColorMapEntry__kill_pointed, None, Aspect_SequenceOfColorMapEntry)
Aspect_SequenceOfColorMapEntry_swigregister = _Aspect.Aspect_SequenceOfColorMapEntry_swigregister
Aspect_SequenceOfColorMapEntry_swigregister(Aspect_SequenceOfColorMapEntry)

class Aspect_SequenceOfFontMapEntry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfFontMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceOfFontMapEntry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfFontMapEntry &
        :rtype: Aspect_SequenceOfFontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfFontMapEntry &
        :rtype: Aspect_SequenceOfFontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Aspect_FontMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfFontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Aspect_FontMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfFontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_FontMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfFontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_FontMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfFontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfFontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Aspect_FontMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_FontMapEntry

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfFontMapEntry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfFontMapEntry.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Clear, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Assign, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Set = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Set, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Append = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Append, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Prepend, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_InsertBefore, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_InsertAfter, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.First = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_First, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Last = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Last, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Split = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Split, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Value, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_SetValue, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_ChangeValue, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry_Remove, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfFontMapEntry__kill_pointed, None, Aspect_SequenceOfFontMapEntry)
Aspect_SequenceOfFontMapEntry_swigregister = _Aspect.Aspect_SequenceOfFontMapEntry_swigregister
Aspect_SequenceOfFontMapEntry_swigregister(Aspect_SequenceOfFontMapEntry)

class Aspect_SequenceOfMarkMapEntry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfMarkMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceOfMarkMapEntry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfMarkMapEntry &
        :rtype: Aspect_SequenceOfMarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfMarkMapEntry &
        :rtype: Aspect_SequenceOfMarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Aspect_MarkMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfMarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Aspect_MarkMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfMarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_MarkMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfMarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_MarkMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfMarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfMarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Aspect_MarkMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_MarkMapEntry

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfMarkMapEntry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfMarkMapEntry.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Clear, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Assign, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Set = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Set, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Append = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Append, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Prepend, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_InsertBefore, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_InsertAfter, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.First = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_First, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Last = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Last, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Split = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Split, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Value, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_SetValue, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_ChangeValue, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry_Remove, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfMarkMapEntry__kill_pointed, None, Aspect_SequenceOfMarkMapEntry)
Aspect_SequenceOfMarkMapEntry_swigregister = _Aspect.Aspect_SequenceOfMarkMapEntry_swigregister
Aspect_SequenceOfMarkMapEntry_swigregister(Aspect_SequenceOfMarkMapEntry)

class Aspect_SequenceOfTypeMapEntry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfTypeMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceOfTypeMapEntry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfTypeMapEntry &
        :rtype: Aspect_SequenceOfTypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfTypeMapEntry &
        :rtype: Aspect_SequenceOfTypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Aspect_TypeMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfTypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Aspect_TypeMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfTypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_TypeMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfTypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_TypeMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfTypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfTypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Aspect_TypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfTypeMapEntry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfTypeMapEntry.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Clear, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Assign, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Set = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Set, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Append = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Append, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Prepend, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_InsertBefore, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_InsertAfter, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.First = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_First, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Last = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Last, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Split = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Split, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Value, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_SetValue, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_ChangeValue, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry_Remove, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfTypeMapEntry__kill_pointed, None, Aspect_SequenceOfTypeMapEntry)
Aspect_SequenceOfTypeMapEntry_swigregister = _Aspect.Aspect_SequenceOfTypeMapEntry_swigregister
Aspect_SequenceOfTypeMapEntry_swigregister(Aspect_SequenceOfTypeMapEntry)

class Aspect_SequenceOfWidthMapEntry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfWidthMapEntry_swiginit(self, _Aspect.new_Aspect_SequenceOfWidthMapEntry(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfWidthMapEntry &
        :rtype: Aspect_SequenceOfWidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: Aspect_SequenceOfWidthMapEntry &
        :rtype: Aspect_SequenceOfWidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: Aspect_WidthMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfWidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: Aspect_WidthMapEntry &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfWidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_WidthMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfWidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Aspect_WidthMapEntry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfWidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_First(self, *args)


    def Last(self, *args):
        """
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfWidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Aspect_WidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfWidthMapEntry_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_SequenceOfWidthMapEntry.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Clear, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Assign, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Set = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Set, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Append = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Append, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Prepend, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_InsertBefore, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_InsertAfter, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.First = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_First, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Last = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Last, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Split = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Split, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Value = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Value, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_SetValue, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_ChangeValue, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry_Remove, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_SequenceOfWidthMapEntry__kill_pointed, None, Aspect_SequenceOfWidthMapEntry)
Aspect_SequenceOfWidthMapEntry_swigregister = _Aspect.Aspect_SequenceOfWidthMapEntry_swigregister
Aspect_SequenceOfWidthMapEntry_swigregister(Aspect_SequenceOfWidthMapEntry)

class Aspect_TypeMap(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Aspect.Aspect_TypeMap_swiginit(self, _Aspect.new_Aspect_TypeMap(*args))

    def AddEntry(self, *args):
        """
        * Adds an entry in the type map <self>. Warning: Raises BadAccess if TypeMap size is exceeded.

        :param AnEntry:
        :type AnEntry: Aspect_TypeMapEntry &
        :rtype: None

        * Search an identical type style entry in the type map <self> and returns the TypeMapEntry Index if exist. Or add a new entry and returns the computed TypeMapEntry index used.

        :param aStyle:
        :type aStyle: Aspect_LineStyle &
        :rtype: int

        """
        return _Aspect.Aspect_TypeMap_AddEntry(self, *args)


    def Size(self, *args):
        """
        * Returns the Allocated typemap Size

        :rtype: int

        """
        return _Aspect.Aspect_TypeMap_Size(self, *args)


    def Index(self, *args):
        """
        * Returns the TypeMapEntry.Index of the TypeMap at rank <aTypemapIndex> .

        :param aTypemapIndex:
        :type aTypemapIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_TypeMap_Index(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_TypeMap_Dump(self, *args)


    def Entry(self, *args):
        """
        * Returns the Type map entry with the index <AnIndex>. Warning: Raises BadAccess if the index less than 1 or //!	 greater than Size.

        :param AnIndex:
        :type AnIndex: int
        :rtype: Aspect_TypeMapEntry

        """
        return _Aspect.Aspect_TypeMap_Entry(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_TypeMap self)"""
        return _Aspect.Aspect_TypeMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_TypeMap self) -> Handle_Aspect_TypeMap"""
        return _Aspect.Aspect_TypeMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_TypeMap.AddEntry = new_instancemethod(_Aspect.Aspect_TypeMap_AddEntry, None, Aspect_TypeMap)
Aspect_TypeMap.Size = new_instancemethod(_Aspect.Aspect_TypeMap_Size, None, Aspect_TypeMap)
Aspect_TypeMap.Index = new_instancemethod(_Aspect.Aspect_TypeMap_Index, None, Aspect_TypeMap)
Aspect_TypeMap.Dump = new_instancemethod(_Aspect.Aspect_TypeMap_Dump, None, Aspect_TypeMap)
Aspect_TypeMap.Entry = new_instancemethod(_Aspect.Aspect_TypeMap_Entry, None, Aspect_TypeMap)
Aspect_TypeMap._kill_pointed = new_instancemethod(_Aspect.Aspect_TypeMap__kill_pointed, None, Aspect_TypeMap)
Aspect_TypeMap.GetHandle = new_instancemethod(_Aspect.Aspect_TypeMap_GetHandle, None, Aspect_TypeMap)
Aspect_TypeMap_swigregister = _Aspect.Aspect_TypeMap_swigregister
Aspect_TypeMap_swigregister(Aspect_TypeMap)

class Handle_Aspect_TypeMap(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_TypeMap_swiginit(self, _Aspect.new_Handle_Aspect_TypeMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_TypeMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_TypeMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_TypeMap_Nullify, None, Handle_Aspect_TypeMap)
Handle_Aspect_TypeMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_TypeMap_IsNull, None, Handle_Aspect_TypeMap)
Handle_Aspect_TypeMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_TypeMap_GetObject, None, Handle_Aspect_TypeMap)
Handle_Aspect_TypeMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_TypeMap__kill_pointed, None, Handle_Aspect_TypeMap)
Handle_Aspect_TypeMap_swigregister = _Aspect.Handle_Aspect_TypeMap_swigregister
Handle_Aspect_TypeMap_swigregister(Handle_Aspect_TypeMap)

def Handle_Aspect_TypeMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_TypeMap_DownCast(AnObject)
Handle_Aspect_TypeMap_DownCast = _Aspect.Handle_Aspect_TypeMap_DownCast

class Aspect_TypeMapEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an unallocated typemap entry

        :rtype: None

        * Creates an allocated typemap entry

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_LineStyle &
        :rtype: None

        * Creates an allocated typemap entry. Warning: Raises error if the typemap entry <entry> //!	 is unallocated.

        :param entry:
        :type entry: Aspect_TypeMapEntry &
        :rtype: None

        """
        _Aspect.Aspect_TypeMapEntry_swiginit(self, _Aspect.new_Aspect_TypeMapEntry(*args))

    def SetValue(self, *args):
        """
        * Sets typemap entry value and allocates it.

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_LineStyle &
        :rtype: None

        * Sets typemap entry value and allocates it.

        :param entry:
        :type entry: Aspect_TypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_SetValue(self, *args)


    def Set(self, *args):
        """
        :param entry:
        :type entry: Aspect_TypeMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_Set(self, *args)


    def SetType(self, *args):
        """
        * Sets the line style of typemap entry.

        :param Style:
        :type Style: Aspect_LineStyle &
        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_SetType(self, *args)


    def Type(self, *args):
        """
        :rtype: Aspect_LineStyle

        """
        return _Aspect.Aspect_TypeMapEntry_Type(self, *args)


    def SetIndex(self, *args):
        """
        * Sets index value of a typemap entry.

        :param index:
        :type index: int
        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_SetIndex(self, *args)


    def Index(self, *args):
        """
        * Returns index value of a typemap entry. Warning: Raises error if the typemap entry is unallocated .

        :rtype: int

        """
        return _Aspect.Aspect_TypeMapEntry_Index(self, *args)


    def Free(self, *args):
        """
        * Unallocates the typemap entry.

        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_Free(self, *args)


    def IsAllocated(self, *args):
        """
        * Returns True if the typemap entry is allocated. Warning: A typemap entry is allocated when the type and //!	 the index is defined.

        :rtype: bool

        """
        return _Aspect.Aspect_TypeMapEntry_IsAllocated(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_TypeMapEntry_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_TypeMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_TypeMapEntry_SetValue, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.Set = new_instancemethod(_Aspect.Aspect_TypeMapEntry_Set, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.SetType = new_instancemethod(_Aspect.Aspect_TypeMapEntry_SetType, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.Type = new_instancemethod(_Aspect.Aspect_TypeMapEntry_Type, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.SetIndex = new_instancemethod(_Aspect.Aspect_TypeMapEntry_SetIndex, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.Index = new_instancemethod(_Aspect.Aspect_TypeMapEntry_Index, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.Free = new_instancemethod(_Aspect.Aspect_TypeMapEntry_Free, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.IsAllocated = new_instancemethod(_Aspect.Aspect_TypeMapEntry_IsAllocated, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry.Dump = new_instancemethod(_Aspect.Aspect_TypeMapEntry_Dump, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_TypeMapEntry__kill_pointed, None, Aspect_TypeMapEntry)
Aspect_TypeMapEntry_swigregister = _Aspect.Aspect_TypeMapEntry_swigregister
Aspect_TypeMapEntry_swigregister(Aspect_TypeMapEntry)

class Aspect_WidthMap(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a width map.

        :rtype: None

        """
        _Aspect.Aspect_WidthMap_swiginit(self, _Aspect.new_Aspect_WidthMap(*args))

    def AddEntry(self, *args):
        """
        * Adds an entry in the Width map <self>. Warning: Raises BadAccess if WidthMap size is exceeded.

        :param AnEntry:
        :type AnEntry: Aspect_WidthMapEntry &
        :rtype: None

        * Search an identical line width entry in the width map <self> and returns the WidthMapEntry Index if exist. Or add a new entry and returns the computed WidthMapEntry index used.

        :param aStyle:
        :type aStyle: Aspect_WidthOfLine
        :rtype: int

        * Search an identical line width entry in the width map <self> and returns the WidthMapEntry Index if exist. Or add a new entry and returns the computed WidthMapEntry index used.

        :param aStyle:
        :type aStyle: Quantity_Length
        :rtype: int

        """
        return _Aspect.Aspect_WidthMap_AddEntry(self, *args)


    def Size(self, *args):
        """
        * Returns the Allocated widthmap Size

        :rtype: int

        """
        return _Aspect.Aspect_WidthMap_Size(self, *args)


    def Index(self, *args):
        """
        * Returns the WidthMapEntry.Index of the WidthMap at rank <aWidthmapIndex> .

        :param aWidthmapIndex:
        :type aWidthmapIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WidthMap_Index(self, *args)


    def Entry(self, *args):
        """
        * Returns the Width map entry with the index <AnIndex>. Warning: Raises BadAccess if the index less than 1 or //!	 greater than Size.

        :param AnIndex:
        :type AnIndex: int
        :rtype: Aspect_WidthMapEntry

        """
        return _Aspect.Aspect_WidthMap_Entry(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_WidthMap_Dump(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_WidthMap self)"""
        return _Aspect.Aspect_WidthMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_WidthMap self) -> Handle_Aspect_WidthMap"""
        return _Aspect.Aspect_WidthMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_WidthMap.AddEntry = new_instancemethod(_Aspect.Aspect_WidthMap_AddEntry, None, Aspect_WidthMap)
Aspect_WidthMap.Size = new_instancemethod(_Aspect.Aspect_WidthMap_Size, None, Aspect_WidthMap)
Aspect_WidthMap.Index = new_instancemethod(_Aspect.Aspect_WidthMap_Index, None, Aspect_WidthMap)
Aspect_WidthMap.Entry = new_instancemethod(_Aspect.Aspect_WidthMap_Entry, None, Aspect_WidthMap)
Aspect_WidthMap.Dump = new_instancemethod(_Aspect.Aspect_WidthMap_Dump, None, Aspect_WidthMap)
Aspect_WidthMap._kill_pointed = new_instancemethod(_Aspect.Aspect_WidthMap__kill_pointed, None, Aspect_WidthMap)
Aspect_WidthMap.GetHandle = new_instancemethod(_Aspect.Aspect_WidthMap_GetHandle, None, Aspect_WidthMap)
Aspect_WidthMap_swigregister = _Aspect.Aspect_WidthMap_swigregister
Aspect_WidthMap_swigregister(Aspect_WidthMap)

class Handle_Aspect_WidthMap(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_WidthMap_swiginit(self, _Aspect.new_Handle_Aspect_WidthMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_WidthMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_WidthMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_WidthMap_Nullify, None, Handle_Aspect_WidthMap)
Handle_Aspect_WidthMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_WidthMap_IsNull, None, Handle_Aspect_WidthMap)
Handle_Aspect_WidthMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_WidthMap_GetObject, None, Handle_Aspect_WidthMap)
Handle_Aspect_WidthMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_WidthMap__kill_pointed, None, Handle_Aspect_WidthMap)
Handle_Aspect_WidthMap_swigregister = _Aspect.Handle_Aspect_WidthMap_swigregister
Handle_Aspect_WidthMap_swigregister(Handle_Aspect_WidthMap)

def Handle_Aspect_WidthMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_WidthMap_DownCast(AnObject)
Handle_Aspect_WidthMap_DownCast = _Aspect.Handle_Aspect_WidthMap_DownCast

class Aspect_WidthMapEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an unallocated widthmap entry

        :rtype: None

        * Creates an allocated widthmap entry from width style

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_WidthOfLine
        :rtype: None

        * Creates an allocated widthmap entry from width value

        :param index:
        :type index: int
        :param width:
        :type width: Quantity_Length
        :rtype: None

        * Creates an allocated widthmap entry.

        :param entry:
        :type entry: Aspect_WidthMapEntry &
        :rtype: None

        """
        _Aspect.Aspect_WidthMapEntry_swiginit(self, _Aspect.new_Aspect_WidthMapEntry(*args))

    def SetValue(self, *args):
        """
        * Sets widthmap entry value from width style //!	 and allocates it.

        :param index:
        :type index: int
        :param style:
        :type style: Aspect_WidthOfLine
        :rtype: None

        * Sets widthmap entry value from width value //!	 and allocates it.

        :param index:
        :type index: int
        :param width:
        :type width: Quantity_Length
        :rtype: None

        * Sets widthmap entry value and allocates it.

        :param entry:
        :type entry: Aspect_WidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_SetValue(self, *args)


    def Set(self, *args):
        """
        :param entry:
        :type entry: Aspect_WidthMapEntry &
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_Set(self, *args)


    def SetIndex(self, *args):
        """
        * Sets index value of a widthmap entry.

        :param index:
        :type index: int
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_SetIndex(self, *args)


    def SetType(self, *args):
        """
        * Sets width style of widthmap entry.

        :param Style:
        :type Style: Aspect_WidthOfLine
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_SetType(self, *args)


    def SetWidth(self, *args):
        """
        * Sets width value of widthmap entry.

        :param Width:
        :type Width: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_SetWidth(self, *args)


    def Type(self, *args):
        """
        :rtype: Aspect_WidthOfLine

        """
        return _Aspect.Aspect_WidthMapEntry_Type(self, *args)


    def Width(self, *args):
        """
        * Returns width value of widthmap entry. Warning: Raises error if the widthmap entry is unallocated .

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_WidthMapEntry_Width(self, *args)


    def Index(self, *args):
        """
        * Returns index value of a widthmap entry. Warning: Raises error if the widthmap entry is unallocated .

        :rtype: int

        """
        return _Aspect.Aspect_WidthMapEntry_Index(self, *args)


    def Free(self, *args):
        """
        * Unallocates the widthmap entry.

        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_Free(self, *args)


    def IsAllocated(self, *args):
        """
        * Returns True if the widthmap entry is allocated. Warning: A widthmap entry is allocated when the width and //!	 the index is defined.

        :rtype: bool

        """
        return _Aspect.Aspect_WidthMapEntry_IsAllocated(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _Aspect.Aspect_WidthMapEntry_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_WidthMapEntry.SetValue = new_instancemethod(_Aspect.Aspect_WidthMapEntry_SetValue, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Set = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Set, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.SetIndex = new_instancemethod(_Aspect.Aspect_WidthMapEntry_SetIndex, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.SetType = new_instancemethod(_Aspect.Aspect_WidthMapEntry_SetType, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.SetWidth = new_instancemethod(_Aspect.Aspect_WidthMapEntry_SetWidth, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Type = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Type, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Width = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Width, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Index = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Index, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Free = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Free, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.IsAllocated = new_instancemethod(_Aspect.Aspect_WidthMapEntry_IsAllocated, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry.Dump = new_instancemethod(_Aspect.Aspect_WidthMapEntry_Dump, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry._kill_pointed = new_instancemethod(_Aspect.Aspect_WidthMapEntry__kill_pointed, None, Aspect_WidthMapEntry)
Aspect_WidthMapEntry_swigregister = _Aspect.Aspect_WidthMapEntry_swigregister
Aspect_WidthMapEntry_swigregister(Aspect_WidthMapEntry)

class Aspect_Window(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetBackground(self, *args):
        """
        * Modifies the window background.

        :param ABack:
        :type ABack: Aspect_Background &
        :rtype: None

        * Modifies the window background from a Named Color.

        :param theNameOfColor:
        :type theNameOfColor: Quantity_NameOfColor
        :rtype: None

        * Modifies the window background.

        :param color:
        :type color: Quantity_Color &
        :rtype: None

        * Modifies the window gradient background.

        :param ABackground:
        :type ABackground: Aspect_GradientBackground &
        :rtype: None

        * Modifies the window gradient background.

        :param theFirstColor:
        :type theFirstColor: Quantity_Color &
        :param theSecondColor:
        :type theSecondColor: Quantity_Color &
        :param theFillMethod:
        :type theFillMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        return _Aspect.Aspect_Window_SetBackground(self, *args)


    def Map(self, *args):
        """
        * Opens the window <self>.

        :rtype: void

        """
        return _Aspect.Aspect_Window_Map(self, *args)


    def Unmap(self, *args):
        """
        * Closes the window <self>.

        :rtype: void

        """
        return _Aspect.Aspect_Window_Unmap(self, *args)


    def DoResize(self, *args):
        """
        * Apply the resizing to the window <self>.

        :rtype: Aspect_TypeOfResize

        """
        return _Aspect.Aspect_Window_DoResize(self, *args)


    def DoMapping(self, *args):
        """
        * Apply the mapping change to the window <self>. and returns True if the window is mapped at screen.

        :rtype: bool

        """
        return _Aspect.Aspect_Window_DoMapping(self, *args)


    def Destroy(self, *args):
        """
        * Destroy the Window

        :rtype: void

        """
        return _Aspect.Aspect_Window_Destroy(self, *args)


    def Background(self, *args):
        """
        * Returns the window background.

        :rtype: Aspect_Background

        """
        return _Aspect.Aspect_Window_Background(self, *args)


    def BackgroundFillMethod(self, *args):
        """
        * Returns the current image background fill mode.

        :rtype: Aspect_FillMethod

        """
        return _Aspect.Aspect_Window_BackgroundFillMethod(self, *args)


    def GradientBackground(self, *args):
        """
        * Returns the window gradient background.

        :rtype: Aspect_GradientBackground

        """
        return _Aspect.Aspect_Window_GradientBackground(self, *args)


    def IsMapped(self, *args):
        """
        * Returns True if the window <self> is opened //!	 and False if the window is closed.

        :rtype: bool

        """
        return _Aspect.Aspect_Window_IsMapped(self, *args)


    def IsVirtual(self, *args):
        """
        * Returns True if the window <self> is virtual

        :rtype: bool

        """
        return _Aspect.Aspect_Window_IsVirtual(self, *args)


    def SetVirtual(self, *args):
        """
        * Setup the virtual state

        :param theVirtual:
        :type theVirtual: bool
        :rtype: None

        """
        return _Aspect.Aspect_Window_SetVirtual(self, *args)


    def Ratio(self, *args):
        """
        * Returns The Window RATIO equal to the physical //!	 WIDTH/HEIGHT dimensions

        :rtype: Quantity_Ratio

        """
        return _Aspect.Aspect_Window_Ratio(self, *args)


    def Position(self, *args):
        """
        * Returns The Window POSITION in PIXEL

        :param X1:
        :type X1: int &
        :param Y1:
        :type Y1: int &
        :param X2:
        :type X2: int &
        :param Y2:
        :type Y2: int &
        :rtype: void

        """
        return _Aspect.Aspect_Window_Position(self, *args)


    def Size(self, *args):
        """
        * Returns The Window SIZE in PIXEL

        :param Width:
        :type Width: int &
        :param Height:
        :type Height: int &
        :rtype: void

        """
        return _Aspect.Aspect_Window_Size(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_Window self)"""
        return _Aspect.Aspect_Window__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_Window self) -> Handle_Aspect_Window"""
        return _Aspect.Aspect_Window_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_Window.SetBackground = new_instancemethod(_Aspect.Aspect_Window_SetBackground, None, Aspect_Window)
Aspect_Window.Map = new_instancemethod(_Aspect.Aspect_Window_Map, None, Aspect_Window)
Aspect_Window.Unmap = new_instancemethod(_Aspect.Aspect_Window_Unmap, None, Aspect_Window)
Aspect_Window.DoResize = new_instancemethod(_Aspect.Aspect_Window_DoResize, None, Aspect_Window)
Aspect_Window.DoMapping = new_instancemethod(_Aspect.Aspect_Window_DoMapping, None, Aspect_Window)
Aspect_Window.Destroy = new_instancemethod(_Aspect.Aspect_Window_Destroy, None, Aspect_Window)
Aspect_Window.Background = new_instancemethod(_Aspect.Aspect_Window_Background, None, Aspect_Window)
Aspect_Window.BackgroundFillMethod = new_instancemethod(_Aspect.Aspect_Window_BackgroundFillMethod, None, Aspect_Window)
Aspect_Window.GradientBackground = new_instancemethod(_Aspect.Aspect_Window_GradientBackground, None, Aspect_Window)
Aspect_Window.IsMapped = new_instancemethod(_Aspect.Aspect_Window_IsMapped, None, Aspect_Window)
Aspect_Window.IsVirtual = new_instancemethod(_Aspect.Aspect_Window_IsVirtual, None, Aspect_Window)
Aspect_Window.SetVirtual = new_instancemethod(_Aspect.Aspect_Window_SetVirtual, None, Aspect_Window)
Aspect_Window.Ratio = new_instancemethod(_Aspect.Aspect_Window_Ratio, None, Aspect_Window)
Aspect_Window.Position = new_instancemethod(_Aspect.Aspect_Window_Position, None, Aspect_Window)
Aspect_Window.Size = new_instancemethod(_Aspect.Aspect_Window_Size, None, Aspect_Window)
Aspect_Window._kill_pointed = new_instancemethod(_Aspect.Aspect_Window__kill_pointed, None, Aspect_Window)
Aspect_Window.GetHandle = new_instancemethod(_Aspect.Aspect_Window_GetHandle, None, Aspect_Window)
Aspect_Window_swigregister = _Aspect.Aspect_Window_swigregister
Aspect_Window_swigregister(Aspect_Window)

class Handle_Aspect_Window(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_Window_swiginit(self, _Aspect.new_Handle_Aspect_Window(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_Window_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_Window.Nullify = new_instancemethod(_Aspect.Handle_Aspect_Window_Nullify, None, Handle_Aspect_Window)
Handle_Aspect_Window.IsNull = new_instancemethod(_Aspect.Handle_Aspect_Window_IsNull, None, Handle_Aspect_Window)
Handle_Aspect_Window.GetObject = new_instancemethod(_Aspect.Handle_Aspect_Window_GetObject, None, Handle_Aspect_Window)
Handle_Aspect_Window._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_Window__kill_pointed, None, Handle_Aspect_Window)
Handle_Aspect_Window_swigregister = _Aspect.Handle_Aspect_Window_swigregister
Handle_Aspect_Window_swigregister(Handle_Aspect_Window)

def Handle_Aspect_Window_DownCast(AnObject):
    return _Aspect.Handle_Aspect_Window_DownCast(AnObject)
Handle_Aspect_Window_DownCast = _Aspect.Handle_Aspect_Window_DownCast

class Aspect_CircularGrid(Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates a new grid. By default this grid is not active.

        :param aRadiusStep:
        :type aRadiusStep: Quantity_Length
        :param aDivisionNumber:
        :type aDivisionNumber: int
        :param XOrigin: default value is 0
        :type XOrigin: Quantity_Length
        :param anYOrigin: default value is 0
        :type anYOrigin: Quantity_Length
        :param aRotationAngle: default value is 0
        :type aRotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        _Aspect.Aspect_CircularGrid_swiginit(self, _Aspect.new_Aspect_CircularGrid(*args))

    def SetRadiusStep(self, *args):
        """
        * defines the x step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetRadiusStep(self, *args)


    def SetDivisionNumber(self, *args):
        """
        * defines the step of the grid.

        :param aNumber:
        :type aNumber: int
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetDivisionNumber(self, *args)


    def SetGridValues(self, *args):
        """
        :param XOrigin:
        :type XOrigin: Quantity_Length
        :param YOrigin:
        :type YOrigin: Quantity_Length
        :param RadiusStep:
        :type RadiusStep: Quantity_Length
        :param DivisionNumber:
        :type DivisionNumber: int
        :param RotationAngle:
        :type RotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetGridValues(self, *args)


    def RadiusStep(self, *args):
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_CircularGrid_RadiusStep(self, *args)


    def DivisionNumber(self, *args):
        """
        * returns the x step of the grid.

        :rtype: int

        """
        return _Aspect.Aspect_CircularGrid_DivisionNumber(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_CircularGrid self)"""
        return _Aspect.Aspect_CircularGrid__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_CircularGrid self) -> Handle_Aspect_CircularGrid"""
        return _Aspect.Aspect_CircularGrid_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_CircularGrid.SetRadiusStep = new_instancemethod(_Aspect.Aspect_CircularGrid_SetRadiusStep, None, Aspect_CircularGrid)
Aspect_CircularGrid.SetDivisionNumber = new_instancemethod(_Aspect.Aspect_CircularGrid_SetDivisionNumber, None, Aspect_CircularGrid)
Aspect_CircularGrid.SetGridValues = new_instancemethod(_Aspect.Aspect_CircularGrid_SetGridValues, None, Aspect_CircularGrid)
Aspect_CircularGrid.RadiusStep = new_instancemethod(_Aspect.Aspect_CircularGrid_RadiusStep, None, Aspect_CircularGrid)
Aspect_CircularGrid.DivisionNumber = new_instancemethod(_Aspect.Aspect_CircularGrid_DivisionNumber, None, Aspect_CircularGrid)
Aspect_CircularGrid._kill_pointed = new_instancemethod(_Aspect.Aspect_CircularGrid__kill_pointed, None, Aspect_CircularGrid)
Aspect_CircularGrid.GetHandle = new_instancemethod(_Aspect.Aspect_CircularGrid_GetHandle, None, Aspect_CircularGrid)
Aspect_CircularGrid_swigregister = _Aspect.Aspect_CircularGrid_swigregister
Aspect_CircularGrid_swigregister(Aspect_CircularGrid)

class Handle_Aspect_CircularGrid(Handle_Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_CircularGrid_swiginit(self, _Aspect.new_Handle_Aspect_CircularGrid(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_CircularGrid_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_CircularGrid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid_Nullify, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid_IsNull, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid.GetObject = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid_GetObject, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid__kill_pointed, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid_swigregister = _Aspect.Handle_Aspect_CircularGrid_swigregister
Handle_Aspect_CircularGrid_swigregister(Handle_Aspect_CircularGrid)

def Handle_Aspect_CircularGrid_DownCast(AnObject):
    return _Aspect.Handle_Aspect_CircularGrid_DownCast(AnObject)
Handle_Aspect_CircularGrid_DownCast = _Aspect.Handle_Aspect_CircularGrid_DownCast

class Aspect_ColorCubeColorMap(Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a ColorCube ColorMap.

        :param base_pixel:
        :type base_pixel: int
        :param redmax:
        :type redmax: int
        :param redmult:
        :type redmult: int
        :param greenmax:
        :type greenmax: int
        :param greenmult:
        :type greenmult: int
        :param bluemax:
        :type bluemax: int
        :param bluemult:
        :type bluemult: int
        :rtype: None

        """
        _Aspect.Aspect_ColorCubeColorMap_swiginit(self, _Aspect.new_Aspect_ColorCubeColorMap(*args))

    def ColorCubeDefinition(self, *args):
        """
        :param base_pixel:
        :type base_pixel: int &
        :param redmax:
        :type redmax: int &
        :param redmult:
        :type redmult: int &
        :param greenmax:
        :type greenmax: int &
        :param greenmult:
        :type greenmult: int &
        :param bluemax:
        :type bluemax: int &
        :param bluemult:
        :type bluemult: int &
        :rtype: None

        """
        return _Aspect.Aspect_ColorCubeColorMap_ColorCubeDefinition(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_ColorCubeColorMap self)"""
        return _Aspect.Aspect_ColorCubeColorMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_ColorCubeColorMap self) -> Handle_Aspect_ColorCubeColorMap"""
        return _Aspect.Aspect_ColorCubeColorMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorCubeColorMap.ColorCubeDefinition = new_instancemethod(_Aspect.Aspect_ColorCubeColorMap_ColorCubeDefinition, None, Aspect_ColorCubeColorMap)
Aspect_ColorCubeColorMap._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorCubeColorMap__kill_pointed, None, Aspect_ColorCubeColorMap)
Aspect_ColorCubeColorMap.GetHandle = new_instancemethod(_Aspect.Aspect_ColorCubeColorMap_GetHandle, None, Aspect_ColorCubeColorMap)
Aspect_ColorCubeColorMap_swigregister = _Aspect.Aspect_ColorCubeColorMap_swigregister
Aspect_ColorCubeColorMap_swigregister(Aspect_ColorCubeColorMap)

class Handle_Aspect_ColorCubeColorMap(Handle_Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_ColorCubeColorMap_swiginit(self, _Aspect.new_Handle_Aspect_ColorCubeColorMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_ColorCubeColorMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_ColorCubeColorMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_ColorCubeColorMap_Nullify, None, Handle_Aspect_ColorCubeColorMap)
Handle_Aspect_ColorCubeColorMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_ColorCubeColorMap_IsNull, None, Handle_Aspect_ColorCubeColorMap)
Handle_Aspect_ColorCubeColorMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_ColorCubeColorMap_GetObject, None, Handle_Aspect_ColorCubeColorMap)
Handle_Aspect_ColorCubeColorMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_ColorCubeColorMap__kill_pointed, None, Handle_Aspect_ColorCubeColorMap)
Handle_Aspect_ColorCubeColorMap_swigregister = _Aspect.Handle_Aspect_ColorCubeColorMap_swigregister
Handle_Aspect_ColorCubeColorMap_swigregister(Handle_Aspect_ColorCubeColorMap)

def Handle_Aspect_ColorCubeColorMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_ColorCubeColorMap_DownCast(AnObject)
Handle_Aspect_ColorCubeColorMap_DownCast = _Aspect.Handle_Aspect_ColorCubeColorMap_DownCast

class Aspect_ColorPixel(Aspect_Pixel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        """
        _Aspect.Aspect_ColorPixel_swiginit(self, _Aspect.new_Aspect_ColorPixel(*args))

    def Value(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorPixel_Value(self, *args)


    def SetValue(self, *args):
        """
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_ColorPixel_SetValue(self, *args)


    def PrintToString(self):
        """PrintToString(Aspect_ColorPixel self) -> std::string"""
        return _Aspect.Aspect_ColorPixel_PrintToString(self)


    def HashCode(self, *args):
        """
        * Returns a hashed value denoting <self>. This value is in  the range 1..<Upper>.

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Aspect.Aspect_ColorPixel_HashCode(self, *args)


    def __hash__(self):
        """__hash__(Aspect_ColorPixel self) -> Standard_Integer"""
        return _Aspect.Aspect_ColorPixel___hash__(self)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_ColorPixel &
        :rtype: bool

        """
        return _Aspect.Aspect_ColorPixel_IsEqual(self, *args)


    def __eq_wrapper__(self, other):
        """__eq_wrapper__(Aspect_ColorPixel self, Aspect_ColorPixel other) -> bool"""
        return _Aspect.Aspect_ColorPixel___eq_wrapper__(self, other)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsNotEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_ColorPixel &
        :rtype: bool

        """
        return _Aspect.Aspect_ColorPixel_IsNotEqual(self, *args)


    def __ne_wrapper__(self, other):
        """__ne_wrapper__(Aspect_ColorPixel self, Aspect_ColorPixel other) -> bool"""
        return _Aspect.Aspect_ColorPixel___ne_wrapper__(self, other)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def _CSFDB_GetAspect_ColorPixelmyColor(self, *args):
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorPixel__CSFDB_GetAspect_ColorPixelmyColor(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_ColorPixel self)"""
        return _Aspect.Aspect_ColorPixel__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorPixel.Value = new_instancemethod(_Aspect.Aspect_ColorPixel_Value, None, Aspect_ColorPixel)
Aspect_ColorPixel.SetValue = new_instancemethod(_Aspect.Aspect_ColorPixel_SetValue, None, Aspect_ColorPixel)
Aspect_ColorPixel.PrintToString = new_instancemethod(_Aspect.Aspect_ColorPixel_PrintToString, None, Aspect_ColorPixel)
Aspect_ColorPixel.HashCode = new_instancemethod(_Aspect.Aspect_ColorPixel_HashCode, None, Aspect_ColorPixel)
Aspect_ColorPixel.__hash__ = new_instancemethod(_Aspect.Aspect_ColorPixel___hash__, None, Aspect_ColorPixel)
Aspect_ColorPixel.IsEqual = new_instancemethod(_Aspect.Aspect_ColorPixel_IsEqual, None, Aspect_ColorPixel)
Aspect_ColorPixel.__eq_wrapper__ = new_instancemethod(_Aspect.Aspect_ColorPixel___eq_wrapper__, None, Aspect_ColorPixel)
Aspect_ColorPixel.IsNotEqual = new_instancemethod(_Aspect.Aspect_ColorPixel_IsNotEqual, None, Aspect_ColorPixel)
Aspect_ColorPixel.__ne_wrapper__ = new_instancemethod(_Aspect.Aspect_ColorPixel___ne_wrapper__, None, Aspect_ColorPixel)
Aspect_ColorPixel._CSFDB_GetAspect_ColorPixelmyColor = new_instancemethod(_Aspect.Aspect_ColorPixel__CSFDB_GetAspect_ColorPixelmyColor, None, Aspect_ColorPixel)
Aspect_ColorPixel._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorPixel__kill_pointed, None, Aspect_ColorPixel)
Aspect_ColorPixel_swigregister = _Aspect.Aspect_ColorPixel_swigregister
Aspect_ColorPixel_swigregister(Aspect_ColorPixel)

class Aspect_ColorRampColorMap(Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Color Ramp Colormap starting from Black at //!	 basepixel to color at basepixel+dimension-1.

        :param basepixel:
        :type basepixel: int
        :param dimension:
        :type dimension: int
        :param color:
        :type color: Quantity_Color &
        :rtype: None

        * Create a Color Ramp Colormap starting from Black at //!	 basepixel to color at basepixel+dimension-1.

        :param basepixel:
        :type basepixel: int
        :param dimension:
        :type dimension: int
        :param colorName:
        :type colorName: Quantity_NameOfColor
        :rtype: None

        """
        _Aspect.Aspect_ColorRampColorMap_swiginit(self, _Aspect.new_Aspect_ColorRampColorMap(*args))

    def ColorRampDefinition(self, *args):
        """
        * Get Color Ramp Colormap definition .

        :param basepixel:
        :type basepixel: int &
        :param dimension:
        :type dimension: int &
        :param color:
        :type color: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_ColorRampColorMap_ColorRampDefinition(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_ColorRampColorMap self)"""
        return _Aspect.Aspect_ColorRampColorMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_ColorRampColorMap self) -> Handle_Aspect_ColorRampColorMap"""
        return _Aspect.Aspect_ColorRampColorMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_ColorRampColorMap.ColorRampDefinition = new_instancemethod(_Aspect.Aspect_ColorRampColorMap_ColorRampDefinition, None, Aspect_ColorRampColorMap)
Aspect_ColorRampColorMap._kill_pointed = new_instancemethod(_Aspect.Aspect_ColorRampColorMap__kill_pointed, None, Aspect_ColorRampColorMap)
Aspect_ColorRampColorMap.GetHandle = new_instancemethod(_Aspect.Aspect_ColorRampColorMap_GetHandle, None, Aspect_ColorRampColorMap)
Aspect_ColorRampColorMap_swigregister = _Aspect.Aspect_ColorRampColorMap_swigregister
Aspect_ColorRampColorMap_swigregister(Aspect_ColorRampColorMap)

class Handle_Aspect_ColorRampColorMap(Handle_Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_ColorRampColorMap_swiginit(self, _Aspect.new_Handle_Aspect_ColorRampColorMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_ColorRampColorMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_ColorRampColorMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_ColorRampColorMap_Nullify, None, Handle_Aspect_ColorRampColorMap)
Handle_Aspect_ColorRampColorMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_ColorRampColorMap_IsNull, None, Handle_Aspect_ColorRampColorMap)
Handle_Aspect_ColorRampColorMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_ColorRampColorMap_GetObject, None, Handle_Aspect_ColorRampColorMap)
Handle_Aspect_ColorRampColorMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_ColorRampColorMap__kill_pointed, None, Handle_Aspect_ColorRampColorMap)
Handle_Aspect_ColorRampColorMap_swigregister = _Aspect.Handle_Aspect_ColorRampColorMap_swigregister
Handle_Aspect_ColorRampColorMap_swigregister(Handle_Aspect_ColorRampColorMap)

def Handle_Aspect_ColorRampColorMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_ColorRampColorMap_DownCast(AnObject)
Handle_Aspect_ColorRampColorMap_DownCast = _Aspect.Handle_Aspect_ColorRampColorMap_DownCast

class Aspect_GenericColorMap(Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a generic ColorMap .

        :rtype: None

        """
        _Aspect.Aspect_GenericColorMap_swiginit(self, _Aspect.new_Aspect_GenericColorMap(*args))

    def AddEntry(self, *args):
        """
        * Adds an entry in the color map <self>. Warning: Raises BadAccess if the ColorMapEntry index is alreadry defined.

        :param AnEntry:
        :type AnEntry: Aspect_ColorMapEntry &
        :rtype: None

        * Search an identical color entry in the color map <self> and returns the ColorMapEntry Index if exist. Or add a new entry and returns the computed ColorMapEntry index used.

        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: int

        """
        return _Aspect.Aspect_GenericColorMap_AddEntry(self, *args)


    def RemoveEntry(self, *args):
        """
        * Remove the ColorMapEntry at position index in the ColorMap Warning: Raises BadAccess if the index is not defined in the //!	 ColorMap.

        :param AColorMapEntryIndex:
        :type AColorMapEntryIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_GenericColorMap_RemoveEntry(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_GenericColorMap self)"""
        return _Aspect.Aspect_GenericColorMap__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_GenericColorMap self) -> Handle_Aspect_GenericColorMap"""
        return _Aspect.Aspect_GenericColorMap_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_GenericColorMap.AddEntry = new_instancemethod(_Aspect.Aspect_GenericColorMap_AddEntry, None, Aspect_GenericColorMap)
Aspect_GenericColorMap.RemoveEntry = new_instancemethod(_Aspect.Aspect_GenericColorMap_RemoveEntry, None, Aspect_GenericColorMap)
Aspect_GenericColorMap._kill_pointed = new_instancemethod(_Aspect.Aspect_GenericColorMap__kill_pointed, None, Aspect_GenericColorMap)
Aspect_GenericColorMap.GetHandle = new_instancemethod(_Aspect.Aspect_GenericColorMap_GetHandle, None, Aspect_GenericColorMap)
Aspect_GenericColorMap_swigregister = _Aspect.Aspect_GenericColorMap_swigregister
Aspect_GenericColorMap_swigregister(Aspect_GenericColorMap)

class Handle_Aspect_GenericColorMap(Handle_Aspect_ColorMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_GenericColorMap_swiginit(self, _Aspect.new_Handle_Aspect_GenericColorMap(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_GenericColorMap_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_GenericColorMap.Nullify = new_instancemethod(_Aspect.Handle_Aspect_GenericColorMap_Nullify, None, Handle_Aspect_GenericColorMap)
Handle_Aspect_GenericColorMap.IsNull = new_instancemethod(_Aspect.Handle_Aspect_GenericColorMap_IsNull, None, Handle_Aspect_GenericColorMap)
Handle_Aspect_GenericColorMap.GetObject = new_instancemethod(_Aspect.Handle_Aspect_GenericColorMap_GetObject, None, Handle_Aspect_GenericColorMap)
Handle_Aspect_GenericColorMap._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_GenericColorMap__kill_pointed, None, Handle_Aspect_GenericColorMap)
Handle_Aspect_GenericColorMap_swigregister = _Aspect.Handle_Aspect_GenericColorMap_swigregister
Handle_Aspect_GenericColorMap_swigregister(Handle_Aspect_GenericColorMap)

def Handle_Aspect_GenericColorMap_DownCast(AnObject):
    return _Aspect.Handle_Aspect_GenericColorMap_DownCast(AnObject)
Handle_Aspect_GenericColorMap_DownCast = _Aspect.Handle_Aspect_GenericColorMap_DownCast

class Aspect_GradientBackground(Aspect_Background):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a window gradient background. Default colors : Quantity_NOC_BLACK. Default fill method : Aspect_GFM_NONE

        :rtype: None

        * Creates a window gradient background with colours <AColor1, AColor2>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :param AMethod: default value is Aspect_GFM_HOR
        :type AMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        _Aspect.Aspect_GradientBackground_swiginit(self, _Aspect.new_Aspect_GradientBackground(*args))

    def SetColors(self, *args):
        """
        * Modifies the colours of the window gradient background <self>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :param AMethod: default value is Aspect_GFM_HOR
        :type AMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        return _Aspect.Aspect_GradientBackground_SetColors(self, *args)


    def Colors(self, *args):
        """
        * Returns colours of the window gradient background <self>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_GradientBackground_Colors(self, *args)


    def BgGradientFillMethod(self, *args):
        """
        * Returns the current gradient background fill mode.

        :rtype: Aspect_GradientFillMethod

        """
        return _Aspect.Aspect_GradientBackground_BgGradientFillMethod(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_GradientBackground.SetColors = new_instancemethod(_Aspect.Aspect_GradientBackground_SetColors, None, Aspect_GradientBackground)
Aspect_GradientBackground.Colors = new_instancemethod(_Aspect.Aspect_GradientBackground_Colors, None, Aspect_GradientBackground)
Aspect_GradientBackground.BgGradientFillMethod = new_instancemethod(_Aspect.Aspect_GradientBackground_BgGradientFillMethod, None, Aspect_GradientBackground)
Aspect_GradientBackground._kill_pointed = new_instancemethod(_Aspect.Aspect_GradientBackground__kill_pointed, None, Aspect_GradientBackground)
Aspect_GradientBackground_swigregister = _Aspect.Aspect_GradientBackground_swigregister
Aspect_GradientBackground_swigregister(Aspect_GradientBackground)

class Aspect_IndexPixel(Aspect_Pixel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        _Aspect.Aspect_IndexPixel_swiginit(self, _Aspect.new_Aspect_IndexPixel(*args))

    def Value(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_IndexPixel_Value(self, *args)


    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_IndexPixel_SetValue(self, *args)


    def HashCode(self, *args):
        """
        * Returns a hashed value denoting <self>. This value is in  the range 1..<Upper>.

        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _Aspect.Aspect_IndexPixel_HashCode(self, *args)


    def __hash__(self):
        """__hash__(Aspect_IndexPixel self) -> Standard_Integer"""
        return _Aspect.Aspect_IndexPixel___hash__(self)


    def PrintToString(self):
        """PrintToString(Aspect_IndexPixel self) -> std::string"""
        return _Aspect.Aspect_IndexPixel_PrintToString(self)


    def IsEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_IndexPixel &
        :rtype: bool

        """
        return _Aspect.Aspect_IndexPixel_IsEqual(self, *args)


    def __eq_wrapper__(self, other):
        """__eq_wrapper__(Aspect_IndexPixel self, Aspect_IndexPixel other) -> bool"""
        return _Aspect.Aspect_IndexPixel___eq_wrapper__(self, other)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def IsNotEqual(self, *args):
        """
        :param Other:
        :type Other: Aspect_IndexPixel &
        :rtype: bool

        """
        return _Aspect.Aspect_IndexPixel_IsNotEqual(self, *args)


    def __ne_wrapper__(self, other):
        """__ne_wrapper__(Aspect_IndexPixel self, Aspect_IndexPixel other) -> bool"""
        return _Aspect.Aspect_IndexPixel___ne_wrapper__(self, other)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def _CSFDB_GetAspect_IndexPixelmyIndex(self, *args):
        """
        :rtype: int

        """
        return _Aspect.Aspect_IndexPixel__CSFDB_GetAspect_IndexPixelmyIndex(self, *args)


    def _CSFDB_SetAspect_IndexPixelmyIndex(self, *args):
        """
        :param p:
        :type p: int
        :rtype: None

        """
        return _Aspect.Aspect_IndexPixel__CSFDB_SetAspect_IndexPixelmyIndex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_IndexPixel self)"""
        return _Aspect.Aspect_IndexPixel__kill_pointed(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_IndexPixel.Value = new_instancemethod(_Aspect.Aspect_IndexPixel_Value, None, Aspect_IndexPixel)
Aspect_IndexPixel.SetValue = new_instancemethod(_Aspect.Aspect_IndexPixel_SetValue, None, Aspect_IndexPixel)
Aspect_IndexPixel.HashCode = new_instancemethod(_Aspect.Aspect_IndexPixel_HashCode, None, Aspect_IndexPixel)
Aspect_IndexPixel.__hash__ = new_instancemethod(_Aspect.Aspect_IndexPixel___hash__, None, Aspect_IndexPixel)
Aspect_IndexPixel.PrintToString = new_instancemethod(_Aspect.Aspect_IndexPixel_PrintToString, None, Aspect_IndexPixel)
Aspect_IndexPixel.IsEqual = new_instancemethod(_Aspect.Aspect_IndexPixel_IsEqual, None, Aspect_IndexPixel)
Aspect_IndexPixel.__eq_wrapper__ = new_instancemethod(_Aspect.Aspect_IndexPixel___eq_wrapper__, None, Aspect_IndexPixel)
Aspect_IndexPixel.IsNotEqual = new_instancemethod(_Aspect.Aspect_IndexPixel_IsNotEqual, None, Aspect_IndexPixel)
Aspect_IndexPixel.__ne_wrapper__ = new_instancemethod(_Aspect.Aspect_IndexPixel___ne_wrapper__, None, Aspect_IndexPixel)
Aspect_IndexPixel._CSFDB_GetAspect_IndexPixelmyIndex = new_instancemethod(_Aspect.Aspect_IndexPixel__CSFDB_GetAspect_IndexPixelmyIndex, None, Aspect_IndexPixel)
Aspect_IndexPixel._CSFDB_SetAspect_IndexPixelmyIndex = new_instancemethod(_Aspect.Aspect_IndexPixel__CSFDB_SetAspect_IndexPixelmyIndex, None, Aspect_IndexPixel)
Aspect_IndexPixel._kill_pointed = new_instancemethod(_Aspect.Aspect_IndexPixel__kill_pointed, None, Aspect_IndexPixel)
Aspect_IndexPixel_swigregister = _Aspect.Aspect_IndexPixel_swigregister
Aspect_IndexPixel_swigregister(Aspect_IndexPixel)

class Aspect_RectangularGrid(Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates a new grid. By default this grid is not active. The first angle is given relatively to the horizontal. The second angle is given relatively to the vertical.

        :param aXStep:
        :type aXStep: Quantity_Length
        :param aYStep:
        :type aYStep: Quantity_Length
        :param anXOrigin: default value is 0
        :type anXOrigin: Quantity_Length
        :param anYOrigin: default value is 0
        :type anYOrigin: Quantity_Length
        :param aFirstAngle: default value is 0
        :type aFirstAngle: Quantity_PlaneAngle
        :param aSecondAngle: default value is 0
        :type aSecondAngle: Quantity_PlaneAngle
        :param aRotationAngle: default value is 0
        :type aRotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        _Aspect.Aspect_RectangularGrid_swiginit(self, _Aspect.new_Aspect_RectangularGrid(*args))

    def SetXStep(self, *args):
        """
        * defines the x step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetXStep(self, *args)


    def SetYStep(self, *args):
        """
        * defines the y step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetYStep(self, *args)


    def SetAngle(self, *args):
        """
        * defines the angle of the second network the fist angle is given relatively to the horizontal. the second angle is given relatively to the vertical.

        :param anAngle1:
        :type anAngle1: Quantity_PlaneAngle
        :param anAngle2:
        :type anAngle2: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetAngle(self, *args)


    def SetGridValues(self, *args):
        """
        :param XOrigin:
        :type XOrigin: Quantity_Length
        :param YOrigin:
        :type YOrigin: Quantity_Length
        :param XStep:
        :type XStep: Quantity_Length
        :param YStep:
        :type YStep: Quantity_Length
        :param RotationAngle:
        :type RotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetGridValues(self, *args)


    def XStep(self, *args):
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_RectangularGrid_XStep(self, *args)


    def YStep(self, *args):
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_RectangularGrid_YStep(self, *args)


    def FirstAngle(self, *args):
        """
        * returns the x Angle of the grid, relatively to the horizontal.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_RectangularGrid_FirstAngle(self, *args)


    def SecondAngle(self, *args):
        """
        * returns the y Angle of the grid, relatively to the vertical.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_RectangularGrid_SecondAngle(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_RectangularGrid self)"""
        return _Aspect.Aspect_RectangularGrid__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_RectangularGrid self) -> Handle_Aspect_RectangularGrid"""
        return _Aspect.Aspect_RectangularGrid_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_RectangularGrid.SetXStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetXStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetYStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetYStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetGridValues = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetGridValues, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.XStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_XStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.YStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_YStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.FirstAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_FirstAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SecondAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_SecondAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid._kill_pointed = new_instancemethod(_Aspect.Aspect_RectangularGrid__kill_pointed, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.GetHandle = new_instancemethod(_Aspect.Aspect_RectangularGrid_GetHandle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid_swigregister = _Aspect.Aspect_RectangularGrid_swigregister
Aspect_RectangularGrid_swigregister(Aspect_RectangularGrid)

class Handle_Aspect_RectangularGrid(Handle_Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_RectangularGrid_swiginit(self, _Aspect.new_Handle_Aspect_RectangularGrid(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_RectangularGrid_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_RectangularGrid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid_Nullify, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid_IsNull, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid.GetObject = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid_GetObject, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid__kill_pointed, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid_swigregister = _Aspect.Handle_Aspect_RectangularGrid_swigregister
Handle_Aspect_RectangularGrid_swigregister(Handle_Aspect_RectangularGrid)

def Handle_Aspect_RectangularGrid_DownCast(AnObject):
    return _Aspect.Handle_Aspect_RectangularGrid_DownCast(AnObject)
Handle_Aspect_RectangularGrid_DownCast = _Aspect.Handle_Aspect_RectangularGrid_DownCast

class Aspect_WindowDriver(Aspect_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BeginDraw(self, *args):
        """
        * Begin graphics and drawn directly to the Window or Pixmap if

        :param DoubleBuffer: default value is Standard_True
        :type DoubleBuffer: bool
        :param aRetainBuffer: default value is 0
        :type aRetainBuffer: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_BeginDraw(self, *args)


    def ResizeSpace(self, *args):
        """
        :rtype: Aspect_TypeOfResize

        """
        return _Aspect.Aspect_WindowDriver_ResizeSpace(self, *args)


    def Window(self, *args):
        """
        :rtype: Handle_Aspect_Window

        """
        return _Aspect.Aspect_WindowDriver_Window(self, *args)


    def SetDrawMode(self, *args):
        """
        * Change the current drawing mode of the Driver 	 XW_REPLACE : the primitive is drawn with his defined color. //!	 XW_ERASE : the primitive is erased from the window. //!	 XW_XOR : the primitive is xored to the window. //!	 XW_XORLIGHT: the primitive is xored depending of the current //!			highlight and background colors.

        :param aMode:
        :type aMode: Aspect_TypeOfDrawMode
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_SetDrawMode(self, *args)


    def OpenBuffer(self, *args):
        """
        * Allocate the retain buffer <aRetainBuffer> , Defines the DWU coordinates of the pivot point for all primitives

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param aPivotX: default value is 0.0
        :type aPivotX: Standard_ShortReal
        :param aPivotY: default value is 0.0
        :type aPivotY: Standard_ShortReal
        :param aWidthIndex: default value is 0
        :type aWidthIndex: int
        :param aColorIndex: default value is 0
        :type aColorIndex: int
        :param aFontIndex: default value is 0
        :type aFontIndex: int
        :param aDrawMode: default value is Aspect_TODM_REPLACE
        :type aDrawMode: Aspect_TypeOfDrawMode
        :rtype: bool

        """
        return _Aspect.Aspect_WindowDriver_OpenBuffer(self, *args)


    def CloseBuffer(self, *args):
        """
        * Clear & Deallocate the retain buffer <aRetainBuffer>.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_CloseBuffer(self, *args)


    def ClearBuffer(self, *args):
        """
        * Erase & Clear ALL primitives retains in the buffer <aRetainBuffer>.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_ClearBuffer(self, *args)


    def DrawBuffer(self, *args):
        """
        * Draw ALL primitives retains in the buffer <aRetainBuffer>. Warning: Note that the aspect of a retain buffer drawing is mono-colored with the current buffer Attributes and Depending of the DoubleBuffer state flag at the BeginDraw() buffer time, when DB is True,an XOR method is use for drawing and erasing buffers in the same way.In this case,some color side effect can occurs depending of the traversal primitive colors and the supported hardware. when DB is False and the background drawing has been generated with DB at True,no color side effect occurs because the DB is used for restoring the drawing context at EraseBuffer() time,this is more powerfull for the drawing quality excepted for large buffers (flicking) .

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_DrawBuffer(self, *args)


    def EraseBuffer(self, *args):
        """
        * Erase ALL primitives retains in the buffer <aRetainBuffer>.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_EraseBuffer(self, *args)


    def MoveBuffer(self, *args):
        """
        * Erase , Translate and reDraw ALL primitives retains in the buffer

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param aPivotX: default value is 0.0
        :type aPivotX: Standard_ShortReal
        :param aPivotY: default value is 0.0
        :type aPivotY: Standard_ShortReal
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_MoveBuffer(self, *args)


    def ScaleBuffer(self, *args):
        """
        * Erase , Scale the buffer from the Pivot point and reDraw ALL primitives

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param aScaleX: default value is 1.0
        :type aScaleX: Quantity_Factor
        :param aScaleY: default value is 1.0
        :type aScaleY: Quantity_Factor
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_ScaleBuffer(self, *args)


    def RotateBuffer(self, *args):
        """
        * Erase , Rotate the buffer from the Pivot point and reDraw ALL primitives

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param anAngle: default value is 0.0
        :type anAngle: Quantity_PlaneAngle
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_RotateBuffer(self, *args)


    def BufferIsOpen(self, *args):
        """
        * Returns True if the retain buffer <aRetainBuffer> is enabled

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: bool

        """
        return _Aspect.Aspect_WindowDriver_BufferIsOpen(self, *args)


    def BufferIsEmpty(self, *args):
        """
        * Returns True if the retain buffer has not been opened or empty.  Returns False if a lot of primitives have been stored inside  because a BeginDraw(..,<aRetainBuffer>) has been done previously.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: bool

        """
        return _Aspect.Aspect_WindowDriver_BufferIsEmpty(self, *args)


    def BufferIsDrawn(self, *args):
        """
        * Returns True if the retain buffer s actually displayed at screen.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :rtype: bool

        """
        return _Aspect.Aspect_WindowDriver_BufferIsDrawn(self, *args)


    def AngleOfBuffer(self, *args):
        """
        * Returns the current buffer rotate angle from the X axis.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param anAngle:
        :type anAngle: Quantity_PlaneAngle &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_AngleOfBuffer(self, *args)


    def ScaleOfBuffer(self, *args):
        """
        * Returns the current buffer scale factors.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param aScaleX:
        :type aScaleX: Quantity_Factor &
        :param aScaleY:
        :type aScaleY: Quantity_Factor &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_ScaleOfBuffer(self, *args)


    def PositionOfBuffer(self, *args):
        """
        * Returns the current buffer position.

        :param aRetainBuffer:
        :type aRetainBuffer: int
        :param aPivotX:
        :type aPivotX: Standard_ShortReal &
        :param aPivotY:
        :type aPivotY: Standard_ShortReal &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_PositionOfBuffer(self, *args)


    def TextSize(self, *args):
        """
        * Returns the TEXT size in DWU space depending of the required FontIndex if aFontIndex is >= 0 or the current FontIndex if < 0 (default).

        :param aText:
        :type aText: TCollection_ExtendedString &
        :param aWidth:
        :type aWidth: Standard_ShortReal &
        :param aHeight:
        :type aHeight: Standard_ShortReal &
        :param aFontIndex: default value is -1
        :type aFontIndex: int
        :rtype: void

        * Returns the TEXT size and offsets //!	 in DWU space depending of the required FontIndex if aFontIndex is >= 0 or the current FontIndex if < 0 (default).

        :param aText:
        :type aText: TCollection_ExtendedString &
        :param aWidth:
        :type aWidth: Standard_ShortReal &
        :param aHeight:
        :type aHeight: Standard_ShortReal &
        :param anXoffset:
        :type anXoffset: Standard_ShortReal &
        :param anYoffset:
        :type anYoffset: Standard_ShortReal &
        :param aFontIndex: default value is -1
        :type aFontIndex: int
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_TextSize(self, *args)


    def FontSize(self, *args):
        """
        * Returns the font string,slant,size and

        :param aSlant:
        :type aSlant: Quantity_PlaneAngle &
        :param aSize:
        :type aSize: Standard_ShortReal &
        :param aBheight:
        :type aBheight: Standard_ShortReal &
        :param aFontIndex: default value is -1
        :type aFontIndex: int
        :rtype: char *

        """
        return _Aspect.Aspect_WindowDriver_FontSize(self, *args)


    def ColorBoundIndexs(self, *args):
        """
        * Returns the min and max driver virtual color indexs.

        :param aMinIndex:
        :type aMinIndex: int &
        :param aMaxIndex:
        :type aMaxIndex: int &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_ColorBoundIndexs(self, *args)


    def LocalColorIndex(self, *args):
        """
        * Returns the local colormap hardware index from a virtual driver color index or returns -1 if the index is not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WindowDriver_LocalColorIndex(self, *args)


    def FontBoundIndexs(self, *args):
        """
        * Returns the min and max driver virtual font indexs.

        :param aMinIndex:
        :type aMinIndex: int &
        :param aMaxIndex:
        :type aMaxIndex: int &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_FontBoundIndexs(self, *args)


    def LocalFontIndex(self, *args):
        """
        * Returns the associated fontmap hardware index from a virtual driver font index or returns -1 if the index is not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WindowDriver_LocalFontIndex(self, *args)


    def TypeBoundIndexs(self, *args):
        """
        * Returns the min and max driver virtual type indexs.

        :param aMinIndex:
        :type aMinIndex: int &
        :param aMaxIndex:
        :type aMaxIndex: int &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_TypeBoundIndexs(self, *args)


    def LocalTypeIndex(self, *args):
        """
        * Returns the associated typemap hardware index from a virtual driver type index or returns -1 if the index is not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WindowDriver_LocalTypeIndex(self, *args)


    def WidthBoundIndexs(self, *args):
        """
        * Returns the min and max driver virtual width indexs.

        :param aMinIndex:
        :type aMinIndex: int &
        :param aMaxIndex:
        :type aMaxIndex: int &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_WidthBoundIndexs(self, *args)


    def LocalWidthIndex(self, *args):
        """
        * Returns the associated widthmap hardware index from a virtual driver width index or returns -1 if the index is not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WindowDriver_LocalWidthIndex(self, *args)


    def MarkBoundIndexs(self, *args):
        """
        * Returns the min and max driver virtual marker indexs.

        :param aMinIndex:
        :type aMinIndex: int &
        :param aMaxIndex:
        :type aMaxIndex: int &
        :rtype: void

        """
        return _Aspect.Aspect_WindowDriver_MarkBoundIndexs(self, *args)


    def LocalMarkIndex(self, *args):
        """
        * Returns the local markmap hardware index from a virtual driver marker index or returns -1 if the index is not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _Aspect.Aspect_WindowDriver_LocalMarkIndex(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Aspect_WindowDriver self)"""
        return _Aspect.Aspect_WindowDriver__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Aspect_WindowDriver self) -> Handle_Aspect_WindowDriver"""
        return _Aspect.Aspect_WindowDriver_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Aspect_WindowDriver.BeginDraw = new_instancemethod(_Aspect.Aspect_WindowDriver_BeginDraw, None, Aspect_WindowDriver)
Aspect_WindowDriver.ResizeSpace = new_instancemethod(_Aspect.Aspect_WindowDriver_ResizeSpace, None, Aspect_WindowDriver)
Aspect_WindowDriver.Window = new_instancemethod(_Aspect.Aspect_WindowDriver_Window, None, Aspect_WindowDriver)
Aspect_WindowDriver.SetDrawMode = new_instancemethod(_Aspect.Aspect_WindowDriver_SetDrawMode, None, Aspect_WindowDriver)
Aspect_WindowDriver.OpenBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_OpenBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.CloseBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_CloseBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.ClearBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_ClearBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.DrawBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_DrawBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.EraseBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_EraseBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.MoveBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_MoveBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.ScaleBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_ScaleBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.RotateBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_RotateBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.BufferIsOpen = new_instancemethod(_Aspect.Aspect_WindowDriver_BufferIsOpen, None, Aspect_WindowDriver)
Aspect_WindowDriver.BufferIsEmpty = new_instancemethod(_Aspect.Aspect_WindowDriver_BufferIsEmpty, None, Aspect_WindowDriver)
Aspect_WindowDriver.BufferIsDrawn = new_instancemethod(_Aspect.Aspect_WindowDriver_BufferIsDrawn, None, Aspect_WindowDriver)
Aspect_WindowDriver.AngleOfBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_AngleOfBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.ScaleOfBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_ScaleOfBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.PositionOfBuffer = new_instancemethod(_Aspect.Aspect_WindowDriver_PositionOfBuffer, None, Aspect_WindowDriver)
Aspect_WindowDriver.TextSize = new_instancemethod(_Aspect.Aspect_WindowDriver_TextSize, None, Aspect_WindowDriver)
Aspect_WindowDriver.FontSize = new_instancemethod(_Aspect.Aspect_WindowDriver_FontSize, None, Aspect_WindowDriver)
Aspect_WindowDriver.ColorBoundIndexs = new_instancemethod(_Aspect.Aspect_WindowDriver_ColorBoundIndexs, None, Aspect_WindowDriver)
Aspect_WindowDriver.LocalColorIndex = new_instancemethod(_Aspect.Aspect_WindowDriver_LocalColorIndex, None, Aspect_WindowDriver)
Aspect_WindowDriver.FontBoundIndexs = new_instancemethod(_Aspect.Aspect_WindowDriver_FontBoundIndexs, None, Aspect_WindowDriver)
Aspect_WindowDriver.LocalFontIndex = new_instancemethod(_Aspect.Aspect_WindowDriver_LocalFontIndex, None, Aspect_WindowDriver)
Aspect_WindowDriver.TypeBoundIndexs = new_instancemethod(_Aspect.Aspect_WindowDriver_TypeBoundIndexs, None, Aspect_WindowDriver)
Aspect_WindowDriver.LocalTypeIndex = new_instancemethod(_Aspect.Aspect_WindowDriver_LocalTypeIndex, None, Aspect_WindowDriver)
Aspect_WindowDriver.WidthBoundIndexs = new_instancemethod(_Aspect.Aspect_WindowDriver_WidthBoundIndexs, None, Aspect_WindowDriver)
Aspect_WindowDriver.LocalWidthIndex = new_instancemethod(_Aspect.Aspect_WindowDriver_LocalWidthIndex, None, Aspect_WindowDriver)
Aspect_WindowDriver.MarkBoundIndexs = new_instancemethod(_Aspect.Aspect_WindowDriver_MarkBoundIndexs, None, Aspect_WindowDriver)
Aspect_WindowDriver.LocalMarkIndex = new_instancemethod(_Aspect.Aspect_WindowDriver_LocalMarkIndex, None, Aspect_WindowDriver)
Aspect_WindowDriver._kill_pointed = new_instancemethod(_Aspect.Aspect_WindowDriver__kill_pointed, None, Aspect_WindowDriver)
Aspect_WindowDriver.GetHandle = new_instancemethod(_Aspect.Aspect_WindowDriver_GetHandle, None, Aspect_WindowDriver)
Aspect_WindowDriver_swigregister = _Aspect.Aspect_WindowDriver_swigregister
Aspect_WindowDriver_swigregister(Aspect_WindowDriver)

class Handle_Aspect_WindowDriver(Handle_Aspect_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_WindowDriver_swiginit(self, _Aspect.new_Handle_Aspect_WindowDriver(*args))
    DownCast = staticmethod(_Aspect.Handle_Aspect_WindowDriver_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Aspect_WindowDriver.Nullify = new_instancemethod(_Aspect.Handle_Aspect_WindowDriver_Nullify, None, Handle_Aspect_WindowDriver)
Handle_Aspect_WindowDriver.IsNull = new_instancemethod(_Aspect.Handle_Aspect_WindowDriver_IsNull, None, Handle_Aspect_WindowDriver)
Handle_Aspect_WindowDriver.GetObject = new_instancemethod(_Aspect.Handle_Aspect_WindowDriver_GetObject, None, Handle_Aspect_WindowDriver)
Handle_Aspect_WindowDriver._kill_pointed = new_instancemethod(_Aspect.Handle_Aspect_WindowDriver__kill_pointed, None, Handle_Aspect_WindowDriver)
Handle_Aspect_WindowDriver_swigregister = _Aspect.Handle_Aspect_WindowDriver_swigregister
Handle_Aspect_WindowDriver_swigregister(Handle_Aspect_WindowDriver)

def Handle_Aspect_WindowDriver_DownCast(AnObject):
    return _Aspect.Handle_Aspect_WindowDriver_DownCast(AnObject)
Handle_Aspect_WindowDriver_DownCast = _Aspect.Handle_Aspect_WindowDriver_DownCast



