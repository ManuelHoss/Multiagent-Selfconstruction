# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntPolyh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntPolyh', [dirname(__file__)])
        except ImportError:
            import _IntPolyh
            return _IntPolyh
        if fp is not None:
            try:
                _mod = imp.load_module('_IntPolyh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _IntPolyh = swig_import_helper()
    del swig_import_helper
else:
    import _IntPolyh
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntPolyh.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntPolyh.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntPolyh.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntPolyh.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntPolyh.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntPolyh.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntPolyh.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntPolyh.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntPolyh.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntPolyh.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntPolyh.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntPolyh.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntPolyh.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntPolyh.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntPolyh.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntPolyh.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntPolyh.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntPolyh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Standard
import OCC.Adaptor3d
import OCC.GeomAbs
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Geom
import OCC.TColgp
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.math
import OCC.Bnd
class IntPolyh_Couple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param i1:
        :type i1: int
        :param i2:
        :type i2: int
        :rtype: None

        """
        _IntPolyh.IntPolyh_Couple_swiginit(self, _IntPolyh.new_IntPolyh_Couple(*args))

    def FirstValue(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Couple_FirstValue(self, *args)


    def SecondValue(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Couple_SecondValue(self, *args)


    def AnalyseFlagValue(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Couple_AnalyseFlagValue(self, *args)


    def AngleValue(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Couple_AngleValue(self, *args)


    def SetCoupleValue(self, *args):
        """
        :param v:
        :type v: int
        :param w:
        :type w: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Couple_SetCoupleValue(self, *args)


    def SetAnalyseFlag(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Couple_SetAnalyseFlag(self, *args)


    def SetAngleValue(self, *args):
        """
        :param ang:
        :type ang: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Couple_SetAngleValue(self, *args)


    def Dump(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Couple_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_Couple.FirstValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_FirstValue, None, IntPolyh_Couple)
IntPolyh_Couple.SecondValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_SecondValue, None, IntPolyh_Couple)
IntPolyh_Couple.AnalyseFlagValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_AnalyseFlagValue, None, IntPolyh_Couple)
IntPolyh_Couple.AngleValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_AngleValue, None, IntPolyh_Couple)
IntPolyh_Couple.SetCoupleValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetCoupleValue, None, IntPolyh_Couple)
IntPolyh_Couple.SetAnalyseFlag = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetAnalyseFlag, None, IntPolyh_Couple)
IntPolyh_Couple.SetAngleValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetAngleValue, None, IntPolyh_Couple)
IntPolyh_Couple.Dump = new_instancemethod(_IntPolyh.IntPolyh_Couple_Dump, None, IntPolyh_Couple)
IntPolyh_Couple._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_Couple__kill_pointed, None, IntPolyh_Couple)
IntPolyh_Couple_swigregister = _IntPolyh.IntPolyh_Couple_swigregister
IntPolyh_Couple_swigregister(IntPolyh_Couple)

class IntPolyh_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param i1:
        :type i1: int
        :param i2:
        :type i2: int
        :param i3:
        :type i3: int
        :param i4:
        :type i4: int
        :rtype: None

        """
        _IntPolyh.IntPolyh_Edge_swiginit(self, _IntPolyh.new_IntPolyh_Edge(*args))

    def FirstPoint(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Edge_FirstPoint(self, *args)


    def SecondPoint(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Edge_SecondPoint(self, *args)


    def FirstTriangle(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Edge_FirstTriangle(self, *args)


    def SecondTriangle(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Edge_SecondTriangle(self, *args)


    def AnalysisFlag(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Edge_AnalysisFlag(self, *args)


    def SetFirstPoint(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_SetFirstPoint(self, *args)


    def SetSecondPoint(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_SetSecondPoint(self, *args)


    def SetFirstTriangle(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_SetFirstTriangle(self, *args)


    def SetSecondTriangle(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_SetSecondTriangle(self, *args)


    def SetAnalysisFlag(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_SetAnalysisFlag(self, *args)


    def Dump(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Edge_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_Edge.FirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_FirstPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SecondPoint, None, IntPolyh_Edge)
IntPolyh_Edge.FirstTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_FirstTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SecondTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SecondTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.AnalysisFlag = new_instancemethod(_IntPolyh.IntPolyh_Edge_AnalysisFlag, None, IntPolyh_Edge)
IntPolyh_Edge.SetFirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetFirstPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SetSecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetSecondPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SetFirstTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetFirstTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SetSecondTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetSecondTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SetAnalysisFlag = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetAnalysisFlag, None, IntPolyh_Edge)
IntPolyh_Edge.Dump = new_instancemethod(_IntPolyh.IntPolyh_Edge_Dump, None, IntPolyh_Edge)
IntPolyh_Edge._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_Edge__kill_pointed, None, IntPolyh_Edge)
IntPolyh_Edge_swigregister = _IntPolyh.IntPolyh_Edge_swigregister
IntPolyh_Edge_swigregister(IntPolyh_Edge)

class IntPolyh_Intersection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor

        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :rtype: None

        * NbSU1 ... NbSV2 are used to compute the initial samples of the iso parametric meshes on the surfaces.

        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param NbSU1:
        :type NbSU1: int
        :param NbSV1:
        :type NbSV1: int
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :param NbSU2:
        :type NbSU2: int
        :param NbSV2:
        :type NbSV2: int
        :rtype: None

        * D1, D2 are used to compute the initial samples of the iso parametric meshes on the surfaces.

        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param anUpars1:
        :type anUpars1: TColStd_Array1OfReal &
        :param aVpars1:
        :type aVpars1: TColStd_Array1OfReal &
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :param anUpars2:
        :type anUpars2: TColStd_Array1OfReal &
        :param aVpars2:
        :type aVpars2: TColStd_Array1OfReal &
        :rtype: None

        """
        _IntPolyh.IntPolyh_Intersection_swiginit(self, _IntPolyh.new_IntPolyh_Intersection(*args))

    def Perform(self, *args):
        """
        * Compute the intersection.

        :rtype: None

        * Compute the intersection.

        :param Upars1:
        :type Upars1: TColStd_Array1OfReal &
        :param Vpars1:
        :type Vpars1: TColStd_Array1OfReal &
        :param Upars2:
        :type Upars2: TColStd_Array1OfReal &
        :param Vpars2:
        :type Vpars2: TColStd_Array1OfReal &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Intersection_Perform(self, *args)


    def IsDone(self, *args):
        """
        :rtype: bool

        """
        return _IntPolyh.IntPolyh_Intersection_IsDone(self, *args)


    def NbSectionLines(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Intersection_NbSectionLines(self, *args)


    def NbPointsInLine(self, *args):
        """
        :param IndexLine:
        :type IndexLine: int
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Intersection_NbPointsInLine(self, *args)


    def GetLinePoint(self, *args):
        """
        :param IndexLine:
        :type IndexLine: int
        :param IndexPoint:
        :type IndexPoint: int
        :param x:
        :type x: float &
        :param y:
        :type y: float &
        :param z:
        :type z: float &
        :param u1:
        :type u1: float &
        :param v1:
        :type v1: float &
        :param u2:
        :type u2: float &
        :param v2:
        :type v2: float &
        :param incidence:
        :type incidence: float &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Intersection_GetLinePoint(self, *args)


    def NbTangentZones(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Intersection_NbTangentZones(self, *args)


    def NbPointsInTangentZone(self, *args):
        """
        :param IndexLine:
        :type IndexLine: int
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Intersection_NbPointsInTangentZone(self, *args)


    def GetTangentZonePoint(self, *args):
        """
        :param IndexLine:
        :type IndexLine: int
        :param IndexPoint:
        :type IndexPoint: int
        :param x:
        :type x: float &
        :param y:
        :type y: float &
        :param z:
        :type z: float &
        :param u1:
        :type u1: float &
        :param v1:
        :type v1: float &
        :param u2:
        :type u2: float &
        :param v2:
        :type v2: float &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Intersection_GetTangentZonePoint(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_Intersection.Perform = new_instancemethod(_IntPolyh.IntPolyh_Intersection_Perform, None, IntPolyh_Intersection)
IntPolyh_Intersection.IsDone = new_instancemethod(_IntPolyh.IntPolyh_Intersection_IsDone, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbSectionLines = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbSectionLines, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbPointsInLine = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbPointsInLine, None, IntPolyh_Intersection)
IntPolyh_Intersection.GetLinePoint = new_instancemethod(_IntPolyh.IntPolyh_Intersection_GetLinePoint, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbTangentZones = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbTangentZones, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbPointsInTangentZone = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbPointsInTangentZone, None, IntPolyh_Intersection)
IntPolyh_Intersection.GetTangentZonePoint = new_instancemethod(_IntPolyh.IntPolyh_Intersection_GetTangentZonePoint, None, IntPolyh_Intersection)
IntPolyh_Intersection._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_Intersection__kill_pointed, None, IntPolyh_Intersection)
IntPolyh_Intersection_swigregister = _IntPolyh.IntPolyh_Intersection_swigregister
IntPolyh_Intersection_swigregister(IntPolyh_Intersection)

class IntPolyh_Point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param xx:
        :type xx: float
        :param yy:
        :type yy: float
        :param zz:
        :type zz: float
        :param uu:
        :type uu: float
        :param vv:
        :type vv: float
        :rtype: None

        """
        _IntPolyh.IntPolyh_Point_swiginit(self, _IntPolyh.new_IntPolyh_Point(*args))

    def X(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_X(self, *args)


    def Y(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_Y(self, *args)


    def Z(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_Z(self, *args)


    def U(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_U(self, *args)


    def V(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_V(self, *args)


    def PartOfCommon(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Point_PartOfCommon(self, *args)


    def Equal(self, *args):
        """
        :param Pt:
        :type Pt: IntPolyh_Point &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_Equal(self, *args)


    def Set(self, *args):
        """
        :param Pt:
        :type Pt: IntPolyh_Point &
        :rtype: None

        :param v1:
        :type v1: float
        :param v2:
        :type v2: float
        :param v3:
        :type v3: float
        :param v4:
        :type v4: float
        :param v5:
        :type v5: float
        :param II: default value is 1
        :type II: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_Set(self, *args)


    def SetX(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetX(self, *args)


    def SetY(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetY(self, *args)


    def SetZ(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetZ(self, *args)


    def SetU(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetU(self, *args)


    def SetV(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetV(self, *args)


    def SetPartOfCommon(self, *args):
        """
        :param ii:
        :type ii: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetPartOfCommon(self, *args)


    def Middle(self, *args):
        """
        :param MySurface:
        :type MySurface: Handle_Adaptor3d_HSurface &
        :param P1:
        :type P1: IntPolyh_Point &
        :param P2:
        :type P2: IntPolyh_Point &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_Middle(self, *args)


    def Add(self, *args):
        """
        :param P1:
        :type P1: IntPolyh_Point &
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point_Add(self, *args)


    def __add__(self, *args):
        """
        :param P1:
        :type P1: IntPolyh_Point &
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point___add__(self, *args)


    def Sub(self, *args):
        """
        :param P1:
        :type P1: IntPolyh_Point &
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point_Sub(self, *args)


    def __sub__(self, *args):
        """
        :param P1:
        :type P1: IntPolyh_Point &
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point___sub__(self, *args)


    def Divide(self, *args):
        """
        :param rr:
        :type rr: float
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point_Divide(self, *args)


    def __div__(self, *args):
        """
        :param rr:
        :type rr: float
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point___div__(self, *args)


    def Multiplication(self, *args):
        """
        :param rr:
        :type rr: float
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point_Multiplication(self, *args)


    def __mul__(self, *args):
        """
        :param rr:
        :type rr: float
        :rtype: IntPolyh_Point

        """
        return _IntPolyh.IntPolyh_Point___mul__(self, *args)


    def SquareModulus(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_SquareModulus(self, *args)


    def SquareDistance(self, *args):
        """
        :param P2:
        :type P2: IntPolyh_Point &
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_SquareDistance(self, *args)


    def Dot(self, *args):
        """
        :param P2:
        :type P2: IntPolyh_Point &
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Point_Dot(self, *args)


    def Cross(self, *args):
        """
        :param P1:
        :type P1: IntPolyh_Point &
        :param P2:
        :type P2: IntPolyh_Point &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_Cross(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        :param i:
        :type i: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_Dump(self, *args)


    def SetDegenerated(self, *args):
        """
        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Point_SetDegenerated(self, *args)


    def Degenerated(self, *args):
        """
        :rtype: bool

        """
        return _IntPolyh.IntPolyh_Point_Degenerated(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_Point.X = new_instancemethod(_IntPolyh.IntPolyh_Point_X, None, IntPolyh_Point)
IntPolyh_Point.Y = new_instancemethod(_IntPolyh.IntPolyh_Point_Y, None, IntPolyh_Point)
IntPolyh_Point.Z = new_instancemethod(_IntPolyh.IntPolyh_Point_Z, None, IntPolyh_Point)
IntPolyh_Point.U = new_instancemethod(_IntPolyh.IntPolyh_Point_U, None, IntPolyh_Point)
IntPolyh_Point.V = new_instancemethod(_IntPolyh.IntPolyh_Point_V, None, IntPolyh_Point)
IntPolyh_Point.PartOfCommon = new_instancemethod(_IntPolyh.IntPolyh_Point_PartOfCommon, None, IntPolyh_Point)
IntPolyh_Point.Equal = new_instancemethod(_IntPolyh.IntPolyh_Point_Equal, None, IntPolyh_Point)
IntPolyh_Point.Set = new_instancemethod(_IntPolyh.IntPolyh_Point_Set, None, IntPolyh_Point)
IntPolyh_Point.SetX = new_instancemethod(_IntPolyh.IntPolyh_Point_SetX, None, IntPolyh_Point)
IntPolyh_Point.SetY = new_instancemethod(_IntPolyh.IntPolyh_Point_SetY, None, IntPolyh_Point)
IntPolyh_Point.SetZ = new_instancemethod(_IntPolyh.IntPolyh_Point_SetZ, None, IntPolyh_Point)
IntPolyh_Point.SetU = new_instancemethod(_IntPolyh.IntPolyh_Point_SetU, None, IntPolyh_Point)
IntPolyh_Point.SetV = new_instancemethod(_IntPolyh.IntPolyh_Point_SetV, None, IntPolyh_Point)
IntPolyh_Point.SetPartOfCommon = new_instancemethod(_IntPolyh.IntPolyh_Point_SetPartOfCommon, None, IntPolyh_Point)
IntPolyh_Point.Middle = new_instancemethod(_IntPolyh.IntPolyh_Point_Middle, None, IntPolyh_Point)
IntPolyh_Point.Add = new_instancemethod(_IntPolyh.IntPolyh_Point_Add, None, IntPolyh_Point)
IntPolyh_Point.__add__ = new_instancemethod(_IntPolyh.IntPolyh_Point___add__, None, IntPolyh_Point)
IntPolyh_Point.Sub = new_instancemethod(_IntPolyh.IntPolyh_Point_Sub, None, IntPolyh_Point)
IntPolyh_Point.__sub__ = new_instancemethod(_IntPolyh.IntPolyh_Point___sub__, None, IntPolyh_Point)
IntPolyh_Point.Divide = new_instancemethod(_IntPolyh.IntPolyh_Point_Divide, None, IntPolyh_Point)
IntPolyh_Point.__div__ = new_instancemethod(_IntPolyh.IntPolyh_Point___div__, None, IntPolyh_Point)
IntPolyh_Point.Multiplication = new_instancemethod(_IntPolyh.IntPolyh_Point_Multiplication, None, IntPolyh_Point)
IntPolyh_Point.__mul__ = new_instancemethod(_IntPolyh.IntPolyh_Point___mul__, None, IntPolyh_Point)
IntPolyh_Point.SquareModulus = new_instancemethod(_IntPolyh.IntPolyh_Point_SquareModulus, None, IntPolyh_Point)
IntPolyh_Point.SquareDistance = new_instancemethod(_IntPolyh.IntPolyh_Point_SquareDistance, None, IntPolyh_Point)
IntPolyh_Point.Dot = new_instancemethod(_IntPolyh.IntPolyh_Point_Dot, None, IntPolyh_Point)
IntPolyh_Point.Cross = new_instancemethod(_IntPolyh.IntPolyh_Point_Cross, None, IntPolyh_Point)
IntPolyh_Point.Dump = new_instancemethod(_IntPolyh.IntPolyh_Point_Dump, None, IntPolyh_Point)
IntPolyh_Point.SetDegenerated = new_instancemethod(_IntPolyh.IntPolyh_Point_SetDegenerated, None, IntPolyh_Point)
IntPolyh_Point.Degenerated = new_instancemethod(_IntPolyh.IntPolyh_Point_Degenerated, None, IntPolyh_Point)
IntPolyh_Point._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_Point__kill_pointed, None, IntPolyh_Point)
IntPolyh_Point_swigregister = _IntPolyh.IntPolyh_Point_swigregister
IntPolyh_Point_swigregister(IntPolyh_Point)

class IntPolyh_SectionLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param nn:
        :type nn: int
        :rtype: None

        """
        _IntPolyh.IntPolyh_SectionLine_swiginit(self, _IntPolyh.new_IntPolyh_SectionLine(*args))

    def Init(self, *args):
        """
        :param nn:
        :type nn: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SectionLine_Init(self, *args)


    def Value(self, *args):
        """
        :param nn:
        :type nn: int
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SectionLine_Value(self, *args)


    def ChangeValue(self, *args):
        """
        :param nn:
        :type nn: int
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SectionLine_ChangeValue(self, *args)


    def Copy(self, *args):
        """
        :param Other:
        :type Other: IntPolyh_SectionLine &
        :rtype: IntPolyh_SectionLine

        """
        return _IntPolyh.IntPolyh_SectionLine_Copy(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntPolyh_SectionLine &
        :rtype: IntPolyh_SectionLine

        """
        return _IntPolyh.IntPolyh_SectionLine_Set(self, *args)


    def GetN(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_SectionLine_GetN(self, *args)


    def NbStartPoints(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_SectionLine_NbStartPoints(self, *args)


    def IncrementNbStartPoints(self, *args):
        """
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SectionLine_IncrementNbStartPoints(self, *args)


    def Destroy(self, *args):
        """
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SectionLine_Destroy(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SectionLine_Dump(self, *args)


    def Prepend(self, *args):
        """
        :param SP:
        :type SP: IntPolyh_StartPoint &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SectionLine_Prepend(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_SectionLine.Init = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Init, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Value = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Value, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.ChangeValue = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_ChangeValue, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Copy = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Copy, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Set = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Set, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.GetN = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_GetN, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.NbStartPoints = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_NbStartPoints, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.IncrementNbStartPoints = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_IncrementNbStartPoints, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Destroy = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Destroy, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Dump = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Dump, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Prepend = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Prepend, None, IntPolyh_SectionLine)
IntPolyh_SectionLine._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_SectionLine__kill_pointed, None, IntPolyh_SectionLine)
IntPolyh_SectionLine_swigregister = _IntPolyh.IntPolyh_SectionLine_swigregister
IntPolyh_SectionLine_swigregister(IntPolyh_SectionLine)

class IntPolyh_SeqOfStartPoints(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _IntPolyh.IntPolyh_SeqOfStartPoints_swiginit(self, _IntPolyh.new_IntPolyh_SeqOfStartPoints(*args))

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Clear(self, *args)


    def Assign(self, *args):
        """
        :param Other:
        :type Other: IntPolyh_SeqOfStartPoints &
        :rtype: IntPolyh_SeqOfStartPoints

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Assign(self, *args)


    def Set(self, *args):
        """
        :param Other:
        :type Other: IntPolyh_SeqOfStartPoints &
        :rtype: IntPolyh_SeqOfStartPoints

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Set(self, *args)


    def Append(self, *args):
        """
        :param T:
        :type T: IntPolyh_StartPoint &
        :rtype: None

        :param S:
        :type S: IntPolyh_SeqOfStartPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Append(self, *args)


    def Prepend(self, *args):
        """
        :param T:
        :type T: IntPolyh_StartPoint &
        :rtype: None

        :param S:
        :type S: IntPolyh_SeqOfStartPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntPolyh_StartPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntPolyh_SeqOfStartPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: IntPolyh_StartPoint &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: IntPolyh_SeqOfStartPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_InsertAfter(self, *args)


    def First(self, *args):
        """
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_First(self, *args)


    def Last(self, *args):
        """
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Last(self, *args)


    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: IntPolyh_SeqOfStartPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Split(self, *args)


    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Value(self, *args)


    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: IntPolyh_StartPoint &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_SetValue(self, *args)


    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_ChangeValue(self, *args)


    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_SeqOfStartPoints_Remove(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_SeqOfStartPoints.Clear = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Clear, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Assign = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Assign, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Set = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Set, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Append = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Append, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Prepend = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Prepend, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.InsertBefore = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_InsertBefore, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.InsertAfter = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_InsertAfter, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.First = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_First, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Last = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Last, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Split = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Split, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Value = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Value, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.SetValue = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_SetValue, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.ChangeValue = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_ChangeValue, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Remove = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Remove, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints__kill_pointed, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints_swigregister = _IntPolyh.IntPolyh_SeqOfStartPoints_swigregister
IntPolyh_SeqOfStartPoints_swigregister(IntPolyh_SeqOfStartPoints)

class IntPolyh_SequenceNodeOfSeqOfStartPoints(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: IntPolyh_StartPoint &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_swiginit(self, _IntPolyh.new_IntPolyh_SequenceNodeOfSeqOfStartPoints(*args))

    def Value(self, *args):
        """
        :rtype: IntPolyh_StartPoint

        """
        return _IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_Value(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(IntPolyh_SequenceNodeOfSeqOfStartPoints self)"""
        return _IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(IntPolyh_SequenceNodeOfSeqOfStartPoints self) -> Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints"""
        return _IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_SequenceNodeOfSeqOfStartPoints.Value = new_instancemethod(_IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_Value, None, IntPolyh_SequenceNodeOfSeqOfStartPoints)
IntPolyh_SequenceNodeOfSeqOfStartPoints._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints__kill_pointed, None, IntPolyh_SequenceNodeOfSeqOfStartPoints)
IntPolyh_SequenceNodeOfSeqOfStartPoints.GetHandle = new_instancemethod(_IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_GetHandle, None, IntPolyh_SequenceNodeOfSeqOfStartPoints)
IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister = _IntPolyh.IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister
IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister(IntPolyh_SequenceNodeOfSeqOfStartPoints)

class Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_swiginit(self, _IntPolyh.new_Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints(*args))
    DownCast = staticmethod(_IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints.Nullify = new_instancemethod(_IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_Nullify, None, Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints)
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints.IsNull = new_instancemethod(_IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_IsNull, None, Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints)
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints.GetObject = new_instancemethod(_IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_GetObject, None, Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints)
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints._kill_pointed = new_instancemethod(_IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints__kill_pointed, None, Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints)
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister = _IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_swigregister(Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints)

def Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_DownCast(AnObject):
    return _IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_DownCast(AnObject)
Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_DownCast = _IntPolyh.Handle_IntPolyh_SequenceNodeOfSeqOfStartPoints_DownCast

class IntPolyh_StartPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param xx:
        :type xx: float
        :param yy:
        :type yy: float
        :param zz:
        :type zz: float
        :param uu1:
        :type uu1: float
        :param vv1:
        :type vv1: float
        :param uu2:
        :type uu2: float
        :param vv2:
        :type vv2: float
        :param T1:
        :type T1: int
        :param E1:
        :type E1: int
        :param LAM1:
        :type LAM1: float
        :param T2:
        :type T2: int
        :param E2:
        :type E2: int
        :param LAM2:
        :type LAM2: float
        :param List:
        :type List: int
        :rtype: None

        """
        _IntPolyh.IntPolyh_StartPoint_swiginit(self, _IntPolyh.new_IntPolyh_StartPoint(*args))

    def X(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_X(self, *args)


    def Y(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_Y(self, *args)


    def Z(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_Z(self, *args)


    def U1(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_U1(self, *args)


    def V1(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_V1(self, *args)


    def U2(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_U2(self, *args)


    def V2(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_V2(self, *args)


    def T1(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_T1(self, *args)


    def E1(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_E1(self, *args)


    def Lambda1(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_Lambda1(self, *args)


    def T2(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_T2(self, *args)


    def E2(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_E2(self, *args)


    def Lambda2(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_Lambda2(self, *args)


    def GetAngle(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_StartPoint_GetAngle(self, *args)


    def ChainList(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_ChainList(self, *args)


    def GetEdgePoints(self, *args):
        """
        :param Triangle:
        :type Triangle: IntPolyh_Triangle &
        :param FirstEdgePoint:
        :type FirstEdgePoint: int &
        :param SecondEdgePoint:
        :type SecondEdgePoint: int &
        :param LastPoint:
        :type LastPoint: int &
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_GetEdgePoints(self, *args)


    def Equal(self, *args):
        """
        :param StPt:
        :type StPt: IntPolyh_StartPoint &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_Equal(self, *args)


    def Set(self, *args):
        """
        :param StPt:
        :type StPt: IntPolyh_StartPoint &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_Set(self, *args)


    def SetXYZ(self, *args):
        """
        :param XX:
        :type XX: float
        :param YY:
        :type YY: float
        :param ZZ:
        :type ZZ: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetXYZ(self, *args)


    def SetUV1(self, *args):
        """
        :param UU1:
        :type UU1: float
        :param VV1:
        :type VV1: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetUV1(self, *args)


    def SetUV2(self, *args):
        """
        :param UU2:
        :type UU2: float
        :param VV2:
        :type VV2: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetUV2(self, *args)


    def SetEdge1(self, *args):
        """
        :param IE1:
        :type IE1: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetEdge1(self, *args)


    def SetLambda1(self, *args):
        """
        :param LAM1:
        :type LAM1: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetLambda1(self, *args)


    def SetEdge2(self, *args):
        """
        :param IE2:
        :type IE2: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetEdge2(self, *args)


    def SetLambda2(self, *args):
        """
        :param LAM2:
        :type LAM2: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetLambda2(self, *args)


    def SetCoupleValue(self, *args):
        """
        :param IT1:
        :type IT1: int
        :param IT2:
        :type IT2: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetCoupleValue(self, *args)


    def SetAngle(self, *args):
        """
        :param ang:
        :type ang: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetAngle(self, *args)


    def SetChainList(self, *args):
        """
        :param ChList:
        :type ChList: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_SetChainList(self, *args)


    def CheckSameSP(self, *args):
        """
        :param SP:
        :type SP: IntPolyh_StartPoint &
        :rtype: int

        """
        return _IntPolyh.IntPolyh_StartPoint_CheckSameSP(self, *args)


    def Dump(self, *args):
        """
        :rtype: None

        :param i:
        :type i: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_StartPoint_Dump(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_StartPoint.X = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_X, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Y = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Y, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Z = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Z, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.U1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_U1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.V1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_V1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.U2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_U2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.V2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_V2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.T1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_T1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.E1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_E1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Lambda1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Lambda1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.T2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_T2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.E2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_E2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Lambda2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Lambda2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.GetAngle = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_GetAngle, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.ChainList = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_ChainList, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.GetEdgePoints = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_GetEdgePoints, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Equal = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Equal, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Set = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Set, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetXYZ = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetXYZ, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetUV1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetUV1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetUV2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetUV2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetEdge1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetEdge1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetLambda1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetLambda1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetEdge2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetEdge2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetLambda2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetLambda2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetCoupleValue = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetCoupleValue, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetAngle = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetAngle, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetChainList = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetChainList, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.CheckSameSP = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_CheckSameSP, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Dump = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Dump, None, IntPolyh_StartPoint)
IntPolyh_StartPoint._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_StartPoint__kill_pointed, None, IntPolyh_StartPoint)
IntPolyh_StartPoint_swigregister = _IntPolyh.IntPolyh_StartPoint_swigregister
IntPolyh_StartPoint_swigregister(IntPolyh_StartPoint)

class IntPolyh_Triangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param i1:
        :type i1: int
        :param i2:
        :type i2: int
        :param i3:
        :type i3: int
        :rtype: None

        """
        _IntPolyh.IntPolyh_Triangle_swiginit(self, _IntPolyh.new_IntPolyh_Triangle(*args))

    def FirstPoint(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_FirstPoint(self, *args)


    def SecondPoint(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_SecondPoint(self, *args)


    def ThirdPoint(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_ThirdPoint(self, *args)


    def FirstEdge(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_FirstEdge(self, *args)


    def FirstEdgeOrientation(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_FirstEdgeOrientation(self, *args)


    def SecondEdge(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_SecondEdge(self, *args)


    def SecondEdgeOrientation(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_SecondEdgeOrientation(self, *args)


    def ThirdEdge(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_ThirdEdge(self, *args)


    def ThirdEdgeOrientation(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_ThirdEdgeOrientation(self, *args)


    def GetFleche(self, *args):
        """
        :rtype: float

        """
        return _IntPolyh.IntPolyh_Triangle_GetFleche(self, *args)


    def IndiceIntersectionPossible(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_IndiceIntersectionPossible(self, *args)


    def IndiceIntersection(self, *args):
        """
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_IndiceIntersection(self, *args)


    def SetFirstPoint(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetFirstPoint(self, *args)


    def SetSecondPoint(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetSecondPoint(self, *args)


    def SetThirdPoint(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetThirdPoint(self, *args)


    def SetFirstEdge(self, *args):
        """
        :param v:
        :type v: int
        :param s:
        :type s: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetFirstEdge(self, *args)


    def SetSecondEdge(self, *args):
        """
        :param v:
        :type v: int
        :param s:
        :type s: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetSecondEdge(self, *args)


    def SetThirdEdge(self, *args):
        """
        :param v:
        :type v: int
        :param s:
        :type s: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetThirdEdge(self, *args)


    def SetFleche(self, *args):
        """
        :param v:
        :type v: float
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetFleche(self, *args)


    def SetIndiceIntersectionPossible(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetIndiceIntersectionPossible(self, *args)


    def SetIndiceIntersection(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetIndiceIntersection(self, *args)


    def GetEdgeNumber(self, *args):
        """
        :param v:
        :type v: int
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_GetEdgeNumber(self, *args)


    def SetEdge(self, *args):
        """
        :param v:
        :type v: int
        :param en:
        :type en: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetEdge(self, *args)


    def GetEdgeOrientation(self, *args):
        """
        :param v:
        :type v: int
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_GetEdgeOrientation(self, *args)


    def SetEdgeOrientation(self, *args):
        """
        :param v:
        :type v: int
        :param oe:
        :type oe: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetEdgeOrientation(self, *args)


    def TriangleDeflection(self, *args):
        """
        :param MaSurface:
        :type MaSurface: Handle_Adaptor3d_HSurface &
        :param TP:
        :type TP: IntPolyh_ArrayOfPoints &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_TriangleDeflection(self, *args)


    def CheckCommonEdge(self, *args):
        """
        :param PE1:
        :type PE1: int
        :param PE2:
        :type PE2: int
        :param P3:
        :type P3: int
        :param Index:
        :type Index: int
        :param TTriangles:
        :type TTriangles: IntPolyh_ArrayOfTriangles &
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_CheckCommonEdge(self, *args)


    def GetNextTriangle2(self, *args):
        """
        :param NumTri:
        :type NumTri: int
        :param NumEdge:
        :type NumEdge: int
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_GetNextTriangle2(self, *args)


    def MiddleRefinement(self, *args):
        """
        :param TriangleNumber:
        :type TriangleNumber: int
        :param MySurface:
        :type MySurface: Handle_Adaptor3d_HSurface &
        :param TPoints:
        :type TPoints: IntPolyh_ArrayOfPoints &
        :param TTriangles:
        :type TTriangles: IntPolyh_ArrayOfTriangles &
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_MiddleRefinement(self, *args)


    def MultipleMiddleRefinement(self, *args):
        """
        :param NombreAffinages:
        :type NombreAffinages: int
        :param TriangleNumber:
        :type TriangleNumber: int
        :param MySurface:
        :type MySurface: Handle_Adaptor3d_HSurface &
        :param TPoints:
        :type TPoints: IntPolyh_ArrayOfPoints &
        :param TTriangles:
        :type TTriangles: IntPolyh_ArrayOfTriangles &
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement(self, *args)


    def CompareBoxTriangle(self, *args):
        """
        :param b:
        :type b: Bnd_Box &
        :param TPoints:
        :type TPoints: IntPolyh_ArrayOfPoints &
        :rtype: int

        """
        return _IntPolyh.IntPolyh_Triangle_CompareBoxTriangle(self, *args)


    def MultipleMiddleRefinement2(self, *args):
        """
        :param RefineCriterion:
        :type RefineCriterion: float
        :param thebox:
        :type thebox: Bnd_Box &
        :param TriangleNumber:
        :type TriangleNumber: int
        :param MySurface:
        :type MySurface: Handle_Adaptor3d_HSurface &
        :param TPoints:
        :type TPoints: IntPolyh_ArrayOfPoints &
        :param TTriangles:
        :type TTriangles: IntPolyh_ArrayOfTriangles &
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement2(self, *args)


    def LinkEdges2Triangle(self, *args):
        """
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :param ed1:
        :type ed1: int
        :param ed2:
        :type ed2: int
        :param ed3:
        :type ed3: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_LinkEdges2Triangle(self, *args)


    def SetEdgeandOrientation(self, *args):
        """
        :param Edge:
        :type Edge: int
        :param TEdges:
        :type TEdges: IntPolyh_ArrayOfEdges &
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_SetEdgeandOrientation(self, *args)


    def Dump(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_Dump(self, *args)


    def DumpFleche(self, *args):
        """
        :param v:
        :type v: int
        :rtype: None

        """
        return _IntPolyh.IntPolyh_Triangle_DumpFleche(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


IntPolyh_Triangle.FirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.FirstEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.FirstEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetFleche = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetFleche, None, IntPolyh_Triangle)
IntPolyh_Triangle.IndiceIntersectionPossible = new_instancemethod(_IntPolyh.IntPolyh_Triangle_IndiceIntersectionPossible, None, IntPolyh_Triangle)
IntPolyh_Triangle.IndiceIntersection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_IndiceIntersection, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetFirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetFirstPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetSecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetSecondPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetThirdPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetThirdPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetFirstEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetFirstEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetSecondEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetSecondEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetThirdEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetThirdEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetFleche = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetFleche, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetIndiceIntersectionPossible = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetIndiceIntersectionPossible, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetIndiceIntersection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetIndiceIntersection, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetEdgeNumber = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetEdgeNumber, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.TriangleDeflection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_TriangleDeflection, None, IntPolyh_Triangle)
IntPolyh_Triangle.CheckCommonEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_CheckCommonEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetNextTriangle2 = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetNextTriangle2, None, IntPolyh_Triangle)
IntPolyh_Triangle.MiddleRefinement = new_instancemethod(_IntPolyh.IntPolyh_Triangle_MiddleRefinement, None, IntPolyh_Triangle)
IntPolyh_Triangle.MultipleMiddleRefinement = new_instancemethod(_IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement, None, IntPolyh_Triangle)
IntPolyh_Triangle.CompareBoxTriangle = new_instancemethod(_IntPolyh.IntPolyh_Triangle_CompareBoxTriangle, None, IntPolyh_Triangle)
IntPolyh_Triangle.MultipleMiddleRefinement2 = new_instancemethod(_IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement2, None, IntPolyh_Triangle)
IntPolyh_Triangle.LinkEdges2Triangle = new_instancemethod(_IntPolyh.IntPolyh_Triangle_LinkEdges2Triangle, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdgeandOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdgeandOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.Dump = new_instancemethod(_IntPolyh.IntPolyh_Triangle_Dump, None, IntPolyh_Triangle)
IntPolyh_Triangle.DumpFleche = new_instancemethod(_IntPolyh.IntPolyh_Triangle_DumpFleche, None, IntPolyh_Triangle)
IntPolyh_Triangle._kill_pointed = new_instancemethod(_IntPolyh.IntPolyh_Triangle__kill_pointed, None, IntPolyh_Triangle)
IntPolyh_Triangle_swigregister = _IntPolyh.IntPolyh_Triangle_swigregister
IntPolyh_Triangle_swigregister(IntPolyh_Triangle)



