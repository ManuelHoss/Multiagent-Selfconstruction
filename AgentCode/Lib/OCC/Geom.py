# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _Geom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom', [dirname(__file__)])
        except ImportError:
            import _Geom
            return _Geom
        if fp is not None:
            try:
                _mod = imp.load_module('_Geom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Geom = swig_import_helper()
    del swig_import_helper
else:
    import _Geom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_Geom.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _Geom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
class Geom_Geometry(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Mirror(self, *args):
        """
        * Performs the symmetrical transformation of a Geometry with respect to the point P which is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Performs the symmetrical transformation of a Geometry with respect to an axis placement which is the axis of the symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Performs the symmetrical transformation of a Geometry with respect to a plane. The axis placement A2 locates the plane of the symmetry : (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _Geom.Geom_Geometry_Mirror(self, *args)

    def Rotate(self, *args):
        """
        * Rotates a Geometry. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _Geom.Geom_Geometry_Rotate(self, *args)

    def Scale(self, *args):
        """
        * Scales a Geometry. S is the scaling value.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _Geom.Geom_Geometry_Scale(self, *args)

    def Translate(self, *args):
        """
        * Translates a Geometry. V is the vector of the tanslation.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Translates a Geometry from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_Geometry_Translate(self, *args)

    def Transform(self, *args):
        """
        * Transformation of a geometric object. This tansformation can be a translation, a rotation, a symmetry, a scaling or a complex transformation obtained by combination of the previous elementaries transformations. (see class Transformation of the package Geom).

        :param T:
        :type T: gp_Trsf
        :rtype: void

        """
        return _Geom.Geom_Geometry_Transform(self, *args)

    def Mirrored(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :rtype: Handle_Geom_Geometry

        :param A1:
        :type A1: gp_Ax1
        :rtype: Handle_Geom_Geometry

        :param A2:
        :type A2: gp_Ax2
        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Mirrored(self, *args)

    def Rotated(self, *args):
        """
        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Rotated(self, *args)

    def Scaled(self, *args):
        """
        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Scaled(self, *args)

    def Transformed(self, *args):
        """
        :param T:
        :type T: gp_Trsf
        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Transformed(self, *args)

    def Translated(self, *args):
        """
        :param V:
        :type V: gp_Vec
        :rtype: Handle_Geom_Geometry

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Translated(self, *args)

    def Copy(self, *args):
        """
        * Creates a new object which is a copy of this geometric object.

        :rtype: Handle_Geom_Geometry

        """
        return _Geom.Geom_Geometry_Copy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Geometry self)"""
        return _Geom.Geom_Geometry__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Geometry self) -> Handle_Geom_Geometry"""
        return _Geom.Geom_Geometry_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Geometry.Mirror = new_instancemethod(_Geom.Geom_Geometry_Mirror,None,Geom_Geometry)
Geom_Geometry.Rotate = new_instancemethod(_Geom.Geom_Geometry_Rotate,None,Geom_Geometry)
Geom_Geometry.Scale = new_instancemethod(_Geom.Geom_Geometry_Scale,None,Geom_Geometry)
Geom_Geometry.Translate = new_instancemethod(_Geom.Geom_Geometry_Translate,None,Geom_Geometry)
Geom_Geometry.Transform = new_instancemethod(_Geom.Geom_Geometry_Transform,None,Geom_Geometry)
Geom_Geometry.Mirrored = new_instancemethod(_Geom.Geom_Geometry_Mirrored,None,Geom_Geometry)
Geom_Geometry.Rotated = new_instancemethod(_Geom.Geom_Geometry_Rotated,None,Geom_Geometry)
Geom_Geometry.Scaled = new_instancemethod(_Geom.Geom_Geometry_Scaled,None,Geom_Geometry)
Geom_Geometry.Transformed = new_instancemethod(_Geom.Geom_Geometry_Transformed,None,Geom_Geometry)
Geom_Geometry.Translated = new_instancemethod(_Geom.Geom_Geometry_Translated,None,Geom_Geometry)
Geom_Geometry.Copy = new_instancemethod(_Geom.Geom_Geometry_Copy,None,Geom_Geometry)
Geom_Geometry._kill_pointed = new_instancemethod(_Geom.Geom_Geometry__kill_pointed,None,Geom_Geometry)
Geom_Geometry.GetHandle = new_instancemethod(_Geom.Geom_Geometry_GetHandle,None,Geom_Geometry)
Geom_Geometry_swigregister = _Geom.Geom_Geometry_swigregister
Geom_Geometry_swigregister(Geom_Geometry)

class Handle_Geom_Geometry(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Geometry_swiginit(self,_Geom.new_Handle_Geom_Geometry(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Geometry_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Geometry.Nullify = new_instancemethod(_Geom.Handle_Geom_Geometry_Nullify,None,Handle_Geom_Geometry)
Handle_Geom_Geometry.IsNull = new_instancemethod(_Geom.Handle_Geom_Geometry_IsNull,None,Handle_Geom_Geometry)
Handle_Geom_Geometry.GetObject = new_instancemethod(_Geom.Handle_Geom_Geometry_GetObject,None,Handle_Geom_Geometry)
Handle_Geom_Geometry._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Geometry__kill_pointed,None,Handle_Geom_Geometry)
Handle_Geom_Geometry_swigregister = _Geom.Handle_Geom_Geometry_swigregister
Handle_Geom_Geometry_swigregister(Handle_Geom_Geometry)

def Handle_Geom_Geometry_DownCast(*args):
  return _Geom.Handle_Geom_Geometry_DownCast(*args)
Handle_Geom_Geometry_DownCast = _Geom.Handle_Geom_Geometry_DownCast

class Geom_HSequenceOfBSplineSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Geom.Geom_HSequenceOfBSplineSurface_swiginit(self,_Geom.new_Geom_HSequenceOfBSplineSurface(*args))
    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_IsEmpty(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Length(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Clear(self, *args)

    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Geom_BSplineSurface &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Append(self, *args)

    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Geom_BSplineSurface &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Prepend(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Reverse(self, *args)

    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BSplineSurface &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BSplineSurface &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_InsertAfter(self, *args)

    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Exchange(self, *args)

    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_HSequenceOfBSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Split(self, *args)

    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_SetValue(self, *args)

    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Remove(self, *args)

    def Sequence(self, *args):
        """
        :rtype: Geom_SequenceOfBSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_Sequence(self, *args)

    def ChangeSequence(self, *args):
        """
        :rtype: Geom_SequenceOfBSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_ChangeSequence(self, *args)

    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Geom_HSequenceOfBSplineSurface

        """
        return _Geom.Geom_HSequenceOfBSplineSurface_ShallowCopy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_HSequenceOfBSplineSurface self)"""
        return _Geom.Geom_HSequenceOfBSplineSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_HSequenceOfBSplineSurface self) -> Handle_Geom_HSequenceOfBSplineSurface"""
        return _Geom.Geom_HSequenceOfBSplineSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_HSequenceOfBSplineSurface.IsEmpty = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_IsEmpty,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Length = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Length,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Clear = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Clear,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Append = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Append,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Prepend = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Prepend,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Reverse = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Reverse,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.InsertBefore = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_InsertBefore,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.InsertAfter = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_InsertAfter,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Exchange = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Exchange,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Split = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Split,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.SetValue = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_SetValue,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Value = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Value,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.ChangeValue = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_ChangeValue,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Remove = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Remove,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.Sequence = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_Sequence,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.ChangeSequence = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_ChangeSequence,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.ShallowCopy = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_ShallowCopy,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface._kill_pointed = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface__kill_pointed,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface.GetHandle = new_instancemethod(_Geom.Geom_HSequenceOfBSplineSurface_GetHandle,None,Geom_HSequenceOfBSplineSurface)
Geom_HSequenceOfBSplineSurface_swigregister = _Geom.Geom_HSequenceOfBSplineSurface_swigregister
Geom_HSequenceOfBSplineSurface_swigregister(Geom_HSequenceOfBSplineSurface)

class Handle_Geom_HSequenceOfBSplineSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_HSequenceOfBSplineSurface_swiginit(self,_Geom.new_Handle_Geom_HSequenceOfBSplineSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_HSequenceOfBSplineSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_HSequenceOfBSplineSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_HSequenceOfBSplineSurface_Nullify,None,Handle_Geom_HSequenceOfBSplineSurface)
Handle_Geom_HSequenceOfBSplineSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_HSequenceOfBSplineSurface_IsNull,None,Handle_Geom_HSequenceOfBSplineSurface)
Handle_Geom_HSequenceOfBSplineSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_HSequenceOfBSplineSurface_GetObject,None,Handle_Geom_HSequenceOfBSplineSurface)
Handle_Geom_HSequenceOfBSplineSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_HSequenceOfBSplineSurface__kill_pointed,None,Handle_Geom_HSequenceOfBSplineSurface)
Handle_Geom_HSequenceOfBSplineSurface_swigregister = _Geom.Handle_Geom_HSequenceOfBSplineSurface_swigregister
Handle_Geom_HSequenceOfBSplineSurface_swigregister(Handle_Geom_HSequenceOfBSplineSurface)

def Handle_Geom_HSequenceOfBSplineSurface_DownCast(*args):
  return _Geom.Handle_Geom_HSequenceOfBSplineSurface_DownCast(*args)
Handle_Geom_HSequenceOfBSplineSurface_DownCast = _Geom.Handle_Geom_HSequenceOfBSplineSurface_DownCast

class Geom_HSequenceOfSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Geom.Geom_HSequenceOfSurface_swiginit(self,_Geom.new_Geom_HSequenceOfSurface(*args))
    def IsEmpty(self, *args):
        """
        :rtype: bool

        """
        return _Geom.Geom_HSequenceOfSurface_IsEmpty(self, *args)

    def Length(self, *args):
        """
        :rtype: int

        """
        return _Geom.Geom_HSequenceOfSurface_Length(self, *args)

    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Clear(self, *args)

    def Append(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Geom_Surface &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Append(self, *args)

    def Prepend(self, *args):
        """
        :param anItem:
        :type anItem: Handle_Geom_Surface &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Prepend(self, *args)

    def Reverse(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Reverse(self, *args)

    def InsertBefore(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Surface &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Surface &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Geom_HSequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_InsertAfter(self, *args)

    def Exchange(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Exchange(self, *args)

    def Split(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_HSequenceOfSurface

        """
        return _Geom.Geom_HSequenceOfSurface_Split(self, *args)

    def SetValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Surface &
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_SetValue(self, *args)

    def Value(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_HSequenceOfSurface_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_HSequenceOfSurface_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Geom.Geom_HSequenceOfSurface_Remove(self, *args)

    def Sequence(self, *args):
        """
        :rtype: Geom_SequenceOfSurface

        """
        return _Geom.Geom_HSequenceOfSurface_Sequence(self, *args)

    def ChangeSequence(self, *args):
        """
        :rtype: Geom_SequenceOfSurface

        """
        return _Geom.Geom_HSequenceOfSurface_ChangeSequence(self, *args)

    def ShallowCopy(self, *args):
        """
        :rtype: Handle_Geom_HSequenceOfSurface

        """
        return _Geom.Geom_HSequenceOfSurface_ShallowCopy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_HSequenceOfSurface self)"""
        return _Geom.Geom_HSequenceOfSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_HSequenceOfSurface self) -> Handle_Geom_HSequenceOfSurface"""
        return _Geom.Geom_HSequenceOfSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_HSequenceOfSurface.IsEmpty = new_instancemethod(_Geom.Geom_HSequenceOfSurface_IsEmpty,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Length = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Length,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Clear = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Clear,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Append = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Append,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Prepend = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Prepend,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Reverse = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Reverse,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.InsertBefore = new_instancemethod(_Geom.Geom_HSequenceOfSurface_InsertBefore,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.InsertAfter = new_instancemethod(_Geom.Geom_HSequenceOfSurface_InsertAfter,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Exchange = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Exchange,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Split = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Split,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.SetValue = new_instancemethod(_Geom.Geom_HSequenceOfSurface_SetValue,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Value = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Value,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.ChangeValue = new_instancemethod(_Geom.Geom_HSequenceOfSurface_ChangeValue,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Remove = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Remove,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.Sequence = new_instancemethod(_Geom.Geom_HSequenceOfSurface_Sequence,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.ChangeSequence = new_instancemethod(_Geom.Geom_HSequenceOfSurface_ChangeSequence,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.ShallowCopy = new_instancemethod(_Geom.Geom_HSequenceOfSurface_ShallowCopy,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface._kill_pointed = new_instancemethod(_Geom.Geom_HSequenceOfSurface__kill_pointed,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface.GetHandle = new_instancemethod(_Geom.Geom_HSequenceOfSurface_GetHandle,None,Geom_HSequenceOfSurface)
Geom_HSequenceOfSurface_swigregister = _Geom.Geom_HSequenceOfSurface_swigregister
Geom_HSequenceOfSurface_swigregister(Geom_HSequenceOfSurface)

class Handle_Geom_HSequenceOfSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_HSequenceOfSurface_swiginit(self,_Geom.new_Handle_Geom_HSequenceOfSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_HSequenceOfSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_HSequenceOfSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_HSequenceOfSurface_Nullify,None,Handle_Geom_HSequenceOfSurface)
Handle_Geom_HSequenceOfSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_HSequenceOfSurface_IsNull,None,Handle_Geom_HSequenceOfSurface)
Handle_Geom_HSequenceOfSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_HSequenceOfSurface_GetObject,None,Handle_Geom_HSequenceOfSurface)
Handle_Geom_HSequenceOfSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_HSequenceOfSurface__kill_pointed,None,Handle_Geom_HSequenceOfSurface)
Handle_Geom_HSequenceOfSurface_swigregister = _Geom.Handle_Geom_HSequenceOfSurface_swigregister
Handle_Geom_HSequenceOfSurface_swigregister(Handle_Geom_HSequenceOfSurface)

def Handle_Geom_HSequenceOfSurface_DownCast(*args):
  return _Geom.Handle_Geom_HSequenceOfSurface_DownCast(*args)
Handle_Geom_HSequenceOfSurface_DownCast = _Geom.Handle_Geom_HSequenceOfSurface_DownCast

class Geom_OsculatingSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        * detects if the surface has punctual U or V isoparametric curve along on the bounds of the surface relativly to the tolerance Tol and Builds the corresponding osculating surfaces.

        :param BS:
        :type BS: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _Geom.Geom_OsculatingSurface_swiginit(self,_Geom.new_Geom_OsculatingSurface(*args))
    def Init(self, *args):
        """
        :param BS:
        :type BS: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Geom.Geom_OsculatingSurface_Init(self, *args)

    def BasisSurface(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_OsculatingSurface_BasisSurface(self, *args)

    def Tolerance(self, *args):
        """
        :rtype: float

        """
        return _Geom.Geom_OsculatingSurface_Tolerance(self, *args)

    def UOscSurf(self, *args):
        """
        * if Standard_True, L is the local osculating surface along U at the point U,V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param t:
        :type t: bool
        :param L:
        :type L: Handle_Geom_BSplineSurface &
        :rtype: bool

        """
        return _Geom.Geom_OsculatingSurface_UOscSurf(self, *args)

    def VOscSurf(self, *args):
        """
        * if Standard_True, L is the local osculating surface along V at the point U,V.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param t:
        :type t: bool
        :param L:
        :type L: Handle_Geom_BSplineSurface &
        :rtype: bool

        """
        return _Geom.Geom_OsculatingSurface_VOscSurf(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_OsculatingSurface.Init = new_instancemethod(_Geom.Geom_OsculatingSurface_Init,None,Geom_OsculatingSurface)
Geom_OsculatingSurface.BasisSurface = new_instancemethod(_Geom.Geom_OsculatingSurface_BasisSurface,None,Geom_OsculatingSurface)
Geom_OsculatingSurface.Tolerance = new_instancemethod(_Geom.Geom_OsculatingSurface_Tolerance,None,Geom_OsculatingSurface)
Geom_OsculatingSurface.UOscSurf = new_instancemethod(_Geom.Geom_OsculatingSurface_UOscSurf,None,Geom_OsculatingSurface)
Geom_OsculatingSurface.VOscSurf = new_instancemethod(_Geom.Geom_OsculatingSurface_VOscSurf,None,Geom_OsculatingSurface)
Geom_OsculatingSurface._kill_pointed = new_instancemethod(_Geom.Geom_OsculatingSurface__kill_pointed,None,Geom_OsculatingSurface)
Geom_OsculatingSurface_swigregister = _Geom.Geom_OsculatingSurface_swigregister
Geom_OsculatingSurface_swigregister(Geom_OsculatingSurface)

class Geom_SequenceNodeOfSequenceOfBSplineSurface(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_Geom_BSplineSurface &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_swiginit(self,_Geom.new_Geom_SequenceNodeOfSequenceOfBSplineSurface(*args))
    def Value(self, *args):
        """
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SequenceNodeOfSequenceOfBSplineSurface self)"""
        return _Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SequenceNodeOfSequenceOfBSplineSurface self) -> Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface"""
        return _Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SequenceNodeOfSequenceOfBSplineSurface.Value = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_Value,None,Geom_SequenceNodeOfSequenceOfBSplineSurface)
Geom_SequenceNodeOfSequenceOfBSplineSurface._kill_pointed = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface__kill_pointed,None,Geom_SequenceNodeOfSequenceOfBSplineSurface)
Geom_SequenceNodeOfSequenceOfBSplineSurface.GetHandle = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_GetHandle,None,Geom_SequenceNodeOfSequenceOfBSplineSurface)
Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister = _Geom.Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister
Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister(Geom_SequenceNodeOfSequenceOfBSplineSurface)

class Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_swiginit(self,_Geom.new_Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_Nullify,None,Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface)
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_IsNull,None,Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface)
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_GetObject,None,Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface)
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface__kill_pointed,None,Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface)
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister = _Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_swigregister(Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface)

def Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_DownCast(*args):
  return _Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_DownCast(*args)
Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_DownCast = _Geom.Handle_Geom_SequenceNodeOfSequenceOfBSplineSurface_DownCast

class Geom_SequenceNodeOfSequenceOfSurface(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_Geom_Surface &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Geom.Geom_SequenceNodeOfSequenceOfSurface_swiginit(self,_Geom.new_Geom_SequenceNodeOfSequenceOfSurface(*args))
    def Value(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_SequenceNodeOfSequenceOfSurface_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SequenceNodeOfSequenceOfSurface self)"""
        return _Geom.Geom_SequenceNodeOfSequenceOfSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SequenceNodeOfSequenceOfSurface self) -> Handle_Geom_SequenceNodeOfSequenceOfSurface"""
        return _Geom.Geom_SequenceNodeOfSequenceOfSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SequenceNodeOfSequenceOfSurface.Value = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfSurface_Value,None,Geom_SequenceNodeOfSequenceOfSurface)
Geom_SequenceNodeOfSequenceOfSurface._kill_pointed = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfSurface__kill_pointed,None,Geom_SequenceNodeOfSequenceOfSurface)
Geom_SequenceNodeOfSequenceOfSurface.GetHandle = new_instancemethod(_Geom.Geom_SequenceNodeOfSequenceOfSurface_GetHandle,None,Geom_SequenceNodeOfSequenceOfSurface)
Geom_SequenceNodeOfSequenceOfSurface_swigregister = _Geom.Geom_SequenceNodeOfSequenceOfSurface_swigregister
Geom_SequenceNodeOfSequenceOfSurface_swigregister(Geom_SequenceNodeOfSequenceOfSurface)

class Handle_Geom_SequenceNodeOfSequenceOfSurface(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_swiginit(self,_Geom.new_Handle_Geom_SequenceNodeOfSequenceOfSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SequenceNodeOfSequenceOfSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_Nullify,None,Handle_Geom_SequenceNodeOfSequenceOfSurface)
Handle_Geom_SequenceNodeOfSequenceOfSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_IsNull,None,Handle_Geom_SequenceNodeOfSequenceOfSurface)
Handle_Geom_SequenceNodeOfSequenceOfSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_GetObject,None,Handle_Geom_SequenceNodeOfSequenceOfSurface)
Handle_Geom_SequenceNodeOfSequenceOfSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface__kill_pointed,None,Handle_Geom_SequenceNodeOfSequenceOfSurface)
Handle_Geom_SequenceNodeOfSequenceOfSurface_swigregister = _Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_swigregister
Handle_Geom_SequenceNodeOfSequenceOfSurface_swigregister(Handle_Geom_SequenceNodeOfSequenceOfSurface)

def Handle_Geom_SequenceNodeOfSequenceOfSurface_DownCast(*args):
  return _Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_DownCast(*args)
Handle_Geom_SequenceNodeOfSequenceOfSurface_DownCast = _Geom.Handle_Geom_SequenceNodeOfSequenceOfSurface_DownCast

class Geom_SequenceOfBSplineSurface(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Geom.Geom_SequenceOfBSplineSurface_swiginit(self,_Geom.new_Geom_SequenceOfBSplineSurface(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Geom_SequenceOfBSplineSurface &
        :rtype: Geom_SequenceOfBSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Geom_SequenceOfBSplineSurface &
        :rtype: Geom_SequenceOfBSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Geom_BSplineSurface &
        :rtype: None

        :param S:
        :type S: Geom_SequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Geom_BSplineSurface &
        :rtype: None

        :param S:
        :type S: Geom_SequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_BSplineSurface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Geom_SequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_BSplineSurface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Geom_SequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Geom_SequenceOfBSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom_BSplineSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineSurface

        """
        return _Geom.Geom_SequenceOfBSplineSurface_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Geom.Geom_SequenceOfBSplineSurface_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SequenceOfBSplineSurface.Clear = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Clear,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Assign = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Assign,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Set = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Set,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Append = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Append,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Prepend = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Prepend,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.InsertBefore = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_InsertBefore,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.InsertAfter = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_InsertAfter,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.First = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_First,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Last = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Last,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Split = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Split,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Value = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Value,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.SetValue = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_SetValue,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.ChangeValue = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_ChangeValue,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface.Remove = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface_Remove,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface._kill_pointed = new_instancemethod(_Geom.Geom_SequenceOfBSplineSurface__kill_pointed,None,Geom_SequenceOfBSplineSurface)
Geom_SequenceOfBSplineSurface_swigregister = _Geom.Geom_SequenceOfBSplineSurface_swigregister
Geom_SequenceOfBSplineSurface_swigregister(Geom_SequenceOfBSplineSurface)

class Geom_SequenceOfSurface(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        """
        _Geom.Geom_SequenceOfSurface_swiginit(self,_Geom.new_Geom_SequenceOfSurface(*args))
    def Clear(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_Clear(self, *args)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: Geom_SequenceOfSurface &
        :rtype: Geom_SequenceOfSurface

        """
        return _Geom.Geom_SequenceOfSurface_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: Geom_SequenceOfSurface &
        :rtype: Geom_SequenceOfSurface

        """
        return _Geom.Geom_SequenceOfSurface_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param S:
        :type S: Geom_SequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param S:
        :type S: Geom_SequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Geom_SequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Geom_SequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_InsertAfter(self, *args)

    def First(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_SequenceOfSurface_First(self, *args)

    def Last(self, *args):
        """
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_SequenceOfSurface_Last(self, *args)

    def Split(self, *args):
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Geom_SequenceOfSurface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_SequenceOfSurface_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom_Surface &
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_SequenceOfSurface_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Geom.Geom_SequenceOfSurface_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SequenceOfSurface.Clear = new_instancemethod(_Geom.Geom_SequenceOfSurface_Clear,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Assign = new_instancemethod(_Geom.Geom_SequenceOfSurface_Assign,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Set = new_instancemethod(_Geom.Geom_SequenceOfSurface_Set,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Append = new_instancemethod(_Geom.Geom_SequenceOfSurface_Append,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Prepend = new_instancemethod(_Geom.Geom_SequenceOfSurface_Prepend,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.InsertBefore = new_instancemethod(_Geom.Geom_SequenceOfSurface_InsertBefore,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.InsertAfter = new_instancemethod(_Geom.Geom_SequenceOfSurface_InsertAfter,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.First = new_instancemethod(_Geom.Geom_SequenceOfSurface_First,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Last = new_instancemethod(_Geom.Geom_SequenceOfSurface_Last,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Split = new_instancemethod(_Geom.Geom_SequenceOfSurface_Split,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Value = new_instancemethod(_Geom.Geom_SequenceOfSurface_Value,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.SetValue = new_instancemethod(_Geom.Geom_SequenceOfSurface_SetValue,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.ChangeValue = new_instancemethod(_Geom.Geom_SequenceOfSurface_ChangeValue,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface.Remove = new_instancemethod(_Geom.Geom_SequenceOfSurface_Remove,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface._kill_pointed = new_instancemethod(_Geom.Geom_SequenceOfSurface__kill_pointed,None,Geom_SequenceOfSurface)
Geom_SequenceOfSurface_swigregister = _Geom.Geom_SequenceOfSurface_swigregister
Geom_SequenceOfSurface_swigregister(Geom_SequenceOfSurface)

class Geom_Transformation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates an identity transformation.

        :rtype: None

        * Creates a transient copy of T.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        _Geom.Geom_Transformation_swiginit(self,_Geom.new_Geom_Transformation(*args))
    def SetMirror(self, *args):
        """
        * Makes the transformation into a symmetrical transformation with respect to a point P. P is the center of the symmetry.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Makes the transformation into a symmetrical transformation with respect to an axis A1. A1 is the center of the axial symmetry.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Makes the transformation into a symmetrical transformation with respect to a plane. The plane of the symmetry is defined with the axis placement A2. It is the plane (Location, XDirection, YDirection).

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetMirror(self, *args)

    def SetRotation(self, *args):
        """
        * Makes the transformation into a rotation. A1 is the axis rotation and Ang is the angular value of the rotation in radians.

        :param A1:
        :type A1: gp_Ax1
        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetRotation(self, *args)

    def SetScale(self, *args):
        """
        * Makes the transformation into a scale. P is the center of the scale and S is the scaling value.

        :param P:
        :type P: gp_Pnt
        :param S:
        :type S: float
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetScale(self, *args)

    def SetTransformation(self, *args):
        """
        * Makes a transformation allowing passage from the coordinate system 'FromSystem1' to the coordinate system 'ToSystem2'. Example : In a C++ implementation : Real x1, y1, z1; // are the coordinates of a point in the  // local system FromSystem1 Real x2, y2, z2; // are the coordinates of a point in the  // local system ToSystem2 gp_Pnt P1 (x1, y1, z1) Geom_Transformation T; T.SetTransformation (FromSystem1, ToSystem2); gp_Pnt P2 = P1.Transformed (T); P2.Coord (x2, y2, z2);

        :param FromSystem1:
        :type FromSystem1: gp_Ax3
        :param ToSystem2:
        :type ToSystem2: gp_Ax3
        :rtype: None

        * Makes the transformation allowing passage from the basic coordinate system {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.), VZ (0., 0. ,1.) } to the local coordinate system defined with the Ax2 ToSystem. Same utilisation as the previous method. FromSystem1 is defaulted to the absolute coordinate system.

        :param ToSystem:
        :type ToSystem: gp_Ax3
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        """
        * Makes the transformation into a translation. V is the vector of the translation.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Makes the transformation into a translation from the point P1 to the point P2.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetTranslation(self, *args)

    def SetTrsf(self, *args):
        """
        * Converts the gp_Trsf transformation T into this transformation.

        :param T:
        :type T: gp_Trsf
        :rtype: None

        """
        return _Geom.Geom_Transformation_SetTrsf(self, *args)

    def IsNegative(self, *args):
        """
        * Checks whether this transformation is an indirect transformation: returns true if the determinant of the matrix of the vectorial part of the transformation is less than 0.

        :rtype: bool

        """
        return _Geom.Geom_Transformation_IsNegative(self, *args)

    def Form(self, *args):
        """
        * Returns the nature of this transformation as a value of the gp_TrsfForm enumeration.

        :rtype: gp_TrsfForm

        """
        return _Geom.Geom_Transformation_Form(self, *args)

    def ScaleFactor(self, *args):
        """
        * Returns the scale value of the transformation.

        :rtype: float

        """
        return _Geom.Geom_Transformation_ScaleFactor(self, *args)

    def Trsf(self, *args):
        """
        * Returns a non transient copy of <self>.

        :rtype: gp_Trsf

        """
        return _Geom.Geom_Transformation_Trsf(self, *args)

    def Value(self, *args):
        """
        * Returns the coefficients of the global matrix of tranformation. It is a 3 rows X 4 columns matrix. Raised if Row < 1 or Row > 3 or Col < 1 or Col > 4 Computes the reverse transformation.

        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _Geom.Geom_Transformation_Value(self, *args)

    def Invert(self, *args):
        """
        * Raised if the the transformation is singular. This means that the ScaleFactor is lower or equal to Resolution from package gp.

        :rtype: None

        """
        return _Geom.Geom_Transformation_Invert(self, *args)

    def Inverted(self, *args):
        """
        * Raised if the the transformation is singular. This means that the ScaleFactor is lower or equal to Resolution from package gp.

        :rtype: Handle_Geom_Transformation

        """
        return _Geom.Geom_Transformation_Inverted(self, *args)

    def Multiplied(self, *args):
        """
        * Computes the transformation composed with Other and <self>. <self> * Other. Returns a new transformation

        :param Other:
        :type Other: Handle_Geom_Transformation &
        :rtype: Handle_Geom_Transformation

        """
        return _Geom.Geom_Transformation_Multiplied(self, *args)

    def Multiply(self, *args):
        """
        * Computes the transformation composed with Other and <self> . <self> = <self> * Other.

        :param Other:
        :type Other: Handle_Geom_Transformation &
        :rtype: None

        """
        return _Geom.Geom_Transformation_Multiply(self, *args)

    def Power(self, *args):
        """
        * Computes the following composition of transformations if N > 0 <self> * <self> * .......* <self>. if N = 0 Identity if N < 0 <self>.Invert() * .........* <self>.Invert() Raised if N < 0 and if the transformation is not inversible

        :param N:
        :type N: int
        :rtype: None

        """
        return _Geom.Geom_Transformation_Power(self, *args)

    def Powered(self, *args):
        """
        * Raised if N < 0 and if the transformation is not inversible

        :param N:
        :type N: int
        :rtype: Handle_Geom_Transformation

        """
        return _Geom.Geom_Transformation_Powered(self, *args)

    def PreMultiply(self, *args):
        """
        * Computes the matrix of the transformation composed with <self> and Other. <self> = Other * <self>

        :param Other:
        :type Other: Handle_Geom_Transformation &
        :rtype: None

        """
        return _Geom.Geom_Transformation_PreMultiply(self, *args)

    def Transforms(self, *args):
        """
        * Applies the transformation <self> to the triplet {X, Y, Z}.

        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: None

        """
        return _Geom.Geom_Transformation_Transforms(self, *args)

    def Copy(self, *args):
        """
        * Creates a new object which is a copy of this transformation.

        :rtype: Handle_Geom_Transformation

        """
        return _Geom.Geom_Transformation_Copy(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Transformation self)"""
        return _Geom.Geom_Transformation__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Transformation self) -> Handle_Geom_Transformation"""
        return _Geom.Geom_Transformation_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Transformation.SetMirror = new_instancemethod(_Geom.Geom_Transformation_SetMirror,None,Geom_Transformation)
Geom_Transformation.SetRotation = new_instancemethod(_Geom.Geom_Transformation_SetRotation,None,Geom_Transformation)
Geom_Transformation.SetScale = new_instancemethod(_Geom.Geom_Transformation_SetScale,None,Geom_Transformation)
Geom_Transformation.SetTransformation = new_instancemethod(_Geom.Geom_Transformation_SetTransformation,None,Geom_Transformation)
Geom_Transformation.SetTranslation = new_instancemethod(_Geom.Geom_Transformation_SetTranslation,None,Geom_Transformation)
Geom_Transformation.SetTrsf = new_instancemethod(_Geom.Geom_Transformation_SetTrsf,None,Geom_Transformation)
Geom_Transformation.IsNegative = new_instancemethod(_Geom.Geom_Transformation_IsNegative,None,Geom_Transformation)
Geom_Transformation.Form = new_instancemethod(_Geom.Geom_Transformation_Form,None,Geom_Transformation)
Geom_Transformation.ScaleFactor = new_instancemethod(_Geom.Geom_Transformation_ScaleFactor,None,Geom_Transformation)
Geom_Transformation.Trsf = new_instancemethod(_Geom.Geom_Transformation_Trsf,None,Geom_Transformation)
Geom_Transformation.Value = new_instancemethod(_Geom.Geom_Transformation_Value,None,Geom_Transformation)
Geom_Transformation.Invert = new_instancemethod(_Geom.Geom_Transformation_Invert,None,Geom_Transformation)
Geom_Transformation.Inverted = new_instancemethod(_Geom.Geom_Transformation_Inverted,None,Geom_Transformation)
Geom_Transformation.Multiplied = new_instancemethod(_Geom.Geom_Transformation_Multiplied,None,Geom_Transformation)
Geom_Transformation.Multiply = new_instancemethod(_Geom.Geom_Transformation_Multiply,None,Geom_Transformation)
Geom_Transformation.Power = new_instancemethod(_Geom.Geom_Transformation_Power,None,Geom_Transformation)
Geom_Transformation.Powered = new_instancemethod(_Geom.Geom_Transformation_Powered,None,Geom_Transformation)
Geom_Transformation.PreMultiply = new_instancemethod(_Geom.Geom_Transformation_PreMultiply,None,Geom_Transformation)
Geom_Transformation.Transforms = new_instancemethod(_Geom.Geom_Transformation_Transforms,None,Geom_Transformation)
Geom_Transformation.Copy = new_instancemethod(_Geom.Geom_Transformation_Copy,None,Geom_Transformation)
Geom_Transformation._kill_pointed = new_instancemethod(_Geom.Geom_Transformation__kill_pointed,None,Geom_Transformation)
Geom_Transformation.GetHandle = new_instancemethod(_Geom.Geom_Transformation_GetHandle,None,Geom_Transformation)
Geom_Transformation_swigregister = _Geom.Geom_Transformation_swigregister
Geom_Transformation_swigregister(Geom_Transformation)

class Handle_Geom_Transformation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Transformation_swiginit(self,_Geom.new_Handle_Geom_Transformation(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Transformation_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Transformation.Nullify = new_instancemethod(_Geom.Handle_Geom_Transformation_Nullify,None,Handle_Geom_Transformation)
Handle_Geom_Transformation.IsNull = new_instancemethod(_Geom.Handle_Geom_Transformation_IsNull,None,Handle_Geom_Transformation)
Handle_Geom_Transformation.GetObject = new_instancemethod(_Geom.Handle_Geom_Transformation_GetObject,None,Handle_Geom_Transformation)
Handle_Geom_Transformation._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Transformation__kill_pointed,None,Handle_Geom_Transformation)
Handle_Geom_Transformation_swigregister = _Geom.Handle_Geom_Transformation_swigregister
Handle_Geom_Transformation_swigregister(Handle_Geom_Transformation)

def Handle_Geom_Transformation_DownCast(*args):
  return _Geom.Handle_Geom_Transformation_DownCast(*args)
Handle_Geom_Transformation_DownCast = _Geom.Handle_Geom_Transformation_DownCast

class Geom_AxisPlacement(Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def SetAxis(self, *args):
        """
        * Assigns A1 as the 'main Axis' of this positioning system. This modifies - its origin, and - its 'main Direction'. If this positioning system is a Geom_Axis2Placement, then its 'X Direction' and 'Y Direction' are recomputed. Exceptions For a Geom_Axis2Placement: Standard_ConstructionError if A1 and the previous 'X Direction' of the coordinate system are parallel.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _Geom.Geom_AxisPlacement_SetAxis(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the direction of the axis placement. If <self> is an axis placement two axis the main 'Direction' is modified and the 'XDirection' and 'YDirection' are recomputed. Raises ConstructionError only for an axis placement two axis if V and the previous 'XDirection' are parallel because it is not possible to calculate the new 'XDirection' and the new 'YDirection'.

        :param V:
        :type V: gp_Dir
        :rtype: void

        """
        return _Geom.Geom_AxisPlacement_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * Assigns the point P as the origin of this positioning system.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_AxisPlacement_SetLocation(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value, in radians, between the 'main Direction' of this positioning system and that of positioning system Other. The result is a value between 0 and Pi.

        :param Other:
        :type Other: Handle_Geom_AxisPlacement &
        :rtype: float

        """
        return _Geom.Geom_AxisPlacement_Angle(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of the axis placement. For an 'Axis2placement' it is the main axis (Location, Direction ). For an 'Axis1Placement' this method returns a copy of <self>.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_AxisPlacement_Axis(self, *args)

    def Direction(self, *args):
        """
        * Returns the main 'Direction' of an axis placement.

        :rtype: gp_Dir

        """
        return _Geom.Geom_AxisPlacement_Direction(self, *args)

    def Location(self, *args):
        """
        * Returns the Location point (origin) of the axis placement.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_AxisPlacement_Location(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_AxisPlacement self)"""
        return _Geom.Geom_AxisPlacement__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_AxisPlacement self) -> Handle_Geom_AxisPlacement"""
        return _Geom.Geom_AxisPlacement_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_AxisPlacement.SetAxis = new_instancemethod(_Geom.Geom_AxisPlacement_SetAxis,None,Geom_AxisPlacement)
Geom_AxisPlacement.SetDirection = new_instancemethod(_Geom.Geom_AxisPlacement_SetDirection,None,Geom_AxisPlacement)
Geom_AxisPlacement.SetLocation = new_instancemethod(_Geom.Geom_AxisPlacement_SetLocation,None,Geom_AxisPlacement)
Geom_AxisPlacement.Angle = new_instancemethod(_Geom.Geom_AxisPlacement_Angle,None,Geom_AxisPlacement)
Geom_AxisPlacement.Axis = new_instancemethod(_Geom.Geom_AxisPlacement_Axis,None,Geom_AxisPlacement)
Geom_AxisPlacement.Direction = new_instancemethod(_Geom.Geom_AxisPlacement_Direction,None,Geom_AxisPlacement)
Geom_AxisPlacement.Location = new_instancemethod(_Geom.Geom_AxisPlacement_Location,None,Geom_AxisPlacement)
Geom_AxisPlacement._kill_pointed = new_instancemethod(_Geom.Geom_AxisPlacement__kill_pointed,None,Geom_AxisPlacement)
Geom_AxisPlacement.GetHandle = new_instancemethod(_Geom.Geom_AxisPlacement_GetHandle,None,Geom_AxisPlacement)
Geom_AxisPlacement_swigregister = _Geom.Geom_AxisPlacement_swigregister
Geom_AxisPlacement_swigregister(Geom_AxisPlacement)

class Handle_Geom_AxisPlacement(Handle_Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_AxisPlacement_swiginit(self,_Geom.new_Handle_Geom_AxisPlacement(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_AxisPlacement_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_AxisPlacement.Nullify = new_instancemethod(_Geom.Handle_Geom_AxisPlacement_Nullify,None,Handle_Geom_AxisPlacement)
Handle_Geom_AxisPlacement.IsNull = new_instancemethod(_Geom.Handle_Geom_AxisPlacement_IsNull,None,Handle_Geom_AxisPlacement)
Handle_Geom_AxisPlacement.GetObject = new_instancemethod(_Geom.Handle_Geom_AxisPlacement_GetObject,None,Handle_Geom_AxisPlacement)
Handle_Geom_AxisPlacement._kill_pointed = new_instancemethod(_Geom.Handle_Geom_AxisPlacement__kill_pointed,None,Handle_Geom_AxisPlacement)
Handle_Geom_AxisPlacement_swigregister = _Geom.Handle_Geom_AxisPlacement_swigregister
Handle_Geom_AxisPlacement_swigregister(Handle_Geom_AxisPlacement)

def Handle_Geom_AxisPlacement_DownCast(*args):
  return _Geom.Handle_Geom_AxisPlacement_DownCast(*args)
Handle_Geom_AxisPlacement_DownCast = _Geom.Handle_Geom_AxisPlacement_DownCast

class Geom_Curve(Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Reverse(self, *args):
        """
        * Changes the direction of parametrization of <self>. The 'FirstParameter' and the 'LastParameter' are not changed but the orientation of the curve is modified. If the curve is bounded the StartPoint of the initial curve becomes the EndPoint of the reversed curve and the EndPoint of the initial curve becomes the StartPoint of the reversed curve.

        :rtype: void

        """
        return _Geom.Geom_Curve_Reverse(self, *args)

    def ReversedParameter(self, *args):
        """
        * Returns the parameter on the reversed curve for the point of parameter U on <self>.  me->Reversed()->Value(me->ReversedParameter(U))  is the same point as  me->Value(U)

        :param U:
        :type U: float
        :rtype: float

        """
        return _Geom.Geom_Curve_ReversedParameter(self, *args)

    def TransformedParameter(self, *args):
        """
        * Returns the parameter on the transformed curve for the transform of the point of parameter U on <self>.  me->Transformed(T)->Value(me->TransformedParameter(U,T))  is the same point as  me->Value(U).Transformed(T)  This methods returns <U>  It can be redefined. For example on the Line.

        :param U:
        :type U: float
        :param T:
        :type T: gp_Trsf
        :rtype: float

        """
        return _Geom.Geom_Curve_TransformedParameter(self, *args)

    def ParametricTransformation(self, *args):
        """
        * Returns a coefficient to compute the parameter on the transformed curve for the transform of the point on <self>.  Transformed(T)->Value(U * ParametricTransformation(T))  is the same point as  Value(U).Transformed(T)  This methods returns 1.  It can be redefined. For example on the Line.

        :param T:
        :type T: gp_Trsf
        :rtype: float

        """
        return _Geom.Geom_Curve_ParametricTransformation(self, *args)

    def Reversed(self, *args):
        """
        * Returns a copy of <self> reversed.

        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_Curve_Reversed(self, *args)

    def FirstParameter(self, *args):
        """
        * Returns the value of the first parameter. Warnings : It can be RealFirst from package Standard if the curve is infinite

        :rtype: float

        """
        return _Geom.Geom_Curve_FirstParameter(self, *args)

    def LastParameter(self, *args):
        """
        * Returns the value of the last parameter. Warnings : It can be RealLast from package Standard if the curve is infinite

        :rtype: float

        """
        return _Geom.Geom_Curve_LastParameter(self, *args)

    def IsClosed(self, *args):
        """
        * Returns true if the curve is closed. Some curves such as circle are always closed, others such as line are never closed (by definition). Some Curves such as OffsetCurve can be closed or not. These curves are considered as closed if the distance between the first point and the last point of the curve is lower or equal to the Resolution from package gp wich is a fixed criterion independant of the application.

        :rtype: bool

        """
        return _Geom.Geom_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        """
        * Is the parametrization of the curve periodic ? It is possible only if the curve is closed and if the following relation is satisfied : for each parametric value U the distance between the point P(u) and the point P (u + T) is lower or equal to Resolution from package gp, T is the period and must be a constant. There are three possibilities : . the curve is never periodic by definition (SegmentLine) . the curve is always periodic by definition (Circle) . the curve can be defined as periodic (BSpline). In this case a function SetPeriodic allows you to give the shape of the curve. The general rule for this case is : if a curve can be periodic or not the default periodicity set is non periodic and you have to turn (explicitly) the curve into a periodic curve if you want the curve to be periodic.

        :rtype: bool

        """
        return _Geom.Geom_Curve_IsPeriodic(self, *args)

    def Period(self, *args):
        """
        * Returns the period of this curve. Exceptions Standard_NoSuchObject if this curve is not periodic.

        :rtype: float

        """
        return _Geom.Geom_Curve_Period(self, *args)

    def Continuity(self, *args):
        """
        * It is the global continuity of the curve C0 : only geometric continuity, C1 : continuity of the first derivative all along the Curve, C2 : continuity of the second derivative all along the Curve, C3 : continuity of the third derivative all along the Curve, G1 : tangency continuity all along the Curve, G2 : curvature continuity all along the Curve, CN : the order of continuity is infinite.

        :rtype: GeomAbs_Shape

        """
        return _Geom.Geom_Curve_Continuity(self, *args)

    def IsCN(self, *args):
        """
        * Returns true if the degree of continuity of this curve is at least N. Exceptions - Standard_RangeError if N is less than 0.

        :param N:
        :type N: int
        :rtype: bool

        """
        return _Geom.Geom_Curve_IsCN(self, *args)

    def D0(self, *args):
        """
        * Returns in P the point of parameter U. If the curve is periodic then the returned point is P(U) with U = Ustart + (U - Uend) where Ustart and Uend are the parametric bounds of the curve. Raised only for the 'OffsetCurve' if it is not possible to compute the current point. For example when the first derivative on the basis curve and the offset direction are parallel.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _Geom.Geom_Curve_D0(self, *args)

    def D1(self, *args):
        """
        * Returns the point P of parameter U and the first derivative V1. Raised if the continuity of the curve is not C1.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Curve_D1(self, *args)

    def D2(self, *args):
        """
        * Returns the point P of parameter U, the first and second derivatives V1 and V2. Raised if the continuity of the curve is not C2.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Curve_D2(self, *args)

    def D3(self, *args):
        """
        * Returns the point P of parameter U, the first, the second and the third derivative. Raised if the continuity of the curve is not C3.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Curve_D3(self, *args)

    def DN(self, *args):
        """
        * The returned vector gives the value of the derivative for the order of derivation N. Raised if the continuity of the curve is not CN. Raised if the derivative cannot be computed  easily. e.g. rational bspline and n > 3. Raised if N < 1.

        :param U:
        :type U: float
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_Curve_DN(self, *args)

    def Value(self, *args):
        """
        * Computes the point of parameter U on <self>. If the curve is periodic then the returned point is P(U) with U = Ustart + (U - Uend) where Ustart and Uend are the parametric bounds of the curve. it is implemented with D0. Raised only for the 'OffsetCurve' if it is not possible to compute the current point. For example when the first derivative on the basis curve and the offset direction are parallel.

        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _Geom.Geom_Curve_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Curve self)"""
        return _Geom.Geom_Curve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Curve self) -> Handle_Geom_Curve"""
        return _Geom.Geom_Curve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Curve.Reverse = new_instancemethod(_Geom.Geom_Curve_Reverse,None,Geom_Curve)
Geom_Curve.ReversedParameter = new_instancemethod(_Geom.Geom_Curve_ReversedParameter,None,Geom_Curve)
Geom_Curve.TransformedParameter = new_instancemethod(_Geom.Geom_Curve_TransformedParameter,None,Geom_Curve)
Geom_Curve.ParametricTransformation = new_instancemethod(_Geom.Geom_Curve_ParametricTransformation,None,Geom_Curve)
Geom_Curve.Reversed = new_instancemethod(_Geom.Geom_Curve_Reversed,None,Geom_Curve)
Geom_Curve.FirstParameter = new_instancemethod(_Geom.Geom_Curve_FirstParameter,None,Geom_Curve)
Geom_Curve.LastParameter = new_instancemethod(_Geom.Geom_Curve_LastParameter,None,Geom_Curve)
Geom_Curve.IsClosed = new_instancemethod(_Geom.Geom_Curve_IsClosed,None,Geom_Curve)
Geom_Curve.IsPeriodic = new_instancemethod(_Geom.Geom_Curve_IsPeriodic,None,Geom_Curve)
Geom_Curve.Period = new_instancemethod(_Geom.Geom_Curve_Period,None,Geom_Curve)
Geom_Curve.Continuity = new_instancemethod(_Geom.Geom_Curve_Continuity,None,Geom_Curve)
Geom_Curve.IsCN = new_instancemethod(_Geom.Geom_Curve_IsCN,None,Geom_Curve)
Geom_Curve.D0 = new_instancemethod(_Geom.Geom_Curve_D0,None,Geom_Curve)
Geom_Curve.D1 = new_instancemethod(_Geom.Geom_Curve_D1,None,Geom_Curve)
Geom_Curve.D2 = new_instancemethod(_Geom.Geom_Curve_D2,None,Geom_Curve)
Geom_Curve.D3 = new_instancemethod(_Geom.Geom_Curve_D3,None,Geom_Curve)
Geom_Curve.DN = new_instancemethod(_Geom.Geom_Curve_DN,None,Geom_Curve)
Geom_Curve.Value = new_instancemethod(_Geom.Geom_Curve_Value,None,Geom_Curve)
Geom_Curve._kill_pointed = new_instancemethod(_Geom.Geom_Curve__kill_pointed,None,Geom_Curve)
Geom_Curve.GetHandle = new_instancemethod(_Geom.Geom_Curve_GetHandle,None,Geom_Curve)
Geom_Curve_swigregister = _Geom.Geom_Curve_swigregister
Geom_Curve_swigregister(Geom_Curve)

class Handle_Geom_Curve(Handle_Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Curve_swiginit(self,_Geom.new_Handle_Geom_Curve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Curve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Curve.Nullify = new_instancemethod(_Geom.Handle_Geom_Curve_Nullify,None,Handle_Geom_Curve)
Handle_Geom_Curve.IsNull = new_instancemethod(_Geom.Handle_Geom_Curve_IsNull,None,Handle_Geom_Curve)
Handle_Geom_Curve.GetObject = new_instancemethod(_Geom.Handle_Geom_Curve_GetObject,None,Handle_Geom_Curve)
Handle_Geom_Curve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Curve__kill_pointed,None,Handle_Geom_Curve)
Handle_Geom_Curve_swigregister = _Geom.Handle_Geom_Curve_swigregister
Handle_Geom_Curve_swigregister(Handle_Geom_Curve)

def Handle_Geom_Curve_DownCast(*args):
  return _Geom.Handle_Geom_Curve_DownCast(*args)
Handle_Geom_Curve_DownCast = _Geom.Handle_Geom_Curve_DownCast

class Geom_Point(Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Coord(self, *args):
        """
        * returns the Coordinates of <self>.

        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: void

        """
        return _Geom.Geom_Point_Coord(self, *args)

    def Pnt(self, *args):
        """
        * returns a non transient copy of <self>

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Point_Pnt(self, *args)

    def X(self, *args):
        """
        * returns the X coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Point_X(self, *args)

    def Y(self, *args):
        """
        * returns the Y coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Point_Y(self, *args)

    def Z(self, *args):
        """
        * returns the Z coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Point_Z(self, *args)

    def Distance(self, *args):
        """
        * Computes the distance between <self> and <Other>.

        :param Other:
        :type Other: Handle_Geom_Point &
        :rtype: float

        """
        return _Geom.Geom_Point_Distance(self, *args)

    def SquareDistance(self, *args):
        """
        * Computes the square distance between <self> and <Other>.

        :param Other:
        :type Other: Handle_Geom_Point &
        :rtype: float

        """
        return _Geom.Geom_Point_SquareDistance(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Point self)"""
        return _Geom.Geom_Point__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Point self) -> Handle_Geom_Point"""
        return _Geom.Geom_Point_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Point.Coord = new_instancemethod(_Geom.Geom_Point_Coord,None,Geom_Point)
Geom_Point.Pnt = new_instancemethod(_Geom.Geom_Point_Pnt,None,Geom_Point)
Geom_Point.X = new_instancemethod(_Geom.Geom_Point_X,None,Geom_Point)
Geom_Point.Y = new_instancemethod(_Geom.Geom_Point_Y,None,Geom_Point)
Geom_Point.Z = new_instancemethod(_Geom.Geom_Point_Z,None,Geom_Point)
Geom_Point.Distance = new_instancemethod(_Geom.Geom_Point_Distance,None,Geom_Point)
Geom_Point.SquareDistance = new_instancemethod(_Geom.Geom_Point_SquareDistance,None,Geom_Point)
Geom_Point._kill_pointed = new_instancemethod(_Geom.Geom_Point__kill_pointed,None,Geom_Point)
Geom_Point.GetHandle = new_instancemethod(_Geom.Geom_Point_GetHandle,None,Geom_Point)
Geom_Point_swigregister = _Geom.Geom_Point_swigregister
Geom_Point_swigregister(Geom_Point)

class Handle_Geom_Point(Handle_Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Point_swiginit(self,_Geom.new_Handle_Geom_Point(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Point_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Point.Nullify = new_instancemethod(_Geom.Handle_Geom_Point_Nullify,None,Handle_Geom_Point)
Handle_Geom_Point.IsNull = new_instancemethod(_Geom.Handle_Geom_Point_IsNull,None,Handle_Geom_Point)
Handle_Geom_Point.GetObject = new_instancemethod(_Geom.Handle_Geom_Point_GetObject,None,Handle_Geom_Point)
Handle_Geom_Point._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Point__kill_pointed,None,Handle_Geom_Point)
Handle_Geom_Point_swigregister = _Geom.Handle_Geom_Point_swigregister
Handle_Geom_Point_swigregister(Handle_Geom_Point)

def Handle_Geom_Point_DownCast(*args):
  return _Geom.Handle_Geom_Point_DownCast(*args)
Handle_Geom_Point_DownCast = _Geom.Handle_Geom_Point_DownCast

class Geom_Surface(Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def UReverse(self, *args):
        """
        * Reverses the U direction of parametrization of <self>. The bounds of the surface are not modified.

        :rtype: void

        """
        return _Geom.Geom_Surface_UReverse(self, *args)

    def UReversed(self, *args):
        """
        * Reverses the U direction of parametrization of <self>. The bounds of the surface are not modified. A copy of <self> is returned.

        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_Surface_UReversed(self, *args)

    def UReversedParameter(self, *args):
        """
        * Returns the parameter on the Ureversed surface for the point of parameter U on <self>.  me->UReversed()->Value(me->UReversedParameter(U),V)  is the same point as  me->Value(U,V)

        :param U:
        :type U: float
        :rtype: float

        """
        return _Geom.Geom_Surface_UReversedParameter(self, *args)

    def VReverse(self, *args):
        """
        * Reverses the V direction of parametrization of <self>. The bounds of the surface are not modified.

        :rtype: void

        """
        return _Geom.Geom_Surface_VReverse(self, *args)

    def VReversed(self, *args):
        """
        * Reverses the V direction of parametrization of <self>. The bounds of the surface are not modified. A copy of <self> is returned.

        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_Surface_VReversed(self, *args)

    def VReversedParameter(self, *args):
        """
        * Returns the parameter on the Vreversed surface for the point of parameter V on <self>.  me->VReversed()->Value(U,me->VReversedParameter(V))  is the same point as  me->Value(U,V)

        :param V:
        :type V: float
        :rtype: float

        """
        return _Geom.Geom_Surface_VReversedParameter(self, *args)

    def TransformParameters(self, *args):
        """
        * Computes the parameters on the transformed surface for the transform of the point of parameters U,V on <self>.  me->Transformed(T)->Value(U',V')  is the same point as  me->Value(U,V).Transformed(T)  Where U',V' are the new values of U,V after calling  me->TranformParameters(U,V,T)  This methods does not change <U> and <V>  It can be redefined. For example on the Plane, Cylinder, Cone, Revolved and Extruded surfaces.

        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :param T:
        :type T: gp_Trsf
        :rtype: void

        """
        return _Geom.Geom_Surface_TransformParameters(self, *args)

    def ParametricTransformation(self, *args):
        """
        * Returns a 2d transformation used to find the new parameters of a point on the transformed surface.  me->Transformed(T)->Value(U',V')  is the same point as  me->Value(U,V).Transformed(T)  Where U',V' are obtained by transforming U,V with th 2d transformation returned by  me->ParametricTransformation(T)  This methods returns an identity transformation  It can be redefined. For example on the Plane, Cylinder, Cone, Revolved and Extruded surfaces.

        :param T:
        :type T: gp_Trsf
        :rtype: gp_GTrsf2d

        """
        return _Geom.Geom_Surface_ParametricTransformation(self, *args)

    def Bounds(self, *args):
        """
        * Returns the parametric bounds U1, U2, V1 and V2 of this surface. If the surface is infinite, this function can return a value equal to Precision::Infinite: instead of Standard_Real::LastReal.

        :param U1:
        :type U1: float &
        :param U2:
        :type U2: float &
        :param V1:
        :type V1: float &
        :param V2:
        :type V2: float &
        :rtype: void

        """
        return _Geom.Geom_Surface_Bounds(self, *args)

    def IsUClosed(self, *args):
        """
        * Checks whether this surface is closed in the u parametric direction. Returns true if, in the u parametric direction: taking uFirst and uLast as the parametric bounds in the u parametric direction, for each parameter v, the distance between the points P(uFirst, v) and P(uLast, v) is less than or equal to gp::Resolution().

        :rtype: bool

        """
        return _Geom.Geom_Surface_IsUClosed(self, *args)

    def IsVClosed(self, *args):
        """
        * Checks whether this surface is closed in the u parametric direction. Returns true if, in the v parametric direction: taking vFirst and vLast as the parametric bounds in the v parametric direction, for each parameter u, the distance between the points P(u, vFirst) and P(u, vLast) is less than or equal to gp::Resolution().

        :rtype: bool

        """
        return _Geom.Geom_Surface_IsVClosed(self, *args)

    def IsUPeriodic(self, *args):
        """
        * Checks if this surface is periodic in the u parametric direction. Returns true if: - this surface is closed in the u parametric direction, and - there is a constant T such that the distance between the points P (u, v) and P (u + T, v) (or the points P (u, v) and P (u, v + T)) is less than or equal to gp::Resolution(). Note: T is the parametric period in the u parametric direction.

        :rtype: bool

        """
        return _Geom.Geom_Surface_IsUPeriodic(self, *args)

    def UPeriod(self, *args):
        """
        * Returns the period of this surface in the u parametric direction. raises if the surface is not uperiodic.

        :rtype: float

        """
        return _Geom.Geom_Surface_UPeriod(self, *args)

    def IsVPeriodic(self, *args):
        """
        * Checks if this surface is periodic in the v parametric direction. Returns true if: - this surface is closed in the v parametric direction, and - there is a constant T such that the distance between the points P (u, v) and P (u + T, v) (or the points P (u, v) and P (u, v + T)) is less than or equal to gp::Resolution(). Note: T is the parametric period in the v parametric direction.

        :rtype: bool

        """
        return _Geom.Geom_Surface_IsVPeriodic(self, *args)

    def VPeriod(self, *args):
        """
        * Returns the period of this surface in the v parametric direction. raises if the surface is not vperiodic.

        :rtype: float

        """
        return _Geom.Geom_Surface_VPeriod(self, *args)

    def UIso(self, *args):
        """
        * Computes the U isoparametric curve.

        :param U:
        :type U: float
        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_Surface_UIso(self, *args)

    def VIso(self, *args):
        """
        * Computes the V isoparametric curve.

        :param V:
        :type V: float
        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_Surface_VIso(self, *args)

    def Continuity(self, *args):
        """
        * Returns the Global Continuity of the surface in direction U and V : C0 : only geometric continuity, C1 : continuity of the first derivative all along the surface, C2 : continuity of the second derivative all along the surface, C3 : continuity of the third derivative all along the surface, G1 : tangency continuity all along the surface, G2 : curvature continuity all along the surface, CN : the order of continuity is infinite. Example : If the surface is C1 in the V parametric direction and C2 in the U parametric direction Shape = C1.

        :rtype: GeomAbs_Shape

        """
        return _Geom.Geom_Surface_Continuity(self, *args)

    def IsCNu(self, *args):
        """
        * Returns the order of continuity of the surface in the U parametric direction. Raised if N < 0.

        :param N:
        :type N: int
        :rtype: bool

        """
        return _Geom.Geom_Surface_IsCNu(self, *args)

    def IsCNv(self, *args):
        """
        * Returns the order of continuity of the surface in the V parametric direction. Raised if N < 0.

        :param N:
        :type N: int
        :rtype: bool

        """
        return _Geom.Geom_Surface_IsCNv(self, *args)

    def D0(self, *args):
        """
        * Computes the point of parameter U,V on the surface. Raised only for an 'OffsetSurface' if it is not possible to compute the current point.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :rtype: void

        """
        return _Geom.Geom_Surface_D0(self, *args)

    def D1(self, *args):
        """
        * Computes the point P and the first derivatives in the directions U and V at this point. Raised if the continuity of the surface is not C1.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Surface_D1(self, *args)

    def D2(self, *args):
        """
        * Computes the point P, the first and the second derivatives in the directions U and V at this point. Raised if the continuity of the surface is not C2.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Surface_D2(self, *args)

    def D3(self, *args):
        """
        * Computes the point P, the first,the second and the third derivatives in the directions U and V at this point. Raised if the continuity of the surface is not C2.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: void

        """
        return _Geom.Geom_Surface_D3(self, *args)

    def DN(self, *args):
        """
        * //!---Purpose ; Computes the derivative of order Nu in the direction U and Nv in the direction V at the point P(U, V). Raised if the continuity of the surface is not CNu in the U direction or not CNv in the V direction. Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_Surface_DN(self, *args)

    def Value(self, *args):
        """
        * Computes the point of parameter U on the surface. It is implemented with D0 Raised only for an 'OffsetSurface' if it is not possible to compute the current point.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :rtype: gp_Pnt

        """
        return _Geom.Geom_Surface_Value(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Surface self)"""
        return _Geom.Geom_Surface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Surface self) -> Handle_Geom_Surface"""
        return _Geom.Geom_Surface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Surface.UReverse = new_instancemethod(_Geom.Geom_Surface_UReverse,None,Geom_Surface)
Geom_Surface.UReversed = new_instancemethod(_Geom.Geom_Surface_UReversed,None,Geom_Surface)
Geom_Surface.UReversedParameter = new_instancemethod(_Geom.Geom_Surface_UReversedParameter,None,Geom_Surface)
Geom_Surface.VReverse = new_instancemethod(_Geom.Geom_Surface_VReverse,None,Geom_Surface)
Geom_Surface.VReversed = new_instancemethod(_Geom.Geom_Surface_VReversed,None,Geom_Surface)
Geom_Surface.VReversedParameter = new_instancemethod(_Geom.Geom_Surface_VReversedParameter,None,Geom_Surface)
Geom_Surface.TransformParameters = new_instancemethod(_Geom.Geom_Surface_TransformParameters,None,Geom_Surface)
Geom_Surface.ParametricTransformation = new_instancemethod(_Geom.Geom_Surface_ParametricTransformation,None,Geom_Surface)
Geom_Surface.Bounds = new_instancemethod(_Geom.Geom_Surface_Bounds,None,Geom_Surface)
Geom_Surface.IsUClosed = new_instancemethod(_Geom.Geom_Surface_IsUClosed,None,Geom_Surface)
Geom_Surface.IsVClosed = new_instancemethod(_Geom.Geom_Surface_IsVClosed,None,Geom_Surface)
Geom_Surface.IsUPeriodic = new_instancemethod(_Geom.Geom_Surface_IsUPeriodic,None,Geom_Surface)
Geom_Surface.UPeriod = new_instancemethod(_Geom.Geom_Surface_UPeriod,None,Geom_Surface)
Geom_Surface.IsVPeriodic = new_instancemethod(_Geom.Geom_Surface_IsVPeriodic,None,Geom_Surface)
Geom_Surface.VPeriod = new_instancemethod(_Geom.Geom_Surface_VPeriod,None,Geom_Surface)
Geom_Surface.UIso = new_instancemethod(_Geom.Geom_Surface_UIso,None,Geom_Surface)
Geom_Surface.VIso = new_instancemethod(_Geom.Geom_Surface_VIso,None,Geom_Surface)
Geom_Surface.Continuity = new_instancemethod(_Geom.Geom_Surface_Continuity,None,Geom_Surface)
Geom_Surface.IsCNu = new_instancemethod(_Geom.Geom_Surface_IsCNu,None,Geom_Surface)
Geom_Surface.IsCNv = new_instancemethod(_Geom.Geom_Surface_IsCNv,None,Geom_Surface)
Geom_Surface.D0 = new_instancemethod(_Geom.Geom_Surface_D0,None,Geom_Surface)
Geom_Surface.D1 = new_instancemethod(_Geom.Geom_Surface_D1,None,Geom_Surface)
Geom_Surface.D2 = new_instancemethod(_Geom.Geom_Surface_D2,None,Geom_Surface)
Geom_Surface.D3 = new_instancemethod(_Geom.Geom_Surface_D3,None,Geom_Surface)
Geom_Surface.DN = new_instancemethod(_Geom.Geom_Surface_DN,None,Geom_Surface)
Geom_Surface.Value = new_instancemethod(_Geom.Geom_Surface_Value,None,Geom_Surface)
Geom_Surface._kill_pointed = new_instancemethod(_Geom.Geom_Surface__kill_pointed,None,Geom_Surface)
Geom_Surface.GetHandle = new_instancemethod(_Geom.Geom_Surface_GetHandle,None,Geom_Surface)
Geom_Surface_swigregister = _Geom.Geom_Surface_swigregister
Geom_Surface_swigregister(Geom_Surface)

class Handle_Geom_Surface(Handle_Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Surface_swiginit(self,_Geom.new_Handle_Geom_Surface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Surface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Surface.Nullify = new_instancemethod(_Geom.Handle_Geom_Surface_Nullify,None,Handle_Geom_Surface)
Handle_Geom_Surface.IsNull = new_instancemethod(_Geom.Handle_Geom_Surface_IsNull,None,Handle_Geom_Surface)
Handle_Geom_Surface.GetObject = new_instancemethod(_Geom.Handle_Geom_Surface_GetObject,None,Handle_Geom_Surface)
Handle_Geom_Surface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Surface__kill_pointed,None,Handle_Geom_Surface)
Handle_Geom_Surface_swigregister = _Geom.Handle_Geom_Surface_swigregister
Handle_Geom_Surface_swigregister(Handle_Geom_Surface)

def Handle_Geom_Surface_DownCast(*args):
  return _Geom.Handle_Geom_Surface_DownCast(*args)
Handle_Geom_Surface_DownCast = _Geom.Handle_Geom_Surface_DownCast

class Geom_Vector(Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Reverse(self, *args):
        """
        * Reverses the vector <self>.

        :rtype: None

        """
        return _Geom.Geom_Vector_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Returns a copy of <self> reversed.

        :rtype: Handle_Geom_Vector

        """
        return _Geom.Geom_Vector_Reversed(self, *args)

    def Angle(self, *args):
        """
        * Computes the angular value, in radians, between this vector and vector Other. The result is a value between 0 and Pi. Exceptions gp_VectorWithNullMagnitude if: - the magnitude of this vector is less than or equal to gp::Resolution(), or - the magnitude of vector Other is less than or equal to gp::Resolution().

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: float

        """
        return _Geom.Geom_Vector_Angle(self, *args)

    def AngleWithRef(self, *args):
        """
        * Computes the angular value, in radians, between this vector and vector Other. The result is a value between -Pi and Pi. The vector VRef defines the positive sense of rotation: the angular value is positive if the cross product this ^ Other has the same orientation as VRef (in relation to the plane defined by this vector and vector Other). Otherwise, it is negative. Exceptions Standard_DomainError if this vector, vector Other and vector VRef are coplanar, except if this vector and vector Other are parallel. gp_VectorWithNullMagnitude if the magnitude of this vector, vector Other or vector VRef is less than or equal to gp::Resolution().

        :param Other:
        :type Other: Handle_Geom_Vector &
        :param VRef:
        :type VRef: Handle_Geom_Vector &
        :rtype: float

        """
        return _Geom.Geom_Vector_AngleWithRef(self, *args)

    def Coord(self, *args):
        """
        * Returns the coordinates X, Y and Z of this vector.

        :param X:
        :type X: float &
        :param Y:
        :type Y: float &
        :param Z:
        :type Z: float &
        :rtype: None

        """
        return _Geom.Geom_Vector_Coord(self, *args)

    def Magnitude(self, *args):
        """
        * Returns the Magnitude of <self>.

        :rtype: float

        """
        return _Geom.Geom_Vector_Magnitude(self, *args)

    def SquareMagnitude(self, *args):
        """
        * Returns the square magnitude of <self>.

        :rtype: float

        """
        return _Geom.Geom_Vector_SquareMagnitude(self, *args)

    def X(self, *args):
        """
        * Returns the X coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Vector_X(self, *args)

    def Y(self, *args):
        """
        * Returns the Y coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Vector_Y(self, *args)

    def Z(self, *args):
        """
        * Returns the Z coordinate of <self>.

        :rtype: float

        """
        return _Geom.Geom_Vector_Z(self, *args)

    def Cross(self, *args):
        """
        * Computes the cross product between <self> and <Other>. Raised if <self> is a 'Direction' and if <self> and <Other> are parallel because it is not possible to build a 'Direction' with null length.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: void

        """
        return _Geom.Geom_Vector_Cross(self, *args)

    def Crossed(self, *args):
        """
        * Computes the cross product between <self> and <Other>. A new direction is returned. Raised if <self> is a 'Direction' and if the two vectors are parallel because it is not possible to create a 'Direction' with null length.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: Handle_Geom_Vector

        """
        return _Geom.Geom_Vector_Crossed(self, *args)

    def CrossCross(self, *args):
        """
        * Computes the triple vector product <self> ^(V1 ^ V2). Raised if <self> is a 'Direction' and if V1 and V2 are parallel or <self> and (V1 ^ V2) are parallel

        :param V1:
        :type V1: Handle_Geom_Vector &
        :param V2:
        :type V2: Handle_Geom_Vector &
        :rtype: void

        """
        return _Geom.Geom_Vector_CrossCross(self, *args)

    def CrossCrossed(self, *args):
        """
        * Computes the triple vector product <self> ^(V1 ^ V2). Raised if <self> is a direction and if V1 and V2 are parallel or <self> and (V1 ^ V2) are parallel

        :param V1:
        :type V1: Handle_Geom_Vector &
        :param V2:
        :type V2: Handle_Geom_Vector &
        :rtype: Handle_Geom_Vector

        """
        return _Geom.Geom_Vector_CrossCrossed(self, *args)

    def Dot(self, *args):
        """
        * Computes the scalar product of this vector and vector Other.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: float

        """
        return _Geom.Geom_Vector_Dot(self, *args)

    def DotCross(self, *args):
        """
        * Computes the triple scalar product. Returns me . (V1 ^ V2)

        :param V1:
        :type V1: Handle_Geom_Vector &
        :param V2:
        :type V2: Handle_Geom_Vector &
        :rtype: float

        """
        return _Geom.Geom_Vector_DotCross(self, *args)

    def Vec(self, *args):
        """
        * Converts this vector into a gp_Vec vector.

        :rtype: gp_Vec

        """
        return _Geom.Geom_Vector_Vec(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Vector self)"""
        return _Geom.Geom_Vector__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Vector self) -> Handle_Geom_Vector"""
        return _Geom.Geom_Vector_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Vector.Reverse = new_instancemethod(_Geom.Geom_Vector_Reverse,None,Geom_Vector)
Geom_Vector.Reversed = new_instancemethod(_Geom.Geom_Vector_Reversed,None,Geom_Vector)
Geom_Vector.Angle = new_instancemethod(_Geom.Geom_Vector_Angle,None,Geom_Vector)
Geom_Vector.AngleWithRef = new_instancemethod(_Geom.Geom_Vector_AngleWithRef,None,Geom_Vector)
Geom_Vector.Coord = new_instancemethod(_Geom.Geom_Vector_Coord,None,Geom_Vector)
Geom_Vector.Magnitude = new_instancemethod(_Geom.Geom_Vector_Magnitude,None,Geom_Vector)
Geom_Vector.SquareMagnitude = new_instancemethod(_Geom.Geom_Vector_SquareMagnitude,None,Geom_Vector)
Geom_Vector.X = new_instancemethod(_Geom.Geom_Vector_X,None,Geom_Vector)
Geom_Vector.Y = new_instancemethod(_Geom.Geom_Vector_Y,None,Geom_Vector)
Geom_Vector.Z = new_instancemethod(_Geom.Geom_Vector_Z,None,Geom_Vector)
Geom_Vector.Cross = new_instancemethod(_Geom.Geom_Vector_Cross,None,Geom_Vector)
Geom_Vector.Crossed = new_instancemethod(_Geom.Geom_Vector_Crossed,None,Geom_Vector)
Geom_Vector.CrossCross = new_instancemethod(_Geom.Geom_Vector_CrossCross,None,Geom_Vector)
Geom_Vector.CrossCrossed = new_instancemethod(_Geom.Geom_Vector_CrossCrossed,None,Geom_Vector)
Geom_Vector.Dot = new_instancemethod(_Geom.Geom_Vector_Dot,None,Geom_Vector)
Geom_Vector.DotCross = new_instancemethod(_Geom.Geom_Vector_DotCross,None,Geom_Vector)
Geom_Vector.Vec = new_instancemethod(_Geom.Geom_Vector_Vec,None,Geom_Vector)
Geom_Vector._kill_pointed = new_instancemethod(_Geom.Geom_Vector__kill_pointed,None,Geom_Vector)
Geom_Vector.GetHandle = new_instancemethod(_Geom.Geom_Vector_GetHandle,None,Geom_Vector)
Geom_Vector_swigregister = _Geom.Geom_Vector_swigregister
Geom_Vector_swigregister(Geom_Vector)

class Handle_Geom_Vector(Handle_Geom_Geometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Vector_swiginit(self,_Geom.new_Handle_Geom_Vector(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Vector_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Vector.Nullify = new_instancemethod(_Geom.Handle_Geom_Vector_Nullify,None,Handle_Geom_Vector)
Handle_Geom_Vector.IsNull = new_instancemethod(_Geom.Handle_Geom_Vector_IsNull,None,Handle_Geom_Vector)
Handle_Geom_Vector.GetObject = new_instancemethod(_Geom.Handle_Geom_Vector_GetObject,None,Handle_Geom_Vector)
Handle_Geom_Vector._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Vector__kill_pointed,None,Handle_Geom_Vector)
Handle_Geom_Vector_swigregister = _Geom.Handle_Geom_Vector_swigregister
Handle_Geom_Vector_swigregister(Handle_Geom_Vector)

def Handle_Geom_Vector_DownCast(*args):
  return _Geom.Handle_Geom_Vector_DownCast(*args)
Handle_Geom_Vector_DownCast = _Geom.Handle_Geom_Vector_DownCast

class Geom_Axis1Placement(Geom_AxisPlacement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns a transient copy of A1.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * P is the origin of the axis placement and V is the direction of the axis placement.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Geom.Geom_Axis1Placement_swiginit(self,_Geom.new_Geom_Axis1Placement(*args))
    def Ax1(self, *args):
        """
        * Returns a non transient copy of <self>.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Axis1Placement_Ax1(self, *args)

    def Reverse(self, *args):
        """
        * Reverses the direction of the axis placement.

        :rtype: None

        """
        return _Geom.Geom_Axis1Placement_Reverse(self, *args)

    def Reversed(self, *args):
        """
        * Returns a copy of <self> reversed.

        :rtype: Handle_Geom_Axis1Placement

        """
        return _Geom.Geom_Axis1Placement_Reversed(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Axis1Placement self)"""
        return _Geom.Geom_Axis1Placement__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Axis1Placement self) -> Handle_Geom_Axis1Placement"""
        return _Geom.Geom_Axis1Placement_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Axis1Placement.Ax1 = new_instancemethod(_Geom.Geom_Axis1Placement_Ax1,None,Geom_Axis1Placement)
Geom_Axis1Placement.Reverse = new_instancemethod(_Geom.Geom_Axis1Placement_Reverse,None,Geom_Axis1Placement)
Geom_Axis1Placement.Reversed = new_instancemethod(_Geom.Geom_Axis1Placement_Reversed,None,Geom_Axis1Placement)
Geom_Axis1Placement._kill_pointed = new_instancemethod(_Geom.Geom_Axis1Placement__kill_pointed,None,Geom_Axis1Placement)
Geom_Axis1Placement.GetHandle = new_instancemethod(_Geom.Geom_Axis1Placement_GetHandle,None,Geom_Axis1Placement)
Geom_Axis1Placement_swigregister = _Geom.Geom_Axis1Placement_swigregister
Geom_Axis1Placement_swigregister(Geom_Axis1Placement)

class Handle_Geom_Axis1Placement(Handle_Geom_AxisPlacement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Axis1Placement_swiginit(self,_Geom.new_Handle_Geom_Axis1Placement(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Axis1Placement_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Axis1Placement.Nullify = new_instancemethod(_Geom.Handle_Geom_Axis1Placement_Nullify,None,Handle_Geom_Axis1Placement)
Handle_Geom_Axis1Placement.IsNull = new_instancemethod(_Geom.Handle_Geom_Axis1Placement_IsNull,None,Handle_Geom_Axis1Placement)
Handle_Geom_Axis1Placement.GetObject = new_instancemethod(_Geom.Handle_Geom_Axis1Placement_GetObject,None,Handle_Geom_Axis1Placement)
Handle_Geom_Axis1Placement._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Axis1Placement__kill_pointed,None,Handle_Geom_Axis1Placement)
Handle_Geom_Axis1Placement_swigregister = _Geom.Handle_Geom_Axis1Placement_swigregister
Handle_Geom_Axis1Placement_swigregister(Handle_Geom_Axis1Placement)

def Handle_Geom_Axis1Placement_DownCast(*args):
  return _Geom.Handle_Geom_Axis1Placement_DownCast(*args)
Handle_Geom_Axis1Placement_DownCast = _Geom.Handle_Geom_Axis1Placement_DownCast

class Geom_Axis2Placement(Geom_AxisPlacement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns a transient copy of A2.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        * P is the origin of the axis placement, N is the main direction of the axis placement and Vx is the 'XDirection'. If the two directions N and Vx are not orthogonal the 'XDirection' is computed as follow : XDirection = N ^ (Vx ^ N). Raised if N and Vx are parallel.

        :param P:
        :type P: gp_Pnt
        :param N:
        :type N: gp_Dir
        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        """
        _Geom.Geom_Axis2Placement_swiginit(self,_Geom.new_Geom_Axis2Placement(*args))
    def SetAx2(self, *args):
        """
        * Assigns the origin and the three unit vectors of A2 to this coordinate system.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _Geom.Geom_Axis2Placement_SetAx2(self, *args)

    def SetXDirection(self, *args):
        """
        * Changes the 'XDirection' of the axis placement, Vx is the new 'XDirection'. If Vx is not normal to the main direction then 'XDirection' is computed as follow : XDirection = Direction ^ ( Vx ^ Direction). The main direction is not modified. Raised if Vx and 'Direction' are parallel.

        :param Vx:
        :type Vx: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_Axis2Placement_SetXDirection(self, *args)

    def SetYDirection(self, *args):
        """
        * Changes the 'YDirection' of the axis placement, Vy is the new 'YDirection'. If Vy is not normal to the main direction then 'YDirection' is computed as follow : YDirection = Direction ^ ( Vy ^ Direction). The main direction is not modified. The 'XDirection' is modified. Raised if Vy and the main direction are parallel.

        :param Vy:
        :type Vy: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_Axis2Placement_SetYDirection(self, *args)

    def Ax2(self, *args):
        """
        * Returns a non transient copy of <self>.

        :rtype: gp_Ax2

        """
        return _Geom.Geom_Axis2Placement_Ax2(self, *args)

    def XDirection(self, *args):
        """
        * Returns the 'XDirection'. This is a unit vector.

        :rtype: gp_Dir

        """
        return _Geom.Geom_Axis2Placement_XDirection(self, *args)

    def YDirection(self, *args):
        """
        * Returns the 'YDirection'. This is a unit vector.

        :rtype: gp_Dir

        """
        return _Geom.Geom_Axis2Placement_YDirection(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Axis2Placement self)"""
        return _Geom.Geom_Axis2Placement__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Axis2Placement self) -> Handle_Geom_Axis2Placement"""
        return _Geom.Geom_Axis2Placement_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Axis2Placement.SetAx2 = new_instancemethod(_Geom.Geom_Axis2Placement_SetAx2,None,Geom_Axis2Placement)
Geom_Axis2Placement.SetXDirection = new_instancemethod(_Geom.Geom_Axis2Placement_SetXDirection,None,Geom_Axis2Placement)
Geom_Axis2Placement.SetYDirection = new_instancemethod(_Geom.Geom_Axis2Placement_SetYDirection,None,Geom_Axis2Placement)
Geom_Axis2Placement.Ax2 = new_instancemethod(_Geom.Geom_Axis2Placement_Ax2,None,Geom_Axis2Placement)
Geom_Axis2Placement.XDirection = new_instancemethod(_Geom.Geom_Axis2Placement_XDirection,None,Geom_Axis2Placement)
Geom_Axis2Placement.YDirection = new_instancemethod(_Geom.Geom_Axis2Placement_YDirection,None,Geom_Axis2Placement)
Geom_Axis2Placement._kill_pointed = new_instancemethod(_Geom.Geom_Axis2Placement__kill_pointed,None,Geom_Axis2Placement)
Geom_Axis2Placement.GetHandle = new_instancemethod(_Geom.Geom_Axis2Placement_GetHandle,None,Geom_Axis2Placement)
Geom_Axis2Placement_swigregister = _Geom.Geom_Axis2Placement_swigregister
Geom_Axis2Placement_swigregister(Geom_Axis2Placement)

class Handle_Geom_Axis2Placement(Handle_Geom_AxisPlacement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Axis2Placement_swiginit(self,_Geom.new_Handle_Geom_Axis2Placement(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Axis2Placement_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Axis2Placement.Nullify = new_instancemethod(_Geom.Handle_Geom_Axis2Placement_Nullify,None,Handle_Geom_Axis2Placement)
Handle_Geom_Axis2Placement.IsNull = new_instancemethod(_Geom.Handle_Geom_Axis2Placement_IsNull,None,Handle_Geom_Axis2Placement)
Handle_Geom_Axis2Placement.GetObject = new_instancemethod(_Geom.Handle_Geom_Axis2Placement_GetObject,None,Handle_Geom_Axis2Placement)
Handle_Geom_Axis2Placement._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Axis2Placement__kill_pointed,None,Handle_Geom_Axis2Placement)
Handle_Geom_Axis2Placement_swigregister = _Geom.Handle_Geom_Axis2Placement_swigregister
Handle_Geom_Axis2Placement_swigregister(Handle_Geom_Axis2Placement)

def Handle_Geom_Axis2Placement_DownCast(*args):
  return _Geom.Handle_Geom_Axis2Placement_DownCast(*args)
Handle_Geom_Axis2Placement_DownCast = _Geom.Handle_Geom_Axis2Placement_DownCast

class Geom_BoundedCurve(Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def EndPoint(self, *args):
        """
        * Returns the end point of the curve.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_BoundedCurve_EndPoint(self, *args)

    def StartPoint(self, *args):
        """
        * Returns the start point of the curve.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_BoundedCurve_StartPoint(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_BoundedCurve self)"""
        return _Geom.Geom_BoundedCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BoundedCurve self) -> Handle_Geom_BoundedCurve"""
        return _Geom.Geom_BoundedCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BoundedCurve.EndPoint = new_instancemethod(_Geom.Geom_BoundedCurve_EndPoint,None,Geom_BoundedCurve)
Geom_BoundedCurve.StartPoint = new_instancemethod(_Geom.Geom_BoundedCurve_StartPoint,None,Geom_BoundedCurve)
Geom_BoundedCurve._kill_pointed = new_instancemethod(_Geom.Geom_BoundedCurve__kill_pointed,None,Geom_BoundedCurve)
Geom_BoundedCurve.GetHandle = new_instancemethod(_Geom.Geom_BoundedCurve_GetHandle,None,Geom_BoundedCurve)
Geom_BoundedCurve_swigregister = _Geom.Geom_BoundedCurve_swigregister
Geom_BoundedCurve_swigregister(Geom_BoundedCurve)

class Handle_Geom_BoundedCurve(Handle_Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BoundedCurve_swiginit(self,_Geom.new_Handle_Geom_BoundedCurve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BoundedCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BoundedCurve.Nullify = new_instancemethod(_Geom.Handle_Geom_BoundedCurve_Nullify,None,Handle_Geom_BoundedCurve)
Handle_Geom_BoundedCurve.IsNull = new_instancemethod(_Geom.Handle_Geom_BoundedCurve_IsNull,None,Handle_Geom_BoundedCurve)
Handle_Geom_BoundedCurve.GetObject = new_instancemethod(_Geom.Handle_Geom_BoundedCurve_GetObject,None,Handle_Geom_BoundedCurve)
Handle_Geom_BoundedCurve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BoundedCurve__kill_pointed,None,Handle_Geom_BoundedCurve)
Handle_Geom_BoundedCurve_swigregister = _Geom.Handle_Geom_BoundedCurve_swigregister
Handle_Geom_BoundedCurve_swigregister(Handle_Geom_BoundedCurve)

def Handle_Geom_BoundedCurve_DownCast(*args):
  return _Geom.Handle_Geom_BoundedCurve_DownCast(*args)
Handle_Geom_BoundedCurve_DownCast = _Geom.Handle_Geom_BoundedCurve_DownCast

class Geom_BoundedSurface(Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _kill_pointed(self):
        """_kill_pointed(Geom_BoundedSurface self)"""
        return _Geom.Geom_BoundedSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BoundedSurface self) -> Handle_Geom_BoundedSurface"""
        return _Geom.Geom_BoundedSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BoundedSurface._kill_pointed = new_instancemethod(_Geom.Geom_BoundedSurface__kill_pointed,None,Geom_BoundedSurface)
Geom_BoundedSurface.GetHandle = new_instancemethod(_Geom.Geom_BoundedSurface_GetHandle,None,Geom_BoundedSurface)
Geom_BoundedSurface_swigregister = _Geom.Geom_BoundedSurface_swigregister
Geom_BoundedSurface_swigregister(Geom_BoundedSurface)

class Handle_Geom_BoundedSurface(Handle_Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BoundedSurface_swiginit(self,_Geom.new_Handle_Geom_BoundedSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BoundedSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BoundedSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_BoundedSurface_Nullify,None,Handle_Geom_BoundedSurface)
Handle_Geom_BoundedSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_BoundedSurface_IsNull,None,Handle_Geom_BoundedSurface)
Handle_Geom_BoundedSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_BoundedSurface_GetObject,None,Handle_Geom_BoundedSurface)
Handle_Geom_BoundedSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BoundedSurface__kill_pointed,None,Handle_Geom_BoundedSurface)
Handle_Geom_BoundedSurface_swigregister = _Geom.Handle_Geom_BoundedSurface_swigregister
Handle_Geom_BoundedSurface_swigregister(Handle_Geom_BoundedSurface)

def Handle_Geom_BoundedSurface_DownCast(*args):
  return _Geom.Handle_Geom_BoundedSurface_DownCast(*args)
Handle_Geom_BoundedSurface_DownCast = _Geom.Handle_Geom_BoundedSurface_DownCast

class Geom_CartesianPoint(Geom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Returns a transient copy of P.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Constructs a point defined by its three Cartesian coordinates X, Y and Z.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        _Geom.Geom_CartesianPoint_swiginit(self,_Geom.new_Geom_CartesianPoint(*args))
    def SetCoord(self, *args):
        """
        * Assigns the coordinates X, Y and Z to this point.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_CartesianPoint_SetCoord(self, *args)

    def SetPnt(self, *args):
        """
        * Set <self> to P.X(), P.Y(), P.Z() coordinates.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_CartesianPoint_SetPnt(self, *args)

    def SetX(self, *args):
        """
        * Changes the X coordinate of me.

        :param X:
        :type X: float
        :rtype: None

        """
        return _Geom.Geom_CartesianPoint_SetX(self, *args)

    def SetY(self, *args):
        """
        * Changes the Y coordinate of me.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _Geom.Geom_CartesianPoint_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Changes the Z coordinate of me.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_CartesianPoint_SetZ(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_CartesianPoint self)"""
        return _Geom.Geom_CartesianPoint__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_CartesianPoint self) -> Handle_Geom_CartesianPoint"""
        return _Geom.Geom_CartesianPoint_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_CartesianPoint.SetCoord = new_instancemethod(_Geom.Geom_CartesianPoint_SetCoord,None,Geom_CartesianPoint)
Geom_CartesianPoint.SetPnt = new_instancemethod(_Geom.Geom_CartesianPoint_SetPnt,None,Geom_CartesianPoint)
Geom_CartesianPoint.SetX = new_instancemethod(_Geom.Geom_CartesianPoint_SetX,None,Geom_CartesianPoint)
Geom_CartesianPoint.SetY = new_instancemethod(_Geom.Geom_CartesianPoint_SetY,None,Geom_CartesianPoint)
Geom_CartesianPoint.SetZ = new_instancemethod(_Geom.Geom_CartesianPoint_SetZ,None,Geom_CartesianPoint)
Geom_CartesianPoint._kill_pointed = new_instancemethod(_Geom.Geom_CartesianPoint__kill_pointed,None,Geom_CartesianPoint)
Geom_CartesianPoint.GetHandle = new_instancemethod(_Geom.Geom_CartesianPoint_GetHandle,None,Geom_CartesianPoint)
Geom_CartesianPoint_swigregister = _Geom.Geom_CartesianPoint_swigregister
Geom_CartesianPoint_swigregister(Geom_CartesianPoint)

class Handle_Geom_CartesianPoint(Handle_Geom_Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_CartesianPoint_swiginit(self,_Geom.new_Handle_Geom_CartesianPoint(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_CartesianPoint_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_CartesianPoint.Nullify = new_instancemethod(_Geom.Handle_Geom_CartesianPoint_Nullify,None,Handle_Geom_CartesianPoint)
Handle_Geom_CartesianPoint.IsNull = new_instancemethod(_Geom.Handle_Geom_CartesianPoint_IsNull,None,Handle_Geom_CartesianPoint)
Handle_Geom_CartesianPoint.GetObject = new_instancemethod(_Geom.Handle_Geom_CartesianPoint_GetObject,None,Handle_Geom_CartesianPoint)
Handle_Geom_CartesianPoint._kill_pointed = new_instancemethod(_Geom.Handle_Geom_CartesianPoint__kill_pointed,None,Handle_Geom_CartesianPoint)
Handle_Geom_CartesianPoint_swigregister = _Geom.Handle_Geom_CartesianPoint_swigregister
Handle_Geom_CartesianPoint_swigregister(Handle_Geom_CartesianPoint)

def Handle_Geom_CartesianPoint_DownCast(*args):
  return _Geom.Handle_Geom_CartesianPoint_DownCast(*args)
Handle_Geom_CartesianPoint_DownCast = _Geom.Handle_Geom_CartesianPoint_DownCast

class Geom_Conic(Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def SetAxis(self, *args):
        """
        * Changes the orientation of the conic's plane. The normal axis to the plane is A1. The XAxis and the YAxis are recomputed. raised if the A1 is parallel to the XAxis of the conic.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _Geom.Geom_Conic_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * changes the location point of the conic.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_Conic_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * changes the local coordinate system of the conic.

        :param A2:
        :type A2: gp_Ax2
        :rtype: None

        """
        return _Geom.Geom_Conic_SetPosition(self, *args)

    def Axis(self, *args):
        """
        * Returns the 'main Axis' of this conic. This axis is normal to the plane of the conic.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Conic_Axis(self, *args)

    def Eccentricity(self, *args):
        """
        * Returns the eccentricity value of the conic e. e = 0 for a circle 0 < e < 1 for an ellipse (e = 0 if MajorRadius = MinorRadius) e > 1 for a hyperbola e = 1 for a parabola Exceptions Standard_DomainError in the case of a hyperbola if its major radius is null.

        :rtype: float

        """
        return _Geom.Geom_Conic_Eccentricity(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of the conic. For the circle, the ellipse and the hyperbola it is the center of the conic. For the parabola it is the Apex of the parabola.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Conic_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinates system of the conic. The main direction of the Axis2Placement is normal to the plane of the conic. The X direction of the Axis2placement is in the plane of the conic and corresponds to the origin for the conic's parametric value u.

        :rtype: gp_Ax2

        """
        return _Geom.Geom_Conic_Position(self, *args)

    def XAxis(self, *args):
        """
        * Returns the XAxis of the conic. This axis defines the origin of parametrization of the conic. This axis is perpendicular to the Axis of the conic. This axis and the Yaxis define the plane of the conic.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Conic_XAxis(self, *args)

    def YAxis(self, *args):
        """
        * Returns the YAxis of the conic. The YAxis is perpendicular to the Xaxis. This axis and the Xaxis define the plane of the conic.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Conic_YAxis(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Conic self)"""
        return _Geom.Geom_Conic__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Conic self) -> Handle_Geom_Conic"""
        return _Geom.Geom_Conic_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Conic.SetAxis = new_instancemethod(_Geom.Geom_Conic_SetAxis,None,Geom_Conic)
Geom_Conic.SetLocation = new_instancemethod(_Geom.Geom_Conic_SetLocation,None,Geom_Conic)
Geom_Conic.SetPosition = new_instancemethod(_Geom.Geom_Conic_SetPosition,None,Geom_Conic)
Geom_Conic.Axis = new_instancemethod(_Geom.Geom_Conic_Axis,None,Geom_Conic)
Geom_Conic.Eccentricity = new_instancemethod(_Geom.Geom_Conic_Eccentricity,None,Geom_Conic)
Geom_Conic.Location = new_instancemethod(_Geom.Geom_Conic_Location,None,Geom_Conic)
Geom_Conic.Position = new_instancemethod(_Geom.Geom_Conic_Position,None,Geom_Conic)
Geom_Conic.XAxis = new_instancemethod(_Geom.Geom_Conic_XAxis,None,Geom_Conic)
Geom_Conic.YAxis = new_instancemethod(_Geom.Geom_Conic_YAxis,None,Geom_Conic)
Geom_Conic._kill_pointed = new_instancemethod(_Geom.Geom_Conic__kill_pointed,None,Geom_Conic)
Geom_Conic.GetHandle = new_instancemethod(_Geom.Geom_Conic_GetHandle,None,Geom_Conic)
Geom_Conic_swigregister = _Geom.Geom_Conic_swigregister
Geom_Conic_swigregister(Geom_Conic)

class Handle_Geom_Conic(Handle_Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Conic_swiginit(self,_Geom.new_Handle_Geom_Conic(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Conic_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Conic.Nullify = new_instancemethod(_Geom.Handle_Geom_Conic_Nullify,None,Handle_Geom_Conic)
Handle_Geom_Conic.IsNull = new_instancemethod(_Geom.Handle_Geom_Conic_IsNull,None,Handle_Geom_Conic)
Handle_Geom_Conic.GetObject = new_instancemethod(_Geom.Handle_Geom_Conic_GetObject,None,Handle_Geom_Conic)
Handle_Geom_Conic._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Conic__kill_pointed,None,Handle_Geom_Conic)
Handle_Geom_Conic_swigregister = _Geom.Handle_Geom_Conic_swigregister
Handle_Geom_Conic_swigregister(Handle_Geom_Conic)

def Handle_Geom_Conic_DownCast(*args):
  return _Geom.Handle_Geom_Conic_DownCast(*args)
Handle_Geom_Conic_DownCast = _Geom.Handle_Geom_Conic_DownCast

class Geom_Direction(Geom_Vector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a unit vector with it 3 cartesian coordinates. Raised if Sqrt( X*X + Y*Y + Z*Z) <= Resolution from gp.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        * Creates a transient copy of <self>.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Geom.Geom_Direction_swiginit(self,_Geom.new_Geom_Direction(*args))
    def SetCoord(self, *args):
        """
        * Sets <self> to X,Y,Z coordinates. Raised if Sqrt( X*X + Y*Y + Z*Z) <= Resolution from gp.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_Direction_SetCoord(self, *args)

    def SetDir(self, *args):
        """
        * Converts the gp_Dir unit vector V into this unit vector.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_Direction_SetDir(self, *args)

    def SetX(self, *args):
        """
        * Changes the X coordinate of <self>. Raised if Sqrt( X*X + Y*Y + Z*Z) <= Resolution from gp.

        :param X:
        :type X: float
        :rtype: None

        """
        return _Geom.Geom_Direction_SetX(self, *args)

    def SetY(self, *args):
        """
        * Changes the Y coordinate of <self>. Raised if Sqrt( X*X + Y*Y + Z*Z) <= Resolution from gp.

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _Geom.Geom_Direction_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Changes the Z coordinate of <self>. Raised if Sqrt( X*X + Y*Y + Z*Z) <= Resolution from gp.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_Direction_SetZ(self, *args)

    def Dir(self, *args):
        """
        * Returns the non transient direction with the same coordinates as <self>.

        :rtype: gp_Dir

        """
        return _Geom.Geom_Direction_Dir(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Direction self)"""
        return _Geom.Geom_Direction__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Direction self) -> Handle_Geom_Direction"""
        return _Geom.Geom_Direction_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Direction.SetCoord = new_instancemethod(_Geom.Geom_Direction_SetCoord,None,Geom_Direction)
Geom_Direction.SetDir = new_instancemethod(_Geom.Geom_Direction_SetDir,None,Geom_Direction)
Geom_Direction.SetX = new_instancemethod(_Geom.Geom_Direction_SetX,None,Geom_Direction)
Geom_Direction.SetY = new_instancemethod(_Geom.Geom_Direction_SetY,None,Geom_Direction)
Geom_Direction.SetZ = new_instancemethod(_Geom.Geom_Direction_SetZ,None,Geom_Direction)
Geom_Direction.Dir = new_instancemethod(_Geom.Geom_Direction_Dir,None,Geom_Direction)
Geom_Direction._kill_pointed = new_instancemethod(_Geom.Geom_Direction__kill_pointed,None,Geom_Direction)
Geom_Direction.GetHandle = new_instancemethod(_Geom.Geom_Direction_GetHandle,None,Geom_Direction)
Geom_Direction_swigregister = _Geom.Geom_Direction_swigregister
Geom_Direction_swigregister(Geom_Direction)

class Handle_Geom_Direction(Handle_Geom_Vector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Direction_swiginit(self,_Geom.new_Handle_Geom_Direction(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Direction_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Direction.Nullify = new_instancemethod(_Geom.Handle_Geom_Direction_Nullify,None,Handle_Geom_Direction)
Handle_Geom_Direction.IsNull = new_instancemethod(_Geom.Handle_Geom_Direction_IsNull,None,Handle_Geom_Direction)
Handle_Geom_Direction.GetObject = new_instancemethod(_Geom.Handle_Geom_Direction_GetObject,None,Handle_Geom_Direction)
Handle_Geom_Direction._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Direction__kill_pointed,None,Handle_Geom_Direction)
Handle_Geom_Direction_swigregister = _Geom.Handle_Geom_Direction_swigregister
Handle_Geom_Direction_swigregister(Handle_Geom_Direction)

def Handle_Geom_Direction_DownCast(*args):
  return _Geom.Handle_Geom_Direction_DownCast(*args)
Handle_Geom_Direction_DownCast = _Geom.Handle_Geom_Direction_DownCast

class Geom_ElementarySurface(Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def SetAxis(self, *args):
        """
        * Changes the main axis (ZAxis) of the elementary surface. Raised if the direction of A1 is parallel to the XAxis of the coordinate system of the surface.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _Geom.Geom_ElementarySurface_SetAxis(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location of the local coordinates system of the surface.

        :param Loc:
        :type Loc: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_ElementarySurface_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * Changes the local coordinates system of the surface.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        """
        return _Geom.Geom_ElementarySurface_SetPosition(self, *args)

    def Axis(self, *args):
        """
        * Returns the main axis of the surface (ZAxis).

        :rtype: gp_Ax1

        """
        return _Geom.Geom_ElementarySurface_Axis(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of the local coordinate system of the surface.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_ElementarySurface_Location(self, *args)

    def Position(self, *args):
        """
        * Returns the local coordinates system of the surface.

        :rtype: gp_Ax3

        """
        return _Geom.Geom_ElementarySurface_Position(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_ElementarySurface self)"""
        return _Geom.Geom_ElementarySurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_ElementarySurface self) -> Handle_Geom_ElementarySurface"""
        return _Geom.Geom_ElementarySurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_ElementarySurface.SetAxis = new_instancemethod(_Geom.Geom_ElementarySurface_SetAxis,None,Geom_ElementarySurface)
Geom_ElementarySurface.SetLocation = new_instancemethod(_Geom.Geom_ElementarySurface_SetLocation,None,Geom_ElementarySurface)
Geom_ElementarySurface.SetPosition = new_instancemethod(_Geom.Geom_ElementarySurface_SetPosition,None,Geom_ElementarySurface)
Geom_ElementarySurface.Axis = new_instancemethod(_Geom.Geom_ElementarySurface_Axis,None,Geom_ElementarySurface)
Geom_ElementarySurface.Location = new_instancemethod(_Geom.Geom_ElementarySurface_Location,None,Geom_ElementarySurface)
Geom_ElementarySurface.Position = new_instancemethod(_Geom.Geom_ElementarySurface_Position,None,Geom_ElementarySurface)
Geom_ElementarySurface._kill_pointed = new_instancemethod(_Geom.Geom_ElementarySurface__kill_pointed,None,Geom_ElementarySurface)
Geom_ElementarySurface.GetHandle = new_instancemethod(_Geom.Geom_ElementarySurface_GetHandle,None,Geom_ElementarySurface)
Geom_ElementarySurface_swigregister = _Geom.Geom_ElementarySurface_swigregister
Geom_ElementarySurface_swigregister(Geom_ElementarySurface)

class Handle_Geom_ElementarySurface(Handle_Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_ElementarySurface_swiginit(self,_Geom.new_Handle_Geom_ElementarySurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_ElementarySurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_ElementarySurface.Nullify = new_instancemethod(_Geom.Handle_Geom_ElementarySurface_Nullify,None,Handle_Geom_ElementarySurface)
Handle_Geom_ElementarySurface.IsNull = new_instancemethod(_Geom.Handle_Geom_ElementarySurface_IsNull,None,Handle_Geom_ElementarySurface)
Handle_Geom_ElementarySurface.GetObject = new_instancemethod(_Geom.Handle_Geom_ElementarySurface_GetObject,None,Handle_Geom_ElementarySurface)
Handle_Geom_ElementarySurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_ElementarySurface__kill_pointed,None,Handle_Geom_ElementarySurface)
Handle_Geom_ElementarySurface_swigregister = _Geom.Handle_Geom_ElementarySurface_swigregister
Handle_Geom_ElementarySurface_swigregister(Handle_Geom_ElementarySurface)

def Handle_Geom_ElementarySurface_DownCast(*args):
  return _Geom.Handle_Geom_ElementarySurface_DownCast(*args)
Handle_Geom_ElementarySurface_DownCast = _Geom.Handle_Geom_ElementarySurface_DownCast

class Geom_Line(Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a line located in 3D space with the axis placement A1. The Location of A1 is the origin of the line.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        * Creates a line from a non transient line from package gp.

        :param L:
        :type L: gp_Lin
        :rtype: None

        * Constructs a line passing through point P and parallel to vector V (P and V are, respectively, the origin and the unit vector of the positioning axis of the line).

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Geom.Geom_Line_swiginit(self,_Geom.new_Geom_Line(*args))
    def SetLin(self, *args):
        """
        * Set <self> so that <self> has the same geometric properties as L.

        :param L:
        :type L: gp_Lin
        :rtype: None

        """
        return _Geom.Geom_Line_SetLin(self, *args)

    def SetDirection(self, *args):
        """
        * changes the direction of the line.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_Line_SetDirection(self, *args)

    def SetLocation(self, *args):
        """
        * changes the 'Location' point (origin) of the line.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_Line_SetLocation(self, *args)

    def SetPosition(self, *args):
        """
        * changes the 'Location' and a the 'Direction' of <self>.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _Geom.Geom_Line_SetPosition(self, *args)

    def Lin(self, *args):
        """
        * Returns non transient line from gp with the same geometric properties as <self>

        :rtype: gp_Lin

        """
        return _Geom.Geom_Line_Lin(self, *args)

    def Position(self, *args):
        """
        * Returns the positioning axis of this line; this is also its local coordinate system.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Line_Position(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Line self)"""
        return _Geom.Geom_Line__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Line self) -> Handle_Geom_Line"""
        return _Geom.Geom_Line_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Line.SetLin = new_instancemethod(_Geom.Geom_Line_SetLin,None,Geom_Line)
Geom_Line.SetDirection = new_instancemethod(_Geom.Geom_Line_SetDirection,None,Geom_Line)
Geom_Line.SetLocation = new_instancemethod(_Geom.Geom_Line_SetLocation,None,Geom_Line)
Geom_Line.SetPosition = new_instancemethod(_Geom.Geom_Line_SetPosition,None,Geom_Line)
Geom_Line.Lin = new_instancemethod(_Geom.Geom_Line_Lin,None,Geom_Line)
Geom_Line.Position = new_instancemethod(_Geom.Geom_Line_Position,None,Geom_Line)
Geom_Line._kill_pointed = new_instancemethod(_Geom.Geom_Line__kill_pointed,None,Geom_Line)
Geom_Line.GetHandle = new_instancemethod(_Geom.Geom_Line_GetHandle,None,Geom_Line)
Geom_Line_swigregister = _Geom.Geom_Line_swigregister
Geom_Line_swigregister(Geom_Line)

class Handle_Geom_Line(Handle_Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Line_swiginit(self,_Geom.new_Handle_Geom_Line(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Line_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Line.Nullify = new_instancemethod(_Geom.Handle_Geom_Line_Nullify,None,Handle_Geom_Line)
Handle_Geom_Line.IsNull = new_instancemethod(_Geom.Handle_Geom_Line_IsNull,None,Handle_Geom_Line)
Handle_Geom_Line.GetObject = new_instancemethod(_Geom.Handle_Geom_Line_GetObject,None,Handle_Geom_Line)
Handle_Geom_Line._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Line__kill_pointed,None,Handle_Geom_Line)
Handle_Geom_Line_swigregister = _Geom.Handle_Geom_Line_swigregister
Handle_Geom_Line_swigregister(Handle_Geom_Line)

def Handle_Geom_Line_DownCast(*args):
  return _Geom.Handle_Geom_Line_DownCast(*args)
Handle_Geom_Line_DownCast = _Geom.Handle_Geom_Line_DownCast

class Geom_OffsetCurve(Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * C is the basis curve, Offset is the distance between <self> and the basis curve at any point. V defines the fixed reference direction (offset direction). If P is a point on the basis curve and T the first derivative with non zero length at this point, the corresponding point on the offset curve is in the direction of the vector-product N = V ^ T where N is a unitary vector. Warnings : In this package the entities are not shared. The OffsetCurve is built with a copy of the curve C. So when C is modified the OffsetCurve is not modified Raised if the basis curve C is not at least C1. Warnings : No check is done to know if ||V^T|| != 0.0 at any point.

        :param C:
        :type C: Handle_Geom_Curve &
        :param Offset:
        :type Offset: float
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Geom.Geom_OffsetCurve_swiginit(self,_Geom.new_Geom_OffsetCurve(*args))
    def SetBasisCurve(self, *args):
        """
        * Changes this offset curve by assigning C as the basis curve from which it is built. Exceptions Standard_ConstructionError if the curve C is not at least 'C1' continuous.

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_SetBasisCurve(self, *args)

    def SetDirection(self, *args):
        """
        * Changes this offset curve by assigning V as the reference vector used to compute the offset direction.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_SetDirection(self, *args)

    def SetOffsetValue(self, *args):
        """
        * Changes this offset curve by assigning D as the offset value.

        :param D:
        :type D: float
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_SetOffsetValue(self, *args)

    def BasisCurve(self, *args):
        """
        * Returns the basis curve of this offset curve. Note: The basis curve can be an offset curve.

        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_OffsetCurve_BasisCurve(self, *args)

    def Direction(self, *args):
        """
        * Returns the reference vector of this offset curve. Value and derivatives Warnings : The exception UndefinedValue or UndefinedDerivative is raised if it is not possible to compute a unique offset direction. If T is the first derivative with not null length and V the offset direction the relation ||T(U) ^ V|| != 0 must be satisfied to evaluate the offset curve. No check is done at the creation time and we suppose in this package that the offset curve is well defined.

        :rtype: gp_Dir

        """
        return _Geom.Geom_OffsetCurve_Direction(self, *args)

    def Value(self, *args):
        """
        * Warning! this should not be called if the basis curve is not at least C1. Nevertheless if used on portion where the curve is C1, it is OK

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param V1basis:
        :type V1basis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_Value(self, *args)

    def D0(self, *args):
        """
        * Warning! this should not be called if the basis curve is not at least C1. Nevertheless if used on portion where the curve is C1, it is OK

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Warning! this should not be called if the continuity of the basis curve is not C1. Nevertheless, it's OK to use it on portion where the curve is C1

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param V1basis:
        :type V1basis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_D0(self, *args)

    def D1(self, *args):
        """
        * Warning! this should not be called if the continuity of the basis curve is not C2. Nevertheless, it's OK to use it on portion where the curve is C2

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :rtype: None

        * Warning! this should not be called if the continuity of the basis curve is not C1. Nevertheless, it's OK to use it on portion where the curve is C1

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V1basis:
        :type V1basis: gp_Vec
        :param V2basis:
        :type V2basis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_D1(self, *args)

    def D2(self, *args):
        """
        * Warning! this should not be called if the continuity of the basis curve is not C3. Nevertheless, it's OK to use it on portion where the curve is C3

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        * Warning! this should not be called if the continuity of the basis curve is not C3. Nevertheless, it's OK to use it on portion where the curve is C3

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V1basis:
        :type V1basis: gp_Vec
        :param V2basis:
        :type V2basis: gp_Vec
        :param V3basis:
        :type V3basis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetCurve_D2(self, *args)

    def Offset(self, *args):
        """
        * Returns the offset value of this offset curve.

        :rtype: float

        """
        return _Geom.Geom_OffsetCurve_Offset(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_OffsetCurve self)"""
        return _Geom.Geom_OffsetCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_OffsetCurve self) -> Handle_Geom_OffsetCurve"""
        return _Geom.Geom_OffsetCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_OffsetCurve.SetBasisCurve = new_instancemethod(_Geom.Geom_OffsetCurve_SetBasisCurve,None,Geom_OffsetCurve)
Geom_OffsetCurve.SetDirection = new_instancemethod(_Geom.Geom_OffsetCurve_SetDirection,None,Geom_OffsetCurve)
Geom_OffsetCurve.SetOffsetValue = new_instancemethod(_Geom.Geom_OffsetCurve_SetOffsetValue,None,Geom_OffsetCurve)
Geom_OffsetCurve.BasisCurve = new_instancemethod(_Geom.Geom_OffsetCurve_BasisCurve,None,Geom_OffsetCurve)
Geom_OffsetCurve.Direction = new_instancemethod(_Geom.Geom_OffsetCurve_Direction,None,Geom_OffsetCurve)
Geom_OffsetCurve.Value = new_instancemethod(_Geom.Geom_OffsetCurve_Value,None,Geom_OffsetCurve)
Geom_OffsetCurve.D0 = new_instancemethod(_Geom.Geom_OffsetCurve_D0,None,Geom_OffsetCurve)
Geom_OffsetCurve.D1 = new_instancemethod(_Geom.Geom_OffsetCurve_D1,None,Geom_OffsetCurve)
Geom_OffsetCurve.D2 = new_instancemethod(_Geom.Geom_OffsetCurve_D2,None,Geom_OffsetCurve)
Geom_OffsetCurve.Offset = new_instancemethod(_Geom.Geom_OffsetCurve_Offset,None,Geom_OffsetCurve)
Geom_OffsetCurve._kill_pointed = new_instancemethod(_Geom.Geom_OffsetCurve__kill_pointed,None,Geom_OffsetCurve)
Geom_OffsetCurve.GetHandle = new_instancemethod(_Geom.Geom_OffsetCurve_GetHandle,None,Geom_OffsetCurve)
Geom_OffsetCurve_swigregister = _Geom.Geom_OffsetCurve_swigregister
Geom_OffsetCurve_swigregister(Geom_OffsetCurve)

class Handle_Geom_OffsetCurve(Handle_Geom_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_OffsetCurve_swiginit(self,_Geom.new_Handle_Geom_OffsetCurve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_OffsetCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_OffsetCurve.Nullify = new_instancemethod(_Geom.Handle_Geom_OffsetCurve_Nullify,None,Handle_Geom_OffsetCurve)
Handle_Geom_OffsetCurve.IsNull = new_instancemethod(_Geom.Handle_Geom_OffsetCurve_IsNull,None,Handle_Geom_OffsetCurve)
Handle_Geom_OffsetCurve.GetObject = new_instancemethod(_Geom.Handle_Geom_OffsetCurve_GetObject,None,Handle_Geom_OffsetCurve)
Handle_Geom_OffsetCurve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_OffsetCurve__kill_pointed,None,Handle_Geom_OffsetCurve)
Handle_Geom_OffsetCurve_swigregister = _Geom.Handle_Geom_OffsetCurve_swigregister
Handle_Geom_OffsetCurve_swigregister(Handle_Geom_OffsetCurve)

def Handle_Geom_OffsetCurve_DownCast(*args):
  return _Geom.Handle_Geom_OffsetCurve_DownCast(*args)
Handle_Geom_OffsetCurve_DownCast = _Geom.Handle_Geom_OffsetCurve_DownCast

class Geom_OffsetSurface(Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a surface offset from the basis surface S, where Offset is the distance between the offset surface and the basis surface at any point. A point on the offset surface is built by measuring the offset value along a normal vector at a point on S. This normal vector is given by the cross product D1u^D1v, where D1u and D1v are the vectors tangential to the basis surface in the u and v parametric directions at this point. The side of S on which the offset value is measured is indicated by this normal vector if Offset is positive, or is the inverse sense if Offset is negative. Warnings : - The offset surface is built with a copy of the surface S. Therefore, when S is modified the offset surface is not modified. - No check is made at the time of construction to detect points on S with multiple possible normal directions. Raised if S is not at least C1. Warnings : No check is done to verify that a unique normal direction is defined at any point of the basis surface S.

        :param S:
        :type S: Handle_Geom_Surface &
        :param Offset:
        :type Offset: float
        :rtype: None

        """
        _Geom.Geom_OffsetSurface_swiginit(self,_Geom.new_Geom_OffsetSurface(*args))
    def SetBasisSurface(self, *args):
        """
        * Raised if S is not at least C1. Warnings : No check is done to verify that a unique normal direction is defined at any point of the basis surface S. Exceptions Standard_ConstructionError if the surface S is not at least 'C1' continuous.

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_SetBasisSurface(self, *args)

    def SetOffsetValue(self, *args):
        """
        * Changes this offset surface by assigning D as the offset value.

        :param D:
        :type D: float
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_SetOffsetValue(self, *args)

    def Offset(self, *args):
        """
        * Returns the offset value of this offset surface.

        :rtype: float

        """
        return _Geom.Geom_OffsetSurface_Offset(self, *args)

    def BasisSurface(self, *args):
        """
        * Returns the basis surface of this offset surface. Note: The basis surface can be an offset surface.

        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_OffsetSurface_BasisSurface(self, *args)

    def Value(self, *args):
        """
        * P (U, V) = Pbasis + Offset * Ndir where Ndir = D1Ubasis ^ D1Vbasis / ||D1Ubasis ^ D1Vbasis|| is the normal direction of the surface. If Ndir is undefined this method computes an approched normal direction using the following limited development : Ndir = N0 + DNdir/DU + DNdir/DV + Eps with Eps->0 which requires to compute the second derivatives on the basis surface. If the normal direction cannot be approximate for this order of derivation the exception UndefinedValue is raised. Raised if the continuity of the basis surface is not C1. Raised if the order of derivation required to compute the normal direction is greater than the second order.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param D1Ubasis:
        :type D1Ubasis: gp_Vec
        :param D1Vbasis:
        :type D1Vbasis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_Value(self, *args)

    def D1(self, *args):
        """
        * Raised if the continuity of the basis surface is not C2.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        * Raised if the continuity of the basis surface is not C2.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D1Ubasis:
        :type D1Ubasis: gp_Vec
        :param D1Vbasis:
        :type D1Vbasis: gp_Vec
        :param D2Ubasis:
        :type D2Ubasis: gp_Vec
        :param D2Vbasis:
        :type D2Vbasis: gp_Vec
        :param D2UVbasis:
        :type D2UVbasis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_D1(self, *args)

    def D2(self, *args):
        """
        * //!---Purpose ; Raised if the continuity of the basis surface is not C3.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        * Raised if the continuity of the basis surface is not C3. The following private methods includes common part of local and global methods of derivative evaluations.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param Pbasis:
        :type Pbasis: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D1Ubasis:
        :type D1Ubasis: gp_Vec
        :param D1Vbasis:
        :type D1Vbasis: gp_Vec
        :param D2Ubasis:
        :type D2Ubasis: gp_Vec
        :param D2Vbasis:
        :type D2Vbasis: gp_Vec
        :param D2UVbasis:
        :type D2UVbasis: gp_Vec
        :param D3Ubasis:
        :type D3Ubasis: gp_Vec
        :param D3Vbasis:
        :type D3Vbasis: gp_Vec
        :param D3UUVbasis:
        :type D3UUVbasis: gp_Vec
        :param D3UVVbasis:
        :type D3UVVbasis: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_D2(self, *args)

    def LocalD0(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param VSide:
        :type VSide: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_LocalD0(self, *args)

    def LocalD1(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param VSide:
        :type VSide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_LocalD1(self, *args)

    def LocalD2(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param VSide:
        :type VSide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_LocalD2(self, *args)

    def LocalD3(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param VSide:
        :type VSide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_OffsetSurface_LocalD3(self, *args)

    def LocalDN(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param VSide:
        :type VSide: int
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_OffsetSurface_LocalDN(self, *args)

    def Surface(self, *args):
        """
        * returns an equivalent surface of the offset surface when the basis surface is a canonic surface or a rectangular limited surface on canonic surface or if the offset is null.

        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_OffsetSurface_Surface(self, *args)

    def UOsculatingSurface(self, *args):
        """
        * if Standard_True, L is the local osculating surface along U at the point U,V. It means that DL/DU is collinear to DS/DU . If IsOpposite == Standard_True these vectors have opposite direction.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param IsOpposite:
        :type IsOpposite: bool
        :param UOsculSurf:
        :type UOsculSurf: Handle_Geom_BSplineSurface &
        :rtype: bool

        """
        return _Geom.Geom_OffsetSurface_UOsculatingSurface(self, *args)

    def VOsculatingSurface(self, *args):
        """
        * if Standard_True, L is the local osculating surface along V at the point U,V. It means that DL/DV is collinear to DS/DV . If IsOpposite == Standard_True these vectors have opposite direction.

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param IsOpposite:
        :type IsOpposite: bool
        :param VOsculSurf:
        :type VOsculSurf: Handle_Geom_BSplineSurface &
        :rtype: bool

        """
        return _Geom.Geom_OffsetSurface_VOsculatingSurface(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_OffsetSurface self)"""
        return _Geom.Geom_OffsetSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_OffsetSurface self) -> Handle_Geom_OffsetSurface"""
        return _Geom.Geom_OffsetSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_OffsetSurface.SetBasisSurface = new_instancemethod(_Geom.Geom_OffsetSurface_SetBasisSurface,None,Geom_OffsetSurface)
Geom_OffsetSurface.SetOffsetValue = new_instancemethod(_Geom.Geom_OffsetSurface_SetOffsetValue,None,Geom_OffsetSurface)
Geom_OffsetSurface.Offset = new_instancemethod(_Geom.Geom_OffsetSurface_Offset,None,Geom_OffsetSurface)
Geom_OffsetSurface.BasisSurface = new_instancemethod(_Geom.Geom_OffsetSurface_BasisSurface,None,Geom_OffsetSurface)
Geom_OffsetSurface.Value = new_instancemethod(_Geom.Geom_OffsetSurface_Value,None,Geom_OffsetSurface)
Geom_OffsetSurface.D1 = new_instancemethod(_Geom.Geom_OffsetSurface_D1,None,Geom_OffsetSurface)
Geom_OffsetSurface.D2 = new_instancemethod(_Geom.Geom_OffsetSurface_D2,None,Geom_OffsetSurface)
Geom_OffsetSurface.LocalD0 = new_instancemethod(_Geom.Geom_OffsetSurface_LocalD0,None,Geom_OffsetSurface)
Geom_OffsetSurface.LocalD1 = new_instancemethod(_Geom.Geom_OffsetSurface_LocalD1,None,Geom_OffsetSurface)
Geom_OffsetSurface.LocalD2 = new_instancemethod(_Geom.Geom_OffsetSurface_LocalD2,None,Geom_OffsetSurface)
Geom_OffsetSurface.LocalD3 = new_instancemethod(_Geom.Geom_OffsetSurface_LocalD3,None,Geom_OffsetSurface)
Geom_OffsetSurface.LocalDN = new_instancemethod(_Geom.Geom_OffsetSurface_LocalDN,None,Geom_OffsetSurface)
Geom_OffsetSurface.Surface = new_instancemethod(_Geom.Geom_OffsetSurface_Surface,None,Geom_OffsetSurface)
Geom_OffsetSurface.UOsculatingSurface = new_instancemethod(_Geom.Geom_OffsetSurface_UOsculatingSurface,None,Geom_OffsetSurface)
Geom_OffsetSurface.VOsculatingSurface = new_instancemethod(_Geom.Geom_OffsetSurface_VOsculatingSurface,None,Geom_OffsetSurface)
Geom_OffsetSurface._kill_pointed = new_instancemethod(_Geom.Geom_OffsetSurface__kill_pointed,None,Geom_OffsetSurface)
Geom_OffsetSurface.GetHandle = new_instancemethod(_Geom.Geom_OffsetSurface_GetHandle,None,Geom_OffsetSurface)
Geom_OffsetSurface_swigregister = _Geom.Geom_OffsetSurface_swigregister
Geom_OffsetSurface_swigregister(Geom_OffsetSurface)

class Handle_Geom_OffsetSurface(Handle_Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_OffsetSurface_swiginit(self,_Geom.new_Handle_Geom_OffsetSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_OffsetSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_OffsetSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_OffsetSurface_Nullify,None,Handle_Geom_OffsetSurface)
Handle_Geom_OffsetSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_OffsetSurface_IsNull,None,Handle_Geom_OffsetSurface)
Handle_Geom_OffsetSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_OffsetSurface_GetObject,None,Handle_Geom_OffsetSurface)
Handle_Geom_OffsetSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_OffsetSurface__kill_pointed,None,Handle_Geom_OffsetSurface)
Handle_Geom_OffsetSurface_swigregister = _Geom.Handle_Geom_OffsetSurface_swigregister
Handle_Geom_OffsetSurface_swigregister(Handle_Geom_OffsetSurface)

def Handle_Geom_OffsetSurface_DownCast(*args):
  return _Geom.Handle_Geom_OffsetSurface_DownCast(*args)
Handle_Geom_OffsetSurface_DownCast = _Geom.Handle_Geom_OffsetSurface_DownCast

class Geom_SweptSurface(Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Direction(self, *args):
        """
        * Returns the reference direction of the swept surface. For a surface of revolution it is the direction of the revolution axis, for a surface of linear extrusion it is the direction of extrusion.

        :rtype: gp_Dir

        """
        return _Geom.Geom_SweptSurface_Direction(self, *args)

    def BasisCurve(self, *args):
        """
        * Returns the referenced curve of the surface. For a surface of revolution it is the revolution curve, for a surface of linear extrusion it is the extruded curve.

        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_SweptSurface_BasisCurve(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SweptSurface self)"""
        return _Geom.Geom_SweptSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SweptSurface self) -> Handle_Geom_SweptSurface"""
        return _Geom.Geom_SweptSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SweptSurface.Direction = new_instancemethod(_Geom.Geom_SweptSurface_Direction,None,Geom_SweptSurface)
Geom_SweptSurface.BasisCurve = new_instancemethod(_Geom.Geom_SweptSurface_BasisCurve,None,Geom_SweptSurface)
Geom_SweptSurface._kill_pointed = new_instancemethod(_Geom.Geom_SweptSurface__kill_pointed,None,Geom_SweptSurface)
Geom_SweptSurface.GetHandle = new_instancemethod(_Geom.Geom_SweptSurface_GetHandle,None,Geom_SweptSurface)
Geom_SweptSurface_swigregister = _Geom.Geom_SweptSurface_swigregister
Geom_SweptSurface_swigregister(Geom_SweptSurface)

class Handle_Geom_SweptSurface(Handle_Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SweptSurface_swiginit(self,_Geom.new_Handle_Geom_SweptSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SweptSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SweptSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_SweptSurface_Nullify,None,Handle_Geom_SweptSurface)
Handle_Geom_SweptSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_SweptSurface_IsNull,None,Handle_Geom_SweptSurface)
Handle_Geom_SweptSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_SweptSurface_GetObject,None,Handle_Geom_SweptSurface)
Handle_Geom_SweptSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SweptSurface__kill_pointed,None,Handle_Geom_SweptSurface)
Handle_Geom_SweptSurface_swigregister = _Geom.Handle_Geom_SweptSurface_swigregister
Handle_Geom_SweptSurface_swigregister(Handle_Geom_SweptSurface)

def Handle_Geom_SweptSurface_DownCast(*args):
  return _Geom.Handle_Geom_SweptSurface_DownCast(*args)
Handle_Geom_SweptSurface_DownCast = _Geom.Handle_Geom_SweptSurface_DownCast

class Geom_VectorWithMagnitude(Geom_Vector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a transient copy of V.

        :param V:
        :type V: gp_Vec
        :rtype: None

        * Creates a vector with three cartesian coordinates.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        * Creates a vector from the point P1 to the point P2. The magnitude of the vector is the distance between P1 and P2

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :rtype: None

        """
        _Geom.Geom_VectorWithMagnitude_swiginit(self,_Geom.new_Geom_VectorWithMagnitude(*args))
    def SetCoord(self, *args):
        """
        * Assigns the values X, Y and Z to the coordinates of this vector.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_SetCoord(self, *args)

    def SetVec(self, *args):
        """
        * Converts the gp_Vec vector V into this vector.

        :param V:
        :type V: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_SetVec(self, *args)

    def SetX(self, *args):
        """
        * Changes the X coordinate of <self>.

        :param X:
        :type X: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_SetX(self, *args)

    def SetY(self, *args):
        """
        * Changes the Y coordinate of <self>

        :param Y:
        :type Y: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_SetY(self, *args)

    def SetZ(self, *args):
        """
        * Changes the Z coordinate of <self>.

        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_SetZ(self, *args)

    def Add(self, *args):
        """
        * Adds the Vector Other to <self>.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_Add(self, *args)

    def Added(self, *args):
        """
        * Adds the vector Other to <self>.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: Handle_Geom_VectorWithMagnitude

        """
        return _Geom.Geom_VectorWithMagnitude_Added(self, *args)

    def Divide(self, *args):
        """
        * Divides <self> by a scalar.

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_Divide(self, *args)

    def Divided(self, *args):
        """
        * Divides <self> by a scalar. A new vector is returned.

        :param Scalar:
        :type Scalar: float
        :rtype: Handle_Geom_VectorWithMagnitude

        """
        return _Geom.Geom_VectorWithMagnitude_Divided(self, *args)

    def Multiplied(self, *args):
        """
        * Computes the product of the vector <self> by a scalar. A new vector is returned.

        :param Scalar:
        :type Scalar: float
        :rtype: Handle_Geom_VectorWithMagnitude

        """
        return _Geom.Geom_VectorWithMagnitude_Multiplied(self, *args)

    def Multiply(self, *args):
        """
        * Computes the product of the vector <self> by a scalar.

        :param Scalar:
        :type Scalar: float
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_Multiply(self, *args)

    def Normalize(self, *args):
        """
        * Normalizes <self>. Raised if the magnitude of the vector is lower or equal to Resolution from package gp.

        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_Normalize(self, *args)

    def Normalized(self, *args):
        """
        * Returns a copy of <self> Normalized. Raised if the magnitude of the vector is lower or equal to Resolution from package gp.

        :rtype: Handle_Geom_VectorWithMagnitude

        """
        return _Geom.Geom_VectorWithMagnitude_Normalized(self, *args)

    def Subtract(self, *args):
        """
        * Subtracts the Vector Other to <self>.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: None

        """
        return _Geom.Geom_VectorWithMagnitude_Subtract(self, *args)

    def Subtracted(self, *args):
        """
        * Subtracts the vector Other to <self>. A new vector is returned.

        :param Other:
        :type Other: Handle_Geom_Vector &
        :rtype: Handle_Geom_VectorWithMagnitude

        """
        return _Geom.Geom_VectorWithMagnitude_Subtracted(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_VectorWithMagnitude self)"""
        return _Geom.Geom_VectorWithMagnitude__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_VectorWithMagnitude self) -> Handle_Geom_VectorWithMagnitude"""
        return _Geom.Geom_VectorWithMagnitude_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_VectorWithMagnitude.SetCoord = new_instancemethod(_Geom.Geom_VectorWithMagnitude_SetCoord,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.SetVec = new_instancemethod(_Geom.Geom_VectorWithMagnitude_SetVec,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.SetX = new_instancemethod(_Geom.Geom_VectorWithMagnitude_SetX,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.SetY = new_instancemethod(_Geom.Geom_VectorWithMagnitude_SetY,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.SetZ = new_instancemethod(_Geom.Geom_VectorWithMagnitude_SetZ,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Add = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Add,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Added = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Added,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Divide = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Divide,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Divided = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Divided,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Multiplied = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Multiplied,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Multiply = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Multiply,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Normalize = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Normalize,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Normalized = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Normalized,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Subtract = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Subtract,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.Subtracted = new_instancemethod(_Geom.Geom_VectorWithMagnitude_Subtracted,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude._kill_pointed = new_instancemethod(_Geom.Geom_VectorWithMagnitude__kill_pointed,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude.GetHandle = new_instancemethod(_Geom.Geom_VectorWithMagnitude_GetHandle,None,Geom_VectorWithMagnitude)
Geom_VectorWithMagnitude_swigregister = _Geom.Geom_VectorWithMagnitude_swigregister
Geom_VectorWithMagnitude_swigregister(Geom_VectorWithMagnitude)

class Handle_Geom_VectorWithMagnitude(Handle_Geom_Vector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_VectorWithMagnitude_swiginit(self,_Geom.new_Handle_Geom_VectorWithMagnitude(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_VectorWithMagnitude_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_VectorWithMagnitude.Nullify = new_instancemethod(_Geom.Handle_Geom_VectorWithMagnitude_Nullify,None,Handle_Geom_VectorWithMagnitude)
Handle_Geom_VectorWithMagnitude.IsNull = new_instancemethod(_Geom.Handle_Geom_VectorWithMagnitude_IsNull,None,Handle_Geom_VectorWithMagnitude)
Handle_Geom_VectorWithMagnitude.GetObject = new_instancemethod(_Geom.Handle_Geom_VectorWithMagnitude_GetObject,None,Handle_Geom_VectorWithMagnitude)
Handle_Geom_VectorWithMagnitude._kill_pointed = new_instancemethod(_Geom.Handle_Geom_VectorWithMagnitude__kill_pointed,None,Handle_Geom_VectorWithMagnitude)
Handle_Geom_VectorWithMagnitude_swigregister = _Geom.Handle_Geom_VectorWithMagnitude_swigregister
Handle_Geom_VectorWithMagnitude_swigregister(Handle_Geom_VectorWithMagnitude)

def Handle_Geom_VectorWithMagnitude_DownCast(*args):
  return _Geom.Handle_Geom_VectorWithMagnitude_DownCast(*args)
Handle_Geom_VectorWithMagnitude_DownCast = _Geom.Handle_Geom_VectorWithMagnitude_DownCast

class Geom_BSplineCurve(Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a non-rational B_spline curve on the  basis <Knots, Multiplicities> of degree <Degree>.

        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Multiplicities:
        :type Multiplicities: TColStd_Array1OfInteger &
        :param Degree:
        :type Degree: int
        :param Periodic: default value is Standard_False
        :type Periodic: bool
        :rtype: None

        * Creates a rational B_spline curve on the basis  <Knots, Multiplicities> of degree <Degree>. Raises ConstructionError subject to the following conditions 0 < Degree <= MaxDegree. Weights.Length() == Poles.Length() Knots.Length() == Mults.Length() >= 2 Knots(i) < Knots(i+1) (Knots are increasing) 1 <= Mults(i) <= Degree On a non periodic curve the first and last multiplicities may be Degree+1 (this is even recommanded if you want the curve to start and finish on the first and last pole). On a periodic curve the first and the last multicities must be the same. on non-periodic curves Poles.Length() == Sum(Mults(i)) - Degree - 1 >= 2 on periodic curves Poles.Length() == Sum(Mults(i)) except the first or last

        :param Poles:
        :type Poles: TColgp_Array1OfPnt
        :param Weights:
        :type Weights: TColStd_Array1OfReal &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Multiplicities:
        :type Multiplicities: TColStd_Array1OfInteger &
        :param Degree:
        :type Degree: int
        :param Periodic: default value is Standard_False
        :type Periodic: bool
        :param CheckRational: default value is Standard_True
        :type CheckRational: bool
        :rtype: None

        """
        _Geom.Geom_BSplineCurve_swiginit(self,_Geom.new_Geom_BSplineCurve(*args))
    def IncreaseDegree(self, *args):
        """
        * Increases the degree of this BSpline curve to Degree. As a result, the poles, weights and multiplicities tables are modified; the knots table is not changed. Nothing is done if Degree is less than or equal to the current degree. Exceptions Standard_ConstructionError if Degree is greater than Geom_BSplineCurve::MaxDegree().

        :param Degree:
        :type Degree: int
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_IncreaseDegree(self, *args)

    def IncreaseMultiplicity(self, *args):
        """
        * //!Increases the multiplicity of the knot <Index> to  <M>. If <M> is lower or equal to the current  multiplicity nothing is done. If <M> is higher than  the degree the degree is used. If <Index> is not in [FirstUKnotIndex, LastUKnotIndex]

        :param Index:
        :type Index: int
        :param M:
        :type M: int
        :rtype: None

        * //!Increases the multiplicities of the knots in  [I1,I2] to <M>. For each knot if <M> is lower or equal to the  current multiplicity nothing is done. If <M> is  higher than the degree the degree is used. If <I1,I2> are not in [FirstUKnotIndex, LastUKnotIndex]

        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_IncreaseMultiplicity(self, *args)

    def IncrementMultiplicity(self, *args):
        """
        * //!Increment the multiplicities of the knots in  [I1,I2] by <M>. If <M> is not positive nithing is done. For each knot the resulting multiplicity is  limited to the Degree. If <I1,I2> are not in [FirstUKnotIndex, LastUKnotIndex]

        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_IncrementMultiplicity(self, *args)

    def InsertKnot(self, *args):
        """
        * Inserts a knot value in the sequence of knots. If <U> is an existing knot the multiplicity is increased by <M>.  If U is not on the parameter range nothing is done.  If the multiplicity is negative or null nothing is done. The new multiplicity is limited to the degree.  The tolerance criterion for knots equality is the max of Epsilon(U) and ParametricTolerance.

        :param U:
        :type U: float
        :param M: default value is 1
        :type M: int
        :param ParametricTolerance: default value is 0.0
        :type ParametricTolerance: float
        :param Add: default value is Standard_True
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_InsertKnot(self, *args)

    def InsertKnots(self, *args):
        """
        * Inserts a set of knots values in the sequence of knots.  For each U = Knots(i), M = Mults(i)  If <U> is an existing knot the multiplicity is increased by <M> if <Add> is True, increased to <M> if <Add> is False.  If U is not on the parameter range nothing is done.  If the multiplicity is negative or null nothing is done. The new multiplicity is limited to the degree.  The tolerance criterion for knots equality is the max of Epsilon(U) and ParametricTolerance.

        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param ParametricTolerance: default value is 0.0
        :type ParametricTolerance: float
        :param Add: default value is Standard_False
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_InsertKnots(self, *args)

    def RemoveKnot(self, *args):
        """
        * Reduces the multiplicity of the knot of index Index to M. If M is equal to 0, the knot is removed. With a modification of this type, the array of poles is also modified. Two different algorithms are systematically used to compute the new poles of the curve. If, for each pole, the distance between the pole calculated using the first algorithm and the same pole calculated using the second algorithm, is less than Tolerance, this ensures that the curve is not modified by more than Tolerance. Under these conditions, true is returned; otherwise, false is returned. A low tolerance is used to prevent modification of the curve. A high tolerance is used to 'smooth' the curve. Exceptions Standard_OutOfRange if Index is outside the bounds of the knots table. pole insertion and pole removing this operation is limited to the Uniform or QuasiUniform BSplineCurve. The knot values are modified . If the BSpline is NonUniform or Piecewise Bezier an exception Construction error is raised.

        :param Index:
        :type Index: int
        :param M:
        :type M: int
        :param Tolerance:
        :type Tolerance: float
        :rtype: bool

        """
        return _Geom.Geom_BSplineCurve_RemoveKnot(self, *args)

    def Segment(self, *args):
        """
        * Modifies this BSpline curve by segmenting it between U1 and U2. Either of these values can be outside the bounds of the curve, but U2 must be greater than U1. All data structure tables of this BSpline curve are modified, but the knots located between U1 and U2 are retained. The degree of the curve is not modified. Warnings : Even if <self> is not closed it can become closed after the segmentation for example if U1 or U2 are out of the bounds of the curve <self> or if the curve makes loop. After the segmentation the length of a curve can be null. raises if U2 < U1.

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Segment(self, *args)

    def SetKnots(self, *args):
        """
        * Modifies this BSpline curve by assigning the array K to its knots table. The multiplicity of the knots is not modified. Exceptions Standard_ConstructionError if the values in the array K are not in ascending order. Standard_OutOfRange if the bounds of the array K are not respectively 1 and the number of knots of this BSpline curve.

        :param K:
        :type K: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetKnots(self, *args)

    def SetKnot(self, *args):
        """
        * Modifies this BSpline curve by assigning the value K to the knot of index Index in the knots table. This is a relatively local modification because K must be such that: Knots(Index - 1) < K < Knots(Index + 1) The second syntax allows you also to increase the multiplicity of the knot to M (but it is not possible to decrease the multiplicity of the knot with this function). Standard_ConstructionError if: - K is not such that: Knots(Index - 1) < K < Knots(Index + 1) - M is greater than the degree of this BSpline curve or lower than the previous multiplicity of knot of index Index in the knots table. Standard_OutOfRange if Index is outside the bounds of the knots table.

        :param Index:
        :type Index: int
        :param K:
        :type K: float
        :rtype: None

        * Changes the knot of range Index with its multiplicity. You can increase the multiplicity of a knot but it is not allowed to decrease the multiplicity of an existing knot. Raised if K >= Knots(Index+1) or K <= Knots(Index-1). Raised if M is greater than Degree or lower than the previous multiplicity of knot of range Index. Raised if Index < 1 || Index > NbKnots

        :param Index:
        :type Index: int
        :param K:
        :type K: float
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetKnot(self, *args)

    def PeriodicNormalization(self, *args):
        """
        * returns the parameter normalized within  the period if the curve is periodic : otherwise  does not do anything

        :param U:
        :type U: float &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_PeriodicNormalization(self, *args)

    def SetPeriodic(self, *args):
        """
        * Changes this BSpline curve into a periodic curve. To become periodic, the curve must first be closed. Next, the knot sequence must be periodic. For this, FirstUKnotIndex and LastUKnotIndex are used to compute I1 and I2, the indexes in the knots array of the knots corresponding to the first and last parameters of this BSpline curve. The period is therefore: Knots(I2) - Knots(I1). Consequently, the knots and poles tables are modified. Exceptions Standard_ConstructionError if this BSpline curve is not closed.

        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetPeriodic(self, *args)

    def SetOrigin(self, *args):
        """
        * Assigns the knot of index Index in the knots table as the origin of this periodic BSpline curve. As a consequence, the knots and poles tables are modified. Exceptions Standard_NoSuchObject if this curve is not periodic. Standard_DomainError if Index is outside the bounds of the knots table.

        :param Index:
        :type Index: int
        :rtype: None

        * Set the origin of a periodic curve at Knot U. If U is not a knot of the BSpline a new knot is inseted. KnotVector and poles are modified. Raised if the curve is not periodic

        :param U:
        :type U: float
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetOrigin(self, *args)

    def SetNotPeriodic(self, *args):
        """
        * Changes this BSpline curve into a non-periodic curve. If this curve is already non-periodic, it is not modified. Note: the poles and knots tables are modified. Warning If this curve is periodic, as the multiplicity of the first and last knots is not modified, and is not equal to Degree + 1, where Degree is the degree of this BSpline curve, the start and end points of the curve are not its first and last poles.

        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetNotPeriodic(self, *args)

    def SetPole(self, *args):
        """
        * Modifies this BSpline curve by assigning P to the pole of index Index in the poles table. Exceptions Standard_OutOfRange if Index is outside the bounds of the poles table. Standard_ConstructionError if Weight is negative or null.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Modifies this BSpline curve by assigning P to the pole of index Index in the poles table. This syntax also allows you to modify the weight of the modified pole, which becomes Weight. In this case, if this BSpline curve is non-rational, it can become rational and vice versa. Exceptions Standard_OutOfRange if Index is outside the bounds of the poles table. Standard_ConstructionError if Weight is negative or null.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        """
        * Changes the weight for the pole of range Index. If the curve was non rational it can become rational. If the curve was rational it can become non rational. Raised if Index < 1 || Index > NbPoles Raised if Weight <= 0.0

        :param Index:
        :type Index: int
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_SetWeight(self, *args)

    def MovePoint(self, *args):
        """
        * Moves the point of parameter U of this BSpline curve to P. Index1 and Index2 are the indexes in the table of poles of this BSpline curve of the first and last poles designated to be moved. FirstModifiedPole and LastModifiedPole are the indexes of the first and last poles which are effectively modified. In the event of incompatibility between Index1, Index2 and the value U: - no change is made to this BSpline curve, and - the FirstModifiedPole and LastModifiedPole are returned null. Exceptions Standard_OutOfRange if: - Index1 is greater than or equal to Index2, or - Index1 or Index2 is less than 1 or greater than the number of poles of this BSpline curve.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Index1:
        :type Index1: int
        :param Index2:
        :type Index2: int
        :param FirstModifiedPole:
        :type FirstModifiedPole: int &
        :param LastModifiedPole:
        :type LastModifiedPole: int &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_MovePoint(self, *args)

    def MovePointAndTangent(self, *args):
        """
        * Move a point with parameter U to P. and makes it tangent at U be Tangent. StartingCondition = -1 means first can move EndingCondition = -1 means last point can move StartingCondition = 0 means the first point cannot move EndingCondition = 0 means the last point cannot move StartingCondition = 1 means the first point and tangent cannot move EndingCondition = 1 means the last point and tangent cannot move and so forth ErrorStatus != 0 means that there are not enought degree of freedom with the constrain to deform the curve accordingly

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param Tangent:
        :type Tangent: gp_Vec
        :param Tolerance:
        :type Tolerance: float
        :param StartingCondition:
        :type StartingCondition: int
        :param EndingCondition:
        :type EndingCondition: int
        :param ErrorStatus:
        :type ErrorStatus: int &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_MovePointAndTangent(self, *args)

    def IsRational(self, *args):
        """
        * Returns True if the weights are not identical. The tolerance criterion is Epsilon of the class Real.

        :rtype: bool

        """
        return _Geom.Geom_BSplineCurve_IsRational(self, *args)

    def Degree(self, *args):
        """
        * Returns the degree of this BSpline curve. The degree of a Geom_BSplineCurve curve cannot be greater than Geom_BSplineCurve::MaxDegree(). Computation of value and derivatives

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_Degree(self, *args)

    def LocalValue(self, *args):
        """
        * Raised if FromK1 = ToK2. Raised if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BSplineCurve_LocalValue(self, *args)

    def LocalD0(self, *args):
        """
        * Raised if FromK1 = ToK2. Raised if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_LocalD0(self, *args)

    def LocalD1(self, *args):
        """
        * Raised if the local continuity of the curve is not C1 between the knot K1 and the knot K2. Raised if FromK1 = ToK2. Raised if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_LocalD1(self, *args)

    def LocalD2(self, *args):
        """
        * Raised if the local continuity of the curve is not C2 between the knot K1 and the knot K2. Raised if FromK1 = ToK2. Raised if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_LocalD2(self, *args)

    def LocalD3(self, *args):
        """
        * Raised if the local continuity of the curve is not C3 between the knot K1 and the knot K2. Raised if FromK1 = ToK2. Raised if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :param P:
        :type P: gp_Pnt
        :param V1:
        :type V1: gp_Vec
        :param V2:
        :type V2: gp_Vec
        :param V3:
        :type V3: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_LocalD3(self, *args)

    def LocalDN(self, *args):
        """
        * Raised if the local continuity of the curve is not CN between the knot K1 and the knot K2. Raised if FromK1 = ToK2. Raised if N < 1. Raises if FromK1 and ToK2 are not in the range [FirstUKnotIndex, LastUKnotIndex].

        :param U:
        :type U: float
        :param FromK1:
        :type FromK1: int
        :param ToK2:
        :type ToK2: int
        :param N:
        :type N: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_BSplineCurve_LocalDN(self, *args)

    def FirstUKnotIndex(self, *args):
        """
        * Returns the index in the knot array of the knot corresponding to the first or last parameter of this BSpline curve. For a BSpline curve, the first (or last) parameter (which gives the start (or end) point of the curve) is a knot value. However, if the multiplicity of the first (or last) knot is less than Degree + 1, where Degree is the degree of the curve, it is not the first (or last) knot of the curve.

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_FirstUKnotIndex(self, *args)

    def Knot(self, *args):
        """
        * Returns the knot of range Index. When there is a knot with a multiplicity greater than 1 the knot is not repeated. The method Multiplicity can be used to get the multiplicity of the Knot. Raised if Index < 1 or Index > NbKnots

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _Geom.Geom_BSplineCurve_Knot(self, *args)

    def Knots(self, *args):
        """
        * returns the knot values of the B-spline curve; Warning A knot with a multiplicity greater than 1 is not repeated in the knot table. The Multiplicity function can be used to obtain the multiplicity of each knot. Raised if the length of K is not equal to the number of knots.

        :param K:
        :type K: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Knots(self, *args)

    def KnotSequence(self, *args):
        """
        * Returns K, the knots sequence of this BSpline curve. In this sequence, knots with a multiplicity greater than 1 are repeated. In the case of a non-periodic curve the length of the sequence must be equal to the sum of the NbKnots multiplicities of the knots of the curve (where NbKnots is the number of knots of this BSpline curve). This sum is also equal to : NbPoles + Degree + 1 where NbPoles is the number of poles and Degree the degree of this BSpline curve. In the case of a periodic curve, if there are k periodic knots, the period is Knot(k+1) - Knot(1). The initial sequence is built by writing knots 1 to k+1, which are repeated according to their corresponding multiplicities. If Degree is the degree of the curve, the degree of continuity of the curve at the knot of index 1 (or k+1) is equal to c = Degree + 1 - Mult(1). c knots are then inserted at the beginning and end of the initial sequence: - the c values of knots preceding the first item Knot(k+1) in the initial sequence are inserted at the beginning; the period is subtracted from these c values; - the c values of knots following the last item Knot(1) in the initial sequence are inserted at the end; the period is added to these c values. The length of the sequence must therefore be equal to: NbPoles + 2*Degree - Mult(1) + 2. Example For a non-periodic BSpline curve of degree 2 where: - the array of knots is: { k1 k2 k3 k4 }, - with associated multiplicities: { 3 1 2 3 }, the knot sequence is: K = { k1 k1 k1 k2 k3 k3 k4 k4 k4 } For a periodic BSpline curve of degree 4 , which is 'C1' continuous at the first knot, and where : - the periodic knots are: { k1 k2 k3 (k4) } (3 periodic knots: the points of parameter k1 and k4 are identical, the period is p = k4 - k1), - with associated multiplicities: { 3 1 2 (3) }, the degree of continuity at knots k1 and k4 is: Degree + 1 - Mult(i) = 2. 2 supplementary knots are added at the beginning and end of the sequence: - at the beginning: the 2 knots preceding k4 minus the period; in this example, this is k3 - p both times; - at the end: the 2 knots following k1 plus the period; in this example, this is k2 + p and k3 + p. The knot sequence is therefore: K = { k3-p k3-p k1 k1 k1 k2 k3 k3 k4 k4 k4 k2+p k3+p } Exceptions Standard_DimensionError if the array K is not of the appropriate length.Returns the knots sequence.

        :param K:
        :type K: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_KnotSequence(self, *args)

    def KnotDistribution(self, *args):
        """
        * Returns NonUniform or Uniform or QuasiUniform or PiecewiseBezier. If all the knots differ by a positive constant from the preceding knot the BSpline Curve can be : - Uniform if all the knots are of multiplicity 1, - QuasiUniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity Degree + 1, - PiecewiseBezier if the first and last knots have multiplicity Degree + 1 and if interior knots have multiplicity Degree A piecewise Bezier with only two knots is a BezierCurve. else the curve is non uniform. The tolerance criterion is Epsilon from class Real.

        :rtype: GeomAbs_BSplKnotDistribution

        """
        return _Geom.Geom_BSplineCurve_KnotDistribution(self, *args)

    def LastUKnotIndex(self, *args):
        """
        * For a BSpline curve the last parameter (which gives the end point of the curve) is a knot value but if the multiplicity of the last knot index is lower than Degree + 1 it is not the last knot of the curve. This method computes the index of the knot corresponding to the last parameter.

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_LastUKnotIndex(self, *args)

    def LocateU(self, *args):
        """
        * Locates the parametric value U in the sequence of knots. If 'WithKnotRepetition' is True we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. Knots (I1) <= U <= Knots (I2) . if I1 = I2 U is a knot value (the tolerance criterion ParametricTolerance is used). . if I1 < 1 => U < Knots (1) - Abs(ParametricTolerance) . if I2 > NbKnots => U > Knots (NbKnots) + Abs(ParametricTolerance)

        :param U:
        :type U: float
        :param ParametricTolerance:
        :type ParametricTolerance: float
        :param I1:
        :type I1: int &
        :param I2:
        :type I2: int &
        :param WithKnotRepetition: default value is Standard_False
        :type WithKnotRepetition: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_LocateU(self, *args)

    def Multiplicity(self, *args):
        """
        * Returns the multiplicity of the knots of range Index. Raised if Index < 1 or Index > NbKnots

        :param Index:
        :type Index: int
        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_Multiplicity(self, *args)

    def Multiplicities(self, *args):
        """
        * Returns the multiplicity of the knots of the curve. Raised if the length of M is not equal to NbKnots.

        :param M:
        :type M: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Multiplicities(self, *args)

    def NbKnots(self, *args):
        """
        * Returns the number of knots. This method returns the number of knot without repetition of multiple knots.

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_NbKnots(self, *args)

    def NbPoles(self, *args):
        """
        * Returns the number of poles

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_NbPoles(self, *args)

    def Pole(self, *args):
        """
        * Returns the pole of range Index. Raised if Index < 1 or Index > NbPoles.

        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BSplineCurve_Pole(self, *args)

    def Poles(self, *args):
        """
        * Returns the poles of the B-spline curve; Raised if the length of P is not equal to the number of poles.

        :param P:
        :type P: TColgp_Array1OfPnt
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Poles(self, *args)

    def Weight(self, *args):
        """
        * Returns the weight of the pole of range Index . Raised if Index < 1 or Index > NbPoles.

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _Geom.Geom_BSplineCurve_Weight(self, *args)

    def Weights(self, *args):
        """
        * Returns the weights of the B-spline curve; Raised if the length of W is not equal to NbPoles.

        :param W:
        :type W: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Weights(self, *args)

    def MaxDegree(*args):
        """
        * Returns the value of the maximum degree of the normalized B-spline basis functions in this package.

        :rtype: int

        """
        return _Geom.Geom_BSplineCurve_MaxDegree(*args)

    MaxDegree = staticmethod(MaxDegree)
    def Resolution(self, *args):
        """
        * Computes for this BSpline curve the parametric tolerance UTolerance for a given 3D tolerance Tolerance3D. If f(t) is the equation of this BSpline curve, UTolerance ensures that: | t1 - t0| < Utolerance ===> |f(t1) - f(t0)| < Tolerance3D

        :param Tolerance3D:
        :type Tolerance3D: float
        :param UTolerance:
        :type UTolerance: float &
        :rtype: None

        """
        return _Geom.Geom_BSplineCurve_Resolution(self, *args)

    def IsEqual(self, *args):
        """
        * Comapare two Bspline curve on identity;

        :param theOther:
        :type theOther: Handle_Geom_BSplineCurve &
        :param thePreci:
        :type thePreci: float
        :rtype: bool

        """
        return _Geom.Geom_BSplineCurve_IsEqual(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_BSplineCurve self)"""
        return _Geom.Geom_BSplineCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BSplineCurve self) -> Handle_Geom_BSplineCurve"""
        return _Geom.Geom_BSplineCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BSplineCurve.IncreaseDegree = new_instancemethod(_Geom.Geom_BSplineCurve_IncreaseDegree,None,Geom_BSplineCurve)
Geom_BSplineCurve.IncreaseMultiplicity = new_instancemethod(_Geom.Geom_BSplineCurve_IncreaseMultiplicity,None,Geom_BSplineCurve)
Geom_BSplineCurve.IncrementMultiplicity = new_instancemethod(_Geom.Geom_BSplineCurve_IncrementMultiplicity,None,Geom_BSplineCurve)
Geom_BSplineCurve.InsertKnot = new_instancemethod(_Geom.Geom_BSplineCurve_InsertKnot,None,Geom_BSplineCurve)
Geom_BSplineCurve.InsertKnots = new_instancemethod(_Geom.Geom_BSplineCurve_InsertKnots,None,Geom_BSplineCurve)
Geom_BSplineCurve.RemoveKnot = new_instancemethod(_Geom.Geom_BSplineCurve_RemoveKnot,None,Geom_BSplineCurve)
Geom_BSplineCurve.Segment = new_instancemethod(_Geom.Geom_BSplineCurve_Segment,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetKnots = new_instancemethod(_Geom.Geom_BSplineCurve_SetKnots,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetKnot = new_instancemethod(_Geom.Geom_BSplineCurve_SetKnot,None,Geom_BSplineCurve)
Geom_BSplineCurve.PeriodicNormalization = new_instancemethod(_Geom.Geom_BSplineCurve_PeriodicNormalization,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetPeriodic = new_instancemethod(_Geom.Geom_BSplineCurve_SetPeriodic,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetOrigin = new_instancemethod(_Geom.Geom_BSplineCurve_SetOrigin,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetNotPeriodic = new_instancemethod(_Geom.Geom_BSplineCurve_SetNotPeriodic,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetPole = new_instancemethod(_Geom.Geom_BSplineCurve_SetPole,None,Geom_BSplineCurve)
Geom_BSplineCurve.SetWeight = new_instancemethod(_Geom.Geom_BSplineCurve_SetWeight,None,Geom_BSplineCurve)
Geom_BSplineCurve.MovePoint = new_instancemethod(_Geom.Geom_BSplineCurve_MovePoint,None,Geom_BSplineCurve)
Geom_BSplineCurve.MovePointAndTangent = new_instancemethod(_Geom.Geom_BSplineCurve_MovePointAndTangent,None,Geom_BSplineCurve)
Geom_BSplineCurve.IsRational = new_instancemethod(_Geom.Geom_BSplineCurve_IsRational,None,Geom_BSplineCurve)
Geom_BSplineCurve.Degree = new_instancemethod(_Geom.Geom_BSplineCurve_Degree,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalValue = new_instancemethod(_Geom.Geom_BSplineCurve_LocalValue,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalD0 = new_instancemethod(_Geom.Geom_BSplineCurve_LocalD0,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalD1 = new_instancemethod(_Geom.Geom_BSplineCurve_LocalD1,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalD2 = new_instancemethod(_Geom.Geom_BSplineCurve_LocalD2,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalD3 = new_instancemethod(_Geom.Geom_BSplineCurve_LocalD3,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocalDN = new_instancemethod(_Geom.Geom_BSplineCurve_LocalDN,None,Geom_BSplineCurve)
Geom_BSplineCurve.FirstUKnotIndex = new_instancemethod(_Geom.Geom_BSplineCurve_FirstUKnotIndex,None,Geom_BSplineCurve)
Geom_BSplineCurve.Knot = new_instancemethod(_Geom.Geom_BSplineCurve_Knot,None,Geom_BSplineCurve)
Geom_BSplineCurve.Knots = new_instancemethod(_Geom.Geom_BSplineCurve_Knots,None,Geom_BSplineCurve)
Geom_BSplineCurve.KnotSequence = new_instancemethod(_Geom.Geom_BSplineCurve_KnotSequence,None,Geom_BSplineCurve)
Geom_BSplineCurve.KnotDistribution = new_instancemethod(_Geom.Geom_BSplineCurve_KnotDistribution,None,Geom_BSplineCurve)
Geom_BSplineCurve.LastUKnotIndex = new_instancemethod(_Geom.Geom_BSplineCurve_LastUKnotIndex,None,Geom_BSplineCurve)
Geom_BSplineCurve.LocateU = new_instancemethod(_Geom.Geom_BSplineCurve_LocateU,None,Geom_BSplineCurve)
Geom_BSplineCurve.Multiplicity = new_instancemethod(_Geom.Geom_BSplineCurve_Multiplicity,None,Geom_BSplineCurve)
Geom_BSplineCurve.Multiplicities = new_instancemethod(_Geom.Geom_BSplineCurve_Multiplicities,None,Geom_BSplineCurve)
Geom_BSplineCurve.NbKnots = new_instancemethod(_Geom.Geom_BSplineCurve_NbKnots,None,Geom_BSplineCurve)
Geom_BSplineCurve.NbPoles = new_instancemethod(_Geom.Geom_BSplineCurve_NbPoles,None,Geom_BSplineCurve)
Geom_BSplineCurve.Pole = new_instancemethod(_Geom.Geom_BSplineCurve_Pole,None,Geom_BSplineCurve)
Geom_BSplineCurve.Poles = new_instancemethod(_Geom.Geom_BSplineCurve_Poles,None,Geom_BSplineCurve)
Geom_BSplineCurve.Weight = new_instancemethod(_Geom.Geom_BSplineCurve_Weight,None,Geom_BSplineCurve)
Geom_BSplineCurve.Weights = new_instancemethod(_Geom.Geom_BSplineCurve_Weights,None,Geom_BSplineCurve)
Geom_BSplineCurve.Resolution = new_instancemethod(_Geom.Geom_BSplineCurve_Resolution,None,Geom_BSplineCurve)
Geom_BSplineCurve.IsEqual = new_instancemethod(_Geom.Geom_BSplineCurve_IsEqual,None,Geom_BSplineCurve)
Geom_BSplineCurve._kill_pointed = new_instancemethod(_Geom.Geom_BSplineCurve__kill_pointed,None,Geom_BSplineCurve)
Geom_BSplineCurve.GetHandle = new_instancemethod(_Geom.Geom_BSplineCurve_GetHandle,None,Geom_BSplineCurve)
Geom_BSplineCurve_swigregister = _Geom.Geom_BSplineCurve_swigregister
Geom_BSplineCurve_swigregister(Geom_BSplineCurve)

def Geom_BSplineCurve_MaxDegree(*args):
  """
    * Returns the value of the maximum degree of the normalized B-spline basis functions in this package.

    :rtype: int

    """
  return _Geom.Geom_BSplineCurve_MaxDegree(*args)

class Handle_Geom_BSplineCurve(Handle_Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BSplineCurve_swiginit(self,_Geom.new_Handle_Geom_BSplineCurve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BSplineCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BSplineCurve.Nullify = new_instancemethod(_Geom.Handle_Geom_BSplineCurve_Nullify,None,Handle_Geom_BSplineCurve)
Handle_Geom_BSplineCurve.IsNull = new_instancemethod(_Geom.Handle_Geom_BSplineCurve_IsNull,None,Handle_Geom_BSplineCurve)
Handle_Geom_BSplineCurve.GetObject = new_instancemethod(_Geom.Handle_Geom_BSplineCurve_GetObject,None,Handle_Geom_BSplineCurve)
Handle_Geom_BSplineCurve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BSplineCurve__kill_pointed,None,Handle_Geom_BSplineCurve)
Handle_Geom_BSplineCurve_swigregister = _Geom.Handle_Geom_BSplineCurve_swigregister
Handle_Geom_BSplineCurve_swigregister(Handle_Geom_BSplineCurve)

def Handle_Geom_BSplineCurve_DownCast(*args):
  return _Geom.Handle_Geom_BSplineCurve_DownCast(*args)
Handle_Geom_BSplineCurve_DownCast = _Geom.Handle_Geom_BSplineCurve_DownCast

class Geom_BSplineSurface(Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a non-rational b-spline surface (weights  default value is 1.). The following conditions must be verified. 0 < UDegree <= MaxDegree. UKnots.Length() == UMults.Length() >= 2 UKnots(i) < UKnots(i+1) (Knots are increasing) 1 <= UMults(i) <= UDegree On a non uperiodic surface the first and last umultiplicities may be UDegree+1 (this is even recommanded if you want the curve to start and finish on the first and last pole). On a uperiodic surface the first and the last umultiplicities must be the same. on non-uperiodic surfaces Poles.ColLength() == Sum(UMults(i)) - UDegree - 1 >= 2 on uperiodic surfaces Poles.ColLength() == Sum(UMults(i)) except the first or last The previous conditions for U holds also for V, with the RowLength of the poles.

        :param Poles:
        :type Poles: TColgp_Array2OfPnt
        :param UKnots:
        :type UKnots: TColStd_Array1OfReal &
        :param VKnots:
        :type VKnots: TColStd_Array1OfReal &
        :param UMults:
        :type UMults: TColStd_Array1OfInteger &
        :param VMults:
        :type VMults: TColStd_Array1OfInteger &
        :param UDegree:
        :type UDegree: int
        :param VDegree:
        :type VDegree: int
        :param UPeriodic: default value is Standard_False
        :type UPeriodic: bool
        :param VPeriodic: default value is Standard_False
        :type VPeriodic: bool
        :rtype: None

        * Creates a non-rational b-spline surface (weights  default value is 1.). The following conditions must be verified. 0 < UDegree <= MaxDegree. UKnots.Length() == UMults.Length() >= 2 UKnots(i) < UKnots(i+1) (Knots are increasing) 1 <= UMults(i) <= UDegree On a non uperiodic surface the first and last umultiplicities may be UDegree+1 (this is even recommanded if you want the curve to start and finish on the first and last pole). On a uperiodic surface the first and the last umultiplicities must be the same. on non-uperiodic surfaces Poles.ColLength() == Sum(UMults(i)) - UDegree - 1 >= 2 on uperiodic surfaces Poles.ColLength() == Sum(UMults(i)) except the first or last The previous conditions for U holds also for V, with the RowLength of the poles.

        :param Poles:
        :type Poles: TColgp_Array2OfPnt
        :param Weights:
        :type Weights: TColStd_Array2OfReal &
        :param UKnots:
        :type UKnots: TColStd_Array1OfReal &
        :param VKnots:
        :type VKnots: TColStd_Array1OfReal &
        :param UMults:
        :type UMults: TColStd_Array1OfInteger &
        :param VMults:
        :type VMults: TColStd_Array1OfInteger &
        :param UDegree:
        :type UDegree: int
        :param VDegree:
        :type VDegree: int
        :param UPeriodic: default value is Standard_False
        :type UPeriodic: bool
        :param VPeriodic: default value is Standard_False
        :type VPeriodic: bool
        :rtype: None

        """
        _Geom.Geom_BSplineSurface_swiginit(self,_Geom.new_Geom_BSplineSurface(*args))
    def ExchangeUV(self, *args):
        """
        * Exchanges the u and v parametric directions on this BSpline surface. As a consequence: - the poles and weights tables are transposed, - the knots and multiplicities tables are exchanged, - degrees of continuity, and rational, periodic and uniform characteristics are exchanged, and - the orientation of the surface is inverted.

        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_ExchangeUV(self, *args)

    def SetUPeriodic(self, *args):
        """
        * Sets the surface U periodic.

        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetUPeriodic(self, *args)

    def SetVPeriodic(self, *args):
        """
        * Modifies this surface to be periodic in the u (or v) parametric direction. To become periodic in a given parametric direction a surface must be closed in that parametric direction, and the knot sequence relative to that direction must be periodic. To generate this periodic sequence of knots, the functions FirstUKnotIndex and LastUKnotIndex (or FirstVKnotIndex and LastVKnotIndex) are used to compute I1 and I2. These are the indexes, in the knot array associated with the given parametric direction, of the knots that correspond to the first and last parameters of this BSpline surface in the given parametric direction. Hence the period is: Knots(I1) - Knots(I2) As a result, the knots and poles tables are modified. Exceptions Standard_ConstructionError if the surface is not closed in the given parametric direction.

        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetVPeriodic(self, *args)

    def PeriodicNormalization(self, *args):
        """
        * returns the parameter normalized within  the period if the surface is periodic : otherwise  does not do anything

        :param U:
        :type U: float &
        :param V:
        :type V: float &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_PeriodicNormalization(self, *args)

    def SetUOrigin(self, *args):
        """
        * Assigns the knot of index Index in the knots table in the corresponding parametric direction to be the origin of this periodic BSpline surface. As a consequence, the knots and poles tables are modified. Exceptions Standard_NoSuchObject if this BSpline surface is not periodic in the given parametric direction. Standard_DomainError if Index is outside the bounds of the knots table in the given parametric direction.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetUOrigin(self, *args)

    def SetVOrigin(self, *args):
        """
        * Assigns the knot of index Index in the knots table in the corresponding parametric direction to be the origin of this periodic BSpline surface. As a consequence, the knots and poles tables are modified. Exceptions Standard_NoSuchObject if this BSpline surface is not periodic in the given parametric direction. Standard_DomainError if Index is outside the bounds of the knots table in the given parametric direction.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetVOrigin(self, *args)

    def SetUNotPeriodic(self, *args):
        """
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetUNotPeriodic(self, *args)

    def SetVNotPeriodic(self, *args):
        """
        * Modifies this surface to be periodic in the u (or v) parametric direction. To become periodic in a given parametric direction a surface must be closed in that parametric direction, and the knot sequence relative to that direction must be periodic. To generate this periodic sequence of knots, the functions FirstUKnotIndex and LastUKnotIndex (or FirstVKnotIndex and LastVKnotIndex) are used to compute I1 and I2. These are the indexes, in the knot array associated with the given parametric direction, of the knots that correspond to the first and last parameters of this BSpline surface in the given parametric direction. Hence the period is: Knots(I1) - Knots(I2) As a result, the knots and poles tables are modified. Exceptions Standard_ConstructionError if the surface is not closed in the given parametric direction.

        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetVNotPeriodic(self, *args)

    def IncreaseDegree(self, *args):
        """
        * Increases the degrees of this BSpline surface to UDegree and VDegree in the u and v parametric directions respectively. As a result, the tables of poles, weights and multiplicities are modified. The tables of knots is not changed. Note: Nothing is done if the given degree is less than or equal to the current degree in the corresponding parametric direction. Exceptions Standard_ConstructionError if UDegree or VDegree is greater than Geom_BSplineSurface::MaxDegree().

        :param UDegree:
        :type UDegree: int
        :param VDegree:
        :type VDegree: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_IncreaseDegree(self, *args)

    def InsertUKnots(self, *args):
        """
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param ParametricTolerance: default value is 0.0
        :type ParametricTolerance: float
        :param Add: default value is Standard_True
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_InsertUKnots(self, *args)

    def InsertVKnots(self, *args):
        """
        * Inserts into the knots table for the corresponding parametric direction of this BSpline surface: - the value U, or V, with the multiplicity M (defaulted to 1), or - the values of the array Knots, with their respective multiplicities, Mults. If the knot value to insert already exists in the table, its multiplicity is: - increased by M, if Add is true (the default), or - increased to M, if Add is false. The tolerance criterion used to check the equality of the knots is the larger of the values ParametricTolerance and Standard_Real::Epsilon(val), where val is the knot value to be inserted. Warning - If a given multiplicity coefficient is null, or negative, nothing is done. - The new multiplicity of a knot is limited to the degree of this BSpline surface in the corresponding parametric direction. Exceptions Standard_ConstructionError if a knot value to insert is outside the bounds of this BSpline surface in the specified parametric direction. The comparison uses the precision criterion ParametricTolerance.

        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param ParametricTolerance: default value is 0.0
        :type ParametricTolerance: float
        :param Add: default value is Standard_True
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_InsertVKnots(self, *args)

    def RemoveUKnot(self, *args):
        """
        :param Index:
        :type Index: int
        :param M:
        :type M: int
        :param Tolerance:
        :type Tolerance: float
        :rtype: bool

        """
        return _Geom.Geom_BSplineSurface_RemoveUKnot(self, *args)

    def RemoveVKnot(self, *args):
        """
        * Reduces to M the multiplicity of the knot of index Index in the given parametric direction. If M is 0, the knot is removed. With a modification of this type, the table of poles is also modified. Two different algorithms are used systematically to compute the new poles of the surface. For each pole, the distance between the pole calculated using the first algorithm and the same pole calculated using the second algorithm, is checked. If this distance is less than Tolerance it ensures that the surface is not modified by more than Tolerance. Under these conditions, the function returns true; otherwise, it returns false. A low tolerance prevents modification of the surface. A high tolerance 'smoothes' the surface. Exceptions Standard_OutOfRange if Index is outside the bounds of the knots table of this BSpline surface.

        :param Index:
        :type Index: int
        :param M:
        :type M: int
        :param Tolerance:
        :type Tolerance: float
        :rtype: bool

        """
        return _Geom.Geom_BSplineSurface_RemoveVKnot(self, *args)

    def IncreaseUMultiplicity(self, *args):
        """
        * Increases the multiplicity of the knot of range UIndex in the UKnots sequence. M is the new multiplicity. M must be greater than the previous multiplicity and lower or equal to the degree of the surface in the U parametric direction. Raised if M is not in the range [1, UDegree] Raised if UIndex is not in the range [FirstUKnotIndex, LastUKnotIndex] given by the methods with the same name.

        :param UIndex:
        :type UIndex: int
        :param M:
        :type M: int
        :rtype: None

        * Increases until order M the multiplicity of the set of knots FromI1,...., ToI2 in the U direction. This method can be used to make a B_spline surface into a PiecewiseBezier B_spline surface. If <self> was uniform, it can become non uniform. Raised if FromI1 or ToI2 is out of the range [FirstUKnotIndex, LastUKnotIndex]. M should be greater than the previous multiplicity of the all the knots FromI1,..., ToI2 and lower or equal to the Degree of the surface in the U parametric direction.

        :param FromI1:
        :type FromI1: int
        :param ToI2:
        :type ToI2: int
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_IncreaseUMultiplicity(self, *args)

    def IncrementUMultiplicity(self, *args):
        """
        * Increments the multiplicity of the consecutives uknots FromI1..ToI2 by step. The multiplicity of each knot FromI1,.....,ToI2 must be lower or equal to the UDegree of the B_spline. Raised if FromI1 or ToI2 is not in the range [FirstUKnotIndex, LastUKnotIndex] Raised if one knot has a multiplicity greater than UDegree.

        :param FromI1:
        :type FromI1: int
        :param ToI2:
        :type ToI2: int
        :param Step:
        :type Step: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_IncrementUMultiplicity(self, *args)

    def IncreaseVMultiplicity(self, *args):
        """
        * Increases the multiplicity of a knot in the V direction. M is the new multiplicity. M should be greater than the previous multiplicity and lower than the degree of the surface in the V parametric direction. Raised if VIndex is not in the range [FirstVKnotIndex, LastVKnotIndex] given by the methods with the same name.

        :param VIndex:
        :type VIndex: int
        :param M:
        :type M: int
        :rtype: None

        * Increases until order M the multiplicity of the set of knots FromI1,...., ToI2 in the V direction. This method can be used to make a BSplineSurface into a PiecewiseBezier B_spline surface. If <self> was uniform, it can become non-uniform. Raised if FromI1 or ToI2 is out of the range [FirstVKnotIndex, LastVKnotIndex] given by the methods with the same name. M should be greater than the previous multiplicity of the all the knots FromI1,..., ToI2 and lower or equal to the Degree of the surface in the V parametric direction.

        :param FromI1:
        :type FromI1: int
        :param ToI2:
        :type ToI2: int
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_IncreaseVMultiplicity(self, *args)

    def IncrementVMultiplicity(self, *args):
        """
        * Increments the multiplicity of the consecutives vknots FromI1..ToI2 by step. The multiplicity of each knot FromI1,.....,ToI2 must be lower or equal to the VDegree of the B_spline. Raised if FromI1 or ToI2 is not in the range [FirstVKnotIndex, LastVKnotIndex] Raised if one knot has a multiplicity greater than VDegree.

        :param FromI1:
        :type FromI1: int
        :param ToI2:
        :type ToI2: int
        :param Step:
        :type Step: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_IncrementVMultiplicity(self, *args)

    def InsertUKnot(self, *args):
        """
        * Inserts a knot value in the sequence of UKnots. If U is a knot value this method increases the multiplicity of the knot if the previous multiplicity was lower than M else it does nothing. The tolerance criterion is ParametricTolerance. ParametricTolerance should be greater or equal than Resolution from package gp. Raised if U is out of the bounds [U1, U2] given by the methods Bounds, the criterion ParametricTolerance is used. Raised if M is not in the range [1, UDegree].

        :param U:
        :type U: float
        :param M:
        :type M: int
        :param ParametricTolerance:
        :type ParametricTolerance: float
        :param Add: default value is Standard_True
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_InsertUKnot(self, *args)

    def InsertVKnot(self, *args):
        """
        * Inserts a knot value in the sequence of VKnots. If V is a knot value this method increases the multiplicity of the knot if the previous multiplicity was lower than M otherwise it does nothing. The tolerance criterion is ParametricTolerance. ParametricTolerance should be greater or equal than Resolution from package gp. raises if V is out of the Bounds [V1, V2] given by the methods Bounds, the criterion ParametricTolerance is used. raises if M is not in the range [1, VDegree].

        :param V:
        :type V: float
        :param M:
        :type M: int
        :param ParametricTolerance:
        :type ParametricTolerance: float
        :param Add: default value is Standard_True
        :type Add: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_InsertVKnot(self, *args)

    def Segment(self, *args):
        """
        * Segments the surface between U1 and U2 in the U-Direction.  between V1 and V2 in the V-Direction. The control points are modified, the first and the last point are not the same. Warnings : Even if <self> is not closed it can become closed after the segmentation for example if U1 or U2 are out of the bounds of the surface <self> or if the surface makes loop. raises if U2 < U1 or V2 < V1

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param V1:
        :type V1: float
        :param V2:
        :type V2: float
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_Segment(self, *args)

    def CheckAndSegment(self, *args):
        """
        * Segments the surface between U1 and U2 in the U-Direction.  between V1 and V2 in the V-Direction. same as Segment but do nothing if U1 and U2 (resp. V1 and V2) are equal to the bounds in U (resp. in V) of <self>. For example, if <self> is periodic in V, it will be always periodic in V after the segmentation if the bounds in V are unchanged Warnings : Even if <self> is not closed it can become closed after the segmentation for example if U1 or U2 are out of the bounds of the surface <self> or if the surface makes loop. raises if U2 < U1 or V2 < V1

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param V1:
        :type V1: float
        :param V2:
        :type V2: float
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_CheckAndSegment(self, *args)

    def SetUKnots(self, *args):
        """
        * Changes all the U-knots of the surface. The multiplicity of the knots are not modified. Raised if there is an index such that UK (Index+1) <= UK (Index). Raised if UK.Lower() < 1 or UK.Upper() > NbUKnots

        :param UK:
        :type UK: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetUKnots(self, *args)

    def SetUKnot(self, *args):
        """
        * Substitutes the UKnots of range UIndex with K. Raised if UIndex < 1 or UIndex > NbUKnots Raised if K >= UKnots(UIndex+1) or K <= UKnots(UIndex-1)

        :param UIndex:
        :type UIndex: int
        :param K:
        :type K: float
        :rtype: None

        * Changes the value of the UKnots of range UIndex and increases its multiplicity. Raised if UIndex is not in the range [FirstUKnotIndex, LastUKnotIndex] given by the methods with the same name. Raised if K >= UKnots(UIndex+1) or K <= UKnots(UIndex-1) M must be lower than UDegree and greater than the previous multiplicity of the knot of range UIndex.

        :param UIndex:
        :type UIndex: int
        :param K:
        :type K: float
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetUKnot(self, *args)

    def SetVKnots(self, *args):
        """
        * Changes all the V-knots of the surface. The multiplicity of the knots are not modified. Raised if there is an index such that VK (Index+1) <= VK (Index). Raised if VK.Lower() < 1 or VK.Upper() > NbVKnots

        :param VK:
        :type VK: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetVKnots(self, *args)

    def SetVKnot(self, *args):
        """
        * Substitutes the VKnots of range VIndex with K. Raised if VIndex < 1 or VIndex > NbVKnots Raised if K >= VKnots(VIndex+1) or K <= VKnots(VIndex-1)

        :param VIndex:
        :type VIndex: int
        :param K:
        :type K: float
        :rtype: None

        * Changes the value of the VKnots of range VIndex and increases its multiplicity. Raised if VIndex is not in the range [FirstVKnotIndex, LastVKnotIndex] given by the methods with the same name. Raised if K >= VKnots(VIndex+1) or K <= VKnots(VIndex-1) M must be lower than VDegree and greater than the previous multiplicity of the knot of range VIndex.

        :param VIndex:
        :type VIndex: int
        :param K:
        :type K: float
        :param M:
        :type M: int
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetVKnot(self, *args)

    def LocateU(self, *args):
        """
        * Locates the parametric value U in the sequence of UKnots. If 'WithKnotRepetition' is True we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. UKnots (I1) <= U <= UKnots (I2) . if I1 = I2 U is a knot value (the tolerance criterion ParametricTolerance is used). . if I1 < 1 => U < UKnots(1) - Abs(ParametricTolerance) . if I2 > NbUKnots => U > UKnots(NbUKnots)+Abs(ParametricTolerance)

        :param U:
        :type U: float
        :param ParametricTolerance:
        :type ParametricTolerance: float
        :param I1:
        :type I1: int &
        :param I2:
        :type I2: int &
        :param WithKnotRepetition: default value is Standard_False
        :type WithKnotRepetition: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocateU(self, *args)

    def LocateV(self, *args):
        """
        * Locates the parametric value U in the sequence of knots. If 'WithKnotRepetition' is True we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. VKnots (I1) <= V <= VKnots (I2) . if I1 = I2 V is a knot value (the tolerance criterion ParametricTolerance is used). . if I1 < 1 => V < VKnots(1) - Abs(ParametricTolerance) . if I2 > NbVKnots => V > VKnots(NbVKnots)+Abs(ParametricTolerance) poles insertion and removing The following methods are available only if the surface is Uniform or QuasiUniform in the considered direction The knot repartition is modified.

        :param V:
        :type V: float
        :param ParametricTolerance:
        :type ParametricTolerance: float
        :param I1:
        :type I1: int &
        :param I2:
        :type I2: int &
        :param WithKnotRepetition: default value is Standard_False
        :type WithKnotRepetition: bool
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocateV(self, *args)

    def SetPole(self, *args):
        """
        * Substitutes the pole of range (UIndex, VIndex) with P. If the surface is rational the weight of range (UIndex, VIndex) is not modified. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Substitutes the pole and the weight of range (UIndex, VIndex) with P and W. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles. Raised if Weight <= Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetPole(self, *args)

    def SetPoleCol(self, *args):
        """
        * Changes a column of poles or a part of this column. Raised if Vindex < 1 or VIndex > NbVPoles. Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbUPoles.

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Changes a column of poles or a part of this column with the corresponding weights. If the surface was rational it can become non rational. If the surface was non rational it can become rational. Raised if Vindex < 1 or VIndex > NbVPoles. Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbUPoles Raised if the bounds of CPoleWeights are not the same as the bounds of CPoles. Raised if one of the weight value of CPoleWeights is lower or equal to Resolution from package gp.

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetPoleCol(self, *args)

    def SetPoleRow(self, *args):
        """
        * Changes a row of poles or a part of this row with the corresponding weights. If the surface was rational it can become non rational. If the surface was non rational it can become rational. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbVPoles raises if the bounds of CPoleWeights are not the same as the bounds of CPoles. Raised if one of the weight value of CPoleWeights is lower or equal to Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        * Changes a row of poles or a part of this row. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetPoleRow(self, *args)

    def SetWeight(self, *args):
        """
        * Changes the weight of the pole of range UIndex, VIndex. If the surface was non rational it can become rational. If the surface was rational it can become non rational. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles Raised if weight is lower or equal to Resolution from package gp

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetWeight(self, *args)

    def SetWeightCol(self, *args):
        """
        * Changes a column of weights of a part of this column. Raised if VIndex < 1 or VIndex > NbVPoles Raised if CPoleWeights.Lower() < 1 or  CPoleWeights.Upper() > NbUPoles. Raised if a weight value is lower or equal to Resolution from package gp.

        :param VIndex:
        :type VIndex: int
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetWeightCol(self, *args)

    def SetWeightRow(self, *args):
        """
        * Changes a row of weights or a part of this row. Raised if UIndex < 1 or UIndex > NbUPoles Raised if CPoleWeights.Lower() < 1 or  CPoleWeights.Upper() > NbVPoles. Raised if a weight value is lower or equal to Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_SetWeightRow(self, *args)

    def MovePoint(self, *args):
        """
        * Move a point with parameter U and V to P. given u,v as parameters) to reach a new position UIndex1, UIndex2, VIndex1, VIndex2:  indicates the poles which can be moved if Problem in BSplineBasis calculation, no change for the curve and UFirstIndex, VLastIndex = 0 VFirstIndex, VLastIndex = 0 Raised if UIndex1 < UIndex2 or VIndex1 < VIndex2 or  UIndex1 < 1 || UIndex1 > NbUPoles or  UIndex2 < 1 || UIndex2 > NbUPoles  VIndex1 < 1 || VIndex1 > NbVPoles or  VIndex2 < 1 || VIndex2 > NbVPoles characteristics of the surface

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param P:
        :type P: gp_Pnt
        :param UIndex1:
        :type UIndex1: int
        :param UIndex2:
        :type UIndex2: int
        :param VIndex1:
        :type VIndex1: int
        :param VIndex2:
        :type VIndex2: int
        :param UFirstIndex:
        :type UFirstIndex: int &
        :param ULastIndex:
        :type ULastIndex: int &
        :param VFirstIndex:
        :type VFirstIndex: int &
        :param VLastIndex:
        :type VLastIndex: int &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_MovePoint(self, *args)

    def IsURational(self, *args):
        """
        * Returns False if for each row of weights all the weights are identical. The tolerance criterion is resolution from package gp. Example :  |1.0, 1.0, 1.0| if Weights = |0.5, 0.5, 0.5| returns False  |2.0, 2.0, 2.0|

        :rtype: bool

        """
        return _Geom.Geom_BSplineSurface_IsURational(self, *args)

    def IsVRational(self, *args):
        """
        * Returns False if for each column of weights all the weights are identical. The tolerance criterion is resolution from package gp. Examples :  |1.0, 2.0, 0.5| if Weights = |1.0, 2.0, 0.5| returns False  |1.0, 2.0, 0.5|

        :rtype: bool

        """
        return _Geom.Geom_BSplineSurface_IsVRational(self, *args)

    def IsCacheValid(self, *args):
        """
        * Tells whether the Cache is valid for the given parameter Warnings : the parameter must be normalized within the period if the curve is periodic. Otherwise the answer will be false

        :param UParameter:
        :type UParameter: float
        :param VParameter:
        :type VParameter: float
        :rtype: bool

        """
        return _Geom.Geom_BSplineSurface_IsCacheValid(self, *args)

    def FirstUKnotIndex(self, *args):
        """
        * Computes the Index of the UKnots which gives the first parametric value of the surface in the U direction. The UIso curve corresponding to this value is a boundary curve of the surface.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_FirstUKnotIndex(self, *args)

    def FirstVKnotIndex(self, *args):
        """
        * Computes the Index of the VKnots which gives the first parametric value of the surface in the V direction. The VIso curve corresponding to this knot is a boundary curve of the surface.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_FirstVKnotIndex(self, *args)

    def LastUKnotIndex(self, *args):
        """
        * Computes the Index of the UKnots which gives the last parametric value of the surface in the U direction. The UIso curve corresponding to this knot is a boundary curve of the surface.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_LastUKnotIndex(self, *args)

    def LastVKnotIndex(self, *args):
        """
        * Computes the Index of the VKnots which gives the last parametric value of the surface in the V direction. The VIso curve corresponding to this knot is a boundary curve of the surface.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_LastVKnotIndex(self, *args)

    def NbUKnots(self, *args):
        """
        * Returns the number of knots in the U direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_NbUKnots(self, *args)

    def NbUPoles(self, *args):
        """
        * Returns number of poles in the U direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_NbUPoles(self, *args)

    def NbVKnots(self, *args):
        """
        * Returns the number of knots in the V direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_NbVKnots(self, *args)

    def NbVPoles(self, *args):
        """
        * Returns the number of poles in the V direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_NbVPoles(self, *args)

    def Pole(self, *args):
        """
        * Returns the pole of range (UIndex, VIndex). Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BSplineSurface_Pole(self, *args)

    def Poles(self, *args):
        """
        * Returns the poles of the B-spline surface. Raised if the length of P in the U and V direction is not equal to NbUpoles and NbVPoles.

        :param P:
        :type P: TColgp_Array2OfPnt
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_Poles(self, *args)

    def UDegree(self, *args):
        """
        * Returns the degree of the normalized B-splines Ni,n in the U direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_UDegree(self, *args)

    def UKnot(self, *args):
        """
        * Returns the Knot value of range UIndex. Raised if UIndex < 1 or UIndex > NbUKnots

        :param UIndex:
        :type UIndex: int
        :rtype: float

        """
        return _Geom.Geom_BSplineSurface_UKnot(self, *args)

    def UKnotDistribution(self, *args):
        """
        * Returns NonUniform or Uniform or QuasiUniform or PiecewiseBezier. If all the knots differ by a positive constant from the preceding knot in the U direction the B-spline surface can be : - Uniform if all the knots are of multiplicity 1, - QuasiUniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity Degree + 1, - PiecewiseBezier if the first and last knots have multiplicity Degree + 1 and if interior knots have multiplicity Degree otherwise the surface is non uniform in the U direction The tolerance criterion is Resolution from package gp.

        :rtype: GeomAbs_BSplKnotDistribution

        """
        return _Geom.Geom_BSplineSurface_UKnotDistribution(self, *args)

    def UKnots(self, *args):
        """
        * Returns the knots in the U direction. Raised if the length of Ku is not equal to the number of knots in the U direction.

        :param Ku:
        :type Ku: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_UKnots(self, *args)

    def UKnotSequence(self, *args):
        """
        * Returns the uknots sequence. In this sequence the knots with a multiplicity greater than 1 are repeated. Example : Ku = {k1, k1, k1, k2, k3, k3, k4, k4, k4} Raised if the length of Ku is not equal to NbUPoles + UDegree + 1

        :param Ku:
        :type Ku: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_UKnotSequence(self, *args)

    def UMultiplicity(self, *args):
        """
        * Returns the multiplicity value of knot of range UIndex in the u direction. Raised if UIndex < 1 or UIndex > NbUKnots.

        :param UIndex:
        :type UIndex: int
        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_UMultiplicity(self, *args)

    def UMultiplicities(self, *args):
        """
        * Returns the multiplicities of the knots in the U direction. Raised if the length of Mu is not equal to the number of knots in the U direction.

        :param Mu:
        :type Mu: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_UMultiplicities(self, *args)

    def VDegree(self, *args):
        """
        * Returns the degree of the normalized B-splines Ni,d in the V direction.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_VDegree(self, *args)

    def VKnot(self, *args):
        """
        * Returns the Knot value of range VIndex.

        :param VIndex:
        :type VIndex: int
        :rtype: float

        """
        return _Geom.Geom_BSplineSurface_VKnot(self, *args)

    def VKnotDistribution(self, *args):
        """
        * Returns NonUniform or Uniform or QuasiUniform or PiecewiseBezier. If all the knots differ by a positive constant from the preceding knot in the V direction the B-spline surface can be : - Uniform if all the knots are of multiplicity 1, - QuasiUniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity Degree + 1, - PiecewiseBezier if the first and last knots have multiplicity Degree + 1 and if interior knots have multiplicity Degree otherwise the surface is non uniform in the V direction. The tolerance criterion is Resolution from package gp.

        :rtype: GeomAbs_BSplKnotDistribution

        """
        return _Geom.Geom_BSplineSurface_VKnotDistribution(self, *args)

    def VKnots(self, *args):
        """
        * Returns the knots in the V direction. Raised if the length of Kv is not equal to the number of knots in the V direction.

        :param Kv:
        :type Kv: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_VKnots(self, *args)

    def VKnotSequence(self, *args):
        """
        * Returns the vknots sequence. In this sequence the knots with a multiplicity greater than 1 are repeated. Example : Kv = {k1, k1, k1, k2, k3, k3, k4, k4, k4} Raised if the length of Kv is not equal to NbVPoles + VDegree + 1

        :param Kv:
        :type Kv: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_VKnotSequence(self, *args)

    def VMultiplicity(self, *args):
        """
        * Returns the multiplicity value of knot of range VIndex in the v direction. Raised if VIndex < 1 or VIndex > NbVKnots

        :param VIndex:
        :type VIndex: int
        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_VMultiplicity(self, *args)

    def VMultiplicities(self, *args):
        """
        * Returns the multiplicities of the knots in the V direction. Raised if the length of Mv is not equal to the number of knots in the V direction.

        :param Mv:
        :type Mv: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_VMultiplicities(self, *args)

    def Weight(self, *args):
        """
        * Returns the weight value of range UIndex, VIndex. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :rtype: float

        """
        return _Geom.Geom_BSplineSurface_Weight(self, *args)

    def Weights(self, *args):
        """
        * Returns the weights of the B-spline surface. Raised if the length of W in the U and V direction is not equal to NbUPoles and NbVPoles. value and derivatives computation

        :param W:
        :type W: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_Weights(self, *args)

    def LocalD0(self, *args):
        """
        * Raised if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raised if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocalD0(self, *args)

    def LocalD1(self, *args):
        """
        * Raised if the local continuity of the surface is not C1 between the knots FromUK1, ToUK2 and FromVK1, ToVK2. Raised if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raised if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocalD1(self, *args)

    def LocalD2(self, *args):
        """
        * Raised if the local continuity of the surface is not C2 between the knots FromUK1, ToUK2 and FromVK1, ToVK2. Raised if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raised if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocalD2(self, *args)

    def LocalD3(self, *args):
        """
        * Raised if the local continuity of the surface is not C3 between the knots FromUK1, ToUK2 and FromVK1, ToVK2. Raised if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raised if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_LocalD3(self, *args)

    def LocalDN(self, *args):
        """
        * Raised if the local continuity of the surface is not CNu between the knots FromUK1, ToUK2 and CNv between the knots FromVK1, ToVK2. Raised if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raised if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_BSplineSurface_LocalDN(self, *args)

    def LocalValue(self, *args):
        """
        * Computes the point of parameter U, V on the BSpline surface patch defines between the knots UK1 UK2, VK1, VK2. U can be out of the bounds [Knot UK1, Knot UK2] and V can be outof the bounds [Knot VK1, Knot VK2] but for the computation we only use the definition of the surface between these knot values. Raises if FromUK1 = ToUK2 or FromVK1 = ToVK2. Raises if FromUK1, ToUK2 are not in the range [FirstUKnotIndex, LastUKnotIndex] or if FromVK1, ToVK2 are not in the range [FirstVKnotIndex, LastVKnotIndex]

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param FromUK1:
        :type FromUK1: int
        :param ToUK2:
        :type ToUK2: int
        :param FromVK1:
        :type FromVK1: int
        :param ToVK2:
        :type ToVK2: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BSplineSurface_LocalValue(self, *args)

    def UIso(self, *args):
        """
        * Computes the U isoparametric curve. A B-spline curve is returned.

        :param U:
        :type U: float
        :rtype: Handle_Geom_Curve

        * Computes the U isoparametric curve. If CheckRational=False, no try to make it non-rational. A B-spline curve is returned.

        :param U:
        :type U: float
        :param CheckRational:
        :type CheckRational: bool
        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_BSplineSurface_UIso(self, *args)

    def VIso(self, *args):
        """
        * Computes the V isoparametric curve. A B-spline curve is returned.

        :param V:
        :type V: float
        :rtype: Handle_Geom_Curve

        * Computes the V isoparametric curve. If CheckRational=False, no try to make it non-rational. A B-spline curve is returned. transformations

        :param V:
        :type V: float
        :param CheckRational:
        :type CheckRational: bool
        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_BSplineSurface_VIso(self, *args)

    def MaxDegree(*args):
        """
        * Returns the value of the maximum degree of the normalized B-spline basis functions in the u and v directions.

        :rtype: int

        """
        return _Geom.Geom_BSplineSurface_MaxDegree(*args)

    MaxDegree = staticmethod(MaxDegree)
    def Resolution(self, *args):
        """
        * Computes two tolerance values for this BSpline surface, based on the given tolerance in 3D space Tolerance3D. The tolerances computed are: - UTolerance in the u parametric direction, and - VTolerance in the v parametric direction. If f(u,v) is the equation of this BSpline surface, UTolerance and VTolerance guarantee that : | u1 - u0 | < UTolerance and | v1 - v0 | < VTolerance ====> |f (u1,v1) - f (u0,v0)| < Tolerance3D

        :param Tolerance3D:
        :type Tolerance3D: float
        :param UTolerance:
        :type UTolerance: float &
        :param VTolerance:
        :type VTolerance: float &
        :rtype: None

        """
        return _Geom.Geom_BSplineSurface_Resolution(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_BSplineSurface self)"""
        return _Geom.Geom_BSplineSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BSplineSurface self) -> Handle_Geom_BSplineSurface"""
        return _Geom.Geom_BSplineSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BSplineSurface.ExchangeUV = new_instancemethod(_Geom.Geom_BSplineSurface_ExchangeUV,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetUPeriodic = new_instancemethod(_Geom.Geom_BSplineSurface_SetUPeriodic,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetVPeriodic = new_instancemethod(_Geom.Geom_BSplineSurface_SetVPeriodic,None,Geom_BSplineSurface)
Geom_BSplineSurface.PeriodicNormalization = new_instancemethod(_Geom.Geom_BSplineSurface_PeriodicNormalization,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetUOrigin = new_instancemethod(_Geom.Geom_BSplineSurface_SetUOrigin,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetVOrigin = new_instancemethod(_Geom.Geom_BSplineSurface_SetVOrigin,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetUNotPeriodic = new_instancemethod(_Geom.Geom_BSplineSurface_SetUNotPeriodic,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetVNotPeriodic = new_instancemethod(_Geom.Geom_BSplineSurface_SetVNotPeriodic,None,Geom_BSplineSurface)
Geom_BSplineSurface.IncreaseDegree = new_instancemethod(_Geom.Geom_BSplineSurface_IncreaseDegree,None,Geom_BSplineSurface)
Geom_BSplineSurface.InsertUKnots = new_instancemethod(_Geom.Geom_BSplineSurface_InsertUKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.InsertVKnots = new_instancemethod(_Geom.Geom_BSplineSurface_InsertVKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.RemoveUKnot = new_instancemethod(_Geom.Geom_BSplineSurface_RemoveUKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.RemoveVKnot = new_instancemethod(_Geom.Geom_BSplineSurface_RemoveVKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.IncreaseUMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_IncreaseUMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.IncrementUMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_IncrementUMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.IncreaseVMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_IncreaseVMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.IncrementVMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_IncrementVMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.InsertUKnot = new_instancemethod(_Geom.Geom_BSplineSurface_InsertUKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.InsertVKnot = new_instancemethod(_Geom.Geom_BSplineSurface_InsertVKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.Segment = new_instancemethod(_Geom.Geom_BSplineSurface_Segment,None,Geom_BSplineSurface)
Geom_BSplineSurface.CheckAndSegment = new_instancemethod(_Geom.Geom_BSplineSurface_CheckAndSegment,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetUKnots = new_instancemethod(_Geom.Geom_BSplineSurface_SetUKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetUKnot = new_instancemethod(_Geom.Geom_BSplineSurface_SetUKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetVKnots = new_instancemethod(_Geom.Geom_BSplineSurface_SetVKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetVKnot = new_instancemethod(_Geom.Geom_BSplineSurface_SetVKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocateU = new_instancemethod(_Geom.Geom_BSplineSurface_LocateU,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocateV = new_instancemethod(_Geom.Geom_BSplineSurface_LocateV,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetPole = new_instancemethod(_Geom.Geom_BSplineSurface_SetPole,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetPoleCol = new_instancemethod(_Geom.Geom_BSplineSurface_SetPoleCol,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetPoleRow = new_instancemethod(_Geom.Geom_BSplineSurface_SetPoleRow,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetWeight = new_instancemethod(_Geom.Geom_BSplineSurface_SetWeight,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetWeightCol = new_instancemethod(_Geom.Geom_BSplineSurface_SetWeightCol,None,Geom_BSplineSurface)
Geom_BSplineSurface.SetWeightRow = new_instancemethod(_Geom.Geom_BSplineSurface_SetWeightRow,None,Geom_BSplineSurface)
Geom_BSplineSurface.MovePoint = new_instancemethod(_Geom.Geom_BSplineSurface_MovePoint,None,Geom_BSplineSurface)
Geom_BSplineSurface.IsURational = new_instancemethod(_Geom.Geom_BSplineSurface_IsURational,None,Geom_BSplineSurface)
Geom_BSplineSurface.IsVRational = new_instancemethod(_Geom.Geom_BSplineSurface_IsVRational,None,Geom_BSplineSurface)
Geom_BSplineSurface.IsCacheValid = new_instancemethod(_Geom.Geom_BSplineSurface_IsCacheValid,None,Geom_BSplineSurface)
Geom_BSplineSurface.FirstUKnotIndex = new_instancemethod(_Geom.Geom_BSplineSurface_FirstUKnotIndex,None,Geom_BSplineSurface)
Geom_BSplineSurface.FirstVKnotIndex = new_instancemethod(_Geom.Geom_BSplineSurface_FirstVKnotIndex,None,Geom_BSplineSurface)
Geom_BSplineSurface.LastUKnotIndex = new_instancemethod(_Geom.Geom_BSplineSurface_LastUKnotIndex,None,Geom_BSplineSurface)
Geom_BSplineSurface.LastVKnotIndex = new_instancemethod(_Geom.Geom_BSplineSurface_LastVKnotIndex,None,Geom_BSplineSurface)
Geom_BSplineSurface.NbUKnots = new_instancemethod(_Geom.Geom_BSplineSurface_NbUKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.NbUPoles = new_instancemethod(_Geom.Geom_BSplineSurface_NbUPoles,None,Geom_BSplineSurface)
Geom_BSplineSurface.NbVKnots = new_instancemethod(_Geom.Geom_BSplineSurface_NbVKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.NbVPoles = new_instancemethod(_Geom.Geom_BSplineSurface_NbVPoles,None,Geom_BSplineSurface)
Geom_BSplineSurface.Pole = new_instancemethod(_Geom.Geom_BSplineSurface_Pole,None,Geom_BSplineSurface)
Geom_BSplineSurface.Poles = new_instancemethod(_Geom.Geom_BSplineSurface_Poles,None,Geom_BSplineSurface)
Geom_BSplineSurface.UDegree = new_instancemethod(_Geom.Geom_BSplineSurface_UDegree,None,Geom_BSplineSurface)
Geom_BSplineSurface.UKnot = new_instancemethod(_Geom.Geom_BSplineSurface_UKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.UKnotDistribution = new_instancemethod(_Geom.Geom_BSplineSurface_UKnotDistribution,None,Geom_BSplineSurface)
Geom_BSplineSurface.UKnots = new_instancemethod(_Geom.Geom_BSplineSurface_UKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.UKnotSequence = new_instancemethod(_Geom.Geom_BSplineSurface_UKnotSequence,None,Geom_BSplineSurface)
Geom_BSplineSurface.UMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_UMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.UMultiplicities = new_instancemethod(_Geom.Geom_BSplineSurface_UMultiplicities,None,Geom_BSplineSurface)
Geom_BSplineSurface.VDegree = new_instancemethod(_Geom.Geom_BSplineSurface_VDegree,None,Geom_BSplineSurface)
Geom_BSplineSurface.VKnot = new_instancemethod(_Geom.Geom_BSplineSurface_VKnot,None,Geom_BSplineSurface)
Geom_BSplineSurface.VKnotDistribution = new_instancemethod(_Geom.Geom_BSplineSurface_VKnotDistribution,None,Geom_BSplineSurface)
Geom_BSplineSurface.VKnots = new_instancemethod(_Geom.Geom_BSplineSurface_VKnots,None,Geom_BSplineSurface)
Geom_BSplineSurface.VKnotSequence = new_instancemethod(_Geom.Geom_BSplineSurface_VKnotSequence,None,Geom_BSplineSurface)
Geom_BSplineSurface.VMultiplicity = new_instancemethod(_Geom.Geom_BSplineSurface_VMultiplicity,None,Geom_BSplineSurface)
Geom_BSplineSurface.VMultiplicities = new_instancemethod(_Geom.Geom_BSplineSurface_VMultiplicities,None,Geom_BSplineSurface)
Geom_BSplineSurface.Weight = new_instancemethod(_Geom.Geom_BSplineSurface_Weight,None,Geom_BSplineSurface)
Geom_BSplineSurface.Weights = new_instancemethod(_Geom.Geom_BSplineSurface_Weights,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalD0 = new_instancemethod(_Geom.Geom_BSplineSurface_LocalD0,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalD1 = new_instancemethod(_Geom.Geom_BSplineSurface_LocalD1,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalD2 = new_instancemethod(_Geom.Geom_BSplineSurface_LocalD2,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalD3 = new_instancemethod(_Geom.Geom_BSplineSurface_LocalD3,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalDN = new_instancemethod(_Geom.Geom_BSplineSurface_LocalDN,None,Geom_BSplineSurface)
Geom_BSplineSurface.LocalValue = new_instancemethod(_Geom.Geom_BSplineSurface_LocalValue,None,Geom_BSplineSurface)
Geom_BSplineSurface.UIso = new_instancemethod(_Geom.Geom_BSplineSurface_UIso,None,Geom_BSplineSurface)
Geom_BSplineSurface.VIso = new_instancemethod(_Geom.Geom_BSplineSurface_VIso,None,Geom_BSplineSurface)
Geom_BSplineSurface.Resolution = new_instancemethod(_Geom.Geom_BSplineSurface_Resolution,None,Geom_BSplineSurface)
Geom_BSplineSurface._kill_pointed = new_instancemethod(_Geom.Geom_BSplineSurface__kill_pointed,None,Geom_BSplineSurface)
Geom_BSplineSurface.GetHandle = new_instancemethod(_Geom.Geom_BSplineSurface_GetHandle,None,Geom_BSplineSurface)
Geom_BSplineSurface_swigregister = _Geom.Geom_BSplineSurface_swigregister
Geom_BSplineSurface_swigregister(Geom_BSplineSurface)

def Geom_BSplineSurface_MaxDegree(*args):
  """
    * Returns the value of the maximum degree of the normalized B-spline basis functions in the u and v directions.

    :rtype: int

    """
  return _Geom.Geom_BSplineSurface_MaxDegree(*args)

class Handle_Geom_BSplineSurface(Handle_Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BSplineSurface_swiginit(self,_Geom.new_Handle_Geom_BSplineSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BSplineSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BSplineSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_BSplineSurface_Nullify,None,Handle_Geom_BSplineSurface)
Handle_Geom_BSplineSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_BSplineSurface_IsNull,None,Handle_Geom_BSplineSurface)
Handle_Geom_BSplineSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_BSplineSurface_GetObject,None,Handle_Geom_BSplineSurface)
Handle_Geom_BSplineSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BSplineSurface__kill_pointed,None,Handle_Geom_BSplineSurface)
Handle_Geom_BSplineSurface_swigregister = _Geom.Handle_Geom_BSplineSurface_swigregister
Handle_Geom_BSplineSurface_swigregister(Handle_Geom_BSplineSurface)

def Handle_Geom_BSplineSurface_DownCast(*args):
  return _Geom.Handle_Geom_BSplineSurface_DownCast(*args)
Handle_Geom_BSplineSurface_DownCast = _Geom.Handle_Geom_BSplineSurface_DownCast

class Geom_BezierCurve(Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a non rational Bezier curve with a set of poles  CurvePoles. The weights are defaulted to all being 1.  Raises ConstructionError if the number of poles is greater than MaxDegree + 1  or lower than 2.

        :param CurvePoles:
        :type CurvePoles: TColgp_Array1OfPnt
        :rtype: None

        * Creates a rational Bezier curve with the set of poles CurvePoles and the set of weights PoleWeights . If all the weights are identical the curve is considered as non rational. Raises ConstructionError if the number of poles is greater than MaxDegree + 1 or lower than 2 or CurvePoles and CurveWeights have not the same length or one weight value is lower or equal to Resolution from package gp.

        :param CurvePoles:
        :type CurvePoles: TColgp_Array1OfPnt
        :param PoleWeights:
        :type PoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        _Geom.Geom_BezierCurve_swiginit(self,_Geom.new_Geom_BezierCurve(*args))
    def Increase(self, *args):
        """
        * Increases the degree of a bezier curve. Degree is the new degree of <self>. Raises ConstructionError if Degree is greater than MaxDegree or lower than 2 or lower than the initial degree of <self>.

        :param Degree:
        :type Degree: int
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_Increase(self, *args)

    def InsertPoleAfter(self, *args):
        """
        * Inserts a pole P after the pole of range Index. If the curve <self> is rational the weight value for the new pole of range Index is 1.0. raised if Index is not in the range [1, NbPoles] raised if the resulting number of poles is greater than MaxDegree + 1.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Inserts a pole with its weight in the set of poles after the pole of range Index. If the curve was non rational it can become rational if all the weights are not identical. Raised if Index is not in the range [1, NbPoles] Raised if the resulting number of poles is greater than MaxDegree + 1. Raised if Weight is lower or equal to Resolution from package gp.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_InsertPoleAfter(self, *args)

    def InsertPoleBefore(self, *args):
        """
        * Inserts a pole P before the pole of range Index. If the curve <self> is rational the weight value for the new pole of range Index is 1.0. Raised if Index is not in the range [1, NbPoles] Raised if the resulting number of poles is greater than MaxDegree + 1.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Inserts a pole with its weight in the set of poles after the pole of range Index. If the curve was non rational it can become rational if all the weights are not identical. Raised if Index is not in the range [1, NbPoles] Raised if the resulting number of poles is greater than MaxDegree + 1. Raised if Weight is lower or equal to Resolution from package gp.

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_InsertPoleBefore(self, *args)

    def RemovePole(self, *args):
        """
        * Removes the pole of range Index. If the curve was rational it can become non rational. Raised if Index is not in the range [1, NbPoles] Raised if Degree is lower than 2.

        :param Index:
        :type Index: int
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_RemovePole(self, *args)

    def Segment(self, *args):
        """
        * Segments the curve between U1 and U2 which can be out of the bounds of the curve. The curve is oriented from U1 to U2. The control points are modified, the first and the last point are not the same but the parametrization range is [0, 1] else it could not be a Bezier curve. Warnings : Even if <self> is not closed it can become closed after the segmentation for example if U1 or U2 are out of the bounds of the curve <self> or if the curve makes loop. After the segmentation the length of a curve can be null.

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_Segment(self, *args)

    def SetPole(self, *args):
        """
        * Substitutes the pole of range index with P. If the curve <self> is rational the weight of range Index is not modified. raiseD if Index is not in the range [1, NbPoles]

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Substitutes the pole and the weights of range Index. If the curve <self> is not rational it can become rational if all the weights are not identical. If the curve was rational it can become non rational if all the weights are identical. Raised if Index is not in the range [1, NbPoles] Raised if Weight <= Resolution from package gp

        :param Index:
        :type Index: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        """
        * Changes the weight of the pole of range Index. If the curve <self> is not rational it can become rational if all the weights are not identical. If the curve was rational it can become non rational if all the weights are identical. Raised if Index is not in the range [1, NbPoles] Raised if Weight <= Resolution from package gp

        :param Index:
        :type Index: int
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_SetWeight(self, *args)

    def IsRational(self, *args):
        """
        * Returns false if all the weights are identical. The tolerance criterion is Resolution from package gp.

        :rtype: bool

        """
        return _Geom.Geom_BezierCurve_IsRational(self, *args)

    def Degree(self, *args):
        """
        * Returns the polynomial degree of the curve. it is the number of poles - 1 point P and derivatives (V1, V2, V3) computation The Bezier Curve has a Polynomial representation so the parameter U can be out of the bounds of the curve.

        :rtype: int

        """
        return _Geom.Geom_BezierCurve_Degree(self, *args)

    def NbPoles(self, *args):
        """
        * Returns the number of poles of this Bezier curve.

        :rtype: int

        """
        return _Geom.Geom_BezierCurve_NbPoles(self, *args)

    def Pole(self, *args):
        """
        * Returns the pole of range Index. Raised if Index is not in the range [1, NbPoles]

        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BezierCurve_Pole(self, *args)

    def Poles(self, *args):
        """
        * Returns all the poles of the curve. Raised if the length of P is not equal to the number of poles.

        :param P:
        :type P: TColgp_Array1OfPnt
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_Poles(self, *args)

    def Weight(self, *args):
        """
        * Returns the weight of range Index. Raised if Index is not in the range [1, NbPoles]

        :param Index:
        :type Index: int
        :rtype: float

        """
        return _Geom.Geom_BezierCurve_Weight(self, *args)

    def Weights(self, *args):
        """
        * Returns all the weights of the curve. Raised if the length of W is not equal to the number of poles.

        :param W:
        :type W: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_Weights(self, *args)

    def MaxDegree(*args):
        """
        * Returns the value of the maximum polynomial degree of any Geom_BezierCurve curve. This value is 25.

        :rtype: int

        """
        return _Geom.Geom_BezierCurve_MaxDegree(*args)

    MaxDegree = staticmethod(MaxDegree)
    def Resolution(self, *args):
        """
        * Computes for this Bezier curve the parametric tolerance UTolerance for a given 3D tolerance Tolerance3D. If f(t) is the equation of this Bezier curve, UTolerance ensures that: |t1-t0| < UTolerance ===> |f(t1)-f(t0)| < Tolerance3D

        :param Tolerance3D:
        :type Tolerance3D: float
        :param UTolerance:
        :type UTolerance: float &
        :rtype: None

        """
        return _Geom.Geom_BezierCurve_Resolution(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_BezierCurve self)"""
        return _Geom.Geom_BezierCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BezierCurve self) -> Handle_Geom_BezierCurve"""
        return _Geom.Geom_BezierCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BezierCurve.Increase = new_instancemethod(_Geom.Geom_BezierCurve_Increase,None,Geom_BezierCurve)
Geom_BezierCurve.InsertPoleAfter = new_instancemethod(_Geom.Geom_BezierCurve_InsertPoleAfter,None,Geom_BezierCurve)
Geom_BezierCurve.InsertPoleBefore = new_instancemethod(_Geom.Geom_BezierCurve_InsertPoleBefore,None,Geom_BezierCurve)
Geom_BezierCurve.RemovePole = new_instancemethod(_Geom.Geom_BezierCurve_RemovePole,None,Geom_BezierCurve)
Geom_BezierCurve.Segment = new_instancemethod(_Geom.Geom_BezierCurve_Segment,None,Geom_BezierCurve)
Geom_BezierCurve.SetPole = new_instancemethod(_Geom.Geom_BezierCurve_SetPole,None,Geom_BezierCurve)
Geom_BezierCurve.SetWeight = new_instancemethod(_Geom.Geom_BezierCurve_SetWeight,None,Geom_BezierCurve)
Geom_BezierCurve.IsRational = new_instancemethod(_Geom.Geom_BezierCurve_IsRational,None,Geom_BezierCurve)
Geom_BezierCurve.Degree = new_instancemethod(_Geom.Geom_BezierCurve_Degree,None,Geom_BezierCurve)
Geom_BezierCurve.NbPoles = new_instancemethod(_Geom.Geom_BezierCurve_NbPoles,None,Geom_BezierCurve)
Geom_BezierCurve.Pole = new_instancemethod(_Geom.Geom_BezierCurve_Pole,None,Geom_BezierCurve)
Geom_BezierCurve.Poles = new_instancemethod(_Geom.Geom_BezierCurve_Poles,None,Geom_BezierCurve)
Geom_BezierCurve.Weight = new_instancemethod(_Geom.Geom_BezierCurve_Weight,None,Geom_BezierCurve)
Geom_BezierCurve.Weights = new_instancemethod(_Geom.Geom_BezierCurve_Weights,None,Geom_BezierCurve)
Geom_BezierCurve.Resolution = new_instancemethod(_Geom.Geom_BezierCurve_Resolution,None,Geom_BezierCurve)
Geom_BezierCurve._kill_pointed = new_instancemethod(_Geom.Geom_BezierCurve__kill_pointed,None,Geom_BezierCurve)
Geom_BezierCurve.GetHandle = new_instancemethod(_Geom.Geom_BezierCurve_GetHandle,None,Geom_BezierCurve)
Geom_BezierCurve_swigregister = _Geom.Geom_BezierCurve_swigregister
Geom_BezierCurve_swigregister(Geom_BezierCurve)

def Geom_BezierCurve_MaxDegree(*args):
  """
    * Returns the value of the maximum polynomial degree of any Geom_BezierCurve curve. This value is 25.

    :rtype: int

    """
  return _Geom.Geom_BezierCurve_MaxDegree(*args)

class Handle_Geom_BezierCurve(Handle_Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BezierCurve_swiginit(self,_Geom.new_Handle_Geom_BezierCurve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BezierCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BezierCurve.Nullify = new_instancemethod(_Geom.Handle_Geom_BezierCurve_Nullify,None,Handle_Geom_BezierCurve)
Handle_Geom_BezierCurve.IsNull = new_instancemethod(_Geom.Handle_Geom_BezierCurve_IsNull,None,Handle_Geom_BezierCurve)
Handle_Geom_BezierCurve.GetObject = new_instancemethod(_Geom.Handle_Geom_BezierCurve_GetObject,None,Handle_Geom_BezierCurve)
Handle_Geom_BezierCurve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BezierCurve__kill_pointed,None,Handle_Geom_BezierCurve)
Handle_Geom_BezierCurve_swigregister = _Geom.Handle_Geom_BezierCurve_swigregister
Handle_Geom_BezierCurve_swigregister(Handle_Geom_BezierCurve)

def Handle_Geom_BezierCurve_DownCast(*args):
  return _Geom.Handle_Geom_BezierCurve_DownCast(*args)
Handle_Geom_BezierCurve_DownCast = _Geom.Handle_Geom_BezierCurve_DownCast

class Geom_BezierSurface(Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a non-rational Bezier surface with a set of poles. Control points representation : SPoles(Uorigin,Vorigin) ...................SPoles(Uorigin,Vend) .  . .  . SPoles(Uend, Vorigin) .....................SPoles(Uend, Vend) For the double array the row indice corresponds to the parametric U direction and the columns indice corresponds to the parametric V direction. The weights are defaulted to all being 1. Raised if the number of poles of the surface is lower than 2 or greater than MaxDegree + 1 in one of the two directions U or V.

        :param SurfacePoles:
        :type SurfacePoles: TColgp_Array2OfPnt
        :rtype: None

        * //!---Purpose Creates a rational Bezier surface with a set of poles and a set of weights. For the double array the row indice corresponds to the parametric U direction and the columns indice corresponds to the parametric V direction. If all the weights are identical the surface is considered as non-rational (the tolerance criterion is Resolution from package gp). Raised if SurfacePoles and PoleWeights have not the same Rowlength or have not the same ColLength. Raised if PoleWeights (i, j) <= Resolution from gp; Raised if the number of poles of the surface is lower than 2 or greater than MaxDegree + 1 in one of the two directions U or V.

        :param SurfacePoles:
        :type SurfacePoles: TColgp_Array2OfPnt
        :param PoleWeights:
        :type PoleWeights: TColStd_Array2OfReal &
        :rtype: None

        """
        _Geom.Geom_BezierSurface_swiginit(self,_Geom.new_Geom_BezierSurface(*args))
    def ExchangeUV(self, *args):
        """
        * Exchanges the direction U and V on a Bezier surface As a consequence: - the poles and weights tables are transposed, - degrees, rational characteristics and so on are exchanged between the two parametric directions, and - the orientation of the surface is reversed.

        :rtype: None

        """
        return _Geom.Geom_BezierSurface_ExchangeUV(self, *args)

    def Increase(self, *args):
        """
        * Increases the degree of this Bezier surface in the two parametric directions. Raised if UDegree < UDegree <self> or VDegree < VDegree <self> Raised if the degree of the surface is greater than MaxDegree in one of the two directions U or V.

        :param UDeg:
        :type UDeg: int
        :param VDeg:
        :type VDeg: int
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_Increase(self, *args)

    def InsertPoleColAfter(self, *args):
        """
        * Inserts a column of poles. If the surface is rational the weights values associated with CPoles are equal defaulted to 1. Raised if Vindex < 1 or VIndex > NbVPoles. raises if VDegree is greater than MaxDegree. raises if the Length of CPoles is not equal to NbUPoles

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Inserts a column of poles and weights. If the surface was non-rational it can become rational. Raised if Vindex < 1 or VIndex > NbVPoles. Raised if . VDegree is greater than MaxDegree. . the Length of CPoles is not equal to NbUPoles . a weight value is lower or equal to Resolution from package gp

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_InsertPoleColAfter(self, *args)

    def InsertPoleColBefore(self, *args):
        """
        * Inserts a column of poles. If the surface is rational the weights values associated with CPoles are equal defaulted to 1. Raised if Vindex < 1 or VIndex > NbVPoles. Raised if VDegree is greater than MaxDegree. Raised if the Length of CPoles is not equal to NbUPoles

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Inserts a column of poles and weights. If the surface was non-rational it can become rational. Raised if Vindex < 1 or VIndex > NbVPoles. Raised if : . VDegree is greater than MaxDegree. . the Length of CPoles is not equal to NbUPoles . a weight value is lower or equal to Resolution from package gp

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_InsertPoleColBefore(self, *args)

    def InsertPoleRowAfter(self, *args):
        """
        * Inserts a row of poles. If the surface is rational the weights values associated with CPoles are equal defaulted to 1. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if UDegree is greater than MaxDegree. Raised if the Length of CPoles is not equal to NbVPoles

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Inserts a row of poles and weights. If the surface was non-rational it can become rational. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if : . UDegree is greater than MaxDegree. . the Length of CPoles is not equal to NbVPoles . a weight value is lower or equal to Resolution from package gp

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_InsertPoleRowAfter(self, *args)

    def InsertPoleRowBefore(self, *args):
        """
        * Inserts a row of poles. If the surface is rational the weights values associated with CPoles are equal defaulted to 1. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if UDegree is greater than MaxDegree. Raised if the Length of CPoles is not equal to NbVPoles

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Inserts a row of poles and weights. If the surface was non-rational it can become rational. Raised if Uindex < 1 or UIndex > NbUPoles. Raised if : . UDegree is greater than MaxDegree. . the Length of CPoles is not equal to NbVPoles . a weight value is lower or equal to Resolution from pacakage gp

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_InsertPoleRowBefore(self, *args)

    def RemovePoleCol(self, *args):
        """
        * Removes a column of poles. If the surface was rational it can become non-rational. Raised if NbVPoles <= 2 after removing, a Bezier surface must have at least two columns of poles. Raised if Vindex < 1 or VIndex > NbVPoles

        :param VIndex:
        :type VIndex: int
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_RemovePoleCol(self, *args)

    def RemovePoleRow(self, *args):
        """
        * Removes a row of poles. If the surface was rational it can become non-rational. Raised if NbUPoles <= 2 after removing, a Bezier surface must have at least two rows of poles. Raised if Uindex < 1 or UIndex > NbUPoles

        :param UIndex:
        :type UIndex: int
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_RemovePoleRow(self, *args)

    def Segment(self, *args):
        """
        * Modifies this Bezier surface by segmenting it between U1 and U2 in the u parametric direction, and between V1 and V2 in the v parametric direction. U1, U2, V1, and V2 can be outside the bounds of this surface. - U1 and U2 isoparametric Bezier curves, segmented between V1 and V2, become the two bounds of the surface in the v parametric direction (0. and 1. u isoparametric curves). - V1 and V2 isoparametric Bezier curves, segmented between U1 and U2, become the two bounds of the surface in the u parametric direction (0. and 1. v isoparametric curves). The poles and weights tables are modified, but the degree of this surface in the u and v parametric directions does not change. U1 can be greater than U2, and V1 can be greater than V2. In these cases, the corresponding parametric direction is inverted. The orientation of the surface is inverted if one (and only one) parametric direction is inverted.

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param V1:
        :type V1: float
        :param V2:
        :type V2: float
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_Segment(self, *args)

    def SetPole(self, *args):
        """
        * Modifies a pole value. If the surface is rational the weight of range (UIndex, VIndex) is not modified. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        * Substitutes the pole and the weight of range UIndex, VIndex. If the surface <self> is not rational it can become rational. if the surface was rational it can become non-rational. raises if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles. Raised if Weight <= Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param P:
        :type P: gp_Pnt
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetPole(self, *args)

    def SetPoleCol(self, *args):
        """
        * Modifies a column of poles. The length of CPoles can be lower but not greater than NbUPoles so you can modify just a part of the column. Raised if VIndex < 1 or VIndex > NbVPoles Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbUPoles

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Modifies a column of poles. If the surface was rational it can become non-rational If the surface was non-rational it can become rational. The length of CPoles can be lower but not greater than NbUPoles so you can modify just a part of the column. Raised if VIndex < 1 or VIndex > NbVPoles Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbUPoles Raised if CPoleWeights and CPoles have not the same bounds. Raised if one of the weight value CPoleWeights (i) is lower or equal to Resolution from package gp.

        :param VIndex:
        :type VIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetPoleCol(self, *args)

    def SetPoleRow(self, *args):
        """
        * Modifies a row of poles. The length of CPoles can be lower but not greater than NbVPoles so you can modify just a part of the row. Raised if UIndex < 1 or UIndex > NbUPoles Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbVPoles

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :rtype: None

        * Modifies a row of poles and weights. If the surface was rational it can become non-rational. If the surface was non-rational it can become rational. The length of CPoles can be lower but not greater than NbVPoles so you can modify just a part of the row. Raised if UIndex < 1 or UIndex > NbUPoles Raised if CPoles.Lower() < 1 or CPoles.Upper() > NbVPoles Raised if CPoleWeights and CPoles have not the same bounds. Raised if one of the weight value CPoleWeights (i) is lower or equal to Resolution from gp.

        :param UIndex:
        :type UIndex: int
        :param CPoles:
        :type CPoles: TColgp_Array1OfPnt
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetPoleRow(self, *args)

    def SetWeight(self, *args):
        """
        * Modifies the weight of the pole of range UIndex, VIndex. If the surface was non-rational it can become rational. If the surface was rational it can become non-rational. Raised if UIndex < 1 or UIndex > NbUPoles or VIndex < 1 or VIndex > NbVPoles. Raised if Weight <= Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :param Weight:
        :type Weight: float
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetWeight(self, *args)

    def SetWeightCol(self, *args):
        """
        * Modifies a column of weights. If the surface was rational it can become non-rational. If the surface was non-rational it can become rational. The length of CPoleWeights can be lower but not greater than NbUPoles. Raised if VIndex < 1 or VIndex > NbVPoles Raised if CPoleWeights.Lower() < 1 or CPoleWeights.Upper() > NbUPoles Raised if one of the weight value CPoleWeights (i) is lower or equal to Resolution from package gp.

        :param VIndex:
        :type VIndex: int
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetWeightCol(self, *args)

    def SetWeightRow(self, *args):
        """
        * Modifies a row of weights. If the surface was rational it can become non-rational. If the surface was non-rational it can become rational. The length of CPoleWeights can be lower but not greater than NbVPoles. Raised if UIndex < 1 or UIndex > NbUPoles Raised if CPoleWeights.Lower() < 1 or CPoleWeights.Upper() > NbVPoles Raised if one of the weight value CPoleWeights (i) is lower or equal to Resolution from package gp.

        :param UIndex:
        :type UIndex: int
        :param CPoleWeights:
        :type CPoleWeights: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_SetWeightRow(self, *args)

    def NbUPoles(self, *args):
        """
        * Returns the number of poles in the U direction.

        :rtype: int

        """
        return _Geom.Geom_BezierSurface_NbUPoles(self, *args)

    def NbVPoles(self, *args):
        """
        * Returns the number of poles in the V direction.

        :rtype: int

        """
        return _Geom.Geom_BezierSurface_NbVPoles(self, *args)

    def Pole(self, *args):
        """
        * Returns the pole of range UIndex, VIndex Raised if UIndex < 1 or UIndex > NbUPoles, or VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :rtype: gp_Pnt

        """
        return _Geom.Geom_BezierSurface_Pole(self, *args)

    def Poles(self, *args):
        """
        * Returns the poles of the Bezier surface. Raised if the length of P in the U an V direction is not equal to NbUPoles and NbVPoles.

        :param P:
        :type P: TColgp_Array2OfPnt
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_Poles(self, *args)

    def UDegree(self, *args):
        """
        * Returns the degree of the surface in the U direction it is NbUPoles - 1

        :rtype: int

        """
        return _Geom.Geom_BezierSurface_UDegree(self, *args)

    def VDegree(self, *args):
        """
        * Returns the degree of the surface in the V direction it is NbVPoles - 1

        :rtype: int

        """
        return _Geom.Geom_BezierSurface_VDegree(self, *args)

    def Weight(self, *args):
        """
        * Returns the weight of range UIndex, VIndex Raised if UIndex < 1 or UIndex > NbUPoles, or  VIndex < 1 or VIndex > NbVPoles.

        :param UIndex:
        :type UIndex: int
        :param VIndex:
        :type VIndex: int
        :rtype: float

        """
        return _Geom.Geom_BezierSurface_Weight(self, *args)

    def Weights(self, *args):
        """
        * Returns the weights of the Bezier surface. Raised if the length of W in the U an V direction is not equal to NbUPoles and NbVPoles.

        :param W:
        :type W: TColStd_Array2OfReal &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_Weights(self, *args)

    def IsURational(self, *args):
        """
        * Returns False if the weights are identical in the U direction, The tolerance criterion is Resolution from package gp. Example :  |1.0, 1.0, 1.0| if Weights = |0.5, 0.5, 0.5| returns False  |2.0, 2.0, 2.0|

        :rtype: bool

        """
        return _Geom.Geom_BezierSurface_IsURational(self, *args)

    def IsVRational(self, *args):
        """
        * Returns False if the weights are identical in the V direction, The tolerance criterion is Resolution from package gp. Example :  |1.0, 2.0, 0.5| if Weights = |1.0, 2.0, 0.5| returns False  |1.0, 2.0, 0.5|

        :rtype: bool

        """
        return _Geom.Geom_BezierSurface_IsVRational(self, *args)

    def MaxDegree(*args):
        """
        * Returns the value of the maximum polynomial degree of a Bezier surface. This value is 25.

        :rtype: int

        """
        return _Geom.Geom_BezierSurface_MaxDegree(*args)

    MaxDegree = staticmethod(MaxDegree)
    def Resolution(self, *args):
        """
        * Computes two tolerance values for this Bezier surface, based on the given tolerance in 3D space Tolerance3D. The tolerances computed are: - UTolerance in the u parametric direction, and - VTolerance in the v parametric direction. If f(u,v) is the equation of this Bezier surface, UTolerance and VTolerance guarantee that: | u1 - u0 | < UTolerance and | v1 - v0 | < VTolerance ====> |f (u1,v1) - f (u0,v0)| < Tolerance3D

        :param Tolerance3D:
        :type Tolerance3D: float
        :param UTolerance:
        :type UTolerance: float &
        :param VTolerance:
        :type VTolerance: float &
        :rtype: None

        """
        return _Geom.Geom_BezierSurface_Resolution(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_BezierSurface self)"""
        return _Geom.Geom_BezierSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_BezierSurface self) -> Handle_Geom_BezierSurface"""
        return _Geom.Geom_BezierSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_BezierSurface.ExchangeUV = new_instancemethod(_Geom.Geom_BezierSurface_ExchangeUV,None,Geom_BezierSurface)
Geom_BezierSurface.Increase = new_instancemethod(_Geom.Geom_BezierSurface_Increase,None,Geom_BezierSurface)
Geom_BezierSurface.InsertPoleColAfter = new_instancemethod(_Geom.Geom_BezierSurface_InsertPoleColAfter,None,Geom_BezierSurface)
Geom_BezierSurface.InsertPoleColBefore = new_instancemethod(_Geom.Geom_BezierSurface_InsertPoleColBefore,None,Geom_BezierSurface)
Geom_BezierSurface.InsertPoleRowAfter = new_instancemethod(_Geom.Geom_BezierSurface_InsertPoleRowAfter,None,Geom_BezierSurface)
Geom_BezierSurface.InsertPoleRowBefore = new_instancemethod(_Geom.Geom_BezierSurface_InsertPoleRowBefore,None,Geom_BezierSurface)
Geom_BezierSurface.RemovePoleCol = new_instancemethod(_Geom.Geom_BezierSurface_RemovePoleCol,None,Geom_BezierSurface)
Geom_BezierSurface.RemovePoleRow = new_instancemethod(_Geom.Geom_BezierSurface_RemovePoleRow,None,Geom_BezierSurface)
Geom_BezierSurface.Segment = new_instancemethod(_Geom.Geom_BezierSurface_Segment,None,Geom_BezierSurface)
Geom_BezierSurface.SetPole = new_instancemethod(_Geom.Geom_BezierSurface_SetPole,None,Geom_BezierSurface)
Geom_BezierSurface.SetPoleCol = new_instancemethod(_Geom.Geom_BezierSurface_SetPoleCol,None,Geom_BezierSurface)
Geom_BezierSurface.SetPoleRow = new_instancemethod(_Geom.Geom_BezierSurface_SetPoleRow,None,Geom_BezierSurface)
Geom_BezierSurface.SetWeight = new_instancemethod(_Geom.Geom_BezierSurface_SetWeight,None,Geom_BezierSurface)
Geom_BezierSurface.SetWeightCol = new_instancemethod(_Geom.Geom_BezierSurface_SetWeightCol,None,Geom_BezierSurface)
Geom_BezierSurface.SetWeightRow = new_instancemethod(_Geom.Geom_BezierSurface_SetWeightRow,None,Geom_BezierSurface)
Geom_BezierSurface.NbUPoles = new_instancemethod(_Geom.Geom_BezierSurface_NbUPoles,None,Geom_BezierSurface)
Geom_BezierSurface.NbVPoles = new_instancemethod(_Geom.Geom_BezierSurface_NbVPoles,None,Geom_BezierSurface)
Geom_BezierSurface.Pole = new_instancemethod(_Geom.Geom_BezierSurface_Pole,None,Geom_BezierSurface)
Geom_BezierSurface.Poles = new_instancemethod(_Geom.Geom_BezierSurface_Poles,None,Geom_BezierSurface)
Geom_BezierSurface.UDegree = new_instancemethod(_Geom.Geom_BezierSurface_UDegree,None,Geom_BezierSurface)
Geom_BezierSurface.VDegree = new_instancemethod(_Geom.Geom_BezierSurface_VDegree,None,Geom_BezierSurface)
Geom_BezierSurface.Weight = new_instancemethod(_Geom.Geom_BezierSurface_Weight,None,Geom_BezierSurface)
Geom_BezierSurface.Weights = new_instancemethod(_Geom.Geom_BezierSurface_Weights,None,Geom_BezierSurface)
Geom_BezierSurface.IsURational = new_instancemethod(_Geom.Geom_BezierSurface_IsURational,None,Geom_BezierSurface)
Geom_BezierSurface.IsVRational = new_instancemethod(_Geom.Geom_BezierSurface_IsVRational,None,Geom_BezierSurface)
Geom_BezierSurface.Resolution = new_instancemethod(_Geom.Geom_BezierSurface_Resolution,None,Geom_BezierSurface)
Geom_BezierSurface._kill_pointed = new_instancemethod(_Geom.Geom_BezierSurface__kill_pointed,None,Geom_BezierSurface)
Geom_BezierSurface.GetHandle = new_instancemethod(_Geom.Geom_BezierSurface_GetHandle,None,Geom_BezierSurface)
Geom_BezierSurface_swigregister = _Geom.Geom_BezierSurface_swigregister
Geom_BezierSurface_swigregister(Geom_BezierSurface)

def Geom_BezierSurface_MaxDegree(*args):
  """
    * Returns the value of the maximum polynomial degree of a Bezier surface. This value is 25.

    :rtype: int

    """
  return _Geom.Geom_BezierSurface_MaxDegree(*args)

class Handle_Geom_BezierSurface(Handle_Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_BezierSurface_swiginit(self,_Geom.new_Handle_Geom_BezierSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_BezierSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_BezierSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_BezierSurface_Nullify,None,Handle_Geom_BezierSurface)
Handle_Geom_BezierSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_BezierSurface_IsNull,None,Handle_Geom_BezierSurface)
Handle_Geom_BezierSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_BezierSurface_GetObject,None,Handle_Geom_BezierSurface)
Handle_Geom_BezierSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_BezierSurface__kill_pointed,None,Handle_Geom_BezierSurface)
Handle_Geom_BezierSurface_swigregister = _Geom.Handle_Geom_BezierSurface_swigregister
Handle_Geom_BezierSurface_swigregister(Handle_Geom_BezierSurface)

def Handle_Geom_BezierSurface_DownCast(*args):
  return _Geom.Handle_Geom_BezierSurface_DownCast(*args)
Handle_Geom_BezierSurface_DownCast = _Geom.Handle_Geom_BezierSurface_DownCast

class Geom_Circle(Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a circle by conversion of the gp_Circ circle C.

        :param C:
        :type C: gp_Circ
        :rtype: None

        * Constructs a circle of radius Radius, where A2 locates the circle and defines its orientation in 3D space such that: - the center of the circle is the origin of A2, - the origin, 'X Direction' and 'Y Direction' of A2 define the plane of the circle, - A2 is the local coordinate system of the circle. Note: It is possible to create a circle where Radius is equal to 0.0. raised if Radius < 0.

        :param A2:
        :type A2: gp_Ax2
        :param Radius:
        :type Radius: float
        :rtype: None

        """
        _Geom.Geom_Circle_swiginit(self,_Geom.new_Geom_Circle(*args))
    def SetCirc(self, *args):
        """
        * Set <self> so that <self> has the same geometric properties as C.

        :param C:
        :type C: gp_Circ
        :rtype: None

        """
        return _Geom.Geom_Circle_SetCirc(self, *args)

    def SetRadius(self, *args):
        """
        * Assigns the value R to the radius of this circle. Note: it is possible to have a circle with a radius equal to 0.0. Exceptions - Standard_ConstructionError if R is negative.

        :param R:
        :type R: float
        :rtype: None

        """
        return _Geom.Geom_Circle_SetRadius(self, *args)

    def Circ(self, *args):
        """
        * returns the non transient circle from gp with the same geometric properties as <self>.

        :rtype: gp_Circ

        """
        return _Geom.Geom_Circle_Circ(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius of this circle.

        :rtype: float

        """
        return _Geom.Geom_Circle_Radius(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Circle self)"""
        return _Geom.Geom_Circle__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Circle self) -> Handle_Geom_Circle"""
        return _Geom.Geom_Circle_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Circle.SetCirc = new_instancemethod(_Geom.Geom_Circle_SetCirc,None,Geom_Circle)
Geom_Circle.SetRadius = new_instancemethod(_Geom.Geom_Circle_SetRadius,None,Geom_Circle)
Geom_Circle.Circ = new_instancemethod(_Geom.Geom_Circle_Circ,None,Geom_Circle)
Geom_Circle.Radius = new_instancemethod(_Geom.Geom_Circle_Radius,None,Geom_Circle)
Geom_Circle._kill_pointed = new_instancemethod(_Geom.Geom_Circle__kill_pointed,None,Geom_Circle)
Geom_Circle.GetHandle = new_instancemethod(_Geom.Geom_Circle_GetHandle,None,Geom_Circle)
Geom_Circle_swigregister = _Geom.Geom_Circle_swigregister
Geom_Circle_swigregister(Geom_Circle)

class Handle_Geom_Circle(Handle_Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Circle_swiginit(self,_Geom.new_Handle_Geom_Circle(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Circle_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Circle.Nullify = new_instancemethod(_Geom.Handle_Geom_Circle_Nullify,None,Handle_Geom_Circle)
Handle_Geom_Circle.IsNull = new_instancemethod(_Geom.Handle_Geom_Circle_IsNull,None,Handle_Geom_Circle)
Handle_Geom_Circle.GetObject = new_instancemethod(_Geom.Handle_Geom_Circle_GetObject,None,Handle_Geom_Circle)
Handle_Geom_Circle._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Circle__kill_pointed,None,Handle_Geom_Circle)
Handle_Geom_Circle_swigregister = _Geom.Handle_Geom_Circle_swigregister
Handle_Geom_Circle_swigregister(Handle_Geom_Circle)

def Handle_Geom_Circle_DownCast(*args):
  return _Geom.Handle_Geom_Circle_DownCast(*args)
Handle_Geom_Circle_DownCast = _Geom.Handle_Geom_Circle_DownCast

class Geom_ConicalSurface(Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * A3 defines the local coordinate system of the conical surface. Ang is the conical surface semi-angle ]0, PI/2[. Radius is the radius of the circle Viso in the placement plane of the conical surface defined with 'XAxis' and 'YAxis'. The 'ZDirection' of A3 defines the direction of the surface's axis of symmetry. If the location point of A3 is the apex of the surface Radius = 0 . At the creation the parametrization of the surface is defined such that the normal Vector (N = D1U ^ D1V) is oriented towards the 'outside region' of the surface. Raised if Radius < 0.0 or Ang < Resolution from gp or Ang >= PI/2 - Resolution

        :param A3:
        :type A3: gp_Ax3
        :param Ang:
        :type Ang: float
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a ConicalSurface from a non transient Cone from package gp.

        :param C:
        :type C: gp_Cone
        :rtype: None

        """
        _Geom.Geom_ConicalSurface_swiginit(self,_Geom.new_Geom_ConicalSurface(*args))
    def SetCone(self, *args):
        """
        * Set <self> so that <self> has the same geometric properties as C.

        :param C:
        :type C: gp_Cone
        :rtype: None

        """
        return _Geom.Geom_ConicalSurface_SetCone(self, *args)

    def SetRadius(self, *args):
        """
        * Changes the radius of the conical surface in the placement plane (Z = 0, V = 0). The local coordinate system is not modified. Raised if R < 0.0

        :param R:
        :type R: float
        :rtype: None

        """
        return _Geom.Geom_ConicalSurface_SetRadius(self, *args)

    def SetSemiAngle(self, *args):
        """
        * Changes the semi angle of the conical surface. Raised if Ang < Resolution or Ang >= PI/2 - Resolution

        :param Ang:
        :type Ang: float
        :rtype: None

        """
        return _Geom.Geom_ConicalSurface_SetSemiAngle(self, *args)

    def Cone(self, *args):
        """
        * returns a non transient cone with the same geometric properties as <self>.

        :rtype: gp_Cone

        """
        return _Geom.Geom_ConicalSurface_Cone(self, *args)

    def Apex(self, *args):
        """
        * Computes the apex of this cone. It is on the negative side of the axis of revolution of this cone if the half-angle at the apex is positive, and on the positive side of the 'main Axis' if the half-angle is negative.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_ConicalSurface_Apex(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the coefficients of the implicit equation of the quadric in the absolute cartesian coordinate system : These coefficients are normalized. A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float &
        :param A2:
        :type A2: float &
        :param A3:
        :type A3: float &
        :param B1:
        :type B1: float &
        :param B2:
        :type B2: float &
        :param B3:
        :type B3: float &
        :param C1:
        :type C1: float &
        :param C2:
        :type C2: float &
        :param C3:
        :type C3: float &
        :param D:
        :type D: float &
        :rtype: None

        """
        return _Geom.Geom_ConicalSurface_Coefficients(self, *args)

    def RefRadius(self, *args):
        """
        * Returns the reference radius of this cone. The reference radius is the radius of the circle formed by the intersection of this cone and its reference plane (i.e. the plane defined by the origin, 'X Direction' and 'Y Direction' of the local coordinate system of this cone). If the apex of this cone is on the origin of the local coordinate system of this cone, the returned value is 0.

        :rtype: float

        """
        return _Geom.Geom_ConicalSurface_RefRadius(self, *args)

    def SemiAngle(self, *args):
        """
        * returns the semi-angle of the conical surface ]0.0, PI/2[.

        :rtype: float

        """
        return _Geom.Geom_ConicalSurface_SemiAngle(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_ConicalSurface self)"""
        return _Geom.Geom_ConicalSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_ConicalSurface self) -> Handle_Geom_ConicalSurface"""
        return _Geom.Geom_ConicalSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_ConicalSurface.SetCone = new_instancemethod(_Geom.Geom_ConicalSurface_SetCone,None,Geom_ConicalSurface)
Geom_ConicalSurface.SetRadius = new_instancemethod(_Geom.Geom_ConicalSurface_SetRadius,None,Geom_ConicalSurface)
Geom_ConicalSurface.SetSemiAngle = new_instancemethod(_Geom.Geom_ConicalSurface_SetSemiAngle,None,Geom_ConicalSurface)
Geom_ConicalSurface.Cone = new_instancemethod(_Geom.Geom_ConicalSurface_Cone,None,Geom_ConicalSurface)
Geom_ConicalSurface.Apex = new_instancemethod(_Geom.Geom_ConicalSurface_Apex,None,Geom_ConicalSurface)
Geom_ConicalSurface.Coefficients = new_instancemethod(_Geom.Geom_ConicalSurface_Coefficients,None,Geom_ConicalSurface)
Geom_ConicalSurface.RefRadius = new_instancemethod(_Geom.Geom_ConicalSurface_RefRadius,None,Geom_ConicalSurface)
Geom_ConicalSurface.SemiAngle = new_instancemethod(_Geom.Geom_ConicalSurface_SemiAngle,None,Geom_ConicalSurface)
Geom_ConicalSurface._kill_pointed = new_instancemethod(_Geom.Geom_ConicalSurface__kill_pointed,None,Geom_ConicalSurface)
Geom_ConicalSurface.GetHandle = new_instancemethod(_Geom.Geom_ConicalSurface_GetHandle,None,Geom_ConicalSurface)
Geom_ConicalSurface_swigregister = _Geom.Geom_ConicalSurface_swigregister
Geom_ConicalSurface_swigregister(Geom_ConicalSurface)

class Handle_Geom_ConicalSurface(Handle_Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_ConicalSurface_swiginit(self,_Geom.new_Handle_Geom_ConicalSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_ConicalSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_ConicalSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_ConicalSurface_Nullify,None,Handle_Geom_ConicalSurface)
Handle_Geom_ConicalSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_ConicalSurface_IsNull,None,Handle_Geom_ConicalSurface)
Handle_Geom_ConicalSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_ConicalSurface_GetObject,None,Handle_Geom_ConicalSurface)
Handle_Geom_ConicalSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_ConicalSurface__kill_pointed,None,Handle_Geom_ConicalSurface)
Handle_Geom_ConicalSurface_swigregister = _Geom.Handle_Geom_ConicalSurface_swigregister
Handle_Geom_ConicalSurface_swigregister(Handle_Geom_ConicalSurface)

def Handle_Geom_ConicalSurface_DownCast(*args):
  return _Geom.Handle_Geom_ConicalSurface_DownCast(*args)
Handle_Geom_ConicalSurface_DownCast = _Geom.Handle_Geom_ConicalSurface_DownCast

class Geom_CylindricalSurface(Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * A3 defines the local coordinate system of the cylindrical surface. The 'ZDirection' of A3 defines the direction of the surface's axis of symmetry. At the creation the parametrization of the surface is defined such that the normal Vector (N = D1U ^ D1V) is oriented towards the 'outside region' of the surface. Warnings : It is not forbidden to create a cylindrical surface with Radius = 0.0 Raised if Radius < 0.0

        :param A3:
        :type A3: gp_Ax3
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a CylindricalSurface from a non transient Cylinder from package gp.

        :param C:
        :type C: gp_Cylinder
        :rtype: None

        """
        _Geom.Geom_CylindricalSurface_swiginit(self,_Geom.new_Geom_CylindricalSurface(*args))
    def SetCylinder(self, *args):
        """
        * Set <self> so that <self> has the same geometric properties as C.

        :param C:
        :type C: gp_Cylinder
        :rtype: None

        """
        return _Geom.Geom_CylindricalSurface_SetCylinder(self, *args)

    def SetRadius(self, *args):
        """
        * Changes the radius of the cylinder. Raised if R < 0.0

        :param R:
        :type R: float
        :rtype: None

        """
        return _Geom.Geom_CylindricalSurface_SetRadius(self, *args)

    def Cylinder(self, *args):
        """
        * returns a non transient cylinder with the same geometric properties as <self>.

        :rtype: gp_Cylinder

        """
        return _Geom.Geom_CylindricalSurface_Cylinder(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the coefficients of the implicit equation of the quadric in the absolute cartesian coordinate system : These coefficients are normalized. A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float &
        :param A2:
        :type A2: float &
        :param A3:
        :type A3: float &
        :param B1:
        :type B1: float &
        :param B2:
        :type B2: float &
        :param B3:
        :type B3: float &
        :param C1:
        :type C1: float &
        :param C2:
        :type C2: float &
        :param C3:
        :type C3: float &
        :param D:
        :type D: float &
        :rtype: None

        """
        return _Geom.Geom_CylindricalSurface_Coefficients(self, *args)

    def Radius(self, *args):
        """
        * Returns the radius of this cylinder.

        :rtype: float

        """
        return _Geom.Geom_CylindricalSurface_Radius(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_CylindricalSurface self)"""
        return _Geom.Geom_CylindricalSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_CylindricalSurface self) -> Handle_Geom_CylindricalSurface"""
        return _Geom.Geom_CylindricalSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_CylindricalSurface.SetCylinder = new_instancemethod(_Geom.Geom_CylindricalSurface_SetCylinder,None,Geom_CylindricalSurface)
Geom_CylindricalSurface.SetRadius = new_instancemethod(_Geom.Geom_CylindricalSurface_SetRadius,None,Geom_CylindricalSurface)
Geom_CylindricalSurface.Cylinder = new_instancemethod(_Geom.Geom_CylindricalSurface_Cylinder,None,Geom_CylindricalSurface)
Geom_CylindricalSurface.Coefficients = new_instancemethod(_Geom.Geom_CylindricalSurface_Coefficients,None,Geom_CylindricalSurface)
Geom_CylindricalSurface.Radius = new_instancemethod(_Geom.Geom_CylindricalSurface_Radius,None,Geom_CylindricalSurface)
Geom_CylindricalSurface._kill_pointed = new_instancemethod(_Geom.Geom_CylindricalSurface__kill_pointed,None,Geom_CylindricalSurface)
Geom_CylindricalSurface.GetHandle = new_instancemethod(_Geom.Geom_CylindricalSurface_GetHandle,None,Geom_CylindricalSurface)
Geom_CylindricalSurface_swigregister = _Geom.Geom_CylindricalSurface_swigregister
Geom_CylindricalSurface_swigregister(Geom_CylindricalSurface)

class Handle_Geom_CylindricalSurface(Handle_Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_CylindricalSurface_swiginit(self,_Geom.new_Handle_Geom_CylindricalSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_CylindricalSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_CylindricalSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_CylindricalSurface_Nullify,None,Handle_Geom_CylindricalSurface)
Handle_Geom_CylindricalSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_CylindricalSurface_IsNull,None,Handle_Geom_CylindricalSurface)
Handle_Geom_CylindricalSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_CylindricalSurface_GetObject,None,Handle_Geom_CylindricalSurface)
Handle_Geom_CylindricalSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_CylindricalSurface__kill_pointed,None,Handle_Geom_CylindricalSurface)
Handle_Geom_CylindricalSurface_swigregister = _Geom.Handle_Geom_CylindricalSurface_swigregister
Handle_Geom_CylindricalSurface_swigregister(Handle_Geom_CylindricalSurface)

def Handle_Geom_CylindricalSurface_DownCast(*args):
  return _Geom.Handle_Geom_CylindricalSurface_DownCast(*args)
Handle_Geom_CylindricalSurface_DownCast = _Geom.Handle_Geom_CylindricalSurface_DownCast

class Geom_Ellipse(Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs an ellipse by conversion of the gp_Elips ellipse E.

        :param E:
        :type E: gp_Elips
        :rtype: None

        * Constructs an ellipse //!	defined by its major and minor radii, MajorRadius and MinorRadius, where A2 locates the ellipse and defines its orientation in 3D space such that: - the center of the ellipse is the origin of A2, - the 'X Direction' of A2 defines the major axis of the ellipse, i.e. the major radius MajorRadius is measured along this axis, - the 'Y Direction' of A2 defines the minor axis of the ellipse, i.e. the minor radius MinorRadius is measured along this axis, - A2 is the local coordinate system of the ellipse. Exceptions Standard_ConstructionError if: - MajorRadius is less than MinorRadius, or - MinorRadius is less than 0. Warning The Geom package does not prevent the construction of an ellipse where MajorRadius and MinorRadius are equal.

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _Geom.Geom_Ellipse_swiginit(self,_Geom.new_Geom_Ellipse(*args))
    def SetElips(self, *args):
        """
        * Converts the gp_Elips ellipse E into this ellipse.

        :param E:
        :type E: gp_Elips
        :rtype: None

        """
        return _Geom.Geom_Ellipse_SetElips(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Assigns a value to the major radius of this ellipse. ConstructionError raised if MajorRadius < MinorRadius.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _Geom.Geom_Ellipse_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Assigns a value to the minor radius of this ellipse. ConstructionError raised if MajorRadius < MinorRadius or if MinorRadius < 0.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _Geom.Geom_Ellipse_SetMinorRadius(self, *args)

    def Elips(self, *args):
        """
        * returns the non transient ellipse from gp with the same

        :rtype: gp_Elips

        """
        return _Geom.Geom_Ellipse_Elips(self, *args)

    def Directrix1(self, *args):
        """
        * This directrix is the line normal to the XAxis of the ellipse in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the ellipse, where e is the eccentricity of the ellipse. This line is parallel to the 'YAxis'. The intersection point between directrix1 and the 'XAxis' is the 'Location' point of the directrix1. This point is on the positive side of the 'XAxis'. Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle)

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Ellipse_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'Directrix1' with respect to the 'YAxis' of the ellipse. Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle).

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Ellipse_Directrix2(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance. It is the distance between the the two focus of the ellipse.

        :rtype: float

        """
        return _Geom.Geom_Ellipse_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the ellipse. This focus is on the positive side of the 'XAxis' of the ellipse.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Ellipse_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the ellipse. This focus is on the negative side of the 'XAxis' of the ellipse.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Ellipse_Focus2(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius of this ellipse.

        :rtype: float

        """
        return _Geom.Geom_Ellipse_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the minor radius of this ellipse.

        :rtype: float

        """
        return _Geom.Geom_Ellipse_MinorRadius(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (1 - e * e) * MajorRadius where e is the eccentricity of the ellipse. Returns 0 if MajorRadius = 0

        :rtype: float

        """
        return _Geom.Geom_Ellipse_Parameter(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Ellipse self)"""
        return _Geom.Geom_Ellipse__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Ellipse self) -> Handle_Geom_Ellipse"""
        return _Geom.Geom_Ellipse_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Ellipse.SetElips = new_instancemethod(_Geom.Geom_Ellipse_SetElips,None,Geom_Ellipse)
Geom_Ellipse.SetMajorRadius = new_instancemethod(_Geom.Geom_Ellipse_SetMajorRadius,None,Geom_Ellipse)
Geom_Ellipse.SetMinorRadius = new_instancemethod(_Geom.Geom_Ellipse_SetMinorRadius,None,Geom_Ellipse)
Geom_Ellipse.Elips = new_instancemethod(_Geom.Geom_Ellipse_Elips,None,Geom_Ellipse)
Geom_Ellipse.Directrix1 = new_instancemethod(_Geom.Geom_Ellipse_Directrix1,None,Geom_Ellipse)
Geom_Ellipse.Directrix2 = new_instancemethod(_Geom.Geom_Ellipse_Directrix2,None,Geom_Ellipse)
Geom_Ellipse.Focal = new_instancemethod(_Geom.Geom_Ellipse_Focal,None,Geom_Ellipse)
Geom_Ellipse.Focus1 = new_instancemethod(_Geom.Geom_Ellipse_Focus1,None,Geom_Ellipse)
Geom_Ellipse.Focus2 = new_instancemethod(_Geom.Geom_Ellipse_Focus2,None,Geom_Ellipse)
Geom_Ellipse.MajorRadius = new_instancemethod(_Geom.Geom_Ellipse_MajorRadius,None,Geom_Ellipse)
Geom_Ellipse.MinorRadius = new_instancemethod(_Geom.Geom_Ellipse_MinorRadius,None,Geom_Ellipse)
Geom_Ellipse.Parameter = new_instancemethod(_Geom.Geom_Ellipse_Parameter,None,Geom_Ellipse)
Geom_Ellipse._kill_pointed = new_instancemethod(_Geom.Geom_Ellipse__kill_pointed,None,Geom_Ellipse)
Geom_Ellipse.GetHandle = new_instancemethod(_Geom.Geom_Ellipse_GetHandle,None,Geom_Ellipse)
Geom_Ellipse_swigregister = _Geom.Geom_Ellipse_swigregister
Geom_Ellipse_swigregister(Geom_Ellipse)

class Handle_Geom_Ellipse(Handle_Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Ellipse_swiginit(self,_Geom.new_Handle_Geom_Ellipse(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Ellipse_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Ellipse.Nullify = new_instancemethod(_Geom.Handle_Geom_Ellipse_Nullify,None,Handle_Geom_Ellipse)
Handle_Geom_Ellipse.IsNull = new_instancemethod(_Geom.Handle_Geom_Ellipse_IsNull,None,Handle_Geom_Ellipse)
Handle_Geom_Ellipse.GetObject = new_instancemethod(_Geom.Handle_Geom_Ellipse_GetObject,None,Handle_Geom_Ellipse)
Handle_Geom_Ellipse._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Ellipse__kill_pointed,None,Handle_Geom_Ellipse)
Handle_Geom_Ellipse_swigregister = _Geom.Handle_Geom_Ellipse_swigregister
Handle_Geom_Ellipse_swigregister(Handle_Geom_Ellipse)

def Handle_Geom_Ellipse_DownCast(*args):
  return _Geom.Handle_Geom_Ellipse_DownCast(*args)
Handle_Geom_Ellipse_DownCast = _Geom.Handle_Geom_Ellipse_DownCast

class Geom_Hyperbola(Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a hyperbola by conversion of the gp_Hypr hyperbola H.

        :param H:
        :type H: gp_Hypr
        :rtype: None

        * Constructs a hyperbola defined by its major and minor radii, MajorRadius and MinorRadius, where A2 locates the hyperbola and defines its orientation in 3D space such that: - the center of the hyperbola is the origin of A2, - the 'X Direction' of A2 defines the major axis of the hyperbola, i.e. the major radius MajorRadius is measured along this axis, - the 'Y Direction' of A2 defines the minor axis of the hyperbola, i.e. the minor radius MinorRadius is measured along this axis, - A2 is the local coordinate system of the hyperbola. Exceptions Standard_ConstructionError if: - MajorRadius is less than 0.0, - MinorRadius is less than 0.0.

        :param A2:
        :type A2: gp_Ax2
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        _Geom.Geom_Hyperbola_swiginit(self,_Geom.new_Geom_Hyperbola(*args))
    def SetHypr(self, *args):
        """
        * Converts the gp_Hypr hyperbola H into this hyperbola.

        :param H:
        :type H: gp_Hypr
        :rtype: None

        """
        return _Geom.Geom_Hyperbola_SetHypr(self, *args)

    def SetMajorRadius(self, *args):
        """
        * Assigns a value to the major radius of this hyperbola. Exceptions Standard_ConstructionError if: - MajorRadius is less than 0.0, or - MinorRadius is less than 0.0.Raised if MajorRadius < 0.0

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _Geom.Geom_Hyperbola_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Assigns a value to the minor radius of this hyperbola. Exceptions Standard_ConstructionError if: - MajorRadius is less than 0.0, or - MinorRadius is less than 0.0.Raised if MajorRadius < 0.0

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _Geom.Geom_Hyperbola_SetMinorRadius(self, *args)

    def Hypr(self, *args):
        """
        * returns the non transient parabola from gp with the same geometric properties as <self>.

        :rtype: gp_Hypr

        """
        return _Geom.Geom_Hyperbola_Hypr(self, *args)

    def Asymptote1(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = (B/A)*X. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Hyperbola_Asymptote1(self, *args)

    def Asymptote2(self, *args):
        """
        * In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = -(B/A)*X. Raises ConstructionError if MajorRadius = 0.0

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Hyperbola_Asymptote2(self, *args)

    def ConjugateBranch1(self, *args):
        """
        * This branch of hyperbola is on the positive side of the YAxis of <self>.

        :rtype: gp_Hypr

        """
        return _Geom.Geom_Hyperbola_ConjugateBranch1(self, *args)

    def ConjugateBranch2(self, *args):
        """
        * This branch of hyperbola is on the negative side of the YAxis of <self>. Note: The diagram given under the class purpose indicates where these two branches of hyperbola are positioned in relation to this branch of hyperbola.

        :rtype: gp_Hypr

        """
        return _Geom.Geom_Hyperbola_ConjugateBranch2(self, *args)

    def Directrix1(self, *args):
        """
        * This directrix is the line normal to the XAxis of the hyperbola in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. This line is parallel to the YAxis. The intersection point between directrix1 and the XAxis is the location point of the directrix1. This point is on the positive side of the XAxis.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Hyperbola_Directrix1(self, *args)

    def Directrix2(self, *args):
        """
        * This line is obtained by the symmetrical transformation of 'directrix1' with respect to the YAxis of the hyperbola.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Hyperbola_Directrix2(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance. It is the distance between the two focus of the hyperbola.

        :rtype: float

        """
        return _Geom.Geom_Hyperbola_Focal(self, *args)

    def Focus1(self, *args):
        """
        * Returns the first focus of the hyperbola. This focus is on the positive side of the XAxis of the hyperbola.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Hyperbola_Focus1(self, *args)

    def Focus2(self, *args):
        """
        * Returns the second focus of the hyperbola. This focus is on the negative side of the XAxis of the hyperbola.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Hyperbola_Focus2(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major or minor radius of this hyperbola. The major radius is also the distance between the center of the hyperbola and the apex of the main branch (located on the 'X Axis' of the hyperbola).

        :rtype: float

        """
        return _Geom.Geom_Hyperbola_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the major or minor radius of this hyperbola. The minor radius is also the distance between the center of the hyperbola and the apex of a conjugate branch (located on the 'Y Axis' of the hyperbola).

        :rtype: float

        """
        return _Geom.Geom_Hyperbola_MinorRadius(self, *args)

    def OtherBranch(self, *args):
        """
        * Computes the 'other' branch of this hyperbola. This is the symmetrical branch with respect to the center of this hyperbola. Note: The diagram given under the class purpose indicates where the 'other' branch is positioned in relation to this branch of the hyperbola.

        :rtype: gp_Hypr

        """
        return _Geom.Geom_Hyperbola_OtherBranch(self, *args)

    def Parameter(self, *args):
        """
        * Returns p = (e * e - 1) * MajorRadius where e is the eccentricity of the hyperbola. raised if MajorRadius = 0.0

        :rtype: float

        """
        return _Geom.Geom_Hyperbola_Parameter(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Hyperbola self)"""
        return _Geom.Geom_Hyperbola__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Hyperbola self) -> Handle_Geom_Hyperbola"""
        return _Geom.Geom_Hyperbola_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Hyperbola.SetHypr = new_instancemethod(_Geom.Geom_Hyperbola_SetHypr,None,Geom_Hyperbola)
Geom_Hyperbola.SetMajorRadius = new_instancemethod(_Geom.Geom_Hyperbola_SetMajorRadius,None,Geom_Hyperbola)
Geom_Hyperbola.SetMinorRadius = new_instancemethod(_Geom.Geom_Hyperbola_SetMinorRadius,None,Geom_Hyperbola)
Geom_Hyperbola.Hypr = new_instancemethod(_Geom.Geom_Hyperbola_Hypr,None,Geom_Hyperbola)
Geom_Hyperbola.Asymptote1 = new_instancemethod(_Geom.Geom_Hyperbola_Asymptote1,None,Geom_Hyperbola)
Geom_Hyperbola.Asymptote2 = new_instancemethod(_Geom.Geom_Hyperbola_Asymptote2,None,Geom_Hyperbola)
Geom_Hyperbola.ConjugateBranch1 = new_instancemethod(_Geom.Geom_Hyperbola_ConjugateBranch1,None,Geom_Hyperbola)
Geom_Hyperbola.ConjugateBranch2 = new_instancemethod(_Geom.Geom_Hyperbola_ConjugateBranch2,None,Geom_Hyperbola)
Geom_Hyperbola.Directrix1 = new_instancemethod(_Geom.Geom_Hyperbola_Directrix1,None,Geom_Hyperbola)
Geom_Hyperbola.Directrix2 = new_instancemethod(_Geom.Geom_Hyperbola_Directrix2,None,Geom_Hyperbola)
Geom_Hyperbola.Focal = new_instancemethod(_Geom.Geom_Hyperbola_Focal,None,Geom_Hyperbola)
Geom_Hyperbola.Focus1 = new_instancemethod(_Geom.Geom_Hyperbola_Focus1,None,Geom_Hyperbola)
Geom_Hyperbola.Focus2 = new_instancemethod(_Geom.Geom_Hyperbola_Focus2,None,Geom_Hyperbola)
Geom_Hyperbola.MajorRadius = new_instancemethod(_Geom.Geom_Hyperbola_MajorRadius,None,Geom_Hyperbola)
Geom_Hyperbola.MinorRadius = new_instancemethod(_Geom.Geom_Hyperbola_MinorRadius,None,Geom_Hyperbola)
Geom_Hyperbola.OtherBranch = new_instancemethod(_Geom.Geom_Hyperbola_OtherBranch,None,Geom_Hyperbola)
Geom_Hyperbola.Parameter = new_instancemethod(_Geom.Geom_Hyperbola_Parameter,None,Geom_Hyperbola)
Geom_Hyperbola._kill_pointed = new_instancemethod(_Geom.Geom_Hyperbola__kill_pointed,None,Geom_Hyperbola)
Geom_Hyperbola.GetHandle = new_instancemethod(_Geom.Geom_Hyperbola_GetHandle,None,Geom_Hyperbola)
Geom_Hyperbola_swigregister = _Geom.Geom_Hyperbola_swigregister
Geom_Hyperbola_swigregister(Geom_Hyperbola)

class Handle_Geom_Hyperbola(Handle_Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Hyperbola_swiginit(self,_Geom.new_Handle_Geom_Hyperbola(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Hyperbola_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Hyperbola.Nullify = new_instancemethod(_Geom.Handle_Geom_Hyperbola_Nullify,None,Handle_Geom_Hyperbola)
Handle_Geom_Hyperbola.IsNull = new_instancemethod(_Geom.Handle_Geom_Hyperbola_IsNull,None,Handle_Geom_Hyperbola)
Handle_Geom_Hyperbola.GetObject = new_instancemethod(_Geom.Handle_Geom_Hyperbola_GetObject,None,Handle_Geom_Hyperbola)
Handle_Geom_Hyperbola._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Hyperbola__kill_pointed,None,Handle_Geom_Hyperbola)
Handle_Geom_Hyperbola_swigregister = _Geom.Handle_Geom_Hyperbola_swigregister
Handle_Geom_Hyperbola_swigregister(Handle_Geom_Hyperbola)

def Handle_Geom_Hyperbola_DownCast(*args):
  return _Geom.Handle_Geom_Hyperbola_DownCast(*args)
Handle_Geom_Hyperbola_DownCast = _Geom.Handle_Geom_Hyperbola_DownCast

class Geom_Parabola(Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a parabola from a non transient one.

        :param Prb:
        :type Prb: gp_Parab
        :rtype: None

        * Creates a parabola with its local coordinate system 'A2' and it's focal length 'Focal'. The XDirection of A2 defines the axis of symmetry of the parabola. The YDirection of A2 is parallel to the directrix of the parabola. The Location point of A2 is the vertex of the parabola Raised if Focal < 0.0

        :param A2:
        :type A2: gp_Ax2
        :param Focal:
        :type Focal: float
        :rtype: None

        * D is the directrix of the parabola and F the focus point. The symmetry axis (XAxis) of the parabola is normal to the directrix and pass through the focus point F, but its location point is the vertex of the parabola. The YAxis of the parabola is parallel to D and its location point is the vertex of the parabola. The normal to the plane of the parabola is the cross product between the XAxis and the YAxis.

        :param D:
        :type D: gp_Ax1
        :param F:
        :type F: gp_Pnt
        :rtype: None

        """
        _Geom.Geom_Parabola_swiginit(self,_Geom.new_Geom_Parabola(*args))
    def SetFocal(self, *args):
        """
        * Assigns the value Focal to the focal distance of this parabola. Exceptions Standard_ConstructionError if Focal is negative.

        :param Focal:
        :type Focal: float
        :rtype: None

        """
        return _Geom.Geom_Parabola_SetFocal(self, *args)

    def SetParab(self, *args):
        """
        * Converts the gp_Parab parabola Prb into this parabola.

        :param Prb:
        :type Prb: gp_Parab
        :rtype: None

        """
        return _Geom.Geom_Parabola_SetParab(self, *args)

    def Parab(self, *args):
        """
        * Returns the non transient parabola from gp with the same geometric properties as <self>.

        :rtype: gp_Parab

        """
        return _Geom.Geom_Parabola_Parab(self, *args)

    def Directrix(self, *args):
        """
        * Computes the directrix of this parabola. This is a line normal to the axis of symmetry, in the plane of this parabola, located on the negative side of its axis of symmetry, at a distance from the apex equal to the focal length. The directrix is returned as an axis (gp_Ax1 object), where the origin is located on the 'X Axis' of this parabola.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_Parabola_Directrix(self, *args)

    def Focus(self, *args):
        """
        * Computes the focus of this parabola. The focus is on the positive side of the 'X Axis' of the local coordinate system of the parabola.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_Parabola_Focus(self, *args)

    def Focal(self, *args):
        """
        * Computes the focal distance of this parabola The focal distance is the distance between the apex and the focus of the parabola.

        :rtype: float

        """
        return _Geom.Geom_Parabola_Focal(self, *args)

    def Parameter(self, *args):
        """
        * Computes the parameter of this parabola which is the distance between its focus and its directrix. This distance is twice the focal length. If P is the parameter of the parabola, the equation of the parabola in its local coordinate system is: Y**2 = 2.*P*X.

        :rtype: float

        """
        return _Geom.Geom_Parabola_Parameter(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Parabola self)"""
        return _Geom.Geom_Parabola__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Parabola self) -> Handle_Geom_Parabola"""
        return _Geom.Geom_Parabola_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Parabola.SetFocal = new_instancemethod(_Geom.Geom_Parabola_SetFocal,None,Geom_Parabola)
Geom_Parabola.SetParab = new_instancemethod(_Geom.Geom_Parabola_SetParab,None,Geom_Parabola)
Geom_Parabola.Parab = new_instancemethod(_Geom.Geom_Parabola_Parab,None,Geom_Parabola)
Geom_Parabola.Directrix = new_instancemethod(_Geom.Geom_Parabola_Directrix,None,Geom_Parabola)
Geom_Parabola.Focus = new_instancemethod(_Geom.Geom_Parabola_Focus,None,Geom_Parabola)
Geom_Parabola.Focal = new_instancemethod(_Geom.Geom_Parabola_Focal,None,Geom_Parabola)
Geom_Parabola.Parameter = new_instancemethod(_Geom.Geom_Parabola_Parameter,None,Geom_Parabola)
Geom_Parabola._kill_pointed = new_instancemethod(_Geom.Geom_Parabola__kill_pointed,None,Geom_Parabola)
Geom_Parabola.GetHandle = new_instancemethod(_Geom.Geom_Parabola_GetHandle,None,Geom_Parabola)
Geom_Parabola_swigregister = _Geom.Geom_Parabola_swigregister
Geom_Parabola_swigregister(Geom_Parabola)

class Handle_Geom_Parabola(Handle_Geom_Conic):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Parabola_swiginit(self,_Geom.new_Handle_Geom_Parabola(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Parabola_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Parabola.Nullify = new_instancemethod(_Geom.Handle_Geom_Parabola_Nullify,None,Handle_Geom_Parabola)
Handle_Geom_Parabola.IsNull = new_instancemethod(_Geom.Handle_Geom_Parabola_IsNull,None,Handle_Geom_Parabola)
Handle_Geom_Parabola.GetObject = new_instancemethod(_Geom.Handle_Geom_Parabola_GetObject,None,Handle_Geom_Parabola)
Handle_Geom_Parabola._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Parabola__kill_pointed,None,Handle_Geom_Parabola)
Handle_Geom_Parabola_swigregister = _Geom.Handle_Geom_Parabola_swigregister
Handle_Geom_Parabola_swigregister(Handle_Geom_Parabola)

def Handle_Geom_Parabola_DownCast(*args):
  return _Geom.Handle_Geom_Parabola_DownCast(*args)
Handle_Geom_Parabola_DownCast = _Geom.Handle_Geom_Parabola_DownCast

class Geom_Plane(Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Creates a plane located in 3D space with an axis placement three axis. The 'ZDirection' of 'A3' is the direction normal to the plane. The 'Location' point of 'A3' is the origin of the plane. The 'XDirection' and 'YDirection' of 'A3' define the directions of the U isoparametric and V isoparametric curves.

        :param A3:
        :type A3: gp_Ax3
        :rtype: None

        * Creates a plane from a non transient plane from package gp.

        :param Pl:
        :type Pl: gp_Pln
        :rtype: None

        * P is the 'Location' point or origin of the plane. V is the direction normal to the plane.

        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Dir
        :rtype: None

        * Creates a plane from its cartesian equation : Ax + By + Cz + D = 0.0 Raised if Sqrt (A*A + B*B + C*C) <= Resolution from gp

        :param A:
        :type A: float
        :param B:
        :type B: float
        :param C:
        :type C: float
        :param D:
        :type D: float
        :rtype: None

        """
        _Geom.Geom_Plane_swiginit(self,_Geom.new_Geom_Plane(*args))
    def SetPln(self, *args):
        """
        * Set <self> so that <self> has the same geometric properties as Pl.

        :param Pl:
        :type Pl: gp_Pln
        :rtype: None

        """
        return _Geom.Geom_Plane_SetPln(self, *args)

    def Pln(self, *args):
        """
        * Converts this plane into a gp_Pln plane.

        :rtype: gp_Pln

        """
        return _Geom.Geom_Plane_Pln(self, *args)

    def Coefficients(self, *args):
        """
        * Computes the normalized coefficients of the plane's cartesian equation : Ax + By + Cz + D = 0.0

        :param A:
        :type A: float &
        :param B:
        :type B: float &
        :param C:
        :type C: float &
        :param D:
        :type D: float &
        :rtype: None

        """
        return _Geom.Geom_Plane_Coefficients(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_Plane self)"""
        return _Geom.Geom_Plane__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_Plane self) -> Handle_Geom_Plane"""
        return _Geom.Geom_Plane_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_Plane.SetPln = new_instancemethod(_Geom.Geom_Plane_SetPln,None,Geom_Plane)
Geom_Plane.Pln = new_instancemethod(_Geom.Geom_Plane_Pln,None,Geom_Plane)
Geom_Plane.Coefficients = new_instancemethod(_Geom.Geom_Plane_Coefficients,None,Geom_Plane)
Geom_Plane._kill_pointed = new_instancemethod(_Geom.Geom_Plane__kill_pointed,None,Geom_Plane)
Geom_Plane.GetHandle = new_instancemethod(_Geom.Geom_Plane_GetHandle,None,Geom_Plane)
Geom_Plane_swigregister = _Geom.Geom_Plane_swigregister
Geom_Plane_swigregister(Geom_Plane)

class Handle_Geom_Plane(Handle_Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_Plane_swiginit(self,_Geom.new_Handle_Geom_Plane(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_Plane_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_Plane.Nullify = new_instancemethod(_Geom.Handle_Geom_Plane_Nullify,None,Handle_Geom_Plane)
Handle_Geom_Plane.IsNull = new_instancemethod(_Geom.Handle_Geom_Plane_IsNull,None,Handle_Geom_Plane)
Handle_Geom_Plane.GetObject = new_instancemethod(_Geom.Handle_Geom_Plane_GetObject,None,Handle_Geom_Plane)
Handle_Geom_Plane._kill_pointed = new_instancemethod(_Geom.Handle_Geom_Plane__kill_pointed,None,Handle_Geom_Plane)
Handle_Geom_Plane_swigregister = _Geom.Handle_Geom_Plane_swigregister
Handle_Geom_Plane_swigregister(Handle_Geom_Plane)

def Handle_Geom_Plane_DownCast(*args):
  return _Geom.Handle_Geom_Plane_DownCast(*args)
Handle_Geom_Plane_DownCast = _Geom.Handle_Geom_Plane_DownCast

class Geom_RectangularTrimmedSurface(Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * The U parametric direction of the surface is oriented from U1 to U2. The V parametric direction of the surface is oriented from V1 to V2. These two directions define the orientation of the surface (normal). If the surface is not periodic USense and VSense are not used for the construction. If the surface S is periodic in one direction USense and VSense give the available part of the surface. By default in this case the surface has the same orientation as the basis surface S. The returned surface is not closed and not periodic. ConstructionError Raised if S is not periodic in the UDirection and U1 or U2 are out of the bounds of S. S is not periodic in the VDirection and V1 or V2 are out of the bounds of S. U1 = U2 or V1 = V2

        :param S:
        :type S: Handle_Geom_Surface &
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param V1:
        :type V1: float
        :param V2:
        :type V2: float
        :param USense: default value is Standard_True
        :type USense: bool
        :param VSense: default value is Standard_True
        :type VSense: bool
        :rtype: None

        * The basis surface S is only trim in one parametric direction. If UTrim = True the surface is trimmed in the U parametric direction else the surface is trimmed in the V parametric direction. In the considered parametric direction the resulting surface is oriented from Param1 to Param2. If S is periodic Sense gives the available part of the surface. By default the trimmed surface has the same orientation as the basis surface S in the considered parametric direction (Sense = True). If the basis surface S is closed or periodic in the parametric direction opposite to the trimming direction the trimmed surface has the same characteristics as the surface S in this direction. Warnings : In this package the entities are not shared. The RectangularTrimmedSurface is built with a copy of the surface S. So when S is modified the RectangularTrimmedSurface is not modified Raised if S is not periodic in the considered parametric direction and Param1 or Param2 are out of the bounds of S. Param1 = Param2

        :param S:
        :type S: Handle_Geom_Surface &
        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param UTrim:
        :type UTrim: bool
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        """
        _Geom.Geom_RectangularTrimmedSurface_swiginit(self,_Geom.new_Geom_RectangularTrimmedSurface(*args))
    def SetTrim(self, *args):
        """
        * Modifies this patch by changing the trim values applied to the original surface The u parametric direction of this patch is oriented from U1 to U2. The v parametric direction of this patch is oriented from V1 to V2. USense and VSense are used for the construction only if the surface is periodic in the corresponding parametric direction, and define the available part of the surface; by default in this case, this patch has the same orientation as the basis surface. Raised if The BasisSurface is not periodic in the UDirection and U1 or U2 are out of the bounds of the BasisSurface. The BasisSurface is not periodic in the VDirection and V1 or V2 are out of the bounds of the BasisSurface. U1 = U2 or V1 = V2

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param V1:
        :type V1: float
        :param V2:
        :type V2: float
        :param USense: default value is Standard_True
        :type USense: bool
        :param VSense: default value is Standard_True
        :type VSense: bool
        :rtype: None

        * Modifies this patch by changing the trim values applied to the original surface The basis surface is trimmed only in one parametric direction: if UTrim is true, the surface is trimmed in the u parametric direction; if it is false, it is trimmed in the v parametric direction. In the 'trimmed' direction, this patch is oriented from Param1 to Param2. If the basis surface is periodic in the 'trimmed' direction, Sense defines its available part. By default in this case, this patch has the same orientation as the basis surface in this parametric direction. If the basis surface is closed or periodic in the other parametric direction (i.e. not the 'trimmed' direction), this patch has the same characteristics as the basis surface in that parametric direction. Raised if The BasisSurface is not periodic in the considered direction and Param1 or Param2 are out of the bounds of the BasisSurface. Param1 = Param2

        :param Param1:
        :type Param1: float
        :param Param2:
        :type Param2: float
        :param UTrim:
        :type UTrim: bool
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        """
        return _Geom.Geom_RectangularTrimmedSurface_SetTrim(self, *args)

    def BasisSurface(self, *args):
        """
        * Returns the Basis surface of <self>.

        :rtype: Handle_Geom_Surface

        """
        return _Geom.Geom_RectangularTrimmedSurface_BasisSurface(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_RectangularTrimmedSurface self)"""
        return _Geom.Geom_RectangularTrimmedSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_RectangularTrimmedSurface self) -> Handle_Geom_RectangularTrimmedSurface"""
        return _Geom.Geom_RectangularTrimmedSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_RectangularTrimmedSurface.SetTrim = new_instancemethod(_Geom.Geom_RectangularTrimmedSurface_SetTrim,None,Geom_RectangularTrimmedSurface)
Geom_RectangularTrimmedSurface.BasisSurface = new_instancemethod(_Geom.Geom_RectangularTrimmedSurface_BasisSurface,None,Geom_RectangularTrimmedSurface)
Geom_RectangularTrimmedSurface._kill_pointed = new_instancemethod(_Geom.Geom_RectangularTrimmedSurface__kill_pointed,None,Geom_RectangularTrimmedSurface)
Geom_RectangularTrimmedSurface.GetHandle = new_instancemethod(_Geom.Geom_RectangularTrimmedSurface_GetHandle,None,Geom_RectangularTrimmedSurface)
Geom_RectangularTrimmedSurface_swigregister = _Geom.Geom_RectangularTrimmedSurface_swigregister
Geom_RectangularTrimmedSurface_swigregister(Geom_RectangularTrimmedSurface)

class Handle_Geom_RectangularTrimmedSurface(Handle_Geom_BoundedSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_RectangularTrimmedSurface_swiginit(self,_Geom.new_Handle_Geom_RectangularTrimmedSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_RectangularTrimmedSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_RectangularTrimmedSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_RectangularTrimmedSurface_Nullify,None,Handle_Geom_RectangularTrimmedSurface)
Handle_Geom_RectangularTrimmedSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_RectangularTrimmedSurface_IsNull,None,Handle_Geom_RectangularTrimmedSurface)
Handle_Geom_RectangularTrimmedSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_RectangularTrimmedSurface_GetObject,None,Handle_Geom_RectangularTrimmedSurface)
Handle_Geom_RectangularTrimmedSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_RectangularTrimmedSurface__kill_pointed,None,Handle_Geom_RectangularTrimmedSurface)
Handle_Geom_RectangularTrimmedSurface_swigregister = _Geom.Handle_Geom_RectangularTrimmedSurface_swigregister
Handle_Geom_RectangularTrimmedSurface_swigregister(Handle_Geom_RectangularTrimmedSurface)

def Handle_Geom_RectangularTrimmedSurface_DownCast(*args):
  return _Geom.Handle_Geom_RectangularTrimmedSurface_DownCast(*args)
Handle_Geom_RectangularTrimmedSurface_DownCast = _Geom.Handle_Geom_RectangularTrimmedSurface_DownCast

class Geom_SphericalSurface(Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * A3 is the local coordinate system of the surface. At the creation the parametrization of the surface is defined such as the normal Vector (N = D1U ^ D1V) is directed away from the center of the sphere. The direction of increasing parametric value V is defined by the rotation around the 'YDirection' of A2 in the trigonometric sense and the orientation of increasing parametric value U is defined by the rotation around the main direction of A2 in the trigonometric sense. Warnings : It is not forbidden to create a spherical surface with Radius = 0.0 Raised if Radius < 0.0.

        :param A3:
        :type A3: gp_Ax3
        :param Radius:
        :type Radius: float
        :rtype: None

        * Creates a SphericalSurface from a non persistent Sphere from package gp.

        :param S:
        :type S: gp_Sphere
        :rtype: None

        """
        _Geom.Geom_SphericalSurface_swiginit(self,_Geom.new_Geom_SphericalSurface(*args))
    def SetRadius(self, *args):
        """
        * Assigns the value R to the radius of this sphere. Exceptions Standard_ConstructionError if R is less than 0.0.

        :param R:
        :type R: float
        :rtype: None

        """
        return _Geom.Geom_SphericalSurface_SetRadius(self, *args)

    def SetSphere(self, *args):
        """
        * Converts the gp_Sphere S into this sphere.

        :param S:
        :type S: gp_Sphere
        :rtype: None

        """
        return _Geom.Geom_SphericalSurface_SetSphere(self, *args)

    def Sphere(self, *args):
        """
        * Returns a non persistent sphere with the same geometric properties as <self>.

        :rtype: gp_Sphere

        """
        return _Geom.Geom_SphericalSurface_Sphere(self, *args)

    def Area(self, *args):
        """
        * Computes the aera of the spherical surface.

        :rtype: float

        """
        return _Geom.Geom_SphericalSurface_Area(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the coefficients of the implicit equation of the quadric in the absolute cartesian coordinates system : These coefficients are normalized. A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0

        :param A1:
        :type A1: float &
        :param A2:
        :type A2: float &
        :param A3:
        :type A3: float &
        :param B1:
        :type B1: float &
        :param B2:
        :type B2: float &
        :param B3:
        :type B3: float &
        :param C1:
        :type C1: float &
        :param C2:
        :type C2: float &
        :param C3:
        :type C3: float &
        :param D:
        :type D: float &
        :rtype: None

        """
        return _Geom.Geom_SphericalSurface_Coefficients(self, *args)

    def Radius(self, *args):
        """
        * Computes the coefficients of the implicit equation of this quadric in the absolute Cartesian coordinate system: A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + 2.(C1.X + C2.Y + C3.Z) + D = 0.0 An implicit normalization is applied (i.e. A1 = A2 = 1. in the local coordinate system of this sphere).

        :rtype: float

        """
        return _Geom.Geom_SphericalSurface_Radius(self, *args)

    def Volume(self, *args):
        """
        * Computes the volume of the spherical surface.

        :rtype: float

        """
        return _Geom.Geom_SphericalSurface_Volume(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SphericalSurface self)"""
        return _Geom.Geom_SphericalSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SphericalSurface self) -> Handle_Geom_SphericalSurface"""
        return _Geom.Geom_SphericalSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SphericalSurface.SetRadius = new_instancemethod(_Geom.Geom_SphericalSurface_SetRadius,None,Geom_SphericalSurface)
Geom_SphericalSurface.SetSphere = new_instancemethod(_Geom.Geom_SphericalSurface_SetSphere,None,Geom_SphericalSurface)
Geom_SphericalSurface.Sphere = new_instancemethod(_Geom.Geom_SphericalSurface_Sphere,None,Geom_SphericalSurface)
Geom_SphericalSurface.Area = new_instancemethod(_Geom.Geom_SphericalSurface_Area,None,Geom_SphericalSurface)
Geom_SphericalSurface.Coefficients = new_instancemethod(_Geom.Geom_SphericalSurface_Coefficients,None,Geom_SphericalSurface)
Geom_SphericalSurface.Radius = new_instancemethod(_Geom.Geom_SphericalSurface_Radius,None,Geom_SphericalSurface)
Geom_SphericalSurface.Volume = new_instancemethod(_Geom.Geom_SphericalSurface_Volume,None,Geom_SphericalSurface)
Geom_SphericalSurface._kill_pointed = new_instancemethod(_Geom.Geom_SphericalSurface__kill_pointed,None,Geom_SphericalSurface)
Geom_SphericalSurface.GetHandle = new_instancemethod(_Geom.Geom_SphericalSurface_GetHandle,None,Geom_SphericalSurface)
Geom_SphericalSurface_swigregister = _Geom.Geom_SphericalSurface_swigregister
Geom_SphericalSurface_swigregister(Geom_SphericalSurface)

class Handle_Geom_SphericalSurface(Handle_Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SphericalSurface_swiginit(self,_Geom.new_Handle_Geom_SphericalSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SphericalSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SphericalSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_SphericalSurface_Nullify,None,Handle_Geom_SphericalSurface)
Handle_Geom_SphericalSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_SphericalSurface_IsNull,None,Handle_Geom_SphericalSurface)
Handle_Geom_SphericalSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_SphericalSurface_GetObject,None,Handle_Geom_SphericalSurface)
Handle_Geom_SphericalSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SphericalSurface__kill_pointed,None,Handle_Geom_SphericalSurface)
Handle_Geom_SphericalSurface_swigregister = _Geom.Handle_Geom_SphericalSurface_swigregister
Handle_Geom_SphericalSurface_swigregister(Handle_Geom_SphericalSurface)

def Handle_Geom_SphericalSurface_DownCast(*args):
  return _Geom.Handle_Geom_SphericalSurface_DownCast(*args)
Handle_Geom_SphericalSurface_DownCast = _Geom.Handle_Geom_SphericalSurface_DownCast

class Geom_SurfaceOfLinearExtrusion(Geom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * V is the direction of extrusion. C is the extruded curve. The form of a SurfaceOfLinearExtrusion can be : . ruled surface (RuledForm), . a cylindrical surface if the extruded curve is a circle or a trimmed circle (CylindricalForm), . a plane surface if the extruded curve is a Line (PlanarForm). Warnings : Degenerated surface cases are not detected. For example if the curve C is a line and V is parallel to the direction of this line.

        :param C:
        :type C: Handle_Geom_Curve &
        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        _Geom.Geom_SurfaceOfLinearExtrusion_swiginit(self,_Geom.new_Geom_SurfaceOfLinearExtrusion(*args))
    def SetDirection(self, *args):
        """
        * Assigns V as the 'direction of extrusion' for this surface of linear extrusion.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_SetDirection(self, *args)

    def SetBasisCurve(self, *args):
        """
        * Modifies this surface of linear extrusion by redefining its 'basis curve' (the 'extruded curve').

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_SetBasisCurve(self, *args)

    def LocalD0(self, *args):
        """
        * The following functions evaluates the local derivatives on surface. Useful to manage discontinuities on the surface. if Side = 1 -> P = S( U+,V ) if Side = -1 -> P = S( U-,V ) else P is betveen discontinuities can be evaluated using methods of global evaluations P = S( U ,V )

        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_LocalD0(self, *args)

    def LocalD1(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_LocalD1(self, *args)

    def LocalD2(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_LocalD2(self, *args)

    def LocalD3(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_LocalD3(self, *args)

    def LocalDN(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_SurfaceOfLinearExtrusion_LocalDN(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SurfaceOfLinearExtrusion self)"""
        return _Geom.Geom_SurfaceOfLinearExtrusion__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SurfaceOfLinearExtrusion self) -> Handle_Geom_SurfaceOfLinearExtrusion"""
        return _Geom.Geom_SurfaceOfLinearExtrusion_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SurfaceOfLinearExtrusion.SetDirection = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_SetDirection,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.SetBasisCurve = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_SetBasisCurve,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.LocalD0 = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_LocalD0,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.LocalD1 = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_LocalD1,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.LocalD2 = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_LocalD2,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.LocalD3 = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_LocalD3,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.LocalDN = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_LocalDN,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion._kill_pointed = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion__kill_pointed,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion.GetHandle = new_instancemethod(_Geom.Geom_SurfaceOfLinearExtrusion_GetHandle,None,Geom_SurfaceOfLinearExtrusion)
Geom_SurfaceOfLinearExtrusion_swigregister = _Geom.Geom_SurfaceOfLinearExtrusion_swigregister
Geom_SurfaceOfLinearExtrusion_swigregister(Geom_SurfaceOfLinearExtrusion)

class Handle_Geom_SurfaceOfLinearExtrusion(Handle_Geom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SurfaceOfLinearExtrusion_swiginit(self,_Geom.new_Handle_Geom_SurfaceOfLinearExtrusion(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SurfaceOfLinearExtrusion_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SurfaceOfLinearExtrusion.Nullify = new_instancemethod(_Geom.Handle_Geom_SurfaceOfLinearExtrusion_Nullify,None,Handle_Geom_SurfaceOfLinearExtrusion)
Handle_Geom_SurfaceOfLinearExtrusion.IsNull = new_instancemethod(_Geom.Handle_Geom_SurfaceOfLinearExtrusion_IsNull,None,Handle_Geom_SurfaceOfLinearExtrusion)
Handle_Geom_SurfaceOfLinearExtrusion.GetObject = new_instancemethod(_Geom.Handle_Geom_SurfaceOfLinearExtrusion_GetObject,None,Handle_Geom_SurfaceOfLinearExtrusion)
Handle_Geom_SurfaceOfLinearExtrusion._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SurfaceOfLinearExtrusion__kill_pointed,None,Handle_Geom_SurfaceOfLinearExtrusion)
Handle_Geom_SurfaceOfLinearExtrusion_swigregister = _Geom.Handle_Geom_SurfaceOfLinearExtrusion_swigregister
Handle_Geom_SurfaceOfLinearExtrusion_swigregister(Handle_Geom_SurfaceOfLinearExtrusion)

def Handle_Geom_SurfaceOfLinearExtrusion_DownCast(*args):
  return _Geom.Handle_Geom_SurfaceOfLinearExtrusion_DownCast(*args)
Handle_Geom_SurfaceOfLinearExtrusion_DownCast = _Geom.Handle_Geom_SurfaceOfLinearExtrusion_DownCast

class Geom_SurfaceOfRevolution(Geom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * C : is the meridian or the referenced curve. A1 is the axis of revolution. The form of a SurfaceOfRevolution can be : . a general revolution surface (RevolutionForm), . a conical surface if the meridian is a line or a trimmed line (ConicalForm), . a cylindrical surface if the meridian is a line or a trimmed line parallel to the revolution axis (CylindricalForm), . a planar surface if the meridian is a line perpendicular to the revolution axis of the surface (PlanarForm). . a spherical surface, . a toroidal surface, . a quadric surface. Warnings : It is not checked that the curve C is planar and that the surface axis is in the plane of the curve. It is not checked that the revolved curve C doesn't self-intersects.

        :param C:
        :type C: Handle_Geom_Curve &
        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        _Geom.Geom_SurfaceOfRevolution_swiginit(self,_Geom.new_Geom_SurfaceOfRevolution(*args))
    def SetAxis(self, *args):
        """
        * Changes the axis of revolution. Warnings : It is not checked that the axis is in the plane of the revolved curve.

        :param A1:
        :type A1: gp_Ax1
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_SetAxis(self, *args)

    def SetDirection(self, *args):
        """
        * Changes the direction of the revolution axis. Warnings : It is not checked that the axis is in the plane of the revolved curve.

        :param V:
        :type V: gp_Dir
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_SetDirection(self, *args)

    def SetBasisCurve(self, *args):
        """
        * Changes the revolved curve of the surface. Warnings : It is not checked that the curve C is planar and that the surface axis is in the plane of the curve. It is not checked that the revolved curve C doesn't self-intersects.

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_SetBasisCurve(self, *args)

    def SetLocation(self, *args):
        """
        * Changes the location point of the revolution axis. Warnings : It is not checked that the axis is in the plane of the revolved curve.

        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_SetLocation(self, *args)

    def Axis(self, *args):
        """
        * Returns the revolution axis of the surface.

        :rtype: gp_Ax1

        """
        return _Geom.Geom_SurfaceOfRevolution_Axis(self, *args)

    def Location(self, *args):
        """
        * Returns the location point of the axis of revolution.

        :rtype: gp_Pnt

        """
        return _Geom.Geom_SurfaceOfRevolution_Location(self, *args)

    def ReferencePlane(self, *args):
        """
        * Computes the position of the reference plane of the surface defined by the basis curve and the symmetry axis. The location point is the location point of the revolution's axis, the XDirection of the plane is given by the revolution's axis and the orientation of the normal to the plane is given by the sense of revolution. Raised if the revolved curve is not planar or if the revolved curve and the symmetry axis are not in the same plane or if the maximum of distance between the axis and the revolved curve is lower or equal to Resolution from gp.

        :rtype: gp_Ax2

        """
        return _Geom.Geom_SurfaceOfRevolution_ReferencePlane(self, *args)

    def LocalD0(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_LocalD0(self, *args)

    def LocalD1(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_LocalD1(self, *args)

    def LocalD2(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_LocalD2(self, *args)

    def LocalD3(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param P:
        :type P: gp_Pnt
        :param D1U:
        :type D1U: gp_Vec
        :param D1V:
        :type D1V: gp_Vec
        :param D2U:
        :type D2U: gp_Vec
        :param D2V:
        :type D2V: gp_Vec
        :param D2UV:
        :type D2UV: gp_Vec
        :param D3U:
        :type D3U: gp_Vec
        :param D3V:
        :type D3V: gp_Vec
        :param D3UUV:
        :type D3UUV: gp_Vec
        :param D3UVV:
        :type D3UVV: gp_Vec
        :rtype: None

        """
        return _Geom.Geom_SurfaceOfRevolution_LocalD3(self, *args)

    def LocalDN(self, *args):
        """
        :param U:
        :type U: float
        :param V:
        :type V: float
        :param USide:
        :type USide: int
        :param Nu:
        :type Nu: int
        :param Nv:
        :type Nv: int
        :rtype: gp_Vec

        """
        return _Geom.Geom_SurfaceOfRevolution_LocalDN(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_SurfaceOfRevolution self)"""
        return _Geom.Geom_SurfaceOfRevolution__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_SurfaceOfRevolution self) -> Handle_Geom_SurfaceOfRevolution"""
        return _Geom.Geom_SurfaceOfRevolution_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_SurfaceOfRevolution.SetAxis = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_SetAxis,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.SetDirection = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_SetDirection,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.SetBasisCurve = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_SetBasisCurve,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.SetLocation = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_SetLocation,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.Axis = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_Axis,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.Location = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_Location,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.ReferencePlane = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_ReferencePlane,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.LocalD0 = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_LocalD0,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.LocalD1 = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_LocalD1,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.LocalD2 = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_LocalD2,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.LocalD3 = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_LocalD3,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.LocalDN = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_LocalDN,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution._kill_pointed = new_instancemethod(_Geom.Geom_SurfaceOfRevolution__kill_pointed,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution.GetHandle = new_instancemethod(_Geom.Geom_SurfaceOfRevolution_GetHandle,None,Geom_SurfaceOfRevolution)
Geom_SurfaceOfRevolution_swigregister = _Geom.Geom_SurfaceOfRevolution_swigregister
Geom_SurfaceOfRevolution_swigregister(Geom_SurfaceOfRevolution)

class Handle_Geom_SurfaceOfRevolution(Handle_Geom_SweptSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_SurfaceOfRevolution_swiginit(self,_Geom.new_Handle_Geom_SurfaceOfRevolution(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_SurfaceOfRevolution_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_SurfaceOfRevolution.Nullify = new_instancemethod(_Geom.Handle_Geom_SurfaceOfRevolution_Nullify,None,Handle_Geom_SurfaceOfRevolution)
Handle_Geom_SurfaceOfRevolution.IsNull = new_instancemethod(_Geom.Handle_Geom_SurfaceOfRevolution_IsNull,None,Handle_Geom_SurfaceOfRevolution)
Handle_Geom_SurfaceOfRevolution.GetObject = new_instancemethod(_Geom.Handle_Geom_SurfaceOfRevolution_GetObject,None,Handle_Geom_SurfaceOfRevolution)
Handle_Geom_SurfaceOfRevolution._kill_pointed = new_instancemethod(_Geom.Handle_Geom_SurfaceOfRevolution__kill_pointed,None,Handle_Geom_SurfaceOfRevolution)
Handle_Geom_SurfaceOfRevolution_swigregister = _Geom.Handle_Geom_SurfaceOfRevolution_swigregister
Handle_Geom_SurfaceOfRevolution_swigregister(Handle_Geom_SurfaceOfRevolution)

def Handle_Geom_SurfaceOfRevolution_DownCast(*args):
  return _Geom.Handle_Geom_SurfaceOfRevolution_DownCast(*args)
Handle_Geom_SurfaceOfRevolution_DownCast = _Geom.Handle_Geom_SurfaceOfRevolution_DownCast

class Geom_ToroidalSurface(Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * A3 is the local coordinate system of the surface. The orientation of increasing V parametric value is defined by the rotation around the main axis (ZAxis) in the trigonometric sense. The parametrization of the surface in the U direction is defined such as the normal Vector (N = D1U ^ D1V) is oriented towards the 'outside region' of the surface. Warnings : It is not forbidden to create a toroidal surface with MajorRadius = MinorRadius = 0.0 Raised if MinorRadius < 0.0 or if MajorRadius < 0.0

        :param A3:
        :type A3: gp_Ax3
        :param MajorRadius:
        :type MajorRadius: float
        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        * Creates a ToroidalSurface from a non transient Torus from package gp.

        :param T:
        :type T: gp_Torus
        :rtype: None

        """
        _Geom.Geom_ToroidalSurface_swiginit(self,_Geom.new_Geom_ToroidalSurface(*args))
    def SetMajorRadius(self, *args):
        """
        * Modifies this torus by changing its major radius. Exceptions Standard_ConstructionError if: - MajorRadius is negative, or - MajorRadius - r is less than or equal to gp::Resolution(), where r is the minor radius of this torus.

        :param MajorRadius:
        :type MajorRadius: float
        :rtype: None

        """
        return _Geom.Geom_ToroidalSurface_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        """
        * Modifies this torus by changing its minor radius. Exceptions Standard_ConstructionError if: - MinorRadius is negative, or - R - MinorRadius is less than or equal to gp::Resolution(), where R is the major radius of this torus.

        :param MinorRadius:
        :type MinorRadius: float
        :rtype: None

        """
        return _Geom.Geom_ToroidalSurface_SetMinorRadius(self, *args)

    def SetTorus(self, *args):
        """
        * Converts the gp_Torus torus T into this torus.

        :param T:
        :type T: gp_Torus
        :rtype: None

        """
        return _Geom.Geom_ToroidalSurface_SetTorus(self, *args)

    def Torus(self, *args):
        """
        * Returns the non transient torus with the same geometric properties as <self>.

        :rtype: gp_Torus

        """
        return _Geom.Geom_ToroidalSurface_Torus(self, *args)

    def Area(self, *args):
        """
        * Computes the aera of the surface.

        :rtype: float

        """
        return _Geom.Geom_ToroidalSurface_Area(self, *args)

    def Coefficients(self, *args):
        """
        * Returns the coefficients of the implicit equation of the surface in the absolute cartesian coordinate system : Coef(1) * X**4 + Coef(2) * Y**4 + Coef(3) * Z**4 + Coef(4) * X**3 * Y + Coef(5) * X**3 * Z + Coef(6) * Y**3 * X + Coef(7) * Y**3 * Z + Coef(8) * Z**3 * X + Coef(9) * Z**3 * Y + Coef(10) * X**2 * Y**2 + Coef(11) * X**2 * Z**2 + Coef(12) * Y**2 * Z**2 + Coef(13) * X**3 + Coef(14) * Y**3 + Coef(15) * Z**3 + Coef(16) * X**2 * Y + Coef(17) * X**2 * Z + Coef(18) * Y**2 * X + Coef(19) * Y**2 * Z + Coef(20) * Z**2 * X + Coef(21) * Z**2 * Y + Coef(22) * X**2 + Coef(23) * Y**2 + Coef(24) * Z**2 + Coef(25) * X * Y + Coef(26) * X * Z + Coef(27) * Y * Z + Coef(28) * X + Coef(29) * Y + Coef(30) * Z + Coef(31) = 0.0 Raised if the length of Coef is lower than 31.

        :param Coef:
        :type Coef: TColStd_Array1OfReal &
        :rtype: None

        """
        return _Geom.Geom_ToroidalSurface_Coefficients(self, *args)

    def MajorRadius(self, *args):
        """
        * Returns the major radius, or the minor radius, of this torus.

        :rtype: float

        """
        return _Geom.Geom_ToroidalSurface_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        """
        * Returns the major radius, or the minor radius, of this torus.

        :rtype: float

        """
        return _Geom.Geom_ToroidalSurface_MinorRadius(self, *args)

    def Volume(self, *args):
        """
        * Computes the volume.

        :rtype: float

        """
        return _Geom.Geom_ToroidalSurface_Volume(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_ToroidalSurface self)"""
        return _Geom.Geom_ToroidalSurface__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_ToroidalSurface self) -> Handle_Geom_ToroidalSurface"""
        return _Geom.Geom_ToroidalSurface_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_ToroidalSurface.SetMajorRadius = new_instancemethod(_Geom.Geom_ToroidalSurface_SetMajorRadius,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.SetMinorRadius = new_instancemethod(_Geom.Geom_ToroidalSurface_SetMinorRadius,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.SetTorus = new_instancemethod(_Geom.Geom_ToroidalSurface_SetTorus,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.Torus = new_instancemethod(_Geom.Geom_ToroidalSurface_Torus,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.Area = new_instancemethod(_Geom.Geom_ToroidalSurface_Area,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.Coefficients = new_instancemethod(_Geom.Geom_ToroidalSurface_Coefficients,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.MajorRadius = new_instancemethod(_Geom.Geom_ToroidalSurface_MajorRadius,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.MinorRadius = new_instancemethod(_Geom.Geom_ToroidalSurface_MinorRadius,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.Volume = new_instancemethod(_Geom.Geom_ToroidalSurface_Volume,None,Geom_ToroidalSurface)
Geom_ToroidalSurface._kill_pointed = new_instancemethod(_Geom.Geom_ToroidalSurface__kill_pointed,None,Geom_ToroidalSurface)
Geom_ToroidalSurface.GetHandle = new_instancemethod(_Geom.Geom_ToroidalSurface_GetHandle,None,Geom_ToroidalSurface)
Geom_ToroidalSurface_swigregister = _Geom.Geom_ToroidalSurface_swigregister
Geom_ToroidalSurface_swigregister(Geom_ToroidalSurface)

class Handle_Geom_ToroidalSurface(Handle_Geom_ElementarySurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_ToroidalSurface_swiginit(self,_Geom.new_Handle_Geom_ToroidalSurface(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_ToroidalSurface_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_ToroidalSurface.Nullify = new_instancemethod(_Geom.Handle_Geom_ToroidalSurface_Nullify,None,Handle_Geom_ToroidalSurface)
Handle_Geom_ToroidalSurface.IsNull = new_instancemethod(_Geom.Handle_Geom_ToroidalSurface_IsNull,None,Handle_Geom_ToroidalSurface)
Handle_Geom_ToroidalSurface.GetObject = new_instancemethod(_Geom.Handle_Geom_ToroidalSurface_GetObject,None,Handle_Geom_ToroidalSurface)
Handle_Geom_ToroidalSurface._kill_pointed = new_instancemethod(_Geom.Handle_Geom_ToroidalSurface__kill_pointed,None,Handle_Geom_ToroidalSurface)
Handle_Geom_ToroidalSurface_swigregister = _Geom.Handle_Geom_ToroidalSurface_swigregister
Handle_Geom_ToroidalSurface_swigregister(Handle_Geom_ToroidalSurface)

def Handle_Geom_ToroidalSurface_DownCast(*args):
  return _Geom.Handle_Geom_ToroidalSurface_DownCast(*args)
Handle_Geom_ToroidalSurface_DownCast = _Geom.Handle_Geom_ToroidalSurface_DownCast

class Geom_TrimmedCurve(Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        * Constructs a trimmed curve from the basis curve C which is limited between parameter values U1 and U2. Note: - U1 can be greater or less than U2; in both cases, the returned curve is oriented from U1 to U2. - If the basis curve C is periodic, there is an ambiguity because two parts are available. In this case, the trimmed curve has the same orientation as the basis curve if Sense is true (default value) or the opposite orientation if Sense is false. - If the curve is closed but not periodic, it is not possible to keep the part of the curve which includes the junction point (except if the junction point is at the beginning or at the end of the trimmed curve). If you tried to do this, you could alter the fundamental characteristics of the basis curve, which are used, for example, to compute the derivatives of the trimmed curve. The rules for a closed curve are therefore the same as those for an open curve. Warning: The trimmed curve is built from a copy of curve C. Therefore, when C is modified, the trimmed curve is not modified. - If the basis curve is periodic, the bounds of the trimmed curve may be different from U1 and U2 if the parametric origin of the basis curve is within the arc of the trimmed curve. In this case, the modified parameter will be equal to U1 or U2 plus or minus the period. Exceptions Standard_ConstructionError if: - C is not periodic and U1 or U2 is outside the bounds of C, or - U1 is equal to U2.

        :param C:
        :type C: Handle_Geom_Curve &
        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        """
        _Geom.Geom_TrimmedCurve_swiginit(self,_Geom.new_Geom_TrimmedCurve(*args))
    def SetTrim(self, *args):
        """
        * Changes this trimmed curve, by redefining the parameter values U1 and U2 which limit its basis curve. Note: If the basis curve is periodic, the trimmed curve has the same orientation as the basis curve if Sense is true (default value) or the opposite orientation if Sense is false. Warning If the basis curve is periodic, the bounds of the trimmed curve may be different from U1 and U2 if the parametric origin of the basis curve is within the arc of the trimmed curve. In this case, the modified parameter will be equal to U1 or U2 plus or minus the period. Exceptions Standard_ConstructionError if: - the basis curve is not periodic, and either U1 or U2 are outside the bounds of the basis curve, or - U1 is equal to U2.

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param Sense: default value is Standard_True
        :type Sense: bool
        :rtype: None

        """
        return _Geom.Geom_TrimmedCurve_SetTrim(self, *args)

    def BasisCurve(self, *args):
        """
        * Returns the basis curve. Warning This function does not return a constant reference. Consequently, any modification of the returned value directly modifies the trimmed curve.

        :rtype: Handle_Geom_Curve

        """
        return _Geom.Geom_TrimmedCurve_BasisCurve(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(Geom_TrimmedCurve self)"""
        return _Geom.Geom_TrimmedCurve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(Geom_TrimmedCurve self) -> Handle_Geom_TrimmedCurve"""
        return _Geom.Geom_TrimmedCurve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Geom_TrimmedCurve.SetTrim = new_instancemethod(_Geom.Geom_TrimmedCurve_SetTrim,None,Geom_TrimmedCurve)
Geom_TrimmedCurve.BasisCurve = new_instancemethod(_Geom.Geom_TrimmedCurve_BasisCurve,None,Geom_TrimmedCurve)
Geom_TrimmedCurve._kill_pointed = new_instancemethod(_Geom.Geom_TrimmedCurve__kill_pointed,None,Geom_TrimmedCurve)
Geom_TrimmedCurve.GetHandle = new_instancemethod(_Geom.Geom_TrimmedCurve_GetHandle,None,Geom_TrimmedCurve)
Geom_TrimmedCurve_swigregister = _Geom.Geom_TrimmedCurve_swigregister
Geom_TrimmedCurve_swigregister(Geom_TrimmedCurve)

class Handle_Geom_TrimmedCurve(Handle_Geom_BoundedCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _Geom.Handle_Geom_TrimmedCurve_swiginit(self,_Geom.new_Handle_Geom_TrimmedCurve(*args))
    DownCast = staticmethod(_Geom.Handle_Geom_TrimmedCurve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Geom_TrimmedCurve.Nullify = new_instancemethod(_Geom.Handle_Geom_TrimmedCurve_Nullify,None,Handle_Geom_TrimmedCurve)
Handle_Geom_TrimmedCurve.IsNull = new_instancemethod(_Geom.Handle_Geom_TrimmedCurve_IsNull,None,Handle_Geom_TrimmedCurve)
Handle_Geom_TrimmedCurve.GetObject = new_instancemethod(_Geom.Handle_Geom_TrimmedCurve_GetObject,None,Handle_Geom_TrimmedCurve)
Handle_Geom_TrimmedCurve._kill_pointed = new_instancemethod(_Geom.Handle_Geom_TrimmedCurve__kill_pointed,None,Handle_Geom_TrimmedCurve)
Handle_Geom_TrimmedCurve_swigregister = _Geom.Handle_Geom_TrimmedCurve_swigregister
Handle_Geom_TrimmedCurve_swigregister(Handle_Geom_TrimmedCurve)

def Handle_Geom_TrimmedCurve_DownCast(*args):
  return _Geom.Handle_Geom_TrimmedCurve_DownCast(*args)
Handle_Geom_TrimmedCurve_DownCast = _Geom.Handle_Geom_TrimmedCurve_DownCast



