# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Prs3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Prs3d', [dirname(__file__)])
        except ImportError:
            import _Prs3d
            return _Prs3d
        if fp is not None:
            try:
                _mod = imp.load_module('_Prs3d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Prs3d = swig_import_helper()
    del swig_import_helper
else:
    import _Prs3d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Prs3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Prs3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Prs3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Prs3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Prs3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Prs3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Prs3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Prs3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Prs3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Prs3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Prs3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Prs3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Prs3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Prs3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Prs3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Prs3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Prs3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Prs3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.Quantity
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.gp
import OCC.Aspect
import OCC.TColStd
import OCC.TShort
import OCC.TColQuantity
import OCC.Graphic3d
import OCC.Image
import OCC.OSD
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.HLRAlgo
import OCC.TopAbs
import OCC.TopoDS
import OCC.TopLoc
import OCC.Bnd
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.NCollection

_Prs3d.Prs3d_DAO_Internal_swigconstant(_Prs3d)
Prs3d_DAO_Internal = _Prs3d.Prs3d_DAO_Internal

_Prs3d.Prs3d_DAO_External_swigconstant(_Prs3d)
Prs3d_DAO_External = _Prs3d.Prs3d_DAO_External

_Prs3d.Prs3d_DAO_Fit_swigconstant(_Prs3d)
Prs3d_DAO_Fit = _Prs3d.Prs3d_DAO_Fit

_Prs3d.Prs3d_DTHP_Left_swigconstant(_Prs3d)
Prs3d_DTHP_Left = _Prs3d.Prs3d_DTHP_Left

_Prs3d.Prs3d_DTHP_Right_swigconstant(_Prs3d)
Prs3d_DTHP_Right = _Prs3d.Prs3d_DTHP_Right

_Prs3d.Prs3d_DTHP_Center_swigconstant(_Prs3d)
Prs3d_DTHP_Center = _Prs3d.Prs3d_DTHP_Center

_Prs3d.Prs3d_DTHP_Fit_swigconstant(_Prs3d)
Prs3d_DTHP_Fit = _Prs3d.Prs3d_DTHP_Fit

_Prs3d.Prs3d_DTVP_Above_swigconstant(_Prs3d)
Prs3d_DTVP_Above = _Prs3d.Prs3d_DTVP_Above

_Prs3d.Prs3d_DTVP_Below_swigconstant(_Prs3d)
Prs3d_DTVP_Below = _Prs3d.Prs3d_DTVP_Below

_Prs3d.Prs3d_DTVP_Center_swigconstant(_Prs3d)
Prs3d_DTVP_Center = _Prs3d.Prs3d_DTVP_Center

_Prs3d.Prs3d_TOH_NotSet_swigconstant(_Prs3d)
Prs3d_TOH_NotSet = _Prs3d.Prs3d_TOH_NotSet

_Prs3d.Prs3d_TOH_PolyAlgo_swigconstant(_Prs3d)
Prs3d_TOH_PolyAlgo = _Prs3d.Prs3d_TOH_PolyAlgo

_Prs3d.Prs3d_TOH_Algo_swigconstant(_Prs3d)
Prs3d_TOH_Algo = _Prs3d.Prs3d_TOH_Algo

_Prs3d.Prs3d_TOLP_Point_swigconstant(_Prs3d)
Prs3d_TOLP_Point = _Prs3d.Prs3d_TOLP_Point

_Prs3d.Prs3d_TOLP_Segment_swigconstant(_Prs3d)
Prs3d_TOLP_Segment = _Prs3d.Prs3d_TOLP_Segment
class prs3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MatchSegment(*args):
        """
        * draws an arrow at a given location, with respect to a given direction.

        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :param aDistance:
        :type aDistance: Quantity_Length
        :param p1:
        :type p1: gp_Pnt
        :param p2:
        :type p2: gp_Pnt
        :param dist:
        :type dist: Quantity_Length &
        :rtype: bool

        """
        return _Prs3d.prs3d_MatchSegment(*args)

    MatchSegment = staticmethod(MatchSegment)

    def __init__(self):
        _Prs3d.prs3d_swiginit(self, _Prs3d.new_prs3d())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


prs3d._kill_pointed = new_instancemethod(_Prs3d.prs3d__kill_pointed, None, prs3d)
prs3d_swigregister = _Prs3d.prs3d_swigregister
prs3d_swigregister(prs3d)

def prs3d_MatchSegment(*args):
    """
    * draws an arrow at a given location, with respect to a given direction.

    :param X:
    :type X: Quantity_Length
    :param Y:
    :type Y: Quantity_Length
    :param Z:
    :type Z: Quantity_Length
    :param aDistance:
    :type aDistance: Quantity_Length
    :param p1:
    :type p1: gp_Pnt
    :param p2:
    :type p2: gp_Pnt
    :param dist:
    :type dist: Quantity_Length &
    :rtype: bool

    """
    return _Prs3d.prs3d_MatchSegment(*args)

class Prs3d_BasicAspect(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def _kill_pointed(self):
        """_kill_pointed(Prs3d_BasicAspect self)"""
        return _Prs3d.Prs3d_BasicAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_BasicAspect self) -> Handle_Prs3d_BasicAspect"""
        return _Prs3d.Prs3d_BasicAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_BasicAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_BasicAspect__kill_pointed, None, Prs3d_BasicAspect)
Prs3d_BasicAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_BasicAspect_GetHandle, None, Prs3d_BasicAspect)
Prs3d_BasicAspect_swigregister = _Prs3d.Prs3d_BasicAspect_swigregister
Prs3d_BasicAspect_swigregister(Prs3d_BasicAspect)

class Handle_Prs3d_BasicAspect(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_BasicAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_BasicAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_BasicAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_BasicAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_BasicAspect_Nullify, None, Handle_Prs3d_BasicAspect)
Handle_Prs3d_BasicAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_BasicAspect_IsNull, None, Handle_Prs3d_BasicAspect)
Handle_Prs3d_BasicAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_BasicAspect_GetObject, None, Handle_Prs3d_BasicAspect)
Handle_Prs3d_BasicAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_BasicAspect__kill_pointed, None, Handle_Prs3d_BasicAspect)
Handle_Prs3d_BasicAspect_swigregister = _Prs3d.Handle_Prs3d_BasicAspect_swigregister
Handle_Prs3d_BasicAspect_swigregister(Handle_Prs3d_BasicAspect)

def Handle_Prs3d_BasicAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_BasicAspect_DownCast(AnObject)
Handle_Prs3d_BasicAspect_DownCast = _Prs3d.Handle_Prs3d_BasicAspect_DownCast

class Prs3d_DimensionUnits(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Default constructor. Sets meters as default length units and radians as default angle units.

        :rtype: None

        :param theUnits:
        :type theUnits: Prs3d_DimensionUnits &
        :rtype: None

        """
        _Prs3d.Prs3d_DimensionUnits_swiginit(self, _Prs3d.new_Prs3d_DimensionUnits(*args))

    def SetAngleUnits(self, *args):
        """
        * Sets angle units

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionUnits_SetAngleUnits(self, *args)


    def GetAngleUnits(self, *args):
        """
        * returns angle units

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionUnits_GetAngleUnits(self, *args)


    def SetLengthUnits(self, *args):
        """
        * Sets length units

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionUnits_SetLengthUnits(self, *args)


    def GetLengthUnits(self, *args):
        """
        * returns length units

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionUnits_GetLengthUnits(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_DimensionUnits.SetAngleUnits = new_instancemethod(_Prs3d.Prs3d_DimensionUnits_SetAngleUnits, None, Prs3d_DimensionUnits)
Prs3d_DimensionUnits.GetAngleUnits = new_instancemethod(_Prs3d.Prs3d_DimensionUnits_GetAngleUnits, None, Prs3d_DimensionUnits)
Prs3d_DimensionUnits.SetLengthUnits = new_instancemethod(_Prs3d.Prs3d_DimensionUnits_SetLengthUnits, None, Prs3d_DimensionUnits)
Prs3d_DimensionUnits.GetLengthUnits = new_instancemethod(_Prs3d.Prs3d_DimensionUnits_GetLengthUnits, None, Prs3d_DimensionUnits)
Prs3d_DimensionUnits._kill_pointed = new_instancemethod(_Prs3d.Prs3d_DimensionUnits__kill_pointed, None, Prs3d_DimensionUnits)
Prs3d_DimensionUnits_swigregister = _Prs3d.Prs3d_DimensionUnits_swigregister
Prs3d_DimensionUnits_swigregister(Prs3d_DimensionUnits)

class Prs3d_Drawer(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Prs3d.Prs3d_Drawer_swiginit(self, _Prs3d.new_Prs3d_Drawer(*args))

    def SetTypeOfDeflection(self, *args):
        """
        * Sets the type of chordal deflection. This indicates whether the deflection value is absolute or relative to the size of the object.

        :param aTypeOfDeflection:
        :type aTypeOfDeflection: Aspect_TypeOfDeflection
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfDeflection(self, *args)


    def TypeOfDeflection(self, *args):
        """
        * Returns the type of chordal deflection. This indicates whether the deflection value is absolute or relative to the size of the object.

        :rtype: Aspect_TypeOfDeflection

        """
        return _Prs3d.Prs3d_Drawer_TypeOfDeflection(self, *args)


    def SetMaximalChordialDeviation(self, *args):
        """
        * Defines the maximal chordial deviation when drawing any curve; Even if the type of deviation is set to TOD_Relative, this value is used by:  Prs3d_DeflectionCurve Prs3d_WFDeflectionSurface Prs3d_WFDeflectionRestrictedFace

        :param aChordialDeviation:
        :type aChordialDeviation: Quantity_Length
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalChordialDeviation(self, *args)


    def MaximalChordialDeviation(self, *args):
        """
        * returns the maximal chordial deviation. Default value is 0.1

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_Drawer_MaximalChordialDeviation(self, *args)


    def SetDeviationCoefficient(self, *args):
        """
        * Sets the deviation coefficient aCoefficient.

        :param aCoefficient:
        :type aCoefficient: float
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDeviationCoefficient(self, *args)


    def DeviationCoefficient(self, *args):
        """
        * Returns the deviation coefficient.

        :rtype: float

        """
        return _Prs3d.Prs3d_Drawer_DeviationCoefficient(self, *args)


    def SetHLRDeviationCoefficient(self, *args):
        """
        * Sets the deviation coefficient aCoefficient for removal of hidden lines created by different viewpoints in different presentations. The Default value is 0.02.

        :param aCoefficient:
        :type aCoefficient: float
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetHLRDeviationCoefficient(self, *args)


    def HLRDeviationCoefficient(self, *args):
        """
        * Returns the real number value of the hidden line removal deviation coefficient.

        :rtype: float

        """
        return _Prs3d.Prs3d_Drawer_HLRDeviationCoefficient(self, *args)


    def SetHLRAngle(self, *args):
        """
        * Sets anAngle, the angle of maximum chordal deviation for removal of hidden lines created by different viewpoints in different presentations. The default value is 20*PI/180.

        :param anAngle:
        :type anAngle: float
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetHLRAngle(self, *args)


    def HLRAngle(self, *args):
        """
        * Returns the real number value of the deviation angle in hidden line removal views. The default value is 20*PI/180.

        :rtype: float

        """
        return _Prs3d.Prs3d_Drawer_HLRAngle(self, *args)


    def SetDeviationAngle(self, *args):
        """
        * Sets deviation angle

        :param anAngle:
        :type anAngle: float
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDeviationAngle(self, *args)


    def DeviationAngle(self, *args):
        """
        * Returns the value for deviation angle.

        :rtype: float

        """
        return _Prs3d.Prs3d_Drawer_DeviationAngle(self, *args)


    def SetDiscretisation(self, *args):
        """
        * Sets the discretisation parameter d.

        :param d:
        :type d: int
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDiscretisation(self, *args)


    def Discretisation(self, *args):
        """
        * Returns the discretisation setting.

        :rtype: int

        """
        return _Prs3d.Prs3d_Drawer_Discretisation(self, *args)


    def SetMaximalParameterValue(self, *args):
        """
        * defines the maximum value allowed for the first and last parameters of an infinite curve. Default value: 500.

        :param Value:
        :type Value: float
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalParameterValue(self, *args)


    def MaximalParameterValue(self, *args):
        """
        * Sets the maximum value allowed for the first and last parameters of an infinite curve. By default, this value is 500000.

        :rtype: float

        """
        return _Prs3d.Prs3d_Drawer_MaximalParameterValue(self, *args)


    def SetIsoOnPlane(self, *args):
        """
        * Sets IsoOnPlane on or off by setting the parameter OnOff to true or false.

        :param OnOff:
        :type OnOff: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetIsoOnPlane(self, *args)


    def IsoOnPlane(self, *args):
        """
        * Returns True if the drawing of isos on planes is enabled.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_IsoOnPlane(self, *args)


    def SetTypeOfHLR(self, *args):
        """
        * Sets the type of HLR algorithm used by drawer's interactive objects

        :param theTypeOfHLR:
        :type theTypeOfHLR: Prs3d_TypeOfHLR
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfHLR(self, *args)


    def TypeOfHLR(self, *args):
        """
        * Gets the myTypeOfHLR value

        :rtype: Prs3d_TypeOfHLR

        """
        return _Prs3d.Prs3d_Drawer_TypeOfHLR(self, *args)


    def UIsoAspect(self, *args):
        """
        * Defines the attributes which are used when drawing an U isoparametric curve of a face. Defines the number of U isoparametric curves to be drawn for a single face. The LineAspect for U isoparametric lines can be edited (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) The default values are: COLOR : Quantity_NOC_GRAY75 TYPE OF LINE: Aspect_TOL_SOLID WIDTH : 0.5 These attributes are used by the following algorithms: Prs3d_WFDeflectionSurface Prs3d_WFDeflectionRestrictedFace

        :rtype: Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Prs3d_Drawer_UIsoAspect(self, *args)


    def SetUIsoAspect(self, *args):
        """
        :param anAspect:
        :type anAspect: Handle_Prs3d_IsoAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetUIsoAspect(self, *args)


    def VIsoAspect(self, *args):
        """
        * Defines the attributes which are used when drawing an V isoparametric curve of a face. Defines the number of V isoparametric curves to be drawn for a single face. The LineAspect for V isoparametric lines can be edited (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) The default values are: COLOR : Quantity_NOC_GRAY82 TYPE OF LINE: Aspect_TOL_SOLID WIDTH : 0.5 These attributes are used by the following algorithms: Prs3d_WFDeflectionSurface Prs3d_WFDeflectionRestrictedFace

        :rtype: Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Prs3d_Drawer_VIsoAspect(self, *args)


    def SetVIsoAspect(self, *args):
        """
        * Sets the appearance of V isoparameters - anAspect.

        :param anAspect:
        :type anAspect: Handle_Prs3d_IsoAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetVIsoAspect(self, *args)


    def FreeBoundaryAspect(self, *args):
        """
        * Stores the values for presentation of free boundaries, in other words, boundaries which are not shared. The LineAspect for the free boundaries can be edited. The default values are: Color: Quantity_NOC_GREEN Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the algorithm Prs3d_WFShape

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_FreeBoundaryAspect(self, *args)


    def SetFreeBoundaryAspect(self, *args):
        """
        * Sets the parameter anAspect for the display of free boundaries.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryAspect(self, *args)


    def SetFreeBoundaryDraw(self, *args):
        """
        * Sets free boundary drawing on or off by setting the parameter OnOff to true or false.

        :param OnOff:
        :type OnOff: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryDraw(self, *args)


    def FreeBoundaryDraw(self, *args):
        """
        * Returns True if the drawing of the shared boundaries is disabled. True is the default setting.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_FreeBoundaryDraw(self, *args)


    def WireAspect(self, *args):
        """
        * Returns wire aspect settings. The LineAspect for the wire can be edited. The default values are: Color: Quantity_NOC_RED Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the algorithm Prs3d_WFShape

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_WireAspect(self, *args)


    def SetWireAspect(self, *args):
        """
        * Sets the parameter anAspect for display of wires.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetWireAspect(self, *args)


    def SetWireDraw(self, *args):
        """
        * Sets WireDraw on or off by setting the parameter OnOff to true or false.

        :param OnOff:
        :type OnOff: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetWireDraw(self, *args)


    def WireDraw(self, *args):
        """
        * returns True if the drawing of the wire is enabled.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_WireDraw(self, *args)


    def UnFreeBoundaryAspect(self, *args):
        """
        * Returns settings for shared boundary line aspects. The LineAspect for the unfree boundaries can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the algorithm Prs3d_WFShape

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_UnFreeBoundaryAspect(self, *args)


    def SetUnFreeBoundaryAspect(self, *args):
        """
        * Sets the parameter anAspect for the display of shared boundaries.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryAspect(self, *args)


    def SetUnFreeBoundaryDraw(self, *args):
        """
        * Sets FreeBoundaryDraw on or off by setting the parameter OnOff to true or false. By default the unfree boundaries are drawn.

        :param OnOff:
        :type OnOff: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryDraw(self, *args)


    def UnFreeBoundaryDraw(self, *args):
        """
        * Returns True if the drawing of the shared boundaries is enabled. True is the default setting.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_UnFreeBoundaryDraw(self, *args)


    def LineAspect(self, *args):
        """
        * Returns settings for line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the following algorithms: Prs3d_Curve Prs3d_Line Prs3d_HLRShape

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_LineAspect(self, *args)


    def SetLineAspect(self, *args):
        """
        * Sets the parameter anAspect for display attributes of lines.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        * Returns settings for text aspect. These settings can be edited. The default value is: - Color: Quantity_NOC_YELLOW

        :rtype: Handle_Prs3d_TextAspect

        """
        return _Prs3d.Prs3d_Drawer_TextAspect(self, *args)


    def SetTextAspect(self, *args):
        """
        * Sets the parameter anAspect for display attributes of text.

        :param anAspect:
        :type anAspect: Handle_Prs3d_TextAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetTextAspect(self, *args)


    def SetLineArrowDraw(self, *args):
        """
        * enables the drawing of an arrow at the end of each line. By default the arrows are not drawn.

        :param OnOff:
        :type OnOff: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetLineArrowDraw(self, *args)


    def LineArrowDraw(self, *args):
        """
        * Sets LineArrowDraw on or off by setting the parameter OnOff to true or false.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_LineArrowDraw(self, *args)


    def ArrowAspect(self, *args):
        """
        * Returns the attributes for display of arrows.

        :rtype: Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Prs3d_Drawer_ArrowAspect(self, *args)


    def SetArrowAspect(self, *args):
        """
        * Sets the parameter anAspect for display attributes of arrows.

        :param anAspect:
        :type anAspect: Handle_Prs3d_ArrowAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetArrowAspect(self, *args)


    def PointAspect(self, *args):
        """
        * Returns the point aspect setting. The default values are Color: Quantity_NOC_YELLOW Type of marker: Aspect_TOM_PLUS Scale: 1. These attributes are used by the algorithms Prs3d_Point.

        :rtype: Handle_Prs3d_PointAspect

        """
        return _Prs3d.Prs3d_Drawer_PointAspect(self, *args)


    def SetPointAspect(self, *args):
        """
        * Sets the parameter anAspect for display attributes of points

        :param anAspect:
        :type anAspect: Handle_Prs3d_PointAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetPointAspect(self, *args)


    def ShadingAspect(self, *args):
        """
        * Returns settings for shading aspects. These settings can be edited. The default values are: - Color: Quantity_NOC_YELLOW - Material: Graphic3d_NOM_BRASS Shading aspect is obtained through decomposition of 3d faces into triangles, each side of each triangle being a chord of the corresponding curved edge in the face. Reflection of light in each projector perspective is then calculated for each of the resultant triangular planes.

        :rtype: Handle_Prs3d_ShadingAspect

        """
        return _Prs3d.Prs3d_Drawer_ShadingAspect(self, *args)


    def SetShadingAspect(self, *args):
        """
        * Sets the parameter anAspect for display attributes of shading.

        :param anAspect:
        :type anAspect: Handle_Prs3d_ShadingAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetShadingAspect(self, *args)


    def SetShadingAspectGlobal(self, *args):
        """
        * indicates that the ShadingAspect will be apply to the whole presentation. This allows to modify the aspect without recomputing the content of the presentation.

        :param aValue:
        :type aValue: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetShadingAspectGlobal(self, *args)


    def ShadingAspectGlobal(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_ShadingAspectGlobal(self, *args)


    def DrawHiddenLine(self, *args):
        """
        * returns Standard_True if the hidden lines are to be drawn. By default the hidden lines are not drawn.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_DrawHiddenLine(self, *args)


    def EnableDrawHiddenLine(self, *args):
        """
        * Enables the DrawHiddenLine function.

        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_EnableDrawHiddenLine(self, *args)


    def DisableDrawHiddenLine(self, *args):
        """
        * Disables the DrawHiddenLine function.

        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_DisableDrawHiddenLine(self, *args)


    def HiddenLineAspect(self, *args):
        """
        * Returns settings for hidden line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_DASH Width: 1.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_HiddenLineAspect(self, *args)


    def SetHiddenLineAspect(self, *args):
        """
        * Sets the parameter anAspect for the display of hidden lines in hidden line removal mode.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetHiddenLineAspect(self, *args)


    def SeenLineAspect(self, *args):
        """
        * Returns settings for seen line aspects. These settings can be edited. The default values are: Color: Quantity_NOC_YELLOW Type of line: Aspect_TOL_SOLID Width: 1.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SeenLineAspect(self, *args)


    def SetSeenLineAspect(self, *args):
        """
        * Sets the parameter anAspect for the display of seen lines in hidden line removal mode.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetSeenLineAspect(self, *args)


    def PlaneAspect(self, *args):
        """
        * Returns settings for the appearance of planes.

        :rtype: Handle_Prs3d_PlaneAspect

        """
        return _Prs3d.Prs3d_Drawer_PlaneAspect(self, *args)


    def SetPlaneAspect(self, *args):
        """
        * Sets the parameter anAspect for the display of planes.

        :param anAspect:
        :type anAspect: Handle_Prs3d_PlaneAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetPlaneAspect(self, *args)


    def VectorAspect(self, *args):
        """
        * Returns settings for the appearance of vectors. These settings can be edited. The default values are: Color: Quantity_NOC_SKYBLUE Type of line: Aspect_TOL_SOLID Width: 1.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_VectorAspect(self, *args)


    def SetVectorAspect(self, *args):
        """
        * Sets the modality anAspect for the display of vectors.

        :param anAspect:
        :type anAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetVectorAspect(self, *args)


    def DatumAspect(self, *args):
        """
        * Returns settings for the appearance of datums. These settings can be edited. The default values for the three axes are: Color: Quantity_NOC_PEACHPUFF Type of line: Aspect_TOL_SOLID Width: 1.

        :rtype: Handle_Prs3d_DatumAspect

        """
        return _Prs3d.Prs3d_Drawer_DatumAspect(self, *args)


    def SetDatumAspect(self, *args):
        """
        * Sets the modality anAspect for the display of datums.

        :param anAspect:
        :type anAspect: Handle_Prs3d_DatumAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDatumAspect(self, *args)


    def DimensionAspect(self, *args):
        """
        * Returns settings for the appearance of dimensions.

        :rtype: Handle_Prs3d_DimensionAspect

        """
        return _Prs3d.Prs3d_Drawer_DimensionAspect(self, *args)


    def SetDimensionAspect(self, *args):
        """
        * Sets the settings for the appearance of dimensions.

        :param theAspect:
        :type theAspect: Handle_Prs3d_DimensionAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDimensionAspect(self, *args)


    def SetDimLengthModelUnits(self, *args):
        """
        * Sets dimension length model units for computing of dimension presentation.

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthModelUnits(self, *args)


    def SetDimAngleModelUnits(self, *args):
        """
        * Sets dimension angle model units for computing of dimension presentation.

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleModelUnits(self, *args)


    def DimLengthModelUnits(self, *args):
        """
        * Returns length model units for the dimension presentation.

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_DimLengthModelUnits(self, *args)


    def DimAngleModelUnits(self, *args):
        """
        * Returns angle model units for the dimension presentation.

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_DimAngleModelUnits(self, *args)


    def SetDimLengthDisplayUnits(self, *args):
        """
        * Sets length units in which value for dimension presentation is displayed.

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthDisplayUnits(self, *args)


    def SetDimAngleDisplayUnits(self, *args):
        """
        * Sets angle units in which value for dimension presentation is displayed.

        :param theUnits:
        :type theUnits: TCollection_AsciiString &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleDisplayUnits(self, *args)


    def DimLengthDisplayUnits(self, *args):
        """
        * Returns length units in which dimension presentation is displayed.

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_DimLengthDisplayUnits(self, *args)


    def DimAngleDisplayUnits(self, *args):
        """
        * Returns angle units in which dimension presentation is displayed.

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_DimAngleDisplayUnits(self, *args)


    def SectionAspect(self, *args):
        """
        * The LineAspect for the wire can be edited. The default values are: Color: Quantity_NOC_ORANGE Type of line: Aspect_TOL_SOLID Width: 1. These attributes are used by the algorithm Prs3d_WFShape.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SectionAspect(self, *args)


    def SetSectionAspect(self, *args):
        """
        * Sets the parameter theAspect for display attributes of sections.

        :param theAspect:
        :type theAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetSectionAspect(self, *args)


    def SetFaceBoundaryDraw(self, *args):
        """
        * Enables or disables face boundary drawing for shading presentations. theIsEnabled is a boolean flag indicating whether the face boundaries should be drawn or not.

        :param theIsEnabled:
        :type theIsEnabled: bool
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryDraw(self, *args)


    def IsFaceBoundaryDraw(self, *args):
        """
        * Checks whether the face boundary drawing is enabled or not.

        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_IsFaceBoundaryDraw(self, *args)


    def SetFaceBoundaryAspect(self, *args):
        """
        * Sets line aspect for face boundaries. theAspect is the line aspect that determines the look of the face boundaries.

        :param theAspect:
        :type theAspect: Handle_Prs3d_LineAspect &
        :rtype: void

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryAspect(self, *args)


    def FaceBoundaryAspect(self, *args):
        """
        * Returns line aspect of face boundaries.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_FaceBoundaryAspect(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_Drawer self)"""
        return _Prs3d.Prs3d_Drawer__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_Drawer self) -> Handle_Prs3d_Drawer"""
        return _Prs3d.Prs3d_Drawer_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Drawer.SetTypeOfDeflection = new_instancemethod(_Prs3d.Prs3d_Drawer_SetTypeOfDeflection, None, Prs3d_Drawer)
Prs3d_Drawer.TypeOfDeflection = new_instancemethod(_Prs3d.Prs3d_Drawer_TypeOfDeflection, None, Prs3d_Drawer)
Prs3d_Drawer.SetMaximalChordialDeviation = new_instancemethod(_Prs3d.Prs3d_Drawer_SetMaximalChordialDeviation, None, Prs3d_Drawer)
Prs3d_Drawer.MaximalChordialDeviation = new_instancemethod(_Prs3d.Prs3d_Drawer_MaximalChordialDeviation, None, Prs3d_Drawer)
Prs3d_Drawer.SetDeviationCoefficient = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDeviationCoefficient, None, Prs3d_Drawer)
Prs3d_Drawer.DeviationCoefficient = new_instancemethod(_Prs3d.Prs3d_Drawer_DeviationCoefficient, None, Prs3d_Drawer)
Prs3d_Drawer.SetHLRDeviationCoefficient = new_instancemethod(_Prs3d.Prs3d_Drawer_SetHLRDeviationCoefficient, None, Prs3d_Drawer)
Prs3d_Drawer.HLRDeviationCoefficient = new_instancemethod(_Prs3d.Prs3d_Drawer_HLRDeviationCoefficient, None, Prs3d_Drawer)
Prs3d_Drawer.SetHLRAngle = new_instancemethod(_Prs3d.Prs3d_Drawer_SetHLRAngle, None, Prs3d_Drawer)
Prs3d_Drawer.HLRAngle = new_instancemethod(_Prs3d.Prs3d_Drawer_HLRAngle, None, Prs3d_Drawer)
Prs3d_Drawer.SetDeviationAngle = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDeviationAngle, None, Prs3d_Drawer)
Prs3d_Drawer.DeviationAngle = new_instancemethod(_Prs3d.Prs3d_Drawer_DeviationAngle, None, Prs3d_Drawer)
Prs3d_Drawer.SetDiscretisation = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDiscretisation, None, Prs3d_Drawer)
Prs3d_Drawer.Discretisation = new_instancemethod(_Prs3d.Prs3d_Drawer_Discretisation, None, Prs3d_Drawer)
Prs3d_Drawer.SetMaximalParameterValue = new_instancemethod(_Prs3d.Prs3d_Drawer_SetMaximalParameterValue, None, Prs3d_Drawer)
Prs3d_Drawer.MaximalParameterValue = new_instancemethod(_Prs3d.Prs3d_Drawer_MaximalParameterValue, None, Prs3d_Drawer)
Prs3d_Drawer.SetIsoOnPlane = new_instancemethod(_Prs3d.Prs3d_Drawer_SetIsoOnPlane, None, Prs3d_Drawer)
Prs3d_Drawer.IsoOnPlane = new_instancemethod(_Prs3d.Prs3d_Drawer_IsoOnPlane, None, Prs3d_Drawer)
Prs3d_Drawer.SetTypeOfHLR = new_instancemethod(_Prs3d.Prs3d_Drawer_SetTypeOfHLR, None, Prs3d_Drawer)
Prs3d_Drawer.TypeOfHLR = new_instancemethod(_Prs3d.Prs3d_Drawer_TypeOfHLR, None, Prs3d_Drawer)
Prs3d_Drawer.UIsoAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_UIsoAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetUIsoAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetUIsoAspect, None, Prs3d_Drawer)
Prs3d_Drawer.VIsoAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_VIsoAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetVIsoAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetVIsoAspect, None, Prs3d_Drawer)
Prs3d_Drawer.FreeBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_FreeBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetFreeBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetFreeBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetFreeBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_SetFreeBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.FreeBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_FreeBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.WireAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_WireAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetWireAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetWireAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetWireDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_SetWireDraw, None, Prs3d_Drawer)
Prs3d_Drawer.WireDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_WireDraw, None, Prs3d_Drawer)
Prs3d_Drawer.UnFreeBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_UnFreeBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetUnFreeBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetUnFreeBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetUnFreeBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_SetUnFreeBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.UnFreeBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_UnFreeBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.LineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_LineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetLineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetLineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.TextAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_TextAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetTextAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetTextAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetLineArrowDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_SetLineArrowDraw, None, Prs3d_Drawer)
Prs3d_Drawer.LineArrowDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_LineArrowDraw, None, Prs3d_Drawer)
Prs3d_Drawer.ArrowAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_ArrowAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetArrowAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetArrowAspect, None, Prs3d_Drawer)
Prs3d_Drawer.PointAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_PointAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetPointAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetPointAspect, None, Prs3d_Drawer)
Prs3d_Drawer.ShadingAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_ShadingAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetShadingAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetShadingAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetShadingAspectGlobal = new_instancemethod(_Prs3d.Prs3d_Drawer_SetShadingAspectGlobal, None, Prs3d_Drawer)
Prs3d_Drawer.ShadingAspectGlobal = new_instancemethod(_Prs3d.Prs3d_Drawer_ShadingAspectGlobal, None, Prs3d_Drawer)
Prs3d_Drawer.DrawHiddenLine = new_instancemethod(_Prs3d.Prs3d_Drawer_DrawHiddenLine, None, Prs3d_Drawer)
Prs3d_Drawer.EnableDrawHiddenLine = new_instancemethod(_Prs3d.Prs3d_Drawer_EnableDrawHiddenLine, None, Prs3d_Drawer)
Prs3d_Drawer.DisableDrawHiddenLine = new_instancemethod(_Prs3d.Prs3d_Drawer_DisableDrawHiddenLine, None, Prs3d_Drawer)
Prs3d_Drawer.HiddenLineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_HiddenLineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetHiddenLineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetHiddenLineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SeenLineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SeenLineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetSeenLineAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetSeenLineAspect, None, Prs3d_Drawer)
Prs3d_Drawer.PlaneAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_PlaneAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetPlaneAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetPlaneAspect, None, Prs3d_Drawer)
Prs3d_Drawer.VectorAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_VectorAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetVectorAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetVectorAspect, None, Prs3d_Drawer)
Prs3d_Drawer.DatumAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_DatumAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetDatumAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDatumAspect, None, Prs3d_Drawer)
Prs3d_Drawer.DimensionAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_DimensionAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetDimensionAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDimensionAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetDimLengthModelUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDimLengthModelUnits, None, Prs3d_Drawer)
Prs3d_Drawer.SetDimAngleModelUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDimAngleModelUnits, None, Prs3d_Drawer)
Prs3d_Drawer.DimLengthModelUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_DimLengthModelUnits, None, Prs3d_Drawer)
Prs3d_Drawer.DimAngleModelUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_DimAngleModelUnits, None, Prs3d_Drawer)
Prs3d_Drawer.SetDimLengthDisplayUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDimLengthDisplayUnits, None, Prs3d_Drawer)
Prs3d_Drawer.SetDimAngleDisplayUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_SetDimAngleDisplayUnits, None, Prs3d_Drawer)
Prs3d_Drawer.DimLengthDisplayUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_DimLengthDisplayUnits, None, Prs3d_Drawer)
Prs3d_Drawer.DimAngleDisplayUnits = new_instancemethod(_Prs3d.Prs3d_Drawer_DimAngleDisplayUnits, None, Prs3d_Drawer)
Prs3d_Drawer.SectionAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SectionAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetSectionAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetSectionAspect, None, Prs3d_Drawer)
Prs3d_Drawer.SetFaceBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_SetFaceBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.IsFaceBoundaryDraw = new_instancemethod(_Prs3d.Prs3d_Drawer_IsFaceBoundaryDraw, None, Prs3d_Drawer)
Prs3d_Drawer.SetFaceBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_SetFaceBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer.FaceBoundaryAspect = new_instancemethod(_Prs3d.Prs3d_Drawer_FaceBoundaryAspect, None, Prs3d_Drawer)
Prs3d_Drawer._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Drawer__kill_pointed, None, Prs3d_Drawer)
Prs3d_Drawer.GetHandle = new_instancemethod(_Prs3d.Prs3d_Drawer_GetHandle, None, Prs3d_Drawer)
Prs3d_Drawer_swigregister = _Prs3d.Prs3d_Drawer_swigregister
Prs3d_Drawer_swigregister(Prs3d_Drawer)

class Handle_Prs3d_Drawer(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_Drawer_swiginit(self, _Prs3d.new_Handle_Prs3d_Drawer(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Drawer_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_Drawer.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_Drawer_Nullify, None, Handle_Prs3d_Drawer)
Handle_Prs3d_Drawer.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_Drawer_IsNull, None, Handle_Prs3d_Drawer)
Handle_Prs3d_Drawer.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_Drawer_GetObject, None, Handle_Prs3d_Drawer)
Handle_Prs3d_Drawer._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_Drawer__kill_pointed, None, Handle_Prs3d_Drawer)
Handle_Prs3d_Drawer_swigregister = _Prs3d.Handle_Prs3d_Drawer_swigregister
Handle_Prs3d_Drawer_swigregister(Handle_Prs3d_Drawer)

def Handle_Prs3d_Drawer_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_Drawer_DownCast(AnObject)
Handle_Prs3d_Drawer_DownCast = _Prs3d.Handle_Prs3d_Drawer_DownCast

class Prs3d_PlaneSet(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Xdir:
        :type Xdir: float
        :param Ydir:
        :type Ydir: float
        :param Zdir:
        :type Zdir: float
        :param Xloc:
        :type Xloc: Quantity_Length
        :param Yloc:
        :type Yloc: Quantity_Length
        :param Zloc:
        :type Zloc: Quantity_Length
        :param anOffset:
        :type anOffset: Quantity_Length
        :rtype: None

        """
        _Prs3d.Prs3d_PlaneSet_swiginit(self, _Prs3d.new_Prs3d_PlaneSet(*args))

    def SetDirection(self, *args):
        """
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Z:
        :type Z: float
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneSet_SetDirection(self, *args)


    def SetLocation(self, *args):
        """
        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneSet_SetLocation(self, *args)


    def SetOffset(self, *args):
        """
        :param anOffset:
        :type anOffset: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneSet_SetOffset(self, *args)


    def Plane(self, *args):
        """
        :rtype: gp_Pln

        """
        return _Prs3d.Prs3d_PlaneSet_Plane(self, *args)


    def Offset(self, *args):
        """
        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneSet_Offset(self, *args)


    def Location(self, *args):
        """
        :param X:
        :type X: Quantity_Length &
        :param Y:
        :type Y: Quantity_Length &
        :param Z:
        :type Z: Quantity_Length &
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneSet_Location(self, *args)


    def Direction(self, *args):
        """
        :param X:
        :type X: Quantity_Length &
        :param Y:
        :type Y: Quantity_Length &
        :param Z:
        :type Z: Quantity_Length &
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneSet_Direction(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_PlaneSet self)"""
        return _Prs3d.Prs3d_PlaneSet__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_PlaneSet self) -> Handle_Prs3d_PlaneSet"""
        return _Prs3d.Prs3d_PlaneSet_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_PlaneSet.SetDirection = new_instancemethod(_Prs3d.Prs3d_PlaneSet_SetDirection, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.SetLocation = new_instancemethod(_Prs3d.Prs3d_PlaneSet_SetLocation, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.SetOffset = new_instancemethod(_Prs3d.Prs3d_PlaneSet_SetOffset, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.Plane = new_instancemethod(_Prs3d.Prs3d_PlaneSet_Plane, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.Offset = new_instancemethod(_Prs3d.Prs3d_PlaneSet_Offset, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.Location = new_instancemethod(_Prs3d.Prs3d_PlaneSet_Location, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.Direction = new_instancemethod(_Prs3d.Prs3d_PlaneSet_Direction, None, Prs3d_PlaneSet)
Prs3d_PlaneSet._kill_pointed = new_instancemethod(_Prs3d.Prs3d_PlaneSet__kill_pointed, None, Prs3d_PlaneSet)
Prs3d_PlaneSet.GetHandle = new_instancemethod(_Prs3d.Prs3d_PlaneSet_GetHandle, None, Prs3d_PlaneSet)
Prs3d_PlaneSet_swigregister = _Prs3d.Prs3d_PlaneSet_swigregister
Prs3d_PlaneSet_swigregister(Prs3d_PlaneSet)

class Handle_Prs3d_PlaneSet(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_PlaneSet_swiginit(self, _Prs3d.new_Handle_Prs3d_PlaneSet(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PlaneSet_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_PlaneSet.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneSet_Nullify, None, Handle_Prs3d_PlaneSet)
Handle_Prs3d_PlaneSet.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneSet_IsNull, None, Handle_Prs3d_PlaneSet)
Handle_Prs3d_PlaneSet.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneSet_GetObject, None, Handle_Prs3d_PlaneSet)
Handle_Prs3d_PlaneSet._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneSet__kill_pointed, None, Handle_Prs3d_PlaneSet)
Handle_Prs3d_PlaneSet_swigregister = _Prs3d.Handle_Prs3d_PlaneSet_swigregister
Handle_Prs3d_PlaneSet_swigregister(Handle_Prs3d_PlaneSet)

def Handle_Prs3d_PlaneSet_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_PlaneSet_DownCast(AnObject)
Handle_Prs3d_PlaneSet_DownCast = _Prs3d.Handle_Prs3d_PlaneSet_DownCast

class Prs3d_Presentation(OCC.Graphic3d.Graphic3d_Structure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a presentation object if <Init> is false, no color initialization is done.

        :param aStructureManager:
        :type aStructureManager: Handle_Graphic3d_StructureManager &
        :param Init: default value is Standard_True
        :type Init: bool
        :rtype: None

        """
        _Prs3d.Prs3d_Presentation_swiginit(self, _Prs3d.new_Prs3d_Presentation(*args))

    def Compute(self, *args):
        """
        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: Handle_Graphic3d_Structure

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: Handle_Graphic3d_Structure

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: void

        * Returns the new Structure defined for the new visualization

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: void

        """
        return _Prs3d.Prs3d_Presentation_Compute(self, *args)


    def Highlight(self, *args):
        """
        * displays the whole content of the presentation in white.

        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Highlight(self, *args)


    def Color(self, *args):
        """
        * displays the whole content of the presentation in the specified color.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Color(self, *args)


    def BoundBox(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_BoundBox(self, *args)


    def SetShadingAspect(self, *args):
        """
        :param aShadingAspect:
        :type aShadingAspect: Handle_Prs3d_ShadingAspect &
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_SetShadingAspect(self, *args)


    def IsPickable(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_Presentation_IsPickable(self, *args)


    def Transform(self, *args):
        """
        :param aTransformation:
        :type aTransformation: Handle_Geom_Transformation &
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Transform(self, *args)


    def Place(self, *args):
        """
        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Place(self, *args)


    def Multiply(self, *args):
        """
        :param aTransformation:
        :type aTransformation: Handle_Geom_Transformation &
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Multiply(self, *args)


    def Move(self, *args):
        """
        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param Z:
        :type Z: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Move(self, *args)


    def Transformation(self, *args):
        """
        :rtype: Handle_Geom_Transformation

        """
        return _Prs3d.Prs3d_Presentation_Transformation(self, *args)


    def Connect(self, *args):
        """
        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Connect(self, *args)


    def Remove(self, *args):
        """
        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_Remove(self, *args)


    def RemoveAll(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_RemoveAll(self, *args)


    def SetPickable(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_SetPickable(self, *args)


    def SetUnPickable(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_Presentation_SetUnPickable(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_Presentation self)"""
        return _Prs3d.Prs3d_Presentation__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_Presentation self) -> Handle_Prs3d_Presentation"""
        return _Prs3d.Prs3d_Presentation_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Presentation.Compute = new_instancemethod(_Prs3d.Prs3d_Presentation_Compute, None, Prs3d_Presentation)
Prs3d_Presentation.Highlight = new_instancemethod(_Prs3d.Prs3d_Presentation_Highlight, None, Prs3d_Presentation)
Prs3d_Presentation.Color = new_instancemethod(_Prs3d.Prs3d_Presentation_Color, None, Prs3d_Presentation)
Prs3d_Presentation.BoundBox = new_instancemethod(_Prs3d.Prs3d_Presentation_BoundBox, None, Prs3d_Presentation)
Prs3d_Presentation.SetShadingAspect = new_instancemethod(_Prs3d.Prs3d_Presentation_SetShadingAspect, None, Prs3d_Presentation)
Prs3d_Presentation.IsPickable = new_instancemethod(_Prs3d.Prs3d_Presentation_IsPickable, None, Prs3d_Presentation)
Prs3d_Presentation.Transform = new_instancemethod(_Prs3d.Prs3d_Presentation_Transform, None, Prs3d_Presentation)
Prs3d_Presentation.Place = new_instancemethod(_Prs3d.Prs3d_Presentation_Place, None, Prs3d_Presentation)
Prs3d_Presentation.Multiply = new_instancemethod(_Prs3d.Prs3d_Presentation_Multiply, None, Prs3d_Presentation)
Prs3d_Presentation.Move = new_instancemethod(_Prs3d.Prs3d_Presentation_Move, None, Prs3d_Presentation)
Prs3d_Presentation.Transformation = new_instancemethod(_Prs3d.Prs3d_Presentation_Transformation, None, Prs3d_Presentation)
Prs3d_Presentation.Connect = new_instancemethod(_Prs3d.Prs3d_Presentation_Connect, None, Prs3d_Presentation)
Prs3d_Presentation.Remove = new_instancemethod(_Prs3d.Prs3d_Presentation_Remove, None, Prs3d_Presentation)
Prs3d_Presentation.RemoveAll = new_instancemethod(_Prs3d.Prs3d_Presentation_RemoveAll, None, Prs3d_Presentation)
Prs3d_Presentation.SetPickable = new_instancemethod(_Prs3d.Prs3d_Presentation_SetPickable, None, Prs3d_Presentation)
Prs3d_Presentation.SetUnPickable = new_instancemethod(_Prs3d.Prs3d_Presentation_SetUnPickable, None, Prs3d_Presentation)
Prs3d_Presentation._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Presentation__kill_pointed, None, Prs3d_Presentation)
Prs3d_Presentation.GetHandle = new_instancemethod(_Prs3d.Prs3d_Presentation_GetHandle, None, Prs3d_Presentation)
Prs3d_Presentation_swigregister = _Prs3d.Prs3d_Presentation_swigregister
Prs3d_Presentation_swigregister(Prs3d_Presentation)

class Handle_Prs3d_Presentation(OCC.Graphic3d.Handle_Graphic3d_Structure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_Presentation_swiginit(self, _Prs3d.new_Handle_Prs3d_Presentation(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Presentation_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_Presentation.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_Presentation_Nullify, None, Handle_Prs3d_Presentation)
Handle_Prs3d_Presentation.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_Presentation_IsNull, None, Handle_Prs3d_Presentation)
Handle_Prs3d_Presentation.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_Presentation_GetObject, None, Handle_Prs3d_Presentation)
Handle_Prs3d_Presentation._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_Presentation__kill_pointed, None, Handle_Prs3d_Presentation)
Handle_Prs3d_Presentation_swigregister = _Prs3d.Handle_Prs3d_Presentation_swigregister
Handle_Prs3d_Presentation_swigregister(Handle_Prs3d_Presentation)

def Handle_Prs3d_Presentation_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_Presentation_DownCast(AnObject)
Handle_Prs3d_Presentation_DownCast = _Prs3d.Handle_Prs3d_Presentation_DownCast

class Prs3d_Projector(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Pr:
        :type Pr: HLRAlgo_Projector &
        :rtype: None

        * Constructs a projector framework from the following parameters - Pers is true if the view is a perspective view and false if it is an axonometric one; - Focus is the focal length if a perspective view is defined; - DX, DY and DZ are the coordinates of the projection vector; - XAt, YAt and ZAt are the coordinates of the view point; - XUp, YUp and ZUp are the coordinates of the vertical direction vector.

        :param Pers:
        :type Pers: bool
        :param Focus:
        :type Focus: Quantity_Length
        :param DX:
        :type DX: Quantity_Length
        :param DY:
        :type DY: Quantity_Length
        :param DZ:
        :type DZ: Quantity_Length
        :param XAt:
        :type XAt: Quantity_Length
        :param YAt:
        :type YAt: Quantity_Length
        :param ZAt:
        :type ZAt: Quantity_Length
        :param XUp:
        :type XUp: Quantity_Length
        :param YUp:
        :type YUp: Quantity_Length
        :param ZUp:
        :type ZUp: Quantity_Length
        :rtype: None

        """
        _Prs3d.Prs3d_Projector_swiginit(self, _Prs3d.new_Prs3d_Projector(*args))

    def Projector(self, *args):
        """
        * Returns a projector object for use in a hidden line removal algorithm.

        :rtype: HLRAlgo_Projector

        """
        return _Prs3d.Prs3d_Projector_Projector(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_Projector self)"""
        return _Prs3d.Prs3d_Projector__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_Projector self) -> Handle_Prs3d_Projector"""
        return _Prs3d.Prs3d_Projector_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Projector.Projector = new_instancemethod(_Prs3d.Prs3d_Projector_Projector, None, Prs3d_Projector)
Prs3d_Projector._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Projector__kill_pointed, None, Prs3d_Projector)
Prs3d_Projector.GetHandle = new_instancemethod(_Prs3d.Prs3d_Projector_GetHandle, None, Prs3d_Projector)
Prs3d_Projector_swigregister = _Prs3d.Prs3d_Projector_swigregister
Prs3d_Projector_swigregister(Prs3d_Projector)

class Handle_Prs3d_Projector(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_Projector_swiginit(self, _Prs3d.new_Handle_Prs3d_Projector(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Projector_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_Projector.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_Projector_Nullify, None, Handle_Prs3d_Projector)
Handle_Prs3d_Projector.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_Projector_IsNull, None, Handle_Prs3d_Projector)
Handle_Prs3d_Projector.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_Projector_GetObject, None, Handle_Prs3d_Projector)
Handle_Prs3d_Projector._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_Projector__kill_pointed, None, Handle_Prs3d_Projector)
Handle_Prs3d_Projector_swigregister = _Prs3d.Handle_Prs3d_Projector_swigregister
Handle_Prs3d_Projector_swigregister(Handle_Prs3d_Projector)

def Handle_Prs3d_Projector_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_Projector_DownCast(AnObject)
Handle_Prs3d_Projector_DownCast = _Prs3d.Handle_Prs3d_Projector_DownCast

class Prs3d_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentGroup(*args):
        """
        * Returns the current group of primititves inside graphic objects in the display. A group also contains the attributes whose ranges are limited to the primitives in it.

        :param Prs3d:
        :type Prs3d: Handle_Prs3d_Presentation &
        :rtype: Handle_Graphic3d_Group

        """
        return _Prs3d.Prs3d_Root_CurrentGroup(*args)

    CurrentGroup = staticmethod(CurrentGroup)

    def NewGroup(*args):
        """
        * Returns the new group of primitives inside graphic objects in the display. A group also contains the attributes whose ranges are limited to the primitives in it.

        :param Prs3d:
        :type Prs3d: Handle_Prs3d_Presentation &
        :rtype: Handle_Graphic3d_Group

        """
        return _Prs3d.Prs3d_Root_NewGroup(*args)

    NewGroup = staticmethod(NewGroup)

    def __init__(self):
        _Prs3d.Prs3d_Root_swiginit(self, _Prs3d.new_Prs3d_Root())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Root._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Root__kill_pointed, None, Prs3d_Root)
Prs3d_Root_swigregister = _Prs3d.Prs3d_Root_swigregister
Prs3d_Root_swigregister(Prs3d_Root)

def Prs3d_Root_CurrentGroup(*args):
    """
    * Returns the current group of primititves inside graphic objects in the display. A group also contains the attributes whose ranges are limited to the primitives in it.

    :param Prs3d:
    :type Prs3d: Handle_Prs3d_Presentation &
    :rtype: Handle_Graphic3d_Group

    """
    return _Prs3d.Prs3d_Root_CurrentGroup(*args)

def Prs3d_Root_NewGroup(*args):
    """
    * Returns the new group of primitives inside graphic objects in the display. A group also contains the attributes whose ranges are limited to the primitives in it.

    :param Prs3d:
    :type Prs3d: Handle_Prs3d_Presentation &
    :rtype: Handle_Graphic3d_Group

    """
    return _Prs3d.Prs3d_Root_NewGroup(*args)

class Prs3d_ShapeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        _Prs3d.Prs3d_ShapeTool_swiginit(self, _Prs3d.new_Prs3d_ShapeTool(*args))

    def InitFace(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_InitFace(self, *args)


    def MoreFace(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_MoreFace(self, *args)


    def NextFace(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_NextFace(self, *args)


    def GetFace(self, *args):
        """
        :rtype: TopoDS_Face

        """
        return _Prs3d.Prs3d_ShapeTool_GetFace(self, *args)


    def FaceBound(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _Prs3d.Prs3d_ShapeTool_FaceBound(self, *args)


    def IsPlanarFace(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_IsPlanarFace(self, *args)


    def InitCurve(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_InitCurve(self, *args)


    def MoreCurve(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_MoreCurve(self, *args)


    def NextCurve(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_NextCurve(self, *args)


    def GetCurve(self, *args):
        """
        :rtype: TopoDS_Edge

        """
        return _Prs3d.Prs3d_ShapeTool_GetCurve(self, *args)


    def CurveBound(self, *args):
        """
        :rtype: Bnd_Box

        """
        return _Prs3d.Prs3d_ShapeTool_CurveBound(self, *args)


    def Neighbours(self, *args):
        """
        :rtype: int

        """
        return _Prs3d.Prs3d_ShapeTool_Neighbours(self, *args)


    def FacesOfEdge(self, *args):
        """
        :rtype: Handle_TopTools_HSequenceOfShape

        """
        return _Prs3d.Prs3d_ShapeTool_FacesOfEdge(self, *args)


    def InitVertex(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_InitVertex(self, *args)


    def MoreVertex(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_MoreVertex(self, *args)


    def NextVertex(self, *args):
        """
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_NextVertex(self, *args)


    def GetVertex(self, *args):
        """
        :rtype: TopoDS_Vertex

        """
        return _Prs3d.Prs3d_ShapeTool_GetVertex(self, *args)


    def HasSurface(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_HasSurface(self, *args)


    def CurrentTriangulation(self, *args):
        """
        :param l:
        :type l: TopLoc_Location &
        :rtype: Handle_Poly_Triangulation

        """
        return _Prs3d.Prs3d_ShapeTool_CurrentTriangulation(self, *args)


    def HasCurve(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_ShapeTool_HasCurve(self, *args)


    def PolygonOnTriangulation(self, *args):
        """
        :param Indices:
        :type Indices: Handle_Poly_PolygonOnTriangulation &
        :param T:
        :type T: Handle_Poly_Triangulation &
        :param l:
        :type l: TopLoc_Location &
        :rtype: None

        """
        return _Prs3d.Prs3d_ShapeTool_PolygonOnTriangulation(self, *args)


    def Polygon3D(self, *args):
        """
        :param l:
        :type l: TopLoc_Location &
        :rtype: Handle_Poly_Polygon3D

        """
        return _Prs3d.Prs3d_ShapeTool_Polygon3D(self, *args)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_ShapeTool.InitFace = new_instancemethod(_Prs3d.Prs3d_ShapeTool_InitFace, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.MoreFace = new_instancemethod(_Prs3d.Prs3d_ShapeTool_MoreFace, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.NextFace = new_instancemethod(_Prs3d.Prs3d_ShapeTool_NextFace, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.GetFace = new_instancemethod(_Prs3d.Prs3d_ShapeTool_GetFace, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.FaceBound = new_instancemethod(_Prs3d.Prs3d_ShapeTool_FaceBound, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.IsPlanarFace = new_instancemethod(_Prs3d.Prs3d_ShapeTool_IsPlanarFace, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.InitCurve = new_instancemethod(_Prs3d.Prs3d_ShapeTool_InitCurve, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.MoreCurve = new_instancemethod(_Prs3d.Prs3d_ShapeTool_MoreCurve, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.NextCurve = new_instancemethod(_Prs3d.Prs3d_ShapeTool_NextCurve, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.GetCurve = new_instancemethod(_Prs3d.Prs3d_ShapeTool_GetCurve, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.CurveBound = new_instancemethod(_Prs3d.Prs3d_ShapeTool_CurveBound, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.Neighbours = new_instancemethod(_Prs3d.Prs3d_ShapeTool_Neighbours, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.FacesOfEdge = new_instancemethod(_Prs3d.Prs3d_ShapeTool_FacesOfEdge, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.InitVertex = new_instancemethod(_Prs3d.Prs3d_ShapeTool_InitVertex, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.MoreVertex = new_instancemethod(_Prs3d.Prs3d_ShapeTool_MoreVertex, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.NextVertex = new_instancemethod(_Prs3d.Prs3d_ShapeTool_NextVertex, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.GetVertex = new_instancemethod(_Prs3d.Prs3d_ShapeTool_GetVertex, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.HasSurface = new_instancemethod(_Prs3d.Prs3d_ShapeTool_HasSurface, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.CurrentTriangulation = new_instancemethod(_Prs3d.Prs3d_ShapeTool_CurrentTriangulation, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.HasCurve = new_instancemethod(_Prs3d.Prs3d_ShapeTool_HasCurve, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.PolygonOnTriangulation = new_instancemethod(_Prs3d.Prs3d_ShapeTool_PolygonOnTriangulation, None, Prs3d_ShapeTool)
Prs3d_ShapeTool.Polygon3D = new_instancemethod(_Prs3d.Prs3d_ShapeTool_Polygon3D, None, Prs3d_ShapeTool)
Prs3d_ShapeTool._kill_pointed = new_instancemethod(_Prs3d.Prs3d_ShapeTool__kill_pointed, None, Prs3d_ShapeTool)
Prs3d_ShapeTool_swigregister = _Prs3d.Prs3d_ShapeTool_swigregister
Prs3d_ShapeTool_swigregister(Prs3d_ShapeTool)

class Prs3d_Arrow(Prs3d_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Draw(*args):
        """
        * Defines the representation of the arrow defined by the location point aLocation, the direction aDirection and the length aLength. The angle anAngle defines the angle of opening of the arrow head. The presentation object aPresentation stores the information defined in this framework.

        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :param aLocation:
        :type aLocation: gp_Pnt
        :param aDirection:
        :type aDirection: gp_Dir
        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :param aLength:
        :type aLength: Quantity_Length
        :rtype: void

        """
        return _Prs3d.Prs3d_Arrow_Draw(*args)

    Draw = staticmethod(Draw)

    def Fill(*args):
        """
        * Defines the representation of the arrow defined by the location point aLocation, the direction vector aDirection and the length aLength. The angle anAngle defines the angle of opening of the arrow head, and the drawer aDrawer specifies the display attributes which arrows will have. With this syntax, no presentation object is created.

        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :param aLocation:
        :type aLocation: gp_Pnt
        :param aDirection:
        :type aDirection: gp_Dir
        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :param aLength:
        :type aLength: Quantity_Length
        :rtype: void

        """
        return _Prs3d.Prs3d_Arrow_Fill(*args)

    Fill = staticmethod(Fill)

    def __init__(self):
        _Prs3d.Prs3d_Arrow_swiginit(self, _Prs3d.new_Prs3d_Arrow())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Arrow._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Arrow__kill_pointed, None, Prs3d_Arrow)
Prs3d_Arrow_swigregister = _Prs3d.Prs3d_Arrow_swigregister
Prs3d_Arrow_swigregister(Prs3d_Arrow)

def Prs3d_Arrow_Draw(*args):
    """
    * Defines the representation of the arrow defined by the location point aLocation, the direction aDirection and the length aLength. The angle anAngle defines the angle of opening of the arrow head. The presentation object aPresentation stores the information defined in this framework.

    :param aPresentation:
    :type aPresentation: Handle_Prs3d_Presentation &
    :param aLocation:
    :type aLocation: gp_Pnt
    :param aDirection:
    :type aDirection: gp_Dir
    :param anAngle:
    :type anAngle: Quantity_PlaneAngle
    :param aLength:
    :type aLength: Quantity_Length
    :rtype: void

    """
    return _Prs3d.Prs3d_Arrow_Draw(*args)

def Prs3d_Arrow_Fill(*args):
    """
    * Defines the representation of the arrow defined by the location point aLocation, the direction vector aDirection and the length aLength. The angle anAngle defines the angle of opening of the arrow head, and the drawer aDrawer specifies the display attributes which arrows will have. With this syntax, no presentation object is created.

    :param aPresentation:
    :type aPresentation: Handle_Prs3d_Presentation &
    :param aLocation:
    :type aLocation: gp_Pnt
    :param aDirection:
    :type aDirection: gp_Dir
    :param anAngle:
    :type anAngle: Quantity_PlaneAngle
    :param aLength:
    :type aLength: Quantity_Length
    :rtype: void

    """
    return _Prs3d.Prs3d_Arrow_Fill(*args)

class Prs3d_ArrowAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework for displaying arrows in representations of lengths. The lengths displayed are either on their own or in chamfers, fillets, diameters and radii.

        :rtype: None

        * Constructs a framework to display an arrow with a shaft of the length aLength and having a head with sides at the angle anAngle from each other.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :param aLength:
        :type aLength: Quantity_Length
        :rtype: None

        """
        _Prs3d.Prs3d_ArrowAspect_swiginit(self, _Prs3d.new_Prs3d_ArrowAspect(*args))

    def SetAngle(self, *args):
        """
        * defines the angle of the arrows.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Prs3d.Prs3d_ArrowAspect_SetAngle(self, *args)


    def Angle(self, *args):
        """
        * returns the current value of the angle used when drawing an arrow.

        :rtype: Quantity_PlaneAngle

        """
        return _Prs3d.Prs3d_ArrowAspect_Angle(self, *args)


    def SetLength(self, *args):
        """
        * defines the length of the arrows.

        :param aLength:
        :type aLength: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_ArrowAspect_SetLength(self, *args)


    def Length(self, *args):
        """
        * returns the current value of the length used when drawing an arrow.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_ArrowAspect_Length(self, *args)


    def SetColor(self, *args):
        """
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _Prs3d.Prs3d_ArrowAspect_SetColor(self, *args)


    def aspect(self, *args):
        """
        :rtype: Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Prs3d_ArrowAspect_aspect(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_ArrowAspect self)"""
        return _Prs3d.Prs3d_ArrowAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_ArrowAspect self) -> Handle_Prs3d_ArrowAspect"""
        return _Prs3d.Prs3d_ArrowAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_ArrowAspect.SetAngle = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_SetAngle, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.Angle = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_Angle, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.SetLength = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_SetLength, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.Length = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_Length, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.SetColor = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_SetColor, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.aspect = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_aspect, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_ArrowAspect__kill_pointed, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_ArrowAspect_GetHandle, None, Prs3d_ArrowAspect)
Prs3d_ArrowAspect_swigregister = _Prs3d.Prs3d_ArrowAspect_swigregister
Prs3d_ArrowAspect_swigregister(Prs3d_ArrowAspect)

class Handle_Prs3d_ArrowAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_ArrowAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_ArrowAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_ArrowAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_ArrowAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_ArrowAspect_Nullify, None, Handle_Prs3d_ArrowAspect)
Handle_Prs3d_ArrowAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_ArrowAspect_IsNull, None, Handle_Prs3d_ArrowAspect)
Handle_Prs3d_ArrowAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_ArrowAspect_GetObject, None, Handle_Prs3d_ArrowAspect)
Handle_Prs3d_ArrowAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_ArrowAspect__kill_pointed, None, Handle_Prs3d_ArrowAspect)
Handle_Prs3d_ArrowAspect_swigregister = _Prs3d.Handle_Prs3d_ArrowAspect_swigregister
Handle_Prs3d_ArrowAspect_swigregister(Handle_Prs3d_ArrowAspect)

def Handle_Prs3d_ArrowAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_ArrowAspect_DownCast(AnObject)
Handle_Prs3d_ArrowAspect_DownCast = _Prs3d.Handle_Prs3d_ArrowAspect_DownCast

class Prs3d_DatumAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * An empty framework to define the display of datums.

        :rtype: None

        """
        _Prs3d.Prs3d_DatumAspect_swiginit(self, _Prs3d.new_Prs3d_DatumAspect(*args))

    def FirstAxisAspect(self, *args):
        """
        * Returns the attributes for display of the first axis.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DatumAspect_FirstAxisAspect(self, *args)


    def SecondAxisAspect(self, *args):
        """
        * Returns the attributes for display of the second axis.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DatumAspect_SecondAxisAspect(self, *args)


    def ThirdAxisAspect(self, *args):
        """
        * Returns the attributes for display of the third axis.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DatumAspect_ThirdAxisAspect(self, *args)


    def SetDrawFirstAndSecondAxis(self, *args):
        """
        * Sets the DrawFirstAndSecondAxis attributes to active.

        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawFirstAndSecondAxis(self, *args)


    def DrawFirstAndSecondAxis(self, *args):
        """
        * Returns true if the first and second axes can be drawn.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DatumAspect_DrawFirstAndSecondAxis(self, *args)


    def SetDrawThirdAxis(self, *args):
        """
        * Sets the DrawThirdAxis attributes to active.

        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawThirdAxis(self, *args)


    def DrawThirdAxis(self, *args):
        """
        * Returns true if the third axis can be drawn.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DatumAspect_DrawThirdAxis(self, *args)


    def SetAxisLength(self, *args):
        """
        * Sets the lengths L1, L2 and L3 of the three axes.

        :param L1:
        :type L1: float
        :param L2:
        :type L2: float
        :param L3:
        :type L3: float
        :rtype: None

        """
        return _Prs3d.Prs3d_DatumAspect_SetAxisLength(self, *args)


    def FirstAxisLength(self, *args):
        """
        * Returns the length of the displayed first axis.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_DatumAspect_FirstAxisLength(self, *args)


    def SecondAxisLength(self, *args):
        """
        * Returns the length of the displayed second axis.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_DatumAspect_SecondAxisLength(self, *args)


    def ThirdAxisLength(self, *args):
        """
        * Returns the length of the displayed third axis.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_DatumAspect_ThirdAxisLength(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_DatumAspect self)"""
        return _Prs3d.Prs3d_DatumAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_DatumAspect self) -> Handle_Prs3d_DatumAspect"""
        return _Prs3d.Prs3d_DatumAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_DatumAspect.FirstAxisAspect = new_instancemethod(_Prs3d.Prs3d_DatumAspect_FirstAxisAspect, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.SecondAxisAspect = new_instancemethod(_Prs3d.Prs3d_DatumAspect_SecondAxisAspect, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.ThirdAxisAspect = new_instancemethod(_Prs3d.Prs3d_DatumAspect_ThirdAxisAspect, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.SetDrawFirstAndSecondAxis = new_instancemethod(_Prs3d.Prs3d_DatumAspect_SetDrawFirstAndSecondAxis, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.DrawFirstAndSecondAxis = new_instancemethod(_Prs3d.Prs3d_DatumAspect_DrawFirstAndSecondAxis, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.SetDrawThirdAxis = new_instancemethod(_Prs3d.Prs3d_DatumAspect_SetDrawThirdAxis, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.DrawThirdAxis = new_instancemethod(_Prs3d.Prs3d_DatumAspect_DrawThirdAxis, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.SetAxisLength = new_instancemethod(_Prs3d.Prs3d_DatumAspect_SetAxisLength, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.FirstAxisLength = new_instancemethod(_Prs3d.Prs3d_DatumAspect_FirstAxisLength, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.SecondAxisLength = new_instancemethod(_Prs3d.Prs3d_DatumAspect_SecondAxisLength, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.ThirdAxisLength = new_instancemethod(_Prs3d.Prs3d_DatumAspect_ThirdAxisLength, None, Prs3d_DatumAspect)
Prs3d_DatumAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_DatumAspect__kill_pointed, None, Prs3d_DatumAspect)
Prs3d_DatumAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_DatumAspect_GetHandle, None, Prs3d_DatumAspect)
Prs3d_DatumAspect_swigregister = _Prs3d.Prs3d_DatumAspect_swigregister
Prs3d_DatumAspect_swigregister(Prs3d_DatumAspect)

class Handle_Prs3d_DatumAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_DatumAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_DatumAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_DatumAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_DatumAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_DatumAspect_Nullify, None, Handle_Prs3d_DatumAspect)
Handle_Prs3d_DatumAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_DatumAspect_IsNull, None, Handle_Prs3d_DatumAspect)
Handle_Prs3d_DatumAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_DatumAspect_GetObject, None, Handle_Prs3d_DatumAspect)
Handle_Prs3d_DatumAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_DatumAspect__kill_pointed, None, Handle_Prs3d_DatumAspect)
Handle_Prs3d_DatumAspect_swigregister = _Prs3d.Handle_Prs3d_DatumAspect_swigregister
Handle_Prs3d_DatumAspect_swigregister(Handle_Prs3d_DatumAspect)

def Handle_Prs3d_DatumAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_DatumAspect_DownCast(AnObject)
Handle_Prs3d_DatumAspect_DownCast = _Prs3d.Handle_Prs3d_DatumAspect_DownCast

class Prs3d_DimensionAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework to define the display of dimensions.

        :rtype: None

        """
        _Prs3d.Prs3d_DimensionAspect_swiginit(self, _Prs3d.new_Prs3d_DimensionAspect(*args))

    def LineAspect(self, *args):
        """
        * Returns the settings for the display of lines used in presentation of dimensions.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_LineAspect(self, *args)


    def SetLineAspect(self, *args):
        """
        * Sets the display attributes of lines used in presentation of dimensions.

        :param theAspect:
        :type theAspect: Handle_Prs3d_LineAspect &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        * Returns the settings for the display of text used in presentation of dimensions.

        :rtype: Handle_Prs3d_TextAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_TextAspect(self, *args)


    def SetTextAspect(self, *args):
        """
        * Sets the display attributes of text used in presentation of dimensions.

        :param theAspect:
        :type theAspect: Handle_Prs3d_TextAspect &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextAspect(self, *args)


    def IsText3d(self, *args):
        """
        * Check if text for dimension label is 3d.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_IsText3d(self, *args)


    def MakeText3d(self, *args):
        """
        * Sets type of text.

        :param isText3d:
        :type isText3d: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeText3d(self, *args)


    def IsTextShaded(self, *args):
        """
        * Check if 3d text for dimension label is shaded.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_IsTextShaded(self, *args)


    def MakeTextShaded(self, *args):
        """
        * Turns on/off text shading for 3d text.

        :param isTextShaded:
        :type isTextShaded: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeTextShaded(self, *args)


    def IsArrows3d(self, *args):
        """
        * Gets type of arrows.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_IsArrows3d(self, *args)


    def MakeArrows3d(self, *args):
        """
        * Sets type of arrows.

        :param isArrows3d:
        :type isArrows3d: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeArrows3d(self, *args)


    def IsUnitsDisplayed(self, *args):
        """
        * Shows if Units are to be displayed along with dimension value.

        :rtype: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_IsUnitsDisplayed(self, *args)


    def MakeUnitsDisplayed(self, *args):
        """
        * Specifies whether the units string should be displayed along with value label or not.

        :param theIsDisplayed:
        :type theIsDisplayed: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeUnitsDisplayed(self, *args)


    def SetArrowOrientation(self, *args):
        """
        * Sets orientation of arrows (external or internal). By default orientation is chosen automatically according to situation and text label size.

        :param theArrowOrient:
        :type theArrowOrient: Prs3d_DimensionArrowOrientation
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowOrientation(self, *args)


    def ArrowOrientation(self, *args):
        """
        * Gets orientation of arrows (external or internal).

        :rtype: Prs3d_DimensionArrowOrientation

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowOrientation(self, *args)


    def SetTextVerticalPosition(self, *args):
        """
        * Sets vertical text alignment for text label.

        :param thePosition:
        :type thePosition: Prs3d_DimensionTextVerticalPosition
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextVerticalPosition(self, *args)


    def TextVerticalPosition(self, *args):
        """
        * Gets vertical text alignment for text label.

        :rtype: Prs3d_DimensionTextVerticalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_TextVerticalPosition(self, *args)


    def SetTextHorizontalPosition(self, *args):
        """
        * Sets horizontal text alignment for text label.

        :param thePosition:
        :type thePosition: Prs3d_DimensionTextHorizontalPosition
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextHorizontalPosition(self, *args)


    def TextHorizontalPosition(self, *args):
        """
        * Gets horizontal text alignment for text label.

        :rtype: Prs3d_DimensionTextHorizontalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_TextHorizontalPosition(self, *args)


    def ArrowAspect(self, *args):
        """
        * Returns the settings for displaying arrows.

        :rtype: Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowAspect(self, *args)


    def SetArrowAspect(self, *args):
        """
        * Sets the display attributes of arrows used in presentation of dimensions.

        :param theAspect:
        :type theAspect: Handle_Prs3d_ArrowAspect &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowAspect(self, *args)


    def SetCommonColor(self, *args):
        """
        * Sets the same color for all parts of dimension: lines, arrows and text.

        :param theColor:
        :type theColor: Quantity_Color &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetCommonColor(self, *args)


    def SetExtensionSize(self, *args):
        """
        * Sets extension size.

        :param theSize:
        :type theSize: float
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetExtensionSize(self, *args)


    def ExtensionSize(self, *args):
        """
        * Returns extension size.

        :rtype: float

        """
        return _Prs3d.Prs3d_DimensionAspect_ExtensionSize(self, *args)


    def SetArrowTailSize(self, *args):
        """
        * Set size for arrow tail (extension without text).

        :param theSize:
        :type theSize: float
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowTailSize(self, *args)


    def ArrowTailSize(self, *args):
        """
        * Returns arrow tail size.

        :rtype: float

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowTailSize(self, *args)


    def SetValueStringFormat(self, *args):
        """
        * Sets 'sprintf'-syntax format for formatting dimension value labels.

        :param theFormat:
        :type theFormat: TCollection_AsciiString &
        :rtype: None

        """
        return _Prs3d.Prs3d_DimensionAspect_SetValueStringFormat(self, *args)


    def ValueStringFormat(self, *args):
        """
        * Returns format.

        :rtype: TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionAspect_ValueStringFormat(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_DimensionAspect self)"""
        return _Prs3d.Prs3d_DimensionAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_DimensionAspect self) -> Handle_Prs3d_DimensionAspect"""
        return _Prs3d.Prs3d_DimensionAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_DimensionAspect.LineAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_LineAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetLineAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetLineAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.TextAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_TextAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetTextAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetTextAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.IsText3d = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_IsText3d, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.MakeText3d = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_MakeText3d, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.IsTextShaded = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_IsTextShaded, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.MakeTextShaded = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_MakeTextShaded, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.IsArrows3d = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_IsArrows3d, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.MakeArrows3d = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_MakeArrows3d, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.IsUnitsDisplayed = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_IsUnitsDisplayed, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.MakeUnitsDisplayed = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_MakeUnitsDisplayed, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetArrowOrientation = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetArrowOrientation, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.ArrowOrientation = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_ArrowOrientation, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetTextVerticalPosition = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetTextVerticalPosition, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.TextVerticalPosition = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_TextVerticalPosition, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetTextHorizontalPosition = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetTextHorizontalPosition, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.TextHorizontalPosition = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_TextHorizontalPosition, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.ArrowAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_ArrowAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetArrowAspect = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetArrowAspect, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetCommonColor = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetCommonColor, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetExtensionSize = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetExtensionSize, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.ExtensionSize = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_ExtensionSize, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetArrowTailSize = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetArrowTailSize, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.ArrowTailSize = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_ArrowTailSize, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.SetValueStringFormat = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_SetValueStringFormat, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.ValueStringFormat = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_ValueStringFormat, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_DimensionAspect__kill_pointed, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_DimensionAspect_GetHandle, None, Prs3d_DimensionAspect)
Prs3d_DimensionAspect_swigregister = _Prs3d.Prs3d_DimensionAspect_swigregister
Prs3d_DimensionAspect_swigregister(Prs3d_DimensionAspect)

class Handle_Prs3d_DimensionAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_DimensionAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_DimensionAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_DimensionAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_DimensionAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_DimensionAspect_Nullify, None, Handle_Prs3d_DimensionAspect)
Handle_Prs3d_DimensionAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_DimensionAspect_IsNull, None, Handle_Prs3d_DimensionAspect)
Handle_Prs3d_DimensionAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_DimensionAspect_GetObject, None, Handle_Prs3d_DimensionAspect)
Handle_Prs3d_DimensionAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_DimensionAspect__kill_pointed, None, Handle_Prs3d_DimensionAspect)
Handle_Prs3d_DimensionAspect_swigregister = _Prs3d.Handle_Prs3d_DimensionAspect_swigregister
Handle_Prs3d_DimensionAspect_swigregister(Handle_Prs3d_DimensionAspect)

def Handle_Prs3d_DimensionAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_DimensionAspect_DownCast(AnObject)
Handle_Prs3d_DimensionAspect_DownCast = _Prs3d.Handle_Prs3d_DimensionAspect_DownCast

class Prs3d_LineAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a framework for line aspect defined by - the color aColor - the type of line aType and - the line thickness aWidth. Type of line refers to whether the line is solid or dotted, for example.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :param aType:
        :type aType: Aspect_TypeOfLine
        :param aWidth:
        :type aWidth: float
        :rtype: None

        :param aColor:
        :type aColor: Quantity_Color &
        :param aType:
        :type aType: Aspect_TypeOfLine
        :param aWidth:
        :type aWidth: float
        :rtype: None

        """
        _Prs3d.Prs3d_LineAspect_swiginit(self, _Prs3d.new_Prs3d_LineAspect(*args))

    def SetColor(self, *args):
        """
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        * Sets the line color defined at the time of construction. Default value: Quantity_NOC_YELLOW

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _Prs3d.Prs3d_LineAspect_SetColor(self, *args)


    def SetTypeOfLine(self, *args):
        """
        * Sets the type of line defined at the time of construction. This could, for example, be solid, dotted or made up of dashes. Default value: Aspect_TOL_SOLID

        :param aType:
        :type aType: Aspect_TypeOfLine
        :rtype: None

        """
        return _Prs3d.Prs3d_LineAspect_SetTypeOfLine(self, *args)


    def SetWidth(self, *args):
        """
        * Sets the line width defined at the time of construction. Default value: 1.

        :param aWidth:
        :type aWidth: float
        :rtype: None

        """
        return _Prs3d.Prs3d_LineAspect_SetWidth(self, *args)


    def aspect(self, *args):
        """
        * Returns the line aspect. This is defined as the set of color, type and thickness attributes.

        :rtype: Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Prs3d_LineAspect_aspect(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_LineAspect self)"""
        return _Prs3d.Prs3d_LineAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_LineAspect self) -> Handle_Prs3d_LineAspect"""
        return _Prs3d.Prs3d_LineAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_LineAspect.SetColor = new_instancemethod(_Prs3d.Prs3d_LineAspect_SetColor, None, Prs3d_LineAspect)
Prs3d_LineAspect.SetTypeOfLine = new_instancemethod(_Prs3d.Prs3d_LineAspect_SetTypeOfLine, None, Prs3d_LineAspect)
Prs3d_LineAspect.SetWidth = new_instancemethod(_Prs3d.Prs3d_LineAspect_SetWidth, None, Prs3d_LineAspect)
Prs3d_LineAspect.aspect = new_instancemethod(_Prs3d.Prs3d_LineAspect_aspect, None, Prs3d_LineAspect)
Prs3d_LineAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_LineAspect__kill_pointed, None, Prs3d_LineAspect)
Prs3d_LineAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_LineAspect_GetHandle, None, Prs3d_LineAspect)
Prs3d_LineAspect_swigregister = _Prs3d.Prs3d_LineAspect_swigregister
Prs3d_LineAspect_swigregister(Prs3d_LineAspect)

class Handle_Prs3d_LineAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_LineAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_LineAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_LineAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_LineAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_LineAspect_Nullify, None, Handle_Prs3d_LineAspect)
Handle_Prs3d_LineAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_LineAspect_IsNull, None, Handle_Prs3d_LineAspect)
Handle_Prs3d_LineAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_LineAspect_GetObject, None, Handle_Prs3d_LineAspect)
Handle_Prs3d_LineAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_LineAspect__kill_pointed, None, Handle_Prs3d_LineAspect)
Handle_Prs3d_LineAspect_swigregister = _Prs3d.Handle_Prs3d_LineAspect_swigregister
Handle_Prs3d_LineAspect_swigregister(Handle_Prs3d_LineAspect)

def Handle_Prs3d_LineAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_LineAspect_DownCast(AnObject)
Handle_Prs3d_LineAspect_DownCast = _Prs3d.Handle_Prs3d_LineAspect_DownCast

class Prs3d_PlaneAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework for the display of planes.

        :rtype: None

        """
        _Prs3d.Prs3d_PlaneAspect_swiginit(self, _Prs3d.new_Prs3d_PlaneAspect(*args))

    def EdgesAspect(self, *args):
        """
        * Returns the attributes of displayed edges involved in the presentation of planes.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_PlaneAspect_EdgesAspect(self, *args)


    def IsoAspect(self, *args):
        """
        * Returns the attributes of displayed isoparameters involved in the presentation of planes.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_PlaneAspect_IsoAspect(self, *args)


    def ArrowAspect(self, *args):
        """
        * Returns the settings for displaying an arrow.

        :rtype: Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowAspect(self, *args)


    def SetArrowsLength(self, *args):
        """
        :param L:
        :type L: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsLength(self, *args)


    def ArrowsLength(self, *args):
        """
        * Returns the length of the arrow shaft used in the display of arrows.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsLength(self, *args)


    def SetArrowsSize(self, *args):
        """
        * Sets the angle of the arrowhead used in the display of planes.

        :param L:
        :type L: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsSize(self, *args)


    def ArrowsSize(self, *args):
        """
        * Returns the size of arrows used in the display of planes.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsSize(self, *args)


    def SetArrowsAngle(self, *args):
        """
        * Sets the angle of the arrowhead used in the display of arrows involved in the presentation of planes.

        :param ang:
        :type ang: Quantity_PlaneAngle
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsAngle(self, *args)


    def ArrowsAngle(self, *args):
        """
        * Returns the angle of the arrowhead used in the display of arrows involved in the presentation of planes.

        :rtype: Quantity_PlaneAngle

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsAngle(self, *args)


    def SetDisplayCenterArrow(self, *args):
        """
        * Sets the display attributes defined in DisplayCenterArrow to active.

        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayCenterArrow(self, *args)


    def DisplayCenterArrow(self, *args):
        """
        * Returns true if the display of center arrows is allowed.

        :rtype: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayCenterArrow(self, *args)


    def SetDisplayEdgesArrows(self, *args):
        """
        * Sets the display attributes defined in DisplayEdgesArrows to active.

        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdgesArrows(self, *args)


    def DisplayEdgesArrows(self, *args):
        """
        * Returns true if the display of edge arrows is allowed.

        :rtype: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdgesArrows(self, *args)


    def SetDisplayEdges(self, *args):
        """
        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdges(self, *args)


    def DisplayEdges(self, *args):
        """
        :rtype: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdges(self, *args)


    def SetDisplayIso(self, *args):
        """
        * Sets the display attributes defined in DisplayIso to active.

        :param draw:
        :type draw: bool
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayIso(self, *args)


    def DisplayIso(self, *args):
        """
        * Returns true if the display of isoparameters is allowed.

        :rtype: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayIso(self, *args)


    def SetPlaneLength(self, *args):
        """
        :param LX:
        :type LX: Quantity_Length
        :param LY:
        :type LY: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetPlaneLength(self, *args)


    def PlaneXLength(self, *args):
        """
        * Returns the length of the x axis used in the display of planes.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneXLength(self, *args)


    def PlaneYLength(self, *args):
        """
        * Returns the length of the y axis used in the display of planes.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneYLength(self, *args)


    def SetIsoDistance(self, *args):
        """
        * Sets the distance L between isoparameters used in the display of planes.

        :param L:
        :type L: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_PlaneAspect_SetIsoDistance(self, *args)


    def IsoDistance(self, *args):
        """
        * Returns the distance between isoparameters used in the display of planes.

        :rtype: Quantity_Length

        """
        return _Prs3d.Prs3d_PlaneAspect_IsoDistance(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_PlaneAspect self)"""
        return _Prs3d.Prs3d_PlaneAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_PlaneAspect self) -> Handle_Prs3d_PlaneAspect"""
        return _Prs3d.Prs3d_PlaneAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_PlaneAspect.EdgesAspect = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_EdgesAspect, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.IsoAspect = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_IsoAspect, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.ArrowAspect = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_ArrowAspect, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetArrowsLength = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetArrowsLength, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.ArrowsLength = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_ArrowsLength, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetArrowsSize = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetArrowsSize, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.ArrowsSize = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_ArrowsSize, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetArrowsAngle = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetArrowsAngle, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.ArrowsAngle = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_ArrowsAngle, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetDisplayCenterArrow = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetDisplayCenterArrow, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.DisplayCenterArrow = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_DisplayCenterArrow, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetDisplayEdgesArrows = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetDisplayEdgesArrows, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.DisplayEdgesArrows = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_DisplayEdgesArrows, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetDisplayEdges = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetDisplayEdges, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.DisplayEdges = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_DisplayEdges, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetDisplayIso = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetDisplayIso, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.DisplayIso = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_DisplayIso, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetPlaneLength = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetPlaneLength, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.PlaneXLength = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_PlaneXLength, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.PlaneYLength = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_PlaneYLength, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.SetIsoDistance = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_SetIsoDistance, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.IsoDistance = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_IsoDistance, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_PlaneAspect__kill_pointed, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_PlaneAspect_GetHandle, None, Prs3d_PlaneAspect)
Prs3d_PlaneAspect_swigregister = _Prs3d.Prs3d_PlaneAspect_swigregister
Prs3d_PlaneAspect_swigregister(Prs3d_PlaneAspect)

class Handle_Prs3d_PlaneAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_PlaneAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_PlaneAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PlaneAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_PlaneAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneAspect_Nullify, None, Handle_Prs3d_PlaneAspect)
Handle_Prs3d_PlaneAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneAspect_IsNull, None, Handle_Prs3d_PlaneAspect)
Handle_Prs3d_PlaneAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneAspect_GetObject, None, Handle_Prs3d_PlaneAspect)
Handle_Prs3d_PlaneAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_PlaneAspect__kill_pointed, None, Handle_Prs3d_PlaneAspect)
Handle_Prs3d_PlaneAspect_swigregister = _Prs3d.Handle_Prs3d_PlaneAspect_swigregister
Handle_Prs3d_PlaneAspect_swigregister(Handle_Prs3d_PlaneAspect)

def Handle_Prs3d_PlaneAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_PlaneAspect_DownCast(AnObject)
Handle_Prs3d_PlaneAspect_DownCast = _Prs3d.Handle_Prs3d_PlaneAspect_DownCast

class Prs3d_PointAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aType:
        :type aType: Aspect_TypeOfMarker
        :param aColor:
        :type aColor: Quantity_Color &
        :param aScale:
        :type aScale: float
        :rtype: None

        :param aType:
        :type aType: Aspect_TypeOfMarker
        :param aColor:
        :type aColor: Quantity_NameOfColor
        :param aScale:
        :type aScale: float
        :rtype: None

        * defines only the urer defined marker point.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AWidth:
        :type AWidth: int
        :param AHeight:
        :type AHeight: int
        :param ATexture:
        :type ATexture: Handle_TColStd_HArray1OfByte &
        :rtype: None

        """
        _Prs3d.Prs3d_PointAspect_swiginit(self, _Prs3d.new_Prs3d_PointAspect(*args))

    def SetColor(self, *args):
        """
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        * defines the color to be used when drawing a point. Default value: Quantity_NOC_YELLOW

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _Prs3d.Prs3d_PointAspect_SetColor(self, *args)


    def SetTypeOfMarker(self, *args):
        """
        * defines the type of representation to be used when drawing a point. Default value: Aspect_TOM_PLUS

        :param aType:
        :type aType: Aspect_TypeOfMarker
        :rtype: None

        """
        return _Prs3d.Prs3d_PointAspect_SetTypeOfMarker(self, *args)


    def SetScale(self, *args):
        """
        * defines the size of the marker used when drawing a point. Default value: 1.

        :param aScale:
        :type aScale: float
        :rtype: None

        """
        return _Prs3d.Prs3d_PointAspect_SetScale(self, *args)


    def aspect(self, *args):
        """
        :rtype: Handle_Graphic3d_AspectMarker3d

        """
        return _Prs3d.Prs3d_PointAspect_aspect(self, *args)


    def GetTextureSize(self, *args):
        """
        * Returns marker's texture size.

        :param AWidth:
        :type AWidth: int &
        :param AHeight:
        :type AHeight: int &
        :rtype: None

        """
        return _Prs3d.Prs3d_PointAspect_GetTextureSize(self, *args)


    def GetTexture(self, *args):
        """
        * Returns marker's texture.

        :rtype: Graphic3d_MarkerImage_Handle

        """
        return _Prs3d.Prs3d_PointAspect_GetTexture(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_PointAspect self)"""
        return _Prs3d.Prs3d_PointAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_PointAspect self) -> Handle_Prs3d_PointAspect"""
        return _Prs3d.Prs3d_PointAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_PointAspect.SetColor = new_instancemethod(_Prs3d.Prs3d_PointAspect_SetColor, None, Prs3d_PointAspect)
Prs3d_PointAspect.SetTypeOfMarker = new_instancemethod(_Prs3d.Prs3d_PointAspect_SetTypeOfMarker, None, Prs3d_PointAspect)
Prs3d_PointAspect.SetScale = new_instancemethod(_Prs3d.Prs3d_PointAspect_SetScale, None, Prs3d_PointAspect)
Prs3d_PointAspect.aspect = new_instancemethod(_Prs3d.Prs3d_PointAspect_aspect, None, Prs3d_PointAspect)
Prs3d_PointAspect.GetTextureSize = new_instancemethod(_Prs3d.Prs3d_PointAspect_GetTextureSize, None, Prs3d_PointAspect)
Prs3d_PointAspect.GetTexture = new_instancemethod(_Prs3d.Prs3d_PointAspect_GetTexture, None, Prs3d_PointAspect)
Prs3d_PointAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_PointAspect__kill_pointed, None, Prs3d_PointAspect)
Prs3d_PointAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_PointAspect_GetHandle, None, Prs3d_PointAspect)
Prs3d_PointAspect_swigregister = _Prs3d.Prs3d_PointAspect_swigregister
Prs3d_PointAspect_swigregister(Prs3d_PointAspect)

class Handle_Prs3d_PointAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_PointAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_PointAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PointAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_PointAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_PointAspect_Nullify, None, Handle_Prs3d_PointAspect)
Handle_Prs3d_PointAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_PointAspect_IsNull, None, Handle_Prs3d_PointAspect)
Handle_Prs3d_PointAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_PointAspect_GetObject, None, Handle_Prs3d_PointAspect)
Handle_Prs3d_PointAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_PointAspect__kill_pointed, None, Handle_Prs3d_PointAspect)
Handle_Prs3d_PointAspect_swigregister = _Prs3d.Handle_Prs3d_PointAspect_swigregister
Handle_Prs3d_PointAspect_swigregister(Handle_Prs3d_PointAspect)

def Handle_Prs3d_PointAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_PointAspect_DownCast(AnObject)
Handle_Prs3d_PointAspect_DownCast = _Prs3d.Handle_Prs3d_PointAspect_DownCast

class Prs3d_ShadingAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework to display shading.

        :rtype: None

        """
        _Prs3d.Prs3d_ShadingAspect_swiginit(self, _Prs3d.new_Prs3d_ShadingAspect(*args))

    def SetColor(self, *args):
        """
        * Change the polygons interior color and material ambient color.

        :param aColor:
        :type aColor: Quantity_Color &
        :param aModel: default value is Aspect_TOFM_BOTH_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: None

        * Change the polygons interior color and material ambient color.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :param aModel: default value is Aspect_TOFM_BOTH_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: None

        """
        return _Prs3d.Prs3d_ShadingAspect_SetColor(self, *args)


    def SetMaterial(self, *args):
        """
        * Change the polygons material aspect.

        :param aMaterial:
        :type aMaterial: Graphic3d_MaterialAspect &
        :param aModel: default value is Aspect_TOFM_BOTH_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: None

        :param aMaterial:
        :type aMaterial: Graphic3d_NameOfMaterial
        :param aModel: default value is Aspect_TOFM_BOTH_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: None

        """
        return _Prs3d.Prs3d_ShadingAspect_SetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        * Change the polygons transparency value. Warning : aValue must be in the range 0,1. 0 is the default (NO transparent)

        :param aValue:
        :type aValue: float
        :param aModel: default value is Aspect_TOFM_BOTH_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: None

        """
        return _Prs3d.Prs3d_ShadingAspect_SetTransparency(self, *args)


    def SetAspect(self, *args):
        """
        * Change the polygons aspect properties.

        :param Asp:
        :type Asp: Handle_Graphic3d_AspectFillArea3d &
        :rtype: None

        """
        return _Prs3d.Prs3d_ShadingAspect_SetAspect(self, *args)


    def Color(self, *args):
        """
        * Returns the polygons color.

        :param aModel: default value is Aspect_TOFM_FRONT_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: Quantity_Color

        """
        return _Prs3d.Prs3d_ShadingAspect_Color(self, *args)


    def Material(self, *args):
        """
        * Returns the polygons material aspect.

        :param aModel: default value is Aspect_TOFM_FRONT_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: Graphic3d_MaterialAspect

        """
        return _Prs3d.Prs3d_ShadingAspect_Material(self, *args)


    def Transparency(self, *args):
        """
        * Returns the polygons transparency value.

        :param aModel: default value is Aspect_TOFM_FRONT_SIDE
        :type aModel: Aspect_TypeOfFacingModel
        :rtype: float

        """
        return _Prs3d.Prs3d_ShadingAspect_Transparency(self, *args)


    def aspect(self, *args):
        """
        * Returns the polygons aspect properties.

        :rtype: Handle_Graphic3d_AspectFillArea3d

        """
        return _Prs3d.Prs3d_ShadingAspect_aspect(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_ShadingAspect self)"""
        return _Prs3d.Prs3d_ShadingAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_ShadingAspect self) -> Handle_Prs3d_ShadingAspect"""
        return _Prs3d.Prs3d_ShadingAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_ShadingAspect.SetColor = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_SetColor, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.SetMaterial = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_SetMaterial, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.SetTransparency = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_SetTransparency, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.SetAspect = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_SetAspect, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.Color = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_Color, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.Material = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_Material, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.Transparency = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_Transparency, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.aspect = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_aspect, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_ShadingAspect__kill_pointed, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_ShadingAspect_GetHandle, None, Prs3d_ShadingAspect)
Prs3d_ShadingAspect_swigregister = _Prs3d.Prs3d_ShadingAspect_swigregister
Prs3d_ShadingAspect_swigregister(Prs3d_ShadingAspect)

class Handle_Prs3d_ShadingAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_ShadingAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_ShadingAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_ShadingAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_ShadingAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_ShadingAspect_Nullify, None, Handle_Prs3d_ShadingAspect)
Handle_Prs3d_ShadingAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_ShadingAspect_IsNull, None, Handle_Prs3d_ShadingAspect)
Handle_Prs3d_ShadingAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_ShadingAspect_GetObject, None, Handle_Prs3d_ShadingAspect)
Handle_Prs3d_ShadingAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_ShadingAspect__kill_pointed, None, Handle_Prs3d_ShadingAspect)
Handle_Prs3d_ShadingAspect_swigregister = _Prs3d.Handle_Prs3d_ShadingAspect_swigregister
Handle_Prs3d_ShadingAspect_swigregister(Handle_Prs3d_ShadingAspect)

def Handle_Prs3d_ShadingAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_ShadingAspect_DownCast(AnObject)
Handle_Prs3d_ShadingAspect_DownCast = _Prs3d.Handle_Prs3d_ShadingAspect_DownCast

class Prs3d_Text(Prs3d_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Draw(*args):
        """
        * Defines the display of the text aText at the point AttachmentPoint. The drawer aDrawer specifies the display attributes which texts will have. The presentation object aPresentation stores the information defined in this framework. static void Draw (const Handle_Prs3d_Presentation& aPresentation, const Handle_Prs3d_TextAspect& anAspect, const TCollection_ExtendedString& aText, const gp_Pnt& AttachmentPoint);

        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :param aDrawer:
        :type aDrawer: Handle_Prs3d_Drawer &
        :param aText:
        :type aText: TCollection_ExtendedString &
        :param AttachmentPoint:
        :type AttachmentPoint: gp_Pnt
        :rtype: void

        * Defines the display of the text aText at the point AttachmentPoint. The text aspect object anAspect specifies the display attributes which texts will have. The presentation object aPresentation stores the information defined in this framework. This syntax could be used if you had not already defined text display attributes in a drawer or if you wanted to exceptionally overide the definition provided in your drawer.

        :param aPresentation:
        :type aPresentation: Handle_Prs3d_Presentation &
        :param anAspect:
        :type anAspect: Handle_Prs3d_TextAspect &
        :param aText:
        :type aText: TCollection_ExtendedString &
        :param AttachmentPoint:
        :type AttachmentPoint: gp_Pnt
        :rtype: void

        """
        return _Prs3d.Prs3d_Text_Draw(*args)

    Draw = staticmethod(Draw)

    def __init__(self):
        _Prs3d.Prs3d_Text_swiginit(self, _Prs3d.new_Prs3d_Text())

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_Text._kill_pointed = new_instancemethod(_Prs3d.Prs3d_Text__kill_pointed, None, Prs3d_Text)
Prs3d_Text_swigregister = _Prs3d.Prs3d_Text_swigregister
Prs3d_Text_swigregister(Prs3d_Text)

def Prs3d_Text_Draw(*args):
    """
    * Defines the display of the text aText at the point AttachmentPoint. The drawer aDrawer specifies the display attributes which texts will have. The presentation object aPresentation stores the information defined in this framework. static void Draw (const Handle_Prs3d_Presentation& aPresentation, const Handle_Prs3d_TextAspect& anAspect, const TCollection_ExtendedString& aText, const gp_Pnt& AttachmentPoint);

    :param aPresentation:
    :type aPresentation: Handle_Prs3d_Presentation &
    :param aDrawer:
    :type aDrawer: Handle_Prs3d_Drawer &
    :param aText:
    :type aText: TCollection_ExtendedString &
    :param AttachmentPoint:
    :type AttachmentPoint: gp_Pnt
    :rtype: void

    * Defines the display of the text aText at the point AttachmentPoint. The text aspect object anAspect specifies the display attributes which texts will have. The presentation object aPresentation stores the information defined in this framework. This syntax could be used if you had not already defined text display attributes in a drawer or if you wanted to exceptionally overide the definition provided in your drawer.

    :param aPresentation:
    :type aPresentation: Handle_Prs3d_Presentation &
    :param anAspect:
    :type anAspect: Handle_Prs3d_TextAspect &
    :param aText:
    :type aText: TCollection_ExtendedString &
    :param AttachmentPoint:
    :type AttachmentPoint: gp_Pnt
    :rtype: void

    """
    return _Prs3d.Prs3d_Text_Draw(*args)

class Prs3d_TextAspect(Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty framework for defining display attributes of text.

        :rtype: None

        """
        _Prs3d.Prs3d_TextAspect_swiginit(self, _Prs3d.new_Prs3d_TextAspect(*args))

    def SetColor(self, *args):
        """
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: None

        * Sets the color of the type used in text display.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetColor(self, *args)


    def SetFont(self, *args):
        """
        * Sets the font used in text display.

        :param aFont:
        :type aFont: char *
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetFont(self, *args)


    def SetHeightWidthRatio(self, *args):
        """
        * Returns the height-width ratio, also known as the expansion factor.

        :param aRatio:
        :type aRatio: float
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetHeightWidthRatio(self, *args)


    def SetSpace(self, *args):
        """
        * Sets the length of the box which text will occupy.

        :param aSpace:
        :type aSpace: Quantity_Length
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetSpace(self, *args)


    def SetHeight(self, *args):
        """
        * Sets the height of the text.

        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetHeight(self, *args)


    def SetAngle(self, *args):
        """
        * Sets the angle

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetAngle(self, *args)


    def Height(self, *args):
        """
        * Returns the height of the text box.

        :rtype: float

        """
        return _Prs3d.Prs3d_TextAspect_Height(self, *args)


    def Angle(self, *args):
        """
        * Returns the angle

        :rtype: Quantity_PlaneAngle

        """
        return _Prs3d.Prs3d_TextAspect_Angle(self, *args)


    def SetHorizontalJustification(self, *args):
        """
        * Sets horizontal alignment of text.

        :param aJustification:
        :type aJustification: Graphic3d_HorizontalTextAlignment
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetHorizontalJustification(self, *args)


    def SetVerticalJustification(self, *args):
        """
        * Sets the vertical alignment of text.

        :param aJustification:
        :type aJustification: Graphic3d_VerticalTextAlignment
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetVerticalJustification(self, *args)


    def SetOrientation(self, *args):
        """
        * Sets the orientation of text.

        :param anOrientation:
        :type anOrientation: Graphic3d_TextPath
        :rtype: None

        """
        return _Prs3d.Prs3d_TextAspect_SetOrientation(self, *args)


    def HorizontalJustification(self, *args):
        """
        * Returns the horizontal alignment of the text. The range of values includes: - left - center - right, and - normal (justified).

        :rtype: Graphic3d_HorizontalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_HorizontalJustification(self, *args)


    def VerticalJustification(self, *args):
        """
        * Returns the vertical alignment of the text. The range of values includes: - normal - top - cap - half - base - bottom

        :rtype: Graphic3d_VerticalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_VerticalJustification(self, *args)


    def Orientation(self, *args):
        """
        * Returns the orientation of the text. Text can be displayed in the following directions: - up - down - left, or - right

        :rtype: Graphic3d_TextPath

        """
        return _Prs3d.Prs3d_TextAspect_Orientation(self, *args)


    def aspect(self, *args):
        """
        * Returns the purely textual attributes used in the display of text. These include: - color - font - height/width ratio, that is, the expansion factor, and - space between characters.

        :rtype: Handle_Graphic3d_AspectText3d

        """
        return _Prs3d.Prs3d_TextAspect_aspect(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_TextAspect self)"""
        return _Prs3d.Prs3d_TextAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_TextAspect self) -> Handle_Prs3d_TextAspect"""
        return _Prs3d.Prs3d_TextAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_TextAspect.SetColor = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetColor, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetFont = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetFont, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetHeightWidthRatio = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetHeightWidthRatio, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetSpace = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetSpace, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetHeight = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetHeight, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetAngle = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetAngle, None, Prs3d_TextAspect)
Prs3d_TextAspect.Height = new_instancemethod(_Prs3d.Prs3d_TextAspect_Height, None, Prs3d_TextAspect)
Prs3d_TextAspect.Angle = new_instancemethod(_Prs3d.Prs3d_TextAspect_Angle, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetHorizontalJustification = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetHorizontalJustification, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetVerticalJustification = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetVerticalJustification, None, Prs3d_TextAspect)
Prs3d_TextAspect.SetOrientation = new_instancemethod(_Prs3d.Prs3d_TextAspect_SetOrientation, None, Prs3d_TextAspect)
Prs3d_TextAspect.HorizontalJustification = new_instancemethod(_Prs3d.Prs3d_TextAspect_HorizontalJustification, None, Prs3d_TextAspect)
Prs3d_TextAspect.VerticalJustification = new_instancemethod(_Prs3d.Prs3d_TextAspect_VerticalJustification, None, Prs3d_TextAspect)
Prs3d_TextAspect.Orientation = new_instancemethod(_Prs3d.Prs3d_TextAspect_Orientation, None, Prs3d_TextAspect)
Prs3d_TextAspect.aspect = new_instancemethod(_Prs3d.Prs3d_TextAspect_aspect, None, Prs3d_TextAspect)
Prs3d_TextAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_TextAspect__kill_pointed, None, Prs3d_TextAspect)
Prs3d_TextAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_TextAspect_GetHandle, None, Prs3d_TextAspect)
Prs3d_TextAspect_swigregister = _Prs3d.Prs3d_TextAspect_swigregister
Prs3d_TextAspect_swigregister(Prs3d_TextAspect)

class Handle_Prs3d_TextAspect(Handle_Prs3d_BasicAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_TextAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_TextAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_TextAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_TextAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_TextAspect_Nullify, None, Handle_Prs3d_TextAspect)
Handle_Prs3d_TextAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_TextAspect_IsNull, None, Handle_Prs3d_TextAspect)
Handle_Prs3d_TextAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_TextAspect_GetObject, None, Handle_Prs3d_TextAspect)
Handle_Prs3d_TextAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_TextAspect__kill_pointed, None, Handle_Prs3d_TextAspect)
Handle_Prs3d_TextAspect_swigregister = _Prs3d.Handle_Prs3d_TextAspect_swigregister
Handle_Prs3d_TextAspect_swigregister(Handle_Prs3d_TextAspect)

def Handle_Prs3d_TextAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_TextAspect_DownCast(AnObject)
Handle_Prs3d_TextAspect_DownCast = _Prs3d.Handle_Prs3d_TextAspect_DownCast

class Prs3d_IsoAspect(Prs3d_LineAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a framework to define display attributes of isoparameters. These include: - the color attribute aColor - the type of line aType - the width value aWidth - aNumber, the number of isoparameters to be displayed.

        :param aColor:
        :type aColor: Quantity_NameOfColor
        :param aType:
        :type aType: Aspect_TypeOfLine
        :param aWidth:
        :type aWidth: float
        :param aNumber:
        :type aNumber: int
        :rtype: None

        :param aColor:
        :type aColor: Quantity_Color &
        :param aType:
        :type aType: Aspect_TypeOfLine
        :param aWidth:
        :type aWidth: float
        :param aNumber:
        :type aNumber: int
        :rtype: None

        """
        _Prs3d.Prs3d_IsoAspect_swiginit(self, _Prs3d.new_Prs3d_IsoAspect(*args))

    def SetNumber(self, *args):
        """
        * defines the number of U or V isoparametric curves  to be drawn for a single face. Default value: 10

        :param aNumber:
        :type aNumber: int
        :rtype: None

        """
        return _Prs3d.Prs3d_IsoAspect_SetNumber(self, *args)


    def Number(self, *args):
        """
        * returns the number of U or V isoparametric curves drawn for a single face.

        :rtype: int

        """
        return _Prs3d.Prs3d_IsoAspect_Number(self, *args)


    def _kill_pointed(self):
        """_kill_pointed(Prs3d_IsoAspect self)"""
        return _Prs3d.Prs3d_IsoAspect__kill_pointed(self)


    def GetHandle(self):
        """GetHandle(Prs3d_IsoAspect self) -> Handle_Prs3d_IsoAspect"""
        return _Prs3d.Prs3d_IsoAspect_GetHandle(self)


    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


Prs3d_IsoAspect.SetNumber = new_instancemethod(_Prs3d.Prs3d_IsoAspect_SetNumber, None, Prs3d_IsoAspect)
Prs3d_IsoAspect.Number = new_instancemethod(_Prs3d.Prs3d_IsoAspect_Number, None, Prs3d_IsoAspect)
Prs3d_IsoAspect._kill_pointed = new_instancemethod(_Prs3d.Prs3d_IsoAspect__kill_pointed, None, Prs3d_IsoAspect)
Prs3d_IsoAspect.GetHandle = new_instancemethod(_Prs3d.Prs3d_IsoAspect_GetHandle, None, Prs3d_IsoAspect)
Prs3d_IsoAspect_swigregister = _Prs3d.Prs3d_IsoAspect_swigregister
Prs3d_IsoAspect_swigregister(Prs3d_IsoAspect)

class Handle_Prs3d_IsoAspect(Handle_Prs3d_LineAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Prs3d.Handle_Prs3d_IsoAspect_swiginit(self, _Prs3d.new_Handle_Prs3d_IsoAspect(*args))
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_IsoAspect_DownCast)

    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_Prs3d_IsoAspect.Nullify = new_instancemethod(_Prs3d.Handle_Prs3d_IsoAspect_Nullify, None, Handle_Prs3d_IsoAspect)
Handle_Prs3d_IsoAspect.IsNull = new_instancemethod(_Prs3d.Handle_Prs3d_IsoAspect_IsNull, None, Handle_Prs3d_IsoAspect)
Handle_Prs3d_IsoAspect.GetObject = new_instancemethod(_Prs3d.Handle_Prs3d_IsoAspect_GetObject, None, Handle_Prs3d_IsoAspect)
Handle_Prs3d_IsoAspect._kill_pointed = new_instancemethod(_Prs3d.Handle_Prs3d_IsoAspect__kill_pointed, None, Handle_Prs3d_IsoAspect)
Handle_Prs3d_IsoAspect_swigregister = _Prs3d.Handle_Prs3d_IsoAspect_swigregister
Handle_Prs3d_IsoAspect_swigregister(Handle_Prs3d_IsoAspect)

def Handle_Prs3d_IsoAspect_DownCast(AnObject):
    return _Prs3d.Handle_Prs3d_IsoAspect_DownCast(AnObject)
Handle_Prs3d_IsoAspect_DownCast = _Prs3d.Handle_Prs3d_IsoAspect_DownCast



